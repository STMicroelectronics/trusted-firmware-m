/**
  ******************************************************************************
  * @file    stm32mp257cxx_cm33.h
  * @author  MCD Application Team
  * @brief   CMSIS stm32mp257cxx_cm33 Device Peripheral Access Layer Header File.
  *
  *          This file contains:
  *           - Data structures and the address mapping for all peripherals
  *           - Peripheral registers declarations and bits definition
  *           - Macros to access peripherals registers hardware
  *
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2019 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/** @addtogroup CMSIS_Device
  * @{
  */

/** @addtogroup stm32mp257cxx_cm33
  * @{
  */

#ifndef __STM32MP257Cxx_CM33_H
#define __STM32MP257Cxx_CM33_H

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */

/** @addtogroup Peripheral_interrupt_number_definition
  * @{
  */

 /**
 * @brief stm32mp2_m33 Interrupt Number Definition :
 *        - according to the selected device in @ref Library_configuration_section
 */
 typedef enum IRQn
  {
  /******  Cortex-M Processor Exceptions Numbers ***********************************************/
    NonMaskableInt_IRQn         = -14,  /*!< 2 Non Maskable Interrupt                          */
    HardFault_IRQn              = -13,  /*!< 3 Cortex-M Hard Fault Interrupt                   */
    MemoryManagement_IRQn       = -12,  /*!< 4 Cortex-M Memory Management Interrupt            */
    BusFault_IRQn               = -11,  /*!< 5 Cortex-M Bus Fault Interrupt                    */
    UsageFault_IRQn             = -10,  /*!< 6 Cortex-M Usage Fault Interrupt                  */
    SecureFault_IRQn            = -9,   /*!< 7 Cortex-M Secure Fault Interrupt                 */
    SVCall_IRQn                 = -5,   /*!< 11 Cortex-M SV Call Interrupt                     */
    DebugMonitor_IRQn           = -4,   /*!< 12 Cortex-M Debug Monitor Interrupt               */
    PendSV_IRQn                 = -2,   /*!< 14 Cortex-M Pend SV Interrupt                     */
    SysTick_IRQn                = -1,   /*!< 15 Cortex-M System Tick Interrupt                 */
  /******  STM32 specific Interrupt Numbers ****************************************************/
#if defined(STM32MP2XX_ASSY2_2_1)
    PVD_AVD_IRQn                = 0,    /*!< PVD & AVD detector through EXTI                   */
    RESERVED_1                  = 1,    /*!< reserved                                          */
#else
    PVD_IRQn                    = 0,    /*!< PVD detector through EXTI                         */
    PVM_IRQn                    = 1,    /*!< PVM detector through EXTI                         */
#endif
    IWDG3_IRQn                  = 2,    /*!< Independent Watchdog 3 Early wake interrupt       */
    IWDG4_IRQn                  = 3,    /*!< Independent Watchdog 4 Early wake interrupt       */
    IWDG1_RST_IRQn              = 4,    /*!< Independent Watchdog 1 Reset through EXTI         */
    IWDG2_RST_IRQn              = 5,    /*!< Independent Watchdog 2 Reset through EXTI         */
    IWDG4_RST_IRQn              = 6,    /*!< Independent Watchdog 4 Reset through EXTI         */
    IWDG5_RST_IRQn              = 7,    /*!< Independent Watchdog 5 Reset through EXTI         */
    WWDG1_IRQn                  = 8,    /*!< Window Watchdog 1 Early Wakeup interrupt          */
    WWDG2_IRQn                  = 9,    /*!< Window Watchdog 2 Early Wakeup interrupt          */
    RESERVED_10                 = 10,   /*!< reserved                                          */
    WWDG2_RST_IRQn              = 11,   /*!< Independent Watchdog 2 Reset through EXTI         */
    TAMP_IRQn                   = 12,   /*!< Tamper interrupt (include LSECSS interrupts)      */
    RTC_IRQn                    = 13,   /*!< RTC global interrupt                              */
    TAMP_S_IRQn                 = 14,   /*!< Tamper interrupt (include LSECSS interrupts)      */
    RTC_S_IRQn                  = 15,   /*!< RTC global secure interrupt                       */
    RCC_IRQn                    = 16,   /*!< RCC global interrupt                              */
    EXTI0_IRQn                  = 17,   /*!< EXTI Line 0 interrupt                             */
    EXTI1_IRQn                  = 18,   /*!< EXTI Line 1 interrupt                             */
    EXTI2_IRQn                  = 19,   /*!< EXTI Line 2 interrupt                             */
    EXTI3_IRQn                  = 20,   /*!< EXTI Line 3 interrupt                             */
    EXTI4_IRQn                  = 21,   /*!< EXTI Line 4 interrupt                             */
    EXTI5_IRQn                  = 22,   /*!< EXTI Line 5 interrupt                             */
    EXTI6_IRQn                  = 23,   /*!< EXTI Line 6 interrupt                             */
    EXTI7_IRQn                  = 24,   /*!< EXTI Line 7 interrupt                             */
    EXTI8_IRQn                  = 25,   /*!< EXTI Line 8 interrupt                             */
    EXTI9_IRQn                  = 26,   /*!< EXTI Line 9 interrupt                             */
    EXTI10_IRQn                 = 27,   /*!< EXTI Line 10 interrupt                            */
    EXTI11_IRQn                 = 28,   /*!< EXTI Line 11 interrupt                            */
    EXTI12_IRQn                 = 29,   /*!< EXTI Line 12 interrupt                            */
    EXTI13_IRQn                 = 30,   /*!< EXTI Line 13 interrupt                            */
    EXTI14_IRQn                 = 31,   /*!< EXTI Line 14 interrupt                            */
    EXTI15_IRQn                 = 32,   /*!< EXTI Line 15 interrupt                            */
    HPDMA1_Channel0_IRQn        = 33,   /*!< HPDMA1 Channel0 interrupt                         */
    HPDMA1_Channel1_IRQn        = 34,   /*!< HPDMA1 Channel1 interrupt                         */
    HPDMA1_Channel2_IRQn        = 35,   /*!< HPDMA1 Channel2 interrupt                         */
    HPDMA1_Channel3_IRQn        = 36,   /*!< HPDMA1 Channel3 interrupt                         */
    HPDMA1_Channel4_IRQn        = 37,   /*!< HPDMA1 Channel4 interrupt                         */
    HPDMA1_Channel5_IRQn        = 38,   /*!< HPDMA1 Channel5 interrupt                         */
    HPDMA1_Channel6_IRQn        = 39,   /*!< HPDMA1 Channel6 interrupt                         */
    HPDMA1_Channel7_IRQn        = 40,   /*!< HPDMA1 Channel7 interrupt                         */
    HPDMA1_Channel8_IRQn        = 41,   /*!< HPDMA1 Channel8 interrupt                         */
    HPDMA1_Channel9_IRQn        = 42,   /*!< HPDMA1 Channel9 interrupt                         */
    HPDMA1_Channel10_IRQn       = 43,   /*!< HPDMA1 Channel10 interrupt                        */
    HPDMA1_Channel11_IRQn       = 44,   /*!< HPDMA1 Channel11 interrupt                        */
    HPDMA1_Channel12_IRQn       = 45,   /*!< HPDMA1 Channel12 interrupt                        */
    HPDMA1_Channel13_IRQn       = 46,   /*!< HPDMA1 Channel13 interrupt                        */
    HPDMA1_Channel14_IRQn       = 47,   /*!< HPDMA1 Channel14 interrupt                        */
    HPDMA1_Channel15_IRQn       = 48,   /*!< HPDMA1 Channel15 interrupt                        */
    HPDMA2_Channel0_IRQn        = 49,   /*!< HPDMA2 Channel0 interrupt                         */
    HPDMA2_Channel1_IRQn        = 50,   /*!< HPDMA2 Channel1 interrupt                         */
    HPDMA2_Channel2_IRQn        = 51,   /*!< HPDMA2 Channel2 interrupt                         */
    HPDMA2_Channel3_IRQn        = 52,   /*!< HPDMA2 Channel3 interrupt                         */
    HPDMA2_Channel4_IRQn        = 53,   /*!< HPDMA2 Channel4 interrupt                         */
    HPDMA2_Channel5_IRQn        = 54,   /*!< HPDMA2 Channel5 interrupt                         */
    HPDMA2_Channel6_IRQn        = 55,   /*!< HPDMA2 Channel6 interrupt                         */
    HPDMA2_Channel7_IRQn        = 56,   /*!< HPDMA2 Channel7 interrupt                         */
    HPDMA2_Channel8_IRQn        = 57,   /*!< HPDMA2 Channel8 interrupt                         */
    HPDMA2_Channel9_IRQn        = 58,   /*!< HPDMA2 Channel9 interrupt                         */
    HPDMA2_Channel10_IRQn       = 59,   /*!< HPDMA2 Channel10 interrupt                        */
    HPDMA2_Channel11_IRQn       = 60,   /*!< HPDMA2 Channel11 interrupt                        */
    HPDMA2_Channel12_IRQn       = 61,   /*!< HPDMA2 Channel12 interrupt                        */
    HPDMA2_Channel13_IRQn       = 62,   /*!< HPDMA2 Channel13 interrupt                        */
    HPDMA2_Channel14_IRQn       = 63,   /*!< HPDMA2 Channel14 interrupt                        */
    HPDMA2_Channel15_IRQn       = 64,   /*!< HPDMA2 Channel15 interrupt                        */
    HPDMA3_Channel0_IRQn        = 65,   /*!< HPDMA3 Channel0 interrupt                         */
    HPDMA3_Channel1_IRQn        = 66,   /*!< HPDMA3 Channel1 interrupt                         */
    HPDMA3_Channel2_IRQn        = 67,   /*!< HPDMA3 Channel2 interrupt                         */
    HPDMA3_Channel3_IRQn        = 68,   /*!< HPDMA3 Channel3 interrupt                         */
    HPDMA3_Channel4_IRQn        = 69,   /*!< HPDMA3 Channel4 interrupt                         */
    HPDMA3_Channel5_IRQn        = 70,   /*!< HPDMA3 Channel5 interrupt                         */
    HPDMA3_Channel6_IRQn        = 71,   /*!< HPDMA3 Channel6 interrupt                         */
    HPDMA3_Channel7_IRQn        = 72,   /*!< HPDMA3 Channel7 interrupt                         */
    HPDMA3_Channel8_IRQn        = 73,   /*!< HPDMA3 Channel8 interrupt                         */
    HPDMA3_Channel9_IRQn        = 74,   /*!< HPDMA3 Channel9 interrupt                         */
    HPDMA3_Channel10_IRQn       = 75,   /*!< HPDMA3 Channel10 interrupt                        */
    HPDMA3_Channel11_IRQn       = 76,   /*!< HPDMA3 Channel11 interrupt                        */
    HPDMA3_Channel12_IRQn       = 77,   /*!< HPDMA3 Channel12 interrupt                        */
    HPDMA3_Channel13_IRQn       = 78,   /*!< HPDMA3 Channel13 interrupt                        */
    HPDMA3_Channel14_IRQn       = 79,   /*!< HPDMA3 Channel14 interrupt                        */
    HPDMA3_Channel15_IRQn       = 80,   /*!< HPDMA3 Channel15 interrupt                        */
    LPDMA_Channel0_IRQn         = 81,   /*!< LPDMA Channel0 interrupt                          */
    LPDMA_Channel1_IRQn         = 82,   /*!< LPDMA Channel1 interrupt                          */
    LPDMA_Channel2_IRQn         = 83,   /*!< LPDMA Channel2 interrupt                          */
    LPDMA_Channel3_IRQn         = 84,   /*!< LPDMA Channel3 interrupt                          */
    ICACHE_IRQn                 = 85,   /*!< ICACHE interrupt                                  */
    DCACHE_IRQn                 = 86,   /*!< DCACHE interrupt                                  */
    ADC1_IRQn                   = 87,   /*!< ADC1 interrupt                                    */
    ADC2_IRQn                   = 88,   /*!< ADC2 interrupt                                    */
    ADC3_IRQn                   = 89,   /*!< ADC3 interrupt                                    */
    FDCAN_CAL_IRQn              = 90,   /*!< FDCAN CCU interrupt                               */
    FDCAN1_IT0_IRQn             = 91,   /*!< FDCAN1 interrupt 0                                */
    FDCAN2_IT0_IRQn             = 92,   /*!< FDCAN2 interrupt 0                                */
    FDCAN3_IT0_IRQn             = 93,   /*!< FDCAN3 interrupt 0                                */
    FDCAN1_IT1_IRQn             = 94,   /*!< FDCAN1 interrupt 1                                */
    FDCAN2_IT1_IRQn             = 95,   /*!< FDCAN2 interrupt 1                                */
    FDCAN3_IT1_IRQn             = 96,   /*!< FDCAN3 interrupt 1                                */
    TIM1_BRK_IRQn               = 97,   /*!< TIM1 Break interrupt                              */
    TIM1_UP_IRQn                = 98,   /*!< TIM1 Update interrupt                             */
    TIM1_TRG_COM_IRQn           = 99,   /*!< TIM1 Trigger and Commutation interrupts           */
    TIM1_CC_IRQn                = 100,  /*!< TIM1 Capture Compare interrupt                    */
    TIM20_BRK_IRQn              = 101,  /*!< TIM20 Break interrupt                             */
    TIM20_UP_IRQn               = 102,  /*!< TIM20 Update interrupt                            */
    TIM20_TRG_COM_IRQn          = 103,  /*!< TIM20 Trigger and Commutation interrupts          */
    TIM20_CC_IRQn               = 104,  /*!< TIM20 Capture Compare interrupt                   */
    TIM2_IRQn                   = 105,  /*!< TIM2 interrupt                                    */
    TIM3_IRQn                   = 106,  /*!< TIM3 interrupt                                    */
    TIM4_IRQn                   = 107,  /*!< TIM4 interrupt                                    */
#if defined (STM32MP2XX_ASSY2_2_1)
    I2C1_EV_IRQn                = 108,  /*!< I2C1 event interrupt                              */
    I2C1_ER_IRQn                = 109,  /*!< I2C1 global error interrupt                       */
    I2C2_EV_IRQn                = 110,  /*!< I2C2 event interrupt                              */
    I2C2_ER_IRQn                = 111,  /*!< I2C2 global error interrupt                       */
#else /* STM32MP2XX_ASSY2_2_1 */
    I2C1_IRQn                   = 108,  /*!< I2C1 global interrupt                             */
    I3C1_IRQn                   = 109,  /*!< I3C1 global interrupt                             */
    I2C2_IRQn                   = 110,  /*!< I2C2 global interrupt                             */
    I3C2_IRQn                   = 111,  /*!< I3C2 global interrupt                             */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    SPI1_IRQn                   = 112,  /*!< SPI1 global interrupt                             */
    SPI2_IRQn                   = 113,  /*!< SPI2 global interrupt                             */
    USART1_IRQn                 = 114,  /*!< USART1 global interrupt                           */
    USART2_IRQn                 = 115,  /*!< USART2 global interrupt                           */
    USART3_IRQn                 = 116,  /*!< USART3 global interrupt                           */
#if defined (STM32MP2XX_ASSY2_2_1)
    RESERVED_117                = 117,  /*!< reserved                                          */
#else /* STM32MP2XX_ASSY2_2_1 */
    VDEC_IRQn                   = 117,  /*!< VDEC global interrupt                             */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    TIM8_BRK_IRQn               = 118,  /*!< TIM8 Break interrupt                              */
    TIM8_UP_IRQn                = 119,  /*!< TIM8 Update interrupt                             */
    TIM8_TRG_COM_IRQn           = 120,  /*!< TIM8 Trigger and Commutation interrupts           */
    TIM8_CC_IRQn                = 121,  /*!< TIM8 Capture Compare interrupt                    */
    FMC_IRQn                    = 122,  /*!< FMC global interrupt                              */
    SDMMC1_IRQn                 = 123,  /*!< SDMMC1 global interrupt                           */
    TIM5_IRQn                   = 124,  /*!< TIM5 global interrupt                             */
    SPI3_IRQn                   = 125,  /*!< SPI3 global interrupt                             */
    UART4_IRQn                  = 126,  /*!< UART4 global interrupt                            */
    UART5_IRQn                  = 127,  /*!< UART5 global interrupt                            */
    TIM6_IRQn                   = 128,  /*!< TIM6 interrupt                                    */
    TIM7_IRQn                   = 129,  /*!< TIM7 interrupt                                    */
#if defined (STM32MP2XX_ASSY2_2_1)
    ETH1_IRQn                   = 130,  /*!< ETH1 interrupt                                    */
    ETH1_WKUP_IRQn              = 131,  /*!< ETH1 wake-up interrupt (PMT)                      */
#else /* STM32MP2XX_ASSY2_2_1 */
    ETH1_SBD_IRQn               = 130,  /*!< ETH1 global interrupt                             */
    ETH1_PMT_IRQn               = 131,  /*!< ETH1 wake-up interrupt                            */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    ETH1_LPI_IRQn               = 132,  /*!< ETH1 LPI interrupt                                */
#if defined (STM32MP2XX_ASSY2_2_1)
    ETH2_IRQn                   = 133,  /*!< ETH2 interrupt                                    */
    ETH2_WKUP_IRQn              = 134,  /*!< ETH2 wake-up interrupt (PMT)                      */
#else /* STM32MP2XX_ASSY2_2_1 */
    ETH2_SBD_IRQn               = 133,  /*!< ETH2 global interrupt                             */
    ETH2_PMT_IRQn               = 134,  /*!< ETH2 wake-up interrupt                            */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    ETH2_LPI_IRQn               = 135,  /*!< ETH2 LPI interrupt                                */
    USART6_IRQn                 = 136,  /*!< USART6 global interrupt                           */
#if defined (STM32MP2XX_ASSY2_2_1)
    I2C3_EV_IRQn                = 137,  /*!< I2C3 event interrupt                              */
    I2C3_ER_IRQn                = 138,  /*!< I2C3 global error interrupt                       */
#else /* STM32MP2XX_ASSY2_2_1 */
    I2C3_IRQn                   = 137,  /*!< I2C3 global interrupt                             */
    I3C3_IRQn                   = 138,  /*!< I3C3 global interrupt                             */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    USBH_EHCI_IRQn              = 139,  /*!< USB Host EHCI interrupt                           */
    USBH_OHCI_IRQn              = 140,  /*!< USB Host OHCI interrupt                           */
    DCMI_PSSI_IRQn              = 141,  /*!< DCMI & PSSI global interrupt                      */
    CSI2HOST_IRQn               = 142,  /*!< CSI2HOST interrupt                                */
    DSI_IRQn                    = 143,  /*!< DSI Host controller global interrupt              */
    CRYP1_IRQn                  = 144,  /*!< Crypto1 interrupt                                 */
    HASH_IRQn                   = 145,  /*!< HASH interrupt                                    */
    PKA_IRQn                    = 146,  /*!< PKA interrupt                                     */
    FPU_IRQn                    = 147,  /*!< FPU global interrupt                              */
    UART7_IRQn                  = 148,  /*!< UART7 global interrupt                            */
    UART8_IRQn                  = 149,  /*!< UART8 global interrupt                            */
    UART9_IRQn                  = 150,  /*!< UART9 global interrupt                            */
    LPUART1_IRQn                = 151,  /*!< LPUART1 global interrupt                          */
    SPI4_IRQn                   = 152,  /*!< SPI4 global interrupt                             */
    SPI5_IRQn                   = 153,  /*!< SPI5 global interrupt                             */
    SPI6_IRQn                   = 154,  /*!< SPI6 global interrupt                             */
    SPI7_IRQn                   = 155,  /*!< SPI7 global interrupt                             */
    SPI8_IRQn                   = 156,  /*!< SPI8 global interrupt                             */
    SAI1_IRQn                   = 157,  /*!< SAI1 global interrupt                             */
    LTDC_IRQn                   = 158,  /*!< LTDC layer01 global interrupt                     */
    LTDC_ER_IRQn                = 159,  /*!< LTDC layer01 global error interrupt               */
    LTDC_L2_IRQn                = 160,  /*!< LTDC layer2 global interrupt                      */
    LTDC_L2_ER_IRQn             = 161,  /*!< LTDC layer2 global error interrupt                */
    SAI2_IRQn                   = 162,  /*!< SAI2 global interrupt                             */
    OCTOSPI1_IRQn               = 163,  /*!< OCTOSPI1 global interrupt                         */
    OCTOSPI2_IRQn               = 164,  /*!< OCTOSPI2 global interrupt                         */
#if defined (STM32MP2XX_ASSY2_2_1)
    OTFDEC_IRQn                 = 165,  /*!< OTFDEC interrupt                                  */
#else /*STM32MP2XX_ASSY2_2_1 */
    OTFDEC1_IRQn                = 165,  /*!< OTFDEC1 interrupt                                 */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    LPTIM1_IRQn                 = 166,  /*!< LPTIMER1 interrupt                                */
#if defined (STM32MP2XX_ASSY2_2_1)
    CEC_IRQn                    = 167,  /*!< HDMI-CEC global interrupt                         */
    I2C4_EV_IRQn                = 168,  /*!< I2C4 event interrupt                              */
    I2C4_ER_IRQn                = 169,  /*!< I2C4 global error interrupt                       */
#else /*STM32MP2XX_ASSY2_2_1 */
    VENC_IRQn                   = 167,  /*!< VENC global interrupt                             */
    I2C4_IRQn                   = 168,  /*!< I2C4 global interrupt                             */
    USBH_WAKEUP_IRQn            = 169,  /*!< USB Host remote wake up from USB2PHY1 interrupt   */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    SPDIFRX_IRQn                = 170,  /*!< SPDIFRX global interrupt                          */
    IPCC1_RX1_IRQn              = 171,  /*!< Mailbox 1 RX1 Occupied cpu2 interrupt             */
    IPCC1_TX1_IRQn              = 172,  /*!< Mailbox 1 TX1 Free cpu2 interrupt                 */
    IPCC1_RX1_S_IRQn            = 173,  /*!< Mailbox 1 RX1 Occupied cpu2 secure interrupt      */
    IPCC1_TX1_S_IRQn            = 174,  /*!< Mailbox 1 TX1 Free cpu2 secure interrupt          */
    IPCC2_RX1_IRQn              = 175,  /*!< Mailbox 2 RX1 Occupied cpu2 interrupt             */
    IPCC2_TX1_IRQn              = 176,  /*!< Mailbox 2 TX1 Free cpu2 interrupt                 */
    IPCC2_RX1_S_IRQn            = 177,  /*!< Mailbox 2 RX1 Occupied cpu2 secure interrupt      */
    IPCC2_TX1_S_IRQn            = 178,  /*!< Mailbox 2 TX1 Free cpu2 secure interrupt          */
    SAES_IRQn                   = 179,  /*!< secure AES interrupt                              */
    CRYP2_IRQn                  = 180,  /*!< Crypto2 interrupt                                 */
#if defined (STM32MP2XX_ASSY2_2_1)
    I2C5_EV_IRQn                = 181,  /*!< I2C5 event interrupt                              */
    I2C5_ER_IRQn                = 182,  /*!< I2C5 global error interrupt                       */
#else /*STM32MP2XX_ASSY2_2_1 */
    I2C5_IRQn                   = 181,  /*!< I2C5 global interrupt                             */
    USB3DR_WAKEUP_IRQn          = 182,  /*!< USB3 remote wake up from USB2PHY1 interrupt       */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    GPU_IRQn                    = 183,  /*!< GPU global interrupt                              */
    MDF1_FLT0_IRQn              = 184,  /*!< MDF1 Filter0 interrupt                            */
    MDF1_FLT1_IRQn              = 185,  /*!< MDF1 Filter1 interrupt                            */
    MDF1_FLT2_IRQn              = 186,  /*!< MDF1 Filter2 interrupt                            */
    MDF1_FLT3_IRQn              = 187,  /*!< MDF1 Filter3 interrupt                            */
    MDF1_FLT4_IRQn              = 188,  /*!< MDF1 Filter4 interrupt                            */
    MDF1_FLT5_IRQn              = 189,  /*!< MDF1 Filter5 interrupt                            */
    MDF1_FLT6_IRQn              = 190,  /*!< MDF1 Filter6 interrupt                            */
    MDF1_FLT7_IRQn              = 191,  /*!< MDF1 Filter7 interrupt                            */
    SAI3_IRQn                   = 192,  /*!< SAI3 global interrupt                             */
    TIM15_IRQn                  = 193,  /*!< TIMER15 global interrupt                          */
    TIM16_IRQn                  = 194,  /*!< TIMER16 global interrupt                          */
    TIM17_IRQn                  = 195,  /*!< TIMER17 global interrupt                          */
    TIM12_IRQn                  = 196,  /*!< TIMER12 global interrupt                          */
    SDMMC2_IRQn                 = 197,  /*!< SDMMC2 global interrupt                           */
    DCMIPP_IRQn                 = 198,  /*!< DCMIPP global interrupt                           */
    HSEM1_IRQn                  = 199,  /*!< HSEM1 Semaphore nonsecure interrupt 1             */
    HSEM1_S_IRQn                = 200,  /*!< HSEM1 Semaphore secure interrupt 1                */
    nCTIIRQ1_IRQn               = 201,  /*!< Cortex-M33 CTI interrupt 1                        */
    nCTIIRQ2_IRQn               = 202,  /*!< Cortex-M33 CTI interrupt 2                        */
    TIM13_IRQn                  = 203,  /*!< TIM13 global interrupt                            */
    TIM14_IRQn                  = 204,  /*!< TIM14 global interrupt                            */
    TIM10_IRQn                  = 205,  /*!< TIM10 global interrupt                            */
    RNG_IRQn                    = 206,  /*!< RNG global interrupt                              */
    MDF2_FLT_IRQn               = 207,  /*!< MDF2 Filter interrupt                             */
#if defined (STM32MP2XX_ASSY2_2_1)
    I2C6_EV_IRQn                = 208,  /*!< I2C6 event interrupt                              */
    I2C6_ER_IRQn                = 209,  /*!< I2C6 global error interrupt                       */
    I2C7_EV_IRQn                = 210,  /*!< I2C7 event interrupt                              */
    I2C7_ER_IRQn                = 211,  /*!< I2C7 global error interrupt                       */
    I2C8_EV_IRQn                = 212,  /*!< I2C8 event interrupt                              */
    I2C8_ER_IRQn                = 213,  /*!< I2C8 global error interrupt                       */
#else /* STM32MP2XX_ASSY2_2_1 */
    I2C6_IRQn                   = 208,  /*!< I2C6 global interrupt                             */
    SERDES_WAKEUP_IRQn          = 209,  /*!< SERDES LFPS start request interrupt               */
    I2C7_IRQn                   = 210,  /*!< I2C7 global interrupt                             */
    RESERVED_211                = 211,  /*!< reserved                                          */
    I2C8_IRQn                   = 212,  /*!< I2C8 global interrupt                             */
    I3C4_IRQn                   = 213,  /*!< I3C4 global interrupt                             */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    SDMMC3_IRQn                 = 214,  /*!< SDMMC3 global interrupt                           */
    LPTIM2_IRQn                 = 215,  /*!< LPTIMER2 global interrupt                         */
    LPTIM3_IRQn                 = 216,  /*!< LPTIMER3 global interrupt                         */
    LPTIM4_IRQn                 = 217,  /*!< LPTIMER4 global interrupt                         */
    LPTIM5_IRQn                 = 218,  /*!< LPTIMER5 global interrupt                         */
#if defined (STM32MP2XX_ASSY2_2_1)
    RESERVED_219                = 219,  /*!< reserved                                          */
#else /* STM32MP2XX_ASSY2_2_1 */
    OTFDEC2_IRQn                = 219,  /*!< OTFDEC2 interrupt                                 */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    CPU1_SEV_IRQn               = 220,  /*!< Cortex-A35 Send Event through EXTI                */
    CPU3_SEV_IRQn               = 221,  /*!< Cortex-M0+ Send Event through EXTI                */
    RCC_WAKEUP_IRQn             = 222,  /*!< RCC CPU2 Wake up interrupt                        */
    SAI4_IRQn                   = 223,  /*!< SAI4 global interrupt                             */
    DTS_IRQn                    = 224,  /*!< Temperature sensor interrupt                      */
    TIM11_IRQn                  = 225,  /*!< TIMER11 global interrupt                          */
    CPU2_WAKEUP_PIN_IRQn        = 226,  /*!< Interrupt for all 6 wake-up enabled by CPU2       */
    USB3DR_BC_IRQn              = 227,  /*!< USB3 BC interrupt                                 */
    USB3DR_IRQn                 = 228,  /*!< USB3 interrupt                                    */
    USBPD_IRQn                  = 229,  /*!< USB PD interrupt                                  */
    RESERVED_230                = 230,  /*!< reserved                                          */
    RESERVED_231                = 231,  /*!< reserved                                          */
    RESERVED_232                = 232,  /*!< reserved                                          */
    RESERVED_233                = 233,  /*!< reserved                                          */
    RESERVED_234                = 234,  /*!< reserved                                          */
    RESERVED_235                = 235,  /*!< reserved                                          */
    RESERVED_236                = 236,  /*!< reserved                                          */
    RESERVED_237                = 237,  /*!< reserved                                          */
    RESERVED_238                = 238,  /*!< reserved                                          */
    RESERVED_239                = 239,  /*!< reserved                                          */
#if defined (STM32MP2XX_ASSY2_2_1)
    RESERVED_240                = 240,  /*!< reserved                                          */
#else /* STM32MP2XX_ASSY2_2_1 */
    SERF_IRQn                   = 240,  /*!< SERF global interrupt                             */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    BUSPERFM_IRQn               = 241,  /*!< BUS Performance Monitor interrupt                 */
    RAMCFG_IRQn                 = 242,  /*!< RAM configuration global interrupt                */
    UMCTL2_IRQn                 = 243,  /*!< UMCTL2 interrupt                                  */
    DDRPHY_IRQn                 = 244,  /*!< DDRPHY interrupt                                  */
#if defined (STM32MP2XX_ASSY2_2_1)
    RSIMW1_IRQn                 = 245,  /*!< DDR RIF access filter interrupt                   */
#else /* STM32MP2XX_ASSY2_2_1 */
    RESERVED_245                = 245,  /*!< reserved                                          */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    IAC_IRQn                    = 246,  /*!< RIF Illegal access Controller interrupt           */
    VDDCPU_VD_IRQn              = 247,  /*!< VDDCPU voltage detector                           */
    VDDCORE_VD_IRQn             = 248,  /*!< VDDCORE voltage detector                          */
    RESERVED_249                = 249,  /*!< reserved                                          */
#if defined (STM32MP2XX_ASSY2_2_1)
    RESERVED_250                = 250,  /*!< reserved                                          */
    RESERVED_251                = 251,  /*!< reserved                                          */
    RESERVED_252                = 252,  /*!< reserved                                          */
    RESERVED_253                = 253,  /*!< reserved                                          */
    RESERVED_254                = 254,  /*!< reserved                                          */
    RESERVED_255                = 255,  /*!< reserved                                          */
    RESERVED_256                = 256,  /*!< reserved                                          */
#else /* STM32MP2XX_ASSY2_2_1 */
    ETHSW_IRQn                  = 250,  /*!< ETHSW global interrupt                            */
    ETHSW_MSG_BUF_IRQn          = 251,  /*!< ETHSW ACM Message buffer interrupt                */
    ETHSW_FSC_IRQn              = 252,  /*!< ETHSW ACM Scheduler interrupt                     */
    HPDMA1_WKUP_IRQn            = 253,  /*!< HPDMA1 channel 0 to 15 wake up                    */
    HPDMA2_WKUP_IRQn            = 254,  /*!< HPDMA2 channel 0 to 15 wake up                    */
    HPDMA3_WKUP_IRQn            = 255,  /*!< HPDMA3 channel 0 to 15 wake up                    */
    LPDMA_WKUP_IRQn             = 256,  /*!< LPDMA channel 0 to 3 wake up                      */
#endif /* else STM32MP2XX_ASSY2_2_1 */
    RESERVED_257                = 257,  /*!< reserved                                          */
    RESERVED_258                = 258,  /*!< reserved                                          */
    RESERVED_259                = 259,  /*!< reserved                                          */
    RESERVED_260                = 260,  /*!< reserved                                          */
    RESERVED_261                = 261,  /*!< reserved                                          */
    RESERVED_262                = 262,  /*!< reserved                                          */
    RESERVED_263                = 263,  /*!< reserved                                          */
    RESERVED_264                = 264,  /*!< reserved                                          */
    RESERVED_265                = 265,  /*!< reserved                                          */
    RESERVED_266                = 266,  /*!< reserved                                          */
    RESERVED_267                = 267,  /*!< reserved                                          */
    RESERVED_268                = 268,  /*!< reserved                                          */
    RESERVED_269                = 269,  /*!< reserved                                          */
    RESERVED_270                = 270,  /*!< reserved                                          */
    RESERVED_271                = 271,  /*!< reserved                                          */
    RESERVED_272                = 272,  /*!< reserved                                          */
    RESERVED_273                = 273,  /*!< reserved                                          */
    RESERVED_274                = 274,  /*!< reserved                                          */
    RESERVED_275                = 275,  /*!< reserved                                          */
    RESERVED_276                = 276,  /*!< reserved                                          */
    RESERVED_277                = 277,  /*!< reserved                                          */
    RESERVED_278                = 278,  /*!< reserved                                          */
    RESERVED_279                = 279,  /*!< reserved                                          */
    RESERVED_280                = 280,  /*!< reserved                                          */
    RESERVED_281                = 281,  /*!< reserved                                          */
    RESERVED_282                = 282,  /*!< reserved                                          */
    RESERVED_283                = 283,  /*!< reserved                                          */
    RESERVED_284                = 284,  /*!< reserved                                          */
    RESERVED_285                = 285,  /*!< reserved                                          */
    RESERVED_286                = 286,  /*!< reserved                                          */
    RESERVED_287                = 287,  /*!< reserved                                          */
    RESERVED_288                = 288,  /*!< reserved                                          */
    RESERVED_289                = 289,  /*!< reserved                                          */
    RESERVED_290                = 290,  /*!< reserved                                          */
    RESERVED_291                = 291,  /*!< reserved                                          */
    RESERVED_292                = 292,  /*!< reserved                                          */
    RESERVED_293                = 293,  /*!< reserved                                          */
    RESERVED_294                = 294,  /*!< reserved                                          */
    RESERVED_295                = 295,  /*!< reserved                                          */
    RESERVED_296                = 296,  /*!< reserved                                          */
    RESERVED_297                = 297,  /*!< reserved                                          */
    RESERVED_298                = 298,  /*!< reserved                                          */
    RESERVED_299                = 299,  /*!< reserved                                          */
    RESERVED_300                = 300,  /*!< reserved                                          */
    RESERVED_301                = 301,  /*!< reserved                                          */
    RESERVED_302                = 302,  /*!< reserved                                          */
    RESERVED_303                = 303,  /*!< reserved                                          */
    RESERVED_304                = 304,  /*!< reserved                                          */
    RESERVED_305                = 305,  /*!< reserved                                          */
    RESERVED_306                = 306,  /*!< reserved                                          */
    RESERVED_307                = 307,  /*!< reserved                                          */
    IS2M_IRQn                   = 308,  /*!< IS2M fault detection interrupt                    */
    RESERVED_309                = 309,  /*!< reserved                                          */
    DDRPERFM_IRQn               = 310,  /*!< DDR Performance Monitor interrupt                 */
    RESERVED_311                = 311,  /*!< reserved                                          */
    RESERVED_312                = 312,  /*!< reserved                                          */
    RESERVED_313                = 313,  /*!< reserved                                          */
    RESERVED_314                = 314,  /*!< reserved                                          */
    RESERVED_315                = 315,  /*!< reserved                                          */
    RESERVED_316                = 316,  /*!< reserved                                          */
    RESERVED_317                = 317,  /*!< reserved                                          */
    RESERVED_318                = 318,  /*!< reserved                                          */
    RESERVED_319                = 319,  /*!< reserved                                          */
    MAX_IRQ_n
  } IRQn_Type;

/**
  * @}
  */

/** @addtogroup Configuration_section_for_CMSIS
  * @{
  */

#define SDC        /*!< Step Down Converter feature */

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
#define CORTEX_IN_SECURE_STATE
#endif

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 1U)
//#warning "LBA cmse 1"
#endif
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 2U)
#warning "LBA cmse 2"
#endif
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
//#warning "LBA cmse 3"
#endif

/**
  * @brief Configuration of the Cortex-M33 Processor and Core Peripherals
   */
#define __CM33_REV                0x0004  /*!< Cortex-M33 revision r0p4                       */
#define __MPU_PRESENT             1       /*!< CM33 provides an MPU                           */
#define __SAUREGION_PRESENT       1       /*!< CM33 provides an SAU                           */
#define __NVIC_PRIO_BITS          4       /*!< CM33 uses 4 Bits for the Priority Levels (see IRQLVL) */
#define __Vendor_SysTickConfig    0       /*!< Set to 1 if different SysTick Config is used   */
#define __FPU_PRESENT             1       /*!< FPU present                                    */
#define __DSP_PRESENT             1       /*!< DSP extension present                          */
#define __VTOR_PRESENT            1       /*!< Vector Table Offset Register supported         */

#include "core_cm33.h"                     /*!< Cortex-M33 processor and core peripherals      */

/**
  * @}
  */

#include <stdint.h>

/** @addtogroup Peripheral_registers_structures
  * @{
  */

/*
 * @brief BSEC unit (BSEC)
 */
typedef struct
{
  __IO uint32_t FVRx[384];       /*!< BSEC fuse word (0-383) value register    Address offset: 0x000-0x5FC */
       uint32_t RESERVED0[128];  /*!< Reserved                                 Address offset: 0x600-0x7FC */
  __IO uint32_t SPLOCK0;         /*!< BSEC sticky programming lock register 0  Address offset: 0x800 */
  __IO uint32_t SPLOCK1;         /*!< BSEC sticky programming lock register 1  Address offset: 0x804 */
  __IO uint32_t SPLOCK2;         /*!< BSEC sticky programming lock register 2  Address offset: 0x808 */
  __IO uint32_t SPLOCK3;         /*!< BSEC sticky programming lock register 3  Address offset: 0x80C */
  __IO uint32_t SPLOCK4;         /*!< BSEC sticky programming lock register 4  Address offset: 0x810 */
  __IO uint32_t SPLOCK5;         /*!< BSEC sticky programming lock register 5  Address offset: 0x814 */
  __IO uint32_t SPLOCK6;         /*!< BSEC sticky programming lock register 6  Address offset: 0x818 */
  __IO uint32_t SPLOCK7;         /*!< BSEC sticky programming lock register 7  Address offset: 0x81C */
  __IO uint32_t SPLOCK8;         /*!< BSEC sticky programming lock register 8  Address offset: 0x820 */
  __IO uint32_t SPLOCK9;         /*!< BSEC sticky programming lock register 9  Address offset: 0x824 */
  __IO uint32_t SPLOCK10;        /*!< BSEC sticky programming lock register 10 Address offset: 0x828 */
  __IO uint32_t SPLOCK11;        /*!< BSEC sticky programming lock register 11 Address offset: 0x82C */
       uint32_t RESERVED1[4];    /*!< Reserved                                 Address offset: 0x830-0x83C */
  __IO uint32_t SWLOCK0;         /*!< BSEC sticky write lock register 0        Address offset: 0x840 */
  __IO uint32_t SWLOCK1;         /*!< BSEC sticky write lock register 1        Address offset: 0x844 */
  __IO uint32_t SWLOCK2;         /*!< BSEC sticky write lock register 2        Address offset: 0x848 */
  __IO uint32_t SWLOCK3;         /*!< BSEC sticky write lock register 3        Address offset: 0x84C */
  __IO uint32_t SWLOCK4;         /*!< BSEC sticky write lock register 4        Address offset: 0x850 */
  __IO uint32_t SWLOCK5;         /*!< BSEC sticky write lock register 5        Address offset: 0x854 */
  __IO uint32_t SWLOCK6;         /*!< BSEC sticky write lock register 6        Address offset: 0x858 */
  __IO uint32_t SWLOCK7;         /*!< BSEC sticky write lock register 7        Address offset: 0x85C */
  __IO uint32_t SWLOCK8;         /*!< BSEC sticky write lock register 8        Address offset: 0x860 */
  __IO uint32_t SWLOCK9;         /*!< BSEC sticky write lock register 9        Address offset: 0x864 */
  __IO uint32_t SWLOCK10;        /*!< BSEC sticky write lock register 10       Address offset: 0x868 */
  __IO uint32_t SWLOCK11;        /*!< BSEC sticky write lock register 11       Address offset: 0x86C */
       uint32_t RESERVED2[4];    /*!< Reserved                                 Address offset: 0x870-0x87C */
  __IO uint32_t SRLOCK0;         /*!< BSEC sticky read lock register 0         Address offset: 0x880 */
  __IO uint32_t SRLOCK1;         /*!< BSEC sticky read lock register 1         Address offset: 0x884 */
  __IO uint32_t SRLOCK2;         /*!< BSEC sticky read lock register 2         Address offset: 0x888 */
  __IO uint32_t SRLOCK3;         /*!< BSEC sticky read lock register 3         Address offset: 0x88C */
  __IO uint32_t SRLOCK4;         /*!< BSEC sticky read lock register 4         Address offset: 0x890 */
  __IO uint32_t SRLOCK5;         /*!< BSEC sticky read lock register 5         Address offset: 0x894 */
  __IO uint32_t SRLOCK6;         /*!< BSEC sticky read lock register 6         Address offset: 0x898 */
  __IO uint32_t SRLOCK7;         /*!< BSEC sticky read lock register 7         Address offset: 0x89C */
  __IO uint32_t SRLOCK8;         /*!< BSEC sticky read lock register 8         Address offset: 0x8A0 */
  __IO uint32_t SRLOCK9;         /*!< BSEC sticky read lock register 9         Address offset: 0x8A4 */
  __IO uint32_t SRLOCK10;        /*!< BSEC sticky read lock register 10        Address offset: 0x8A8 */
  __IO uint32_t SRLOCK11;        /*!< BSEC sticky read lock register 11        Address offset: 0x8AC */
       uint32_t RESERVED3[4];    /*!< Reserved                                 Address offset: 0x8B0-0x8BC */
  __IO uint32_t OTPVLDR0;        /*!< BSEC OTP valid register 0                Address offset: 0x8C0 */
  __IO uint32_t OTPVLDR1;        /*!< BSEC OTP valid register 1                Address offset: 0x8C4 */
  __IO uint32_t OTPVLDR2;        /*!< BSEC OTP valid register 2                Address offset: 0x8C8 */
  __IO uint32_t OTPVLDR3;        /*!< BSEC OTP valid register 3                Address offset: 0x8CC */
  __IO uint32_t OTPVLDR4;        /*!< BSEC OTP valid register 4                Address offset: 0x8D0 */
  __IO uint32_t OTPVLDR5;        /*!< BSEC OTP valid register 5                Address offset: 0x8D4 */
  __IO uint32_t OTPVLDR6;        /*!< BSEC OTP valid register 6                Address offset: 0x8D8 */
  __IO uint32_t OTPVLDR7;        /*!< BSEC OTP valid register 7                Address offset: 0x8DC */
  __IO uint32_t OTPVLDR8;        /*!< BSEC OTP valid register 8                Address offset: 0x8E0 */
  __IO uint32_t OTPVLDR9;        /*!< BSEC OTP valid register 9                Address offset: 0x8E4 */
  __IO uint32_t OTPVLDR10;       /*!< BSEC OTP valid register 10               Address offset: 0x8E8 */
  __IO uint32_t OTPVLDR11;       /*!< BSEC OTP valid register 11               Address offset: 0x8EC */
       uint32_t RESERVED4[20];   /*!< Reserved                                 Address offset: 0x8F0-0x93C */
  __IO uint32_t SFSR0;           /*!< BSEC shadowed fuses status register 0    Address offset: 0x940 */
  __IO uint32_t SFSR1;           /*!< BSEC shadowed fuses status register 1    Address offset: 0x944 */
  __IO uint32_t SFSR2;           /*!< BSEC shadowed fuses status register 2    Address offset: 0x948 */
  __IO uint32_t SFSR3;           /*!< BSEC shadowed fuses status register 3    Address offset: 0x94C */
  __IO uint32_t SFSR4;           /*!< BSEC shadowed fuses status register 4    Address offset: 0x950 */
  __IO uint32_t SFSR5;           /*!< BSEC shadowed fuses status register 5    Address offset: 0x954 */
  __IO uint32_t SFSR6;           /*!< BSEC shadowed fuses status register 6    Address offset: 0x958 */
  __IO uint32_t SFSR7;           /*!< BSEC shadowed fuses status register 7    Address offset: 0x95C */
  __IO uint32_t SFSR8;           /*!< BSEC shadowed fuses status register 8    Address offset: 0x960 */
  __IO uint32_t SFSR9;           /*!< BSEC shadowed fuses status register 9    Address offset: 0x964 */
  __IO uint32_t SFSR10;          /*!< BSEC shadowed fuses status register 10   Address offset: 0x968 */
  __IO uint32_t SFSR11;          /*!< BSEC shadowed fuses status register 11   Address offset: 0x96C */
       uint32_t RESERVED5[165];  /*!< Reserved                                 Address offset: 0x970-0xC00 */
  __IO uint32_t OTPCR;           /*!< BSEC OTP control register                Address offset: 0xC04 */
  __IO uint32_t WDR;             /*!< BSEC write data register                 Address offset: 0xC08 */
       uint32_t RESERVED6;       /*!< Reserved                                 Address offset: 0xC0C */
  __IO uint32_t SRDATAR;         /*!< BSEC supplementary read data register    Address offset: 0xC10 */
       uint32_t RESERVED7[123];  /*!< Reserved                                 Address offset: 0xC14-0xDFC */
  __IO uint32_t SCRATCHR0;       /*!< BSEC scratch register 0                  Address offset: 0xE00 */
  __IO uint32_t SCRATCHR1;       /*!< BSEC scratch register 1                  Address offset: 0xE04 */
  __IO uint32_t SCRATCHR2;       /*!< BSEC scratch register 2                  Address offset: 0xE08 */
  __IO uint32_t SCRATCHR3;       /*!< BSEC scratch register 3                  Address offset: 0xE0C */
  __IO uint32_t LOCKR;           /*!< BSEC lock register                       Address offset: 0xE10 */
  __IO uint32_t JTAGINR;         /*!< BSEC JTAG input register                 Address offset: 0xE14 */
  __IO uint32_t JTAGOUTR;        /*!< BSEC JTAG output register                Address offset: 0xE18 */
       uint32_t RESERVED8;       /*!< Reserved                                 Address offset: 0xE1C */
  __IO uint32_t DENR;            /*!< BSEC debug enable register               Address offset: 0xE20 */
  __IO uint32_t UNMAPR;          /*!< BSEC unmap register                      Address offset: 0xE24 */
       uint32_t RESERVED9[6];    /*!< Reserved                                 Address offset: 0xE28-0xE3C */
  __IO uint32_t SR;              /*!< BSEC status register                     Address offset: 0xE40 */
  __IO uint32_t OTPSR;           /*!< BSEC OTP status register                 Address offset: 0xE44 */
       uint32_t RESERVED10[46];  /*!< Reserved                                 Address offset: 0xE48-0xEFC */
  __IO uint32_t ENCKEYR0;        /*!< BSEC encrypted key register 0            Address offset: 0xF00 */
  __IO uint32_t ENCKEYR1;        /*!< BSEC encrypted key register 1            Address offset: 0xF04 */
  __IO uint32_t ENCKEYR2;        /*!< BSEC encrypted key register 2            Address offset: 0xF08 */
  __IO uint32_t ENCKEYR3;        /*!< BSEC encrypted key register 3            Address offset: 0xF0C */
  __IO uint32_t ENCKEYR4;        /*!< BSEC encrypted key register 4            Address offset: 0xF10 */
  __IO uint32_t ENCKEYR5;        /*!< BSEC encrypted key register 5            Address offset: 0xF14 */
  __IO uint32_t ENCKEYR6;        /*!< BSEC encrypted key register 6            Address offset: 0xF18 */
  __IO uint32_t ENCKEYR7;        /*!< BSEC encrypted key register 7            Address offset: 0xF1C */
       uint32_t RESERVED11;      /*!< Reserved                                 Address offset: 0xF20 */
  __IO uint32_t HWKEYR;          /*!< BSEC HWKEY register                      Address offset: 0xF24 */
       uint32_t RESERVED12[6];   /*!< Reserved                                 Address offset: 0xF28-0xF3C */
  __IO uint32_t WOSCR0;          /*!< BSEC write once scratch register 0       Address offset: 0xF40 */
  __IO uint32_t WOSCR1;          /*!< BSEC write once scratch register 1       Address offset: 0xF44 */
  __IO uint32_t WOSCR2;          /*!< BSEC write once scratch register 2       Address offset: 0xF48 */
  __IO uint32_t WOSCR3;          /*!< BSEC write once scratch register 3       Address offset: 0xF4C */
  __IO uint32_t WOSCR4;          /*!< BSEC write once scratch register 4       Address offset: 0xF50 */
  __IO uint32_t WOSCR5;          /*!< BSEC write once scratch register 5       Address offset: 0xF54 */
  __IO uint32_t WOSCR6;          /*!< BSEC write once scratch register 6       Address offset: 0xF58 */
  __IO uint32_t WOSCR7;          /*!< BSEC write once scratch register 7       Address offset: 0xF5C */
       uint32_t RESERVED13[34];  /*!< Reserved                                 Address offset: 0xF60-0xFE4 */
  __IO uint32_t HRCR;            /*!< BSEC hot reset count register            Address offset: 0xFE8 */
  __IO uint32_t WRCR;            /*!< BSEC warm reset count register           Address offset: 0xFEC */
  __IO uint32_t HWCFGR;          /*!< BSEC hardware configuration register     Address offset: 0xFF0 */
  __IO uint32_t VERR;            /*!< BSEC version register                    Address offset: 0xFF4 */
  __IO uint32_t IPIDR;           /*!< BSEC identification register             Address offset: 0xFF8 */
  __IO uint32_t SIDR;            /*!< BSEC size identification register        Address offset: 0xFFC */
} BSEC_TypeDef;

/**
  * @brief CRC calculation unit
  */

typedef struct
{
  __IO uint32_t DR;          /*!< CRC Data register,                           Address offset: 0x000 */
  __IO uint32_t IDR;         /*!< CRC Independent data register,               Address offset: 0x004 */
  __IO uint32_t CR;          /*!< CRC Control register,                        Address offset: 0x008 */
  uint32_t      RESERVED2;   /*!< Reserved,                                                    0x00C */
  __IO uint32_t INIT;        /*!< Initial CRC value register,                  Address offset: 0x010 */
  __IO uint32_t POL;         /*!< CRC polynomial register,                     Address offset: 0x014 */
  uint32_t      RESERVED3[247];   /*!< Reserved,                                       0x018 - 0x3F0 */
  __IO uint32_t VERR;        /*!< CRC version register,                        Address offset: 0x3F4 */
  __IO uint32_t IPIDR;       /*!< CRC ID register,                             Address offset: 0x3F8 */
  __IO uint32_t SIDR;        /*!< CRC Size ID register,                        Address offset: 0x3FC */
} CRC_TypeDef;

/**
  * @brief Crypto Processor
  */

typedef struct
{
  __IO uint32_t CR;         /*!< CRYP control register,                                    Address offset: 0x00 */
  __IO uint32_t SR;         /*!< CRYP status register,                                     Address offset: 0x04 */
  __IO uint32_t DIN;        /*!< CRYP data input register,                                 Address offset: 0x08 */
  __IO uint32_t DOUT;       /*!< CRYP data output register,                                Address offset: 0x0C */
  __IO uint32_t DMACR;      /*!< CRYP DMA control register,                                Address offset: 0x10 */
  __IO uint32_t IMSCR;      /*!< CRYP interrupt mask set/clear register,                   Address offset: 0x14 */
  __IO uint32_t RISR;       /*!< CRYP raw interrupt status register,                       Address offset: 0x18 */
  __IO uint32_t MISR;       /*!< CRYP masked interrupt status register,                    Address offset: 0x1C */
  __IO uint32_t K0LR;       /*!< CRYP key left  register 0,                                Address offset: 0x20 */
  __IO uint32_t K0RR;       /*!< CRYP key right register 0,                                Address offset: 0x24 */
  __IO uint32_t K1LR;       /*!< CRYP key left  register 1,                                Address offset: 0x28 */
  __IO uint32_t K1RR;       /*!< CRYP key right register 1,                                Address offset: 0x2C */
  __IO uint32_t K2LR;       /*!< CRYP key left  register 2,                                Address offset: 0x30 */
  __IO uint32_t K2RR;       /*!< CRYP key right register 2,                                Address offset: 0x34 */
  __IO uint32_t K3LR;       /*!< CRYP key left  register 3,                                Address offset: 0x38 */
  __IO uint32_t K3RR;       /*!< CRYP key right register 3,                                Address offset: 0x3C */
  __IO uint32_t IV0LR;      /*!< CRYP initialization vector left-word  register 0,         Address offset: 0x40 */
  __IO uint32_t IV0RR;      /*!< CRYP initialization vector right-word register 0,         Address offset: 0x44 */
  __IO uint32_t IV1LR;      /*!< CRYP initialization vector left-word  register 1,         Address offset: 0x48 */
  __IO uint32_t IV1RR;      /*!< CRYP initialization vector right-word register 1,         Address offset: 0x4C */
  __IO uint32_t CSGCMCCM0R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 0,        Address offset: 0x50 */
  __IO uint32_t CSGCMCCM1R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 1,        Address offset: 0x54 */
  __IO uint32_t CSGCMCCM2R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 2,        Address offset: 0x58 */
  __IO uint32_t CSGCMCCM3R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 3,        Address offset: 0x5C */
  __IO uint32_t CSGCMCCM4R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 4,        Address offset: 0x60 */
  __IO uint32_t CSGCMCCM5R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 5,        Address offset: 0x64 */
  __IO uint32_t CSGCMCCM6R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 6,        Address offset: 0x68 */
  __IO uint32_t CSGCMCCM7R; /*!< CRYP GCM/GMAC or CCM/CMAC context swap register 7,        Address offset: 0x6C */
  __IO uint32_t CSGCM0R;    /*!< CRYP GCM/GMAC context swap register 0,                    Address offset: 0x70 */
  __IO uint32_t CSGCM1R;    /*!< CRYP GCM/GMAC context swap register 1,                    Address offset: 0x74 */
  __IO uint32_t CSGCM2R;    /*!< CRYP GCM/GMAC context swap register 2,                    Address offset: 0x78 */
  __IO uint32_t CSGCM3R;    /*!< CRYP GCM/GMAC context swap register 3,                    Address offset: 0x7C */
  __IO uint32_t CSGCM4R;    /*!< CRYP GCM/GMAC context swap register 4,                    Address offset: 0x80 */
  __IO uint32_t CSGCM5R;    /*!< CRYP GCM/GMAC context swap register 5,                    Address offset: 0x84 */
  __IO uint32_t CSGCM6R;    /*!< CRYP GCM/GMAC context swap register 6,                    Address offset: 0x88 */
  __IO uint32_t CSGCM7R;    /*!< CRYP GCM/GMAC context swap register 7,                    Address offset: 0x8C */
  uint32_t RESERVED[216];
  __IO uint32_t HWCFGR;     /*!< CRYP HW Configuration,                                    Address offset: 0x3F0 */
  __IO uint32_t VERR;       /*!< CRYP version register ,                                   Address offset: 0x3F4 */
  __IO uint32_t ID;         /*!< CRYP Identification register,                             Address offset: 0x3F8 */
  __IO uint32_t MID;        /*!< CRYP HW Magic ID register,                                Address offset: 0x3FC */
} CRYP_TypeDef;

/**
  * @brief CSI2HOST
  */

typedef struct
{
  __IO uint32_t CR;              /*!< CSI-2 Host control register @ offset 0x4                            */
  __IO uint32_t PCR;             /*!< CSI-2 Host DPHY_RX control register @ offset 0x4                    */
       uint32_t RESERVED0[2];    /*!< Reserved @ offset 0x8                                               */
  __IO uint32_t VC0CFGR1;        /*!< CSI-2 Host virtual channel 0 configuration register 1 @ offset 0x10 */
  __IO uint32_t VC0CFGR2;        /*!< CSI-2 Host virtual channel 0 configuration register 2 @ offset 0x14 */
  __IO uint32_t VC0CFGR3;        /*!< CSI-2 Host virtual channel 0 configuration register 3 @ offset 0x18 */
  __IO uint32_t VC0CFGR4;        /*!< CSI-2 Host virtual channel 0 configuration register 4 @ offset 0x1c */
  __IO uint32_t VC1CFGR1;        /*!< CSI-2 Host virtual channel 1 configuration register 1 @ offset 0x20 */
  __IO uint32_t VC1CFGR2;        /*!< CSI-2 Host virtual channel 1 configuration register 2 @ offset 0x24 */
  __IO uint32_t VC1CFGR3;        /*!< CSI-2 Host virtual channel 1 configuration register 3 @ offset 0x28 */
  __IO uint32_t VC1CFGR4;        /*!< CSI-2 Host virtual channel 1 configuration register 4 @ offset 0x2c */
  __IO uint32_t VC2CFGR1;        /*!< CSI-2 Host virtual channel 2 configuration register 1 @ offset 0x30 */
  __IO uint32_t VC2CFGR2;        /*!< CSI-2 Host virtual channel 2 configuration register 2 @ offset 0x34 */
  __IO uint32_t VC2CFGR3;        /*!< CSI-2 Host virtual channel 2 configuration register 3 @ offset 0x38 */
  __IO uint32_t VC2CFGR4;        /*!< CSI-2 Host virtual channel 2 configuration register 4 @ offset 0x3c */
  __IO uint32_t VC3CFGR1;        /*!< CSI-2 Host virtual channel 3 configuration register 1 @ offset 0x40 */
  __IO uint32_t VC3CFGR2;        /*!< CSI-2 Host virtual channel 3 configuration register 2 @ offset 0x44 */
  __IO uint32_t VC3CFGR3;        /*!< CSI-2 Host virtual channel 3 configuration register 3 @ offset 0x48 */
  __IO uint32_t VC3CFGR4;        /*!< CSI-2 Host virtual channel 3 configuration register 4 @ offset 0x4c */
  __IO uint32_t LB0CFGR;         /*!< CSI-2 Host line byte 0 configuration register @ offset 0x50         */
  __IO uint32_t LB1CFGR;         /*!< CSI-2 Host line byte 1 configuration register @ offset 0x54         */
  __IO uint32_t LB2CFGR;         /*!< CSI-2 Host line byte 2 configuration register @ offset 0x58         */
  __IO uint32_t LB3CFGR;         /*!< CSI-2 Host line byte 3 configuration register @ offset 0x5c         */
  __IO uint32_t TIM0CFGR;        /*!< CSI-2 Host timer 0 configuration register @ offset 0x60             */
  __IO uint32_t TIM1CFGR;        /*!< CSI-2 Host timer 1 configuration register @ offset 0x64             */
  __IO uint32_t TIM2CFGR;        /*!< CSI-2 Host timer 2 configuration register @ offset 0x68             */
  __IO uint32_t TIM3CFGR;        /*!< CSI-2 Host timer 3 configuration register @ offset 0x6c             */
  __IO uint32_t LMCFGR;          /*!< CSI-2 Host lane merger configuration register @ offset 0x70         */
  __IO uint32_t PRGITR;          /*!< CSI-2 Host program interrupt register @ offset 0x74                 */
  __IO uint32_t WDR;             /*!< CSI-2 Host watchdog register @ offset 0x78                          */
       uint32_t RESERVED1;       /*!< Reserved @ offset 0x7c                                              */
  __IO uint32_t IER0;            /*!< CSI-2 Host Interrupt enable register 0 @ offset 0x80                */
  __IO uint32_t IER1;            /*!< CSI-2 Host Interrupt enable register 1 @ offset 0x84                */
       uint32_t RESERVED2[2];    /*!< Reserved @ offset 0x88                                              */
  __IO uint32_t SR0;             /*!< CSI-2 Host status register 0 @ offset 0x90                          */
  __IO uint32_t SR1;             /*!< CSI-2 Host status register 1 @ offset 0x94                          */
       uint32_t RESERVED3[26];   /*!< Reserved @ offset 0x98                                              */
  __IO uint32_t FCR0;            /*!< CSI-2 Host Flag clear register 0 @ offset 0x100                     */
  __IO uint32_t FCR1;            /*!< CSI-2 Host Flag clear register 1 @ offset 0x104                     */
       uint32_t RESERVED4[2];    /*!< Reserved @ offset 0x108                                             */
  __IO uint32_t SPDFR;           /*!< CSI-2 Host short packet data field register @ offset 0x110          */
  __IO uint32_t ERR1;            /*!< CSI-2 Host error register 1 @ offset 0x114                          */
  __IO uint32_t ERR2;            /*!< CSI-2 Host error register 2 @ offset 0x118                          */
       uint32_t RESERVED5[949];  /*!< Reserved @ offset 0x11c                                             */
  __IO uint32_t HWCFGR;          /*!< CSI-2 Host hardware configuration register @ offset 0xff0           */
  __IO uint32_t VERR;            /*!< CSI-2 Host version register @ offset 0xff4                          */
  __IO uint32_t IPIDR;           /*!< CSI-2 Host identification register @ offset 0xff8                   */
  __IO uint32_t SIDR;            /*!< CSI-2 Host size identification register @ offset 0xffc              */
} CSI2HOST_TypeDef;

/**
  * @brief Debug MCU
  *   - according to chapter "1.10.11 Microcontroller Debug Unit (DBGMCU)" in
  *      (version v0.1 - May 07th, 2019)
  *   - But with registers and bits names aligned with other STM32
  *     For instance in STM32U5 (Cobra) CMSIS device component and
  *      Reference manual chapter "64.11 Microcontroller debug unit (DBGMCU)"
  *      and STM32U5 (Cobra) Reference manual RM0456_Cobra_v0.1c.pdf
  *      (version v0.1c - August 30th, 2019)
  */

typedef struct
{
  __IO uint32_t IDCODE;        /*!< MCU device ID code                                                Address offset: 0x00 */
  __IO uint32_t CR;            /*!< Debug MCU configuration register                                  Address offset: 0x04 */
  __IO uint32_t CRA35;         /*!< Debug MCU configuration register for A35 CPU                      Address offset: 0x08 */
  __IO uint32_t RESERVED1;     /*!< Reserved                                                          Address offset: 0x0C */
  __IO uint32_t AHB2LFZ1;      /*!< Debug MCU AHB2 (lowest part)  Peripheral Freeze Register for A35  Address offset: 0x10 */
  __IO uint32_t AHB2HFZ1;      /*!< Debug MCU AHB2 (highest part) Peripheral Freeze Register for A35  Address offset: 0x14 */
  __IO uint32_t AHB2LFZ2;      /*!< Debug MCU AHB2 (lowest part)  Peripheral Freeze Register for M33  Address offset: 0x18 */
  __IO uint32_t AHB2HFZ2;      /*!< Debug MCU AHB2 (highest part) Peripheral Freeze Register for M33  Address offset: 0x1C */
  __IO uint32_t AHBSRFZ1;      /*!< Debug MCU AHBSR Peripheral Freeze Register for A35                Address offset: 0x20 */
  __IO uint32_t AHBSRFZ2;      /*!< Debug MCU AHBSR Peripheral Freeze Register for M33                Address offset: 0x24 */
  __IO uint32_t AHBSRFZ3;      /*!< Debug MCU AHBSR Peripheral Freeze Register for M0+                Address offset: 0x28 */
  __IO uint32_t APBSR_RTCFZ1;  /*!< Debug MCU APBSR RTC Freeze Register for A35                       Address offset: 0x2C */
  __IO uint32_t APBSR_RTCFZ2;  /*!< Debug MCU APBSR RTC Freeze Register for M33                       Address offset: 0x30 */
  __IO uint32_t APBSR_RTCFZ3;  /*!< Debug MCU APBSR RTC Freeze Register for M0+                       Address offset: 0x34 */
  __IO uint32_t APB1FZ1;       /*!< Debug MCU APB1 Peripheral Freeze Register for A35                 Address offset: 0x38 */
  __IO uint32_t APB1FZ2;       /*!< Debug MCU APB1 Peripheral Freeze Register for M33                 Address offset: 0x3C */
  __IO uint32_t APB2FZ1;       /*!< Debug MCU APB2 Peripheral Freeze Register for A35                 Address offset: 0x40 */
  __IO uint32_t APB2FZ2;       /*!< Debug MCU APB2 Peripheral Freeze Register for M33                 Address offset: 0x44 */
  __IO uint32_t APB3FZ1;       /*!< Debug MCU APB3 Peripheral Freeze Register for A35                 Address offset: 0x48 */
  __IO uint32_t APB3FZ2;       /*!< Debug MCU APB3 Peripheral Freeze Register for M33                 Address offset: 0x4C */
  __IO uint32_t APBSRFZ1;      /*!< Debug MCU APBSR Peripheral Freeze Register for A35                Address offset: 0x50 */
  __IO uint32_t APBSRFZ2;      /*!< Debug MCU APBSR Peripheral Freeze Register for M33                Address offset: 0x54 */
  __IO uint32_t APBSRFZ3;      /*!< Debug MCU APBSR Peripheral Freeze Register for M0+                Address offset: 0x58 */
} DBGMCU_TypeDef;

/**
  * @brief DCMI
  */

typedef struct
{
  __IO uint32_t CR;       /*!< DCMI control register 1,                       Address offset: 0x000 */
  __IO uint32_t SR;       /*!< DCMI status register,                          Address offset: 0x004 */
  __IO uint32_t RISR;     /*!< DCMI raw interrupt status register,            Address offset: 0x008 */
  __IO uint32_t IER;      /*!< DCMI interrupt enable register,                Address offset: 0x00C */
  __IO uint32_t MISR;     /*!< DCMI masked interrupt status register,         Address offset: 0x010 */
  __IO uint32_t ICR;      /*!< DCMI interrupt clear register,                 Address offset: 0x014 */
  __IO uint32_t ESCR;     /*!< DCMI embedded synchronization code register,   Address offset: 0x018 */
  __IO uint32_t ESUR;     /*!< DCMI embedded synchronization unmask register, Address offset: 0x01C */
  __IO uint32_t CWSTRTR;  /*!< DCMI crop window start,                        Address offset: 0x020 */
  __IO uint32_t CWSIZER;  /*!< DCMI crop window size,                         Address offset: 0x024 */
  __IO uint32_t DR;       /*!< DCMI data register,                            Address offset: 0x028 */
  uint32_t RESERVED[242]; /*!< Reserved,                                              0x02C - 0x3F0 */
  __IO uint32_t VERR;     /*!< DCMI Version register,                         Address offset: 0x3F4 */
  __IO uint32_t IPDR;     /*!< DCMI Identification register,                  Address offset: 0x3F8 */
  __IO uint32_t SIDR;     /*!< DCMI Size Identification register,             Address offset: 0x3FC */
} DCMI_TypeDef;

/**
  * @brief DCMIPP
  */

typedef struct
{
  __IO uint32_t RESERVED[512];    /*!< TODO : Area for DCMIPP IPPlug : Not used at the moment         */
  __IO uint32_t CMHWCFGR;         /*!< Common IP HW Configuration register @ offset 0x0               */
       uint32_t RESERVED5[59];    /*!< Reserved @ offset 0x4                                          */
  __IO uint32_t CMIER;            /*!< Common Interrupt enable register @ offset 0xf0                 */
  __IO uint32_t CMSR1;            /*!< Common status register 1 @ offset 0xf4                         */
  __IO uint32_t CMSR2;            /*!< Common status register 2 @ offset 0xf8                         */
  __IO uint32_t CMFCR;            /*!< Common Interrupt clear register @ offset 0xfc                  */
  __IO uint32_t PRHWCFGR;         /*!< Parallel Interface HW Configuration register @ offset 0x100    */
  __IO uint32_t PRCR;             /*!< Parallel Interface control register @ offset 0x104             */
  __IO uint32_t PRESCR;           /*!< Parallel Interface Embedded Sync code register @ offset 0x108  */
  __IO uint32_t PRESUR;           /*!< Parallel Interface Embedded Sync Unmsk register @ offset 0x10c */
       uint32_t RESERVED6[57];    /*!< Reserved @ offset 0x110                                        */
  __IO uint32_t PRIER;            /*!< Parallel Interface Interrupt enable register @ offset 0x1f4    */
  __IO uint32_t PRSR;             /*!< Parallel Interface status register @ offset 0x1f8              */
  __IO uint32_t PRFCR;            /*!< Parallel Interface Interrupt clear register @ offset 0x1fc     */
  __IO uint32_t P0HWCFGR;         /*!< Pipe0 HW Configuration register @ offset 0x200                 */
  __IO uint32_t P0FSCR;           /*!< Pipe0 Flow Selection configuration register @ offset 0x204     */
       uint32_t RESERVED7[46];    /*!< Reserved @ offset 0x208                                        */
  __IO uint32_t P0DCOFFSETR;      /*!< Pipex Dump offset register @ offset 0x2c0                      */
  __IO uint32_t P0DCCNTR;         /*!< Pipex Dump counter register @ offset 0x2c4                     */
  __IO uint32_t P0DCLIMITR;       /*!< Pipex Dump limit register @ offset 0x2c8                       */
       uint32_t RESERVED8;        /*!< Reserved @ offset 0x2cc                                        */
  __IO uint32_t P0PPCR;           /*!< Pipe0 Pixel Packer configuration register @ offset 0x2d0       */
  __IO uint32_t P0PPM0AR;         /*!< Pipex Pixel Packer memory0 address register @ offset 0x2d4     */
       uint32_t RESERVED9[7];     /*!< Reserved @ offset 0x2d8                                        */
  __IO uint32_t P0IER;            /*!< Pipe0 Interrupt enable register @ offset 0x2f4                 */
  __IO uint32_t P0SR;             /*!< Pipe0 status register @ offset 0x2f8                           */
  __IO uint32_t P0FCR;            /*!< Pipe0 Interrupt clear register @ offset 0x2fc                  */
       uint32_t RESERVED10;       /*!< Reserved @ offset 0x300                                        */
  __IO uint32_t P1FSCR;           /*!< Pipe1 Flow Selection configuration register @ offset 0x304     */
  __IO uint32_t P1FSCNTR;         /*!< Pipex Flow Selection framecounter register @ offset 0x308      */
       uint32_t RESERVED11;       /*!< Reserved @ offset 0x30c                                        */
  __IO uint32_t P1GMCR0;          /*!< Pipex Gamma configuration register 0 @ offset 0x310            */
  __IO uint32_t P1GMCR1;          /*!< Pipex Gamma configuration register 1 @ offset 0x314            */
  __IO uint32_t P1GMCR2;          /*!< Pipex Gamma configuration register 2 @ offset 0x318            */
  __IO uint32_t P1GMCR3;          /*!< Pipex Gamma configuration register 3 @ offset 0x31c            */
  __IO uint32_t P1GMCR4;          /*!< Pipex Gamma configuration register 4 @ offset 0x320            */
       uint32_t RESERVED12[3];    /*!< Reserved @ offset 0x324                                        */
  __IO uint32_t P1SRCR;           /*!< Pipex Stat Removal config register @ offset 0x330              */
       uint32_t RESERVED13[3];    /*!< Reserved @ offset 0x334                                        */
  __IO uint32_t P1RBCR;           /*!< Pipex RawBayer-to-RGB config register @ offset 0x340           */
       uint32_t RESERVED14[3];    /*!< Reserved @ offset 0x344                                        */
  __IO uint32_t P1CRSTARTR;       /*!< Pipex Crop window start register @ offset 0x350                */
  __IO uint32_t P1CRSIZER;        /*!< Pipex Crop window size register @ offset 0x354                 */
       uint32_t RESERVED15[2];    /*!< Reserved @ offset 0x358                                        */
  __IO uint32_t P1DSCR;           /*!< Pipex Downsize configuration register @ offset 0x360           */
  __IO uint32_t P1DSRATIOR;       /*!< Pipex Downsize ratio register @ offset 0x364                   */
  __IO uint32_t P1DSSIZER;        /*!< Pipex Downsize destination size register @ offset 0x368        */
       uint32_t RESERVED16;       /*!< Reserved @ offset 0x36c                                        */
  __IO uint32_t P1CCCR;           /*!< Pipex ColorConv configuration register @ offset 0x370          */
  __IO uint32_t P1CCRR1;          /*!< Pipex ColorConv red coeff register 1 @ offset 0x374            */
  __IO uint32_t P1CCRR2;          /*!< Pipex ColorConv red coeff register 2 @ offset 0x378            */
  __IO uint32_t P1CCGR1;          /*!< Pipex ColorConv green coeff register 1 @ offset 0x37c          */
  __IO uint32_t P1CCGR2;          /*!< Pipex ColorConv green coeff register 2 @ offset 0x380          */
  __IO uint32_t P1CCBR1;          /*!< Pipex ColorConv blue coeff register 1 @ offset 0x384           */
  __IO uint32_t P1CCBR2;          /*!< Pipex ColorConv blue coeff register 2 @ offset 0x388           */
       uint32_t RESERVED17[17];   /*!< Reserved @ offset 0x38c                                        */
  __IO uint32_t P1PPCR;           /*!< Pipe1 Pixel Packer configuration register @ offset 0x3d0       */
  __IO uint32_t P1PPM0AR;         /*!< Pipex Pixel Packer memory0 address register @ offset 0x3d4     */
  __IO uint32_t P1PPM0PITCHR;     /*!< Pipex Pixel Packer memory0 pitch register @ offset 0x3d8       */
  __IO uint32_t P1PPM1AR;         /*!< Pipex Pixel Packer memory1 address register @ offset 0x3dc     */
  __IO uint32_t P1PPM1PITCHR;     /*!< Pipex Pixel Packer memory1 pitch register @ offset 0x3e0       */
  __IO uint32_t P1PPM2AR;         /*!< Pipex Pixel Packer memory2 address register @ offset 0x3e4     */
       uint32_t RESERVED18[3];    /*!< Reserved @ offset 0x3e8                                        */
  __IO uint32_t P1IER;            /*!< Pipex Interrupt enable register @ offset 0x3f4                 */
  __IO uint32_t P1SR;             /*!< Pipe1 status register @ offset 0x3f8                           */
  __IO uint32_t P1FCR;            /*!< Pipe1 Interrupt clear register @ offset 0x3fc                  */
  __IO uint32_t P2HWCFGR;         /*!< Pipe2 HW Configuration register @ offset 0x400                 */
  __IO uint32_t P2FSCR;           /*!< Pipe2 Flow Selection configuration register @ offset 0x404     */
       uint32_t RESERVED19[18];   /*!< Reserved @ offset 0x408                                        */
  __IO uint32_t P2CRSTARTR;       /*!< Pipex Crop window start register @ offset 0x450                */
  __IO uint32_t P2CRSIZER;        /*!< Pipex Crop window size register @ offset 0x454                 */
       uint32_t RESERVED20[2];    /*!< Reserved @ offset 0x458                                        */
  __IO uint32_t P2DSCR;           /*!< Pipex Downsize configuration register @ offset 0x460           */
  __IO uint32_t P2DSRATIOR;       /*!< Pipex Downsize ratio register @ offset 0x464                   */
  __IO uint32_t P2DSSIZER;        /*!< Pipex Downsize destination size register @ offset 0x468        */
       uint32_t RESERVED21;       /*!< Reserved @ offset 0x46c                                        */
  __IO uint32_t P2CCCR;           /*!< Pipex ColorConv configuration register @ offset 0x470          */
  __IO uint32_t P2CCRR1;          /*!< Pipex ColorConv red coeff register 1 @ offset 0x474            */
  __IO uint32_t P2CCRR2;          /*!< Pipex ColorConv red coeff register 2 @ offset 0x478            */
  __IO uint32_t P2CCGR1;          /*!< Pipex ColorConv green coeff register 1 @ offset 0x47c          */
  __IO uint32_t P2CCGR2;          /*!< Pipex ColorConv green coeff register 2 @ offset 0x480          */
  __IO uint32_t P2CCBR1;          /*!< Pipex ColorConv blue coeff register 1 @ offset 0x484           */
  __IO uint32_t P2CCBR2;          /*!< Pipex ColorConv blue coeff register 2 @ offset 0x488           */
       uint32_t RESERVED22[17];   /*!< Reserved @ offset 0x48c                                        */
  __IO uint32_t P2PPCR;           /*!< Pipe2 Pixel Packer configuration register @ offset 0x4d0       */
  __IO uint32_t P2PPM0AR;         /*!< Pipex Pixel Packer memory0 address register @ offset 0x4d4     */
  __IO uint32_t P2PPM0PITCHR;     /*!< Pipex Pixel Packer memory0 pitch register @ offset 0x4d8       */
       uint32_t RESERVED23[6];    /*!< Reserved @ offset 0x4dc                                        */
  __IO uint32_t P2IER;            /*!< Pipex Interrupt enable register @ offset 0x4f4                 */
  __IO uint32_t P2SR;             /*!< Pipe2 status register @ offset 0x4f8                           */
  __IO uint32_t P2FCR;            /*!< Pipe2 Interrupt clear register @ offset 0x4fc                  */
       uint32_t RESERVED24[188];  /*!< Reserved @ offset 0x500                                        */
  __IO uint32_t HWCFGR;           /*!< IP HW Configuration register @ offset 0x7f0                    */
  __IO uint32_t VERR;             /*!< IP Version register @ offset 0x7f4                             */
  __IO uint32_t IPIDR;            /*!< IP Identification register @ offset 0x7f8                      */
  __IO uint32_t SIDR;             /*!< Size Identification register @ offset 0x7fc                    */
} DCMIPP_TypeDef;

/**
  * @brief DMA Controller
  */
/* c7amba_dma3_v1_0 */
typedef struct
{
  __IO uint32_t SECCFGR;      /*!< DMA secure configuration register,               Address offset: 0x00  */
  __IO uint32_t PRIVCFGR;     /*!< DMA privileged configuration register,           Address offset: 0x04  */
  __IO uint32_t CIDCFG_LOCK;  /*!< DMA CID configuration lock register,             Address offset: 0x08  */
  __IO uint32_t MISR;         /*!< DMA non secure masked interrupt status register, Address offset: 0x0C  */
  __IO uint32_t SMISR;        /*!< DMA secure masked interrupt status register,     Address offset: 0x10  */
} DMA_TypeDef;

typedef struct
{
  __IO uint32_t CLBAR;        /*!< DMA channel x linked-list base address register, Address offset: 0x50 + (x * 0x80) */
  __IO uint32_t CCIDCFGR;     /*!< DMA channel x CID register,                      Address offset: 0x54 + (x * 0x80) */
  __IO uint32_t CSEMCR;       /*!< DMA channel x semaphore control register,        Address offset: 0x58 + (x * 0x80) */
  __IO uint32_t CFCR;         /*!< DMA channel x flag clear register,               Address offset: 0x5C + (x * 0x80) */
  __IO uint32_t CSR;          /*!< DMA channel x flag status register,              Address offset: 0x60 + (x * 0x80) */
  __IO uint32_t CCR;          /*!< DMA channel x control register,                  Address offset: 0x64 + (x * 0x80) */
       uint32_t RESERVED2[10];/*!< Reserved 2,                                      Address offset: 0x68 -- 0x8C      */
  __IO uint32_t CTR1;         /*!< DMA channel x transfer register 1,               Address offset: 0x90 + (x * 0x80) */
  __IO uint32_t CTR2;         /*!< DMA channel x transfer register 2,               Address offset: 0x94 + (x * 0x80) */
  __IO uint32_t CBR1;         /*!< DMA channel x block register 1,                  Address offset: 0x98 + (x * 0x80) */
  __IO uint32_t CSAR;         /*!< DMA channel x source address register,           Address offset: 0x9C + (x * 0x80) */
  __IO uint32_t CDAR;         /*!< DMA channel x destination address register,      Address offset: 0xA0 + (x * 0x80) */
  __IO uint32_t CTR3;         /*!< DMA channel x transfer register 3,               Address offset: 0xA4 + (x * 0x80) */
  __IO uint32_t CBR2;         /*!< DMA channel x block register 2,                  Address offset: 0xA8 + (x * 0x80) */
       uint32_t RESERVED3[8]; /*!< Reserved 3,                                      Address offset: 0xAC -- 0xC8      */
  __IO uint32_t CLLR;         /*!< DMA channel x linked-list address register,      Address offset: 0xCC + (x * 0x80) */
} DMA_Channel_TypeDef;

/**
  * @brief DSI Controller
  */

typedef struct
{
  __IO uint32_t VR;            /*!< DSI Host Version Register,                                 Address offset: 0x00      */
  __IO uint32_t CR;            /*!< DSI Host Control Register,                                 Address offset: 0x04      */
  __IO uint32_t CCR;           /*!< DSI HOST Clock Control Register,                           Address offset: 0x08      */
  __IO uint32_t LVCIDR;        /*!< DSI Host LTDC VCID Register,                               Address offset: 0x0C      */
  __IO uint32_t LCOLCR;        /*!< DSI Host LTDC Color Coding Register,                       Address offset: 0x10      */
  __IO uint32_t LPCR;          /*!< DSI Host LTDC Polarity Configuration Register,             Address offset: 0x14      */
  __IO uint32_t LPMCR;         /*!< DSI Host Low-Power Mode Configuration Register,            Address offset: 0x18      */
  uint32_t      RESERVED0[4];  /*!< Reserved, 0x1C - 0x2B                                                                */
  __IO uint32_t PCR;           /*!< DSI Host Protocol Configuration Register,                  Address offset: 0x2C      */
  __IO uint32_t GVCIDR;        /*!< DSI Host Generic VCID Register,                            Address offset: 0x30      */
  __IO uint32_t MCR;           /*!< DSI Host Mode Configuration Register,                      Address offset: 0x34      */
  __IO uint32_t VMCR;          /*!< DSI Host Video Mode Configuration Register,                Address offset: 0x38      */
  __IO uint32_t VPCR;          /*!< DSI Host Video Packet Configuration Register,              Address offset: 0x3C      */
  __IO uint32_t VCCR;          /*!< DSI Host Video Chunks Configuration Register,              Address offset: 0x40      */
  __IO uint32_t VNPCR;         /*!< DSI Host Video Null Packet Configuration Register,         Address offset: 0x44      */
  __IO uint32_t VHSACR;        /*!< DSI Host Video HSA Configuration Register,                 Address offset: 0x48      */
  __IO uint32_t VHBPCR;        /*!< DSI Host Video HBP Configuration Register,                 Address offset: 0x4C      */
  __IO uint32_t VLCR;          /*!< DSI Host Video Line Configuration Register,                Address offset: 0x50      */
  __IO uint32_t VVSACR;        /*!< DSI Host Video VSA Configuration Register,                 Address offset: 0x54      */
  __IO uint32_t VVBPCR;        /*!< DSI Host Video VBP Configuration Register,                 Address offset: 0x58      */
  __IO uint32_t VVFPCR;        /*!< DSI Host Video VFP Configuration Register,                 Address offset: 0x5C      */
  __IO uint32_t VVACR;         /*!< DSI Host Video VA Configuration Register,                  Address offset: 0x60      */
  __IO uint32_t LCCR;          /*!< DSI Host LTDC Command Configuration Register,              Address offset: 0x64      */
  __IO uint32_t CMCR;          /*!< DSI Host Command Mode Configuration Register,              Address offset: 0x68      */
  __IO uint32_t GHCR;          /*!< DSI Host Generic Header Configuration Register,            Address offset: 0x6C      */
  __IO uint32_t GPDR;          /*!< DSI Host Generic Payload Data Register,                    Address offset: 0x70      */
  __IO uint32_t GPSR;          /*!< DSI Host Generic Packet Status Register,                   Address offset: 0x74      */
  __IO uint32_t TCCR[6];       /*!< DSI Host Timeout Counter Configuration Register,           Address offset: 0x78-0x8F */
  __IO uint32_t TDCR;          /*!< DSI Host 3D Configuration Register,                        Address offset: 0x90      */
  __IO uint32_t CLCR;          /*!< DSI Host Clock Lane Configuration Register,                Address offset: 0x94      */
  __IO uint32_t CLTCR;         /*!< DSI Host Clock Lane Timer Configuration Register,          Address offset: 0x98      */
  __IO uint32_t DLTCR;         /*!< DSI Host Data Lane Timer Configuration Register,           Address offset: 0x9C      */
  __IO uint32_t PCTLR;         /*!< DSI Host PHY Control Register,                             Address offset: 0xA0      */
  __IO uint32_t PCONFR;        /*!< DSI Host PHY Configuration Register,                       Address offset: 0xA4      */
  __IO uint32_t PUCR;          /*!< DSI Host PHY ULPS Control Register,                        Address offset: 0xA8      */
  __IO uint32_t PTTCR;         /*!< DSI Host PHY TX Triggers Configuration Register,           Address offset: 0xAC      */
  __IO uint32_t PSR;           /*!< DSI Host PHY Status Register,                              Address offset: 0xB0      */
  uint32_t      RESERVED1[2];  /*!< Reserved, 0xB4 - 0xBB                                                                */
  __IO uint32_t ISR[2];        /*!< DSI Host Interrupt & Status Register,                      Address offset: 0xBC-0xC3 */
  __IO uint32_t IER[2];        /*!< DSI Host Interrupt Enable Register,                        Address offset: 0xC4-0xCB */
  uint32_t      RESERVED2[3];  /*!< Reserved, 0xD0 - 0xD7                                                                */
  __IO uint32_t FIR[2];        /*!< DSI Host Force Interrupt Register,                         Address offset: 0xD8-0xDF */
  uint32_t      RESERVED3[5];  /*!< Reserved, 0xE0 - 0xF3                                                                */
  __IO uint32_t DLTRCR;        /*!< DSI Host Data Lane Timer Read Configuration Register,      Address offset: 0xF4      */
  uint32_t      RESERVED4[2];  /*!< Reserved, 0xF8 - 0xFF                                                                */
  __IO uint32_t VSCR;          /*!< DSI Host Video Shadow Control Register,                    Address offset: 0x100     */
  uint32_t      RESERVED5[2];  /*!< Reserved, 0x104 - 0x10B                                                              */
  __IO uint32_t LCVCIDR;       /*!< DSI Host LTDC Current VCID Register,                       Address offset: 0x10C     */
  __IO uint32_t LCCCR;         /*!< DSI Host LTDC Current Color Coding Register,               Address offset: 0x110     */
  uint32_t      RESERVED6;     /*!< Reserved, 0x114                                                                      */
  __IO uint32_t LPMCCR;        /*!< DSI Host Low-power Mode Current Configuration Register,    Address offset: 0x118     */
  uint32_t      RESERVED7[7];  /*!< Reserved, 0x11C - 0x137                                                              */
  __IO uint32_t VMCCR;         /*!< DSI Host Video Mode Current Configuration Register,        Address offset: 0x138     */
  __IO uint32_t VPCCR;         /*!< DSI Host Video Packet Current Configuration Register,      Address offset: 0x13C     */
  __IO uint32_t VCCCR;         /*!< DSI Host Video Chuncks Current Configuration Register,     Address offset: 0x140     */
  __IO uint32_t VNPCCR;        /*!< DSI Host Video Null Packet Current Configuration Register, Address offset: 0x144     */
  __IO uint32_t VHSACCR;       /*!< DSI Host Video HSA Current Configuration Register,         Address offset: 0x148     */
  __IO uint32_t VHBPCCR;       /*!< DSI Host Video HBP Current Configuration Register,         Address offset: 0x14C     */
  __IO uint32_t VLCCR;         /*!< DSI Host Video Line Current Configuration Register,        Address offset: 0x150     */
  __IO uint32_t VVSACCR;       /*!< DSI Host Video VSA Current Configuration Register,         Address offset: 0x154     */
  __IO uint32_t VVBPCCR;       /*!< DSI Host Video VBP Current Configuration Register,         Address offset: 0x158     */
  __IO uint32_t VVFPCCR;       /*!< DSI Host Video VFP Current Configuration Register,         Address offset: 0x15C     */
  __IO uint32_t VVACCR;        /*!< DSI Host Video VA Current Configuration Register,          Address offset: 0x160     */
  uint32_t      RESERVED8[11]; /*!< Reserved, 0x164 - 0x18F                                                              */
  __IO uint32_t TDCCR;         /*!< DSI Host 3D Current Configuration Register,                Address offset: 0x190     */
  uint32_t      RESERVED9[155]; /*!< Reserved, 0x194 - 0x3FF                                                             */
  __IO uint32_t WCFGR;          /*!< DSI Wrapper Configuration Register,                       Address offset: 0x400     */
  __IO uint32_t WCR;            /*!< DSI Wrapper Control Register,                             Address offset: 0x404     */
  __IO uint32_t WIER;           /*!< DSI Wrapper Interrupt Enable Register,                    Address offset: 0x408     */
  __IO uint32_t WISR;           /*!< DSI Wrapper Interrupt and Status Register,                Address offset: 0x40C     */
  __IO uint32_t WIFCR;          /*!< DSI Wrapper Interrupt Flag Clear Register,                Address offset: 0x410     */
  uint32_t      RESERVED10;     /*!< Reserved, 0x414                                                                     */
  __IO uint32_t WPCR[2];        /*!< DSI Wrapper PHY Configuration Register,                   Address offset: 0x418-41C */
  uint32_t      RESERVED11[4];  /*!< Reserved, 0x420 - 0x42F                                                             */
  __IO uint32_t WRPCR;          /*!< DSI Wrapper Regulator and PLL Control Register,           Address offset: 0x430     */
  uint32_t      RESERVED12[239];  /*!< Reserved, 0x434 - 0x7EC                                                           */
  __IO uint32_t HWCFGR;         /*!< DSI Host hardware configuration register,                 Address offset: 0x7F0     */
  __IO uint32_t VERR;           /*!< DSI Host version register,                                Address offset: 0x7F4     */
  __IO uint32_t IPIDR;          /*!< DSI Host Identification register,                         Address offset: 0x7F8     */
  __IO uint32_t SIDR;           /*!< DSI Host Size ID register,                                Address offset: 0x7FC     */
} DSI_TypeDef;

/*
 * @brief EXTI Block description (EXTI)
 * c7amba_exti_v3-0_UserSpec_v3_0_0h3 *
 */
typedef struct
{
  __IO uint32_t RTSR1;           /*!< EXTI rising trigger selection register        Address offset: 0x000 */
  __IO uint32_t FTSR1;           /*!< EXTI falling trigger selection register       Address offset: 0x004 */
  __IO uint32_t SWIER1;          /*!< EXTI software interrupt event register        Address offset: 0x008 */
  __IO uint32_t RPR1;            /*!< EXTI rising edge pending register             Address offset: 0x00C */
  __IO uint32_t FPR1;            /*!< EXTI falling edge pending register            Address offset: 0x010 */
  __IO uint32_t SECCFGR1;        /*!< EXTI security configuration register          Address offset: 0x014 */
  __IO uint32_t PRIVCFGR1;       /*!< EXTI Privilege configuration register         Address offset: 0x018 */
       uint32_t RESERVED0;       /*!< Reserved                                      Address offset: 0x01C */
  __IO uint32_t RTSR2;           /*!< EXTI rising trigger selection register        Address offset: 0x020 */
  __IO uint32_t FTSR2;           /*!< EXTI falling trigger selection register       Address offset: 0x024 */
  __IO uint32_t SWIER2;          /*!< EXTI software interrupt event register        Address offset: 0x028 */
  __IO uint32_t RPR2;            /*!< EXTI rising edge pending register             Address offset: 0x02C */
  __IO uint32_t FPR2;            /*!< EXTI falling edge pending register            Address offset: 0x030 */
  __IO uint32_t SECCFGR2;        /*!< EXTI security enable register                 Address offset: 0x034 */
  __IO uint32_t PRIVCFGR2;       /*!< EXTI Privilege enable register                Address offset: 0x038 */
       uint32_t RESERVED1;       /*!< Reserved                                       Address offset: 0x03C */
  __IO uint32_t RTSR3;           /*!< EXTI rising trigger selection register        Address offset: 0x040 */
  __IO uint32_t FTSR3;           /*!< EXTI falling trigger selection register       Address offset: 0x044 */
  __IO uint32_t SWIER3;          /*!< EXTI software interrupt event register        Address offset: 0x048 */
  __IO uint32_t RPR3;            /*!< EXTI rising edge pending register             Address offset: 0x04C */
  __IO uint32_t FPR3;            /*!< EXTI falling edge pending register            Address offset: 0x050 */
  __IO uint32_t SECCFGR3;        /*!< EXTI security enable register                 Address offset: 0x054 */
  __IO uint32_t PRIVCFGR3;       /*!< EXTI Privilege enable register                Address offset: 0x058 */
       uint32_t RESERVED15;      /*!< Reserved                                       Address offset: 0x05C */
  __IO uint32_t EXTICR[4];       /*!< EXTI external interrupt selection register 1  Address offset: 0x060-0x6C */
  __IO uint32_t LOCKR;           /*!< EXTI lock register                            Address offset: 0x070 */
       uint32_t RESERVED3[3];    /*!< Reserved                                       Address offset: 0x074-0x07C */
  __IO uint32_t C1IMR1;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x080 */
  __IO uint32_t C1EMR1;          /*!< EXTI CPU1 wakeup with event mask register     Address offset: 0x084 */
       uint32_t RESERVED17[2];   /*!< Reserved                                       Address offset: 0x088-0x08C */
  __IO uint32_t C1IMR2;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x090 */
  __IO uint32_t C1EMR2;          /*!< EXTI CPU1 wakeup with event mask register     Address offset: 0x094 */
       uint32_t RESERVED18[2];   /*!< Reserved                                       Address offset: 0x098-0x09C */
  __IO uint32_t C1IMR3;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x0A0 */
  __IO uint32_t C1EMR3;          /*!< EXTI CPU1 wakeup with event mask register     Address offset: 0x0A4 */
       uint32_t RESERVED6[6];    /*!< Reserved                                       Address offset: 0x0A8-0x0BC */
  __IO uint32_t C2IMR1;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0C0 */
  __IO uint32_t C2EMR1;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0C4 */
       uint32_t RESERVED20[2];   /*!< Reserved                                       Address offset: 0x0C8-0x0CC */
  __IO uint32_t C2IMR2;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0D0 */
  __IO uint32_t C2EMR2;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0D4 */
       uint32_t RESERVED21[2];   /*!< Reserved                                       Address offset: 0x0D8-0x0DC */
  __IO uint32_t C2IMR3;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0E0 */
  __IO uint32_t C2EMR3;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0E4 */
         uint32_t RESERVED22[6];   /*!< Reserved                                       Address offset: 0x0E8-0x0FC */
  __IO uint32_t C3IMR1;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x100 */
  __IO uint32_t C3EMR1;          /*!< EXTI CPU3 wakeup with event mask register     Address offset: 0x104 */
       uint32_t RESERVED23[2];   /*!< Reserved                                       Address offset: 0x108-0x10C */
  __IO uint32_t C3IMR2;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x110 */
  __IO uint32_t C3EMR2;          /*!< EXTI CPU3 wakeup with event mask register     Address offset: 0x114 */
       uint32_t RESERVED24[2];   /*!< Reserved                                       Address offset: 0x118-0x11C */
  __IO uint32_t C3IMR3;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x120 */
       uint32_t RESERVED25[23];  /*!< Reserved                                       Address offset: 0x124-0x17C */
  __IO uint32_t ECIDCFGR[80];    /*!< EXTI configurable event CID Config register   Address offset: 0x180-0x2BC */
       uint32_t RESERVED26[16];  /*!< Reserved                                       Address offset: 0x2C0-0x2FC */
  __IO uint32_t C1CIDCFGR;       /*!< EXTI processor 1 CID configuration register   Address offset: 0x300 */
  __IO uint32_t C2CIDCFGR;       /*!< EXTI processor 2 CID configuration register   Address offset: 0x304 */
  __IO uint32_t C3CIDCFGR;       /*!< EXTI processor 3 CID configuration register   Address offset: 0x308 */
       uint32_t RESERVED27[45];  /*!< Reserved                                      Address offset: 0x30C-0x3BC */
  __IO uint32_t HWCFGR13;        /*!< EXTI Hardware configuration register 13       Address offset: 0x3C0 */
  __IO uint32_t HWCFGR12;        /*!< EXTI Hardware configuration register 12       Address offset: 0x3C4 */
  __IO uint32_t HWCFGR11;        /*!< EXTI Hardware configuration register 11       Address offset: 0x3C8 */
       uint32_t RESERVED12[3];   /*!< Reserved                                      Address offset: 0x3CC-0x3D4 */
  __IO uint32_t HWCFGR7;         /*!< EXTI Hardware configuration register 7        Address offset: 0x3D8 */
  __IO uint32_t HWCFGR6;         /*!< EXTI Hardware configuration register 6        Address offset: 0x3DC */
  __IO uint32_t HWCFGR5;         /*!< EXTI Hardware configuration register 5        Address offset: 0x3E0 */
  __IO uint32_t HWCFGR4;         /*!< EXTI Hardware configuration register 4        Address offset: 0x3E4 */
  __IO uint32_t HWCFGR3;         /*!< EXTI Hardware configuration register 3        Address offset: 0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< EXTI Hardware configuration register 2        Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< EXTI Hardware configuration register 1        Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< EXTI IP Version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< EXTI Identification register                  Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< EXTI Size ID register                         Address offset: 0x3FC */
} EXTI_TypeDef;

typedef struct
{
  __IO uint32_t IMR1;                /*!< EXTI Interrupt mask register,                Address offset: 0x00 */
  __IO uint32_t EMR1;                /*!< EXTI Event mask register,                    Address offset: 0x04 */
  uint32_t      RESERVED1[2];        /*!< Reserved, offset 0x08 -> 0x10                                     */
  __IO uint32_t IMR2;                /*!< EXTI Interrupt mask register,                Address offset: 0x10 */
  __IO uint32_t EMR2;                /*!< EXTI Event mask register,                    Address offset: 0x14 */
  uint32_t      RESERVED2[2];        /*!< Reserved, offset 0x18 -> 0x20                                     */
  __IO uint32_t IMR3;                /*!< EXTI Interrupt mask register,                Address offset: 0x20 */
  __IO uint32_t EMR3;                /*!< EXTI Event mask register,                    Address offset: 0x24 */
  uint32_t      RESERVED3[6];        /*!< Reserved, offset 0x28 -> 0x40                                     */
} EXTI_Core_TypeDef;

/**
* @brief General Purpose I/O
* @note c7amba_ioport4 Rev 1.0.2
*/
typedef struct
{
  __IO uint32_t MODER;           /*!< GPIO mode register                                  Address offset: 0x000 */
  __IO uint32_t OTYPER;          /*!< GPIO output type register                           Address offset: 0x004 */
  __IO uint32_t OSPEEDR;         /*!< GPIO output speed register                          Address offset: 0x008 */
  __IO uint32_t PUPDR;           /*!< GPIO port pull-up/pull-down register                Address offset: 0x00C */
  __IO uint32_t IDR;             /*!< GPIO input data register                            Address offset: 0x010 */
  __IO uint32_t ODR;             /*!< GPIO output data register                           Address offset: 0x014 */
  __IO uint32_t BSRR;            /*!< GPIO bit set/reset register                         Address offset: 0x018 */
  __IO uint32_t LCKR;            /*!< GPIO configuration lock register                    Address offset: 0x01C */
  __IO uint32_t AFR[2];          /*!< GPIO alternate function  registers                  Address offset: 0x020 */
  __IO uint32_t BRR;             /*!< GPIO bit reset register                             Address offset: 0x028 */
  __IO uint32_t OR;              /*!< GPIO bit option register                            Address offset: 0x02C */
  __IO uint32_t SECCFGR;         /*!< GPIO secure configuration register                  Address offset: 0x030 */
  __IO uint32_t PRIVCFGR;        /*!< GPIO privileged configuration register              Address offset: 0x034 */
  __IO uint32_t SPCFGLOCK;       /*!< GPIO security privilege configuration lock register Address offset: 0x038 */
  __IO uint32_t LKR;             /*!< GPIO latch keeper register                          Address offset: 0x03C */
  __IO uint32_t DELAYRL;         /*!< GPIO delay low register                             Address offset: 0x040 */
  __IO uint32_t DELAYRH;         /*!< GPIO delay high register                            Address offset: 0x044 */
  __IO uint32_t PIOCFGRL;        /*!< GPIO PIO control low register                       Address offset: 0x048 */
  __IO uint32_t PIOCFGRH;        /*!< GPIO delay high register                            Address offset: 0x04C */
  __IO uint32_t CIDCFGR0;        /*!< GPIO CID configuration register for I/O pin 0       Address offset: 0x050 */
  __IO uint32_t SEMCR0;          /*!< GPIO semaphore control register for I/O pin 0       Address offset: 0x054 */
  __IO uint32_t CIDCFGR1;        /*!< GPIO CID configuration register for I/O pin 1       Address offset: 0x058 */
  __IO uint32_t SEMCR1;          /*!< GPIO semaphore control register for I/O pin 1       Address offset: 0x05C */
  __IO uint32_t CIDCFGR2;        /*!< GPIO CID configuration register for I/O pin 2       Address offset: 0x060 */
  __IO uint32_t SEMCR2;          /*!< GPIO semaphore control register for I/O pin 2       Address offset: 0x064 */
  __IO uint32_t CIDCFGR3;        /*!< GPIO CID configuration register for I/O pin 3       Address offset: 0x068 */
  __IO uint32_t SEMCR3;          /*!< GPIO semaphore control register for I/O pin 3       Address offset: 0x06C */
  __IO uint32_t CIDCFGR4;        /*!< GPIO CID configuration register for I/O pin 4       Address offset: 0x070 */
  __IO uint32_t SEMCR4;          /*!< GPIO semaphore control register for I/O pin 4       Address offset: 0x074 */
  __IO uint32_t CIDCFGR5;        /*!< GPIO CID configuration register for I/O pin 5       Address offset: 0x078 */
  __IO uint32_t SEMCR5;          /*!< GPIO semaphore control register for I/O pin 5       Address offset: 0x07C */
  __IO uint32_t CIDCFGR6;        /*!< GPIO CID configuration register for I/O pin 6       Address offset: 0x080 */
  __IO uint32_t SEMCR6;          /*!< GPIO semaphore control register for I/O pin 6       Address offset: 0x084 */
  __IO uint32_t CIDCFGR7;        /*!< GPIO CID configuration register for I/O pin 7       Address offset: 0x088 */
  __IO uint32_t SEMCR7;          /*!< GPIO semaphore control register for I/O pin 7       Address offset: 0x08C */
  __IO uint32_t CIDCFGR8;        /*!< GPIO CID configuration register for I/O pin 8       Address offset: 0x090 */
  __IO uint32_t SEMCR8;          /*!< GPIO semaphore control register for I/O pin 8       Address offset: 0x094 */
  __IO uint32_t CIDCFGR9;        /*!< GPIO CID configuration register for I/O pin 9       Address offset: 0x098 */
  __IO uint32_t SEMCR9;          /*!< GPIO semaphore control register for I/O pin 9       Address offset: 0x09C */
  __IO uint32_t CIDCFGR10;       /*!< GPIO CID configuration register for I/O pin 10      Address offset: 0x0A0 */
  __IO uint32_t SEMCR10;         /*!< GPIO semaphore control register for I/O pin 10      Address offset: 0x0A4 */
  __IO uint32_t CIDCFGR11;       /*!< GPIO CID configuration register for I/O pin 11      Address offset: 0x0A8 */
  __IO uint32_t SEMCR11;         /*!< GPIO semaphore control register for I/O pin 11      Address offset: 0x0AC */
  __IO uint32_t CIDCFGR12;       /*!< GPIO CID configuration register for I/O pin 12      Address offset: 0x0B0 */
  __IO uint32_t SEMCR12;         /*!< GPIO semaphore control register for I/O pin 12      Address offset: 0x0B4 */
  __IO uint32_t CIDCFGR13;       /*!< GPIO CID configuration register for I/O pin 13      Address offset: 0x0B8 */
  __IO uint32_t SEMCR13;         /*!< GPIO semaphore control register for I/O pin 13      Address offset: 0x0BC */
  __IO uint32_t CIDCFGR14;       /*!< GPIO CID configuration register for I/O pin 14      Address offset: 0x0C0 */
  __IO uint32_t SEMCR14;         /*!< GPIO semaphore control register for I/O pin 14      Address offset: 0x0C4 */
  __IO uint32_t CIDCFGR15;       /*!< GPIO CID configuration register for I/O pin 15      Address offset: 0x0C8 */
  __IO uint32_t SEMCR15;         /*!< GPIO semaphore control register for I/O pin 15      Address offset: 0x0CC */
       uint32_t RESERVED1[190];  /*!< Reserved                                            Address offset: 0x0D0-0x3C4 */
  __IO uint32_t HWCFGR10;        /*!< GPIO hardware configuration register 10             Address offset: 0x3C8 */
  __IO uint32_t HWCFGR9;         /*!< GPIO hardware configuration register 9              Address offset: 0x3CC */
  __IO uint32_t HWCFGR8;         /*!< GPIO hardware configuration register 8              Address offset: 0x3D0 */
  __IO uint32_t HWCFGR7;         /*!< GPIO hardware configuration register 7              Address offset: 0x3D4 */
  __IO uint32_t HWCFGR6;         /*!< GPIO hardware configuration register 6              Address offset: 0x3D8 */
  __IO uint32_t HWCFGR5;         /*!< GPIO hardware configuration register 5              Address offset: 0x3DC */
  __IO uint32_t HWCFGR4;         /*!< GPIO hardware configuration register 4              Address offset: 0x3E0 */
  __IO uint32_t HWCFGR3;         /*!< GPIO hardware configuration register 3              Address offset: 0x3E4 */
  __IO uint32_t HWCFGR2;         /*!< GPIO hardware configuration register 2              Address offset: 0x3E8 */
  __IO uint32_t HWCFGR1;         /*!< GPIO hardware configuration register 1              Address offset: 0x3EC */
  __IO uint32_t HWCFGR0;         /*!< GPIO hardware configuration register 0              Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< GPIO version register                               Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< GPIO identification register                        Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< GPIO size identification register                   Address offset: 0x3FC */
} GPIO_TypeDef;

/**
  * @brief HASH
  */
/* HASH (c7amba_hash1@v3.0) */
typedef struct
{
  __IO uint32_t CR;               /*!< HASH control register,          Address offset: 0x00        */
  __IO uint32_t DIN;              /*!< HASH data input register,       Address offset: 0x04        */
  __IO uint32_t STR;              /*!< HASH start register,            Address offset: 0x08        */
  __IO uint32_t HR[5];            /*!< HASH digest registers,          Address offset: 0x0C-0x1C   */
  __IO uint32_t IMR;              /*!< HASH interrupt enable register, Address offset: 0x20        */
  __IO uint32_t SR;               /*!< HASH status register,           Address offset: 0x24        */
  __IO uint32_t SHA3CFGR;         /*!< HASH SHA3 config. register      Address offset: 0x28        */
       uint32_t RESERVED[51];
  __IO uint32_t CSR[72];          /*!< HASH context swap registers,    Address offset: 0x0F8-0x214 */
       uint32_t RESERVED2[62];
  __IO uint32_t HR2[8];
       uint32_t RESERVED3[48];
  __IO uint32_t HWCFGR;           /*!< HASH Hardware configuration register, Address offset: 0x3F0 */
  __IO uint32_t VERR;             /*!< HASH Version register,                   Address offset: 0x3F4 */
  __IO uint32_t ID;               /*!< HASH identification register,             Address offset: 0x3F8 */
  __IO uint32_t MID;              /*!< HASH Hardware Magic ID register,         Address offset: 0x3FC */
} HASH_TypeDef;

/**
  * @brief HASH_DIGEST
  */
/* HASH (c7amba_hash1@v3.0) */
typedef struct
{
  __IO uint32_t HR[50];     /*!< HASH digest registers,          Address offset: 0x310-0x3D4 */
} HASH_DIGEST_TypeDef;

/**
  * @brief Inter-integrated Circuit Interface (I2C)
  */

typedef struct
{
  __IO uint32_t CR1;            /*!< I2C Control register 1                 Address offset: 0x00 */
  __IO uint32_t CR2;            /*!< I2C Control register 2                 Address offset: 0x04 */
  __IO uint32_t OAR1;           /*!< I2C Own address 1 register             Address offset: 0x08 */
  __IO uint32_t OAR2;           /*!< I2C Own address 2 register             Address offset: 0x0C */
  __IO uint32_t TIMINGR;        /*!< I2C Timing register                    Address offset: 0x10 */
  __IO uint32_t TIMEOUTR;       /*!< I2C Timeout register                   Address offset: 0x14 */
  __IO uint32_t ISR;            /*!< I2C Interrupt and status register      Address offset: 0x18 */
  __IO uint32_t ICR;            /*!< I2C Interrupt clear register           Address offset: 0x1C */
  __IO uint32_t PECR;           /*!< I2C PEC register                       Address offset: 0x20 */
  __IO uint32_t RXDR;           /*!< I2C Receive data register              Address offset: 0x24 */
  __IO uint32_t TXDR;           /*!< I2C Transmit data register             Address offset: 0x28 */
       uint32_t RESERVED[241];  /*!< Reserved                               Address offset: 0x2C->0x3F0 */
  __IO uint32_t HWCFGR;         /*!< I2C hardware configuration register    Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< I2C version register                   Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< I2C identification register            Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< I2C size identification register       Address offset: 0x3FC */
} I2C_TypeDef;

/**
  * @brief Inter-Processor Communication
  */
typedef struct
{
  __IO uint32_t C1CR;             /*!< Inter-Processor Communication: C1 control register,                  Address offset: 0x000 */
  __IO uint32_t C1MR ;            /*!< Inter-Processor Communication: C1 mask register,                     Address offset: 0x004 */
  __IO uint32_t C1SCR;            /*!< Inter-Processor Communication: C1 status set clear register,         Address offset: 0x008 */
  __IO uint32_t C1TOC2SR;         /*!< Inter-Processor Communication: C1 to processor M4  status register,  Address offset: 0x00C */
  __IO uint32_t C2CR;             /*!< Inter-Processor Communication: C2 control register,                  Address offset: 0x010 */
  __IO uint32_t C2MR ;            /*!< Inter-Processor Communication: C2 mask register,                     Address offset: 0x014 */
  __IO uint32_t C2SCR;            /*!< Inter-Processor Communication: C2 status set clear register,         Address offset: 0x018 */
  __IO uint32_t C2TOC1SR;         /*!< Inter-Processor Communication: C2 to processor M4 status register,   Address offset: 0x01C */
  __IO uint32_t RESERVED1[244];   /*!< Reserved                                                                                   */
  __IO uint32_t HWCFGR;           /*!< Inter-Processor Communication hardware configuration register,       Address offset: 0x3F0 */
  __IO uint32_t VERR;             /*!< Inter-Processor Communication version register,                      Address offset: 0x3F4 */
  __IO uint32_t ID;               /*!< Inter-Processor Communication identification register,               Address offset: 0x3F8 */
  __IO uint32_t SID;              /*!< Inter-Processor Communication size identification register,          Address offset: 0x3FC */
} IPCC_TypeDef;

typedef struct
{
  __IO uint32_t CR;               /*!< Control register,                                                    Address offset: 0x000 */
  __IO uint32_t MR;               /*!< Mask register,                                                       Address offset: 0x004 */
  __IO uint32_t SCR;              /*!< Status set clear register,                                           Address offset: 0x008 */
  __IO uint32_t SR;               /*!< Status register,                                                     Address offset: 0x00C */
} IPCC_CommonTypeDef;

/*
 * @brief Independent Watchdog (IWDG)
 */
typedef struct
{
  __IO uint32_t KR;              /*!< IWDG key register                    Address offset: 0x000 */
  __IO uint32_t PR;              /*!< IWDG prescaler register              Address offset: 0x004 */
  __IO uint32_t RLR;             /*!< IWDG reload register                 Address offset: 0x008 */
  __IO uint32_t SR;              /*!< IWDG status register                 Address offset: 0x00C */
  __IO uint32_t WINR;            /*!< IWDG window register                 Address offset: 0x010 */
  __IO uint32_t EWCR;            /*!< IWDG early wakeup interrupt register Address offset: 0x014 */
  __IO uint32_t ICR;             /*!< IWDG Interrupt clear register        Address offset: 0x018 */
       uint32_t RESERVED0[245];  /*!< Reserved                             Address offset: 0x01C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< IWDG hardware configuration register Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< IWDG version register                Address offset: 0x3F4 */
  __IO uint32_t IDR;             /*!< IWDG identification register         Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< IWDG size identification register    Address offset: 0x3FC */
} IWDG_TypeDef;

/**
  * @brief Low power timer (LPTIM)
    IP version is  v2_1_rc1
  */
typedef struct
{
  __IO uint32_t ISR;             /*!< LPTIM Interrupt and Status register                 Address offset: 0x000 */
  __IO uint32_t ICR;             /*!< LPTIM Interrupt Clear register                      Address offset: 0x004 */
  __IO uint32_t DIER;            /*!< LPTIM Interrupt Enable register                     Address offset: 0x008 */
  __IO uint32_t CFGR;            /*!< LPTIM Configuration register                        Address offset: 0x00C */
  __IO uint32_t CR;              /*!< LPTIM Control register                              Address offset: 0x010 */
  __IO uint32_t CCR1;            /*!< LPTIM Capture/Compare register 1                    Address offset: 0x014 */
  __IO uint32_t ARR;             /*!< LPTIM Autoreload register                           Address offset: 0x018 */
  __IO uint32_t CNT;             /*!< LPTIM Counter register                              Address offset: 0x01C */
  __IO uint32_t RESERVED0;       /*!< Reserved                                            Address offset: 0x020 */
  __IO uint32_t CFGR2;           /*!< LPTIM Configuration register 2                      Address offset: 0x024 */
  __IO uint32_t RCR;             /*!< LPTIM Repetition register                           Address offset: 0x028 */
  __IO uint32_t CCMR1;           /*!< LPTIM Capture/Compare mode register                 Address offset: 0x02C */
  __IO uint32_t RESERVED1;       /*!< Reserved                                            Address offset: 0x030 */
  __IO uint32_t CCR2;            /*!< LPTIM Capture/Compare register 2                    Address offset: 0x034 */
       uint32_t RESERVED2[237];  /*!< Reserved                                            Address offset: 0x038-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< LPTIM peripheral hardware configuration register 2  Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< LPTIM peripheral hardware configuration register 1  Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< LPTIM peripheral version identification register    Address offset: 0x3F4 */
  __IO uint32_t PIDR;            /*!< LPTIM peripheral type identification register       Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< LPTIM registers map size identification register    Address offset: 0x3FC */
} LPTIM_TypeDef;

/**
  * @brief LCD-TFT Display Controller
  */

typedef struct
{
  __IO uint32_t IDR;            /*!< LTDC identification register Address offset: 0x0 */
  __IO uint32_t LCR;            /*!< LDTC layer count register Address offset: 0x4 */
  __IO uint32_t SSCR;           /*!< LTDC synchronization size configuration register Address offset: 0x8 */
  __IO uint32_t BPCR;           /*!< LTDC back porch configuration register Address offset: 0xc */
  __IO uint32_t AWCR;           /*!< LTDC active width configuration register Address offset: 0x10 */
  __IO uint32_t TWCR;           /*!< LTDC total width configuration register Address offset: 0x14 */
  __IO uint32_t GCR;            /*!< LTDC global control register Address offset: 0x18 */
  __IO uint32_t GC1R;           /*!< LTDC global configuration 1 register Address offset: 0x1c */
  __IO uint32_t GC2R;           /*!< LTDC global configuration 2 register Address offset: 0x20 */
  __IO uint32_t SRCR;           /*!< LTDC shadow reload configuration register Address offset: 0x24 */
  __IO uint32_t GCCR;           /*!< LTDC gamma correction configuration register Address offset: 0x28 */
  __IO uint32_t BCCR;           /*!< LTDC background color configuration register Address offset: 0x2c */
       uint32_t RESERVED0;      /*!< Reserved Address offset: 0x30 */
  __IO uint32_t IER;            /*!< LTDC interrupt enable register Address offset: 0x34 */
  __IO uint32_t ISR;            /*!< LTDC interrupt status register Address offset: 0x38 */
  __IO uint32_t ICR;            /*!< LTDC Interrupt Clear Register Address offset: 0x3c */
  __IO uint32_t LIPCR;          /*!< LTDC line interrupt position configuration register Address offset: 0x40 */
  __IO uint32_t CPSR;           /*!< LTDC current position status register Address offset: 0x44 */
  __IO uint32_t CDSR;           /*!< LTDC current display status register Address offset: 0x48 */
       uint32_t RESERVED1[5];   /*!< Reserved Address offset: 0x4c */
  __IO uint32_t EDCR;           /*!< LTDC external display control register Address offset: 0x60 */
  __IO uint32_t IER2;           /*!< LTDC interrupt enable register 2 Address offset: 0x64 */
  __IO uint32_t ISR2;           /*!< LTDC interrupt status register 2 Address offset: 0x68 */
  __IO uint32_t ICR2;           /*!< LTDC Interrupt Clear Register 2 Address offset: 0x6c */
  __IO uint32_t LIPCR2;         /*!< LTDC line interrupt position configuration register 2 Address offset: 0x70 */
       uint32_t RESERVED2;      /*!< Reserved Address offset: 0x74 */
  __IO uint32_t ECRCR;          /*!< LTDC expected CRC register Address offset: 0x78 */
  __IO uint32_t CCRCR;          /*!< LTDC computed CRC register Address offset: 0x7c */
  __IO uint32_t RB0AR;          /*!< LTDC rotation buffer 0 address register Address offset: 0x80 */
  __IO uint32_t RB1AR;          /*!< LTDC rotation buffer 1 address register Address offset: 0x84 */
  __IO uint32_t RBPR;           /*!< LTDC rotation buffer pitch register Address offset: 0x88 */
  __IO uint32_t RIFCR;          /*!< LTDC rotation intermediate frame color register Address offset: 0x8c */
  __IO uint32_t FUTR;           /*!< LTDC FIFO underrun threshold register Address offset: 0x90 */
} LTDC_TypeDef;

/**
  * @brief LCD-TFT Display layer x Controller
  */

typedef struct
{
  __IO uint32_t C0R;          /*!< LTDC layer x configuration 0 register Address offset: 0x100 */
  __IO uint32_t C1R;          /*!< LTDC layer x configuration 1 register Address offset: 0x104 */
  __IO uint32_t RCR;          /*!< LTDC layer x reload control register Address offset: 0x108 */
  __IO uint32_t CR;           /*!< LTDC layer x control register Address offset: 0x10c */
  __IO uint32_t WHPCR;        /*!< LTDC layer x window horizontal position configuration register Address offset: 0x110 */
  __IO uint32_t WVPCR;        /*!< LTDC layer x window vertical position configuration register Address offset: 0x114 */
  __IO uint32_t CKCR;         /*!< LTDC layer x color keying configuration register Address offset: 0x118 */
  __IO uint32_t PFCR;         /*!< LTDC layer x pixel format configuration register Address offset: 0x11c */
  __IO uint32_t CACR;         /*!< LTDC layer x constant alpha configuration register Address offset: 0x120 */
  __IO uint32_t DCCR;         /*!< LTDC layer x default color configuration register Address offset: 0x124 */
  __IO uint32_t BFCR;         /*!< LTDC layer x blending factors configuration register Address offset: 0x128 */
  __IO uint32_t BLCR;         /*!< LTDC layer x burst length configuration register Address offset: 0x12c */
  __IO uint32_t PCR;          /*!< LTDC layer x planar configuration register Address offset: 0x130 */
  __IO uint32_t CFBAR;        /*!< LTDC layer x color frame buffer address register Address offset: 0x134 */
  __IO uint32_t CFBLR;        /*!< LTDC layer x color frame buffer length register Address offset: 0x138 */
  __IO uint32_t CFBLNR;       /*!< LTDC layer x color frame buffer line number register Address offset: 0x13c */
  __IO uint32_t AFBA0R;       /*!< LTDC layer x auxiliary frame buffer address 0 register Address offset: 0x140 */
  __IO uint32_t AFBA1R;       /*!< LTDC layer x auxiliary frame buffer address 1 register Address offset: 0x144 */
  __IO uint32_t AFBLR;        /*!< LTDC layer x auxiliary frame buffer length register Address offset: 0x148 */
  __IO uint32_t AFBLNR;       /*!< LTDC layer x auxiliary frame buffer line number register Address offset: 0x14c */
  __IO uint32_t CLUTWR;       /*!< LTDC layer x CLUT write register Address offset: 0x150 */
  __IO uint32_t SISR;         /*!< LTDC layer x Scaler Input Size register Address offset: 0x154 */
  __IO uint32_t SOSR;         /*!< LTDC layer x Scaler Output Size register Address offset: 0x158 */
  __IO uint32_t SVSFR;        /*!< LTDC layer x Scaler Vertical Scaling Factor register Address offset: 0x15c */
  __IO uint32_t SVSPR;        /*!< LTDC layer x Scaler Vertical Scaling Phase register Address offset: 0x160 */
  __IO uint32_t SHSFR;        /*!< LTDC layer x Scaler Horizontal Scaling Factor register Address offset: 0x164 */
  __IO uint32_t SHSPR;        /*!< LTDC layer x Scaler Horizontal Scaling Phase register Address offset: 0x168 */
  __IO uint32_t CYR0R;        /*!< LTDC layer x Conversion YCbCr RGB 0 register Address offset: 0x16c */
  __IO uint32_t CYR1R;        /*!< LTDC layer x Conversion YCbCr RGB 1 register Address offset: 0x170 */
} LTDC_Layer_TypeDef;

/**
  * @brief OCTO Serial Peripheral Interface
  */

typedef struct
{
  __IO uint32_t CR;               /*!< OCTOSPI Control register,                           Address offset: 0x000 */
       uint32_t RESERVED;         /*!< Reserved,                                           Address offset: 0x004 */
  __IO uint32_t DCR1;             /*!< OCTOSPI Device Configuration register 1,            Address offset: 0x008 */
  __IO uint32_t DCR2;             /*!< OCTOSPI Device Configuration register 2,            Address offset: 0x00C */
  __IO uint32_t DCR3;             /*!< OCTOSPI Device Configuration register 3,            Address offset: 0x010 */
  __IO uint32_t DCR4;             /*!< OCTOSPI Device Configuration register 4,            Address offset: 0x014 */
       uint32_t RESERVED1[2];     /*!< Reserved,                                           Address offset: 0x018-0x01C */
  __IO uint32_t SR;               /*!< OCTOSPI Status register,                            Address offset: 0x020 */
  __IO uint32_t FCR;              /*!< OCTOSPI Flag Clear register,                        Address offset: 0x024 */
       uint32_t RESERVED2[6];     /*!< Reserved,                                           Address offset: 0x028-0x03C */
  __IO uint32_t DLR;              /*!< OCTOSPI Data Length register,                       Address offset: 0x040 */
       uint32_t RESERVED3;        /*!< Reserved,                                           Address offset: 0x044 */
  __IO uint32_t AR;               /*!< OCTOSPI Address register,                           Address offset: 0x048 */
       uint32_t RESERVED4;        /*!< Reserved,                                           Address offset: 0x04C */
  __IO uint32_t DR;               /*!< OCTOPSI Data register,                              Address offset: 0x050 */
       uint32_t RESERVED5[11];    /*!< Reserved,                                           Address offset: 0x054-0x07C */
  __IO uint32_t PSMKR;            /*!< OCTOSPI Polling Status Mask register,               Address offset: 0x080 */
       uint32_t RESERVED6;        /*!< Reserved,                                           Address offset: 0x084 */
  __IO uint32_t PSMAR;            /*!< OCTOSPI Polling Status Match register,              Address offset: 0x088 */
       uint32_t RESERVED7;        /*!< Reserved,                                           Address offset: 0x08C */
  __IO uint32_t PIR;              /*!< OCTOSPI Polling Interval register,                  Address offset: 0x090 */
       uint32_t RESERVED8[27];    /*!< Reserved,                                           Address offset: 0x094-0x0FC */
  __IO uint32_t CCR;              /*!< OCTOSPI Communication Configuration register,       Address offset: 0x100 */
       uint32_t RESERVED9;        /*!< Reserved,                                           Address offset: 0x104 */
  __IO uint32_t TCR;              /*!< OCTOSPI Timing Configuration register,              Address offset: 0x108 */
       uint32_t RESERVED10;       /*!< Reserved,                                           Address offset: 0x10C */
  __IO uint32_t IR;               /*!< OCTOSPI Instruction register,                       Address offset: 0x110 */
       uint32_t RESERVED11[3];    /*!< Reserved,                                           Address offset: 0x114-0x11C */
  __IO uint32_t ABR;              /*!< OCTOSPI Alternate Bytes register,                   Address offset: 0x120 */
       uint32_t RESERVED12[3];    /*!< Reserved,                                           Address offset: 0x124-0x12C */
  __IO uint32_t LPTR;             /*!< OCTOSPI Low Power Timeout register,                 Address offset: 0x130 */
       uint32_t RESERVED13[3];    /*!< Reserved,                                           Address offset: 0x134-0x13C */
  __IO uint32_t WPCCR;            /*!< OCTOSPI Wrap Communication Configuration register,  Address offset: 0x140 */
       uint32_t RESERVED14;       /*!< Reserved,                                           Address offset: 0x144 */
  __IO uint32_t WPTCR;            /*!< OCTOSPI Wrap Timing Configuration register,         Address offset: 0x148 */
       uint32_t RESERVED15;       /*!< Reserved,                                           Address offset: 0x14C */
  __IO uint32_t WPIR;             /*!< OCTOSPI Wrap Instruction register,                  Address offset: 0x150 */
       uint32_t RESERVED16[3];    /*!< Reserved,                                           Address offset: 0x154-0x15C */
  __IO uint32_t WPABR;            /*!< OCTOSPI Wrap Alternate Bytes register,              Address offset: 0x160 */
       uint32_t RESERVED17[7];    /*!< Reserved,                                           Address offset: 0x164-0x17C */
  __IO uint32_t WCCR;             /*!< OCTOSPI Write Communication Configuration register, Address offset: 0x180 */
       uint32_t RESERVED18;       /*!< Reserved,                                           Address offset: 0x184 */
  __IO uint32_t WTCR;             /*!< OCTOSPI Write Timing Configuration register,        Address offset: 0x188 */
       uint32_t RESERVED19;       /*!< Reserved,                                           Address offset: 0x18C */
  __IO uint32_t WIR;              /*!< OCTOSPI Write Instruction register,                 Address offset: 0x190 */
       uint32_t RESERVED20[3];    /*!< Reserved,                                           Address offset: 0x194-0x19C */
  __IO uint32_t WABR;             /*!< OCTOSPI Write Alternate Bytes register,             Address offset: 0x1A0 */
       uint32_t RESERVED21[23];   /*!< Reserved,                                           Address offset: 0x1A4-0x1FC */
  __IO uint32_t HLCR;             /*!< OCTOSPI Hyperbus Latency Configuration register,    Address offset: 0x200 */
       uint32_t RESERVED22[123];  /*!< Reserved,                                           Address offset: 0x204-0x3EC */
  __IO uint32_t HWCFGR;           /*!< OCTOSPI HW Configuration register,                  Address offset: 0x3F0 */
  __IO uint32_t VERR;             /*!< OCTOSPI Version register,                           Address offset: 0x3F4 */
  __IO uint32_t IDR;              /*!< OCTOSPI Identification register,                    Address offset: 0x3F8 */
  __IO uint32_t MIDR;             /*!< OCTOPSI HW Magic ID register,                       Address offset: 0x3FC */
} OCTOSPI_TypeDef;

/**
  * @brief OCTO Serial Peripheral Interface IO Manager
  */

typedef struct
{
  __IO uint32_t CR;               /*!< OCTOSPI IO Manager Control register,                 Address offset: 0x00 */
  __IO uint32_t PCR[8];           /*!< OCTOSPI IO Manager Port[1:8] Configuration register, Address offset: 0x04-0x20 */
} OCTOSPIM_TypeDef;

 /**
  * @brief Public Key Accelerator (PKA)
  */
#define PKA_RAM_SIZE (5336U/4U)
typedef struct
{
  __IO uint32_t CR;          /*!< PKA control register,                 Address offset: 0x00 */
  __IO uint32_t SR;          /*!< PKA status register,                  Address offset: 0x04 */
  __IO uint32_t CLRFR;       /*!< PKA clear flag register,              Address offset: 0x08 */
  uint32_t  Reserved1[253];  /*!< Reserved                              Address offset: 0x000C-0x03FC*/
  __IO uint32_t RAM[PKA_RAM_SIZE];   /*!< PKA RAM,                      Address offset: 0x0400-0xXXXX */
  uint32_t  Reserved2[1788-PKA_RAM_SIZE];  /*!< Reserved                Address offset: (0xXXXX+4)-0x1FEF*/
  __IO uint32_t HWCFGR;      /*!< PKA configuration register,           Address offset: 0x1FF0 */
  __IO uint32_t VERR;        /*!< PKA version register,                 Address offset: 0x1FF4 */
  __IO uint32_t ID;          /*!< PKA ID register,                      Address offset: 0x1FF8 */
} PKA_TypeDef;

/**
  * @brief PSSI
  */

typedef struct
{
  __IO uint32_t CR;             /*!< PSSI control register 1,               Address offset: 0x000 */
  __IO uint32_t SR;             /*!< PSSI status register,                  Address offset: 0x004 */
  __IO uint32_t RIS;            /*!< PSSI raw interrupt status register,    Address offset: 0x008 */
  __IO uint32_t IER;            /*!< PSSI interrupt enable register,        Address offset: 0x00C */
  __IO uint32_t MIS;            /*!< PSSI masked interrupt status register, Address offset: 0x010 */
  __IO uint32_t ICR;            /*!< PSSI interrupt clear register,         Address offset: 0x014 */
  __IO uint32_t RESERVED1[4];   /*!< Reserved,                                      0x018 - 0x024 */
  __IO uint32_t DR;             /*!< PSSI data register,                    Address offset: 0x028 */
  __IO uint32_t RESERVED2[241]; /*!< Reserved,                                      0x02C - 0x3EC */
  __IO uint32_t HWCFGR;         /*!< PSSI IP HW configuration register,     Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< PSSI IP version register,              Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< PSSI IP ID register,                   Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< PSSI SIZE ID register,                 Address offset: 0x3FC */
} PSSI_TypeDef;

/**
  * @brief PWR  unit
    spec version is  1.4.0 (ASSY2.3 and also compatible with ASS2.2.1)
  */
typedef struct
{
  __IO uint32_t CR1;             /*!< PWR Control Register 1 @ offset 0x0 */
  __IO uint32_t CR2;             /*!< PWR Control Register 2 @ offset 0x4 */
  __IO uint32_t CR3;             /*!< PWR Control Register 3 @ offset 0x8 */
  __IO uint32_t CR4;             /*!< PWR Control Register 4 @ offset 0xc */
  __IO uint32_t CR5;             /*!< PWR Control Register 5 @ offset 0x10 */
  __IO uint32_t CR6;             /*!< PWR Control Register 6 @ offset 0x14 */
  __IO uint32_t CR7;             /*!< PWR Control Register 7 @ offset 0x18 */
  __IO uint32_t CR8;             /*!< PWR Control Register 8 @ offset 0x1c */
  __IO uint32_t CR9;             /*!< PWR Control Register 9 @ offset 0x20 */
  __IO uint32_t CR10;            /*!< PWR Control Register 10 @ offset 0x24 */
  __IO uint32_t CR11;            /*!< PWR Control Register 11 @ offset 0x28 */
  __IO uint32_t CR12;            /*!< PWR Control Register 12 @ offset 0x2c */
       uint32_t RESERVED0[2];    /*!< Reserved @ offset 0x30 */
  __IO uint32_t BDCR1;           /*!< PWR Backup domain control register 1 @ offset 0x38 */
  __IO uint32_t BDCR2;           /*!< PWR Backup domain control register 2 @ offset 0x3c */
  __IO uint32_t CPU1CR;          /*!< PWR CPU1 Control Register @ offset 0x40 */
  __IO uint32_t CPU2CR;          /*!< PWR CPU2 Control Register @ offset 0x44 */
  __IO uint32_t CPU3CR;          /*!< PWR CPU3 Control Register @ offset 0x48 */
  __IO uint32_t D1CR;            /*!< PWR D1 Control Register @ offset 0x4c */
  __IO uint32_t D2CR;            /*!< PWR D2 Control Register @ offset 0x50 */
  __IO uint32_t D3CR;            /*!< PWR D3 Control Register @ offset 0x54 */
       uint32_t RESERVED1[2];    /*!< Reserved @ offset 0x58 */
  __IO uint32_t WKUPCR1;         /*!< PWR Wakeup Control Register 1 @ offset 0x60 */
  __IO uint32_t WKUPCR2;         /*!< PWR Wakeup Control Register 2 @ offset 0x64 */
  __IO uint32_t WKUPCR3;         /*!< PWR Wakeup Control Register 3 @ offset 0x68 */
  __IO uint32_t WKUPCR4;         /*!< PWR Wakeup Control Register 4 @ offset 0x6c */
  __IO uint32_t WKUPCR5;         /*!< PWR Wakeup Control Register 5 @ offset 0x70 */
  __IO uint32_t WKUPCR6;         /*!< PWR Wakeup Control Register 6 @ offset 0x74 */
       uint32_t RESERVED2[8];    /*!< Reserved @ offset 0x78 */
  __IO uint32_t D3WKUPENR;       /*!< PWR D3 Wakeup Enable Register @ offset 0x98 */
       uint32_t RESERVED3[25];   /*!< Reserved @ offset 0x9c */
  __IO uint32_t RSECCFGR;        /*!< PWR Secure Configuration Register @ offset 0x100 */
  __IO uint32_t RPRIVCFGR;       /*!< PWR Privileged Configuration Register @ offset 0x104 */
  __IO uint32_t R0CIDCFGR;       /*!< PWR Resource 0 CID Configuration Register @ offset 0x108 */
  __IO uint32_t R1CIDCFGR;       /*!< PWR Resource 1 CID Configuration Register @ offset 0x10c */
  __IO uint32_t R2CIDCFGR;       /*!< PWR Resource 2 CID Configuration Register @ offset 0x110 */
  __IO uint32_t R3CIDCFGR;       /*!< PWR Resource 3 CID Configuration Register @ offset 0x114 */
  __IO uint32_t R4CIDCFGR;       /*!< PWR Resource 4 CID Configuration Register @ offset 0x118 */
       uint32_t RESERVED4[25];   /*!< Reserved @ offset 0x11c */
  __IO uint32_t WIOSECCFGR;      /*!< PWR Secure Configuration Register @ offset 0x180 */
  __IO uint32_t WIOPRIVCFGR;     /*!< PWR Privileged Configuration Register @ offset 0x184 */
  __IO uint32_t WIO1CIDCFGR;     /*!< PWR Resource 1 CID Configuration Register @ offset 0x188 */
  __IO uint32_t WIO1SEMCR;       /*!< PWR Resource 1 Semaphore Control Register @ offset 0x18c */
  __IO uint32_t WIO2CIDCFGR;     /*!< PWR Resource 2 CID Configuration Register @ offset 0x190 */
  __IO uint32_t WIO2SEMCR;       /*!< PWR Resource 2 Semaphore Control Register @ offset 0x194 */
  __IO uint32_t WIO3CIDCFGR;     /*!< PWR Resource 3 CID Configuration Register @ offset 0x198 */
  __IO uint32_t WIO3SEMCR;       /*!< PWR Resource 3 Semaphore Control Register @ offset 0x19c */
  __IO uint32_t WIO4CIDCFGR;     /*!< PWR Resource 4 CID Configuration Register @ offset 0x1a0 */
  __IO uint32_t WIO4SEMCR;       /*!< PWR Resource 4 Semaphore Control Register @ offset 0x1a4 */
  __IO uint32_t WIO5CIDCFGR;     /*!< PWR Resource 5 CID Configuration Register @ offset 0x1a8 */
  __IO uint32_t WIO5SEMCR;       /*!< PWR Resource 5 Semaphore Control Register @ offset 0x1ac */
  __IO uint32_t WIO6CIDCFGR;     /*!< PWR Resource 6 CID Configuration Register @ offset 0x1b0 */
  __IO uint32_t WIO6SEMCR;       /*!< PWR Resource 6 Semaphore Control Register @ offset 0x1b4 */
       uint32_t RESERVED5[18];   /*!< Reserved @ offset 0x1b8 */
  __IO uint32_t CPU1D1SR;        /*!< PWR CPU1 Status Register @ offset 0x200 */
  __IO uint32_t CPU2D2SR;        /*!< PWR CPU2 Status Register @ offset 0x204 */
  __IO uint32_t CPU3D3SR;        /*!< PWR CPU2 Status Register @ offset 0x208 */
       uint32_t RESERVED6[122];  /*!< Reserved @ offset 0x20c */
  __IO uint32_t VERR;            /*!< PWR VER Register @ offset 0x3f4 */
  __IO uint32_t IPIDR;           /*!< PWR ID register @ offset 0x3f8 */
  __IO uint32_t SIDR;            /*!< PWR Size ID register @ offset 0x3fc */
} PWR_TypeDef;

/**
  * @brief SRAMs configuration controller
  *             (Revision 2.0.0 - August 13th, 2019)
  */
typedef struct
{
  __IO uint32_t CR;           /*!< Control Register,                  Address offset: 0x000 */
  __IO uint32_t IER;          /*!< Interrupt Enable Register,         Address offset: 0x004 */
  __IO uint32_t ISR;          /*!< Interrupt Status Register,         Address offset: 0x008 */
  __IO uint32_t SEAR;         /*!< ECC Single Error Address Register, Address offset: 0x00C */
  __IO uint32_t DEAR;         /*!< ECC Double Error Address Register, Address offset: 0x010 */
  __IO uint32_t ICR;          /*!< Interrupt Clear Register,          Address offset: 0x014 */
       uint32_t RESERVED1[3]; /*!< Reserved1,                         Address offset: 0x018-0x20 */
  __IO uint32_t ECCKEY;       /*!< ECC Key Register,                  Address offset: 0x024 */
  __IO uint32_t ERKEYR;       /*!< Erase Key Register,                Address offset: 0x028 */
       uint32_t RESERVED2;    /*!< Reserved2,                         Address offset: 0x02C */
  __IO uint32_t CCR1;         /*!< CRC Control Register 1,            Address offset: 0x030 */
  __IO uint32_t CCR2;         /*!< CRC Control Register 2,            Address offset: 0x034 */
  __IO uint32_t CRSR;         /*!< CRC Reference Signature Register,  Address offset: 0x038 */
  __IO uint32_t CSR;          /*!< CRC Status Register,               Address offset: 0x03C */
  __IO uint32_t CCSR;         /*!< CRC Calculated Signature Register, Address offset: 0x040 */
} RAMCFG_TypeDef;

#if defined (STM32MP2XX_ASSY2_2_1)
/**
  * @brief Resets & Clocks Control
  *        reference document : "RCC specifications"
  *                             (Revision 1.0.15 - June 05th, 2019)
  */
typedef struct
{
  __IO uint32_t SECCFGR0;             /*!< RCC Secure Configuration Register 0 @ offset 0x0 */
  __IO uint32_t SECCFGR1;             /*!< RCC Secure Configuration Register 1 @ offset 0x4 */
  __IO uint32_t SECCFGR2;             /*!< RCC Secure Configuration Register 2 @ offset 0x8 */
  __IO uint32_t SECCFGR3;             /*!< RCC Secure Configuration Register 3 @ offset 0xc */
  __IO uint32_t PRIVCFGR0;            /*!< RCC Privileged Configuration Register 0 @ offset 0x10 */
  __IO uint32_t PRIVCFGR1;            /*!< RCC Privileged Configuration Register 1 @ offset 0x14 */
  __IO uint32_t PRIVCFGR2;            /*!< RCC Privileged Configuration Register 2 @ offset 0x18 */
  __IO uint32_t PRIVCFGR3;            /*!< RCC Privileged Configuration Register 3 @ offset 0x1c */
  __IO uint32_t RCFG_LOCKR0;          /*!< RCC Resource Configuration Lock Register 0 @ offset 0x20 */
  __IO uint32_t RCFG_LOCKR1;          /*!< RCC Resource Configuration Lock Register 1 @ offset 0x24 */
  __IO uint32_t RCFG_LOCKR2;          /*!< RCC Resource Configuration Lock Register 2 @ offset 0x28 */
  __IO uint32_t RCFG_LOCKR3;          /*!< RCC Resource Configuration Lock Register 3 @ offset 0x2c */
  __IO uint32_t R0CIDCFGR;            /*!< RCC Resource 0 CID Configuration Register @ offset 0x30 */
  __IO uint32_t R0SEMCR;              /*!< RCC Resource 0 Semaphore Control Register @ offset 0x34 */
  __IO uint32_t R1CIDCFGR;            /*!< RCC Resource 1 CID Configuration Register @ offset 0x38 */
  __IO uint32_t R1SEMCR;              /*!< RCC Resource 1 Semaphore Control Register @ offset 0x3c */
  __IO uint32_t R2CIDCFGR;            /*!< RCC Resource 2 CID Configuration Register @ offset 0x40 */
  __IO uint32_t R2SEMCR;              /*!< RCC Resource 2 Semaphore Control Register @ offset 0x44 */
  __IO uint32_t R3CIDCFGR;            /*!< RCC Resource 3 CID Configuration Register @ offset 0x48 */
  __IO uint32_t R3SEMCR;              /*!< RCC Resource 3 Semaphore Control Register @ offset 0x4c */
  __IO uint32_t R4CIDCFGR;            /*!< RCC Resource 4 CID Configuration Register @ offset 0x50 */
  __IO uint32_t R4SEMCR;              /*!< RCC Resource 4 Semaphore Control Register @ offset 0x54 */
  __IO uint32_t R5CIDCFGR;            /*!< RCC Resource 5 CID Configuration Register @ offset 0x58 */
  __IO uint32_t R5SEMCR;              /*!< RCC Resource 5 Semaphore Control Register @ offset 0x5c */
  __IO uint32_t R6CIDCFGR;            /*!< RCC Resource 6 CID Configuration Register @ offset 0x60 */
  __IO uint32_t R6SEMCR;              /*!< RCC Resource 6 Semaphore Control Register @ offset 0x64 */
  __IO uint32_t R7CIDCFGR;            /*!< RCC Resource 7 CID Configuration Register @ offset 0x68 */
  __IO uint32_t R7SEMCR;              /*!< RCC Resource 7 Semaphore Control Register @ offset 0x6c */
  __IO uint32_t R8CIDCFGR;            /*!< RCC Resource 8 CID Configuration Register @ offset 0x70 */
  __IO uint32_t R8SEMCR;              /*!< RCC Resource 8 Semaphore Control Register @ offset 0x74 */
  __IO uint32_t R9CIDCFGR;            /*!< RCC Resource 9 CID Configuration Register @ offset 0x78 */
  __IO uint32_t R9SEMCR;              /*!< RCC Resource 9 Semaphore Control Register @ offset 0x7c */
  __IO uint32_t R10CIDCFGR;           /*!< RCC Resource 10 CID Configuration Register @ offset 0x80 */
  __IO uint32_t R10SEMCR;             /*!< RCC Resource 10 Semaphore Control Register @ offset 0x84 */
  __IO uint32_t R11CIDCFGR;           /*!< RCC Resource 11 CID Configuration Register @ offset 0x88 */
  __IO uint32_t R11SEMCR;             /*!< RCC Resource 11 Semaphore Control Register @ offset 0x8c */
  __IO uint32_t R12CIDCFGR;           /*!< RCC Resource 12 CID Configuration Register @ offset 0x90 */
  __IO uint32_t R12SEMCR;             /*!< RCC Resource 12 Semaphore Control Register @ offset 0x94 */
  __IO uint32_t R13CIDCFGR;           /*!< RCC Resource 13 CID Configuration Register @ offset 0x98 */
  __IO uint32_t R13SEMCR;             /*!< RCC Resource 13 Semaphore Control Register @ offset 0x9c */
  __IO uint32_t R14CIDCFGR;           /*!< RCC Resource 14 CID Configuration Register @ offset 0xa0 */
  __IO uint32_t R14SEMCR;             /*!< RCC Resource 14 Semaphore Control Register @ offset 0xa4 */
  __IO uint32_t R15CIDCFGR;           /*!< RCC Resource 15 CID Configuration Register @ offset 0xa8 */
  __IO uint32_t R15SEMCR;             /*!< RCC Resource 15 Semaphore Control Register @ offset 0xac */
  __IO uint32_t R16CIDCFGR;           /*!< RCC Resource 16 CID Configuration Register @ offset 0xb0 */
  __IO uint32_t R16SEMCR;             /*!< RCC Resource 16 Semaphore Control Register @ offset 0xb4 */
  __IO uint32_t R17CIDCFGR;           /*!< RCC Resource 17 CID Configuration Register @ offset 0xb8 */
  __IO uint32_t R17SEMCR;             /*!< RCC Resource 17 Semaphore Control Register @ offset 0xbc */
  __IO uint32_t R18CIDCFGR;           /*!< RCC Resource 18 CID Configuration Register @ offset 0xc0 */
  __IO uint32_t R18SEMCR;             /*!< RCC Resource 18 Semaphore Control Register @ offset 0xc4 */
  __IO uint32_t R19CIDCFGR;           /*!< RCC Resource 19 CID Configuration Register @ offset 0xc8 */
  __IO uint32_t R19SEMCR;             /*!< RCC Resource 19 Semaphore Control Register @ offset 0xcc */
  __IO uint32_t R20CIDCFGR;           /*!< RCC Resource 20 CID Configuration Register @ offset 0xd0 */
  __IO uint32_t R20SEMCR;             /*!< RCC Resource 20 Semaphore Control Register @ offset 0xd4 */
  __IO uint32_t R21CIDCFGR;           /*!< RCC Resource 21 CID Configuration Register @ offset 0xd8 */
  __IO uint32_t R21SEMCR;             /*!< RCC Resource 21 Semaphore Control Register @ offset 0xdc */
  __IO uint32_t R22CIDCFGR;           /*!< RCC Resource 22 CID Configuration Register @ offset 0xe0 */
  __IO uint32_t R22SEMCR;             /*!< RCC Resource 22 Semaphore Control Register @ offset 0xe4 */
  __IO uint32_t R23CIDCFGR;           /*!< RCC Resource 23 CID Configuration Register @ offset 0xe8 */
  __IO uint32_t R23SEMCR;             /*!< RCC Resource 23 Semaphore Control Register @ offset 0xec */
  __IO uint32_t R24CIDCFGR;           /*!< RCC Resource 24 CID Configuration Register @ offset 0xf0 */
  __IO uint32_t R24SEMCR;             /*!< RCC Resource 24 Semaphore Control Register @ offset 0xf4 */
  __IO uint32_t R25CIDCFGR;           /*!< RCC Resource 25 CID Configuration Register @ offset 0xf8 */
  __IO uint32_t R25SEMCR;             /*!< RCC Resource 25 Semaphore Control Register @ offset 0xfc */
  __IO uint32_t R26CIDCFGR;           /*!< RCC Resource 26 CID Configuration Register @ offset 0x100 */
  __IO uint32_t R26SEMCR;             /*!< RCC Resource 26 Semaphore Control Register @ offset 0x104 */
  __IO uint32_t R27CIDCFGR;           /*!< RCC Resource 27 CID Configuration Register @ offset 0x108 */
  __IO uint32_t R27SEMCR;             /*!< RCC Resource 27 Semaphore Control Register @ offset 0x10c */
  __IO uint32_t R28CIDCFGR;           /*!< RCC Resource 28 CID Configuration Register @ offset 0x110 */
  __IO uint32_t R28SEMCR;             /*!< RCC Resource 28 Semaphore Control Register @ offset 0x114 */
  __IO uint32_t R29CIDCFGR;           /*!< RCC Resource 29 CID Configuration Register @ offset 0x118 */
  __IO uint32_t R29SEMCR;             /*!< RCC Resource 29 Semaphore Control Register @ offset 0x11c */
  __IO uint32_t R30CIDCFGR;           /*!< RCC Resource 30 CID Configuration Register @ offset 0x120 */
  __IO uint32_t R30SEMCR;             /*!< RCC Resource 30 Semaphore Control Register @ offset 0x124 */
  __IO uint32_t R31CIDCFGR;           /*!< RCC Resource 31 CID Configuration Register @ offset 0x128 */
  __IO uint32_t R31SEMCR;             /*!< RCC Resource 31 Semaphore Control Register @ offset 0x12c */
  __IO uint32_t R32CIDCFGR;           /*!< RCC Resource 32 CID Configuration Register @ offset 0x130 */
  __IO uint32_t R32SEMCR;             /*!< RCC Resource 32 Semaphore Control Register @ offset 0x134 */
  __IO uint32_t R33CIDCFGR;           /*!< RCC Resource 33 CID Configuration Register @ offset 0x138 */
  __IO uint32_t R33SEMCR;             /*!< RCC Resource 33 Semaphore Control Register @ offset 0x13c */
  __IO uint32_t R34CIDCFGR;           /*!< RCC Resource 34 CID Configuration Register @ offset 0x140 */
  __IO uint32_t R34SEMCR;             /*!< RCC Resource 34 Semaphore Control Register @ offset 0x144 */
  __IO uint32_t R35CIDCFGR;           /*!< RCC Resource 35 CID Configuration Register @ offset 0x148 */
  __IO uint32_t R35SEMCR;             /*!< RCC Resource 35 Semaphore Control Register @ offset 0x14c */
  __IO uint32_t R36CIDCFGR;           /*!< RCC Resource 36 CID Configuration Register @ offset 0x150 */
  __IO uint32_t R36SEMCR;             /*!< RCC Resource 36 Semaphore Control Register @ offset 0x154 */
  __IO uint32_t R37CIDCFGR;           /*!< RCC Resource 37 CID Configuration Register @ offset 0x158 */
  __IO uint32_t R37SEMCR;             /*!< RCC Resource 37 Semaphore Control Register @ offset 0x15c */
  __IO uint32_t R38CIDCFGR;           /*!< RCC Resource 38 CID Configuration Register @ offset 0x160 */
  __IO uint32_t R38SEMCR;             /*!< RCC Resource 38 Semaphore Control Register @ offset 0x164 */
  __IO uint32_t R39CIDCFGR;           /*!< RCC Resource 39 CID Configuration Register @ offset 0x168 */
  __IO uint32_t R39SEMCR;             /*!< RCC Resource 39 Semaphore Control Register @ offset 0x16c */
  __IO uint32_t R40CIDCFGR;           /*!< RCC Resource 40 CID Configuration Register @ offset 0x170 */
  __IO uint32_t R40SEMCR;             /*!< RCC Resource 40 Semaphore Control Register @ offset 0x174 */
  __IO uint32_t R41CIDCFGR;           /*!< RCC Resource 41 CID Configuration Register @ offset 0x178 */
  __IO uint32_t R41SEMCR;             /*!< RCC Resource 41 Semaphore Control Register @ offset 0x17c */
  __IO uint32_t R42CIDCFGR;           /*!< RCC Resource 42 CID Configuration Register @ offset 0x180 */
  __IO uint32_t R42SEMCR;             /*!< RCC Resource 42 Semaphore Control Register @ offset 0x184 */
  __IO uint32_t R43CIDCFGR;           /*!< RCC Resource 43 CID Configuration Register @ offset 0x188 */
  __IO uint32_t R43SEMCR;             /*!< RCC Resource 43 Semaphore Control Register @ offset 0x18c */
  __IO uint32_t R44CIDCFGR;           /*!< RCC Resource 44 CID Configuration Register @ offset 0x190 */
  __IO uint32_t R44SEMCR;             /*!< RCC Resource 44 Semaphore Control Register @ offset 0x194 */
  __IO uint32_t R45CIDCFGR;           /*!< RCC Resource 45 CID Configuration Register @ offset 0x198 */
  __IO uint32_t R45SEMCR;             /*!< RCC Resource 45 Semaphore Control Register @ offset 0x19c */
  __IO uint32_t R46CIDCFGR;           /*!< RCC Resource 46 CID Configuration Register @ offset 0x1a0 */
  __IO uint32_t R46SEMCR;             /*!< RCC Resource 46 Semaphore Control Register @ offset 0x1a4 */
  __IO uint32_t R47CIDCFGR;           /*!< RCC Resource 47 CID Configuration Register @ offset 0x1a8 */
  __IO uint32_t R47SEMCR;             /*!< RCC Resource 47 Semaphore Control Register @ offset 0x1ac */
  __IO uint32_t R48CIDCFGR;           /*!< RCC Resource 48 CID Configuration Register @ offset 0x1b0 */
  __IO uint32_t R48SEMCR;             /*!< RCC Resource 48 Semaphore Control Register @ offset 0x1b4 */
  __IO uint32_t R49CIDCFGR;           /*!< RCC Resource 49 CID Configuration Register @ offset 0x1b8 */
  __IO uint32_t R49SEMCR;             /*!< RCC Resource 49 Semaphore Control Register @ offset 0x1bc */
  __IO uint32_t R50CIDCFGR;           /*!< RCC Resource 50 CID Configuration Register @ offset 0x1c0 */
  __IO uint32_t R50SEMCR;             /*!< RCC Resource 50 Semaphore Control Register @ offset 0x1c4 */
  __IO uint32_t R51CIDCFGR;           /*!< RCC Resource 51 CID Configuration Register @ offset 0x1c8 */
  __IO uint32_t R51SEMCR;             /*!< RCC Resource 51 Semaphore Control Register @ offset 0x1cc */
  __IO uint32_t R52CIDCFGR;           /*!< RCC Resource 52 CID Configuration Register @ offset 0x1d0 */
  __IO uint32_t R52SEMCR;             /*!< RCC Resource 52 Semaphore Control Register @ offset 0x1d4 */
  __IO uint32_t R53CIDCFGR;           /*!< RCC Resource 53 CID Configuration Register @ offset 0x1d8 */
  __IO uint32_t R53SEMCR;             /*!< RCC Resource 53 Semaphore Control Register @ offset 0x1dc */
  __IO uint32_t R54CIDCFGR;           /*!< RCC Resource 54 CID Configuration Register @ offset 0x1e0 */
  __IO uint32_t R54SEMCR;             /*!< RCC Resource 54 Semaphore Control Register @ offset 0x1e4 */
  __IO uint32_t R55CIDCFGR;           /*!< RCC Resource 55 CID Configuration Register @ offset 0x1e8 */
  __IO uint32_t R55SEMCR;             /*!< RCC Resource 55 Semaphore Control Register @ offset 0x1ec */
  __IO uint32_t R56CIDCFGR;           /*!< RCC Resource 56 CID Configuration Register @ offset 0x1f0 */
  __IO uint32_t R56SEMCR;             /*!< RCC Resource 56 Semaphore Control Register @ offset 0x1f4 */
  __IO uint32_t R57CIDCFGR;           /*!< RCC Resource 57 CID Configuration Register @ offset 0x1f8 */
  __IO uint32_t R57SEMCR;             /*!< RCC Resource 57 Semaphore Control Register @ offset 0x1fc */
  __IO uint32_t R58CIDCFGR;           /*!< RCC Resource 58 CID Configuration Register @ offset 0x200 */
  __IO uint32_t R58SEMCR;             /*!< RCC Resource 58 Semaphore Control Register @ offset 0x204 */
  __IO uint32_t R59CIDCFGR;           /*!< RCC Resource 59 CID Configuration Register @ offset 0x208 */
  __IO uint32_t R59SEMCR;             /*!< RCC Resource 59 Semaphore Control Register @ offset 0x20c */
  __IO uint32_t R60CIDCFGR;           /*!< RCC Resource 60 CID Configuration Register @ offset 0x210 */
  __IO uint32_t R60SEMCR;             /*!< RCC Resource 60 Semaphore Control Register @ offset 0x214 */
  __IO uint32_t R61CIDCFGR;           /*!< RCC Resource 61 CID Configuration Register @ offset 0x218 */
  __IO uint32_t R61SEMCR;             /*!< RCC Resource 61 Semaphore Control Register @ offset 0x21c */
  __IO uint32_t R62CIDCFGR;           /*!< RCC Resource 62 CID Configuration Register @ offset 0x220 */
  __IO uint32_t R62SEMCR;             /*!< RCC Resource 62 Semaphore Control Register @ offset 0x224 */
  __IO uint32_t R63CIDCFGR;           /*!< RCC Resource 63 CID Configuration Register @ offset 0x228 */
  __IO uint32_t R63SEMCR;             /*!< RCC Resource 63 Semaphore Control Register @ offset 0x22c */
  __IO uint32_t R64CIDCFGR;           /*!< RCC Resource 64 CID Configuration Register @ offset 0x230 */
  __IO uint32_t R64SEMCR;             /*!< RCC Resource 64 Semaphore Control Register @ offset 0x234 */
  __IO uint32_t R65CIDCFGR;           /*!< RCC Resource 65 CID Configuration Register @ offset 0x238 */
  __IO uint32_t R65SEMCR;             /*!< RCC Resource 65 Semaphore Control Register @ offset 0x23c */
  __IO uint32_t R66CIDCFGR;           /*!< RCC Resource 66 CID Configuration Register @ offset 0x240 */
  __IO uint32_t R66SEMCR;             /*!< RCC Resource 66 Semaphore Control Register @ offset 0x244 */
  __IO uint32_t R67CIDCFGR;           /*!< RCC Resource 67 CID Configuration Register @ offset 0x248 */
  __IO uint32_t R67SEMCR;             /*!< RCC Resource 67 Semaphore Control Register @ offset 0x24c */
  __IO uint32_t R68CIDCFGR;           /*!< RCC Resource 68 CID Configuration Register @ offset 0x250 */
  __IO uint32_t R68SEMCR;             /*!< RCC Resource 68 Semaphore Control Register @ offset 0x254 */
  __IO uint32_t R69CIDCFGR;           /*!< RCC Resource 69 CID Configuration Register @ offset 0x258 */
  __IO uint32_t R69SEMCR;             /*!< RCC Resource 69 Semaphore Control Register @ offset 0x25c */
  __IO uint32_t R70CIDCFGR;           /*!< RCC Resource 70 CID Configuration Register @ offset 0x260 */
  __IO uint32_t R70SEMCR;             /*!< RCC Resource 70 Semaphore Control Register @ offset 0x264 */
  __IO uint32_t R71CIDCFGR;           /*!< RCC Resource 71 CID Configuration Register @ offset 0x268 */
  __IO uint32_t R71SEMCR;             /*!< RCC Resource 71 Semaphore Control Register @ offset 0x26c */
  __IO uint32_t R72CIDCFGR;           /*!< RCC Resource 72 CID Configuration Register @ offset 0x270 */
  __IO uint32_t R72SEMCR;             /*!< RCC Resource 72 Semaphore Control Register @ offset 0x274 */
  __IO uint32_t R73CIDCFGR;           /*!< RCC Resource 73 CID Configuration Register @ offset 0x278 */
  __IO uint32_t R73SEMCR;             /*!< RCC Resource 73 Semaphore Control Register @ offset 0x27c */
  __IO uint32_t R74CIDCFGR;           /*!< RCC Resource 74 CID Configuration Register @ offset 0x280 */
  __IO uint32_t R74SEMCR;             /*!< RCC Resource 74 Semaphore Control Register @ offset 0x284 */
  __IO uint32_t R75CIDCFGR;           /*!< RCC Resource 75 CID Configuration Register @ offset 0x288 */
  __IO uint32_t R75SEMCR;             /*!< RCC Resource 75 Semaphore Control Register @ offset 0x28c */
  __IO uint32_t R76CIDCFGR;           /*!< RCC Resource 76 CID Configuration Register @ offset 0x290 */
  __IO uint32_t R76SEMCR;             /*!< RCC Resource 76 Semaphore Control Register @ offset 0x294 */
  __IO uint32_t R77CIDCFGR;           /*!< RCC Resource 77 CID Configuration Register @ offset 0x298 */
  __IO uint32_t R77SEMCR;             /*!< RCC Resource 77 Semaphore Control Register @ offset 0x29c */
  __IO uint32_t R78CIDCFGR;           /*!< RCC Resource 78 CID Configuration Register @ offset 0x2a0 */
  __IO uint32_t R78SEMCR;             /*!< RCC Resource 78 Semaphore Control Register @ offset 0x2a4 */
  __IO uint32_t R79CIDCFGR;           /*!< RCC Resource 79 CID Configuration Register @ offset 0x2a8 */
  __IO uint32_t R79SEMCR;             /*!< RCC Resource 79 Semaphore Control Register @ offset 0x2ac */
  __IO uint32_t R80CIDCFGR;           /*!< RCC Resource 80 CID Configuration Register @ offset 0x2b0 */
  __IO uint32_t R80SEMCR;             /*!< RCC Resource 80 Semaphore Control Register @ offset 0x2b4 */
  __IO uint32_t R81CIDCFGR;           /*!< RCC Resource 81 CID Configuration Register @ offset 0x2b8 */
  __IO uint32_t R81SEMCR;             /*!< RCC Resource 81 Semaphore Control Register @ offset 0x2bc */
  __IO uint32_t R82CIDCFGR;           /*!< RCC Resource 82 CID Configuration Register @ offset 0x2c0 */
  __IO uint32_t R82SEMCR;             /*!< RCC Resource 82 Semaphore Control Register @ offset 0x2c4 */
  __IO uint32_t R83CIDCFGR;           /*!< RCC Resource 83 CID Configuration Register @ offset 0x2c8 */
  __IO uint32_t R83SEMCR;             /*!< RCC Resource 83 Semaphore Control Register @ offset 0x2cc */
  __IO uint32_t R84CIDCFGR;           /*!< RCC Resource 84 CID Configuration Register @ offset 0x2d0 */
  __IO uint32_t R84SEMCR;             /*!< RCC Resource 84 Semaphore Control Register @ offset 0x2d4 */
  __IO uint32_t R85CIDCFGR;           /*!< RCC Resource 85 CID Configuration Register @ offset 0x2d8 */
  __IO uint32_t R85SEMCR;             /*!< RCC Resource 85 Semaphore Control Register @ offset 0x2dc */
  __IO uint32_t R86CIDCFGR;           /*!< RCC Resource 86 CID Configuration Register @ offset 0x2e0 */
  __IO uint32_t R86SEMCR;             /*!< RCC Resource 86 Semaphore Control Register @ offset 0x2e4 */
  __IO uint32_t R87CIDCFGR;           /*!< RCC Resource 87 CID Configuration Register @ offset 0x2e8 */
  __IO uint32_t R87SEMCR;             /*!< RCC Resource 87 Semaphore Control Register @ offset 0x2ec */
  __IO uint32_t R88CIDCFGR;           /*!< RCC Resource 88 CID Configuration Register @ offset 0x2f0 */
  __IO uint32_t R88SEMCR;             /*!< RCC Resource 88 Semaphore Control Register @ offset 0x2f4 */
  __IO uint32_t R89CIDCFGR;           /*!< RCC Resource 89 CID Configuration Register @ offset 0x2f8 */
  __IO uint32_t R89SEMCR;             /*!< RCC Resource 89 Semaphore Control Register @ offset 0x2fc */
  __IO uint32_t R90CIDCFGR;           /*!< RCC Resource 90 CID Configuration Register @ offset 0x300 */
  __IO uint32_t R90SEMCR;             /*!< RCC Resource 90 Semaphore Control Register @ offset 0x304 */
  __IO uint32_t R91CIDCFGR;           /*!< RCC Resource 91 CID Configuration Register @ offset 0x308 */
  __IO uint32_t R91SEMCR;             /*!< RCC Resource 91 Semaphore Control Register @ offset 0x30c */
  __IO uint32_t R92CIDCFGR;           /*!< RCC Resource 92 CID Configuration Register @ offset 0x310 */
  __IO uint32_t R92SEMCR;             /*!< RCC Resource 92 Semaphore Control Register @ offset 0x314 */
  __IO uint32_t R93CIDCFGR;           /*!< RCC Resource 93 CID Configuration Register @ offset 0x318 */
  __IO uint32_t R93SEMCR;             /*!< RCC Resource 93 Semaphore Control Register @ offset 0x31c */
  __IO uint32_t R94CIDCFGR;           /*!< RCC Resource 94 CID Configuration Register @ offset 0x320 */
  __IO uint32_t R94SEMCR;             /*!< RCC Resource 94 Semaphore Control Register @ offset 0x324 */
  __IO uint32_t R95CIDCFGR;           /*!< RCC Resource 95 CID Configuration Register @ offset 0x328 */
  __IO uint32_t R95SEMCR;             /*!< RCC Resource 95 Semaphore Control Register @ offset 0x32c */
  __IO uint32_t R96CIDCFGR;           /*!< RCC Resource 96 CID Configuration Register @ offset 0x330 */
  __IO uint32_t R96SEMCR;             /*!< RCC Resource 96 Semaphore Control Register @ offset 0x334 */
  __IO uint32_t R97CIDCFGR;           /*!< RCC Resource 97 CID Configuration Register @ offset 0x338 */
  __IO uint32_t R97SEMCR;             /*!< RCC Resource 97 Semaphore Control Register @ offset 0x33c */
  __IO uint32_t R98CIDCFGR;           /*!< RCC Resource 98 CID Configuration Register @ offset 0x340 */
  __IO uint32_t R98SEMCR;             /*!< RCC Resource 98 Semaphore Control Register @ offset 0x344 */
  __IO uint32_t R99CIDCFGR;           /*!< RCC Resource 99 CID Configuration Register @ offset 0x348 */
  __IO uint32_t R99SEMCR;             /*!< RCC Resource 99 Semaphore Control Register @ offset 0x34c */
  __IO uint32_t R100CIDCFGR;          /*!< RCC Resource 100 CID Configuration Register @ offset 0x350 */
  __IO uint32_t R100SEMCR;            /*!< RCC Resource 100 Semaphore Control Register @ offset 0x354 */
  __IO uint32_t R101CIDCFGR;          /*!< RCC Resource 101 CID Configuration Register @ offset 0x358 */
  __IO uint32_t R101SEMCR;            /*!< RCC Resource 101 Semaphore Control Register @ offset 0x35c */
  __IO uint32_t R102CIDCFGR;          /*!< RCC Resource 102 CID Configuration Register @ offset 0x360 */
  __IO uint32_t R102SEMCR;            /*!< RCC Resource 102 Semaphore Control Register @ offset 0x364 */
  __IO uint32_t R103CIDCFGR;          /*!< RCC Resource 103 CID Configuration Register @ offset 0x368 */
  __IO uint32_t R103SEMCR;            /*!< RCC Resource 103 Semaphore Control Register @ offset 0x36c */
  __IO uint32_t R104CIDCFGR;          /*!< RCC Resource 104 CID Configuration Register @ offset 0x370 */
  __IO uint32_t R104SEMCR;            /*!< RCC Resource 104 Semaphore Control Register @ offset 0x374 */
  __IO uint32_t R105CIDCFGR;          /*!< RCC Resource 105 CID Configuration Register @ offset 0x378 */
  __IO uint32_t R105SEMCR;            /*!< RCC Resource 105 Semaphore Control Register @ offset 0x37c */
  __IO uint32_t R106CIDCFGR;          /*!< RCC Resource 106 CID Configuration Register @ offset 0x380 */
  __IO uint32_t R106SEMCR;            /*!< RCC Resource 106 Semaphore Control Register @ offset 0x384 */
  __IO uint32_t R107CIDCFGR;          /*!< RCC Resource 107 CID Configuration Register @ offset 0x388 */
  __IO uint32_t R107SEMCR;            /*!< RCC Resource 107 Semaphore Control Register @ offset 0x38c */
  __IO uint32_t R108CIDCFGR;          /*!< RCC Resource 108 CID Configuration Register @ offset 0x390 */
  __IO uint32_t R108SEMCR;            /*!< RCC Resource 108 Semaphore Control Register @ offset 0x394 */
  __IO uint32_t R109CIDCFGR;          /*!< RCC Resource 109 CID Configuration Register @ offset 0x398 */
  __IO uint32_t R109SEMCR;            /*!< RCC Resource 109 Semaphore Control Register @ offset 0x39c */
  __IO uint32_t R110CIDCFGR;          /*!< RCC Resource 110 CID Configuration Register @ offset 0x3a0 */
  __IO uint32_t R110SEMCR;            /*!< RCC Resource 110 Semaphore Control Register @ offset 0x3a4 */
  __IO uint32_t R111CIDCFGR;          /*!< RCC Resource 111 CID Configuration Register @ offset 0x3a8 */
  __IO uint32_t R111SEMCR;            /*!< RCC Resource 111 Semaphore Control Register @ offset 0x3ac */
  __IO uint32_t R112CIDCFGR;          /*!< RCC Resource 112 CID Configuration Register @ offset 0x3b0 */
  __IO uint32_t R112SEMCR;            /*!< RCC Resource 112 Semaphore Control Register @ offset 0x3b4 */
  __IO uint32_t R113CIDCFGR;          /*!< RCC Resource 113 CID Configuration Register @ offset 0x3b8 */
  __IO uint32_t R113SEMCR;            /*!< RCC Resource 113 Semaphore Control Register @ offset 0x3bc */
       uint32_t RESERVED0[16];        /*!< Reserved @ offset 0x3c0 */
  __IO uint32_t GRSTCSETR;            /*!< RCC Global Reset Control Set Register @ offset 0x400 */
  __IO uint32_t C1RSTCSETR;           /*!< RCC CPU1 Reset Control Set Register @ offset 0x404 */
       uint32_t RESERVED1;            /*!< Reserved @ offset 0x408 */
  __IO uint32_t C1P1RSTCSETR;         /*!< RCC CPU1 Processor 1 Reset Control Set Register @ offset 0x40c */
  __IO uint32_t C2RSTCSETR;           /*!< RCC CPU2 Reset Control Set Register @ offset 0x410 */
  __IO uint32_t HWRSTSCLRR;           /*!< RCC Hardware Reset Status Clear Register @ offset 0x414 */
  __IO uint32_t C1BOOTRSTSSETR;       /*!< RCC CPU1 BOOT Reset Status Set Register @ offset 0x418 */
  __IO uint32_t C1BOOTRSTSCLRR;       /*!< RCC CPU1 BOOT Reset Status Clear Register @ offset 0x41c */
  __IO uint32_t C2BOOTRSTSSETR;       /*!< RCC CPU2 BOOT Reset Status Set Register @ offset 0x420 */
  __IO uint32_t C2BOOTRSTSCLRR;       /*!< RCC CPU2 BOOT Reset Status Clear Register @ offset 0x424 */
  __IO uint32_t C1SREQSETR;           /*!< RCC CPU1 Stop Request Set Register @ offset 0x428 */
  __IO uint32_t C1SREQCLRR;           /*!< RCC CPU1 Stop Request Clear Register @ offset 0x42c */
  __IO uint32_t CPUBOOTCR;            /*!< RCC CPU Boot Control Register @ offset 0x430 */
  __IO uint32_t STBYBOOTCR;           /*!< RCC Standby Boot Control Register @ offset 0x434 */
  __IO uint32_t BDCR;                 /*!< RCC Backup Domain Control Register @ offset 0x438 */
  __IO uint32_t SRDCR;                /*!< RCC SmartRun Domain Control Register @ offset 0x43c */
  __IO uint32_t SRDSR;                /*!< RCC SmartRun Domain Status Register @ offset 0x440 */
       uint32_t RESERVED2;            /*!< Reserved @ offset 0x444 */
  __IO uint32_t RDCR;                 /*!< RCC Reset Duration Control Register @ offset 0x448 */
  __IO uint32_t PWRLPDLYCR;           /*!< RCC PWR_LP Delay Control Register @ offset 0x44c */
  __IO uint32_t C1CIESETR;            /*!< RCC CPU1 Clock Source Interrupt Enable Set Register @ offset 0x450 */
  __IO uint32_t C1CIFCLRR;            /*!< RCC CPU1 Clock Source Interrupt Flag Clear Register @ offset 0x454 */
  __IO uint32_t C2CIESETR;            /*!< RCC CPU2 Clock Source Interrupt Enable Set Register @ offset 0x458 */
  __IO uint32_t C2CIFCLRR;            /*!< RCC CPU2 Clock Source Interrupt Flag Clear Register @ offset 0x45c */
  __IO uint32_t IWDGC1FZSETR;         /*!< RCC IWDG CPU1 Clock Freeze Set Register @ offset 0x460 */
  __IO uint32_t IWDGC1FZCLRR;         /*!< RCC IWDG CPU1 Clock Freeze Clear Register @ offset 0x464 */
  __IO uint32_t IWDGC1CFGSETR;        /*!< RCC IWDG CPU1 Configuration Set Register @ offset 0x468 */
  __IO uint32_t IWDGC1CFGCLRR;        /*!< RCC IWDG CPU1 Configuration Clear Register @ offset 0x46c */
  __IO uint32_t IWDGC2FZSETR;         /*!< RCC IWDG CPU2 Clock Freeze Set Register @ offset 0x470 */
  __IO uint32_t IWDGC2FZCLRR;         /*!< RCC IWDG CPU2 Clock Freeze Clear Register @ offset 0x474 */
  __IO uint32_t IWDGC2CFGSETR;        /*!< RCC IWDG CPU2 Configuration Set Register @ offset 0x478 */
  __IO uint32_t IWDGC2CFGCLRR;        /*!< RCC IWDG CPU2 Configuration Clear Register @ offset 0x47c */
  __IO uint32_t IWDGC3CFGSETR;        /*!< RCC IWDG CPU3 Configuration Set Register @ offset 0x480 */
  __IO uint32_t IWDGC3CFGCLRR;        /*!< RCC IWDG CPU3 Configuration Clear Register @ offset 0x484 */
  __IO uint32_t MCO1CFGR;             /*!< RCC MCO1 Configuration Register @ offset 0x488 */
  __IO uint32_t MCO2CFGR;             /*!< RCC MCO2 Configuration Register @ offset 0x48c */
  __IO uint32_t OCENSETR;             /*!< RCC Oscillator Clock Enable Set Register @ offset 0x490 */
  __IO uint32_t OCENCLRR;             /*!< RCC Oscillator Clock Enable Clear Register @ offset 0x494 */
  __IO uint32_t OCRDYR;               /*!< RCC Oscillator Clock Ready Register @ offset 0x498 */
  __IO uint32_t STBYRDCR;             /*!< RCC STBY Reset Delay Control Register @ offset 0x49c */
  __IO uint32_t HSICFGR;              /*!< RCC HSI Configuration Register @ offset 0x4a0 */
  __IO uint32_t CSICFGR;              /*!< RCC CSI Configuration Register @ offset 0x4a4 */
  __IO uint32_t SHSICR;               /*!< RCC SHSI Control Register @ offset 0x4a8 */
  __IO uint32_t RTCDIVR;              /*!< RCC RTC Clock Divider Register @ offset 0x4ac */
  __IO uint32_t APB1DIVR;             /*!< RCC APB1 Clock Divider Register @ offset 0x4b0 */
  __IO uint32_t APB2DIVR;             /*!< RCC APB2 Clock Divider Register @ offset 0x4b4 */
  __IO uint32_t APB3DIVR;             /*!< RCC APB3 Clock Divider Register @ offset 0x4b8 */
  __IO uint32_t APB4DIVR;             /*!< RCC APB4 Clock Divider Register @ offset 0x4bc */
  __IO uint32_t APBDBGDIVR;           /*!< RCC APBDBG Clock Divider Register @ offset 0x4c0 */
  __IO uint32_t TIMG1PRER;            /*!< RCC TIM Group 1 Pre-scaler Register @ offset 0x4c4 */
  __IO uint32_t TIMG2PRER;            /*!< RCC TIM Group 2 Pre-scaler Register @ offset 0x4c8 */
       uint32_t RESERVED3;            /*!< Reserved @ offset 0x4cc */
  __IO uint32_t DDRCP1CFGR;           /*!< RCC DDRC AXI Port 1 Configuration Register @ offset 0x4d0 */
  __IO uint32_t DDRCP2CFGR;           /*!< RCC DDRC AXI Port 2 Configuration Register @ offset 0x4d4 */
  __IO uint32_t DDRCAPBCFGR;          /*!< RCC DDRC APB Configuration Register @ offset 0x4d8 */
  __IO uint32_t DDRPHYCAPBCFGR;       /*!< RCC DDRPHYC APB Configuration Register @ offset 0x4dc */
  __IO uint32_t DDRPHYCCFGR;          /*!< RCC DDRPHYC Configuration Register @ offset 0x4e0 */
  __IO uint32_t DDRCFGR;              /*!< RCC DDR Configuration Register @ offset 0x4e4 */
  __IO uint32_t DDRITFCFGR;           /*!< RCC DDR Interface Configuration Register @ offset 0x4e8 */
  __IO uint32_t C3CFGR;               /*!< RCC CPU3 Configuration Register @ offset 0x4ec */
  __IO uint32_t SYSRAMCFGR;           /*!< RCC SYSRAM Configuration Register @ offset 0x4f0 */
  __IO uint32_t LTDCSRAMCFGR;         /*!< RCC LTDCSRAM Configuration Register @ offset 0x4f4 */
  __IO uint32_t SRAM1CFGR;            /*!< RCC SRAM1 Configuration Register @ offset 0x4f8 */
  __IO uint32_t SRAM2CFGR;            /*!< RCC SRAM2 Configuration Register @ offset 0x4fc */
  __IO uint32_t RETRAMCFGR;           /*!< RCC RETRAM Configuration Register @ offset 0x500 */
  __IO uint32_t BKPSRAMCFGR;          /*!< RCC BKPSRAM Configuration Register @ offset 0x504 */
  __IO uint32_t LPSRAM1CFGR;          /*!< RCC LPSRAM1 Configuration Register @ offset 0x508 */
  __IO uint32_t LPSRAM2CFGR;          /*!< RCC LPSRAM2 Configuration Register @ offset 0x50c */
  __IO uint32_t LPSRAM3CFGR;          /*!< RCC LPSRAM3 Configuration Register @ offset 0x510 */
  __IO uint32_t OSPI1CFGR;            /*!< RCC OSPI1 Configuration Register @ offset 0x514 */
  __IO uint32_t OSPI2CFGR;            /*!< RCC OSPI2 Configuration Register @ offset 0x518 */
       uint32_t RESERVED4;            /*!< Reserved @ offset 0x51c */
  __IO uint32_t DBGCFGR;              /*!< RCC Debug Configuration Register @ offset 0x520 */
  __IO uint32_t STM500CFGR;           /*!< RCC STM500 Configuration Register @ offset 0x524 */
  __IO uint32_t ETRCFGR;              /*!< RCC ETR Configuration Register @ offset 0x528 */
  __IO uint32_t GPIOACFGR;            /*!< RCC GPIOA Configuration Register @ offset 0x52c */
  __IO uint32_t GPIOBCFGR;            /*!< RCC GPIOB Configuration Register @ offset 0x530 */
  __IO uint32_t GPIOCCFGR;            /*!< RCC GPIOC Configuration Register @ offset 0x534 */
  __IO uint32_t GPIODCFGR;            /*!< RCC GPIOD Configuration Register @ offset 0x538 */
  __IO uint32_t GPIOECFGR;            /*!< RCC GPIOE Configuration Register @ offset 0x53c */
  __IO uint32_t GPIOFCFGR;            /*!< RCC GPIOF Configuration Register @ offset 0x540 */
  __IO uint32_t GPIOGCFGR;            /*!< RCC GPIOG Configuration Register @ offset 0x544 */
  __IO uint32_t GPIOHCFGR;            /*!< RCC GPIOH Configuration Register @ offset 0x548 */
  __IO uint32_t GPIOICFGR;            /*!< RCC GPIOI Configuration Register @ offset 0x54c */
  __IO uint32_t GPIOJCFGR;            /*!< RCC GPIOJ Configuration Register @ offset 0x550 */
  __IO uint32_t GPIOKCFGR;            /*!< RCC GPIOK Configuration Register @ offset 0x554 */
  __IO uint32_t GPIOZCFGR;            /*!< RCC GPIOZ Configuration Register @ offset 0x558 */
  __IO uint32_t HPDMA1CFGR;           /*!< RCC HPDMA1 Configuration Register @ offset 0x55c */
  __IO uint32_t HPDMA2CFGR;           /*!< RCC HPDMA2 Configuration Register @ offset 0x560 */
  __IO uint32_t HPDMA3CFGR;           /*!< RCC HPDMA3 Configuration Register @ offset 0x564 */
  __IO uint32_t LPDMACFGR;            /*!< RCC LPDMA Configuration Register @ offset 0x568 */
  __IO uint32_t HSEMCFGR;             /*!< RCC HSEM Configuration Register @ offset 0x56c */
  __IO uint32_t IPCC1CFGR;            /*!< RCC IPCC1 Configuration Register @ offset 0x570 */
  __IO uint32_t IPCC2CFGR;            /*!< RCC IPCC2 Configuration Register @ offset 0x574 */
  __IO uint32_t RTCCFGR;              /*!< RCC RTC Configuration Register @ offset 0x578 */
       uint32_t RESERVED5;            /*!< Reserved @ offset 0x57c */
  __IO uint32_t SYSCPU1CFGR;          /*!< RCC SYSCPU1 Configuration Register @ offset 0x580 */
       uint32_t RESERVED6;            /*!< Reserved @ offset 0x584 */
  __IO uint32_t PMBCTRLCFGR;          /*!< RCC PMBCTRL Configuration Register @ offset 0x588 */
  __IO uint32_t IS2MCFGR;             /*!< RCC IS2M Configuration Register @ offset 0x58c */
  __IO uint32_t PLL2CFGR1;            /*!< RCC PLL{x} Configuration Register 1 @ offset 0x590 */
  __IO uint32_t PLL2CFGR2;            /*!< RCC PLL{x} Configuration Register 2 @ offset 0x594 */
  __IO uint32_t PLL2CFGR3;            /*!< RCC PLL{x} Configuration Register 3 @ offset 0x598 */
  __IO uint32_t PLL2CFGR4;            /*!< RCC PLL{x} Configuration Register 4 @ offset 0x59c */
  __IO uint32_t PLL2CFGR5;            /*!< RCC PLL{x} Configuration Register 5 @ offset 0x5a0 */
       uint32_t RESERVED7;            /*!< Reserved @ offset 0x5a4 */
  __IO uint32_t PLL2CFGR6;            /*!< RCC PLL{x} Configuration Register 6 @ offset 0x5a8 */
  __IO uint32_t PLL2CFGR7;            /*!< RCC PLL{x} Configuration Register 7 @ offset 0x5ac */
       uint32_t RESERVED8[2];         /*!< Reserved @ offset 0x5b0 */
  __IO uint32_t PLL3CFGR1;            /*!< RCC PLL{x} Configuration Register 1 @ offset 0x5b8 */
  __IO uint32_t PLL3CFGR2;            /*!< RCC PLL{x} Configuration Register 2 @ offset 0x5bc */
  __IO uint32_t PLL3CFGR3;            /*!< RCC PLL{x} Configuration Register 3 @ offset 0x5c0 */
  __IO uint32_t PLL3CFGR4;            /*!< RCC PLL{x} Configuration Register 4 @ offset 0x5c4 */
  __IO uint32_t PLL3CFGR5;            /*!< RCC PLL{x} Configuration Register 5 @ offset 0x5c8 */
       uint32_t RESERVED9;            /*!< Reserved @ offset 0x5cc */
  __IO uint32_t PLL3CFGR6;            /*!< RCC PLL{x} Configuration Register 6 @ offset 0x5d0 */
  __IO uint32_t PLL3CFGR7;            /*!< RCC PLL{x} Configuration Register 7 @ offset 0x5d4 */
       uint32_t RESERVED10[74];       /*!< Reserved @ offset 0x5d8 */
  __IO uint32_t TIM1CFGR;             /*!< RCC TIM1 Configuration Register @ offset 0x700 */
  __IO uint32_t TIM2CFGR;             /*!< RCC TIM2 Configuration Register @ offset 0x704 */
  __IO uint32_t TIM3CFGR;             /*!< RCC TIM3 Configuration Register @ offset 0x708 */
  __IO uint32_t TIM4CFGR;             /*!< RCC TIM4 Configuration Register @ offset 0x70c */
  __IO uint32_t TIM5CFGR;             /*!< RCC TIM5 Configuration Register @ offset 0x710 */
  __IO uint32_t TIM6CFGR;             /*!< RCC TIM6 Configuration Register @ offset 0x714 */
  __IO uint32_t TIM7CFGR;             /*!< RCC TIM7 Configuration Register @ offset 0x718 */
  __IO uint32_t TIM8CFGR;             /*!< RCC TIM8 Configuration Register @ offset 0x71c */
  __IO uint32_t TIM10CFGR;            /*!< RCC TIM10 Configuration Register @ offset 0x720 */
  __IO uint32_t TIM11CFGR;            /*!< RCC TIM11 Configuration Register @ offset 0x724 */
  __IO uint32_t TIM12CFGR;            /*!< RCC TIM12 Configuration Register @ offset 0x728 */
  __IO uint32_t TIM13CFGR;            /*!< RCC TIM13 Configuration Register @ offset 0x72c */
  __IO uint32_t TIM14CFGR;            /*!< RCC TIM14 Configuration Register @ offset 0x730 */
  __IO uint32_t TIM15CFGR;            /*!< RCC TIM15 Configuration Register @ offset 0x734 */
  __IO uint32_t TIM16CFGR;            /*!< RCC TIM16 Configuration Register @ offset 0x738 */
  __IO uint32_t TIM17CFGR;            /*!< RCC TIM17 Configuration Register @ offset 0x73c */
  __IO uint32_t TIM20CFGR;            /*!< RCC TIM20 Configuration Register @ offset 0x740 */
  __IO uint32_t LPTIM1CFGR;           /*!< RCC LPTIM1 Configuration Register @ offset 0x744 */
  __IO uint32_t LPTIM2CFGR;           /*!< RCC LPTIM2 Configuration Register @ offset 0x748 */
  __IO uint32_t LPTIM3CFGR;           /*!< RCC LPTIM3 Configuration Register @ offset 0x74c */
  __IO uint32_t LPTIM4CFGR;           /*!< RCC LPTIM4 Configuration Register @ offset 0x750 */
  __IO uint32_t LPTIM5CFGR;           /*!< RCC LPTIM5 Configuration Register @ offset 0x754 */
  __IO uint32_t SPI1CFGR;             /*!< RCC SPI1 Configuration Register @ offset 0x758 */
  __IO uint32_t SPI2CFGR;             /*!< RCC SPI2 Configuration Register @ offset 0x75c */
  __IO uint32_t SPI3CFGR;             /*!< RCC SPI3 Configuration Register @ offset 0x760 */
  __IO uint32_t SPI4CFGR;             /*!< RCC SPI4 Configuration Register @ offset 0x764 */
  __IO uint32_t SPI5CFGR;             /*!< RCC SPI5 Configuration Register @ offset 0x768 */
  __IO uint32_t SPI6CFGR;             /*!< RCC SPI6 Configuration Register @ offset 0x76c */
  __IO uint32_t SPI7CFGR;             /*!< RCC SPI7 Configuration Register @ offset 0x770 */
  __IO uint32_t SPI8CFGR;             /*!< RCC SPI8 Configuration Register @ offset 0x774 */
  __IO uint32_t SPDIFRXCFGR;          /*!< RCC SPDIFRX Configuration Register @ offset 0x778 */
  __IO uint32_t USART1CFGR;           /*!< RCC USART1 Configuration Register @ offset 0x77c */
  __IO uint32_t USART2CFGR;           /*!< RCC USART2 Configuration Register @ offset 0x780 */
  __IO uint32_t USART3CFGR;           /*!< RCC USART3 Configuration Register @ offset 0x784 */
  __IO uint32_t UART4CFGR;            /*!< RCC UART4 Configuration Register @ offset 0x788 */
  __IO uint32_t UART5CFGR;            /*!< RCC UART5 Configuration Register @ offset 0x78c */
  __IO uint32_t USART6CFGR;           /*!< RCC USART6 Configuration Register @ offset 0x790 */
  __IO uint32_t UART7CFGR;            /*!< RCC UART7 Configuration Register @ offset 0x794 */
  __IO uint32_t UART8CFGR;            /*!< RCC UART8 Configuration Register @ offset 0x798 */
  __IO uint32_t UART9CFGR;            /*!< RCC UART9 Configuration Register @ offset 0x79c */
  __IO uint32_t LPUART1CFGR;          /*!< RCC LPUART1 Configuration Register @ offset 0x7a0 */
  __IO uint32_t I2C1CFGR;             /*!< RCC I2C1 Configuration Register @ offset 0x7a4 */
  __IO uint32_t I2C2CFGR;             /*!< RCC I2C2 Configuration Register @ offset 0x7a8 */
  __IO uint32_t I2C3CFGR;             /*!< RCC I2C3 Configuration Register @ offset 0x7ac */
  __IO uint32_t I2C4CFGR;             /*!< RCC I2C4 Configuration Register @ offset 0x7b0 */
  __IO uint32_t I2C5CFGR;             /*!< RCC I2C5 Configuration Register @ offset 0x7b4 */
  __IO uint32_t I2C6CFGR;             /*!< RCC I2C6 Configuration Register @ offset 0x7b8 */
  __IO uint32_t I2C7CFGR;             /*!< RCC I2C7 Configuration Register @ offset 0x7bc */
  __IO uint32_t I2C8CFGR;             /*!< RCC I2C8 Configuration Register @ offset 0x7c0 */
  __IO uint32_t SAI1CFGR;             /*!< RCC SAI1 Configuration Register @ offset 0x7c4 */
  __IO uint32_t SAI2CFGR;             /*!< RCC SAI2 Configuration Register @ offset 0x7c8 */
  __IO uint32_t SAI3CFGR;             /*!< RCC SAI3 Configuration Register @ offset 0x7cc */
  __IO uint32_t SAI4CFGR;             /*!< RCC SAI4 Configuration Register @ offset 0x7d0 */
  __IO uint32_t CECCFGR;              /*!< RCC CEC Configuration Register @ offset 0x7d4 */
  __IO uint32_t MDF1CFGR;             /*!< RCC MDF1 Configuration Register @ offset 0x7d8 */
  __IO uint32_t MDF2CFGR;             /*!< RCC MDF2 Configuration Register @ offset 0x7dc */
  __IO uint32_t FDCANCFGR;            /*!< RCC FDCAN Configuration Register @ offset 0x7e0 */
  __IO uint32_t HDPCFGR;              /*!< RCC HDP Configuration Register @ offset 0x7e4 */
  __IO uint32_t ADC12CFGR;            /*!< RCC ADC12 Configuration Register @ offset 0x7e8 */
  __IO uint32_t ADC3CFGR;             /*!< RCC ADC3 Configuration Register @ offset 0x7ec */
  __IO uint32_t ETH1CFGR;             /*!< RCC Ethernet 1 Configuration Register @ offset 0x7f0 */
  __IO uint32_t ETH2CFGR;             /*!< RCC Ethernet 2 Configuration Register @ offset 0x7f4 */
  __IO uint32_t USB2CFGR;             /*!< RCC USB2 Configuration Register @ offset 0x7f8 */
  __IO uint32_t USB2PHY1CFGR;         /*!< RCC USB2PHY1 Configuration Register @ offset 0x7fc */
  __IO uint32_t USB2PHY2CFGR;         /*!< RCC USB2PHY2 Configuration Register @ offset 0x800 */
  __IO uint32_t USB3DRDCFGR;          /*!< RCC USB3DRD Configuration Register @ offset 0x804 */
  __IO uint32_t USB3PCIEPHYCFGR;      /*!< RCC USB3PCIEPHY Configuration Register @ offset 0x808 */
  __IO uint32_t PCIECFGR;             /*!< RCC PCIE Configuration Register @ offset 0x80c */
  __IO uint32_t USBTCCFGR;            /*!< RCC USBTC Configuration Register @ offset 0x810 */
       uint32_t RESERVED11[3];        /*!< Reserved @ offset 0x814 */
  __IO uint32_t STGENCFGR;            /*!< RCC STGEN Configuration Register @ offset 0x820 */
  __IO uint32_t FMCCFGR;              /*!< RCC FMC Configuration Register @ offset 0x824 */
       uint32_t RESERVED12[2];        /*!< Reserved @ offset 0x828 */
  __IO uint32_t SDMMC1CFGR;           /*!< RCC SDMMC1 Configuration Register @ offset 0x830 */
  __IO uint32_t SDMMC2CFGR;           /*!< RCC SDMMC2 Configuration Register @ offset 0x834 */
  __IO uint32_t SDMMC3CFGR;           /*!< RCC SDMMC3 Configuration Register @ offset 0x838 */
  __IO uint32_t GPUCFGR;              /*!< RCC GPU Configuration Register @ offset 0x83c */
  __IO uint32_t LTDCCFGR;             /*!< RCC LTDC Configuration Register @ offset 0x840 */
  __IO uint32_t DSICFGR;              /*!< RCC DSI Configuration Register @ offset 0x844 */
       uint32_t RESERVED13[2];        /*!< Reserved @ offset 0x848 */
  __IO uint32_t LDITCFGR;             /*!< RCC LDIT Configuration Register @ offset 0x850 */
       uint32_t RESERVED14;           /*!< Reserved @ offset 0x854 */
  __IO uint32_t CSI2CFGR;             /*!< RCC CSI2 Configuration Register @ offset 0x858 */
  __IO uint32_t DCMIPPCFGR;           /*!< RCC DCMIPP Configuration Register @ offset 0x85c */
  __IO uint32_t CCICFGR;              /*!< RCC CCI Configuration Register @ offset 0x860 */
       uint32_t RESERVED15[3];        /*!< Reserved @ offset 0x864 */
  __IO uint32_t RNGCFGR;              /*!< RCC RNG Configuration Register @ offset 0x870 */
  __IO uint32_t PKACFGR;              /*!< RCC PKA Configuration Register @ offset 0x874 */
  __IO uint32_t SAESCFGR;             /*!< RCC SAES Configuration Register @ offset 0x878 */
  __IO uint32_t HASHCFGR;             /*!< RCC HASH Configuration Register @ offset 0x87c */
  __IO uint32_t CRYP1CFGR;            /*!< RCC CRYP1 Configuration Register @ offset 0x880 */
  __IO uint32_t CRYP2CFGR;            /*!< RCC CRYP2 Configuration Register @ offset 0x884 */
  __IO uint32_t IWDG1CFGR;            /*!< RCC IWDG1 Configuration Register @ offset 0x888 */
  __IO uint32_t IWDG2CFGR;            /*!< RCC IWDG2 Configuration Register @ offset 0x88c */
  __IO uint32_t IWDG3CFGR;            /*!< RCC IWDG3 Configuration Register @ offset 0x890 */
  __IO uint32_t IWDG4CFGR;            /*!< RCC IWDG4 Configuration Register @ offset 0x894 */
  __IO uint32_t IWDG5CFGR;            /*!< RCC IWDG5 Configuration Register @ offset 0x898 */
  __IO uint32_t WWDG1CFGR;            /*!< RCC WWDG1 Configuration Register @ offset 0x89c */
  __IO uint32_t WWDG2CFGR;            /*!< RCC WWDG2 Configuration Register @ offset 0x8a0 */
  __IO uint32_t BUSPERFMCFGR;         /*!< RCC BUSPERFM Configuration Register @ offset 0x8a4 */
  __IO uint32_t VREFCFGR;             /*!< RCC VREF Configuration Register @ offset 0x8a8 */
  __IO uint32_t TMPSENSCFGR;          /*!< RCC TMPSENS Configuration Register @ offset 0x8ac */
       uint32_t RESERVED16;           /*!< Reserved @ offset 0x8b0 */
  __IO uint32_t CRCCFGR;              /*!< RCC CRC Configuration Register @ offset 0x8b4 */
  __IO uint32_t BSECCFGR;             /*!< RCC BSEC Configuration Register @ offset 0x8b8 */
       uint32_t RESERVED17;           /*!< Reserved @ offset 0x8bc */
  __IO uint32_t GICV2MCFGR;           /*!< RCC GICV2M Configuration Register @ offset 0x8c0 */
       uint32_t RESERVED18;           /*!< Reserved @ offset 0x8c4 */
  __IO uint32_t I3C1CFGR;             /*!< RCC I3C1 Configuration Register @ offset 0x8c8 */
  __IO uint32_t I3C2CFGR;             /*!< RCC I3C2 Configuration Register @ offset 0x8cc */
  __IO uint32_t I3C3CFGR;             /*!< RCC I3C3 Configuration Register @ offset 0x8d0 */
  __IO uint32_t I3C4CFGR;             /*!< RCC I3C4 Configuration Register @ offset 0x8d4 */
       uint32_t RESERVED19[458];      /*!< Reserved @ offset 0x8d8 */
  __IO uint32_t MUXSELCFGR;           /*!< RCC MUXSEL Configuration Register @ offset 0x1000 */
       uint32_t RESERVED20[5];        /*!< Reserved @ offset 0x1004 */
  __IO uint32_t XBARxCFGR[64];        /*!< RCC Cross Bar 0 Configuration Register @ offset 0x1018 */
  __IO uint32_t PREDIVxCFGR[64];      /*!< RCC Pre Divider 0 Configuration Register @ offset 0x1118 */
  __IO uint32_t PREDIVSR1;            /*!< RCC Pre Divider Status Register 1 @ offset 0x1218 */
  __IO uint32_t PREDIVSR2;            /*!< RCC Pre Divider Status Register 2 @ offset 0x121c */
       uint32_t RESERVED21;           /*!< Reserved @ offset 0x1220 */
  __IO uint32_t FINDIVxCFGR[64];      /*!< RCC Final Divider 0 Configuration Register @ offset 0x1224 */
  __IO uint32_t FINDIVSR1;            /*!< RCC Final Divider Status Register 1 @ offset 0x1324 */
  __IO uint32_t FINDIVSR2;            /*!< RCC Final Divider Status Register 2 @ offset 0x1328 */
       uint32_t RESERVED22[5];        /*!< Reserved @ offset 0x132c */
  __IO uint32_t JEREFOBS0CFGR;        /*!< RCC Jitter Estimator Reference and Observation 0 Clocks Configuration Register @ offset 0x1340 */
  __IO uint32_t JEREFOBS1CFGR;        /*!< RCC Jitter Estimator Observation and Observation 1 Clocks Configuration Register @ offset 0x1344 */
  __IO uint32_t JELOCKCFGR;           /*!< RCC Jitter Estimator Lock Configuration Register @ offset 0x1348 */
  __IO uint32_t JECR1;                /*!< RCC Jitter Estimator Control Register 1 @ offset 0x134c */
       uint32_t RESERVED23;           /*!< Reserved @ offset 0x1350 */
  __IO uint32_t JECR2;                /*!< RCC Jitter Estimator Control Register 2 @ offset 0x1354 */
  __IO uint32_t JESR1;                /*!< RCC Jitter Estimator Status Register 1 @ offset 0x1358 */
       uint32_t RESERVED24;           /*!< Reserved @ offset 0x135c */
  __IO uint32_t PLL4CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x1360 */
  __IO uint32_t PLL4CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x1364 */
  __IO uint32_t PLL4CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x1368 */
  __IO uint32_t PLL4CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x136c */
  __IO uint32_t PLL4CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x1370 */
       uint32_t RESERVED25;           /*!< Reserved @ offset 0x1374 */
  __IO uint32_t PLL4CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x1378 */
  __IO uint32_t PLL4CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x137c */
       uint32_t RESERVED26[2];        /*!< Reserved @ offset 0x1380 */
  __IO uint32_t PLL5CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x1388 */
  __IO uint32_t PLL5CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x138c */
  __IO uint32_t PLL5CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x1390 */
  __IO uint32_t PLL5CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x1394 */
  __IO uint32_t PLL5CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x1398 */
       uint32_t RESERVED27;           /*!< Reserved @ offset 0x139c */
  __IO uint32_t PLL5CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x13a0 */
  __IO uint32_t PLL5CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x13a4 */
       uint32_t RESERVED28[2];        /*!< Reserved @ offset 0x13a8 */
  __IO uint32_t PLL6CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x13b0 */
  __IO uint32_t PLL6CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x13b4 */
  __IO uint32_t PLL6CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x13b8 */
  __IO uint32_t PLL6CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x13bc */
  __IO uint32_t PLL6CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x13c0 */
       uint32_t RESERVED29;           /*!< Reserved @ offset 0x13c4 */
  __IO uint32_t PLL6CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x13c8 */
  __IO uint32_t PLL6CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x13cc */
       uint32_t RESERVED30[2];        /*!< Reserved @ offset 0x13d0 */
  __IO uint32_t PLL7CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x13d8 */
  __IO uint32_t PLL7CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x13dc */
  __IO uint32_t PLL7CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x13e0 */
  __IO uint32_t PLL7CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x13e4 */
  __IO uint32_t PLL7CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x13e8 */
       uint32_t RESERVED31;           /*!< Reserved @ offset 0x13ec */
  __IO uint32_t PLL7CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x13f0 */
  __IO uint32_t PLL7CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x13f4 */
       uint32_t RESERVED32[2];        /*!< Reserved @ offset 0x13f8 */
  __IO uint32_t PLL8CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x1400 */
  __IO uint32_t PLL8CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x1404 */
  __IO uint32_t PLL8CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x1408 */
  __IO uint32_t PLL8CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x140c */
  __IO uint32_t PLL8CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x1410 */
       uint32_t RESERVED33;           /*!< Reserved @ offset 0x1414 */
  __IO uint32_t PLL8CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x1418 */
  __IO uint32_t PLL8CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x141c */
       uint32_t RESERVED34[15093];    /*!< Reserved @ offset 0x1420 */
  __IO uint32_t VERR;                 /*!< RCC Version register @ offset 0xfff4 */
  __IO uint32_t IDR;                  /*!< RCC ID register @ offset 0xfff8 */
  __IO uint32_t SIDR;                 /*!< RCC Size ID register @ offset 0xfffc */
} RCC_TypeDef;
#else /* STM32MP2XX_ASSY2_2_1 */
/**
  * @brief Resets & Clocks Control
  *        reference document : "RCC specifications"
  *                             (Revision 1.0.18 - December 18th, 2019)
  */
typedef struct
{
  __IO uint32_t SECCFGR0;             /*!< RCC Secure Configuration Register 0 @ offset 0x0 */
  __IO uint32_t SECCFGR1;             /*!< RCC Secure Configuration Register 1 @ offset 0x4 */
  __IO uint32_t SECCFGR2;             /*!< RCC Secure Configuration Register 2 @ offset 0x8 */
  __IO uint32_t SECCFGR3;             /*!< RCC Secure Configuration Register 3 @ offset 0xc */
  __IO uint32_t PRIVCFGR0;            /*!< RCC Privileged Configuration Register 0 @ offset 0x10 */
  __IO uint32_t PRIVCFGR1;            /*!< RCC Privileged Configuration Register 1 @ offset 0x14 */
  __IO uint32_t PRIVCFGR2;            /*!< RCC Privileged Configuration Register 2 @ offset 0x18 */
  __IO uint32_t PRIVCFGR3;            /*!< RCC Privileged Configuration Register 3 @ offset 0x1c */
  __IO uint32_t RCFGLOCK0;            /*!< RCC Resource Configuration Lock Register 0 @ offset 0x20 */
  __IO uint32_t RCFGLOCK1;            /*!< RCC Resource Configuration Lock Register 1 @ offset 0x24 */
  __IO uint32_t RCFGLOCK2;            /*!< RCC Resource Configuration Lock Register 2 @ offset 0x28 */
  __IO uint32_t RCFGLOCK3;            /*!< RCC Resource Configuration Lock Register 3 @ offset 0x2c */
  __IO uint32_t R0CIDCFGR;            /*!< RCC Resource 0 CID Configuration Register @ offset 0x30 */
  __IO uint32_t R0SEMCR;              /*!< RCC Resource 0 Semaphore Control Register @ offset 0x34 */
  __IO uint32_t R1CIDCFGR;            /*!< RCC Resource 1 CID Configuration Register @ offset 0x38 */
  __IO uint32_t R1SEMCR;              /*!< RCC Resource 1 Semaphore Control Register @ offset 0x3c */
  __IO uint32_t R2CIDCFGR;            /*!< RCC Resource 2 CID Configuration Register @ offset 0x40 */
  __IO uint32_t R2SEMCR;              /*!< RCC Resource 2 Semaphore Control Register @ offset 0x44 */
  __IO uint32_t R3CIDCFGR;            /*!< RCC Resource 3 CID Configuration Register @ offset 0x48 */
  __IO uint32_t R3SEMCR;              /*!< RCC Resource 3 Semaphore Control Register @ offset 0x4c */
  __IO uint32_t R4CIDCFGR;            /*!< RCC Resource 4 CID Configuration Register @ offset 0x50 */
  __IO uint32_t R4SEMCR;              /*!< RCC Resource 4 Semaphore Control Register @ offset 0x54 */
  __IO uint32_t R5CIDCFGR;            /*!< RCC Resource 5 CID Configuration Register @ offset 0x58 */
  __IO uint32_t R5SEMCR;              /*!< RCC Resource 5 Semaphore Control Register @ offset 0x5c */
  __IO uint32_t R6CIDCFGR;            /*!< RCC Resource 6 CID Configuration Register @ offset 0x60 */
  __IO uint32_t R6SEMCR;              /*!< RCC Resource 6 Semaphore Control Register @ offset 0x64 */
  __IO uint32_t R7CIDCFGR;            /*!< RCC Resource 7 CID Configuration Register @ offset 0x68 */
  __IO uint32_t R7SEMCR;              /*!< RCC Resource 7 Semaphore Control Register @ offset 0x6c */
  __IO uint32_t R8CIDCFGR;            /*!< RCC Resource 8 CID Configuration Register @ offset 0x70 */
  __IO uint32_t R8SEMCR;              /*!< RCC Resource 8 Semaphore Control Register @ offset 0x74 */
  __IO uint32_t R9CIDCFGR;            /*!< RCC Resource 9 CID Configuration Register @ offset 0x78 */
  __IO uint32_t R9SEMCR;              /*!< RCC Resource 9 Semaphore Control Register @ offset 0x7c */
  __IO uint32_t R10CIDCFGR;           /*!< RCC Resource 10 CID Configuration Register @ offset 0x80 */
  __IO uint32_t R10SEMCR;             /*!< RCC Resource 10 Semaphore Control Register @ offset 0x84 */
  __IO uint32_t R11CIDCFGR;           /*!< RCC Resource 11 CID Configuration Register @ offset 0x88 */
  __IO uint32_t R11SEMCR;             /*!< RCC Resource 11 Semaphore Control Register @ offset 0x8c */
  __IO uint32_t R12CIDCFGR;           /*!< RCC Resource 12 CID Configuration Register @ offset 0x90 */
  __IO uint32_t R12SEMCR;             /*!< RCC Resource 12 Semaphore Control Register @ offset 0x94 */
  __IO uint32_t R13CIDCFGR;           /*!< RCC Resource 13 CID Configuration Register @ offset 0x98 */
  __IO uint32_t R13SEMCR;             /*!< RCC Resource 13 Semaphore Control Register @ offset 0x9c */
  __IO uint32_t R14CIDCFGR;           /*!< RCC Resource 14 CID Configuration Register @ offset 0xa0 */
  __IO uint32_t R14SEMCR;             /*!< RCC Resource 14 Semaphore Control Register @ offset 0xa4 */
  __IO uint32_t R15CIDCFGR;           /*!< RCC Resource 15 CID Configuration Register @ offset 0xa8 */
  __IO uint32_t R15SEMCR;             /*!< RCC Resource 15 Semaphore Control Register @ offset 0xac */
  __IO uint32_t R16CIDCFGR;           /*!< RCC Resource 16 CID Configuration Register @ offset 0xb0 */
  __IO uint32_t R16SEMCR;             /*!< RCC Resource 16 Semaphore Control Register @ offset 0xb4 */
  __IO uint32_t R17CIDCFGR;           /*!< RCC Resource 17 CID Configuration Register @ offset 0xb8 */
  __IO uint32_t R17SEMCR;             /*!< RCC Resource 17 Semaphore Control Register @ offset 0xbc */
  __IO uint32_t R18CIDCFGR;           /*!< RCC Resource 18 CID Configuration Register @ offset 0xc0 */
  __IO uint32_t R18SEMCR;             /*!< RCC Resource 18 Semaphore Control Register @ offset 0xc4 */
  __IO uint32_t R19CIDCFGR;           /*!< RCC Resource 19 CID Configuration Register @ offset 0xc8 */
  __IO uint32_t R19SEMCR;             /*!< RCC Resource 19 Semaphore Control Register @ offset 0xcc */
  __IO uint32_t R20CIDCFGR;           /*!< RCC Resource 20 CID Configuration Register @ offset 0xd0 */
  __IO uint32_t R20SEMCR;             /*!< RCC Resource 20 Semaphore Control Register @ offset 0xd4 */
  __IO uint32_t R21CIDCFGR;           /*!< RCC Resource 21 CID Configuration Register @ offset 0xd8 */
  __IO uint32_t R21SEMCR;             /*!< RCC Resource 21 Semaphore Control Register @ offset 0xdc */
  __IO uint32_t R22CIDCFGR;           /*!< RCC Resource 22 CID Configuration Register @ offset 0xe0 */
  __IO uint32_t R22SEMCR;             /*!< RCC Resource 22 Semaphore Control Register @ offset 0xe4 */
  __IO uint32_t R23CIDCFGR;           /*!< RCC Resource 23 CID Configuration Register @ offset 0xe8 */
  __IO uint32_t R23SEMCR;             /*!< RCC Resource 23 Semaphore Control Register @ offset 0xec */
  __IO uint32_t R24CIDCFGR;           /*!< RCC Resource 24 CID Configuration Register @ offset 0xf0 */
  __IO uint32_t R24SEMCR;             /*!< RCC Resource 24 Semaphore Control Register @ offset 0xf4 */
  __IO uint32_t R25CIDCFGR;           /*!< RCC Resource 25 CID Configuration Register @ offset 0xf8 */
  __IO uint32_t R25SEMCR;             /*!< RCC Resource 25 Semaphore Control Register @ offset 0xfc */
  __IO uint32_t R26CIDCFGR;           /*!< RCC Resource 26 CID Configuration Register @ offset 0x100 */
  __IO uint32_t R26SEMCR;             /*!< RCC Resource 26 Semaphore Control Register @ offset 0x104 */
  __IO uint32_t R27CIDCFGR;           /*!< RCC Resource 27 CID Configuration Register @ offset 0x108 */
  __IO uint32_t R27SEMCR;             /*!< RCC Resource 27 Semaphore Control Register @ offset 0x10c */
  __IO uint32_t R28CIDCFGR;           /*!< RCC Resource 28 CID Configuration Register @ offset 0x110 */
  __IO uint32_t R28SEMCR;             /*!< RCC Resource 28 Semaphore Control Register @ offset 0x114 */
  __IO uint32_t R29CIDCFGR;           /*!< RCC Resource 29 CID Configuration Register @ offset 0x118 */
  __IO uint32_t R29SEMCR;             /*!< RCC Resource 29 Semaphore Control Register @ offset 0x11c */
  __IO uint32_t R30CIDCFGR;           /*!< RCC Resource 30 CID Configuration Register @ offset 0x120 */
  __IO uint32_t R30SEMCR;             /*!< RCC Resource 30 Semaphore Control Register @ offset 0x124 */
  __IO uint32_t R31CIDCFGR;           /*!< RCC Resource 31 CID Configuration Register @ offset 0x128 */
  __IO uint32_t R31SEMCR;             /*!< RCC Resource 31 Semaphore Control Register @ offset 0x12c */
  __IO uint32_t R32CIDCFGR;           /*!< RCC Resource 32 CID Configuration Register @ offset 0x130 */
  __IO uint32_t R32SEMCR;             /*!< RCC Resource 32 Semaphore Control Register @ offset 0x134 */
  __IO uint32_t R33CIDCFGR;           /*!< RCC Resource 33 CID Configuration Register @ offset 0x138 */
  __IO uint32_t R33SEMCR;             /*!< RCC Resource 33 Semaphore Control Register @ offset 0x13c */
  __IO uint32_t R34CIDCFGR;           /*!< RCC Resource 34 CID Configuration Register @ offset 0x140 */
  __IO uint32_t R34SEMCR;             /*!< RCC Resource 34 Semaphore Control Register @ offset 0x144 */
  __IO uint32_t R35CIDCFGR;           /*!< RCC Resource 35 CID Configuration Register @ offset 0x148 */
  __IO uint32_t R35SEMCR;             /*!< RCC Resource 35 Semaphore Control Register @ offset 0x14c */
  __IO uint32_t R36CIDCFGR;           /*!< RCC Resource 36 CID Configuration Register @ offset 0x150 */
  __IO uint32_t R36SEMCR;             /*!< RCC Resource 36 Semaphore Control Register @ offset 0x154 */
  __IO uint32_t R37CIDCFGR;           /*!< RCC Resource 37 CID Configuration Register @ offset 0x158 */
  __IO uint32_t R37SEMCR;             /*!< RCC Resource 37 Semaphore Control Register @ offset 0x15c */
  __IO uint32_t R38CIDCFGR;           /*!< RCC Resource 38 CID Configuration Register @ offset 0x160 */
  __IO uint32_t R38SEMCR;             /*!< RCC Resource 38 Semaphore Control Register @ offset 0x164 */
  __IO uint32_t R39CIDCFGR;           /*!< RCC Resource 39 CID Configuration Register @ offset 0x168 */
  __IO uint32_t R39SEMCR;             /*!< RCC Resource 39 Semaphore Control Register @ offset 0x16c */
  __IO uint32_t R40CIDCFGR;           /*!< RCC Resource 40 CID Configuration Register @ offset 0x170 */
  __IO uint32_t R40SEMCR;             /*!< RCC Resource 40 Semaphore Control Register @ offset 0x174 */
  __IO uint32_t R41CIDCFGR;           /*!< RCC Resource 41 CID Configuration Register @ offset 0x178 */
  __IO uint32_t R41SEMCR;             /*!< RCC Resource 41 Semaphore Control Register @ offset 0x17c */
  __IO uint32_t R42CIDCFGR;           /*!< RCC Resource 42 CID Configuration Register @ offset 0x180 */
  __IO uint32_t R42SEMCR;             /*!< RCC Resource 42 Semaphore Control Register @ offset 0x184 */
  __IO uint32_t R43CIDCFGR;           /*!< RCC Resource 43 CID Configuration Register @ offset 0x188 */
  __IO uint32_t R43SEMCR;             /*!< RCC Resource 43 Semaphore Control Register @ offset 0x18c */
  __IO uint32_t R44CIDCFGR;           /*!< RCC Resource 44 CID Configuration Register @ offset 0x190 */
  __IO uint32_t R44SEMCR;             /*!< RCC Resource 44 Semaphore Control Register @ offset 0x194 */
  __IO uint32_t R45CIDCFGR;           /*!< RCC Resource 45 CID Configuration Register @ offset 0x198 */
  __IO uint32_t R45SEMCR;             /*!< RCC Resource 45 Semaphore Control Register @ offset 0x19c */
  __IO uint32_t R46CIDCFGR;           /*!< RCC Resource 46 CID Configuration Register @ offset 0x1a0 */
  __IO uint32_t R46SEMCR;             /*!< RCC Resource 46 Semaphore Control Register @ offset 0x1a4 */
  __IO uint32_t R47CIDCFGR;           /*!< RCC Resource 47 CID Configuration Register @ offset 0x1a8 */
  __IO uint32_t R47SEMCR;             /*!< RCC Resource 47 Semaphore Control Register @ offset 0x1ac */
  __IO uint32_t R48CIDCFGR;           /*!< RCC Resource 48 CID Configuration Register @ offset 0x1b0 */
  __IO uint32_t R48SEMCR;             /*!< RCC Resource 48 Semaphore Control Register @ offset 0x1b4 */
  __IO uint32_t R49CIDCFGR;           /*!< RCC Resource 49 CID Configuration Register @ offset 0x1b8 */
  __IO uint32_t R49SEMCR;             /*!< RCC Resource 49 Semaphore Control Register @ offset 0x1bc */
  __IO uint32_t R50CIDCFGR;           /*!< RCC Resource 50 CID Configuration Register @ offset 0x1c0 */
  __IO uint32_t R50SEMCR;             /*!< RCC Resource 50 Semaphore Control Register @ offset 0x1c4 */
  __IO uint32_t R51CIDCFGR;           /*!< RCC Resource 51 CID Configuration Register @ offset 0x1c8 */
  __IO uint32_t R51SEMCR;             /*!< RCC Resource 51 Semaphore Control Register @ offset 0x1cc */
  __IO uint32_t R52CIDCFGR;           /*!< RCC Resource 52 CID Configuration Register @ offset 0x1d0 */
  __IO uint32_t R52SEMCR;             /*!< RCC Resource 52 Semaphore Control Register @ offset 0x1d4 */
  __IO uint32_t R53CIDCFGR;           /*!< RCC Resource 53 CID Configuration Register @ offset 0x1d8 */
  __IO uint32_t R53SEMCR;             /*!< RCC Resource 53 Semaphore Control Register @ offset 0x1dc */
  __IO uint32_t R54CIDCFGR;           /*!< RCC Resource 54 CID Configuration Register @ offset 0x1e0 */
  __IO uint32_t R54SEMCR;             /*!< RCC Resource 54 Semaphore Control Register @ offset 0x1e4 */
  __IO uint32_t R55CIDCFGR;           /*!< RCC Resource 55 CID Configuration Register @ offset 0x1e8 */
  __IO uint32_t R55SEMCR;             /*!< RCC Resource 55 Semaphore Control Register @ offset 0x1ec */
  __IO uint32_t R56CIDCFGR;           /*!< RCC Resource 56 CID Configuration Register @ offset 0x1f0 */
  __IO uint32_t R56SEMCR;             /*!< RCC Resource 56 Semaphore Control Register @ offset 0x1f4 */
  __IO uint32_t R57CIDCFGR;           /*!< RCC Resource 57 CID Configuration Register @ offset 0x1f8 */
  __IO uint32_t R57SEMCR;             /*!< RCC Resource 57 Semaphore Control Register @ offset 0x1fc */
  __IO uint32_t R58CIDCFGR;           /*!< RCC Resource 58 CID Configuration Register @ offset 0x200 */
  __IO uint32_t R58SEMCR;             /*!< RCC Resource 58 Semaphore Control Register @ offset 0x204 */
  __IO uint32_t R59CIDCFGR;           /*!< RCC Resource 59 CID Configuration Register @ offset 0x208 */
  __IO uint32_t R59SEMCR;             /*!< RCC Resource 59 Semaphore Control Register @ offset 0x20c */
  __IO uint32_t R60CIDCFGR;           /*!< RCC Resource 60 CID Configuration Register @ offset 0x210 */
  __IO uint32_t R60SEMCR;             /*!< RCC Resource 60 Semaphore Control Register @ offset 0x214 */
  __IO uint32_t R61CIDCFGR;           /*!< RCC Resource 61 CID Configuration Register @ offset 0x218 */
  __IO uint32_t R61SEMCR;             /*!< RCC Resource 61 Semaphore Control Register @ offset 0x21c */
  __IO uint32_t R62CIDCFGR;           /*!< RCC Resource 62 CID Configuration Register @ offset 0x220 */
  __IO uint32_t R62SEMCR;             /*!< RCC Resource 62 Semaphore Control Register @ offset 0x224 */
  __IO uint32_t R63CIDCFGR;           /*!< RCC Resource 63 CID Configuration Register @ offset 0x228 */
  __IO uint32_t R63SEMCR;             /*!< RCC Resource 63 Semaphore Control Register @ offset 0x22c */
  __IO uint32_t R64CIDCFGR;           /*!< RCC Resource 64 CID Configuration Register @ offset 0x230 */
  __IO uint32_t R64SEMCR;             /*!< RCC Resource 64 Semaphore Control Register @ offset 0x234 */
  __IO uint32_t R65CIDCFGR;           /*!< RCC Resource 65 CID Configuration Register @ offset 0x238 */
  __IO uint32_t R65SEMCR;             /*!< RCC Resource 65 Semaphore Control Register @ offset 0x23c */
  __IO uint32_t R66CIDCFGR;           /*!< RCC Resource 66 CID Configuration Register @ offset 0x240 */
  __IO uint32_t R66SEMCR;             /*!< RCC Resource 66 Semaphore Control Register @ offset 0x244 */
  __IO uint32_t R67CIDCFGR;           /*!< RCC Resource 67 CID Configuration Register @ offset 0x248 */
  __IO uint32_t R67SEMCR;             /*!< RCC Resource 67 Semaphore Control Register @ offset 0x24c */
  __IO uint32_t R68CIDCFGR;           /*!< RCC Resource 68 CID Configuration Register @ offset 0x250 */
  __IO uint32_t R68SEMCR;             /*!< RCC Resource 68 Semaphore Control Register @ offset 0x254 */
  __IO uint32_t R69CIDCFGR;           /*!< RCC Resource 69 CID Configuration Register @ offset 0x258 */
  __IO uint32_t R69SEMCR;             /*!< RCC Resource 69 Semaphore Control Register @ offset 0x25c */
  __IO uint32_t R70CIDCFGR;           /*!< RCC Resource 70 CID Configuration Register @ offset 0x260 */
  __IO uint32_t R70SEMCR;             /*!< RCC Resource 70 Semaphore Control Register @ offset 0x264 */
  __IO uint32_t R71CIDCFGR;           /*!< RCC Resource 71 CID Configuration Register @ offset 0x268 */
  __IO uint32_t R71SEMCR;             /*!< RCC Resource 71 Semaphore Control Register @ offset 0x26c */
  __IO uint32_t R72CIDCFGR;           /*!< RCC Resource 72 CID Configuration Register @ offset 0x270 */
  __IO uint32_t R72SEMCR;             /*!< RCC Resource 72 Semaphore Control Register @ offset 0x274 */
  __IO uint32_t R73CIDCFGR;           /*!< RCC Resource 73 CID Configuration Register @ offset 0x278 */
  __IO uint32_t R73SEMCR;             /*!< RCC Resource 73 Semaphore Control Register @ offset 0x27c */
  __IO uint32_t R74CIDCFGR;           /*!< RCC Resource 74 CID Configuration Register @ offset 0x280 */
  __IO uint32_t R74SEMCR;             /*!< RCC Resource 74 Semaphore Control Register @ offset 0x284 */
  __IO uint32_t R75CIDCFGR;           /*!< RCC Resource 75 CID Configuration Register @ offset 0x288 */
  __IO uint32_t R75SEMCR;             /*!< RCC Resource 75 Semaphore Control Register @ offset 0x28c */
  __IO uint32_t R76CIDCFGR;           /*!< RCC Resource 76 CID Configuration Register @ offset 0x290 */
  __IO uint32_t R76SEMCR;             /*!< RCC Resource 76 Semaphore Control Register @ offset 0x294 */
  __IO uint32_t R77CIDCFGR;           /*!< RCC Resource 77 CID Configuration Register @ offset 0x298 */
  __IO uint32_t R77SEMCR;             /*!< RCC Resource 77 Semaphore Control Register @ offset 0x29c */
  __IO uint32_t R78CIDCFGR;           /*!< RCC Resource 78 CID Configuration Register @ offset 0x2a0 */
  __IO uint32_t R78SEMCR;             /*!< RCC Resource 78 Semaphore Control Register @ offset 0x2a4 */
  __IO uint32_t R79CIDCFGR;           /*!< RCC Resource 79 CID Configuration Register @ offset 0x2a8 */
  __IO uint32_t R79SEMCR;             /*!< RCC Resource 79 Semaphore Control Register @ offset 0x2ac */
  __IO uint32_t R80CIDCFGR;           /*!< RCC Resource 80 CID Configuration Register @ offset 0x2b0 */
  __IO uint32_t R80SEMCR;             /*!< RCC Resource 80 Semaphore Control Register @ offset 0x2b4 */
  __IO uint32_t R81CIDCFGR;           /*!< RCC Resource 81 CID Configuration Register @ offset 0x2b8 */
  __IO uint32_t R81SEMCR;             /*!< RCC Resource 81 Semaphore Control Register @ offset 0x2bc */
  __IO uint32_t R82CIDCFGR;           /*!< RCC Resource 82 CID Configuration Register @ offset 0x2c0 */
  __IO uint32_t R82SEMCR;             /*!< RCC Resource 82 Semaphore Control Register @ offset 0x2c4 */
  __IO uint32_t R83CIDCFGR;           /*!< RCC Resource 83 CID Configuration Register @ offset 0x2c8 */
  __IO uint32_t R83SEMCR;             /*!< RCC Resource 83 Semaphore Control Register @ offset 0x2cc */
  __IO uint32_t R84CIDCFGR;           /*!< RCC Resource 84 CID Configuration Register @ offset 0x2d0 */
  __IO uint32_t R84SEMCR;             /*!< RCC Resource 84 Semaphore Control Register @ offset 0x2d4 */
  __IO uint32_t R85CIDCFGR;           /*!< RCC Resource 85 CID Configuration Register @ offset 0x2d8 */
  __IO uint32_t R85SEMCR;             /*!< RCC Resource 85 Semaphore Control Register @ offset 0x2dc */
  __IO uint32_t R86CIDCFGR;           /*!< RCC Resource 86 CID Configuration Register @ offset 0x2e0 */
  __IO uint32_t R86SEMCR;             /*!< RCC Resource 86 Semaphore Control Register @ offset 0x2e4 */
  __IO uint32_t R87CIDCFGR;           /*!< RCC Resource 87 CID Configuration Register @ offset 0x2e8 */
  __IO uint32_t R87SEMCR;             /*!< RCC Resource 87 Semaphore Control Register @ offset 0x2ec */
  __IO uint32_t R88CIDCFGR;           /*!< RCC Resource 88 CID Configuration Register @ offset 0x2f0 */
  __IO uint32_t R88SEMCR;             /*!< RCC Resource 88 Semaphore Control Register @ offset 0x2f4 */
  __IO uint32_t R89CIDCFGR;           /*!< RCC Resource 89 CID Configuration Register @ offset 0x2f8 */
  __IO uint32_t R89SEMCR;             /*!< RCC Resource 89 Semaphore Control Register @ offset 0x2fc */
  __IO uint32_t R90CIDCFGR;           /*!< RCC Resource 90 CID Configuration Register @ offset 0x300 */
  __IO uint32_t R90SEMCR;             /*!< RCC Resource 90 Semaphore Control Register @ offset 0x304 */
  __IO uint32_t R91CIDCFGR;           /*!< RCC Resource 91 CID Configuration Register @ offset 0x308 */
  __IO uint32_t R91SEMCR;             /*!< RCC Resource 91 Semaphore Control Register @ offset 0x30c */
  __IO uint32_t R92CIDCFGR;           /*!< RCC Resource 92 CID Configuration Register @ offset 0x310 */
  __IO uint32_t R92SEMCR;             /*!< RCC Resource 92 Semaphore Control Register @ offset 0x314 */
  __IO uint32_t R93CIDCFGR;           /*!< RCC Resource 93 CID Configuration Register @ offset 0x318 */
  __IO uint32_t R93SEMCR;             /*!< RCC Resource 93 Semaphore Control Register @ offset 0x31c */
  __IO uint32_t R94CIDCFGR;           /*!< RCC Resource 94 CID Configuration Register @ offset 0x320 */
  __IO uint32_t R94SEMCR;             /*!< RCC Resource 94 Semaphore Control Register @ offset 0x324 */
  __IO uint32_t R95CIDCFGR;           /*!< RCC Resource 95 CID Configuration Register @ offset 0x328 */
  __IO uint32_t R95SEMCR;             /*!< RCC Resource 95 Semaphore Control Register @ offset 0x32c */
  __IO uint32_t R96CIDCFGR;           /*!< RCC Resource 96 CID Configuration Register @ offset 0x330 */
  __IO uint32_t R96SEMCR;             /*!< RCC Resource 96 Semaphore Control Register @ offset 0x334 */
  __IO uint32_t R97CIDCFGR;           /*!< RCC Resource 97 CID Configuration Register @ offset 0x338 */
  __IO uint32_t R97SEMCR;             /*!< RCC Resource 97 Semaphore Control Register @ offset 0x33c */
  __IO uint32_t R98CIDCFGR;           /*!< RCC Resource 98 CID Configuration Register @ offset 0x340 */
  __IO uint32_t R98SEMCR;             /*!< RCC Resource 98 Semaphore Control Register @ offset 0x344 */
  __IO uint32_t R99CIDCFGR;           /*!< RCC Resource 99 CID Configuration Register @ offset 0x348 */
  __IO uint32_t R99SEMCR;             /*!< RCC Resource 99 Semaphore Control Register @ offset 0x34c */
  __IO uint32_t R100CIDCFGR;          /*!< RCC Resource 100 CID Configuration Register @ offset 0x350 */
  __IO uint32_t R100SEMCR;            /*!< RCC Resource 100 Semaphore Control Register @ offset 0x354 */
  __IO uint32_t R101CIDCFGR;          /*!< RCC Resource 101 CID Configuration Register @ offset 0x358 */
  __IO uint32_t R101SEMCR;            /*!< RCC Resource 101 Semaphore Control Register @ offset 0x35c */
  __IO uint32_t R102CIDCFGR;          /*!< RCC Resource 102 CID Configuration Register @ offset 0x360 */
  __IO uint32_t R102SEMCR;            /*!< RCC Resource 102 Semaphore Control Register @ offset 0x364 */
  __IO uint32_t R103CIDCFGR;          /*!< RCC Resource 103 CID Configuration Register @ offset 0x368 */
  __IO uint32_t R103SEMCR;            /*!< RCC Resource 103 Semaphore Control Register @ offset 0x36c */
  __IO uint32_t R104CIDCFGR;          /*!< RCC Resource 104 CID Configuration Register @ offset 0x370 */
  __IO uint32_t R104SEMCR;            /*!< RCC Resource 104 Semaphore Control Register @ offset 0x374 */
  __IO uint32_t R105CIDCFGR;          /*!< RCC Resource 105 CID Configuration Register @ offset 0x378 */
  __IO uint32_t R105SEMCR;            /*!< RCC Resource 105 Semaphore Control Register @ offset 0x37c */
  __IO uint32_t R106CIDCFGR;          /*!< RCC Resource 106 CID Configuration Register @ offset 0x380 */
  __IO uint32_t R106SEMCR;            /*!< RCC Resource 106 Semaphore Control Register @ offset 0x384 */
  __IO uint32_t R107CIDCFGR;          /*!< RCC Resource 107 CID Configuration Register @ offset 0x388 */
  __IO uint32_t R107SEMCR;            /*!< RCC Resource 107 Semaphore Control Register @ offset 0x38c */
  __IO uint32_t R108CIDCFGR;          /*!< RCC Resource 108 CID Configuration Register @ offset 0x390 */
  __IO uint32_t R108SEMCR;            /*!< RCC Resource 108 Semaphore Control Register @ offset 0x394 */
  __IO uint32_t R109CIDCFGR;          /*!< RCC Resource 109 CID Configuration Register @ offset 0x398 */
  __IO uint32_t R109SEMCR;            /*!< RCC Resource 109 Semaphore Control Register @ offset 0x39c */
  __IO uint32_t R110CIDCFGR;          /*!< RCC Resource 110 CID Configuration Register @ offset 0x3a0 */
  __IO uint32_t R110SEMCR;            /*!< RCC Resource 110 Semaphore Control Register @ offset 0x3a4 */
  __IO uint32_t R111CIDCFGR;          /*!< RCC Resource 111 CID Configuration Register @ offset 0x3a8 */
  __IO uint32_t R111SEMCR;            /*!< RCC Resource 111 Semaphore Control Register @ offset 0x3ac */
  __IO uint32_t R112CIDCFGR;          /*!< RCC Resource 112 CID Configuration Register @ offset 0x3b0 */
  __IO uint32_t R112SEMCR;            /*!< RCC Resource 112 Semaphore Control Register @ offset 0x3b4 */
       uint32_t RESERVED0[18];        /*!< Reserved @ offset 0x3b8 */
  __IO uint32_t GRSTCSETR;            /*!< RCC Global Reset Control Set Register @ offset 0x400 */
  __IO uint32_t C1RSTCSETR;           /*!< RCC CPU1 Reset Control Set Register @ offset 0x404 */
       uint32_t RESERVED1;            /*!< Reserved @ offset 0x408 */
  __IO uint32_t C1P1RSTCSETR;         /*!< RCC CPU1 Processor 1 Reset Control Set Register @ offset 0x40c */
  __IO uint32_t C2RSTCSETR;           /*!< RCC CPU2 Reset Control Set Register @ offset 0x410 */
  __IO uint32_t HWRSTSCLRR;           /*!< RCC Hardware Reset Status Clear Register @ offset 0x414 */
  __IO uint32_t C1BOOTRSTSSETR;       /*!< RCC CPU1 BOOT Reset Status Set Register @ offset 0x418 */
  __IO uint32_t C1BOOTRSTSCLRR;       /*!< RCC CPU1 BOOT Reset Status Clear Register @ offset 0x41c */
  __IO uint32_t C2BOOTRSTSSETR;       /*!< RCC CPU2 BOOT Reset Status Set Register @ offset 0x420 */
  __IO uint32_t C2BOOTRSTSCLRR;       /*!< RCC CPU2 BOOT Reset Status Clear Register @ offset 0x424 */
  __IO uint32_t C1SREQSETR;           /*!< RCC CPU1 Stop Request Set Register @ offset 0x428 */
  __IO uint32_t C1SREQCLRR;           /*!< RCC CPU1 Stop Request Clear Register @ offset 0x42c */
  __IO uint32_t CPUBOOTCR;            /*!< RCC CPU Boot Control Register @ offset 0x430 */
  __IO uint32_t STBYBOOTCR;           /*!< RCC Standby Boot Control Register @ offset 0x434 */
  __IO uint32_t BDCR;                 /*!< RCC Backup Domain Control Register @ offset 0x438 */
  __IO uint32_t SRDCR;                /*!< RCC SmartRun Domain Control Register @ offset 0x43c */
  __IO uint32_t SRDSR;                /*!< RCC SmartRun Domain Status Register @ offset 0x440 */
       uint32_t RESERVED2;            /*!< Reserved @ offset 0x444 */
  __IO uint32_t RDCR;                 /*!< RCC Reset Duration Control Register @ offset 0x448 */
  __IO uint32_t PWRLPDLYCR;           /*!< RCC PWR_LP Delay Control Register @ offset 0x44c */
  __IO uint32_t C1CIESETR;            /*!< RCC CPU1 Clock Source Interrupt Enable Set Register @ offset 0x450 */
  __IO uint32_t C1CIFCLRR;            /*!< RCC CPU1 Clock Source Interrupt Flag Clear Register @ offset 0x454 */
  __IO uint32_t C2CIESETR;            /*!< RCC CPU2 Clock Source Interrupt Enable Set Register @ offset 0x458 */
  __IO uint32_t C2CIFCLRR;            /*!< RCC CPU2 Clock Source Interrupt Flag Clear Register @ offset 0x45c */
  __IO uint32_t IWDGC1FZSETR;         /*!< RCC IWDG CPU1 Clock Freeze Set Register @ offset 0x460 */
  __IO uint32_t IWDGC1FZCLRR;         /*!< RCC IWDG CPU1 Clock Freeze Clear Register @ offset 0x464 */
  __IO uint32_t IWDGC1CFGSETR;        /*!< RCC IWDG CPU1 Configuration Set Register @ offset 0x468 */
  __IO uint32_t IWDGC1CFGCLRR;        /*!< RCC IWDG CPU1 Configuration Clear Register @ offset 0x46c */
  __IO uint32_t IWDGC2FZSETR;         /*!< RCC IWDG CPU2 Clock Freeze Set Register @ offset 0x470 */
  __IO uint32_t IWDGC2FZCLRR;         /*!< RCC IWDG CPU2 Clock Freeze Clear Register @ offset 0x474 */
  __IO uint32_t IWDGC2CFGSETR;        /*!< RCC IWDG CPU2 Configuration Set Register @ offset 0x478 */
  __IO uint32_t IWDGC2CFGCLRR;        /*!< RCC IWDG CPU2 Configuration Clear Register @ offset 0x47c */
  __IO uint32_t IWDGC3CFGSETR;        /*!< RCC IWDG CPU3 Configuration Set Register @ offset 0x480 */
  __IO uint32_t IWDGC3CFGCLRR;        /*!< RCC IWDG CPU3 Configuration Clear Register @ offset 0x484 */
  __IO uint32_t MCO1CFGR;             /*!< RCC MCO1 Configuration Register @ offset 0x488 */
  __IO uint32_t MCO2CFGR;             /*!< RCC MCO2 Configuration Register @ offset 0x48c */
  __IO uint32_t OCENSETR;             /*!< RCC Oscillator Clock Enable Set Register @ offset 0x490 */
  __IO uint32_t OCENCLRR;             /*!< RCC Oscillator Clock Enable Clear Register @ offset 0x494 */
  __IO uint32_t OCRDYR;               /*!< RCC Oscillator Clock Ready Register @ offset 0x498 */
  __IO uint32_t STBYRDCR;             /*!< RCC STBY Reset Delay Control Register @ offset 0x49c */
  __IO uint32_t HSICFGR;              /*!< RCC HSI Configuration Register @ offset 0x4a0 */
  __IO uint32_t CSICFGR;              /*!< RCC CSI Configuration Register @ offset 0x4a4 */
  __IO uint32_t SHSICR;               /*!< RCC SHSI Control Register @ offset 0x4a8 */
  __IO uint32_t RTCDIVR;              /*!< RCC RTC Clock Divider Register @ offset 0x4ac */
  __IO uint32_t APB1DIVR;             /*!< RCC APB1 Clock Divider Register @ offset 0x4b0 */
  __IO uint32_t APB2DIVR;             /*!< RCC APB2 Clock Divider Register @ offset 0x4b4 */
  __IO uint32_t APB3DIVR;             /*!< RCC APB3 Clock Divider Register @ offset 0x4b8 */
  __IO uint32_t APB4DIVR;             /*!< RCC APB4 Clock Divider Register @ offset 0x4bc */
  __IO uint32_t APBDBGDIVR;           /*!< RCC APBDBG Clock Divider Register @ offset 0x4c0 */
  __IO uint32_t TIMG1PRER;            /*!< RCC TIM Group 1 Prescaler Register @ offset 0x4c4 */
  __IO uint32_t TIMG2PRER;            /*!< RCC TIM Group 2 Prescaler Register @ offset 0x4c8 */
  __IO uint32_t LSMCUDIVR;            /*!< RCC LSMCU Clock Divider Register @ offset 0x4cc */
  __IO uint32_t DDRCP1CFGR;           /*!< RCC DDRC AXI Port 1 Configuration Register @ offset 0x4d0 */
  __IO uint32_t DDRCP2CFGR;           /*!< RCC DDRC AXI Port 2 Configuration Register @ offset 0x4d4 */
  __IO uint32_t DDRCAPBCFGR;          /*!< RCC DDRC APB Configuration Register @ offset 0x4d8 */
  __IO uint32_t DDRPHYCAPBCFGR;       /*!< RCC DDRPHYC APB Configuration Register @ offset 0x4dc */
  __IO uint32_t DDRPHYCCFGR;          /*!< RCC DDRPHYC Configuration Register @ offset 0x4e0 */
  __IO uint32_t DDRCFGR;              /*!< RCC DDR Configuration Register @ offset 0x4e4 */
  __IO uint32_t DDRITFCFGR;           /*!< RCC DDR Interface Configuration Register @ offset 0x4e8 */
  __IO uint32_t C3CFGR;               /*!< RCC CPU3 Configuration Register @ offset 0x4ec */
  __IO uint32_t SYSRAMCFGR;           /*!< RCC SYSRAM Configuration Register @ offset 0x4f0 */
  __IO uint32_t VDERAMCFGR;           /*!< RCC VDERAM Configuration Register @ offset 0x4f4 */
  __IO uint32_t SRAM1CFGR;            /*!< RCC SRAM1 Configuration Register @ offset 0x4f8 */
  __IO uint32_t SRAM2CFGR;            /*!< RCC SRAM2 Configuration Register @ offset 0x4fc */
  __IO uint32_t RETRAMCFGR;           /*!< RCC RETRAM Configuration Register @ offset 0x500 */
  __IO uint32_t BKPSRAMCFGR;          /*!< RCC BKPSRAM Configuration Register @ offset 0x504 */
  __IO uint32_t LPSRAM1CFGR;          /*!< RCC LPSRAM1 Configuration Register @ offset 0x508 */
  __IO uint32_t LPSRAM2CFGR;          /*!< RCC LPSRAM2 Configuration Register @ offset 0x50c */
  __IO uint32_t LPSRAM3CFGR;          /*!< RCC LPSRAM3 Configuration Register @ offset 0x510 */
  __IO uint32_t OSPI1CFGR;            /*!< RCC OSPI1 Configuration Register @ offset 0x514 */
  __IO uint32_t OSPI2CFGR;            /*!< RCC OSPI2 Configuration Register @ offset 0x518 */
  __IO uint32_t FMCCFGR;              /*!< RCC FMC Configuration Register @ offset 0x51c */
  __IO uint32_t DBGCFGR;              /*!< RCC Debug Configuration Register @ offset 0x520 */
  __IO uint32_t STM500CFGR;           /*!< RCC STM500 Configuration Register @ offset 0x524 */
  __IO uint32_t ETRCFGR;              /*!< RCC ETR Configuration Register @ offset 0x528 */
  __IO uint32_t GPIOACFGR;            /*!< RCC GPIOA Configuration Register @ offset 0x52c */
  __IO uint32_t GPIOBCFGR;            /*!< RCC GPIOB Configuration Register @ offset 0x530 */
  __IO uint32_t GPIOCCFGR;            /*!< RCC GPIOC Configuration Register @ offset 0x534 */
  __IO uint32_t GPIODCFGR;            /*!< RCC GPIOD Configuration Register @ offset 0x538 */
  __IO uint32_t GPIOECFGR;            /*!< RCC GPIOE Configuration Register @ offset 0x53c */
  __IO uint32_t GPIOFCFGR;            /*!< RCC GPIOF Configuration Register @ offset 0x540 */
  __IO uint32_t GPIOGCFGR;            /*!< RCC GPIOG Configuration Register @ offset 0x544 */
  __IO uint32_t GPIOHCFGR;            /*!< RCC GPIOH Configuration Register @ offset 0x548 */
  __IO uint32_t GPIOICFGR;            /*!< RCC GPIOI Configuration Register @ offset 0x54c */
  __IO uint32_t GPIOJCFGR;            /*!< RCC GPIOJ Configuration Register @ offset 0x550 */
  __IO uint32_t GPIOKCFGR;            /*!< RCC GPIOK Configuration Register @ offset 0x554 */
  __IO uint32_t GPIOZCFGR;            /*!< RCC GPIOZ Configuration Register @ offset 0x558 */
  __IO uint32_t HPDMA1CFGR;           /*!< RCC HPDMA1 Configuration Register @ offset 0x55c */
  __IO uint32_t HPDMA2CFGR;           /*!< RCC HPDMA2 Configuration Register @ offset 0x560 */
  __IO uint32_t HPDMA3CFGR;           /*!< RCC HPDMA3 Configuration Register @ offset 0x564 */
  __IO uint32_t LPDMACFGR;            /*!< RCC LPDMA Configuration Register @ offset 0x568 */
  __IO uint32_t HSEMCFGR;             /*!< RCC HSEM Configuration Register @ offset 0x56c */
  __IO uint32_t IPCC1CFGR;            /*!< RCC IPCC1 Configuration Register @ offset 0x570 */
  __IO uint32_t IPCC2CFGR;            /*!< RCC IPCC2 Configuration Register @ offset 0x574 */
  __IO uint32_t RTCCFGR;              /*!< RCC RTC Configuration Register @ offset 0x578 */
       uint32_t RESERVED3;            /*!< Reserved @ offset 0x57c */
  __IO uint32_t SYSCPU1CFGR;          /*!< RCC SYSCPU1 Configuration Register @ offset 0x580 */
  __IO uint32_t BSECCFGR;             /*!< RCC BSEC Configuration Register @ offset 0x584 */
       uint32_t RESERVED4;            /*!< Reserved @ offset 0x588 */
  __IO uint32_t IS2MCFGR;             /*!< RCC IS2M Configuration Register @ offset 0x58c */
  __IO uint32_t PLL2CFGR1;            /*!< RCC PLL{x} Configuration Register 1 @ offset 0x590 */
  __IO uint32_t PLL2CFGR2;            /*!< RCC PLL{x} Configuration Register 2 @ offset 0x594 */
  __IO uint32_t PLL2CFGR3;            /*!< RCC PLL{x} Configuration Register 3 @ offset 0x598 */
  __IO uint32_t PLL2CFGR4;            /*!< RCC PLL{x} Configuration Register 4 @ offset 0x59c */
  __IO uint32_t PLL2CFGR5;            /*!< RCC PLL{x} Configuration Register 5 @ offset 0x5a0 */
       uint32_t RESERVED5;            /*!< Reserved @ offset 0x5a4 */
  __IO uint32_t PLL2CFGR6;            /*!< RCC PLL{x} Configuration Register 6 @ offset 0x5a8 */
  __IO uint32_t PLL2CFGR7;            /*!< RCC PLL{x} Configuration Register 7 @ offset 0x5ac */
       uint32_t RESERVED6[2];         /*!< Reserved @ offset 0x5b0 */
  __IO uint32_t PLL3CFGR1;            /*!< RCC PLL{x} Configuration Register 1 @ offset 0x5b8 */
  __IO uint32_t PLL3CFGR2;            /*!< RCC PLL{x} Configuration Register 2 @ offset 0x5bc */
  __IO uint32_t PLL3CFGR3;            /*!< RCC PLL{x} Configuration Register 3 @ offset 0x5c0 */
  __IO uint32_t PLL3CFGR4;            /*!< RCC PLL{x} Configuration Register 4 @ offset 0x5c4 */
  __IO uint32_t PLL3CFGR5;            /*!< RCC PLL{x} Configuration Register 5 @ offset 0x5c8 */
       uint32_t RESERVED7;            /*!< Reserved @ offset 0x5cc */
  __IO uint32_t PLL3CFGR6;            /*!< RCC PLL{x} Configuration Register 6 @ offset 0x5d0 */
  __IO uint32_t PLL3CFGR7;            /*!< RCC PLL{x} Configuration Register 7 @ offset 0x5d4 */
       uint32_t RESERVED8[74];        /*!< Reserved @ offset 0x5d8 */
  __IO uint32_t TIM1CFGR;             /*!< RCC TIM1 Configuration Register @ offset 0x700 */
  __IO uint32_t TIM2CFGR;             /*!< RCC TIM2 Configuration Register @ offset 0x704 */
  __IO uint32_t TIM3CFGR;             /*!< RCC TIM3 Configuration Register @ offset 0x708 */
  __IO uint32_t TIM4CFGR;             /*!< RCC TIM4 Configuration Register @ offset 0x70c */
  __IO uint32_t TIM5CFGR;             /*!< RCC TIM5 Configuration Register @ offset 0x710 */
  __IO uint32_t TIM6CFGR;             /*!< RCC TIM6 Configuration Register @ offset 0x714 */
  __IO uint32_t TIM7CFGR;             /*!< RCC TIM7 Configuration Register @ offset 0x718 */
  __IO uint32_t TIM8CFGR;             /*!< RCC TIM8 Configuration Register @ offset 0x71c */
  __IO uint32_t TIM10CFGR;            /*!< RCC TIM10 Configuration Register @ offset 0x720 */
  __IO uint32_t TIM11CFGR;            /*!< RCC TIM11 Configuration Register @ offset 0x724 */
  __IO uint32_t TIM12CFGR;            /*!< RCC TIM12 Configuration Register @ offset 0x728 */
  __IO uint32_t TIM13CFGR;            /*!< RCC TIM13 Configuration Register @ offset 0x72c */
  __IO uint32_t TIM14CFGR;            /*!< RCC TIM14 Configuration Register @ offset 0x730 */
  __IO uint32_t TIM15CFGR;            /*!< RCC TIM15 Configuration Register @ offset 0x734 */
  __IO uint32_t TIM16CFGR;            /*!< RCC TIM16 Configuration Register @ offset 0x738 */
  __IO uint32_t TIM17CFGR;            /*!< RCC TIM17 Configuration Register @ offset 0x73c */
  __IO uint32_t TIM20CFGR;            /*!< RCC TIM20 Configuration Register @ offset 0x740 */
  __IO uint32_t LPTIM1CFGR;           /*!< RCC LPTIM1 Configuration Register @ offset 0x744 */
  __IO uint32_t LPTIM2CFGR;           /*!< RCC LPTIM2 Configuration Register @ offset 0x748 */
  __IO uint32_t LPTIM3CFGR;           /*!< RCC LPTIM3 Configuration Register @ offset 0x74c */
  __IO uint32_t LPTIM4CFGR;           /*!< RCC LPTIM4 Configuration Register @ offset 0x750 */
  __IO uint32_t LPTIM5CFGR;           /*!< RCC LPTIM5 Configuration Register @ offset 0x754 */
  __IO uint32_t SPI1CFGR;             /*!< RCC SPI1 Configuration Register @ offset 0x758 */
  __IO uint32_t SPI2CFGR;             /*!< RCC SPI2 Configuration Register @ offset 0x75c */
  __IO uint32_t SPI3CFGR;             /*!< RCC SPI3 Configuration Register @ offset 0x760 */
  __IO uint32_t SPI4CFGR;             /*!< RCC SPI4 Configuration Register @ offset 0x764 */
  __IO uint32_t SPI5CFGR;             /*!< RCC SPI5 Configuration Register @ offset 0x768 */
  __IO uint32_t SPI6CFGR;             /*!< RCC SPI6 Configuration Register @ offset 0x76c */
  __IO uint32_t SPI7CFGR;             /*!< RCC SPI7 Configuration Register @ offset 0x770 */
  __IO uint32_t SPI8CFGR;             /*!< RCC SPI8 Configuration Register @ offset 0x774 */
  __IO uint32_t SPDIFRXCFGR;          /*!< RCC SPDIFRX Configuration Register @ offset 0x778 */
  __IO uint32_t USART1CFGR;           /*!< RCC USART1 Configuration Register @ offset 0x77c */
  __IO uint32_t USART2CFGR;           /*!< RCC USART2 Configuration Register @ offset 0x780 */
  __IO uint32_t USART3CFGR;           /*!< RCC USART3 Configuration Register @ offset 0x784 */
  __IO uint32_t UART4CFGR;            /*!< RCC UART4 Configuration Register @ offset 0x788 */
  __IO uint32_t UART5CFGR;            /*!< RCC UART5 Configuration Register @ offset 0x78c */
  __IO uint32_t USART6CFGR;           /*!< RCC USART6 Configuration Register @ offset 0x790 */
  __IO uint32_t UART7CFGR;            /*!< RCC UART7 Configuration Register @ offset 0x794 */
  __IO uint32_t UART8CFGR;            /*!< RCC UART8 Configuration Register @ offset 0x798 */
  __IO uint32_t UART9CFGR;            /*!< RCC UART9 Configuration Register @ offset 0x79c */
  __IO uint32_t LPUART1CFGR;          /*!< RCC LPUART1 Configuration Register @ offset 0x7a0 */
  __IO uint32_t I2C1CFGR;             /*!< RCC I2C1 Configuration Register @ offset 0x7a4 */
  __IO uint32_t I2C2CFGR;             /*!< RCC I2C2 Configuration Register @ offset 0x7a8 */
  __IO uint32_t I2C3CFGR;             /*!< RCC I2C3 Configuration Register @ offset 0x7ac */
  __IO uint32_t I2C4CFGR;             /*!< RCC I2C4 Configuration Register @ offset 0x7b0 */
  __IO uint32_t I2C5CFGR;             /*!< RCC I2C5 Configuration Register @ offset 0x7b4 */
  __IO uint32_t I2C6CFGR;             /*!< RCC I2C6 Configuration Register @ offset 0x7b8 */
  __IO uint32_t I2C7CFGR;             /*!< RCC I2C7 Configuration Register @ offset 0x7bc */
  __IO uint32_t I2C8CFGR;             /*!< RCC I2C8 Configuration Register @ offset 0x7c0 */
  __IO uint32_t SAI1CFGR;             /*!< RCC SAI1 Configuration Register @ offset 0x7c4 */
  __IO uint32_t SAI2CFGR;             /*!< RCC SAI2 Configuration Register @ offset 0x7c8 */
  __IO uint32_t SAI3CFGR;             /*!< RCC SAI3 Configuration Register @ offset 0x7cc */
  __IO uint32_t SAI4CFGR;             /*!< RCC SAI4 Configuration Register @ offset 0x7d0 */
       uint32_t RESERVED9;            /*!< Reserved @ offset 0x7d4 */
  __IO uint32_t MDF1CFGR;             /*!< RCC MDF1 Configuration Register @ offset 0x7d8 */
  __IO uint32_t MDF2CFGR;             /*!< RCC MDF2 Configuration Register @ offset 0x7dc */
  __IO uint32_t FDCANCFGR;            /*!< RCC FDCAN Configuration Register @ offset 0x7e0 */
  __IO uint32_t HDPCFGR;              /*!< RCC HDP Configuration Register @ offset 0x7e4 */
  __IO uint32_t ADC12CFGR;            /*!< RCC ADC12 Configuration Register @ offset 0x7e8 */
  __IO uint32_t ADC3CFGR;             /*!< RCC ADC3 Configuration Register @ offset 0x7ec */
  __IO uint32_t ETH1CFGR;             /*!< RCC Ethernet 1 Configuration Register @ offset 0x7f0 */
  __IO uint32_t ETH2CFGR;             /*!< RCC Ethernet 2 Configuration Register @ offset 0x7f4 */
  __IO uint32_t ETHSWCFGR;            /*!< RCC Ethernet switch Configuration Register @ offset 0x7f8 */
  __IO uint32_t USB2CFGR;             /*!< RCC USB2 Configuration Register @ offset 0x7fc */
  __IO uint32_t USB2PHY1CFGR;         /*!< RCC USB2PHY1 Configuration Register @ offset 0x800 */
  __IO uint32_t USB2PHY2CFGR;         /*!< RCC USB2PHY2 Configuration Register @ offset 0x804 */
  __IO uint32_t USB3DRDCFGR;          /*!< RCC USB3DRD Configuration Register @ offset 0x808 */
  __IO uint32_t USB3PCIEPHYCFGR;      /*!< RCC USB3PCIEPHY Configuration Register @ offset 0x80c */
  __IO uint32_t PCIECFGR;             /*!< RCC PCIE Configuration Register @ offset 0x810 */
  __IO uint32_t USBTCCFGR;            /*!< RCC USBTC Configuration Register @ offset 0x814 */
       uint32_t RESERVED10[2];        /*!< Reserved @ offset 0x818 */
  __IO uint32_t STGENCFGR;            /*!< RCC STGEN Configuration Register @ offset 0x820 */
       uint32_t RESERVED11[3];        /*!< Reserved @ offset 0x824 */
  __IO uint32_t SDMMC1CFGR;           /*!< RCC SDMMC1 Configuration Register @ offset 0x830 */
  __IO uint32_t SDMMC2CFGR;           /*!< RCC SDMMC2 Configuration Register @ offset 0x834 */
  __IO uint32_t SDMMC3CFGR;           /*!< RCC SDMMC3 Configuration Register @ offset 0x838 */
  __IO uint32_t GPUCFGR;              /*!< RCC GPU Configuration Register @ offset 0x83c */
  __IO uint32_t LTDCCFGR;             /*!< RCC LTDC Configuration Register @ offset 0x840 */
  __IO uint32_t DSICFGR;              /*!< RCC DSI Configuration Register @ offset 0x844 */
       uint32_t RESERVED12[2];        /*!< Reserved @ offset 0x848 */
  __IO uint32_t LDITCFGR;             /*!< RCC LDIT Configuration Register @ offset 0x850 */
       uint32_t RESERVED13;           /*!< Reserved @ offset 0x854 */
  __IO uint32_t CSI2CFGR;             /*!< RCC CSI2 Configuration Register @ offset 0x858 */
  __IO uint32_t DCMIPPCFGR;           /*!< RCC DCMIPP Configuration Register @ offset 0x85c */
  __IO uint32_t CCICFGR;              /*!< RCC CCI Configuration Register @ offset 0x860 */
  __IO uint32_t VDECCFGR;             /*!< RCC VDEC Configuration Register @ offset 0x864 */
  __IO uint32_t VENCCFGR;             /*!< RCC VENC Configuration Register @ offset 0x868 */
       uint32_t RESERVED14;           /*!< Reserved @ offset 0x86c */
  __IO uint32_t RNGCFGR;              /*!< RCC RNG Configuration Register @ offset 0x870 */
  __IO uint32_t PKACFGR;              /*!< RCC PKA Configuration Register @ offset 0x874 */
  __IO uint32_t SAESCFGR;             /*!< RCC SAES Configuration Register @ offset 0x878 */
  __IO uint32_t HASHCFGR;             /*!< RCC HASH Configuration Register @ offset 0x87c */
  __IO uint32_t CRYP1CFGR;            /*!< RCC CRYP1 Configuration Register @ offset 0x880 */
  __IO uint32_t CRYP2CFGR;            /*!< RCC CRYP2 Configuration Register @ offset 0x884 */
  __IO uint32_t IWDG1CFGR;            /*!< RCC IWDG1 Configuration Register @ offset 0x888 */
  __IO uint32_t IWDG2CFGR;            /*!< RCC IWDG2 Configuration Register @ offset 0x88c */
  __IO uint32_t IWDG3CFGR;            /*!< RCC IWDG3 Configuration Register @ offset 0x890 */
  __IO uint32_t IWDG4CFGR;            /*!< RCC IWDG4 Configuration Register @ offset 0x894 */
  __IO uint32_t IWDG5CFGR;            /*!< RCC IWDG5 Configuration Register @ offset 0x898 */
  __IO uint32_t WWDG1CFGR;            /*!< RCC WWDG1 Configuration Register @ offset 0x89c */
  __IO uint32_t WWDG2CFGR;            /*!< RCC WWDG2 Configuration Register @ offset 0x8a0 */
  __IO uint32_t BUSPERFMCFGR;         /*!< RCC BUSPERFM Configuration Register @ offset 0x8a4 */
  __IO uint32_t VREFCFGR;             /*!< RCC VREF Configuration Register @ offset 0x8a8 */
  __IO uint32_t TMPSENSCFGR;          /*!< RCC TMPSENS Configuration Register @ offset 0x8ac */
       uint32_t RESERVED15;           /*!< Reserved @ offset 0x8b0 */
  __IO uint32_t CRCCFGR;              /*!< RCC CRC Configuration Register @ offset 0x8b4 */
  __IO uint32_t SERCCFGR;             /*!< RCC SERC Configuration Register @ offset 0x8b8 */
  __IO uint32_t OSPIIOMCFGR;          /*!< RCC OCTOSPI IOMANAGER Configuration Register @ offset 0x8bc */
  __IO uint32_t GICV2MCFGR;           /*!< RCC GICV2M Configuration Register @ offset 0x8c0 */
       uint32_t RESERVED16;           /*!< Reserved @ offset 0x8c4 */
  __IO uint32_t I3C1CFGR;             /*!< RCC I3C1 Configuration Register @ offset 0x8c8 */
  __IO uint32_t I3C2CFGR;             /*!< RCC I3C2 Configuration Register @ offset 0x8cc */
  __IO uint32_t I3C3CFGR;             /*!< RCC I3C3 Configuration Register @ offset 0x8d0 */
  __IO uint32_t I3C4CFGR;             /*!< RCC I3C4 Configuration Register @ offset 0x8d4 */
       uint32_t RESERVED17[458];      /*!< Reserved @ offset 0x8d8 */
  __IO uint32_t MUXSELCFGR;           /*!< RCC MUXSEL Configuration Register @ offset 0x1000 */
       uint32_t RESERVED18[5];        /*!< Reserved @ offset 0x1004 */
  __IO uint32_t XBARxCFGR[64];        /*!< RCC Cross Bar 0 Configuration Register @ offset 0x1018 */
  __IO uint32_t PREDIVxCFGR[64];      /*!< RCC Pre Divider 0 Configuration Register @ offset 0x1118 */
  __IO uint32_t PREDIVSR1;            /*!< RCC Pre Divider Status Register 1 @ offset 0x1218 */
  __IO uint32_t PREDIVSR2;            /*!< RCC Pre Divider Status Register 2 @ offset 0x121c */
       uint32_t RESERVED19;           /*!< Reserved @ offset 0x1220 */
  __IO uint32_t FINDIVxCFGR[64];      /*!< RCC Final Divider 0 Configuration Register @ offset 0x1224 */
  __IO uint32_t FINDIVSR1;            /*!< RCC Final Divider Status Register 1 @ offset 0x1324 */
  __IO uint32_t FINDIVSR2;            /*!< RCC Final Divider Status Register 2 @ offset 0x1328 */
       uint32_t RESERVED20[5];        /*!< Reserved @ offset 0x132c */
  __IO uint32_t FCALCOBS0CFGR;        /*!< RCC Clock Frequency Calculator and Observation 0 Clock Configuration Register @ offset 0x1340 */
  __IO uint32_t FCALCOBS1CFGR;        /*!< RCC Clock Frequency Calculator and Observation 1 clock Configuration Register @ offset 0x1344 */
  __IO uint32_t FCALCREFCFGR;         /*!< RCC Clock Frequency Calculator Reference clock Configuration Register @ offset 0x1348 */
  __IO uint32_t FCALCCR1;             /*!< RCC Clock Frequency Calculator Control Register 1 @ offset 0x134c */
       uint32_t RESERVED21;           /*!< Reserved @ offset 0x1350 */
  __IO uint32_t FCALCCR2;             /*!< RCC Clock Frequency Calculator Control Register 2 @ offset 0x1354 */
  __IO uint32_t FCALCSR;              /*!< RCC Clock Frequency Calculator Status Register @ offset 0x1358 */
       uint32_t RESERVED22;           /*!< Reserved @ offset 0x135c */
  __IO uint32_t PLL4CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x1360 */
  __IO uint32_t PLL4CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x1364 */
  __IO uint32_t PLL4CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x1368 */
  __IO uint32_t PLL4CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x136c */
  __IO uint32_t PLL4CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x1370 */
       uint32_t RESERVED23;           /*!< Reserved @ offset 0x1374 */
  __IO uint32_t PLL4CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x1378 */
  __IO uint32_t PLL4CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x137c */
       uint32_t RESERVED24[2];        /*!< Reserved @ offset 0x1380 */
  __IO uint32_t PLL5CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x1388 */
  __IO uint32_t PLL5CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x138c */
  __IO uint32_t PLL5CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x1390 */
  __IO uint32_t PLL5CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x1394 */
  __IO uint32_t PLL5CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x1398 */
       uint32_t RESERVED25;           /*!< Reserved @ offset 0x139c */
  __IO uint32_t PLL5CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x13a0 */
  __IO uint32_t PLL5CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x13a4 */
       uint32_t RESERVED26[2];        /*!< Reserved @ offset 0x13a8 */
  __IO uint32_t PLL6CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x13b0 */
  __IO uint32_t PLL6CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x13b4 */
  __IO uint32_t PLL6CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x13b8 */
  __IO uint32_t PLL6CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x13bc */
  __IO uint32_t PLL6CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x13c0 */
       uint32_t RESERVED27;           /*!< Reserved @ offset 0x13c4 */
  __IO uint32_t PLL6CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x13c8 */
  __IO uint32_t PLL6CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x13cc */
       uint32_t RESERVED28[2];        /*!< Reserved @ offset 0x13d0 */
  __IO uint32_t PLL7CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x13d8 */
  __IO uint32_t PLL7CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x13dc */
  __IO uint32_t PLL7CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x13e0 */
  __IO uint32_t PLL7CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x13e4 */
  __IO uint32_t PLL7CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x13e8 */
       uint32_t RESERVED29;           /*!< Reserved @ offset 0x13ec */
  __IO uint32_t PLL7CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x13f0 */
  __IO uint32_t PLL7CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x13f4 */
       uint32_t RESERVED30[2];        /*!< Reserved @ offset 0x13f8 */
  __IO uint32_t PLL8CFGR1;            /*!< RCC PLL{y} Configuration Register 1 @ offset 0x1400 */
  __IO uint32_t PLL8CFGR2;            /*!< RCC PLL{y} Configuration Register 2 @ offset 0x1404 */
  __IO uint32_t PLL8CFGR3;            /*!< RCC PLL{y} Configuration Register 3 @ offset 0x1408 */
  __IO uint32_t PLL8CFGR4;            /*!< RCC PLL{y} Configuration Register 4 @ offset 0x140c */
  __IO uint32_t PLL8CFGR5;            /*!< RCC PLL{y} Configuration Register 5 @ offset 0x1410 */
       uint32_t RESERVED31;           /*!< Reserved @ offset 0x1414 */
  __IO uint32_t PLL8CFGR6;            /*!< RCC PLL{y} Configuration Register 6 @ offset 0x1418 */
  __IO uint32_t PLL8CFGR7;            /*!< RCC PLL{y} Configuration Register 7 @ offset 0x141c */
       uint32_t RESERVED32[15093];    /*!< Reserved @ offset 0x1420 */
  __IO uint32_t VERR;                 /*!< RCC Version register @ offset 0xfff4 */
  __IO uint32_t IDR;                  /*!< RCC ID register @ offset 0xfff8 */
  __IO uint32_t SIDR;                 /*!< RCC Size ID register @ offset 0xfffc */
} RCC_TypeDef;
#endif /* else STM32MP2XX_ASSY2_2_1 */

/**
  * @brief RISC Resource Isolation Slave Controller Compartment (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t CIDCFGR;        /*!< RISC CID configuration register for peripheral x */
  __IO uint32_t SEMCR;          /*!< RISC Semaphore control register for peripheral x */
} RISC_Comp_TypeDef;

#if defined(STM32MP2XX_ASSY2_2_1)
/**
  * @brief RISC Resource Isolation Slave Controller Peripheral (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t          CR;             /*!< RISC Control register,                                           Address offset: 0x000 */
       uint32_t          RESERVED1[3];   /*!< Reserved,                                                                  0x004-0x00C */
  __IO uint32_t          SECCFGR[6];     /*!< RISC Security configuration register x,                                    0x010-0x024 */
       uint32_t          RESERVED2[2];   /*!< Reserved,                                                                  0x028-0x02C */
  __IO uint32_t          PRIVCFGR[6];    /*!< RISC Privileged configuration register x,                                  0x030-0x044 */
       uint32_t          RESERVED3[2];   /*!< Reserved,                                                                  0x048-0x04C */
  __IO uint32_t          RCFGLOCK[6];    /*!< RISC Resource configuration lock register x,                               0x050-0x064 */
       uint32_t          RESERVED4[38];  /*!< Reserved,                                                                  0x068-0x0FC */
       RISC_Comp_TypeDef PER[192];       /*!< RISC Compartment configuration for peripheral x                            0x100-0x6FC */
       uint32_t          RESERVED5[128]; /*!< Reserved,                                                                  0x700-0x8FC */
  __IO uint32_t          REG1ACFGR;      /*!< RISAL Region 1 subregion A configuration register,               Address offset: 0x900 */
  __IO uint32_t          RESERVED6[1];   /*!< Reserved,                                                        Address offset: 0x904 */
  __IO uint32_t          REG1BCFGR;      /*!< RISAL Region 1 subregion B configuration register,               Address offset: 0x908 */
  __IO uint32_t          RESERVED7[1];   /*!< Reserved,                                                        Address offset: 0x90C */
  __IO uint32_t          REG2ACFGR;      /*!< RISAL Region 2 subregion A configuration register,               Address offset: 0x910 */
  __IO uint32_t          RESERVED8[1];   /*!< Reserved,                                                        Address offset: 0x914 */
  __IO uint32_t          REG2BCFGR;      /*!< RISAL Region 2 subregion B configuration register,               Address offset: 0x918 */
  __IO uint32_t          RESERVED9[1];   /*!< Reserved,                                                        Address offset: 0x91C */
  __IO uint32_t          REG3ACFGR;      /*!< RISAL Region 3 subregion A configuration register,               Address offset: 0x920 */
  __IO uint32_t          REG3AADDR;      /*!< RISAL Region 3 subregion A address register,                     Address offset: 0x924 */
  __IO uint32_t          REG3BCFGR;      /*!< RISAL Region 3 subregion B configuration register,               Address offset: 0x928 */
  __IO uint32_t          REG3BADDR;      /*!< RISAL Region 3 subregion B address register,                     Address offset: 0x92C */
} RISC_TypeDef;
#else
/**
  * @brief RISC Resource Isolation Slave Controller Peripheral (RIF User Spec Rev 1.0.13-ASSY2.3)
  */
typedef struct
{
  __IO uint32_t          CR;             /*!< RISC Control register,                                           Address offset: 0x000 */
       uint32_t          RESERVED1[3];   /*!< Reserved,                                                                  0x004-0x00C */
  __IO uint32_t          SECCFGR[6];     /*!< RISC Security configuration register x,                                    0x010-0x024 */
       uint32_t          RESERVED2[2];   /*!< Reserved,                                                                  0x028-0x02C */
  __IO uint32_t          PRIVCFGR[6];    /*!< RISC Privileged configuration register x,                                  0x030-0x044 */
       uint32_t          RESERVED3[2];   /*!< Reserved,                                                                  0x048-0x04C */
  __IO uint32_t          RIFLOCKR[6];    /*!< RISC Resource configuration lock register x,                               0x050-0x064 */
       uint32_t          RESERVED4[38];  /*!< Reserved,                                                                  0x068-0x0FC */
       RISC_Comp_TypeDef PER[192];       /*!< RISC Compartment configuration for peripheral x                            0x100-0x6FC */
       uint32_t          RESERVED5[128]; /*!< Reserved,                                                                  0x700-0x8FC */
  __IO uint32_t          REG1ACFGR;      /*!< RISAL Region 1 subregion A configuration register,               Address offset: 0x900 */
  __IO uint32_t          RESERVED6[1];   /*!< Reserved,                                                        Address offset: 0x904 */
  __IO uint32_t          REG1BCFGR;      /*!< RISAL Region 1 subregion B configuration register,               Address offset: 0x908 */
  __IO uint32_t          RESERVED7[1];   /*!< Reserved,                                                        Address offset: 0x90C */
  __IO uint32_t          REG2ACFGR;      /*!< RISAL Region 2 subregion A configuration register,               Address offset: 0x910 */
  __IO uint32_t          RESERVED8[1];   /*!< Reserved,                                                        Address offset: 0x914 */
  __IO uint32_t          REG2BCFGR;      /*!< RISAL Region 2 subregion B configuration register,               Address offset: 0x918 */
  __IO uint32_t          RESERVED9[1];   /*!< Reserved,                                                        Address offset: 0x91C */
  __IO uint32_t          REG3ACFGR;      /*!< RISAL Region 3 subregion A configuration register,               Address offset: 0x920 */
  __IO uint32_t          REG3AADDR;      /*!< RISAL Region 3 subregion A address register,                     Address offset: 0x924 */
  __IO uint32_t          REG3BCFGR;      /*!< RISAL Region 3 subregion B configuration register,               Address offset: 0x928 */
  __IO uint32_t          REG3BADDR;      /*!< RISAL Region 3 subregion B address register,                     Address offset: 0x92C */
} RISC_TypeDef;
#endif

/**
  * @brief RIMC Resource Isolation Master Controller (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t CR;            /*!< RIMC Configuration register,         Address offset: 0xC00 */
  __IO uint32_t SR;            /*!< RIMC Status register,                Address offset: 0xC04 */
       uint32_t RESERVED1[2];  /*!< Reserved,                                      0xC08-0xC0C */
  __IO uint32_t ATTR[16];      /*!< RIMC Attribute register x,                     0xC10-0xC4C */
} RIMC_TypeDef;

/**
  * @brief RIFSC Resource Isolation Framework Security Controller ID Registers (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t             HWCFGR3;        /*!< RIFSC HW configuration register 1,   Address offset: 0xFE8 */
  __IO uint32_t             HWCFGR2;        /*!< RIFSC HW configuration register 2,   Address offset: 0xFEC */
  __IO uint32_t             HWCFGR1;        /*!< RIFSC HW configuration register 3,   Address offset: 0xFF0 */
  __IO uint32_t             VERR;           /*!< RIFSC Version register,              Address offset: 0xFF4 */
  __IO uint32_t             IPIDR;          /*!< RIFSC Identification register,       Address offset: 0xFF8 */
  __IO uint32_t             SIDR;           /*!< RIFSC Size ID register,              Address offset: 0xFFC */
} RIFSC_ID_TypeDef;

/**
  * @brief RISAB Resource Isolation Slave Unit for Address Space Protection (block-based) Page Compartment (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t PRIVCFGR;      /*!< RISAB Compartment privilege configuration register */
       uint32_t RESERVED1[1];  /*!< Reserved                                           */
  __IO uint32_t RDCFGR;        /*!< RISAB Compartment read configuration register      */
       uint32_t RESERVED2[1];  /*!< Reserved                                           */
  __IO uint32_t WRCFGR;        /*!< RISAB Compartment write configuration register     */
       uint32_t RESERVED3[3];  /*!< Reserved                                           */
} RISAB_PageComp_TypeDef;

#if defined(STM32MP2XX_ASSY2_2_1)
/**
  * @brief RISAB Resource Isolation Slave Unit for Address Space Protection (block-based) Compartment (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t CIDCFGR;       /*!< RISAB CID configuration register for page x */
  __IO uint32_t SEMCR;         /*!< RISAB Semaphore control register for page x */
} RISAB_Comp_TypeDef;

/**
  * @brief RISAB Resource Isolation Slave Unit for Address Space Protection (block-based) (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t               CR;             /*!< RISAB Configuration register,                                      Address offset: 0x000 */
       uint32_t               RESERVED1[1];   /*!< Reserved,                                                                          0x004 */
  __IO uint32_t               IASR;           /*!< RISAB Illegal access status register,                              Address offset: 0x008 */
  __IO uint32_t               IACR;           /*!< RISAB Illegal access clear register,                               Address offset: 0x00C */
  __IO uint32_t               RCFGLOCK;       /*!< RISAB Security configuration lock register,                        Address offset: 0x010 */
       uint32_t               RESERVED2[3];   /*!< Reserved,                                                                    0x014-0x01C */
  __IO uint32_t               IAESR;          /*!< RISAB Illegal access error status register,                        Address offset: 0x020 */
  __IO uint32_t               IADDR;          /*!< RISAB Illegal address register,                                    Address offset: 0x024 */
       uint32_t               RESERVED3[54];  /*!< Reserved,                                                                    0x028-0x0FC */
  __IO uint32_t               PGSECCFGR[32];  /*!< RISAB Page x Security configuration register,                                0x100-0x17C */
       uint32_t               RESERVED4[32];  /*!< Reserved,                                                                    0x180-0x1FC */
  __IO uint32_t               PGPRIVCFGR[32]; /*!< RISAB Page x Privileged configuration register,                              0x200-0x27C */
       uint32_t               RESERVED5[224]; /*!< Reserved,                                                                    0x280-0x5FC */
  __IO uint32_t               PGC2PRIVCFGR[32]; /*!< RISAB Page x privileged configuration register for compartment 2,          0x600-0x67C */
       uint32_t               RESERVED6[96];  /*!< Reserved,                                                                    0x680-0x7FC */
       RISAB_PageComp_TypeDef CID[8];         /*!< RISAB Compartment x privilege configuration register,                        0x800-0x8FC */
       uint32_t               RESERVED8[64];  /*!< Reserved,                                                                    0x900-0x9FC */
       RISAB_Comp_TypeDef     PG[32];         /*!< RISAB Compartment configuration for page x,                                  0xA00-0xAFC */
       uint32_t               RESERVED9[314]; /*!< Reserved,                                                                    0xB00-0xFE4 */
  __IO uint32_t               HWCFGR3;        /*!< RISAB HW configuration register 3,                                 Address offset: 0xFE8 */
  __IO uint32_t               HWCFGR2;        /*!< RISAB HW configuration register 2,                                 Address offset: 0xFEC */
  __IO uint32_t               HWCFGR1;        /*!< RISAB HW configuration register 1,                                 Address offset: 0xFF0 */
  __IO uint32_t               VERR;           /*!< RISAB Version register,                                            Address offset: 0xFF4 */
  __IO uint32_t               IPIDR;          /*!< RISAB Identification register,                                     Address offset: 0xFF8 */
  __IO uint32_t               SIDR;           /*!< RISAB Size ID register,                                            Address offset: 0xFFC */
} RISAB_TypeDef;
#else
/**
  * @brief RISAB Resource Isolation Slave Unit for Address Space Protection (block-based) Compartment (RIF User Spec Rev 1.0.13-ASSY2.3)
  */
typedef struct
{
  __IO uint32_t CIDCFGR;       /*!< RISAB CID configuration register for page x */
  __IO uint32_t RESERVED1;     /*!< Reserved */
} RISAB_Comp_TypeDef;

/**
  * @brief RISAB Resource Isolation Slave Unit for Address Space Protection (block-based) (RIF User Spec Rev 1.0.13-ASSY2.3)
  */
typedef struct
{
  __IO uint32_t               CR;             /*!< RISAB Configuration register,                                      Address offset: 0x000 */
       uint32_t               RESERVED1[1];   /*!< Reserved,                                                                          0x004 */
  __IO uint32_t               IASR;           /*!< RISAB Illegal access status register,                              Address offset: 0x008 */
  __IO uint32_t               IACR;           /*!< RISAB Illegal access clear register,                               Address offset: 0x00C */
  __IO uint32_t               RIFLOCKR;       /*!< RISAB RIF configuration lock register,                             Address offset: 0x010 */
       uint32_t               RESERVED2[3];   /*!< Reserved,                                                                    0x014-0x01C */
  __IO uint32_t               IAESR;          /*!< RISAB Illegal access error status register,                        Address offset: 0x020 */
  __IO uint32_t               IADDR;          /*!< RISAB Illegal address register,                                    Address offset: 0x024 */
       uint32_t               RESERVED3[54];  /*!< Reserved,                                                                    0x028-0x0FC */
  __IO uint32_t               PGSECCFGR[32];  /*!< RISAB Page x Security configuration register,                                0x100-0x17C */
       uint32_t               RESERVED4[32];  /*!< Reserved,                                                                    0x180-0x1FC */
  __IO uint32_t               PGPRIVCFGR[32]; /*!< RISAB Page x Privileged configuration register,                              0x200-0x27C */
       uint32_t               RESERVED5[224]; /*!< Reserved,                                                                    0x280-0x5FC */
  __IO uint32_t               PGC2PRIVCFGR[32]; /*!< RISAB Page x privileged configuration register for compartment 2,          0x600-0x67C */
       uint32_t               RESERVED6[96];  /*!< Reserved,                                                                    0x680-0x7FC */
       RISAB_PageComp_TypeDef CID[7];         /*!< RISAB Compartment x privilege configuration register,                        0x800-0x8DC */
       uint32_t               RESERVED8[72];  /*!< Reserved,                                                                    0x8E0-0x9FC */
       RISAB_Comp_TypeDef     PG[32];         /*!< RISAB Compartment configuration for page x,                                  0xA00-0xAFC */
       uint32_t               RESERVED9[314]; /*!< Reserved,                                                                    0xB00-0xFE4 */
  __IO uint32_t               HWCFGR3;        /*!< RISAB HW configuration register 3,                                 Address offset: 0xFE8 */
  __IO uint32_t               HWCFGR2;        /*!< RISAB HW configuration register 2,                                 Address offset: 0xFEC */
  __IO uint32_t               HWCFGR1;        /*!< RISAB HW configuration register 1,                                 Address offset: 0xFF0 */
  __IO uint32_t               VERR;           /*!< RISAB Version register,                                            Address offset: 0xFF4 */
  __IO uint32_t               IPIDR;          /*!< RISAB Identification register,                                     Address offset: 0xFF8 */
  __IO uint32_t               SIDR;           /*!< RISAB Size ID register,                                            Address offset: 0xFFC */
} RISAB_TypeDef;
#endif

/**
  * @brief RISAF Resource Isolation Slave Unit for Address Space Protection (full version) Region (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t CFGR;          /*!< RISAF Region x configuration register             */
  __IO uint32_t STARTR;        /*!< RISAF Region x start address register             */
  __IO uint32_t ENDR;          /*!< RISAF Region x end address register               */
  __IO uint32_t CIDCFGR;       /*!< RISAF Region x CID configuration register         */
  __IO uint32_t ACFGR;         /*!< RISAF Region x subregion A configuration register */
  __IO uint32_t ASTARTR;       /*!< RISAF Region x subregion A start address register */
  __IO uint32_t AENDR;         /*!< RISAF Region x subregion A end address register   */
  __IO uint32_t ANESTR;        /*!< RISAF Region x subregion A nested mode register   */
  __IO uint32_t BCFGR;         /*!< RISAF Region x subregion B configuration register */
  __IO uint32_t BSTARTR;       /*!< RISAF Region x subregion B start address register */
  __IO uint32_t BENDR;         /*!< RISAF Region x subregion B end address register   */
  __IO uint32_t BNESTR;        /*!< RISAF Region x subregion B nested mode register   */
} RISAF_Region_TypeDef;

#if defined(STM32MP2XX_ASSY2_2_1)
/**
  * @brief RISAF Resource Isolation Slave Unit for Address Space Protection (full version) (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t              CR;             /*!< RISAF Configuration register,                                      Address offset: 0x000 */
  __IO uint32_t              SR;             /*!< RISAF Status register,                                             Address offset: 0x004 */
  __IO uint32_t              IASR;           /*!< RISAF Illegal access status register,                              Address offset: 0x008 */
  __IO uint32_t              IACR;           /*!< RISAF Illegal access clear register,                               Address offset: 0x00C */
       uint32_t              RESERVED0[4];   /*!< Reserved,                                                                    0x010-0x01C */
  __IO uint32_t              IAESR0;         /*!< RISAF Illegal access error status register 0,                      Address offset: 0x020 */
  __IO uint32_t              IADDR0;         /*!< RISAF Illegal address register 0,                                  Address offset: 0x024 */
  __IO uint32_t              IAESR1;         /*!< RISAF Illegal access error status register 1,                      Address offset: 0x028 */
  __IO uint32_t              IADDR1;         /*!< RISAF Illegal address register 1,                                  Address offset: 0x02C */
  __IO uint32_t              KEYR[4];        /*!< RISAF Encryption key register x,                                             0x030-0x03C */
       RISAF_Region_TypeDef  REG1;           /*!< RISAF Region 1 configuration register,                                       0x040-0x06C */
       uint32_t              RESERVED1[4];   /*!< Reserved,                                                                    0x070-0x07C */
       RISAF_Region_TypeDef  REG2;           /*!< RISAF Region 2 configuration register,                                       0x080-0x0AC */
       uint32_t              RESERVED2[4];   /*!< Reserved,                                                                    0x0B0-0x0BC */
       RISAF_Region_TypeDef  REG3;           /*!< RISAF Region 3 configuration register,                                       0x0C0-0x0EC */
       uint32_t              RESERVED3[4];   /*!< Reserved,                                                                    0x0F0-0x0FC */
       RISAF_Region_TypeDef  REG4;           /*!< RISAF Region 4 configuration register,                                       0x100-0x12C */
       uint32_t              RESERVED4[4];   /*!< Reserved,                                                                    0x130-0x13C */
       RISAF_Region_TypeDef  REG5;           /*!< RISAF Region 5 configuration register,                                       0x140-0x16C */
       uint32_t              RESERVED5[4];   /*!< Reserved,                                                                    0x170-0x17C */
       RISAF_Region_TypeDef  REG6;           /*!< RISAF Region 6 configuration register,                                       0x180-0x1AC */
       uint32_t              RESERVED6[4];   /*!< Reserved,                                                                    0x1B0-0x1BC */
       RISAF_Region_TypeDef  REG7;           /*!< RISAF Region 7 configuration register,                                       0x1C0-0x1EC */
       uint32_t              RESERVED7[4];   /*!< Reserved,                                                                    0x1F0-0x1FC */
       RISAF_Region_TypeDef  REG8;           /*!< RISAF Region 8 configuration register,                                       0x200-0x22C */
       uint32_t              RESERVED8[4];   /*!< Reserved,                                                                    0x230-0x23C */
       RISAF_Region_TypeDef  REG9;           /*!< RISAF Region 9 configuration register,                                       0x240-0x26C */
       uint32_t              RESERVED9[4];   /*!< Reserved,                                                                    0x270-0x27C */
       RISAF_Region_TypeDef  REG10;          /*!< RISAF Region 10 configuration register,                                      0x280-0x2AC */
       uint32_t              RESERVED10[4];  /*!< Reserved,                                                                    0x2B0-0x2BC */
       RISAF_Region_TypeDef  REG11;          /*!< RISAF Region 11 configuration register,                                      0x2C0-0x2EC */
       uint32_t              RESERVED11[4];  /*!< Reserved,                                                                    0x2F0-0x2FC */
       RISAF_Region_TypeDef  REG12;          /*!< RISAF Region 12 configuration register,                                      0x300-0x32C */
       uint32_t              RESERVED12[4];  /*!< Reserved,                                                                    0x330-0x33C */
       RISAF_Region_TypeDef  REG13;          /*!< RISAF Region 13 configuration register,                                      0x340-0x36C */
       uint32_t              RESERVED13[4];  /*!< Reserved,                                                                    0x370-0x37C */
       RISAF_Region_TypeDef  REG14;          /*!< RISAF Region 14 configuration register,                                      0x380-0x3AC */
       uint32_t              RESERVED14[4];  /*!< Reserved,                                                                    0x3B0-0x3BC */
       RISAF_Region_TypeDef  REG15;          /*!< RISAF Region 15 configuration register,                                      0x3C0-0x3EC */
  __IO uint32_t              HWCFGR;         /*!< RISAF HW configuration register,                                   Address offset: 0x3F0 */
  __IO uint32_t              VERR;           /*!< RISAF Version register,                                            Address offset: 0x3F4 */
  __IO uint32_t              IPIDR;          /*!< RISAF Identification register,                                     Address offset: 0x3F8 */
  __IO uint32_t              SIDR;           /*!< RISAF Size ID register,                                            Address offset: 0x3FC */
} RISAF_TypeDef;
#else
/**
  * @brief RISAF Resource Isolation Slave Unit for Address Space Protection (full version) Illegal Access Register (RIF User Spec Rev 1.0.13-ASSY2.3)
  */
typedef struct
{
  __IO uint32_t             IAESR;         /*!< RISAF Illegal access error status register */
  __IO uint32_t             IADDR;         /*!< RISAF Illegal address register,            */
} RISAF_Illegal_TypeDef;

/**
  * @brief RISAF Resource Isolation Slave Unit for Address Space Protection (full version) (RIF User Spec Rev 1.0.13-ASSY2.3)
  */
typedef struct
{
  __IO uint32_t              CR;             /*!< RISAF Configuration register,                                      Address offset: 0x000 */
  __IO uint32_t              SR;             /*!< RISAF Status register,                                             Address offset: 0x004 */
  __IO uint32_t              IASR;           /*!< RISAF Illegal access status register,                              Address offset: 0x008 */
  __IO uint32_t              IACR;           /*!< RISAF Illegal access clear register,                               Address offset: 0x00C */
       uint32_t              RESERVED0[4];   /*!< Reserved,                                                                    0x010-0x01C */
       RISAF_Illegal_TypeDef IAR[2];         /*!< RISAF Illegal access error status and address register,                      0x020-0x02C */
  __IO uint32_t              KEYR[4];        /*!< RISAF Encryption key register x,                                             0x030-0x03C */
       RISAF_Region_TypeDef  REG1;           /*!< RISAF Region 1 configuration register,                                       0x040-0x06C */
       uint32_t              RESERVED1[4];   /*!< Reserved,                                                                    0x070-0x07C */
       RISAF_Region_TypeDef  REG2;           /*!< RISAF Region 2 configuration register,                                       0x080-0x0AC */
       uint32_t              RESERVED2[4];   /*!< Reserved,                                                                    0x0B0-0x0BC */
       RISAF_Region_TypeDef  REG3;           /*!< RISAF Region 3 configuration register,                                       0x0C0-0x0EC */
       uint32_t              RESERVED3[4];   /*!< Reserved,                                                                    0x0F0-0x0FC */
       RISAF_Region_TypeDef  REG4;           /*!< RISAF Region 4 configuration register,                                       0x100-0x12C */
       uint32_t              RESERVED4[4];   /*!< Reserved,                                                                    0x130-0x13C */
       RISAF_Region_TypeDef  REG5;           /*!< RISAF Region 5 configuration register,                                       0x140-0x16C */
       uint32_t              RESERVED5[4];   /*!< Reserved,                                                                    0x170-0x17C */
       RISAF_Region_TypeDef  REG6;           /*!< RISAF Region 6 configuration register,                                       0x180-0x1AC */
       uint32_t              RESERVED6[4];   /*!< Reserved,                                                                    0x1B0-0x1BC */
       RISAF_Region_TypeDef  REG7;           /*!< RISAF Region 7 configuration register,                                       0x1C0-0x1EC */
       uint32_t              RESERVED7[4];   /*!< Reserved,                                                                    0x1F0-0x1FC */
       RISAF_Region_TypeDef  REG8;           /*!< RISAF Region 8 configuration register,                                       0x200-0x22C */
       uint32_t              RESERVED8[4];   /*!< Reserved,                                                                    0x230-0x23C */
       RISAF_Region_TypeDef  REG9;           /*!< RISAF Region 9 configuration register,                                       0x240-0x26C */
       uint32_t              RESERVED9[4];   /*!< Reserved,                                                                    0x270-0x27C */
       RISAF_Region_TypeDef  REG10;          /*!< RISAF Region 10 configuration register,                                      0x280-0x2AC */
       uint32_t              RESERVED10[4];  /*!< Reserved,                                                                    0x2B0-0x2BC */
       RISAF_Region_TypeDef  REG11;          /*!< RISAF Region 11 configuration register,                                      0x2C0-0x2EC */
       uint32_t              RESERVED11[4];  /*!< Reserved,                                                                    0x2F0-0x2FC */
       RISAF_Region_TypeDef  REG12;          /*!< RISAF Region 12 configuration register,                                      0x300-0x32C */
       uint32_t              RESERVED12[4];  /*!< Reserved,                                                                    0x330-0x33C */
       RISAF_Region_TypeDef  REG13;          /*!< RISAF Region 13 configuration register,                                      0x340-0x36C */
       uint32_t              RESERVED13[4];  /*!< Reserved,                                                                    0x370-0x37C */
       RISAF_Region_TypeDef  REG14;          /*!< RISAF Region 14 configuration register,                                      0x380-0x3AC */
       uint32_t              RESERVED14[4];  /*!< Reserved,                                                                    0x3B0-0x3BC */
       RISAF_Region_TypeDef  REG15;          /*!< RISAF Region 15 configuration register,                                      0x3C0-0x3EC */
  __IO uint32_t              HWCFGR;         /*!< RISAF HW configuration register,                                   Address offset: 0x3F0 */
  __IO uint32_t              VERR;           /*!< RISAF Version register,                                            Address offset: 0x3F4 */
  __IO uint32_t              IPIDR;          /*!< RISAF Identification register,                                     Address offset: 0x3F8 */
  __IO uint32_t              SIDR;           /*!< RISAF Size ID register,                                            Address offset: 0x3FC */
} RISAF_TypeDef;
#endif /* STM32MP2XX_ASSY2_2_1 */

/**
  * @brief RIF Illegal Access Controller (RIF User Spec Rev 1.0.11-ASSY2.2)
  */
typedef struct
{
  __IO uint32_t IER[6];         /*!< IAC Interrupt enable register x,                                           0x000-0x014 */
       uint32_t RESERVED1[10];  /*!< Reserved,                                                                  0x018-0x03C */
  __IO uint32_t ISR[6];         /*!< IAC Interrupt status register x,                                           0x040-0x054 */
       uint32_t RESERVED2[10];  /*!< Reserved,                                                                  0x058-0x07C */
  __IO uint32_t ICR[6];         /*!< IAC Interrupt clear register 0,                                            0x080-0x094 */
       uint32_t RESERVED3[213]; /*!< Reserved,                                                                  0x098-0x3E8 */
  __IO uint32_t HWCFGR2;        /*!< IAC HW configuration register 2,                                 Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;        /*!< IAC HW configuration register 1,                                 Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< IAC Version register,                                            Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< IAC Identification register,                                     Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< IAC Size ID register,                                            Address offset: 0x3FC */
} IAC_TypeDef;

/**
  * @brief RNG
  */

typedef struct
{
  __IO uint32_t CR;      /*!< RNG control register,             Address offset: 0x00  */
  __IO uint32_t SR;      /*!< RNG status register,              Address offset: 0x04  */
  __IO uint32_t DR;      /*!< RNG data register,                Address offset: 0x08  */
  __IO uint32_t RESERVED1[249];   /*!< Reserved                 0x0C - 0x3EC          */
  __IO uint32_t HWCFGR;  /*!< RNG HW Configuration register,    Address offset: 0x3F0 */
  __IO uint32_t VERR;    /*!< RNG Version register,             Address offset: 0x3F4 */
  __IO uint32_t ID;      /*!< RNG identification register,      Address offset: 0x3F8 */
  __IO uint32_t MID;     /*!< RNG HW magic ID,                  Address offset: 0x3FC */
} RNG_TypeDef;

/*
* @brief RTC Specific device feature definitions
*/
#define RTC_BKP_NB         128U
#define RTC_TAMP_NB        8U

/**
  * @brief Real-Time Clock
  */
typedef struct
{
  __IO uint32_t TR;             /*!< RTC time register                                Address offset: 0x000 */
  __IO uint32_t DR;             /*!< RTC date register                                Address offset: 0x004 */
  __IO uint32_t SSR;            /*!< RTC sub second register                          Address offset: 0x008 */
  __IO uint32_t ICSR;           /*!< RTC initialization control and status register   Address offset: 0x00C */
  __IO uint32_t PRER;           /*!< RTC prescaler register                           Address offset: 0x010 */
  __IO uint32_t WUTR;           /*!< RTC wakeup timer register                        Address offset: 0x014 */
  __IO uint32_t CR;             /*!< RTC control register                             Address offset: 0x018 */
  __IO uint32_t PRIVCR;         /*!< RTC privilege mode control register              Address offset: 0x01C */
  __IO uint32_t SECCFGR;        /*!< RTC secure mode control register                 Address offset: 0x020 */
  __IO uint32_t WPR;            /*!< RTC write protection register                    Address offset: 0x024 */
  __IO uint32_t CALR;           /*!< RTC calibration register                         Address offset: 0x028 */
  __IO uint32_t SHIFTR;         /*!< RTC shift control register                       Address offset: 0x02C */
  __IO uint32_t TSTR;           /*!< RTC timestamp time register                      Address offset: 0x030 */
  __IO uint32_t TSDR;           /*!< RTC timestamp date register                      Address offset: 0x034 */
  __IO uint32_t TSSSR;          /*!< RTC timestamp sub second register                Address offset: 0x038 */
       uint32_t RESERVED0;      /*!< Reserved                                         Address offset: 0x03C */
  __IO uint32_t ALRMAR;         /*!< RTC alarm A register                             Address offset: 0x040 */
  __IO uint32_t ALRMASSR;       /*!< RTC alarm A sub second register                  Address offset: 0x044 */
  __IO uint32_t ALRMBR;         /*!< RTC alarm B register                             Address offset: 0x048 */
  __IO uint32_t ALRMBSSR;       /*!< RTC alarm B sub second register                  Address offset: 0x04C */
  __IO uint32_t SR;             /*!< RTC Status register                              Address offset: 0x050 */
  __IO uint32_t MISR;           /*!< RTC non-secure masked interrupt status register  Address offset: 0x054 */
  __IO uint32_t SMISR;          /*!< RTC secure masked interrupt status register      Address offset: 0x058 */
  __IO uint32_t SCR;            /*!< RTC status Clear register                        Address offset: 0x05C */
  __IO uint32_t CFGR;           /*!< RTC configuration register                       Address offset: 0x060 */
       uint32_t RESERVED1[3];   /*!< Reserved                                         Address offset: 0x064-0x06C */
  __IO uint32_t ALRABINR;       /*!< RTC alarm A binary mode register                 Address offset: 0x070 */
  __IO uint32_t ALRBBINR;       /*!< RTC alarm B binary mode register                 Address offset: 0x074 */
       uint32_t RESERVED2[2];   /*!< Reserved                                         Address offset: 0x078-0x07C */
  __IO uint32_t RCIDCFGR[6];    /*!< RTC Resource x CID configuration register        Address offset: 0x080-0x094 */
       uint32_t RESERVED3[214]; /*!< Reserved                                         Address offset: 0x098-0x3EC */
  __IO uint32_t HWCFGR;         /*!< RTC hardware configuration register              Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< RTC version register                             Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< RTC identification register                      Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< RTC size identification register                 Address offset: 0x3FC */
} RTC_TypeDef;

/**
  * @brief Serial Audio Interface
  */

typedef struct
{
  __IO uint32_t GCR;            /*!< SAI global configuration register, Address offset: 0x000 */
  uint32_t      RESERVED0[16];  /*!< Reserved,                          Address offset: 0x004-0x040 */
  __IO uint32_t PDMCR;          /*!< SAI PDM control register,          Address offset: 0x044 */
  __IO uint32_t PDMDLY;         /*!< SAI PDM delay register,            Address offset: 0x048 */
  uint32_t      RESERVED1[233]; /*!< Reserved,                          Address offset: 0x04C-0x3EC */
  __IO uint32_t HWCFGR;         /*!< SAI HW Configuration register,     Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< SAI Version register,              Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< SAI Identification register,       Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< SAI Size Identification register,  Address offset: 0x3FC */
} SAI_TypeDef;

typedef struct
{
  __IO uint32_t CR1;      /*!< SAI block x configuration register 1,     Address offset: 0x04 */
  __IO uint32_t CR2;      /*!< SAI block x configuration register 2,     Address offset: 0x08 */
  __IO uint32_t FRCR;     /*!< SAI block x frame configuration register, Address offset: 0x0C */
  __IO uint32_t SLOTR;    /*!< SAI block x slot register,                Address offset: 0x10 */
  __IO uint32_t IMR;      /*!< SAI block x interrupt mask register,      Address offset: 0x14 */
  __IO uint32_t SR;       /*!< SAI block x status register,              Address offset: 0x18 */
  __IO uint32_t CLRFR;    /*!< SAI block x clear flag register,          Address offset: 0x1C */
  __IO uint32_t DR;       /*!< SAI block x data register,                Address offset: 0x20 */
} SAI_Block_TypeDef;

/**
  * @brief Secure digital input/output Interface
  */

typedef struct
{
  __IO uint32_t POWER;          /*!< SDMMC power control register,               Address offset: 0x00 */
  __IO uint32_t CLKCR;          /*!< SDMMC clock control register,               Address offset: 0x04 */
  __IO uint32_t ARG;            /*!< SDMMC argument register,                    Address offset: 0x08 */
  __IO uint32_t CMD;            /*!< SDMMC command register,                     Address offset: 0x0C */
  __I  uint32_t RESPCMD;        /*!< SDMMC command response register,            Address offset: 0x10 */
  __I  uint32_t RESP1;          /*!< SDMMC response 1 register,                  Address offset: 0x14 */
  __I  uint32_t RESP2;          /*!< SDMMC response 2 register,                  Address offset: 0x18 */
  __I  uint32_t RESP3;          /*!< SDMMC response 3 register,                  Address offset: 0x1C */
  __I  uint32_t RESP4;          /*!< SDMMC response 4 register,                  Address offset: 0x20 */
  __IO uint32_t DTIMER;         /*!< SDMMC data timer register,                  Address offset: 0x24 */
  __IO uint32_t DLEN;           /*!< SDMMC data length register,                 Address offset: 0x28 */
  __IO uint32_t DCTRL;          /*!< SDMMC data control register,                Address offset: 0x2C */
  __I  uint32_t DCOUNT;         /*!< SDMMC data counter register,                Address offset: 0x30 */
  __I  uint32_t STA;            /*!< SDMMC status register,                      Address offset: 0x34 */
  __IO uint32_t ICR;            /*!< SDMMC interrupt clear register,             Address offset: 0x38 */
  __IO uint32_t MASK;           /*!< SDMMC mask register,                        Address offset: 0x3C */
  __IO uint32_t ACKTIME;        /*!< SDMMC Acknowledgement timer register,       Address offset: 0x40 */
       uint32_t RESERVED0[3];   /*!< Reserved, 0x44 - 0x4C - 0x4C                                   */
  __IO uint32_t IDMACTRL;       /*!< SDMMC DMA control register,                 Address offset: 0x50 */
  __IO uint32_t IDMABSIZE;      /*!< SDMMC DMA buffer size register,             Address offset: 0x54 */
  __IO uint32_t IDMABASER;      /*!< SDMMC DMA buffer 0 base address register,   Address offset: 0x58 */
       uint32_t RESERVED1[2];   /*!< Reserved, 0x5C - 0x60                                            */
  __IO uint32_t IDMALAR;        /*!< SDMMC DMA linked list address register,     Address offset: 0x64 */
  __IO uint32_t IDMABAR;        /*!< SDMMC DMA linked list memory base register, Address offset: 0x68 */
       uint32_t RESERVED2[5];   /*!< Reserved, 0x6C-0x7C                                            */
  __IO uint32_t FIFO;           /*!< SDMMC data FIFO register,                   Address offset: 0x80 - 0xBC */
       uint32_t RESERVED3[220]; /*!< Reserved, 0xBC-0x3F4                                           */
  __IO uint32_t VERR;           /*!< SDMMC version register,                     Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< SDMMC identification register,              Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< SDMMC size ID register,                     Address offset: 0x3FC */
} SDMMC_TypeDef;

/**
  * @brief SPDIF-RX Interface
  */

typedef struct
{
  __IO uint32_t CR;             /*!< SPDIFRX control register,                   Address offset: 0x00 */
  __IO uint32_t IMR;            /*!< SPDIFRX interrupt mask register,            Address offset: 0x04 */
  __IO uint32_t SR;             /*!< SPDIFRX status register,                    Address offset: 0x08 */
  __IO uint32_t IFCR;           /*!< SPDIFRX interrupt Flag Clear register,      Address offset: 0x0C */
  __IO uint32_t DR;             /*!< SPDIFRX data input register,                Address offset: 0x10 */
  __IO uint32_t CSR;            /*!< SPDIFRX channel Status register,            Address offset: 0x14 */
  __IO uint32_t DIR;            /*!< SPDIFRX debug Information register,         Address offset: 0x18 */
  uint32_t      RESERVED2[246]; /*!< Reserved,                                   Address offst:  0x1C-0x3F0 */
  __IO uint32_t VERR;           /*!< SPDIFRX version register,                   Address offset: 0x34F */
  __IO uint32_t IPIDR;          /*!< SPDIFRX identification register,            Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< SPDIFRX size ID register,                   Address offset: 0x3FC */
} SPDIFRX_TypeDef;

/**
  * @brief STGENC System Timestamp Generator Control
  *        ref. ARM CoreSight SoC-400 Rev.r3p1 TRM [ARM DDI 0480F]
  *             see #3.18 "Timestamp generator register summary"
  */
typedef struct
{
  __IO uint32_t CNTCR;   /*!< STGENC Counter Control Register,              Address offset: 0x000 */
       uint32_t CNTSR;   /*!< STGENC Counter Status Register,               Address offset: 0x004 */
  __IO uint32_t CNTCVL;  /*!< STGENC Current Counter Value Lower Register,  Address offset: 0x008 */
  __IO uint32_t CNTCVU;  /*!< STGENC Current Counter Value Upper Register,  Address offset: 0x00C */
       uint32_t RESERVED1[4];                         /*!< Reserved, Address offsets: 0x010-0x01C */
  __IO uint32_t CNTFID0; /*!< STGENC Base Frequency ID Register,            Address offset: 0x020 */
       uint32_t RESERVED2[1003];                      /*!< Reserved, Address offsets: 0x024-0xFCC */
  __IO uint32_t PIDR4;   /*!< STGENC Peripheral ID4 Register,               Address offset: 0xFD0 */
  __IO uint32_t RESERVED3[3];                         /*!< Reserved, Address offsets: 0xFD4-0xFDC */
  __IO uint32_t PIDR[4]; /*!< STGENC Peripheral ID0-ID3 Registers,          Address offset: 0xFE0 */
  __IO uint32_t CIDR[4]; /*!< STGENC Component ID0-ID3 Registers,           Address offset: 0xFF0 */
} STGENC_TypeDef;

/**
  * @brief STGENR System Timestamp Generator Read
  */
typedef struct
{
  __IO uint32_t CNTCVL;  /*!< STGENR Current Counter Value Lower Register,  Address offset: 0x000 */
  __IO uint32_t CNTCVU;  /*!< STGENR Current Counter Value Upper Register,  Address offset: 0x004 */
       uint32_t RESERVED1[1010];                      /*!< Reserved, Address offsets: 0x008-0xFCC */
  __IO uint32_t PIDR4;   /*!< STGENR Peripheral ID4 Register,               Address offset: 0xFD0 */
  __IO uint32_t RESERVED2[3];                         /*!< Reserved, Address offsets: 0xFD4-0xFDC */
  __IO uint32_t PIDR[4]; /*!< STGENR Peripheral ID0-ID3 Registers,          Address offset: 0xFE0 */
  __IO uint32_t CIDR[4]; /*!< STGENR Component ID0-ID3 Registers,           Address offset: 0xFF0 */
} STGENR_TypeDef;

/**
  * @brief System configuration controller
  */
typedef struct
{
  __IO uint32_t BOOTSR;            /*!< Boot pins status register                   Address offset: 0x0000 */
  __IO uint32_t BOOTCR;            /*!< Boot pins control register                  Address offset: 0x0004 */
       uint32_t RESERVED0[254];    /*!< Reserved                                    Address offset: 0x0008-0x03FC */
  __IO uint32_t SDMMC1DLLCR;       /*!< SDMMC1 DLL Control Register                 Address offset: 0x0400 */
  __IO uint32_t SDMMC1DLLSR;       /*!< SDMMC1 DLL Status Register                  Address offset: 0x0404 */
  __IO uint32_t SDMMC1CR;          /*!< SDMMC1 Control Register                     Address offset: 0x0408 */
       uint32_t RESERVED1[253];    /*!< Reserved                                    Address offset: 0x040C-0x07FC */
  __IO uint32_t SDMMC2DLLCR;       /*!< SDMMC2 DLL Control Register                 Address offset: 0x0800 */
  __IO uint32_t SDMMC2DLLSR;       /*!< SDMMC2 DLL Status Register                  Address offset: 0x0804 */
  __IO uint32_t SDMMC2CR;          /*!< SDMMC2 Control Register                     Address offset: 0x0808 */
       uint32_t RESERVED2[253];    /*!< Reserved                                    Address offset: 0x080C-0x0BFC */
  __IO uint32_t SDMMC3DLLCR;       /*!< SDMMC3 DLL Control Register                 Address offset: 0x0C00 */
  __IO uint32_t SDMMC3DLLSR;       /*!< SDMMC3 DLL Status Register                  Address offset: 0x0C04 */
       uint32_t RESERVED3[254];    /*!< Reserved                                    Address offset: 0x0C08-0x0FFC */
  __IO uint32_t OCTOSPI1CR;        /*!< OCTOSPI1 Control Register                   Address offset: 0x1000 */
  __IO uint32_t OCTOSPI1DLLCR;     /*!< OCTOSPI1 DLL Control Register               Address offset: 0x1004 */
  __IO uint32_t OCTOSPI1DLLSR;     /*!< OCTOSPI1 DLL Status Register                Address offset: 0x1008 */
       uint32_t RESERVED4[253];    /*!< Reserved                                    Address offset: 0x100C-0x13FC */
  __IO uint32_t OCTOSPI2CR;        /*!< OCTOSPI2 Control Register                   Address offset: 0x1400 */
  __IO uint32_t OCTOSPI2DLLCR;     /*!< OCTOSPI2 DLL Control Register               Address offset: 0x1404 */
  __IO uint32_t OCTOSPI2DLLSR;     /*!< OCTOSPI2 DLL Status Register                Address offset: 0x1408 */
       uint32_t RESERVED5[253];    /*!< Reserved                                    Address offset: 0x140C-0x17FC */
  __IO uint32_t VDERAMCR;          /*!< Video Decoder Encoder RAM Control Register  Address offset: 0x1800 */
       uint32_t RESERVED6[255];    /*!< Reserved                                    Address offset: 0x1804-0x1BFC */
  __IO uint32_t M33SSCR;           /*!< M33SS Control Register                      Address offset: 0x1C00 */
       uint32_t RESERVED7[255];    /*!< Reserved                                    Address offset: 0x1C04-0x1FFC */
  __IO uint32_t AXIQOS1;           /*!< AXI master 1 priority register              Address offset: 0x2000 */
  __IO uint32_t AXIQOS2;           /*!< AXI master 2 priority register              Address offset: 0x2004 */
  __IO uint32_t AXICGCR;           /*!< AXI clock gating control register           Address offset: 0x2008 */
       uint32_t RESERVED8[253];    /*!< Reserved                                    Address offset: 0x200C-0x23FC */
  __IO uint32_t USB2PHY1CR;        /*!< USB2PHY_1 control register                  Address offset: 0x2400 */
  __IO uint32_t USB2PHY1BCCR;      /*!< USB2PHY_1 battery charging control register Address offset: 0x2404 */
  __IO uint32_t USB2PHY1BCSR;      /*!< USB2PHY_1 battery charging status register  Address offset: 0x2408 */
  __IO uint32_t USB2PHY1TRIM1;     /*!< USB2PHY_1 trimming register                 Address offset: 0x240C */
  __IO uint32_t USB2PHY1TRIM2;     /*!< USB2PHY_1 trimming register                 Address offset: 0x2410 */
       uint32_t RESERVED9[251];    /*!< Reserved                                    Address offset: 0x2414-0x27FC */
  __IO uint32_t USB2PHY2CR;        /*!< USB2PHY_2 control register                  Address offset: 0x2800 */
  __IO uint32_t USB2PHY2SR;        /*!< USB2PHY_2 status register                   Address offset: 0x2804 */
  __IO uint32_t USB2PHY2TRIM1;     /*!< USB2PHY_2 trimming register                 Address offset: 0x2808 */
  __IO uint32_t USB2PHY2TRIM2;     /*!< USB2PHY_2 trimming register                 Address offset: 0x280C */
       uint32_t RESERVED10[252];   /*!< Reserved                                    Address offset: 0x2810-0x2BFC */
  __IO uint32_t PMCR1;             /*!< Peripheral mode configuration register 1    Address offset: 0x2C00 */
       uint32_t RESERVED11[255];   /*!< Reserved                                    Address offset: 0x2C04-0x2FFC */
  __IO uint32_t ETH1CR;            /*!< Ethernet1 MAC configuration register        Address offset: 0x3000 */
       uint32_t RESERVED12[255];   /*!< Reserved                                    Address offset: 0x3004-0x33FC */
  __IO uint32_t ETH2CR;            /*!< Ethernet2 configuration register            Address offset: 0x3400 */
       uint32_t RESERVED13[511];   /*!< Reserved                                    Address offset: 0x3404-0x3BFC */
  __IO uint32_t IOCR;              /*!< IO control register                         Address offset: 0x3C00 */
       uint32_t RESERVED14[255];   /*!< Reserved                                    Address offset: 0x3C04-0x3FFC */
  __IO uint32_t CMPCR1;            /*!< Compensation cell octospi1 control register Address offset: 0x4000 */
  __IO uint32_t CMPSR1;            /*!< Compensation cell octospi1 status register  Address offset: 0x4004 */
  __IO uint32_t CMPCR2;            /*!< Compensation cell octospi2 control register Address offset: 0x4008 */
  __IO uint32_t CMPSR2;            /*!< Compensation cell octospi2 status register  Address offset: 0x400C */
  __IO uint32_t CMPCR3;            /*!< Compensation cell vddcore control register  Address offset: 0x4010 */
  __IO uint32_t CMPSR3;            /*!< Compensation cell vddcore status register   Address offset: 0x4014 */
  __IO uint32_t CMPCR4;            /*!< Compensation cell emmc control register     Address offset: 0x4018 */
  __IO uint32_t CMPSR4;            /*!< Compensation cell emmc status register      Address offset: 0x401C */
  __IO uint32_t CMPCR5;            /*!< Compensation cell sd control register       Address offset: 0x4020 */
  __IO uint32_t CMPSR5;            /*!< Compensation cell sd status register        Address offset: 0x4024 */
       uint32_t RESERVED15[246];   /*!< Reserved                                    Address offset: 0x4028-0x43FC */
  __IO uint32_t CBR;               /*!< Control timer break register                Address offset: 0x4400 */
       uint32_t RESERVED16[255];   /*!< Reserved                                    Address offset: 0x4404-0x47FC */
  __IO uint32_t USB3CR;            /*!< USB3 control register                       Address offset: 0x4800 */
  __IO uint32_t USB3SR;            /*!< USB3 status register                        Address offset: 0x4804 */
       uint32_t RESERVED17[254];   /*!< Reserved                                    Address offset: 0x4808-0x4BFC */
  __IO uint32_t COMBOPHYCR1;       /*!< COMBOPHY control register 1                 Address offset: 0x4C00 */
  __IO uint32_t COMBOPHYCR2;       /*!< COMBOPHY control register 2                 Address offset: 0x4C04 */
  __IO uint32_t COMBOPHYCR3;       /*!< COMBOPHY control register 3                 Address offset: 0x4C08 */
  __IO uint32_t COMBOPHYCR4;       /*!< COMBOPHY control register 4                 Address offset: 0x4C0C */
  __IO uint32_t COMBOPHYCR5;       /*!< COMBOPHY control register 5                 Address offset: 0x4C10 */
  __IO uint32_t COMBOPHYSR;        /*!< COMBOPHY status register                    Address offset: 0x4C14 */
       uint32_t RESERVED18[250];   /*!< Reserved                                    Address offset: 0x4C18-0x4FFC */
  __IO uint32_t DISPLAYCLKCR;      /*!< DISPLAY Clock Control register              Address offset: 0x5000 */
       uint32_t RESERVED19[1023];  /*!< Reserved                                    Address offset: 0x5004-0x5FFC */
  __IO uint32_t PCIECR;            /*!< PCIE control register                       Address offset: 0x6000 */
  __IO uint32_t PCIEPMEMSICR;      /*!< PCIE CFG_PME_MSI control register           Address offset: 0x6004 */
  __IO uint32_t PCIEAERRCMSICR;    /*!< PCIE CFG_AER_RC_ERR_MSI control register    Address offset: 0x6008 */
  __IO uint32_t PCIESYSRCCR;       /*!< PCIE CFG_SYS_ERR_RC control register        Address offset: 0x600C */
  __IO uint32_t PCIEPRGCR;         /*!< PCIEPRGCR                                   Address offset: 0x6010 */
       uint32_t RESERVED20[59];    /*!< Reserved                                    Address offset: 0x6014-0x60FC */
  __IO uint32_t PCIESR1;           /*!< PCIE status register                        Address offset: 0x6100 */
  __IO uint32_t PCIESR2;           /*!< PCIE interrupt status register              Address offset: 0x6104 */
       uint32_t RESERVED21[1979];  /*!< Reserved                                    Address offset: 0x6108-0x7FF0 */
  __IO uint32_t VERR;              /*!< Version register                            Address offset: 0x7FF4 */
  __IO uint32_t IPIDR;             /*!< Identification register                     Address offset: 0x7FF8 */
  __IO uint32_t SIDR;              /*!< Size identification register                Address offset: 0x7FFC */
} SYSCFG_TypeDef;

/**
  * @brief Tamper and backup registers
  */
typedef struct
{
  __IO uint32_t CR1;           /*!< TAMP control register 1                           Address offset: 0x000 */
  __IO uint32_t CR2;           /*!< TAMP control register 2                           Address offset: 0x004 */
  __IO uint32_t CR3;           /*!< TAMP control register 3                           Address offset: 0x008 */
  __IO uint32_t FLTCR;         /*!< TAMP filter control register                      Address offset: 0x00C */
  __IO uint32_t ATCR1;         /*!< TAMP active tamper control register 1             Address offset: 0x010 */
  __IO uint32_t ATSEEDR;       /*!< TAMP active tamper seed register                  Address offset: 0x014 */
  __IO uint32_t ATOR;          /*!< TAMP active tamper output register                Address offset: 0x018 */
  __IO uint32_t ATCR2;         /*!< TAMP active tamper control register 2             Address offset: 0x01C */
  __IO uint32_t SECCFGR;       /*!< TAMP secure mode register                         Address offset: 0x020 */
  __IO uint32_t PRIVCR;        /*!< TAMP privilege mode control register              Address offset: 0x024 */
       uint32_t RESERVED0;     /*!< Reserved                                          Address offset: 0x028 */
  __IO uint32_t IER;           /*!< TAMP interrupt enable register                    Address offset: 0x02C */
  __IO uint32_t SR;            /*!< TAMP status register                              Address offset: 0x030 */
  __IO uint32_t MISR;          /*!< TAMP non-secure masked interrupt status register  Address offset: 0x034 */
  __IO uint32_t SMISR;         /*!< TAMP secure masked interrupt status register      Address offset: 0x038 */
  __IO uint32_t SCR;           /*!< TAMP status clear register                        Address offset: 0x03C */
  __IO uint32_t COUNT1R;       /*!< TAMP monotonic counter 1 register                 Address offset: 0x040 */
  __IO uint32_t COUNT2R;       /*!< TAMP monotonic counter 2 register                 Address offset: 0x044 */
       uint32_t RESERVED2[10]; /*!< Reserved,                                         Address offset: 0x048-0x06C */
  __IO uint32_t BKPRIFR1;      /*!< TAMP Backup registers RIF register 1              Address offset: 0x070 */
  __IO uint32_t BKPRIFR2;      /*!< TAMP Backup registers RIF register 2              Address offset: 0x074 */
  __IO uint32_t BKPRIFR3;      /*!< TAMP Backup registers RIF register 3              Address offset: 0x078 */
  __IO uint32_t RCIDCFGR[3];   /*!< TAMP Resource CID configuration register          Address offset: 0x080-0x088 */
       uint32_t RESERVED3[29]; /*!< Reserved                                          Address offset: 0x08C-0x0FC */
  __IO uint32_t BKP0R;         /*!< TAMP backup register 0                            Address offset: 0x100 */
  __IO uint32_t BKP1R;         /*!< TAMP backup register 1                            Address offset: 0x104 */
  __IO uint32_t BKP2R;         /*!< TAMP backup register 2                            Address offset: 0x108 */
  __IO uint32_t BKP3R;         /*!< TAMP backup register 3                            Address offset: 0x10C */
  __IO uint32_t BKP4R;         /*!< TAMP backup register 4                            Address offset: 0x110 */
  __IO uint32_t BKP5R;         /*!< TAMP backup register 5                            Address offset: 0x114 */
  __IO uint32_t BKP6R;         /*!< TAMP backup register 6                            Address offset: 0x118 */
  __IO uint32_t BKP7R;         /*!< TAMP backup register 7                            Address offset: 0x11C */
  __IO uint32_t BKP8R;         /*!< TAMP backup register 8                            Address offset: 0x120 */
  __IO uint32_t BKP9R;         /*!< TAMP backup register 9                            Address offset: 0x124 */
  __IO uint32_t BKP10R;        /*!< TAMP backup register 10                           Address offset: 0x128 */
  __IO uint32_t BKP11R;        /*!< TAMP backup register 11                           Address offset: 0x12C */
  __IO uint32_t BKP12R;        /*!< TAMP backup register 12                           Address offset: 0x130 */
  __IO uint32_t BKP13R;        /*!< TAMP backup register 13                           Address offset: 0x134 */
  __IO uint32_t BKP14R;        /*!< TAMP backup register 14                           Address offset: 0x138 */
  __IO uint32_t BKP15R;        /*!< TAMP backup register 15                           Address offset: 0x13C */
  __IO uint32_t BKP16R;        /*!< TAMP backup register 16                           Address offset: 0x140 */
  __IO uint32_t BKP17R;        /*!< TAMP backup register 17                           Address offset: 0x144 */
  __IO uint32_t BKP18R;        /*!< TAMP backup register 18                           Address offset: 0x148 */
  __IO uint32_t BKP19R;        /*!< TAMP backup register 19                           Address offset: 0x14C */
  __IO uint32_t BKP20R;        /*!< TAMP backup register 20                           Address offset: 0x150 */
  __IO uint32_t BKP21R;        /*!< TAMP backup register 21                           Address offset: 0x154 */
  __IO uint32_t BKP22R;        /*!< TAMP backup register 22                           Address offset: 0x158 */
  __IO uint32_t BKP23R;        /*!< TAMP backup register 23                           Address offset: 0x15C */
  __IO uint32_t BKP24R;        /*!< TAMP backup register 24                           Address offset: 0x160 */
  __IO uint32_t BKP25R;        /*!< TAMP backup register 25                           Address offset: 0x164 */
  __IO uint32_t BKP26R;        /*!< TAMP backup register 26                           Address offset: 0x168 */
  __IO uint32_t BKP27R;        /*!< TAMP backup register 27                           Address offset: 0x16C */
  __IO uint32_t BKP28R;        /*!< TAMP backup register 28                           Address offset: 0x170 */
  __IO uint32_t BKP29R;        /*!< TAMP backup register 29                           Address offset: 0x174 */
  __IO uint32_t BKP30R;        /*!< TAMP backup register 30                           Address offset: 0x178 */
  __IO uint32_t BKP31R;        /*!< TAMP backup register 31                           Address offset: 0x17C */
  __IO uint32_t BKP32R;        /*!< TAMP backup register 32                           Address offset: 0x180 */
  __IO uint32_t BKP33R;        /*!< TAMP backup register 33                           Address offset: 0x184 */
  __IO uint32_t BKP34R;        /*!< TAMP backup register 34                           Address offset: 0x188 */
  __IO uint32_t BKP35R;        /*!< TAMP backup register 35                           Address offset: 0x18C */
  __IO uint32_t BKP36R;        /*!< TAMP backup register 36                           Address offset: 0x190 */
  __IO uint32_t BKP37R;        /*!< TAMP backup register 37                           Address offset: 0x194 */
  __IO uint32_t BKP38R;        /*!< TAMP backup register 38                           Address offset: 0x198 */
  __IO uint32_t BKP39R;        /*!< TAMP backup register 39                           Address offset: 0x19C */
  __IO uint32_t BKP40R;        /*!< TAMP backup register 40                           Address offset: 0x1A0 */
  __IO uint32_t BKP41R;        /*!< TAMP backup register 41                           Address offset: 0x1A4 */
  __IO uint32_t BKP42R;        /*!< TAMP backup register 42                           Address offset: 0x1A8 */
  __IO uint32_t BKP43R;        /*!< TAMP backup register 43                           Address offset: 0x1AC */
  __IO uint32_t BKP44R;        /*!< TAMP backup register 44                           Address offset: 0x1B0 */
  __IO uint32_t BKP45R;        /*!< TAMP backup register 45                           Address offset: 0x1B4 */
  __IO uint32_t BKP46R;        /*!< TAMP backup register 46                           Address offset: 0x1B8 */
  __IO uint32_t BKP47R;        /*!< TAMP backup register 47                           Address offset: 0x1BC */
  __IO uint32_t BKP48R;        /*!< TAMP backup register 48                           Address offset: 0x1C0 */
  __IO uint32_t BKP49R;        /*!< TAMP backup register 49                           Address offset: 0x1C4 */
  __IO uint32_t BKP50R;        /*!< TAMP backup register 50                           Address offset: 0x1C8 */
  __IO uint32_t BKP51R;        /*!< TAMP backup register 51                           Address offset: 0x1CC */
  __IO uint32_t BKP52R;        /*!< TAMP backup register 52                           Address offset: 0x1D0 */
  __IO uint32_t BKP53R;        /*!< TAMP backup register 53                           Address offset: 0x1D4 */
  __IO uint32_t BKP54R;        /*!< TAMP backup register 54                           Address offset: 0x1D8 */
  __IO uint32_t BKP55R;        /*!< TAMP backup register 55                           Address offset: 0x1DC */
  __IO uint32_t BKP56R;        /*!< TAMP backup register 56                           Address offset: 0x1E0 */
  __IO uint32_t BKP57R;        /*!< TAMP backup register 57                           Address offset: 0x1E4 */
  __IO uint32_t BKP58R;        /*!< TAMP backup register 58                           Address offset: 0x1E8 */
  __IO uint32_t BKP59R;        /*!< TAMP backup register 59                           Address offset: 0x1EC */
  __IO uint32_t BKP60R;        /*!< TAMP backup register 60                           Address offset: 0x1F0 */
  __IO uint32_t BKP61R;        /*!< TAMP backup register 61                           Address offset: 0x1F4 */
  __IO uint32_t BKP62R;        /*!< TAMP backup register 62                           Address offset: 0x1F8 */
  __IO uint32_t BKP63R;        /*!< TAMP backup register 63                           Address offset: 0x1FC */
  __IO uint32_t BKP64R;        /*!< TAMP backup register 64                           Address offset: 0x200 */
  __IO uint32_t BKP65R;        /*!< TAMP backup register 65                           Address offset: 0x204 */
  __IO uint32_t BKP66R;        /*!< TAMP backup register 66                           Address offset: 0x208 */
  __IO uint32_t BKP67R;        /*!< TAMP backup register 67                           Address offset: 0x20C */
  __IO uint32_t BKP68R;        /*!< TAMP backup register 68                           Address offset: 0x210 */
  __IO uint32_t BKP69R;        /*!< TAMP backup register 69                           Address offset: 0x214 */
  __IO uint32_t BKP70R;        /*!< TAMP backup register 70                           Address offset: 0x218 */
  __IO uint32_t BKP71R;        /*!< TAMP backup register 71                           Address offset: 0x21C */
  __IO uint32_t BKP72R;        /*!< TAMP backup register 72                           Address offset: 0x220 */
  __IO uint32_t BKP73R;        /*!< TAMP backup register 73                           Address offset: 0x224 */
  __IO uint32_t BKP74R;        /*!< TAMP backup register 74                           Address offset: 0x228 */
  __IO uint32_t BKP75R;        /*!< TAMP backup register 75                           Address offset: 0x22C */
  __IO uint32_t BKP76R;        /*!< TAMP backup register 76                           Address offset: 0x230 */
  __IO uint32_t BKP77R;        /*!< TAMP backup register 77                           Address offset: 0x234 */
  __IO uint32_t BKP78R;        /*!< TAMP backup register 78                           Address offset: 0x238 */
  __IO uint32_t BKP79R;        /*!< TAMP backup register 79                           Address offset: 0x23C */
  __IO uint32_t BKP80R;        /*!< TAMP backup register 80                           Address offset: 0x240 */
  __IO uint32_t BKP81R;        /*!< TAMP backup register 81                           Address offset: 0x244 */
  __IO uint32_t BKP82R;        /*!< TAMP backup register 82                           Address offset: 0x248 */
  __IO uint32_t BKP83R;        /*!< TAMP backup register 83                           Address offset: 0x24C */
  __IO uint32_t BKP84R;        /*!< TAMP backup register 84                           Address offset: 0x250 */
  __IO uint32_t BKP85R;        /*!< TAMP backup register 85                           Address offset: 0x254 */
  __IO uint32_t BKP86R;        /*!< TAMP backup register 86                           Address offset: 0x258 */
  __IO uint32_t BKP87R;        /*!< TAMP backup register 87                           Address offset: 0x25C */
  __IO uint32_t BKP88R;        /*!< TAMP backup register 88                           Address offset: 0x260 */
  __IO uint32_t BKP89R;        /*!< TAMP backup register 89                           Address offset: 0x264 */
  __IO uint32_t BKP90R;        /*!< TAMP backup register 90                           Address offset: 0x268 */
  __IO uint32_t BKP91R;        /*!< TAMP backup register 91                           Address offset: 0x26C */
  __IO uint32_t BKP92R;        /*!< TAMP backup register 92                           Address offset: 0x270 */
  __IO uint32_t BKP93R;        /*!< TAMP backup register 93                           Address offset: 0x274 */
  __IO uint32_t BKP94R;        /*!< TAMP backup register 94                           Address offset: 0x278 */
  __IO uint32_t BKP95R;        /*!< TAMP backup register 95                           Address offset: 0x27C */
  __IO uint32_t BKP96R;        /*!< TAMP backup register 96                           Address offset: 0x280 */
  __IO uint32_t BKP97R;        /*!< TAMP backup register 97                           Address offset: 0x284 */
  __IO uint32_t BKP98R;        /*!< TAMP backup register 98                           Address offset: 0x288 */
  __IO uint32_t BKP99R;        /*!< TAMP backup register 99                           Address offset: 0x28C */
  __IO uint32_t BKP100R;       /*!< TAMP backup register 100                          Address offset: 0x290 */
  __IO uint32_t BKP101R;       /*!< TAMP backup register 101                          Address offset: 0x294 */
  __IO uint32_t BKP102R;       /*!< TAMP backup register 102                          Address offset: 0x298 */
  __IO uint32_t BKP103R;       /*!< TAMP backup register 103                          Address offset: 0x29C */
  __IO uint32_t BKP104R;       /*!< TAMP backup register 104                          Address offset: 0x2A0 */
  __IO uint32_t BKP105R;       /*!< TAMP backup register 105                          Address offset: 0x2A4 */
  __IO uint32_t BKP106R;       /*!< TAMP backup register 106                          Address offset: 0x2A8 */
  __IO uint32_t BKP107R;       /*!< TAMP backup register 107                          Address offset: 0x2AC */
  __IO uint32_t BKP108R;       /*!< TAMP backup register 108                          Address offset: 0x2B0 */
  __IO uint32_t BKP109R;       /*!< TAMP backup register 109                          Address offset: 0x2B4 */
  __IO uint32_t BKP110R;       /*!< TAMP backup register 110                          Address offset: 0x2B8 */
  __IO uint32_t BKP111R;       /*!< TAMP backup register 111                          Address offset: 0x2BC */
  __IO uint32_t BKP112R;       /*!< TAMP backup register 112                          Address offset: 0x2C0 */
  __IO uint32_t BKP113R;       /*!< TAMP backup register 113                          Address offset: 0x2C4 */
  __IO uint32_t BKP114R;       /*!< TAMP backup register 114                          Address offset: 0x2C8 */
  __IO uint32_t BKP115R;       /*!< TAMP backup register 115                          Address offset: 0x2CC */
  __IO uint32_t BKP116R;       /*!< TAMP backup register 116                          Address offset: 0x2D0 */
  __IO uint32_t BKP117R;       /*!< TAMP backup register 117                          Address offset: 0x2D4 */
  __IO uint32_t BKP118R;       /*!< TAMP backup register 118                          Address offset: 0x2D8 */
  __IO uint32_t BKP119R;       /*!< TAMP backup register 119                          Address offset: 0x2DC */
  __IO uint32_t BKP120R;       /*!< TAMP backup register 120                          Address offset: 0x2E0 */
  __IO uint32_t BKP121R;       /*!< TAMP backup register 121                          Address offset: 0x2E4 */
  __IO uint32_t BKP122R;       /*!< TAMP backup register 122                          Address offset: 0x2E8 */
  __IO uint32_t BKP123R;       /*!< TAMP backup register 123                          Address offset: 0x2EC */
  __IO uint32_t BKP124R;       /*!< TAMP backup register 124                          Address offset: 0x2F0 */
  __IO uint32_t BKP125R;       /*!< TAMP backup register 125                          Address offset: 0x2F4 */
  __IO uint32_t BKP126R;       /*!< TAMP backup register 126                          Address offset: 0x2F8 */
  __IO uint32_t BKP127R;       /*!< TAMP backup register 127                          Address offset: 0x2FC */
       uint32_t RESERVED4[59]; /*!< Reserved                                          Address offset: 0x300-0x3E8 */
  __IO uint32_t HWCFGR2;       /*!< TAMP hardware configuration register 2            Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;       /*!< TAMP hardware configuration register 1            Address offset: 0x3F0 */
  __IO uint32_t VERR;          /*!< TAMP version register                             Address offset: 0x3F4 */
  __IO uint32_t IPIDR;         /*!< TAMP identification register                      Address offset: 0x3F8 */
  __IO uint32_t SIDR;          /*!< TAMP size identification register                 Address offset: 0x3FC */
} TAMP_TypeDef;

/**
  * @brief TIM
  */
typedef struct
{
  __IO uint32_t CR1;             /*!< TIM control register 1                    Address offset: 0x000 */
  __IO uint32_t CR2;             /*!< TIM control register 2                    Address offset: 0x004 */
  __IO uint32_t SMCR;            /*!< TIM slave mode control register           Address offset: 0x008 */
  __IO uint32_t DIER;            /*!< TIM DMA/interrupt enable register         Address offset: 0x00C */
  __IO uint32_t SR;              /*!< TIM status register                       Address offset: 0x010 */
  __IO uint32_t EGR;             /*!< TIM event generation register             Address offset: 0x014 */
  __IO uint32_t CCMR1;           /*!< TIM capture/compare mode register 1       Address offset: 0x018 */
  __IO uint32_t CCMR2;           /*!< TIM capture/compare mode register 2       Address offset: 0x01C */
  __IO uint32_t CCER;            /*!< TIM capture/compare enable register       Address offset: 0x020 */
  __IO uint32_t CNT;             /*!< TIM counter register                      Address offset: 0x024 */
  __IO uint32_t PSC;             /*!< TIM prescaler                             Address offset: 0x028 */
  __IO uint32_t ARR;             /*!< TIM auto-reload register                  Address offset: 0x02C */
  __IO uint32_t RCR;             /*!< TIM repetition counter register           Address offset: 0x030 */
  __IO uint32_t CCR1;            /*!< TIM capture/compare register 1            Address offset: 0x034 */
  __IO uint32_t CCR2;            /*!< TIM capture/compare register 2            Address offset: 0x038 */
  __IO uint32_t CCR3;            /*!< TIM capture/compare register 3            Address offset: 0x03C */
  __IO uint32_t CCR4;            /*!< TIM capture/compare register 4            Address offset: 0x040 */
  __IO uint32_t BDTR;            /*!< TIM break and dead-time register          Address offset: 0x044 */
  __IO uint32_t CCR5;            /*!< TIM capture/compare register 5            Address offset: 0x048 */
  __IO uint32_t CCR6;            /*!< TIM capture/compare register 6            Address offset: 0x04C */
  __IO uint32_t CCMR3;           /*!< TIM capture/compare mode register 3       Address offset: 0x050 */
  __IO uint32_t DTR2;            /*!< TIM timer deadtime register 2             Address offset: 0x054 */
  __IO uint32_t ECR;             /*!< TIM timer encoder control register        Address offset: 0x058 */
  __IO uint32_t TISEL;           /*!< TIM timer Input Selection register        Address offset: 0x05C */
  __IO uint32_t AF1;             /*!< TIM alternate function option register 1  Address offset: 0x060 */
  __IO uint32_t AF2;             /*!< TIM alternate function option register 2  Address offset: 0x064 */
  __IO uint32_t OR;              /*!< TIM option register                       Address offset: 0x068 */
       uint32_t RESERVED0[220];  /*!< Reserved                                  Address offset: 0x06C-0x3D8 */
  __IO uint32_t DCR;             /*!< TIM DMA control register                  Address offset: 0x3DC */
  __IO uint32_t DMAR;            /*!< TIM DMA address for full transfer         Address offset: 0x3E0 */
       uint32_t RESERVED1[2];    /*!< Reserved                                  Address offset: 0x3E4-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< TIM hardware configuration 2 register     Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< TIM hardware configuration 1 register     Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< TIM version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< TIM IP identification register            Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< TIM size ID register                      Address offset: 0x3FC */
} TIM_TypeDef;

/**
  * @brief Universal Synchronous Asynchronous Receiver Transmitter
  */
/* c7amba_sci3_v3.0 */
typedef struct
{
  __IO uint32_t CR1;             /*!< USART Control register 1                    Address offset: 0x000 */
  __IO uint32_t CR2;             /*!< USART Control register 2                    Address offset: 0x004 */
  __IO uint32_t CR3;             /*!< USART Control register 3                    Address offset: 0x008 */
  __IO uint32_t BRR;             /*!< USART Baud rate register                    Address offset: 0x00C */
  __IO uint32_t GTPR;            /*!< USART Guard time and prescaler register     Address offset: 0x010 */
  __IO uint32_t RTOR;            /*!< USART Receiver timeout register             Address offset: 0x014 */
  __IO uint32_t RQR;             /*!< USART Request register                      Address offset: 0x018 */
  __IO uint32_t ISR;             /*!< USART Interrupt and status register         Address offset: 0x01C */
  __IO uint32_t ICR;             /*!< USART Interrupt flag Clear register         Address offset: 0x020 */
  __IO uint32_t RDR;             /*!< USART Receive Data register                 Address offset: 0x024 */
  __IO uint32_t TDR;             /*!< USART Transmit Data register                Address offset: 0x028 */
  __IO uint32_t PRESC;           /*!< USART Prescaler register                    Address offset: 0x02C */
  __IO uint32_t AUTOCR;          /*!< USART Autonomous mode Control register      Address offset: 0x030 */
       uint32_t RESERVED0[238];  /*!< Reserved                                    Address offset: 0x034-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< USART Hardware Configuration register 2     Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< USART Hardware Configuration register 1     Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< USART version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< USART Identification register               Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< USART Size Identification register          Address offset: 0x3FC */
} USART_TypeDef;

/*
 * @brief USB3 Global Register Block
 */

typedef struct
{
  __IO uint32_t GSBUSCFG0;         /*!< (null) @ offset 0x0 */
  __IO uint32_t GSBUSCFG1;         /*!< (null) @ offset 0x4 */
  __IO uint32_t GTXTHRCFG;         /*!< (null) @ offset 0x8 */
  __IO uint32_t GRXTHRCFG;         /*!< (null) @ offset 0xc */
  __IO uint32_t GCTL;              /*!< (null) @ offset 0x10 */
  __IO uint32_t GPMSTS;            /*!< (null) @ offset 0x14 */
  __IO uint32_t GSTS;              /*!< (null) @ offset 0x18 */
  __IO uint32_t GUCTL1;            /*!< (null) @ offset 0x1c */
  __IO uint32_t GSNPSID;           /*!< (null) @ offset 0x20 */
  __IO uint32_t GGPIO;             /*!< (null) @ offset 0x24 */
  __IO uint32_t GUID;              /*!< (null) @ offset 0x28 */
  __IO uint32_t GUCTL;             /*!< (null) @ offset 0x2c */
  __IO uint32_t GBUSERRADDRLO;     /*!< (null) @ offset 0x30 */
  __IO uint32_t GBUSERRADDRHI;     /*!< (null) @ offset 0x34 */
  __IO uint32_t GPRTBIMAPLO;       /*!< (null) @ offset 0x38 */
  __IO uint32_t GPRTBIMAPHI;       /*!< (null) @ offset 0x3c */
  __IO uint32_t GHWPARAMS0;        /*!< (null) @ offset 0x40 */
  __IO uint32_t GHWPARAMS1;        /*!< (null) @ offset 0x44 */
  __IO uint32_t GHWPARAMS2;        /*!< (null) @ offset 0x48 */
  __IO uint32_t GHWPARAMS3;        /*!< (null) @ offset 0x4c */
  __IO uint32_t GHWPARAMS4;        /*!< (null) @ offset 0x50 */
  __IO uint32_t GHWPARAMS5;        /*!< (null) @ offset 0x54 */
  __IO uint32_t GHWPARAMS6;        /*!< (null) @ offset 0x58 */
  __IO uint32_t GHWPARAMS7;        /*!< (null) @ offset 0x5c */
  __IO uint32_t GDBGFIFOSPACE;     /*!< (null) @ offset 0x60 */
  __IO uint32_t GDBGLTSSM;         /*!< (null) @ offset 0x64 */
  __IO uint32_t GDBGLNMCC;         /*!< (null) @ offset 0x68 */
  __IO uint32_t GDBGBMU;           /*!< (null) @ offset 0x6c */
  __IO uint32_t GDBGLSPMUX_HST;    /*!< (null) @ offset 0x70 */
  __IO uint32_t GDBGLSP;           /*!< (null) @ offset 0x74 */
  __IO uint32_t GDBGEPINFO0;       /*!< (null) @ offset 0x78 */
  __IO uint32_t GDBGEPINFO1;       /*!< (null) @ offset 0x7c */
  __IO uint32_t GPRTBIMAP_HSLO;    /*!< (null) @ offset 0x80 */
  __IO uint32_t GPRTBIMAP_HSHI;    /*!< (null) @ offset 0x84 */
  __IO uint32_t GPRTBIMAP_FSLO;    /*!< (null) @ offset 0x88 */
  __IO uint32_t GPRTBIMAP_FSHI;    /*!< (null) @ offset 0x8c */
       uint32_t RESERVED0;         /*!< Reserved @ offset 0x90 */
       uint32_t Reserved_94;       /*!< (null) @ offset 0x94 */
       uint32_t Reserved_98;       /*!< (null) @ offset 0x98 */
  __IO uint32_t GUCTL2;            /*!< (null) @ offset 0x9c */
       uint32_t RESERVED1[24];     /*!< Reserved @ offset 0xa0 */
  __IO uint32_t GUSB2PHYCFG;       /*!< (null) @ offset 0x100 */
       uint32_t RESERVED2[15];     /*!< Reserved @ offset 0x104 */
  __IO uint32_t GUSB2I2CCTL;       /*!< (null) @ offset 0x140 */
       uint32_t RESERVED3[15];     /*!< Reserved @ offset 0x144 */
  __IO uint32_t GUSB2PHYACC_ULPI;  /*!< (null) @ offset 0x180 */
       uint32_t RESERVED4[15];     /*!< Reserved @ offset 0x184 */
  __IO uint32_t GUSB3PIPECTL;      /*!< (null) @ offset 0x1c0 */
       uint32_t RESERVED5[15];     /*!< Reserved @ offset 0x1c4 */
  __IO uint32_t GTXFIFOSIZ0;       /*!< (null) @ offset 0x200 */
  __IO uint32_t GTXFIFOSIZ1;       /*!< (null) @ offset 0x204 */
  __IO uint32_t GTXFIFOSIZ2;       /*!< (null) @ offset 0x208 */
  __IO uint32_t GTXFIFOSIZ3;       /*!< (null) @ offset 0x20c */
  __IO uint32_t GTXFIFOSIZ4;       /*!< (null) @ offset 0x210 */
  __IO uint32_t GTXFIFOSIZ5;       /*!< (null) @ offset 0x214 */
  __IO uint32_t GTXFIFOSIZ6;       /*!< (null) @ offset 0x218 */
  __IO uint32_t GTXFIFOSIZ7;       /*!< (null) @ offset 0x21c */
  __IO uint32_t GTXFIFOSIZ8;       /*!< (null) @ offset 0x220 */
  __IO uint32_t GTXFIFOSIZ9;       /*!< (null) @ offset 0x224 */
  __IO uint32_t GTXFIFOSIZ10;      /*!< (null) @ offset 0x228 */
  __IO uint32_t GTXFIFOSIZ11;      /*!< (null) @ offset 0x22c */
       uint32_t RESERVED6[20];     /*!< Reserved @ offset 0x230 */
  __IO uint32_t GRXFIFOSIZ0;       /*!< (null) @ offset 0x280 */
  __IO uint32_t GRXFIFOSIZ1;       /*!< (null) @ offset 0x284 */
  __IO uint32_t GRXFIFOSIZ2;       /*!< (null) @ offset 0x288 */
       uint32_t RESERVED7[29];     /*!< Reserved @ offset 0x28c */
  __IO uint32_t GEVNTADRLO;        /*!< (null) @ offset 0x300 */
  __IO uint32_t GEVNTADRHI;        /*!< (null) @ offset 0x304 */
  __IO uint32_t GEVNTSIZ;          /*!< (null) @ offset 0x308 */
  __IO uint32_t GEVNTCOUNT;        /*!< (null) @ offset 0x30c */
       uint32_t RESERVED8[124];    /*!< Reserved @ offset 0x310 */
  __IO uint32_t GHWPARAMS8;        /*!< (null) @ offset 0x500 */
       uint32_t RESERVED9[3];      /*!< Reserved @ offset 0x504 */
  __IO uint32_t GTXFIFOPRIDEV;     /*!< (null) @ offset 0x510 */
       uint32_t RESERVED10;        /*!< Reserved @ offset 0x514 */
  __IO uint32_t GTXFIFOPRIHST;     /*!< (null) @ offset 0x518 */
  __IO uint32_t GRXFIFOPRIHST;     /*!< (null) @ offset 0x51c */
       uint32_t RESERVED11;        /*!< Reserved @ offset 0x520 */
  __IO uint32_t GDMAHLRATIO;       /*!< (null) @ offset 0x524 */
       uint32_t RESERVED12[2];     /*!< Reserved @ offset 0x528 */
  __IO uint32_t GFLADJ;            /*!< (null) @ offset 0x530 */
       uint32_t RESERVED[0xCC/4];  /*!< Reserved @ offset 0x534 */
} USB3_GBL_TypeDef;

/*
 * @brief USB3 Device Register Block
 */

typedef struct
{
  __IO uint32_t DCFG;             /*!< (null) @ offset 0x0 */
  __IO uint32_t DCTL;             /*!< (null) @ offset 0x4 */
  __IO uint32_t DEVTEN;           /*!< (null) @ offset 0x8 */
  __IO uint32_t DSTS;             /*!< (null) @ offset 0xc */
  __IO uint32_t DGCMDPAR;         /*!< (null) @ offset 0x10 */
  __IO uint32_t DGCMD;            /*!< (null) @ offset 0x14 */
       uint32_t RESERVED13[2];    /*!< Reserved @ offset 0x18 */
  __IO uint32_t DALEPENA;         /*!< (null) @ offset 0x20 */
  __IO uint32_t Rsvd;             /*!< (null) @ offset 0x24 */
       uint32_t RESERVED14[54];   /*!< Reserved @ offset 0x28 */
  __IO uint32_t DEPCMDPAR2;       /*!< (null) @ offset 0x100 */
  __IO uint32_t DEPCMDPAR1;       /*!< (null) @ offset 0x104 */
  __IO uint32_t DEPCMDPAR0;       /*!< (null) @ offset 0x108 */
  __IO uint32_t DEPCMD;           /*!< (null) @ offset 0x10c */
       uint32_t RESERVED15[124];  /*!< Reserved @ offset 0x110 */
  __IO uint32_t DEV_IMOD;         /*!< (null) @ offset 0x300 */
       uint32_t RESERVED[0xFC/4]; /*!< Reserved @ offset 0x304 */
} USB3_DEV_TypeDef;

/*
 * @brief USB3 BC Register Block
 */

typedef struct
{
  __IO uint32_t BCFG;        /*!< (null) @ offset 0x0 */
       uint32_t RESERVED16;  /*!< Reserved @ offset 0x4 */
  __IO uint32_t BCEVT;       /*!< (null) @ offset 0x8 */
  __IO uint32_t BCEVTEN;     /*!< (null) @ offset 0xc */
} USB3_BC_TypeDef;

/*
 * @brief USB3 eXtensible Host Controller Capability Register Block
 */

typedef struct
{
  __IO uint32_t CAPLENGTH;   /*!< (null) @ offset 0x0 */
  __IO uint32_t HCSPARAMS1;  /*!< (null) @ offset 0x4 */
  __IO uint32_t HCSPARAMS2;  /*!< (null) @ offset 0x8 */
  __IO uint32_t HCSPARAMS3;  /*!< (null) @ offset 0xc */
  __IO uint32_t HCCPARAMS1;  /*!< (null) @ offset 0x10 */
  __IO uint32_t DBOFF;       /*!< (null) @ offset 0x14 */
  __IO uint32_t RTSOFF;      /*!< (null) @ offset 0x18 */
  __IO uint32_t HCCPARAMS2;  /*!< (null) @ offset 0x1c */
} USB3_XHCC_TypeDef;

/*
 * @brief USB3 Host Cntrl Oper Regs Block
 */

typedef struct
{
  __IO uint32_t USBCMD;         /*!< (null) @ offset 0x0 */
  __IO uint32_t USBSTS;         /*!< (null) @ offset 0x4 */
  __IO uint32_t PAGESIZE;       /*!< (null) @ offset 0x8 */
       uint32_t RESERVED17[2];  /*!< Reserved @ offset 0xc */
  __IO uint32_t DNCTRL;         /*!< (null) @ offset 0x14 */
  __IO uint32_t CRCR_LO;        /*!< (null) @ offset 0x18 */
  __IO uint32_t CRCR_HI;        /*!< (null) @ offset 0x1c */
       uint32_t RESERVED18[4];  /*!< Reserved @ offset 0x20 */
  __IO uint32_t DCBAAP_LO;      /*!< (null) @ offset 0x30 */
  __IO uint32_t DCBAAP_HI;      /*!< (null) @ offset 0x34 */
  __IO uint32_t CONFIG;         /*!< (null) @ offset 0x38 */
       uint32_t RESERVED[0x3c4/4];    /*!< Reserved @ offset 0x3c */
} USB3_HCO_TypeDef;

/*
 * @brief USB3 Host Cntrl Port Reg Set Block
 */

typedef struct
{
  __IO uint32_t PORTSC_20;     /*!< (null) @ offset 0x0 */
  __IO uint32_t PORTPMSC_20;   /*!< (null) @ offset 0x4 */
  __IO uint32_t PORTLI_20;     /*!< (null) @ offset 0x8 */
  __IO uint32_t PORTHLPMC_20;  /*!< (null) @ offset 0xc */
  __IO uint32_t PORTSC_30;     /*!< (null) @ offset 0x10 */
  __IO uint32_t PORTPMSC_30;   /*!< (null) @ offset 0x14 */
  __IO uint32_t PORTLI_30;     /*!< (null) @ offset 0x18 */
  __IO uint32_t PORTHLPMC_30;  /*!< (null) @ offset 0x1c */
} USB3_HCP_TypeDef;

/*
 * @brief USB3 Host Cntrl Runtime Regs Block
 */

typedef struct
{
  __IO uint32_t MFINDEX;  /*!< (null) @ offset 0x0 */
  __IO uint32_t RsvdZ;    /*!< (null) @ offset 0x4 */
       uint32_t RESERVED[0x14/4];    /*!< Reserved @ offset 0x8 */
} USB3_HCR_TypeDef;

/*
 * @brief USB3 Interrupter Regs Block
 */

typedef struct
{
  __IO uint32_t IMAN;       /*!< (null) @ offset 0x0 */
  __IO uint32_t IMOD;       /*!< (null) @ offset 0x4 */
  __IO uint32_t ERSTSZ;     /*!< (null) @ offset 0x8 */
  __IO uint32_t RsvdP;      /*!< (null) @ offset 0xc */
  __IO uint32_t ERSTBA_LO;  /*!< (null) @ offset 0x10 */
  __IO uint32_t ERSTBA_HI;  /*!< (null) @ offset 0x14 */
  __IO uint32_t ERDP_LO;    /*!< (null) @ offset 0x18 */
  __IO uint32_t ERDP_HI;    /*!< (null) @ offset 0x1c */
} USB3_IT_TypeDef;

/*
 * @brief USB3 Doorbell Reg Block
 */

typedef struct
{
  __IO uint32_t DB;  /*!< (null) @ offset 0x0 */
       uint32_t RESERVED[0x100/4];    /*!< Reserved @ offset 0x4 */
} USB3_DB_TypeDef;

/*
 * @brief USB3 HC Extended Capability Register Block
 */

typedef struct
{
  __IO uint32_t USBLEGSUP;     /*!< (null) @ offset 0x0 */
  __IO uint32_t USBLEGCTLSTS;  /*!< (null) @ offset 0x4 */
       uint32_t RESERVED[0x8/4];    /*!< Reserved @ offset 0x8 */
} USB3_HCEC_TypeDef;

/*
 * @brief USB3 xHCI Supported Protocol Capability (USB 2.0) Block
 */

typedef struct
{
  __IO uint32_t SUPTPRT2_DW0;  /*!< (null) @ offset 0x0 */
  __IO uint32_t SUPTPRT2_DW1;  /*!< (null) @ offset 0x4 */
  __IO uint32_t SUPTPRT2_DW2;  /*!< (null) @ offset 0x8 */
  __IO uint32_t SUPTPRT2_DW3;  /*!< (null) @ offset 0xc */
} USB3_HCISPC2_TypeDef;

/*
 * @brief USB3 xHCI Supported Protocol Capability (USB 3.0) Block
 */

typedef struct
{
  __IO uint32_t SUPTPRT3_DW0;  /*!< (null) @ offset 0x0 */
  __IO uint32_t SUPTPRT3_DW1;  /*!< (null) @ offset 0x4 */
  __IO uint32_t SUPTPRT3_DW2;  /*!< (null) @ offset 0x8 */
  __IO uint32_t SUPTPRT3_DW3;  /*!< (null) @ offset 0xc */
} USB3_HCISPC3_TypeDef;

/*
 * @brief USB3 Register Block
 */

typedef struct
{
  USB3_XHCC_TypeDef XHCCREGS;       /*!< Global Register Block @ offset 0x0 */
  USB3_HCO_TypeDef HCOREGS;         /*!< Global Register Block @ offset 0x20 */
  USB3_HCP_TypeDef HCPREGS;         /*!< Global Register Block @ offset 0x420 */
  USB3_HCR_TypeDef HCRREGS;         /*!< Global Register Block @ offset 0x440 */
  uint32_t RESERVED0;               /*!< Reserved              @ offset 0x45c */
  USB3_IT_TypeDef  ITREGS;          /*!< Global Register Block @ offset 0x460 */
  USB3_DB_TypeDef  DBREGS;          /*!< Global Register Block @ offset 0x480 */
  uint32_t RESERVED1[0x2FC/4];      /*!< Reserved              @ offset 0x584 */
  USB3_HCEC_TypeDef HCECREGS;       /*!< Global Register Block @ offset 0x880 */
  USB3_HCISPC2_TypeDef HCISPC2REGS; /*!< Global Register Block @ offset 0x890 */
  USB3_HCISPC3_TypeDef HCISPC3REGS; /*!< Global Register Block @ offset 0x8a0 */
  uint32_t RESERVED2[0xB850/4];     /*!< Reserved              @ offset 0x8b0 */
  USB3_GBL_TypeDef GBLREGS;         /*!< Global Register Block @ offset 0xc100 */
  USB3_DEV_TypeDef DEVREGS;         /*!< Global Register Block @ offset 0xc700 */
  uint32_t RESERVED3[0x230/4];      /*!< Reserved              @ offset 0xca00 */
  USB3_BC_TypeDef BCREGS;           /*!< Global Register Block @ offset 0xcc30 */
} USB3_TypeDef;

/*
 * @brief Window Watchdog (WWDG)
 */
typedef struct
{
  __IO uint32_t CR;              /*!< Control register                     Address offset: 0x000 */
  __IO uint32_t CFR;             /*!< Configuration register               Address offset: 0x004 */
  __IO uint32_t SR;              /*!< Status register                      Address offset: 0x008 */
       uint32_t RESERVED0[249];  /*!< Reserved                             Address offset: 0x00C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< WWDG hardware configuration register Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< WWDG version register                Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< WWDG ID register                     Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< WWDG size ID register                Address offset: 0x3FC */
} WWDG_TypeDef;

/**
  * @}
  */

/**
 * @}
 */

/** @addtogroup Peripheral_declaration
  * @{
  */
/**
 * @brief stm32mp2 base addresses Definitions :
 */
#define PERIPH_SIZE                         ((uint32_t)0x10000000)  /*!< Size of : AHB/APB Peripherals                                  */

#define SRAMS_SIZE                          ((uint32_t)0x10000000)  /*!< Size of : SRAMs memory region                                  */

#define SYSRAM_SIZE                         ((uint32_t) 256 * 1024U) /*!< Unit is Byte                                                   */
#define SRAM1_SIZE                          (0x20000) /*!< Unit is Byte                                                   */
#define SRAM2_SIZE                          (0x20000) /*!< Unit is Byte                                                   */
#define RETRAM_SIZE                         (0x20000) /*!< Unit is Byte                                                   */
#if defined(STM32MP2XX_ASSY2_2_1)
#define LTDC_SRAM_SIZE                      ((uint32_t)  44 *1024U) /*!< Unit is Byte                                                   */
#else /* STM32MP2XX_ASSY2_2_1 */
#define VDERAM_SIZE                         ((uint32_t) 128 *1024U) /*!< Unit is Byte                                                   */
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define LPSRAM1_SIZE                        ((uint32_t)   8 *1024U) /*!< Unit is Byte                                                   */
#define LPSRAM2_SIZE                        ((uint32_t)   8 *1024U) /*!< Unit is Byte                                                   */
#define LPSRAM3_SIZE                        ((uint32_t)  16 *1024U) /*!< Unit is Byte                                                   */
#if defined(STM32MP2XX_ASSY2_2_1)
#define BKP_SRAM_SIZE                       ((uint32_t)   4 *1024U) /*!< Unit is Byte                                                   */
#else /* STM32MP2XX_ASSY2_2_1 */
#define BKP_SRAM_SIZE                       ((uint32_t)   8 *1024U) /*!< Unit is Byte                                                   */
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define CAN_SRAM_SIZE                       ((uint32_t)  10 *1024U) /*!< Unit is Byte                                                   */

#define MPU_AXI_BUS_MEMORY_BASE             ((uint32_t)0x50000000) /*!< Base address of : AXI Bus                                       */

#define QSPI_MEM_BASE                       (MPU_AXI_BUS_MEMORY_BASE + 0x10000000) /*!< Base address of : QSPI memories  accessible over AXI    */
#define FMC_NOR_MEM_BASE                    (MPU_AXI_BUS_MEMORY_BASE + 0x20000000) /*!< Base address of : FMC NOR memories  accessible over AXI */
#define DRAM_MEM_BASE                       (MPU_AXI_BUS_MEMORY_BASE + 0x30000000) /*!< Base address of : DRAM (DDR) over AXI                   */

#define SRAMS_FETCH_SIZE                    ((uint32_t)0x02000000)        /*!< Size of : SRAMs memory region for CM33 instruction fetch */

/*!< Peripherals Non secure aliases */
#define PERIPH_BASE_NS                      ((uint32_t)0x40000000)        /*!< Base address of : AHB/APB Peripherals                    */

/*!< Memories Non secure aliases */
#define SRAMS_BASE_NS                       ((uint32_t)0x20000000)        /*!< Base address of : SRAMs region                           */

#define SYSRAM_BASE_NS                      (SRAMS_BASE_NS + 0x00000000)  /*!< Base address of : System RAM accessible over AXI         */
#define SRAM1_BASE_NS                       (SRAMS_BASE_NS + 0x00040000)  /*!< Base address of : static data RAM1                       */
#define SRAM2_BASE_NS                       (SRAMS_BASE_NS + 0x00060000)  /*!< Base address of : static data RAM2                       */
#define RETRAM_BASE_NS                      (SRAMS_BASE_NS + 0x00080000)  /*!< Base address of : Retention RAM                          */
#if defined(STM32MP2XX_ASSY2_2_1)
#define LTDC_SRAM_BASE_NS                   (SRAMS_BASE_NS + 0x000A0000)  /*!< Base address of : LTDC static RAM                        */
#else /* STM32MP2XX_ASSY2_2_1 */
#define VDERAM_BASE_NS                      (SRAMS_BASE_NS + 0x000A0000)  /*!< Base address of : VIDEO ENCODE/DECODE static RAM         */
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define LPSRAM1_BASE_NS                     (SRAMS_BASE_NS + 0x000C0000)  /*!< Base address of : Low Power System RAM                   */
#define LPSRAM2_BASE_NS                     (SRAMS_BASE_NS + 0x000C2000)  /*!< Base address of : Low Power System RAM                   */
#define LPSRAM3_BASE_NS                     (SRAMS_BASE_NS + 0x000C4000)  /*!< Base address of : Low Power System RAM                   */

#define CAN_SRAM_BASE_NS                    ((uint32_t)0x40310000)        /*!< Base address of : CAN static  RAM                        */
#define BKP_SRAM_BASE_NS                    ((uint32_t)0x42000000)        /*!< Base address of : backup static  RAM                     */

#define SRAMS_FETCH_BASE_NS                 ((uint32_t)0x0A000000)        /*!< Base address of : SRAMs region for CM33 instruction fetch*/

/*!< Peripherals buses Non secure aliases */
#define APB1_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x00000000)
#define APB2_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x00200000)
#define AHB2_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x00400000)
#define AHB3_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x02000000)
#define APB3_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x04000000)
#define AHB4_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x04200000)
#define SMART_RUN_APB_PERIPH_BASE_NS        (PERIPH_BASE_NS + 0x06000000)
#define SMART_RUN_AHB_PERIPH_BASE_NS        (PERIPH_BASE_NS + 0x06200000)
#define APB4_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x08000000)
#define AHB5_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x08200000)
#define APB_DEBUG_PERIPH_BASE_NS            (PERIPH_BASE_NS + 0x0A000000)
#if ! defined(STM32MP2XX_ASSY2_2_1)
#define AHB6_PERIPH_BASE_NS                 (PERIPH_BASE_NS + 0x0B000000)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

/*!< APB1 peripherals Non secure aliases */
#define TIM2_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x000000)
#define TIM3_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x010000)
#define TIM4_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x020000)
#define TIM5_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x030000)
#define TIM6_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x040000)
#define TIM7_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x050000)
#define TIM12_BASE_NS                       (APB1_PERIPH_BASE_NS + 0x060000)
#define TIM13_BASE_NS                       (APB1_PERIPH_BASE_NS + 0x070000)
#define TIM14_BASE_NS                       (APB1_PERIPH_BASE_NS + 0x080000)
#define LPTIM1_BASE_NS                      (APB1_PERIPH_BASE_NS + 0x090000)
#define LPTIM2_BASE_NS                      (APB1_PERIPH_BASE_NS + 0x0A0000)
#define SPI2_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x0B0000)
#define SPI3_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x0C0000)
#define SPDIFRX_BASE_NS                     (APB1_PERIPH_BASE_NS + 0x0D0000)
#define USART2_BASE_NS                      (APB1_PERIPH_BASE_NS + 0x0E0000)
#define USART3_BASE_NS                      (APB1_PERIPH_BASE_NS + 0x0F0000)
#define UART4_BASE_NS                       (APB1_PERIPH_BASE_NS + 0x100000)
#define UART5_BASE_NS                       (APB1_PERIPH_BASE_NS + 0x110000)
#define I2C1_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x120000)
#define I2C2_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x130000)
#define I2C3_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x140000)
#define I2C4_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x150000)
#define I2C5_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x160000)
#define I2C6_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x170000)
#define I2C7_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x180000)
#define I3C1_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x190000)
#define I3C2_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x1A0000)
#define I3C3_BASE_NS                        (APB1_PERIPH_BASE_NS + 0x1B0000)
#define TIM10_BASE_NS                       (APB1_PERIPH_BASE_NS + 0x1C0000)
#define TIM11_BASE_NS                       (APB1_PERIPH_BASE_NS + 0x1D0000)

/*!< APB2 peripherals Non secure aliases */
#define TIM1_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x000000)
#define TIM8_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x010000)
#define USART6_BASE_NS                      (APB2_PERIPH_BASE_NS + 0x020000)
#define SPI1_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x030000)
#define SPI4_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x040000)
#define TIM15_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x050000)
#define TIM16_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x060000)
#define TIM17_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x070000)
#define SPI5_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x080000)
#define SAI1_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x090000)
#define SAI1_Block_A_BASE_NS                (SAI1_BASE_NS + 0x004)
#define SAI1_Block_B_BASE_NS                (SAI1_BASE_NS + 0x024)
#define SAI2_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x0A0000)
#define SAI2_Block_A_BASE_NS                (SAI2_BASE_NS + 0x004)
#define SAI2_Block_B_BASE_NS                (SAI2_BASE_NS + 0x024)
#define SAI3_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x0B0000)
#define SAI3_Block_A_BASE_NS                (SAI3_BASE_NS + 0x004)
#define SAI3_Block_B_BASE_NS                (SAI3_BASE_NS + 0x024)
#define UART9_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x0C0000)
#define FDCAN1_BASE_NS                      (APB2_PERIPH_BASE_NS + 0x0D0000)
#define FDCAN2_BASE_NS                      (APB2_PERIPH_BASE_NS + 0x0E0000)
#define FDCAN3_BASE_NS                      (APB2_PERIPH_BASE_NS + 0x0F0000)
#define CANCU_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x100000)
#define CANSRAM_BASE_NS                     (APB2_PERIPH_BASE_NS + 0x110000)
#define TIM20_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x120000)
#define USART1_BASE_NS                      (APB2_PERIPH_BASE_NS + 0x130000)
#define SAI4_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x140000)
#define SAI4_Block_A_BASE_NS                (SAI4_BASE_NS + 0x004)
#define SAI4_Block_B_BASE_NS                (SAI4_BASE_NS + 0x024)
#define SPI6_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x150000)
#define SPI7_BASE_NS                        (APB2_PERIPH_BASE_NS + 0x160000)
#define UART7_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x170000)
#define UART8_BASE_NS                       (APB2_PERIPH_BASE_NS + 0x180000)

/*!< AHB2 peripherals Non secure aliases */
#define HPDMA1_BASE_NS                      (AHB2_PERIPH_BASE_NS + 0x000000)
#define HPDMA2_BASE_NS                      (AHB2_PERIPH_BASE_NS + 0x010000)
#define HPDMA3_BASE_NS                      (AHB2_PERIPH_BASE_NS + 0x020000)
#define OCTOSPI1_BASE_NS                    (AHB2_PERIPH_BASE_NS + 0x030000)
#define OCTOSPI2_BASE_NS                    (AHB2_PERIPH_BASE_NS + 0x040000)
#define OCTO1_OTFD_CRYPTO2_BASE_NS          (AHB2_PERIPH_BASE_NS + 0x050000)
#define OCTO2_OTFD_CRYPTO2_BASE_NS          (AHB2_PERIPH_BASE_NS + 0x060000)
#define ICACHE_BASE_NS                      (AHB2_PERIPH_BASE_NS + 0x070000)
#define DCACHE_BASE_NS                      (AHB2_PERIPH_BASE_NS + 0x080000)
#define IPCC1_BASE_NS                       (AHB2_PERIPH_BASE_NS + 0x090000)
#define IPCC1_C1_BASE_NS                    (IPCC1_BASE_NS)
#define IPCC1_C2_BASE_NS                    (IPCC1_BASE_NS + 0x10)
#define DCMI_BASE_NS                        (AHB2_PERIPH_BASE_NS + 0x0A0000)
#define PSSI_BASE_NS                        (AHB2_PERIPH_BASE_NS + 0x0B0000)
#define CRC_BASE_NS                         (AHB2_PERIPH_BASE_NS + 0x0C0000)
#define MDF1_BASE_NS                        (AHB2_PERIPH_BASE_NS + 0x0D0000)
#define ADC12_BASE_NS                       (AHB2_PERIPH_BASE_NS + 0x0E0000)
#define ADC3_BASE_NS                        (AHB2_PERIPH_BASE_NS + 0x0F0000)
#define IOMANAGER_BASE_NS                   (AHB2_PERIPH_BASE_NS + 0x100000)

#define HPDMA1_Channel0_BASE_NS             (HPDMA1_BASE_NS + 0x0050U)
#define HPDMA1_Channel1_BASE_NS             (HPDMA1_BASE_NS + 0x00D0U)
#define HPDMA1_Channel2_BASE_NS             (HPDMA1_BASE_NS + 0x0150U)
#define HPDMA1_Channel3_BASE_NS             (HPDMA1_BASE_NS + 0x01D0U)
#define HPDMA1_Channel4_BASE_NS             (HPDMA1_BASE_NS + 0x0250U)
#define HPDMA1_Channel5_BASE_NS             (HPDMA1_BASE_NS + 0x02D0U)
#define HPDMA1_Channel6_BASE_NS             (HPDMA1_BASE_NS + 0x0350U)
#define HPDMA1_Channel7_BASE_NS             (HPDMA1_BASE_NS + 0x03D0U)
#define HPDMA1_Channel8_BASE_NS             (HPDMA1_BASE_NS + 0x0450U)
#define HPDMA1_Channel9_BASE_NS             (HPDMA1_BASE_NS + 0x04D0U)
#define HPDMA1_Channel10_BASE_NS            (HPDMA1_BASE_NS + 0x0550U)
#define HPDMA1_Channel11_BASE_NS            (HPDMA1_BASE_NS + 0x05D0U)
#define HPDMA1_Channel12_BASE_NS            (HPDMA1_BASE_NS + 0x0650U)
#define HPDMA1_Channel13_BASE_NS            (HPDMA1_BASE_NS + 0x06D0U)
#define HPDMA1_Channel14_BASE_NS            (HPDMA1_BASE_NS + 0x0750U)
#define HPDMA1_Channel15_BASE_NS            (HPDMA1_BASE_NS + 0x07D0U)

#define HPDMA2_Channel0_BASE_NS             (HPDMA2_BASE_NS + 0x0050U)
#define HPDMA2_Channel1_BASE_NS             (HPDMA2_BASE_NS + 0x00D0U)
#define HPDMA2_Channel2_BASE_NS             (HPDMA2_BASE_NS + 0x0150U)
#define HPDMA2_Channel3_BASE_NS             (HPDMA2_BASE_NS + 0x01D0U)
#define HPDMA2_Channel4_BASE_NS             (HPDMA2_BASE_NS + 0x0250U)
#define HPDMA2_Channel5_BASE_NS             (HPDMA2_BASE_NS + 0x02D0U)
#define HPDMA2_Channel6_BASE_NS             (HPDMA2_BASE_NS + 0x0350U)
#define HPDMA2_Channel7_BASE_NS             (HPDMA2_BASE_NS + 0x03D0U)
#define HPDMA2_Channel8_BASE_NS             (HPDMA2_BASE_NS + 0x0450U)
#define HPDMA2_Channel9_BASE_NS             (HPDMA2_BASE_NS + 0x04D0U)
#define HPDMA2_Channel10_BASE_NS            (HPDMA2_BASE_NS + 0x0550U)
#define HPDMA2_Channel11_BASE_NS            (HPDMA2_BASE_NS + 0x05D0U)
#define HPDMA2_Channel12_BASE_NS            (HPDMA2_BASE_NS + 0x0650U)
#define HPDMA2_Channel13_BASE_NS            (HPDMA2_BASE_NS + 0x06D0U)
#define HPDMA2_Channel14_BASE_NS            (HPDMA2_BASE_NS + 0x0750U)
#define HPDMA2_Channel15_BASE_NS            (HPDMA2_BASE_NS + 0x07D0U)

#define HPDMA3_Channel0_BASE_NS             (HPDMA3_BASE_NS + 0x0050U)
#define HPDMA3_Channel1_BASE_NS             (HPDMA3_BASE_NS + 0x00D0U)
#define HPDMA3_Channel2_BASE_NS             (HPDMA3_BASE_NS + 0x0150U)
#define HPDMA3_Channel3_BASE_NS             (HPDMA3_BASE_NS + 0x01D0U)
#define HPDMA3_Channel4_BASE_NS             (HPDMA3_BASE_NS + 0x0250U)
#define HPDMA3_Channel5_BASE_NS             (HPDMA3_BASE_NS + 0x02D0U)
#define HPDMA3_Channel6_BASE_NS             (HPDMA3_BASE_NS + 0x0350U)
#define HPDMA3_Channel7_BASE_NS             (HPDMA3_BASE_NS + 0x03D0U)
#define HPDMA3_Channel8_BASE_NS             (HPDMA3_BASE_NS + 0x0450U)
#define HPDMA3_Channel9_BASE_NS             (HPDMA3_BASE_NS + 0x04D0U)
#define HPDMA3_Channel10_BASE_NS            (HPDMA3_BASE_NS + 0x0550U)
#define HPDMA3_Channel11_BASE_NS            (HPDMA3_BASE_NS + 0x05D0U)
#define HPDMA3_Channel12_BASE_NS            (HPDMA3_BASE_NS + 0x0650U)
#define HPDMA3_Channel13_BASE_NS            (HPDMA3_BASE_NS + 0x06D0U)
#define HPDMA3_Channel14_BASE_NS            (HPDMA3_BASE_NS + 0x0750U)
#define HPDMA3_Channel15_BASE_NS            (HPDMA3_BASE_NS + 0x07D0U)

/*!< AHB3 peripherals Non secure aliases */
#define HASH_BASE_NS                        (AHB3_PERIPH_BASE_NS + 0x010000)
#define HASH_DIGEST_BASE_NS                 (HASH_BASE_NS + 0x310)
#define RNG_BASE_NS                         (AHB3_PERIPH_BASE_NS + 0x020000)
#define CRYP1_BASE_NS                       (AHB3_PERIPH_BASE_NS + 0x030000)
#define CRYP2_BASE_NS                       (AHB3_PERIPH_BASE_NS + 0x040000)
#define SAES_BASE_NS                        (AHB3_PERIPH_BASE_NS + 0x050000)
#define PKA_BASE_NS                         (AHB3_PERIPH_BASE_NS + 0x060000)
#define RAMCFG_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x070000)
#define RAMCFG_SYSRAM_BASE_NS               (RAMCFG_BASE_NS)
#define RAMCFG_SRAM1_BASE_NS                (RAMCFG_BASE_NS + 0x000080)
#define RAMCFG_SRAM2_BASE_NS                (RAMCFG_BASE_NS + 0x000100)
#define RAMCFG_RETRAM_BASE_NS               (RAMCFG_BASE_NS + 0x000180)
#define RAMCFG_LPSRAM1_BASE_NS              (RAMCFG_BASE_NS + 0x000200)
#define RAMCFG_LPSRAM2_BASE_NS              (RAMCFG_BASE_NS + 0x000280)
#define RAMCFG_LPSRAM3_BASE_NS              (RAMCFG_BASE_NS + 0x000300)
#define RAMCFG_BKPSRAM_BASE_NS              (RAMCFG_BASE_NS + 0x000380)
#define RIFSC_BASE_NS                       (AHB3_PERIPH_BASE_NS + 0x080000)
#define RISC_BASE_NS                        (RIFSC_BASE_NS)
#define RIMC_BASE_NS                        (RIFSC_BASE_NS + 0xC00)
#define RIFSC_ID_BASE_NS                    (RIFSC_BASE_NS + 0xFE8)
#define IAC_BASE_NS                         (AHB3_PERIPH_BASE_NS + 0x090000)
#define RISAF1_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x0A0000)
#define RISAF2_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x0B0000)
#define RISAF4_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x0D0000)
#define RISAF5_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x0E0000)
#define RISAB1_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x0F0000)
#define RISAB2_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x100000)
#define RISAB3_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x110000)
#define RISAB4_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x120000)
#define RISAB5_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x130000)
#define RISAB6_BASE_NS                      (AHB3_PERIPH_BASE_NS + 0x140000)

/*!< APB3 peripherals Non secure aliases */
#define BSEC_BASE_NS                        (APB3_PERIPH_BASE_NS + 0x000000)
#define IWDG1_BASE_NS                       (APB3_PERIPH_BASE_NS + 0x010000)
#define IWDG2_BASE_NS                       (APB3_PERIPH_BASE_NS + 0x020000)
#define IWDG3_BASE_NS                       (APB3_PERIPH_BASE_NS + 0x030000)
#define IWDG4_BASE_NS                       (APB3_PERIPH_BASE_NS + 0x040000)
#define WWDG1_BASE_NS                       (APB3_PERIPH_BASE_NS + 0x050000)
#define VREFBUF_BASE_NS                     (APB3_PERIPH_BASE_NS + 0x060000)
#define TEMP_BASE_NS                        (APB3_PERIPH_BASE_NS + 0x070000)
#if defined(STM32MP2XX_ASSY2_2_1)
#define PMB_BASE_NS                         (APB3_PERIPH_BASE_NS + 0x080000)
#else /* STM32MP2XX_ASSY2_2_1 */
#define SERC_BASE_NS                        (APB3_PERIPH_BASE_NS + 0x080000)
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define HDP_BASE_NS                         (APB3_PERIPH_BASE_NS + 0x090000)
#define IS2M_BASE_NS                        (APB3_PERIPH_BASE_NS + 0x0A0000)

/*!< AHB4 peripherals Non secure aliases */
#define RCC_BASE_NS                         (AHB4_PERIPH_BASE_NS + 0x00000)
#define PWR_BASE_NS                         (AHB4_PERIPH_BASE_NS + 0x10000)
#define EXTI1_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0x20000)
#define EXTI1_C1_BASE_NS                    (EXTI1_BASE_NS + 0x80)
#define EXTI1_C2_BASE_NS                    (EXTI1_BASE_NS + 0xC0)
#define EXTI1_C3_BASE_NS                    (EXTI1_BASE_NS + 0x100)
#define SYSCFG_BASE_NS                      (AHB4_PERIPH_BASE_NS + 0x30000)
#define GPIOA_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0x40000)
#define GPIOB_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0x50000)
#define GPIOC_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0x60000)
#define GPIOD_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0x70000)
#define GPIOE_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0x80000)
#define GPIOF_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0x90000)
#define GPIOG_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0xA0000)
#define GPIOH_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0xB0000)
#define GPIOI_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0xC0000)
#define GPIOJ_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0xD0000)
#define GPIOK_BASE_NS                       (AHB4_PERIPH_BASE_NS + 0xE0000)

/*!< SMART_RUN_APB peripherals Non secure aliases */
#define RTC_BASE_NS                         (SMART_RUN_APB_PERIPH_BASE_NS + 0x00000)
#define TAMP_BASE_NS                        (SMART_RUN_APB_PERIPH_BASE_NS + 0x10000)
#define SPI8_BASE_NS                        (SMART_RUN_APB_PERIPH_BASE_NS + 0x20000)
#define LPUART1_BASE_NS                     (SMART_RUN_APB_PERIPH_BASE_NS + 0x30000)
#define I2C8_BASE_NS                        (SMART_RUN_APB_PERIPH_BASE_NS + 0x40000)
#define LPTIM3_BASE_NS                      (SMART_RUN_APB_PERIPH_BASE_NS + 0x50000)
#define LPTIM4_BASE_NS                      (SMART_RUN_APB_PERIPH_BASE_NS + 0x60000)
#define LPTIM5_BASE_NS                      (SMART_RUN_APB_PERIPH_BASE_NS + 0x70000)
#if defined(STM32MP2XX_ASSY2_2_1)
#define CEC_BASE_NS                         (SMART_RUN_APB_PERIPH_BASE_NS + 0x80000)
#else /* STM32MP2XX_ASSY2_2_1 */
#define I3C4_BASE_NS                        (SMART_RUN_APB_PERIPH_BASE_NS + 0x80000)
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define IWDG5_BASE_NS                       (SMART_RUN_APB_PERIPH_BASE_NS + 0x90000)
#define WWDG2_BASE_NS                       (SMART_RUN_APB_PERIPH_BASE_NS + 0xA0000)
#if defined(STM32MP2XX_ASSY2_2_1)
#define I3C4_BASE_NS                        (SMART_RUN_APB_PERIPH_BASE_NS + 0xB0000)
#endif /* STM32MP2XX_ASSY2_2_1 */

/*!< SMART_RUN_AHB peripherals Non secure aliases */
#define GPIOZ_BASE_NS                       (SMART_RUN_AHB_PERIPH_BASE_NS + 0x00000)
#define LPDMA_BASE_NS                       (SMART_RUN_AHB_PERIPH_BASE_NS + 0x10000)
#define MDF2_BASE_NS                        (SMART_RUN_AHB_PERIPH_BASE_NS + 0x20000)
#define EXTI2_BASE_NS                       (SMART_RUN_AHB_PERIPH_BASE_NS + 0x30000)
#define EXTI2_C1_BASE_NS                    (EXTI2_BASE_NS + 0x80)
#define EXTI2_C2_BASE_NS                    (EXTI2_BASE_NS + 0xC0)
#define EXTI2_C3_BASE_NS                    (EXTI2_BASE_NS + 0x100)
#define HSEM_BASE_NS                        (SMART_RUN_AHB_PERIPH_BASE_NS + 0x40000)
#define IPCC2_BASE_NS                       (SMART_RUN_AHB_PERIPH_BASE_NS + 0x50000)
#define IPCC2_C1_BASE_NS                    (IPCC2_BASE_NS)
#define IPCC2_C2_BASE_NS                    (IPCC2_BASE_NS + 0x10)

#define LPDMA_Channel0_BASE_NS              (LPDMA_BASE_NS + 0x0050U)
#define LPDMA_Channel1_BASE_NS              (LPDMA_BASE_NS + 0x00D0U)
#define LPDMA_Channel2_BASE_NS              (LPDMA_BASE_NS + 0x0150U)
#define LPDMA_Channel3_BASE_NS              (LPDMA_BASE_NS + 0x01D0U)

/*!< APB4 peripherals Non secure aliases */
#define DSI_BASE_NS                         (APB4_PERIPH_BASE_NS + 0x00000)
#define LTDC_BASE_NS                        (APB4_PERIPH_BASE_NS + 0x10000)
#define LTDC_Layer1_BASE_NS                 (LTDC_BASE_NS + 0x100)
#define LTDC_Layer2_BASE_NS                 (LTDC_BASE_NS + 0x200)
#define LTDC_Layer3_BASE_NS                 (LTDC_BASE_NS + 0x300)
#define CSI2HOST_BASE_NS                    (APB4_PERIPH_BASE_NS + 0x20000)
#define DCMIPP_BASE_NS                      (APB4_PERIPH_BASE_NS + 0x30000)
#define DDRC_BASE_NS                        (APB4_PERIPH_BASE_NS + 0x40000)
#define DDRDBG_BASE_NS                      (APB4_PERIPH_BASE_NS + 0x50000)
#define LVDSCTRL_BASE_NS                    (APB4_PERIPH_BASE_NS + 0x60000)
#define STGENR_BASE_NS                      (APB4_PERIPH_BASE_NS + 0x70000)
#define STGENC_BASE_NS                      (APB4_PERIPH_BASE_NS + 0x80000)
#define GICV2M_BASE_NS                      (APB4_PERIPH_BASE_NS + 0x90000)
#define USBTC_BASE_NS                       (APB4_PERIPH_BASE_NS + 0xA0000)
#define BUSPERFM_BASE_NS                    (APB4_PERIPH_BASE_NS + 0xB0000)
#define USB3PCIEPHY_BASE_NS                 (APB4_PERIPH_BASE_NS + 0xC0000)
#if ! defined(STM32MP2XX_ASSY2_2_1)
#define VDEC_BASE_NS                        (APB4_PERIPH_BASE_NS + 0xD0000)
#define VENC_BASE_NS                        (APB4_PERIPH_BASE_NS + 0xE0000)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

/*!< AHB5 peripherals Non secure aliases */
#define FMC_BASE_NS                         (AHB5_PERIPH_BASE_NS + 0x000000)
#define SDMMC1_BASE_NS                      (AHB5_PERIPH_BASE_NS + 0x020000)
#define SDMMC2_BASE_NS                      (AHB5_PERIPH_BASE_NS + 0x030000)
#define SDMMC3_BASE_NS                      (AHB5_PERIPH_BASE_NS + 0x040000)
#define GPU_BASE_NS                         (AHB5_PERIPH_BASE_NS + 0x080000)
#define ETH1_BASE_NS                        (AHB5_PERIPH_BASE_NS + 0x0C0000)
#define ETH2_BASE_NS                        (AHB5_PERIPH_BASE_NS + 0x0D0000)
#define USBH_OHCI_BASE_NS                   (AHB5_PERIPH_BASE_NS + 0x0E0000)
#define USBH_EHCI_BASE_NS                   (AHB5_PERIPH_BASE_NS + 0x0F0000)
#define USB3DRD_BASE_NS                     (AHB5_PERIPH_BASE_NS + 0x100000)
#define A35SSC_BASE_NS                      (AHB5_PERIPH_BASE_NS + 0x600000)
#define FMC_NAND_DATA_BASE_NS               (AHB5_PERIPH_BASE_NS + 0x610000)
#define DDRPHYC_BASE_NS                     (AHB5_PERIPH_BASE_NS + 0xA00000)

/*!< APB_DEBUG peripherals Non secure aliases */
#define DBGMCU_BASE_NS                      (APB_DEBUG_PERIPH_BASE_NS + 0x010000)

#if ! defined(STM32MP2XX_ASSY2_2_1)
/*!< AHB6 peripherals Non secure aliases */
#define ETHSW_MSG_BASE_NS                   (AHB6_PERIPH_BASE_NS + 0x00000000)
#define ETHSW_CFG_BASE_NS                   (AHB6_PERIPH_BASE_NS + 0x01000000)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

/*!< USB registers base address */
#define USB_OTG_GLOBAL_BASE                 ((uint32_t )0x000)
#define USB_OTG_DEVICE_BASE                 ((uint32_t )0x800)
#define USB_OTG_IN_ENDPOINT_BASE            ((uint32_t )0x900)
#define USB_OTG_OUT_ENDPOINT_BASE           ((uint32_t )0xB00)
#define USB_OTG_EP_REG_SIZE                 ((uint32_t )0x20)
#define USB_OTG_HOST_BASE                   ((uint32_t )0x400)
#define USB_OTG_HOST_PORT_BASE              ((uint32_t )0x440)
#define USB_OTG_HOST_CHANNEL_BASE           ((uint32_t )0x500)
#define USB_OTG_HOST_CHANNEL_SIZE           ((uint32_t )0x20)
#define USB_OTG_PCGCCTL_BASE                ((uint32_t )0xE00)
#define USB_OTG_FIFO_BASE                   ((uint32_t )0x1000)
#define USB_OTG_FIFO_SIZE                   ((uint32_t )0x1000)

/*!< FMC Banks registers base address */
#define FMC_Bank1_R_BASE                    (FMC_R_BASE + 0x0000)
#define FMC_Bank1E_R_BASE                   (FMC_R_BASE + 0x0104)
#define FMC_Bank2_R_BASE                    (FMC_R_BASE + 0x0060)
#define FMC_Bank3_R_BASE                    (FMC_R_BASE + 0x0080)
#define FMC_Bank5_6_R_BASE                  (FMC_R_BASE + 0x0140)

#if defined (CORTEX_IN_SECURE_STATE)
/*!< Offset between Non-secure aliases and Secure aliases */
#define  OFFSET_NS_S                        ((uint32_t)0x10000000)

/*!< Peripherals Secure aliases */
#define PERIPH_BASE_S                       (PERIPH_BASE_NS + OFFSET_NS_S)  /*!< Base address of : AHB/APB Peripherals                  */

/*!< Memories Secure aliases */
#define SRAMS_BASE_S                        (SRAMS_BASE_NS + OFFSET_NS_S) /*!< Base address of : SRAMs region                           */

#define SYSRAM_BASE_S                       (SRAMS_BASE_S + 0x00000000)   /*!< Base address of : System RAM accessible over AXI         */
#define SRAM2_BASE_S                        (SRAMS_BASE_S + 0x00060000)   /*!< Base address of : static data RAM1                       */
#define SRAM1_BASE_S                        (SRAMS_BASE_S + 0x00040000)   /*!< Base address of : static data RAM2                       */
#define RETRAM_BASE_S                       (SRAMS_BASE_S + 0x00080000)   /*!< Base address of : Retention RAM                          */
#if defined(STM32MP2XX_ASSY2_2_1)
#define LTDC_SRAM_BASE_S                    (SRAMS_BASE_S + 0x000A0000)   /*!< Base address of : LTDC static RAM                        */
#else /* STM32MP2XX_ASSY2_2_1 */
#define VDERAM_BASE_S                       (SRAMS_BASE_S + 0x000A0000)   /*!< Base address of : VIDEO ENCODE/DECODE static RAM         */
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define LPSRAM1_BASE_S                      (SRAMS_BASE_S + 0x000C0000)   /*!< Base address of : Low Power System RAM                   */
#define LPSRAM2_BASE_S                      (SRAMS_BASE_S + 0x000C2000)   /*!< Base address of : Low Power System RAM                   */
#define LPSRAM3_BASE_S                      (SRAMS_BASE_S + 0x000C4000)   /*!< Base address of : Low Power System RAM                   */

#define BKP_SRAM_BASE_S                     ((uint32_t)0x52000000)  /*!< Base address of : CAN static  RAM                              */
#define CAN_SRAM_BASE_S                     ((uint32_t)0x50310000)  /*!< Base address of : backup static  RAM                           */

#define SRAMS_FETCH_BASE_S                  ((uint32_t)0x0E000000)  /*!< Base address of : SRAMs region for CM33 instruction fetch      */

/*!< Peripherals buses Secure aliases */
#define APB1_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x00000000)
#define APB2_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x00200000)
#define AHB2_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x00400000)
#define AHB3_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x02000000)
#define APB3_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x04000000)
#define AHB4_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x04200000)
#define SMART_RUN_APB_PERIPH_BASE_S        (PERIPH_BASE_S + 0x06000000)
#define SMART_RUN_AHB_PERIPH_BASE_S        (PERIPH_BASE_S + 0x06200000)
#define APB4_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x08000000)
#define AHB5_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x08200000)
#define APB_DEBUG_PERIPH_BASE_S            (PERIPH_BASE_S + 0x0A000000)
#if ! defined(STM32MP2XX_ASSY2_2_1)
#define AHB6_PERIPH_BASE_S                 (PERIPH_BASE_S + 0x0B000000)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

/*!< APB1 peripherals Secure aliases */
#define TIM2_BASE_S                         (APB1_PERIPH_BASE_S + 0x000000)
#define TIM3_BASE_S                         (APB1_PERIPH_BASE_S + 0x010000)
#define TIM4_BASE_S                         (APB1_PERIPH_BASE_S + 0x020000)
#define TIM5_BASE_S                         (APB1_PERIPH_BASE_S + 0x030000)
#define TIM6_BASE_S                         (APB1_PERIPH_BASE_S + 0x040000)
#define TIM7_BASE_S                         (APB1_PERIPH_BASE_S + 0x050000)
#define TIM12_BASE_S                        (APB1_PERIPH_BASE_S + 0x060000)
#define TIM13_BASE_S                        (APB1_PERIPH_BASE_S + 0x070000)
#define TIM14_BASE_S                        (APB1_PERIPH_BASE_S + 0x080000)
#define LPTIM1_BASE_S                       (APB1_PERIPH_BASE_S + 0x090000)
#define LPTIM2_BASE_S                       (APB1_PERIPH_BASE_S + 0x0A0000)
#define SPI2_BASE_S                         (APB1_PERIPH_BASE_S + 0x0B0000)
#define SPI3_BASE_S                         (APB1_PERIPH_BASE_S + 0x0C0000)
#define SPDIFRX_BASE_S                      (APB1_PERIPH_BASE_S + 0x0D0000)
#define USART2_BASE_S                       (APB1_PERIPH_BASE_S + 0x0E0000)
#define USART3_BASE_S                       (APB1_PERIPH_BASE_S + 0x0F0000)
#define UART4_BASE_S                        (APB1_PERIPH_BASE_S + 0x100000)
#define UART5_BASE_S                        (APB1_PERIPH_BASE_S + 0x110000)
#define I2C1_BASE_S                         (APB1_PERIPH_BASE_S + 0x120000)
#define I2C2_BASE_S                         (APB1_PERIPH_BASE_S + 0x130000)
#define I2C3_BASE_S                         (APB1_PERIPH_BASE_S + 0x140000)
#define I2C4_BASE_S                         (APB1_PERIPH_BASE_S + 0x150000)
#define I2C5_BASE_S                         (APB1_PERIPH_BASE_S + 0x160000)
#define I2C6_BASE_S                         (APB1_PERIPH_BASE_S + 0x170000)
#define I2C7_BASE_S                         (APB1_PERIPH_BASE_S + 0x180000)
#define I3C1_BASE_S                         (APB1_PERIPH_BASE_S + 0x190000)
#define I3C2_BASE_S                         (APB1_PERIPH_BASE_S + 0x1A0000)
#define I3C3_BASE_S                         (APB1_PERIPH_BASE_S + 0x1B0000)
#define TIM10_BASE_S                        (APB1_PERIPH_BASE_S + 0x1C0000)
#define TIM11_BASE_S                        (APB1_PERIPH_BASE_S + 0x1D0000)

/*!< APB2 peripherals Secure aliases */
#define TIM1_BASE_S                         (APB2_PERIPH_BASE_S + 0x000000)
#define TIM8_BASE_S                         (APB2_PERIPH_BASE_S + 0x010000)
#define USART6_BASE_S                       (APB2_PERIPH_BASE_S + 0x020000)
#define SPI1_BASE_S                         (APB2_PERIPH_BASE_S + 0x030000)
#define SPI4_BASE_S                         (APB2_PERIPH_BASE_S + 0x040000)
#define TIM15_BASE_S                        (APB2_PERIPH_BASE_S + 0x050000)
#define TIM16_BASE_S                        (APB2_PERIPH_BASE_S + 0x060000)
#define TIM17_BASE_S                        (APB2_PERIPH_BASE_S + 0x070000)
#define SPI5_BASE_S                         (APB2_PERIPH_BASE_S + 0x080000)
#define SAI1_BASE_S                         (APB2_PERIPH_BASE_S + 0x090000)
#define SAI1_Block_A_BASE_S                 (SAI1_BASE_S + 0x004)
#define SAI1_Block_B_BASE_S                 (SAI1_BASE_S + 0x024)
#define SAI2_BASE_S                         (APB2_PERIPH_BASE_S + 0x0A0000)
#define SAI2_Block_A_BASE_S                 (SAI2_BASE_S + 0x004)
#define SAI2_Block_B_BASE_S                 (SAI2_BASE_S + 0x024)
#define SAI3_BASE_S                         (APB2_PERIPH_BASE_S + 0x0B0000)
#define SAI3_Block_A_BASE_S                 (SAI3_BASE_S + 0x004)
#define SAI3_Block_B_BASE_S                 (SAI3_BASE_S + 0x024)
#define UART9_BASE_S                        (APB2_PERIPH_BASE_S + 0x0C0000)
#define FDCAN1_BASE_S                       (APB2_PERIPH_BASE_S + 0x0D0000)
#define FDCAN2_BASE_S                       (APB2_PERIPH_BASE_S + 0x0E0000)
#define FDCAN3_BASE_S                       (APB2_PERIPH_BASE_S + 0x0F0000)
#define CANCU_BASE_S                        (APB2_PERIPH_BASE_S + 0x100000)
#define CANSRAM_BASE_S                      (APB2_PERIPH_BASE_S + 0x110000)
#define TIM20_BASE_S                        (APB2_PERIPH_BASE_S + 0x120000)
#define USART1_BASE_S                       (APB2_PERIPH_BASE_S + 0x130000)
#define SAI4_BASE_S                         (APB2_PERIPH_BASE_S + 0x140000)
#define SAI4_Block_A_BASE_S                 (SAI4_BASE_S + 0x004)
#define SAI4_Block_B_BASE_S                 (SAI4_BASE_S + 0x024)
#define SPI6_BASE_S                         (APB2_PERIPH_BASE_S + 0x150000)
#define SPI7_BASE_S                         (APB2_PERIPH_BASE_S + 0x160000)
#define UART7_BASE_S                        (APB2_PERIPH_BASE_S + 0x170000)
#define UART8_BASE_S                        (APB2_PERIPH_BASE_S + 0x180000)

/*!< AHB2 peripherals Secure aliases */
#define HPDMA1_BASE_S                       (AHB2_PERIPH_BASE_S + 0x000000)
#define HPDMA2_BASE_S                       (AHB2_PERIPH_BASE_S + 0x010000)
#define HPDMA3_BASE_S                       (AHB2_PERIPH_BASE_S + 0x020000)
#define OCTOSPI1_BASE_S                     (AHB2_PERIPH_BASE_S + 0x030000)
#define OCTOSPI2_BASE_S                     (AHB2_PERIPH_BASE_S + 0x040000)
#define OCTO1_OTFD_CRYPTO2_BASE_S           (AHB2_PERIPH_BASE_S + 0x050000)
#define OCTO2_OTFD_CRYPTO2_BASE_S           (AHB2_PERIPH_BASE_S + 0x060000)
#define ICACHE_BASE_S                       (AHB2_PERIPH_BASE_S + 0x070000)
#define DCACHE_BASE_S                       (AHB2_PERIPH_BASE_S + 0x080000)
#define IPCC1_BASE_S                        (AHB2_PERIPH_BASE_S + 0x090000)
#define IPCC1_C1_BASE_S                     (IPCC1_BASE_S)
#define IPCC1_C2_BASE_S                     (IPCC1_BASE_S + 0x10)
#define DCMI_BASE_S                         (AHB2_PERIPH_BASE_S + 0x0A0000)
#define PSSI_BASE_S                         (AHB2_PERIPH_BASE_S + 0x0B0000)
#define CRC_BASE_S                          (AHB2_PERIPH_BASE_S + 0x0C0000)
#define MDF1_BASE_S                         (AHB2_PERIPH_BASE_S + 0x0D0000)
#define ADC12_BASE_S                        (AHB2_PERIPH_BASE_S + 0x0E0000)
#define ADC3_BASE_S                         (AHB2_PERIPH_BASE_S + 0x0F0000)
#define IOMANAGER_BASE_S                    (AHB2_PERIPH_BASE_S + 0x100000)

#define HPDMA1_Channel0_BASE_S              (HPDMA1_BASE_S + 0x0050U)
#define HPDMA1_Channel1_BASE_S              (HPDMA1_BASE_S + 0x00D0U)
#define HPDMA1_Channel2_BASE_S              (HPDMA1_BASE_S + 0x0150U)
#define HPDMA1_Channel3_BASE_S              (HPDMA1_BASE_S + 0x01D0U)
#define HPDMA1_Channel4_BASE_S              (HPDMA1_BASE_S + 0x0250U)
#define HPDMA1_Channel5_BASE_S              (HPDMA1_BASE_S + 0x02D0U)
#define HPDMA1_Channel6_BASE_S              (HPDMA1_BASE_S + 0x0350U)
#define HPDMA1_Channel7_BASE_S              (HPDMA1_BASE_S + 0x03D0U)
#define HPDMA1_Channel8_BASE_S              (HPDMA1_BASE_S + 0x0450U)
#define HPDMA1_Channel9_BASE_S              (HPDMA1_BASE_S + 0x04D0U)
#define HPDMA1_Channel10_BASE_S             (HPDMA1_BASE_S + 0x0550U)
#define HPDMA1_Channel11_BASE_S             (HPDMA1_BASE_S + 0x05D0U)
#define HPDMA1_Channel12_BASE_S             (HPDMA1_BASE_S + 0x0650U)
#define HPDMA1_Channel13_BASE_S             (HPDMA1_BASE_S + 0x06D0U)
#define HPDMA1_Channel14_BASE_S             (HPDMA1_BASE_S + 0x0750U)
#define HPDMA1_Channel15_BASE_S             (HPDMA1_BASE_S + 0x07D0U)

#define HPDMA2_Channel0_BASE_S              (HPDMA2_BASE_S + 0x0050U)
#define HPDMA2_Channel1_BASE_S              (HPDMA2_BASE_S + 0x00D0U)
#define HPDMA2_Channel2_BASE_S              (HPDMA2_BASE_S + 0x0150U)
#define HPDMA2_Channel3_BASE_S              (HPDMA2_BASE_S + 0x01D0U)
#define HPDMA2_Channel4_BASE_S              (HPDMA2_BASE_S + 0x0250U)
#define HPDMA2_Channel5_BASE_S              (HPDMA2_BASE_S + 0x02D0U)
#define HPDMA2_Channel6_BASE_S              (HPDMA2_BASE_S + 0x0350U)
#define HPDMA2_Channel7_BASE_S              (HPDMA2_BASE_S + 0x03D0U)
#define HPDMA2_Channel8_BASE_S              (HPDMA2_BASE_S + 0x0450U)
#define HPDMA2_Channel9_BASE_S              (HPDMA2_BASE_S + 0x04D0U)
#define HPDMA2_Channel10_BASE_S             (HPDMA2_BASE_S + 0x0550U)
#define HPDMA2_Channel11_BASE_S             (HPDMA2_BASE_S + 0x05D0U)
#define HPDMA2_Channel12_BASE_S             (HPDMA2_BASE_S + 0x0650U)
#define HPDMA2_Channel13_BASE_S             (HPDMA2_BASE_S + 0x06D0U)
#define HPDMA2_Channel14_BASE_S             (HPDMA2_BASE_S + 0x0750U)
#define HPDMA2_Channel15_BASE_S             (HPDMA2_BASE_S + 0x07D0U)

#define HPDMA3_Channel0_BASE_S              (HPDMA3_BASE_S + 0x0050U)
#define HPDMA3_Channel1_BASE_S              (HPDMA3_BASE_S + 0x00D0U)
#define HPDMA3_Channel2_BASE_S              (HPDMA3_BASE_S + 0x0150U)
#define HPDMA3_Channel3_BASE_S              (HPDMA3_BASE_S + 0x01D0U)
#define HPDMA3_Channel4_BASE_S              (HPDMA3_BASE_S + 0x0250U)
#define HPDMA3_Channel5_BASE_S              (HPDMA3_BASE_S + 0x02D0U)
#define HPDMA3_Channel6_BASE_S              (HPDMA3_BASE_S + 0x0350U)
#define HPDMA3_Channel7_BASE_S              (HPDMA3_BASE_S + 0x03D0U)
#define HPDMA3_Channel8_BASE_S              (HPDMA3_BASE_S + 0x0450U)
#define HPDMA3_Channel9_BASE_S              (HPDMA3_BASE_S + 0x04D0U)
#define HPDMA3_Channel10_BASE_S             (HPDMA3_BASE_S + 0x0550U)
#define HPDMA3_Channel11_BASE_S             (HPDMA3_BASE_S + 0x05D0U)
#define HPDMA3_Channel12_BASE_S             (HPDMA3_BASE_S + 0x0650U)
#define HPDMA3_Channel13_BASE_S             (HPDMA3_BASE_S + 0x06D0U)
#define HPDMA3_Channel14_BASE_S             (HPDMA3_BASE_S + 0x0750U)
#define HPDMA3_Channel15_BASE_S             (HPDMA3_BASE_S + 0x07D0U)

/*!< AHB3 peripherals Secure aliases */
#define HASH_BASE_S                         (AHB3_PERIPH_BASE_S + 0x010000)
#define HASH_DIGEST_BASE_S                  (HASH_BASE_S + 0x310)
#define RNG_BASE_S                          (AHB3_PERIPH_BASE_S + 0x020000)
#define CRYP1_BASE_S                        (AHB3_PERIPH_BASE_S + 0x030000)
#define CRYP2_BASE_S                        (AHB3_PERIPH_BASE_S + 0x040000)
#define SAES_BASE_S                         (AHB3_PERIPH_BASE_S + 0x050000)
#define PKA_BASE_S                          (AHB3_PERIPH_BASE_S + 0x060000)
#define RAMCFG_BASE_S                       (AHB3_PERIPH_BASE_S + 0x070000)
#define RAMCFG_SYSRAM_BASE_S                (RAMCFG_BASE_S)
#define RAMCFG_SRAM1_BASE_S                 (RAMCFG_BASE_S + 0x000080)
#define RAMCFG_SRAM2_BASE_S                 (RAMCFG_BASE_S + 0x000100)
#define RAMCFG_RETRAM_BASE_S                (RAMCFG_BASE_S + 0x000180)
#define RAMCFG_LPSRAM1_BASE_S               (RAMCFG_BASE_S + 0x000200)
#define RAMCFG_LPSRAM2_BASE_S               (RAMCFG_BASE_S + 0x000280)
#define RAMCFG_LPSRAM3_BASE_S               (RAMCFG_BASE_S + 0x000300)
#define RAMCFG_BKPSRAM_BASE_S               (RAMCFG_BASE_S + 0x000380)
#define RIFSC_BASE_S                        (AHB3_PERIPH_BASE_S + 0x080000)
#define RISC_BASE_S                         (RIFSC_BASE_S)
#define RIMC_BASE_S                         (RIFSC_BASE_S + 0xC00)
#define RIFSC_ID_BASE_S                     (RIFSC_BASE_S + 0xFE8)
#define IAC_BASE_S                          (AHB3_PERIPH_BASE_S + 0x090000)
#define RISAF1_BASE_S                       (AHB3_PERIPH_BASE_S + 0x0A0000)
#define RISAF2_BASE_S                       (AHB3_PERIPH_BASE_S + 0x0B0000)
#define RISAF4_BASE_S                       (AHB3_PERIPH_BASE_S + 0x0D0000)
#define RISAF5_BASE_S                       (AHB3_PERIPH_BASE_S + 0x0E0000)
#define RISAB1_BASE_S                       (AHB3_PERIPH_BASE_S + 0x0F0000)
#define RISAB2_BASE_S                       (AHB3_PERIPH_BASE_S + 0x100000)
#define RISAB3_BASE_S                       (AHB3_PERIPH_BASE_S + 0x110000)
#define RISAB4_BASE_S                       (AHB3_PERIPH_BASE_S + 0x120000)
#define RISAB5_BASE_S                       (AHB3_PERIPH_BASE_S + 0x130000)
#define RISAB6_BASE_S                       (AHB3_PERIPH_BASE_S + 0x140000)

/*!< APB3 peripherals Secure aliases */
#define BSEC_BASE_S                         (APB3_PERIPH_BASE_S + 0x000000)
#define IWDG1_BASE_S                        (APB3_PERIPH_BASE_S + 0x010000)
#define IWDG2_BASE_S                        (APB3_PERIPH_BASE_S + 0x020000)
#define IWDG3_BASE_S                        (APB3_PERIPH_BASE_S + 0x030000)
#define IWDG4_BASE_S                        (APB3_PERIPH_BASE_S + 0x040000)
#define WWDG1_BASE_S                        (APB3_PERIPH_BASE_S + 0x050000)
#define VREFBUF_BASE_S                      (APB3_PERIPH_BASE_S + 0x060000)
#define TEMP_BASE_S                         (APB3_PERIPH_BASE_S + 0x070000)
#if defined(STM32MP2XX_ASSY2_2_1)
#define PMB_BASE_S                          (APB3_PERIPH_BASE_S + 0x080000)
#else /* STM32MP2XX_ASSY2_2_1 */
#define SERC_BASE_S                         (APB3_PERIPH_BASE_S + 0x080000)
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define HDP_BASE_S                          (APB3_PERIPH_BASE_S + 0x090000)
#define IS2M_BASE_S                         (APB3_PERIPH_BASE_S + 0x0A0000)

/*!< AHB4 peripherals Secure aliases */
#define RCC_BASE_S                          (AHB4_PERIPH_BASE_S + 0x00000)
#define PWR_BASE_S                          (AHB4_PERIPH_BASE_S + 0x10000)
#define EXTI1_BASE_S                        (AHB4_PERIPH_BASE_S + 0x20000)
#define EXTI1_C1_BASE_S                     (EXTI1_BASE_S + 0x80)
#define EXTI1_C2_BASE_S                     (EXTI1_BASE_S + 0xC0)
#define EXTI1_C3_BASE_S                     (EXTI1_BASE_S + 0x100)
#define SYSCFG_BASE_S                       (AHB4_PERIPH_BASE_S + 0x30000)
#define GPIOA_BASE_S                        (AHB4_PERIPH_BASE_S + 0x40000)
#define GPIOB_BASE_S                        (AHB4_PERIPH_BASE_S + 0x50000)
#define GPIOC_BASE_S                        (AHB4_PERIPH_BASE_S + 0x60000)
#define GPIOD_BASE_S                        (AHB4_PERIPH_BASE_S + 0x70000)
#define GPIOE_BASE_S                        (AHB4_PERIPH_BASE_S + 0x80000)
#define GPIOF_BASE_S                        (AHB4_PERIPH_BASE_S + 0x90000)
#define GPIOG_BASE_S                        (AHB4_PERIPH_BASE_S + 0xA0000)
#define GPIOH_BASE_S                        (AHB4_PERIPH_BASE_S + 0xB0000)
#define GPIOI_BASE_S                        (AHB4_PERIPH_BASE_S + 0xC0000)
#define GPIOJ_BASE_S                        (AHB4_PERIPH_BASE_S + 0xD0000)
#define GPIOK_BASE_S                        (AHB4_PERIPH_BASE_S + 0xE0000)

/*!< SMART_RUN_APB peripherals Secure aliases */
#define RTC_BASE_S                          (SMART_RUN_APB_PERIPH_BASE_S + 0x00000)
#define TAMP_BASE_S                         (SMART_RUN_APB_PERIPH_BASE_S + 0x10000)
#define SPI8_BASE_S                         (SMART_RUN_APB_PERIPH_BASE_S + 0x20000)
#define LPUART1_BASE_S                      (SMART_RUN_APB_PERIPH_BASE_S + 0x30000)
#define I2C8_BASE_S                         (SMART_RUN_APB_PERIPH_BASE_S + 0x40000)
#define LPTIM3_BASE_S                       (SMART_RUN_APB_PERIPH_BASE_S + 0x50000)
#define LPTIM4_BASE_S                       (SMART_RUN_APB_PERIPH_BASE_S + 0x60000)
#define LPTIM5_BASE_S                       (SMART_RUN_APB_PERIPH_BASE_S + 0x70000)
#if defined(STM32MP2XX_ASSY2_2_1)
#define CEC_BASE_S                          (SMART_RUN_APB_PERIPH_BASE_S + 0x80000)
#else /* STM32MP2XX_ASSY2_2_1 */
#define I3C4_BASE_S                         (SMART_RUN_APB_PERIPH_BASE_S + 0x80000)
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define IWDG5_BASE_S                        (SMART_RUN_APB_PERIPH_BASE_S + 0x90000)
#define WWDG2_BASE_S                        (SMART_RUN_APB_PERIPH_BASE_S + 0xA0000)
#if defined(STM32MP2XX_ASSY2_2_1)
#define I3C4_BASE_S                         (SMART_RUN_APB_PERIPH_BASE_S + 0xB0000)
#endif /* STM32MP2XX_ASSY2_2_1 */

/*!< SMART_RUN_AHB peripherals Secure aliases */
#define GPIOZ_BASE_S                        (SMART_RUN_AHB_PERIPH_BASE_S + 0x00000)
#define LPDMA_BASE_S                        (SMART_RUN_AHB_PERIPH_BASE_S + 0x10000)
#define MDF2_BASE_S                         (SMART_RUN_AHB_PERIPH_BASE_S + 0x20000)
#define EXTI2_BASE_S                        (SMART_RUN_AHB_PERIPH_BASE_S + 0x30000)
#define EXTI2_C1_BASE_S                     (EXTI2_BASE_S + 0x80)
#define EXTI2_C2_BASE_S                     (EXTI2_BASE_S + 0xC0)
#define EXTI2_C3_BASE_S                     (EXTI2_BASE_S + 0x100)
#define HSEM_BASE_S                         (SMART_RUN_AHB_PERIPH_BASE_S + 0x40000)
#define IPCC2_BASE_S                        (SMART_RUN_AHB_PERIPH_BASE_S + 0x50000)
#define IPCC2_C1_BASE_S                     (IPCC2_BASE_S)
#define IPCC2_C2_BASE_S                     (IPCC2_BASE_S + 0x10)

#define LPDMA_Channel0_BASE_S               (LPDMA_BASE_S + 0x0050U)
#define LPDMA_Channel1_BASE_S               (LPDMA_BASE_S + 0x00D0U)
#define LPDMA_Channel2_BASE_S               (LPDMA_BASE_S + 0x0150U)
#define LPDMA_Channel3_BASE_S               (LPDMA_BASE_S + 0x01D0U)

/*!< APB4 peripherals Secure aliases */
#define DSI_BASE_S                          (APB4_PERIPH_BASE_S + 0x00000)
#define LTDC_BASE_S                         (APB4_PERIPH_BASE_S + 0x10000)
#define LTDC_Layer1_BASE_S                  (LTDC_BASE_S + 0x100)
#define LTDC_Layer2_BASE_S                  (LTDC_BASE_S + 0x200)
#define LTDC_Layer3_BASE_S                  (LTDC_BASE_S + 0x300)
#define CSI2HOST_BASE_S                     (APB4_PERIPH_BASE_S + 0x20000)
#define DCMIPP_BASE_S                       (APB4_PERIPH_BASE_S + 0x30000)
#define DDRC_BASE_S                         (APB4_PERIPH_BASE_S + 0x40000)
#define DDRDBG_BASE_S                       (APB4_PERIPH_BASE_S + 0x50000)
#define LVDSCTRL_BASE_S                     (APB4_PERIPH_BASE_S + 0x60000)
#define STGENR_BASE_S                       (APB4_PERIPH_BASE_S + 0x70000)
#define STGENC_BASE_S                       (APB4_PERIPH_BASE_S + 0x80000)
#define GICV2M_BASE_S                       (APB4_PERIPH_BASE_S + 0x90000)
#define USBTC_BASE_S                        (APB4_PERIPH_BASE_S + 0xA0000)
#define BUSPERFM_BASE_S                     (APB4_PERIPH_BASE_S + 0xB0000)
#define USB3PCIEPHY_BASE_S                  (APB4_PERIPH_BASE_S + 0xC0000)
#if ! defined(STM32MP2XX_ASSY2_2_1)
#define VDEC_BASE_S                         (APB4_PERIPH_BASE_S + 0xD0000)
#define VENC_BASE_S                         (APB4_PERIPH_BASE_S + 0xE0000)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

/*!< AHB5 peripherals Secure aliases */
#define FMC_BASE_S                          (AHB5_PERIPH_BASE_S + 0x000000)
#define SDMMC1_BASE_S                       (AHB5_PERIPH_BASE_S + 0x020000)
#define SDMMC2_BASE_S                       (AHB5_PERIPH_BASE_S + 0x030000)
#define SDMMC3_BASE_S                       (AHB5_PERIPH_BASE_S + 0x040000)
#define GPU_BASE_S                          (AHB5_PERIPH_BASE_S + 0x080000)
#define ETH1_BASE_S                         (AHB5_PERIPH_BASE_S + 0x0C0000)
#define ETH2_BASE_S                         (AHB5_PERIPH_BASE_S + 0x0D0000)
#define USBH_OHCI_BASE_S                    (AHB5_PERIPH_BASE_S + 0x0E0000)
#define USBH_EHCI_BASE_S                    (AHB5_PERIPH_BASE_S + 0x0F0000)
#define USB3DRD_BASE_S                      (AHB5_PERIPH_BASE_S + 0x100000)
#define A35SSC_BASE_S                       (AHB5_PERIPH_BASE_S + 0x600000)
#define FMC_NAND_DATA_BASE_S                (AHB5_PERIPH_BASE_S + 0x610000)
#define DDRPHYC_BASE_S                      (AHB5_PERIPH_BASE_S + 0xA00000)

/*!< APB_DEBUG peripherals Secure aliases */
#define DBGMCU_BASE_S                       (APB_DEBUG_PERIPH_BASE_S + 0x010000)

#if ! defined(STM32MP2XX_ASSY2_2_1)
/*!< AHB6 peripherals Secure aliases */
#define ETHSW_MSG_BASE_S                    (AHB6_PERIPH_BASE_S + 0x00000000)
#define ETHSW_CFG_BASE_S                    (AHB6_PERIPH_BASE_S + 0x01000000)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

#endif /* CORTEX_IN_SECURE_STATE */
/**
  * @}
  */
#define TIM2_NS                             ((TIM_TypeDef *) TIM2_BASE_NS)
#define TIM3_NS                             ((TIM_TypeDef *) TIM3_BASE_NS)
#define TIM4_NS                             ((TIM_TypeDef *) TIM4_BASE_NS)
#define TIM5_NS                             ((TIM_TypeDef *) TIM5_BASE_NS)
#define TIM6_NS                             ((TIM_TypeDef *) TIM6_BASE_NS)
#define TIM7_NS                             ((TIM_TypeDef *) TIM7_BASE_NS)
#define TIM12_NS                            ((TIM_TypeDef *) TIM12_BASE_NS)
#define TIM13_NS                            ((TIM_TypeDef *) TIM13_BASE_NS)
#define TIM14_NS                            ((TIM_TypeDef *) TIM14_BASE_NS)
#define LPTIM1_NS                           ((LPTIM_TypeDef *) LPTIM1_BASE_NS)
#define LPTIM2_NS                           ((LPTIM_TypeDef *) LPTIM2_BASE_NS)
#define SPI2_NS                             ((SPI_TypeDef *) SPI2_BASE_NS)
#define SPI3_NS                             ((SPI_TypeDef *) SPI3_BASE_NS)
#define SPDIFRX_NS                          ((SPDIFRX_TypeDef *) SPDIFRX_BASE_NS)
#define USART2_NS                           ((USART_TypeDef *) USART2_BASE_NS)
#define USART3_NS                           ((USART_TypeDef *) USART3_BASE_NS)
#define UART4_NS                            ((USART_TypeDef *) UART4_BASE_NS)
#define UART5_NS                            ((USART_TypeDef *) UART5_BASE_NS)
#define I2C1_NS                             ((I2C_TypeDef *) I2C1_BASE_NS)
#define I2C2_NS                             ((I2C_TypeDef *) I2C2_BASE_NS)
#define I2C3_NS                             ((I2C_TypeDef *) I2C3_BASE_NS)
#define I2C4_NS                             ((I2C_TypeDef *) I2C4_BASE_NS)
#define I2C5_NS                             ((I2C_TypeDef *) I2C5_BASE_NS)
#define I2C6_NS                             ((I2C_TypeDef *) I2C6_BASE_NS)
#define I2C7_NS                             ((I2C_TypeDef *) I2C7_BASE_NS)
#define I3C1_NS                             ((I3C_TypeDef *) I3C1_BASE_NS)
#define I3C2_NS                             ((I3C_TypeDef *) I3C2_BASE_NS)
#define I3C3_NS                             ((I3C_TypeDef *) I3C3_BASE_NS)
#define TIM10_NS                            ((TIM_TypeDef *) TIM10_BASE_NS)
#define TIM11_NS                            ((TIM_TypeDef *) TIM11_BASE_NS)

#define TIM1_NS                             ((TIM_TypeDef *) TIM1_BASE_NS)
#define TIM8_NS                             ((TIM_TypeDef *) TIM8_BASE_NS)
#define USART6_NS                           ((USART_TypeDef *) USART6_BASE_NS)
#define SPI1_NS                             ((SPI_TypeDef *) SPI1_BASE_NS)
#define SPI4_NS                             ((SPI_TypeDef *) SPI4_BASE_NS)
#define TIM15_NS                            ((TIM_TypeDef *) TIM15_BASE_NS)
#define TIM16_NS                            ((TIM_TypeDef *) TIM16_BASE_NS)
#define TIM17_NS                            ((TIM_TypeDef *) TIM17_BASE_NS)
#define SPI5_NS                             ((SPI_TypeDef *) SPI5_BASE_NS)
#define SAI1_NS                             ((SAI_TypeDef *) SAI1_BASE_NS)
#define SAI1_Block_A_NS                     ((SAI_Block_TypeDef *) SAI1_Block_A_BASE_NS)
#define SAI1_Block_B_NS                     ((SAI_Block_TypeDef *) SAI1_Block_B_BASE_NS)
#define SAI2_NS                             ((SAI_TypeDef *) SAI2_BASE_NS)
#define SAI2_Block_A_NS                     ((SAI_Block_TypeDef *) SAI2_Block_A_BASE_NS)
#define SAI2_Block_B_NS                     ((SAI_Block_TypeDef *) SAI2_Block_B_BASE_NS)
#define SAI3_NS                             ((SAI_TypeDef *) SAI3_BASE_NS)
#define SAI3_Block_A_NS                     ((SAI_Block_TypeDef *) SAI3_Block_A_BASE_NS)
#define SAI3_Block_B_NS                     ((SAI_Block_TypeDef *) SAI3_Block_B_BASE_NS)
#define UART9_NS                            ((USART_TypeDef *) UART9_BASE_NS)
#define FDCAN1_NS                           ((FDCAN_GlobalTypeDef *) FDCAN1_BASE_NS)
#define FDCAN2_NS                           ((FDCAN_GlobalTypeDef *) FDCAN2_BASE_NS)
#define FDCAN3_NS                           ((FDCAN_GlobalTypeDef *) FDCAN3_BASE_NS)
#define FDCAN_CCU_NS                        ((FDCAN_ClockCalibrationUnit_TypeDef *) FDCAN_CCU_BASE_NS)
#define TIM20_NS                            ((TIM_TypeDef *) TIM20_BASE_NS)
#define USART1_NS                           ((USART_TypeDef *) USART1_BASE_NS)
#define SAI4_NS                             ((SAI_TypeDef *) SAI4_BASE_NS)
#define SAI4_Block_A_NS                     ((SAI_Block_TypeDef *) SAI4_Block_A_BASE_NS)
#define SAI4_Block_B_NS                     ((SAI_Block_TypeDef *) SAI4_Block_B_BASE_NS)
#define SPI6_NS                             ((SPI_TypeDef *) SPI6_BASE_NS)
#define SPI7_NS                             ((SPI_TypeDef *) SPI7_BASE_NS)
#define UART7_NS                            ((USART_TypeDef *) UART7_BASE_NS)
#define UART8_NS                            ((USART_TypeDef *) UART8_BASE_NS)

#define HPDMA1_NS                           ((DMA_TypeDef *) HPDMA1_BASE_NS)
#define HPDMA2_NS                           ((DMA_TypeDef *) HPDMA2_BASE_NS)
#define HPDMA3_NS                           ((DMA_TypeDef *) HPDMA3_BASE_NS)
#define OCTOSPI1_NS                         ((OCTOSPI_TypeDef *) OCTOSPI1_BASE_NS)
#define OCTOSPI2_NS                         ((OCTOSPI_TypeDef *) OCTOSPI2_BASE_NS)
#define OCTO1_OTFD_CRYPTO2_NS               ((OTFD_CRYPTO2_TypeDef *) OCTO1_OTFD_CRYPTO2_BASE_NS)
#define OCTO2_OTFD_CRYPTO2_NS               ((OTFD_CRYPTO2_TypeDef *) OCTO1_OTFD_CRYPTO2_BASE_NS)
#define ICACHE_NS                           ((ICACHE_TypeDef *) ICACHE_BASE_NS)
#define DCACHE_NS                           ((ICACHE_TypeDef *) DCACHE_BASE_NS)
#define IPCC1_NS                            ((IPCC_TypeDef *) IPCC1_BASE_NS)
#define IPCC1_C1_NS                         ((IPCC_CommonTypeDef *) IPCC1_C1_BASE_NS)
#define IPCC1_C2_NS                         ((IPCC_CommonTypeDef *) IPCC1_C2_BASE_NS)
#define DCMI_NS                             ((DCMI_TypeDef *) DCMI_BASE_NS)
#define PSSI_NS                             ((PSSI_TypeDef *) PSSI_BASE_NS)
#define CRC_NS                              ((CRC_TypeDef *) CRC_BASE_NS)
#define MDF1_NS                             ((MDF_TypeDef *) MDF1_BASE_NS)
#define ADC12_NS                            ((ADC_TypeDef *) ADC12_BASE_NS)
#define ADC3_NS                             ((ADC_TypeDef *) ADC3_BASE_NS)
#define IOMANAGER_NS                        ((IOMANAGER_TypeDef *) IOMANAGER_BASE_NS)

#define HPDMA1_Channel0_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel0_BASE_NS)
#define HPDMA1_Channel1_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel1_BASE_NS)
#define HPDMA1_Channel2_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel2_BASE_NS)
#define HPDMA1_Channel3_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel3_BASE_NS)
#define HPDMA1_Channel4_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel4_BASE_NS)
#define HPDMA1_Channel5_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel5_BASE_NS)
#define HPDMA1_Channel6_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel6_BASE_NS)
#define HPDMA1_Channel7_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel7_BASE_NS)
#define HPDMA1_Channel8_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel8_BASE_NS)
#define HPDMA1_Channel9_NS                  ((DMA_Channel_TypeDef *) HPDMA1_Channel9_BASE_NS)
#define HPDMA1_Channel10_NS                 ((DMA_Channel_TypeDef *) HPDMA1_Channel10_BASE_NS)
#define HPDMA1_Channel11_NS                 ((DMA_Channel_TypeDef *) HPDMA1_Channel11_BASE_NS)
#define HPDMA1_Channel12_NS                 ((DMA_Channel_TypeDef *) HPDMA1_Channel12_BASE_NS)
#define HPDMA1_Channel13_NS                 ((DMA_Channel_TypeDef *) HPDMA1_Channel13_BASE_NS)
#define HPDMA1_Channel14_NS                 ((DMA_Channel_TypeDef *) HPDMA1_Channel14_BASE_NS)
#define HPDMA1_Channel15_NS                 ((DMA_Channel_TypeDef *) HPDMA1_Channel15_BASE_NS)

#define HPDMA2_Channel0_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel0_BASE_NS)
#define HPDMA2_Channel1_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel1_BASE_NS)
#define HPDMA2_Channel2_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel2_BASE_NS)
#define HPDMA2_Channel3_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel3_BASE_NS)
#define HPDMA2_Channel4_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel4_BASE_NS)
#define HPDMA2_Channel5_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel5_BASE_NS)
#define HPDMA2_Channel6_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel6_BASE_NS)
#define HPDMA2_Channel7_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel7_BASE_NS)
#define HPDMA2_Channel8_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel8_BASE_NS)
#define HPDMA2_Channel9_NS                  ((DMA_Channel_TypeDef *) HPDMA2_Channel9_BASE_NS)
#define HPDMA2_Channel10_NS                 ((DMA_Channel_TypeDef *) HPDMA2_Channel10_BASE_NS)
#define HPDMA2_Channel11_NS                 ((DMA_Channel_TypeDef *) HPDMA2_Channel11_BASE_NS)
#define HPDMA2_Channel12_NS                 ((DMA_Channel_TypeDef *) HPDMA2_Channel12_BASE_NS)
#define HPDMA2_Channel13_NS                 ((DMA_Channel_TypeDef *) HPDMA2_Channel13_BASE_NS)
#define HPDMA2_Channel14_NS                 ((DMA_Channel_TypeDef *) HPDMA2_Channel14_BASE_NS)
#define HPDMA2_Channel15_NS                 ((DMA_Channel_TypeDef *) HPDMA2_Channel15_BASE_NS)

#define HPDMA3_Channel0_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel0_BASE_NS)
#define HPDMA3_Channel1_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel1_BASE_NS)
#define HPDMA3_Channel2_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel2_BASE_NS)
#define HPDMA3_Channel3_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel3_BASE_NS)
#define HPDMA3_Channel4_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel4_BASE_NS)
#define HPDMA3_Channel5_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel5_BASE_NS)
#define HPDMA3_Channel6_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel6_BASE_NS)
#define HPDMA3_Channel7_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel7_BASE_NS)
#define HPDMA3_Channel8_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel8_BASE_NS)
#define HPDMA3_Channel9_NS                  ((DMA_Channel_TypeDef *) HPDMA3_Channel9_BASE_NS)
#define HPDMA3_Channel10_NS                 ((DMA_Channel_TypeDef *) HPDMA3_Channel10_BASE_NS)
#define HPDMA3_Channel11_NS                 ((DMA_Channel_TypeDef *) HPDMA3_Channel11_BASE_NS)
#define HPDMA3_Channel12_NS                 ((DMA_Channel_TypeDef *) HPDMA3_Channel12_BASE_NS)
#define HPDMA3_Channel13_NS                 ((DMA_Channel_TypeDef *) HPDMA3_Channel13_BASE_NS)
#define HPDMA3_Channel14_NS                 ((DMA_Channel_TypeDef *) HPDMA3_Channel14_BASE_NS)
#define HPDMA3_Channel15_NS                 ((DMA_Channel_TypeDef *) HPDMA3_Channel15_BASE_NS)

#define HASH_NS                             ((HASH_TypeDef *) HASH_BASE_NS)
#define HASH_DIGEST_NS                      ((HASH_DIGEST_TypeDef *) HASH_DIGEST_BASE_NS)
#define RNG_NS                              ((RNG_TypeDef *) RNG_BASE_NS)
#define CRYP1_NS                            ((CRYP_TypeDef *) CRYP1_BASE_NS)
#define CRYP2_NS                            ((CRYP_TypeDef *) CRYP2_BASE_NS)
#define PKA_NS                              ((PKA_TypeDef *) PKA_BASE_NS)
#define RAMCFG_SYSRAM_NS                    ((RAMCFG_TypeDef *) RAMCFG_SYSRAM_BASE_NS)
#define RAMCFG_SRAM1_NS                     ((RAMCFG_TypeDef *) RAMCFG_SRAM1_BASE_NS)
#define RAMCFG_SRAM2_NS                     ((RAMCFG_TypeDef *) RAMCFG_SRAM2_BASE_NS)
#define RAMCFG_RETRAM_NS                    ((RAMCFG_TypeDef *) RAMCFG_RETRAM_BASE_NS)
#define RAMCFG_LPSRAM1_NS                   ((RAMCFG_TypeDef *) RAMCFG_LPSRAM1_BASE_NS)
#define RAMCFG_LPSRAM2_NS                   ((RAMCFG_TypeDef *) RAMCFG_LPSRAM2_BASE_NS)
#define RAMCFG_LPSRAM3_NS                   ((RAMCFG_TypeDef *) RAMCFG_LPSRAM3_BASE_NS)
#define RAMCFG_BKPSRAM_NS                   ((RAMCFG_TypeDef *) RAMCFG_BKPSRAM_BASE_NS)
#define RISC_NS                             ((RISC_TypeDef *)        RISC_BASE_NS)
#define RIMC_NS                             ((RIMC_TypeDef *)        RIMC_BASE_NS)
#define RIFSC_ID_NS                         ((RIFSC_ID_TypeDef *)    RIFSC_ID_BASE_NS)
#define IAC_NS                              ((IAC_TypeDef *)         IAC_BASE_NS)
#define RISAF1_NS                           ((RISAF_TypeDef *)       RISAF1_BASE_NS)
#define RISAF2_NS                           ((RISAF_TypeDef *)       RISAF2_BASE_NS)
#define RISAF4_NS                           ((RISAF_TypeDef *)       RISAF4_BASE_NS)
#define RISAF5_NS                           ((RISAF_TypeDef *)       RISAF5_BASE_NS)
#define RISAB1_NS                           ((RISAB_TypeDef *)       RISAB1_BASE_NS)
#define RISAB2_NS                           ((RISAB_TypeDef *)       RISAB2_BASE_NS)
#define RISAB3_NS                           ((RISAB_TypeDef *)       RISAB3_BASE_NS)
#define RISAB4_NS                           ((RISAB_TypeDef *)       RISAB4_BASE_NS)
#define RISAB5_NS                           ((RISAB_TypeDef *)       RISAB5_BASE_NS)
#define RISAB6_NS                           ((RISAB_TypeDef *)       RISAB6_BASE_NS)

#define BSEC_NS                             ((BSEC_TypeDef *) BSEC_BASE_NS)
#define IWDG1_NS                            ((IWDG_TypeDef *) IWDG1_BASE_NS)
#define IWDG2_NS                            ((IWDG_TypeDef *) IWDG2_BASE_NS)
#define IWDG3_NS                            ((IWDG_TypeDef *) IWDG3_BASE_NS)
#define IWDG4_NS                            ((IWDG_TypeDef *) IWDG4_BASE_NS)
#define WWDG1_NS                            ((WWDG_TypeDef *) WWDG1_BASE_NS)
#define VREFBUF_NS                          ((VREF_TypeDef *) VREFBUF_BASE_NS)
#define TEMP_NS                             ((TMPSENS_TypeDef *) TEMP_BASE_NS)
#if defined(STM32MP2XX_ASSY2_2_1)
#define PMB_NS                              ((PMB_TypeDef *) PMB_BASE_NS)
#else /* STM32MP2XX_ASSY2_2_1 */
#define SERC_NS                             ((SERC_TypeDef *) SERC_BASE_NS)
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define HDP_NS                              ((HDP_TypeDef *) HDP_BASE_NS)

#define RCC_NS                              ((RCC_TypeDef *) RCC_BASE_NS)
#define PWR_NS                              ((PWR_TypeDef *) PWR_BASE_NS)
#define EXTI1_NS                            ((EXTI_TypeDef *) EXTI1_BASE_NS)
#define EXTI1_C1_NS                         ((EXTI_Core_TypeDef *) EXTI1_C1_BASE_NS)
#define EXTI1_C2_NS                         ((EXTI_Core_TypeDef *) EXTI1_C2_BASE_NS)
#define SYSCFG_NS                           ((SYSCFG_TypeDef *) SYSCFG_BASE_NS)
#define GPIOA_NS                            ((GPIO_TypeDef *) GPIOA_BASE_NS)
#define GPIOB_NS                            ((GPIO_TypeDef *) GPIOB_BASE_NS)
#define GPIOC_NS                            ((GPIO_TypeDef *) GPIOC_BASE_NS)
#define GPIOD_NS                            ((GPIO_TypeDef *) GPIOD_BASE_NS)
#define GPIOE_NS                            ((GPIO_TypeDef *) GPIOE_BASE_NS)
#define GPIOF_NS                            ((GPIO_TypeDef *) GPIOF_BASE_NS)
#define GPIOG_NS                            ((GPIO_TypeDef *) GPIOG_BASE_NS)
#define GPIOH_NS                            ((GPIO_TypeDef *) GPIOH_BASE_NS)
#define GPIOI_NS                            ((GPIO_TypeDef *) GPIOI_BASE_NS)
#define GPIOJ_NS                            ((GPIO_TypeDef *) GPIOJ_BASE_NS)
#define GPIOK_NS                            ((GPIO_TypeDef *) GPIOK_BASE_NS)

#define RTC_NS                              ((RTC_TypeDef *) RTC_BASE_NS)
#define TAMP_NS                             ((TAMP_TypeDef *) TAMP_BASE_NS)
#define SPI8_NS                             ((SPI_TypeDef *) SPI8_BASE_NS)
#define LPUART1_NS                          ((USART_TypeDef *) LPUART1_BASE_NS)
#define I2C8_NS                             ((I2C_TypeDef *) I2C8_BASE_NS)
#define LPTIM3_NS                           ((LPTIM_TypeDef *) LPTIM3_BASE_NS)
#define LPTIM4_NS                           ((LPTIM_TypeDef *) LPTIM4_BASE_NS)
#define LPTIM5_NS                           ((LPTIM_TypeDef *) LPTIM5_BASE_NS)
#if defined(STM32MP2XX_ASSY2_2_1)
#define CEC_NS                              ((CEC_TypeDef *) CEC_BASE_NS)
#endif /* STM32MP2XX_ASSY2_2_1 */
#define I3C4_NS                             ((I3C_TypeDef *) I3C4_BASE_NS)
#define IWDG5_NS                            ((IWDG_TypeDef *) IWDG5_BASE_NS)
#define WWDG2_NS                            ((WWDG_TypeDef *) WWDG2_BASE_NS)

#define GPIOZ_NS                            ((GPIO_TypeDef *) GPIOZ_BASE_NS)
#define LPDMA_NS                            ((DMA_TypeDef *) LPDMA_BASE_NS)
#define MDF2_NS                             ((MDF_TypeDef *) MDF2_BASE_NS)
#define EXTI2_NS                            ((EXTI_TypeDef *) EXTI2_BASE_NS)
#define EXTI2_C1_NS                         ((EXTI_Core_TypeDef *) EXTI2_C1_BASE_NS)
#define EXTI2_C2_NS                         ((EXTI_Core_TypeDef *) EXTI2_C2_BASE_NS)
#define EXTI2_C3_NS                         ((EXTI_Core_TypeDef *) EXTI2_C3_BASE_NS)
#define HSEM_NS                             ((HSEM_TypeDef *) HSEM_BASE_NS)
#define IPCC2_NS                            ((IPCC_TypeDef *) IPCC2_BASE_NS)
#define IPCC2_C1_NS                         ((IPCC_CommonTypeDef *) IPCC2_C1_BASE_NS)
#define IPCC2_C2_NS                         ((IPCC_CommonTypeDef *) IPCC2_C2_BASE_NS)

#define LPDMA_Channel0_NS                   ((DMA_Channel_TypeDef *) LPDMA_Channel0_BASE_NS)
#define LPDMA_Channel1_NS                   ((DMA_Channel_TypeDef *) LPDMA_Channel1_BASE_NS)
#define LPDMA_Channel2_NS                   ((DMA_Channel_TypeDef *) LPDMA_Channel2_BASE_NS)
#define LPDMA_Channel3_NS                   ((DMA_Channel_TypeDef *) LPDMA_Channel3_BASE_NS)

#define DSI_NS                              ((DSI_TypeDef *) DSI_BASE_NS)
#define LTDC_NS                             ((LTDC_TypeDef *) LTDC_BASE_NS)
#define LTDC_Layer1_NS                      ((LTDC_Layer_TypeDef *) LTDC_Layer1_BASE_NS)
#define LTDC_Layer2_NS                      ((LTDC_Layer_TypeDef *) LTDC_Layer2_BASE_NS)
#define LTDC_Layer3_NS                      ((LTDC_Layer_TypeDef *) LTDC_Layer3_BASE_NS)
#define CSI2HOST_NS                         ((CSI2HOST_TypeDef *) CSI2HOST_BASE_NS)
#define DCMIPP_NS                           ((DCMIPP_TypeDef *) DCMIPP_BASE_NS)
#define DDRC_NS                             ((DDRC_TypeDef *) DDRC_BASE_NS)
#define STGENC_NS                           ((STGENC_TypeDef *) STGENC_BASE_NS)
#define STGENR_NS                           ((STGENR_TypeDef *) STGENR_BASE_NS)

#define FMC_Bank1_NS                        ((FMC_Bank1_TypeDef *) FMC_Bank1_R_BASE_NS)
#define FMC_Bank1E_NS                       ((FMC_Bank1E_TypeDef *) FMC_Bank1E_R_BASE_NS)
#define FMC_Bank2_NS                        ((FMC_Bank2_TypeDef *) FMC_Bank2_R_BASE_NS)
#define FMC_Bank3_NS                        ((FMC_Bank3_TypeDef *) FMC_Bank3_R_BASE_NS)
#define FMC_Bank5_6_NS                      ((FMC_Bank5_6_TypeDef *) FMC_Bank5_6_R_BASE_NS)
#define SDMMC1_NS                           ((SDMMC_TypeDef *) SDMMC1_BASE_NS)
#define SDMMC2_NS                           ((SDMMC_TypeDef *) SDMMC2_BASE_NS)
#define SDMMC3_NS                           ((SDMMC_TypeDef *) SDMMC3_BASE_NS)
#define GPU_NS                              ((GPU_Host_InterfaceTypeDef *) GPU_BASE_NS)
#define ETH1_NS                             ((ETH_TypeDef *) ETH1_BASE_NS)
#define ETH2_NS                             ((ETH_TypeDef *) ETH2_BASE_NS)
#define USB3_NS                             ((USB3_TypeDef *) USB3DRD_BASE_NS)
#define DDRPHYC_NS                          ((DDRPHYC_TypeDef *) DDRPHYC_BASE_NS)

#define DBGMCU_NS                           ((DBGMCU_TypeDef *) DBGMCU_BASE_NS)

#if ! defined(STM32MP2XX_ASSY2_2_1)
#define ETHSW_MSG_NS                        ((ETHSW_MSG_TypeDef *) ETHSW_MSG_BASE_NS)
#define ETHSW_CFG_NS                        ((ETHSW_CFG_TypeDef *) ETHSW_CFG_BASE_NS)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

#if defined (CORTEX_IN_SECURE_STATE)
#define TIM2_S                              ((TIM_TypeDef *) TIM2_BASE_S)
#define TIM3_S                              ((TIM_TypeDef *) TIM3_BASE_S)
#define TIM4_S                              ((TIM_TypeDef *) TIM4_BASE_S)
#define TIM5_S                              ((TIM_TypeDef *) TIM5_BASE_S)
#define TIM6_S                              ((TIM_TypeDef *) TIM6_BASE_S)
#define TIM7_S                              ((TIM_TypeDef *) TIM7_BASE_S)
#define TIM12_S                             ((TIM_TypeDef *) TIM12_BASE_S)
#define TIM13_S                             ((TIM_TypeDef *) TIM13_BASE_S)
#define TIM14_S                             ((TIM_TypeDef *) TIM14_BASE_S)
#define LPTIM1_S                            ((LPTIM_TypeDef *) LPTIM1_BASE_S)
#define LPTIM2_S                            ((LPTIM_TypeDef *) LPTIM2_BASE_S)
#define SPI2_S                              ((SPI_TypeDef *) SPI2_BASE_S)
#define SPI3_S                              ((SPI_TypeDef *) SPI3_BASE_S)
#define SPDIFRX_S                           ((SPDIFRX_TypeDef *) SPDIFRX_BASE_S)
#define USART2_S                            ((USART_TypeDef *) USART2_BASE_S)
#define USART3_S                            ((USART_TypeDef *) USART3_BASE_S)
#define UART4_S                             ((USART_TypeDef *) UART4_BASE_S)
#define UART5_S                             ((USART_TypeDef *) UART5_BASE_S)
#define I2C1_S                              ((I2C_TypeDef *) I2C1_BASE_S)
#define I2C2_S                              ((I2C_TypeDef *) I2C2_BASE_S)
#define I2C3_S                              ((I2C_TypeDef *) I2C3_BASE_S)
#define I2C4_S                              ((I2C_TypeDef *) I2C4_BASE_S)
#define I2C5_S                              ((I2C_TypeDef *) I2C5_BASE_S)
#define I2C6_S                              ((I2C_TypeDef *) I2C6_BASE_S)
#define I2C7_S                              ((I2C_TypeDef *) I2C7_BASE_S)
#define I3C1_S                              ((I3C_TypeDef *) I3C1_BASE_S)
#define I3C2_S                              ((I3C_TypeDef *) I3C2_BASE_S)
#define I3C3_S                              ((I3C_TypeDef *) I3C3_BASE_S)
#define TIM10_S                             ((TIM_TypeDef *) TIM10_BASE_S)
#define TIM11_S                             ((TIM_TypeDef *) TIM11_BASE_S)

#define TIM1_S                              ((TIM_TypeDef *) TIM1_BASE_S)
#define TIM8_S                              ((TIM_TypeDef *) TIM8_BASE_S)
#define USART6_S                            ((USART_TypeDef *) USART6_BASE_S)
#define SPI1_S                              ((SPI_TypeDef *) SPI1_BASE_S)
#define SPI4_S                              ((SPI_TypeDef *) SPI4_BASE_S)
#define TIM15_S                             ((TIM_TypeDef *) TIM15_BASE_S)
#define TIM16_S                             ((TIM_TypeDef *) TIM16_BASE_S)
#define TIM17_S                             ((TIM_TypeDef *) TIM17_BASE_S)
#define SPI5_S                              ((SPI_TypeDef *) SPI5_BASE_S)
#define SAI1_S                              ((SAI_TypeDef *) SAI1_BASE_S)
#define SAI1_Block_A_S                      ((SAI_Block_TypeDef *) SAI1_Block_A_BASE_S)
#define SAI1_Block_B_S                      ((SAI_Block_TypeDef *) SAI1_Block_B_BASE_S)
#define SAI2_S                              ((SAI_TypeDef *) SAI2_BASE_S)
#define SAI2_Block_A_S                      ((SAI_Block_TypeDef *) SAI2_Block_A_BASE_S)
#define SAI2_Block_B_S                      ((SAI_Block_TypeDef *) SAI2_Block_B_BASE_S)
#define SAI3_S                              ((SAI_TypeDef *) SAI3_BASE_S)
#define SAI3_Block_A_S                      ((SAI_Block_TypeDef *) SAI3_Block_A_BASE_S)
#define SAI3_Block_B_S                      ((SAI_Block_TypeDef *) SAI3_Block_B_BASE_S)
#define UART9_S                             ((USART_TypeDef *) UART9_BASE_S)
#define FDCAN1_S                            ((FDCAN_GlobalTypeDef *) FDCAN1_BASE_S)
#define FDCAN2_S                            ((FDCAN_GlobalTypeDef *) FDCAN2_BASE_S)
#define FDCAN3_S                            ((FDCAN_GlobalTypeDef *) FDCAN3_BASE_S)
#define FDCAN_CCU_S                         ((FDCAN_ClockCalibrationUnit_TypeDef *) FDCAN_CCU_BASE_S)
#define TIM20_S                             ((TIM_TypeDef *) TIM20_BASE_S)
#define USART1_S                            ((USART_TypeDef *) USART1_BASE_S)
#define SAI4_S                              ((SAI_TypeDef *) SAI4_BASE_S)
#define SAI4_Block_A_S                      ((SAI_Block_TypeDef *) SAI4_Block_A_BASE_S)
#define SAI4_Block_B_S                      ((SAI_Block_TypeDef *) SAI4_Block_B_BASE_S)
#define SPI6_S                              ((SPI_TypeDef *) SPI6_BASE_S)
#define SPI7_S                              ((SPI_TypeDef *) SPI7_BASE_S)
#define UART7_S                             ((USART_TypeDef *) UART7_BASE_S)
#define UART8_S                             ((USART_TypeDef *) UART8_BASE_S)

#define HPDMA1_S                            ((DMA_TypeDef *) HPDMA1_BASE_S)
#define HPDMA2_S                            ((DMA_TypeDef *) HPDMA2_BASE_S)
#define HPDMA3_S                            ((DMA_TypeDef *) HPDMA3_BASE_S)
#define OCTOSPI1_S                          ((OCTOSPI_TypeDef *) OCTOSPI1_BASE_S)
#define OCTOSPI2_S                          ((OCTOSPI_TypeDef *) OCTOSPI2_BASE_S)
#define OCTO1_OTFD_CRYPTO2_S                ((OTFD_CRYPTO2_TypeDef *) OCTO1_OTFD_CRYPTO2_BASE_S)
#define OCTO2_OTFD_CRYPTO2_S                ((OTFD_CRYPTO2_TypeDef *) OCTO1_OTFD_CRYPTO2_BASE_S)
#define ICACHE_S                            ((ICACHE_TypeDef *) ICACHE_BASE_S)
#define DCACHE_S                            ((ICACHE_TypeDef *) DCACHE_BASE_S)
#define IPCC1_S                             ((IPCC_TypeDef *) IPCC1_BASE_S)
#define IPCC1_C1_S                          ((IPCC_CommonTypeDef *) IPCC1_C1_BASE_S)
#define IPCC1_C2_S                          ((IPCC_CommonTypeDef *) IPCC1_C2_BASE_S)
#define DCMI_S                              ((DCMI_TypeDef *) DCMI_BASE_S)
#define PSSI_S                              ((PSSI_TypeDef *) PSSI_BASE_S)
#define CRC_S                               ((CRC_TypeDef *) CRC_BASE_S)
#define MDF1_S                              ((MDF_TypeDef *) MDF1_BASE_S)
#define ADC12_S                             ((ADC_TypeDef *) ADC12_BASE_S)
#define ADC3_S                              ((ADC_TypeDef *) ADC3_BASE_S)
#define IOMANAGER_S                         ((IOMANAGER_TypeDef *) IOMANAGER_BASE_S)

#define HPDMA1_Channel0_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel0_BASE_S)
#define HPDMA1_Channel1_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel1_BASE_S)
#define HPDMA1_Channel2_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel2_BASE_S)
#define HPDMA1_Channel3_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel3_BASE_S)
#define HPDMA1_Channel4_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel4_BASE_S)
#define HPDMA1_Channel5_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel5_BASE_S)
#define HPDMA1_Channel6_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel6_BASE_S)
#define HPDMA1_Channel7_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel7_BASE_S)
#define HPDMA1_Channel8_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel8_BASE_S)
#define HPDMA1_Channel9_S                   ((DMA_Channel_TypeDef *) HPDMA1_Channel9_BASE_S)
#define HPDMA1_Channel10_S                  ((DMA_Channel_TypeDef *) HPDMA1_Channel10_BASE_S)
#define HPDMA1_Channel11_S                  ((DMA_Channel_TypeDef *) HPDMA1_Channel11_BASE_S)
#define HPDMA1_Channel12_S                  ((DMA_Channel_TypeDef *) HPDMA1_Channel12_BASE_S)
#define HPDMA1_Channel13_S                  ((DMA_Channel_TypeDef *) HPDMA1_Channel13_BASE_S)
#define HPDMA1_Channel14_S                  ((DMA_Channel_TypeDef *) HPDMA1_Channel14_BASE_S)
#define HPDMA1_Channel15_S                  ((DMA_Channel_TypeDef *) HPDMA1_Channel15_BASE_S)

#define HPDMA2_Channel0_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel0_BASE_S)
#define HPDMA2_Channel1_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel1_BASE_S)
#define HPDMA2_Channel2_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel2_BASE_S)
#define HPDMA2_Channel3_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel3_BASE_S)
#define HPDMA2_Channel4_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel4_BASE_S)
#define HPDMA2_Channel5_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel5_BASE_S)
#define HPDMA2_Channel6_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel6_BASE_S)
#define HPDMA2_Channel7_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel7_BASE_S)
#define HPDMA2_Channel8_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel8_BASE_S)
#define HPDMA2_Channel9_S                   ((DMA_Channel_TypeDef *) HPDMA2_Channel9_BASE_S)
#define HPDMA2_Channel10_S                  ((DMA_Channel_TypeDef *) HPDMA2_Channel10_BASE_S)
#define HPDMA2_Channel11_S                  ((DMA_Channel_TypeDef *) HPDMA2_Channel11_BASE_S)
#define HPDMA2_Channel12_S                  ((DMA_Channel_TypeDef *) HPDMA2_Channel12_BASE_S)
#define HPDMA2_Channel13_S                  ((DMA_Channel_TypeDef *) HPDMA2_Channel13_BASE_S)
#define HPDMA2_Channel14_S                  ((DMA_Channel_TypeDef *) HPDMA2_Channel14_BASE_S)
#define HPDMA2_Channel15_S                  ((DMA_Channel_TypeDef *) HPDMA2_Channel15_BASE_S)

#define HPDMA3_Channel0_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel0_BASE_S)
#define HPDMA3_Channel1_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel1_BASE_S)
#define HPDMA3_Channel2_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel2_BASE_S)
#define HPDMA3_Channel3_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel3_BASE_S)
#define HPDMA3_Channel4_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel4_BASE_S)
#define HPDMA3_Channel5_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel5_BASE_S)
#define HPDMA3_Channel6_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel6_BASE_S)
#define HPDMA3_Channel7_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel7_BASE_S)
#define HPDMA3_Channel8_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel8_BASE_S)
#define HPDMA3_Channel9_S                   ((DMA_Channel_TypeDef *) HPDMA3_Channel9_BASE_S)
#define HPDMA3_Channel10_S                  ((DMA_Channel_TypeDef *) HPDMA3_Channel10_BASE_S)
#define HPDMA3_Channel11_S                  ((DMA_Channel_TypeDef *) HPDMA3_Channel11_BASE_S)
#define HPDMA3_Channel12_S                  ((DMA_Channel_TypeDef *) HPDMA3_Channel12_BASE_S)
#define HPDMA3_Channel13_S                  ((DMA_Channel_TypeDef *) HPDMA3_Channel13_BASE_S)
#define HPDMA3_Channel14_S                  ((DMA_Channel_TypeDef *) HPDMA3_Channel14_BASE_S)
#define HPDMA3_Channel15_S                  ((DMA_Channel_TypeDef *) HPDMA3_Channel15_BASE_S)

#define HASH_S                              ((HASH_TypeDef *) HASH_BASE_S)
#define HASH_DIGEST_S                       ((HASH_DIGEST_TypeDef *) HASH_DIGEST_BASE_S)
#define RNG_S                               ((RNG_TypeDef *) RNG_BASE_S)
#define CRYP1_S                             ((CRYP_TypeDef *) CRYP1_BASE_S)
#define CRYP2_S                             ((CRYP_TypeDef *) CRYP2_BASE_S)
#define PKA_S                               ((PKA_TypeDef *) PKA_BASE_S)
#define RAMCFG_SYSRAM_S                     ((RAMCFG_TypeDef *) RAMCFG_SYSRAM_BASE_S)
#define RAMCFG_SRAM1_S                      ((RAMCFG_TypeDef *) RAMCFG_SRAM1_BASE_S)
#define RAMCFG_SRAM2_S                      ((RAMCFG_TypeDef *) RAMCFG_SRAM2_BASE_S)
#define RAMCFG_RETRAM_S                     ((RAMCFG_TypeDef *) RAMCFG_RETRAM_BASE_S)
#define RAMCFG_LPSRAM1_S                    ((RAMCFG_TypeDef *) RAMCFG_LPSRAM1_BASE_S)
#define RAMCFG_LPSRAM2_S                    ((RAMCFG_TypeDef *) RAMCFG_LPSRAM2_BASE_S)
#define RAMCFG_LPSRAM3_S                    ((RAMCFG_TypeDef *) RAMCFG_LPSRAM3_BASE_S)
#define RAMCFG_BKPSRAM_S                    ((RAMCFG_TypeDef *) RAMCFG_BKPSRAM_BASE_S)
#define RISC_S                              ((RISC_TypeDef *)        RISC_BASE_S)
#define RIMC_S                              ((RIMC_TypeDef *)        RIMC_BASE_S)
#define RIFSC_ID_S                          ((RIFSC_ID_TypeDef *)    RIFSC_ID_BASE_S)
#define IAC_S                               ((IAC_TypeDef *)         IAC_BASE_S)
#define RISAF1_S                            ((RISAF_TypeDef *)       RISAF1_BASE_S)
#define RISAF2_S                            ((RISAF_TypeDef *)       RISAF2_BASE_S)
#define RISAF4_S                            ((RISAF_TypeDef *)       RISAF4_BASE_S)
#define RISAF5_S                            ((RISAF_TypeDef *)       RISAF5_BASE_S)
#define RISAB1_S                            ((RISAB_TypeDef *)       RISAB1_BASE_S)
#define RISAB2_S                            ((RISAB_TypeDef *)       RISAB2_BASE_S)
#define RISAB3_S                            ((RISAB_TypeDef *)       RISAB3_BASE_S)
#define RISAB4_S                            ((RISAB_TypeDef *)       RISAB4_BASE_S)
#define RISAB5_S                            ((RISAB_TypeDef *)       RISAB5_BASE_S)
#define RISAB6_S                            ((RISAB_TypeDef *)       RISAB6_BASE_S)

#define BSEC_S                              ((BSEC_TypeDef *) BSEC_BASE_S)
#define IWDG1_S                             ((IWDG_TypeDef *) IWDG1_BASE_S)
#define IWDG2_S                             ((IWDG_TypeDef *) IWDG2_BASE_S)
#define IWDG3_S                             ((IWDG_TypeDef *) IWDG3_BASE_S)
#define IWDG4_S                             ((IWDG_TypeDef *) IWDG4_BASE_S)
#define WWDG1_S                             ((WWDG_TypeDef *) WWDG1_BASE_S)
#define VREFBUF_S                           ((VREF_TypeDef *) VREFBUF_BASE_S)
#define TEMP_S                              ((TMPSENS_TypeDef *) TEMP_BASE_S)
#if defined(STM32MP2XX_ASSY2_2_1)
#define PMB_S                               ((PMB_TypeDef *) PMB_BASE_S)
#else /* STM32MP2XX_ASSY2_2_1 */
#define SERC_S                              ((SERC_TypeDef *) SERC_BASE_S)
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define HDP_S                               ((HDP_TypeDef *) HDP_BASE_S)

#define RCC_S                               ((RCC_TypeDef *) RCC_BASE_S)
#define PWR_S                               ((PWR_TypeDef *) PWR_BASE_S)
#define EXTI1_S                             ((EXTI_TypeDef *) EXTI1_BASE_S)
#define EXTI1_C1_S                          ((EXTI_Core_TypeDef *) EXTI1_C1_BASE_S)
#define EXTI1_C2_S                          ((EXTI_Core_TypeDef *) EXTI1_C2_BASE_S)
#define SYSCFG_S                            ((SYSCFG_TypeDef *) SYSCFG_BASE_S)
#define GPIOA_S                             ((GPIO_TypeDef *) GPIOA_BASE_S)
#define GPIOB_S                             ((GPIO_TypeDef *) GPIOB_BASE_S)
#define GPIOC_S                             ((GPIO_TypeDef *) GPIOC_BASE_S)
#define GPIOD_S                             ((GPIO_TypeDef *) GPIOD_BASE_S)
#define GPIOE_S                             ((GPIO_TypeDef *) GPIOE_BASE_S)
#define GPIOF_S                             ((GPIO_TypeDef *) GPIOF_BASE_S)
#define GPIOG_S                             ((GPIO_TypeDef *) GPIOG_BASE_S)
#define GPIOH_S                             ((GPIO_TypeDef *) GPIOH_BASE_S)
#define GPIOI_S                             ((GPIO_TypeDef *) GPIOI_BASE_S)
#define GPIOJ_S                             ((GPIO_TypeDef *) GPIOJ_BASE_S)
#define GPIOK_S                             ((GPIO_TypeDef *) GPIOK_BASE_S)

#define RTC_S                               ((RTC_TypeDef *) RTC_BASE_S)
#define TAMP_S                              ((TAMP_TypeDef *) TAMP_BASE_S)
#define SPI8_S                              ((SPI_TypeDef *) SPI8_BASE_S)
#define LPUART1_S                           ((USART_TypeDef *) LPUART1_BASE_S)
#define I2C8_S                              ((I2C_TypeDef *) I2C8_BASE_S)
#define LPTIM3_S                            ((LPTIM_TypeDef *) LPTIM3_BASE_S)
#define LPTIM4_S                            ((LPTIM_TypeDef *) LPTIM4_BASE_S)
#define LPTIM5_S                            ((LPTIM_TypeDef *) LPTIM5_BASE_S)
#if defined(STM32MP2XX_ASSY2_2_1)
#define CEC_S                               ((CEC_TypeDef *) CEC_BASE_S)
#endif /* STM32MP2XX_ASSY2_2_1 */
#define I3C4_S                              ((I3C_TypeDef *) I3C4_BASE_S)
#define IWDG5_S                             ((IWDG_TypeDef *) IWDG5_BASE_S)
#define WWDG2_S                             ((WWDG_TypeDef *) WWDG2_BASE_S)

#define GPIOZ_S                             ((GPIO_TypeDef *) GPIOZ_BASE_S)
#define LPDMA_S                             ((DMA_TypeDef *) LPDMA_BASE_S)
#define MDF2_S                              ((MDF_TypeDef *) MDF2_BASE_S)
#define EXTI2_S                             ((EXTI_TypeDef *) EXTI2_BASE_S)
#define EXTI2_C1_S                          ((EXTI_Core_TypeDef *) EXTI2_C1_BASE_S)
#define EXTI2_C2_S                          ((EXTI_Core_TypeDef *) EXTI2_C2_BASE_S)
#define EXTI2_C3_S                          ((EXTI_Core_TypeDef *) EXTI2_C3_BASE_S)
#define HSEM_S                              ((HSEM_TypeDef *) HSEM_BASE_S)
#define IPCC2_S                             ((IPCC_TypeDef *) IPCC2_BASE_S)
#define IPCC2_C1_S                          ((IPCC_CommonTypeDef *) IPCC2_C1_BASE_S)
#define IPCC2_C2_S                          ((IPCC_CommonTypeDef *) IPCC2_C2_BASE_S)

#define LPDMA_Channel0_S                    ((DMA_Channel_TypeDef *) LPDMA_Channel0_BASE_S)
#define LPDMA_Channel1_S                    ((DMA_Channel_TypeDef *) LPDMA_Channel1_BASE_S)
#define LPDMA_Channel2_S                    ((DMA_Channel_TypeDef *) LPDMA_Channel2_BASE_S)
#define LPDMA_Channel3_S                    ((DMA_Channel_TypeDef *) LPDMA_Channel3_BASE_S)

#define DSI_S                               ((DSI_TypeDef *) DSI_BASE_S)
#define LTDC_S                              ((LTDC_TypeDef *) LTDC_BASE_S)
#define LTDC_Layer1_S                       ((LTDC_Layer_TypeDef *) LTDC_Layer1_BASE_S)
#define LTDC_Layer2_S                       ((LTDC_Layer_TypeDef *) LTDC_Layer2_BASE_S)
#define LTDC_Layer3_S                       ((LTDC_Layer_TypeDef *) LTDC_Layer3_BASE_S)
#define CSI2HOST_S                          ((CSI2HOST_TypeDef *) CSI2HOST_BASE_S)
#define DCMIPP_S                            ((DCMIPP_TypeDef *) DCMIPP_BASE_S)
#define DDRC_S                              ((DDRC_TypeDef *) DDRC_BASE_S)
#define STGENC_S                            ((STGENC_TypeDef *) STGENC_BASE_S)
#define STGENR_S                            ((STGENR_TypeDef *) STGENR_BASE_S)

#define FMC_Bank1_S                         ((FMC_Bank1_TypeDef *) FMC_Bank1_R_BASE_S)
#define FMC_Bank1E_S                        ((FMC_Bank1E_TypeDef *) FMC_Bank1E_R_BASE_S)
#define FMC_Bank2_S                         ((FMC_Bank2_TypeDef *) FMC_Bank2_R_BASE_S)
#define FMC_Bank3_S                         ((FMC_Bank3_TypeDef *) FMC_Bank3_R_BASE_S)
#define FMC_Bank5_6_S                       ((FMC_Bank5_6_TypeDef *) FMC_Bank5_6_R_BASE_S)
#define SDMMC1_S                            ((SDMMC_TypeDef *) SDMMC1_BASE_S)
#define SDMMC2_S                            ((SDMMC_TypeDef *) SDMMC2_BASE_S)
#define SDMMC3_S                            ((SDMMC_TypeDef *) SDMMC3_BASE_S)
#define GPU_S                               ((GPU_Host_InterfaceTypeDef *) GPU_BASE_S)
#define ETH1_S                              ((ETH_TypeDef *) ETH1_BASE_S)
#define ETH2_S                              ((ETH_TypeDef *) ETH2_BASE_S)
#define USB3_S                              ((USB3_TypeDef *) USB3DRD_BASE_S)
#define DDRPHYC_S                           ((DDRPHYC_TypeDef *) DDRPHYC_BASE_S)

#define DBGMCU_S                            ((DBGMCU_TypeDef *) DBGMCU_BASE_S)

#if ! defined(STM32MP2XX_ASSY2_2_1)
#define ETHSW_MSG_S                         ((ETHSW_MSG_TypeDef *) ETHSW_MSG_BASE_S)
#define ETHSW_CFG_S                         ((ETHSW_CFG_TypeDef *) ETHSW_CFG_BASE_S)
#endif /* ! STM32MP2XX_ASSY2_2_1 */

#endif /*  CORTEX_IN_SECURE_STATE */
/*!< Memory & Instance default aliases */
#if defined (CORTEX_IN_SECURE_STATE)
/*!< Peripherals base addresses defaults to Secure aliases */
#define PERIPH_BASE                 PERIPH_BASE_S

/*!< Memory base addresses defaults to Secure aliases */
#define SRAMS_BASE                  SRAMS_BASE_S

#define SYSRAM_BASE                 SYSRAM_BASE_S
#define SRAM1_BASE                  SRAM1_BASE_S
#define SRAM2_BASE                  SRAM2_BASE_S
#define RETRAM_BASE                 RETRAM_BASE_S
#if defined(STM32MP2XX_ASSY2_2_1)
#define LTDC_SRAM_BASE              LTDC_SRAM_BASE_S
#else /* STM32MP2XX_ASSY2_2_1 */
#define VDERAM_BASE                 VDERAM_BASE_S
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define LPSRAM1_BASE                LPSRAM1_BASE_S
#define LPSRAM2_BASE                LPSRAM2_BASE_S
#define LPSRAM3_BASE                LPSRAM3_BASE_S

#define BKP_SRAM_BASE               BKP_SRAM_BASE_S
#define CAN_SRAM_BASE               CAN_SRAM_BASE_S

#define SRAMS_FETCH_BASE            SRAMS_FETCH_BASE_S

/*!< APB1 peripherals defaults to Secure aliases */
#define TIM2                        TIM2_S
#define TIM2_BASE                   TIM2_BASE_S

#define TIM3                        TIM3_S
#define TIM3_BASE                   TIM3_BASE_S

#define TIM4                        TIM4_S
#define TIM4_BASE                   TIM4_BASE_S

#define TIM5                        TIM5_S
#define TIM5_BASE                   TIM5_BASE_S

#define TIM6                        TIM6_S
#define TIM6_BASE                   TIM6_BASE_S

#define TIM7                        TIM7_S
#define TIM7_BASE                   TIM7_BASE_S

#define TIM12                       TIM12_S
#define TIM12_BASE                  TIM12_BASE_S

#define TIM13                       TIM13_S
#define TIM13_BASE                  TIM13_BASE_S

#define TIM14                       TIM14_S
#define TIM14_BASE                  TIM14_BASE_S

#define LPTIM1                      LPTIM1_S
#define LPTIM1_BASE                 LPTIM1_BASE_S

#define LPTIM2                      LPTIM2_S
#define LPTIM2_BASE                 LPTIM2_BASE_S

#define SPI2                        SPI2_S
#define SPI2_BASE                   SPI2_BASE_S

#define SPI3                        SPI3_S
#define SPI3_BASE                   SPI3_BASE_S

#define SPDIFRX                     SPDIFRX_S
#define SPDIFRX_BASE                SPDIFRX_BASE_S

#define USART2                      USART2_S
#define USART2_BASE                 USART2_BASE_S

#define USART3                      USART3_S
#define USART3_BASE                 USART3_BASE_S

#define UART4                       UART4_S
#define UART4_BASE                  UART4_BASE_S

#define UART5                       UART5_S
#define UART5_BASE                  UART5_BASE_S

#define I2C1                        I2C1_S
#define I2C1_BASE                   I2C1_BASE_S

#define I2C2                        I2C2_S
#define I2C2_BASE                   I2C2_BASE_S

#define I2C3                        I2C3_S
#define I2C3_BASE                   I2C3_BASE_S

#define I2C4                        I2C4_S
#define I2C4_BASE                   I2C4_BASE_S

#define I2C5                        I2C5_S
#define I2C5_BASE                   I2C5_BASE_S

#define I2C6                        I2C6_S
#define I2C6_BASE                   I2C6_BASE_S

#define I2C7                        I2C7_S
#define I2C7_BASE                   I2C7_BASE_S

#define I3C1                        I3C1_S
#define I3C1_BASE                   I3C1_BASE_S

#define I3C1                        I3C1_S
#define I3C1_BASE                   I3C1_BASE_S

#define I3C2                        I3C2_S
#define I3C2_BASE                   I3C2_BASE_S

#define I3C2                        I3C2_S
#define I3C2_BASE                   I3C2_BASE_S

#define I3C3                        I3C3_S
#define I3C3_BASE                   I3C3_BASE_S

#define TIM10                       TIM10_S
#define TIM10_BASE                  TIM10_BASE_S

#define TIM11                       TIM11_S
#define TIM11_BASE                  TIM11_BASE_S

/*!< APB2 peripherals defaults to Secure aliases */
#define TIM1                        TIM1_S
#define TIM1_BASE                   TIM1_BASE_S

#define TIM8                        TIM8_S
#define TIM8_BASE                   TIM8_BASE_S

#define USART6                      USART6_S
#define USART6_BASE                 USART6_BASE_S

#define SPI1                        SPI1_S
#define SPI1_BASE                   SPI1_BASE_S

#define SPI4                        SPI4_S
#define SPI4_BASE                   SPI4_BASE_S

#define TIM15                       TIM15_S
#define TIM15_BASE                  TIM15_BASE_S

#define TIM16                       TIM16_S
#define TIM16_BASE                  TIM16_BASE_S

#define TIM17                       TIM17_S
#define TIM17_BASE                  TIM17_BASE_S

#define SPI5                        SPI5_S
#define SPI5_BASE                   SPI5_BASE_S

#define SAI1                        SAI1_S
#define SAI1_BASE                   SAI1_BASE_S

#define SAI1_Block_A                SAI1_Block_A_S
#define SAI1_Block_A_BASE           SAI1_Block_A_BASE_S

#define SAI1_Block_B                SAI1_Block_B_S
#define SAI1_Block_B_BASE           SAI1_Block_B_BASE_S

#define SAI2                        SAI2_S
#define SAI2_BASE                   SAI2_BASE_S

#define SAI2_Block_A                SAI2_Block_A_S
#define SAI2_Block_A_BASE           SAI2_Block_A_BASE_S

#define SAI2_Block_B                SAI2_Block_B_S
#define SAI2_Block_B_BASE           SAI2_Block_B_BASE_S

#define SAI3                        SAI3_S
#define SAI3_BASE                   SAI3_BASE_S

#define SAI3_Block_A                SAI3_Block_A_S
#define SAI3_Block_A_BASE           SAI3_Block_A_BASE_S

#define SAI3_Block_B                SAI3_Block_B_S
#define SAI3_Block_B_BASE           SAI3_Block_B_BASE_S

#define UART9                       UART9_S
#define UART9_BASE                  UART9_BASE_S

#define FDCAN1                      FDCAN1_S
#define FDCAN1_BASE                 FDCAN1_BASE_S

#define FDCAN2                      FDCAN2_S
#define FDCAN2_BASE                 FDCAN2_BASE_S

#define FDCAN3                      FDCAN3_S
#define FDCAN3_BASE                 FDCAN3_BASE_S

#define FDCAN_CCU                   FDCAN_CCU_S
#define FDCAN_CCU_BASE              FDCAN_CCU_BASE_S

#define TIM20                       TIM20_S
#define TIM20_BASE                  TIM20_BASE_S

#define USART1                      USART1_S
#define USART1_BASE                 USART1_BASE_S

#define SAI4                        SAI4_S
#define SAI4_BASE                   SAI4_BASE_S

#define SAI4_Block_A                SAI4_Block_A_S
#define SAI4_Block_A_BASE           SAI4_Block_A_BASE_S

#define SAI4_Block_B                SAI4_Block_B_S
#define SAI4_Block_B_BASE           SAI4_Block_B_BASE_S

#define SPI6                        SPI6_S
#define SPI6_BASE                   SPI6_BASE_S

#define SPI6                        SPI6_S
#define SPI6_BASE                   SPI6_BASE_S

#define SPI7                        SPI7_S
#define SPI7_BASE                   SPI7_BASE_S

#define UART7                       UART7_S
#define UART7_BASE                  UART7_BASE_S

#define UART8                       UART8_S
#define UART8_BASE                  UART8_BASE_S

/*!< AHB2 peripherals defaults to Secure aliases */
#define HPDMA1                      HPDMA1_S
#define HPDMA1_BASE                 HPDMA1_BASE_S

#define HPDMA2                      HPDMA2_S
#define HPDMA2_BASE                 HPDMA2_BASE_S

#define HPDMA3                      HPDMA3_S
#define HPDMA3_BASE                 HPDMA3_BASE_S

#define OCTOSPI1                    OCTOSPI1_S
#define OCTOSPI1_BASE               OCTOSPI1_BASE_S

#define OCTOSPI2                    OCTOSPI2_S
#define OCTOSPI2_BASE               OCTOSPI2_BASE_S

#define OCTO1_OTFD_CRYPTO2          OCTO1_OTFD_CRYPTO2_S
#define OCTO1_OTFD_CRYPTO2_BASE     OCTO1_OTFD_CRYPTO2_BASE_S

#define OCTO2_OTFD_CRYPTO2          OCTO2_OTFD_CRYPTO2_S
#define OCTO2_OTFD_CRYPTO2_BASE     OCTO2_OTFD_CRYPTO2_BASE_S

#define ICACHE                      ICACHE_S
#define ICACHE_BASE                 ICACHE_BASE_S

#define DCACHE                      DCACHE_S
#define DCACHE_BASE                 DCACHE_BASE_S

#define IPCC1                       IPCC1_S
#define IPCC1_BASE                  IPCC1_BASE_S

#define IPCC1_C1                    IPCC1_C1_S
#define IPCC1_C1_BASE               IPCC1_C1_BASE_S

#define IPCC1_C2                    IPCC1_C2_S
#define IPCC1_C2_BASE               IPCC1_C2_BASE_S

#define DCMI                        DCMI_S
#define DCMI_BASE                   DCMI_BASE_S

#define PSSI                        PSSI_S
#define PSSI_BASE                   PSSI_BASE_S

#define CRC                         CRC_S
#define CRC_BASE                    CRC_BASE_S

#define MDF1                        MDF1_S
#define MDF1_BASE                   MDF1_BASE_S

#define ADC12                       ADC12_S
#define ADC12_BASE                  ADC12_BASE_S

#define ADC3                        ADC3_S
#define ADC3_BASE                   ADC3_BASE_S

#define IOMANAGER                   IOMANAGER_S
#define IOMANAGER_BASE              IOMANAGER_BASE_S

#define HPDMA1_Channel0             HPDMA1_Channel0_S
#define HPDMA1_Channel0_BASE        HPDMA1_Channel0_BASE_S

#define HPDMA1_Channel1             HPDMA1_Channel1_S
#define HPDMA1_Channel1_BASE        HPDMA1_Channel1_BASE_S

#define HPDMA1_Channel2             HPDMA1_Channel2_S
#define HPDMA1_Channel2_BASE        HPDMA1_Channel2_BASE_S

#define HPDMA1_Channel3             HPDMA1_Channel3_S
#define HPDMA1_Channel3_BASE        HPDMA1_Channel3_BASE_S

#define HPDMA1_Channel4             HPDMA1_Channel4_S
#define HPDMA1_Channel4_BASE        HPDMA1_Channel4_BASE_S

#define HPDMA1_Channel5             HPDMA1_Channel5_S
#define HPDMA1_Channel5_BASE        HPDMA1_Channel5_BASE_S

#define HPDMA1_Channel6             HPDMA1_Channel6_S
#define HPDMA1_Channel6_BASE        HPDMA1_Channel6_BASE_S

#define HPDMA1_Channel7             HPDMA1_Channel7_S
#define HPDMA1_Channel7_BASE        HPDMA1_Channel7_BASE_S

#define HPDMA1_Channel8             HPDMA1_Channel8_S
#define HPDMA1_Channel8_BASE        HPDMA1_Channel8_BASE_S

#define HPDMA1_Channel9             HPDMA1_Channel9_S
#define HPDMA1_Channel9_BASE        HPDMA1_Channel9_BASE_S

#define HPDMA1_Channel10            HPDMA1_Channel10_S
#define HPDMA1_Channel10_BASE       HPDMA1_Channel10_BASE_S

#define HPDMA1_Channel11            HPDMA1_Channel11_S
#define HPDMA1_Channel11_BASE       HPDMA1_Channel11_BASE_S

#define HPDMA1_Channel12            HPDMA1_Channel12_S
#define HPDMA1_Channel12_BASE       HPDMA1_Channel12_BASE_S

#define HPDMA1_Channel13            HPDMA1_Channel13_S
#define HPDMA1_Channel13_BASE       HPDMA1_Channel13_BASE_S

#define HPDMA1_Channel14            HPDMA1_Channel14_S
#define HPDMA1_Channel14_BASE       HPDMA1_Channel14_BASE_S

#define HPDMA1_Channel15            HPDMA1_Channel15_S
#define HPDMA1_Channel15_BASE       HPDMA1_Channel15_BASE_S

#define HPDMA2_Channel0             HPDMA2_Channel0_S
#define HPDMA2_Channel0_BASE        HPDMA2_Channel0_BASE_S

#define HPDMA2_Channel1             HPDMA2_Channel1_S
#define HPDMA2_Channel1_BASE        HPDMA2_Channel1_BASE_S

#define HPDMA2_Channel2             HPDMA2_Channel2_S
#define HPDMA2_Channel2_BASE        HPDMA2_Channel2_BASE_S

#define HPDMA2_Channel3             HPDMA2_Channel3_S
#define HPDMA2_Channel3_BASE        HPDMA2_Channel3_BASE_S

#define HPDMA2_Channel4             HPDMA2_Channel4_S
#define HPDMA2_Channel4_BASE        HPDMA2_Channel4_BASE_S

#define HPDMA2_Channel5             HPDMA2_Channel5_S
#define HPDMA2_Channel5_BASE        HPDMA2_Channel5_BASE_S

#define HPDMA2_Channel6             HPDMA2_Channel6_S
#define HPDMA2_Channel6_BASE        HPDMA2_Channel6_BASE_S

#define HPDMA2_Channel7             HPDMA2_Channel7_S
#define HPDMA2_Channel7_BASE        HPDMA2_Channel7_BASE_S

#define HPDMA2_Channel8             HPDMA2_Channel8_S
#define HPDMA2_Channel8_BASE        HPDMA2_Channel8_BASE_S

#define HPDMA2_Channel9             HPDMA2_Channel9_S
#define HPDMA2_Channel9_BASE        HPDMA2_Channel9_BASE_S

#define HPDMA2_Channel10            HPDMA2_Channel10_S
#define HPDMA2_Channel10_BASE       HPDMA2_Channel10_BASE_S

#define HPDMA2_Channel11            HPDMA2_Channel11_S
#define HPDMA2_Channel11_BASE       HPDMA2_Channel11_BASE_S

#define HPDMA2_Channel12            HPDMA2_Channel12_S
#define HPDMA2_Channel12_BASE       HPDMA2_Channel12_BASE_S

#define HPDMA2_Channel13            HPDMA2_Channel13_S
#define HPDMA2_Channel13_BASE       HPDMA2_Channel13_BASE_S

#define HPDMA2_Channel14            HPDMA2_Channel14_S
#define HPDMA2_Channel14_BASE       HPDMA2_Channel14_BASE_S

#define HPDMA2_Channel15            HPDMA2_Channel15_S
#define HPDMA2_Channel15_BASE       HPDMA2_Channel15_BASE_S

#define HPDMA3_Channel0             HPDMA3_Channel0_S
#define HPDMA3_Channel0_BASE        HPDMA3_Channel0_BASE_S

#define HPDMA3_Channel1             HPDMA3_Channel1_S
#define HPDMA3_Channel1_BASE        HPDMA3_Channel1_BASE_S

#define HPDMA3_Channel2             HPDMA3_Channel2_S
#define HPDMA3_Channel2_BASE        HPDMA3_Channel2_BASE_S

#define HPDMA3_Channel3             HPDMA3_Channel3_S
#define HPDMA3_Channel3_BASE        HPDMA3_Channel3_BASE_S

#define HPDMA3_Channel4             HPDMA3_Channel4_S
#define HPDMA3_Channel4_BASE        HPDMA3_Channel4_BASE_S

#define HPDMA3_Channel5             HPDMA3_Channel5_S
#define HPDMA3_Channel5_BASE        HPDMA3_Channel5_BASE_S

#define HPDMA3_Channel6             HPDMA3_Channel6_S
#define HPDMA3_Channel6_BASE        HPDMA3_Channel6_BASE_S

#define HPDMA3_Channel7             HPDMA3_Channel7_S
#define HPDMA3_Channel7_BASE        HPDMA3_Channel7_BASE_S

#define HPDMA3_Channel8             HPDMA3_Channel8_S
#define HPDMA3_Channel8_BASE        HPDMA3_Channel8_BASE_S

#define HPDMA3_Channel9             HPDMA3_Channel9_S
#define HPDMA3_Channel9_BASE        HPDMA3_Channel9_BASE_S

#define HPDMA3_Channel10            HPDMA3_Channel10_S
#define HPDMA3_Channel10_BASE       HPDMA3_Channel10_BASE_S

#define HPDMA3_Channel11            HPDMA3_Channel11_S
#define HPDMA3_Channel11_BASE       HPDMA3_Channel11_BASE_S

#define HPDMA3_Channel12            HPDMA3_Channel12_S
#define HPDMA3_Channel12_BASE       HPDMA3_Channel12_BASE_S

#define HPDMA3_Channel13            HPDMA3_Channel13_S
#define HPDMA3_Channel13_BASE       HPDMA3_Channel13_BASE_S

#define HPDMA3_Channel14            HPDMA3_Channel14_S
#define HPDMA3_Channel14_BASE       HPDMA3_Channel14_BASE_S

#define HPDMA3_Channel15            HPDMA3_Channel15_S
#define HPDMA3_Channel15_BASE       HPDMA3_Channel15_BASE_S

/*!< AHB3 peripherals defaults to Secure aliases */
#define HASH                        HASH_S
#define HASH_BASE                   HASH_BASE_S

#define HASH_DIGEST                 HASH_DIGEST_S
#define HASH_DIGEST_BASE            HASH_DIGEST_BASE_S

#define RNG                         RNG_S
#define RNG_BASE                    RNG_BASE_S

#define CRYP1                       CRYP1_S
#define CRYP1_BASE                  CRYP1_BASE_S

#define CRYP2                       CRYP2_S
#define CRYP2_BASE                  CRYP2_BASE_S

#define PKA                         PKA_S
#define PKA_BASE                    PKA_BASE_S

#define RAMCFG                      RAMCFG_S
#define RAMCFG_BASE                 RAMCFG_BASE_S

#define RAMCFG_SYSRAM               RAMCFG_SYSRAM_S
#define RAMCFG_SYSRAM_BASE          RAMCFG_SYSRAM_BASE_S

#define RAMCFG_SRAM1                RAMCFG_SRAM1_S
#define RAMCFG_SRAM1_BASE           RAMCFG_SRAM1_BASE_S

#define RAMCFG_SRAM2                RAMCFG_SRAM2_S
#define RAMCFG_SRAM2_BASE           RAMCFG_SRAM2_BASE_S

#define RAMCFG_RETRAM               RAMCFG_RETRAM_S
#define RAMCFG_RETRAM_BASE          RAMCFG_RETRAM_BASE_S

#define RAMCFG_LPSRAM1              RAMCFG_LPSRAM1_S
#define RAMCFG_LPSRAM1_BASE         RAMCFG_LPSRAM1_BASE_S

#define RAMCFG_LPSRAM2              RAMCFG_LPSRAM2_S
#define RAMCFG_LPSRAM2_BASE         RAMCFG_LPSRAM2_BASE_S

#define RAMCFG_LPSRAM3              RAMCFG_LPSRAM3_S
#define RAMCFG_LPSRAM3_BASE         RAMCFG_LPSRAM3_BASE_S

#define RAMCFG_BKPSRAM              RAMCFG_BKPSRAM_S
#define RAMCFG_BKPSRAM_BASE         RAMCFG_BKPSRAM_BASE_S

#define RIFSC                       RIFSC_S
#define RIFSC_BASE                  RIFSC_BASE_S

#define RISC                        RISC_S
#define RISC_BASE                   RISC_BASE_S

#define RIMC                        RIMC_S
#define RIMC_BASE                   RIMC_BASE_S

#define RIFSC_ID                    RIFSC_ID_S
#define RIFSC_ID_BASE               RIFSC_ID_BASE_S

#define IAC                         IAC_S
#define IAC_BASE                    IAC_BASE_S

#define RISAF1                      RISAF1_S
#define RISAF1_BASE                 RISAF1_BASE_S

#define RISAF2                      RISAF2_S
#define RISAF2_BASE                 RISAF2_BASE_S

#define RISAF4                      RISAF4_S
#define RISAF4_BASE                 RISAF4_BASE_S

#define RISAF5                      RISAF5_S
#define RISAF5_BASE                 RISAF5_BASE_S

#define RISAB1                      RISAB1_S
#define RISAB1_BASE                 RISAB1_BASE_S

#define RISAB2                      RISAB2_S
#define RISAB2_BASE                 RISAB2_BASE_S

#define RISAB3                      RISAB3_S
#define RISAB3_BASE                 RISAB3_BASE_S

#define RISAB4                      RISAB4_S
#define RISAB4_BASE                 RISAB4_BASE_S

#define RISAB5                      RISAB5_S
#define RISAB5_BASE                 RISAB5_BASE_S

#define RISAB6                      RISAB6_S
#define RISAB6_BASE                 RISAB6_BASE_S

/*!< APB3 peripherals defaults to Secure aliases */
#define BSEC                        BSEC_S
#define BSEC_BASE                   BSEC_BASE_S

#define IWDG1                       IWDG1_S
#define IWDG1_BASE                  IWDG1_BASE_S

#define IWDG2                       IWDG2_S
#define IWDG2_BASE                  IWDG2_BASE_S

#define IWDG3                       IWDG3_S
#define IWDG3_BASE                  IWDG3_BASE_S

#define IWDG4                       IWDG4_S
#define IWDG4_BASE                  IWDG4_BASE_S

#define WWDG1                       WWDG1_S
#define WWDG1_BASE                  WWDG1_BASE_S

#define VREFBUF                     VREFBUF_S
#define VREFBUF_BASE                VREFBUF_BASE_S

#define TEMP                        TEMP_S
#define TEMP_BASE                   TEMP_BASE_S

#if defined(STM32MP2XX_ASSY2_2_1)
#define PMB                         PMB_S
#define PMB_BASE                    PMB_BASE_S
#else /* STM32MP2XX_ASSY2_2_1 */
#define SERC                        SERC_S
#define SERC_BASE                   SERC_BASE_S
#endif /* else STM32MP2XX_ASSY2_2_1 */

#define HDP                         HDP_S
#define HDP_BASE                    HDP_BASE_S

/*!< AHB4 peripherals defaults to Secure aliases */
#define RCC                         RCC_S
#define RCC_BASE                    RCC_BASE_S

#define PWR                         PWR_S
#define PWR_BASE                    PWR_BASE_S

#define EXTI1                       EXTI1_S
#define EXTI1_BASE                  EXTI1_BASE_S

#define EXTI1_C1                    EXTI1_C1_S
#define EXTI1_C1_BASE               EXTI1_C1_BASE_S

#define EXTI1_C2                    EXTI1_C2_S
#define EXTI1_C2_BASE               EXTI1_C2_BASE_S

#define SYSCFG                      SYSCFG_S
#define SYSCFG_BASE                 SYSCFG_BASE_S

#define GPIOA                       GPIOA_S
#define GPIOA_BASE                  GPIOA_BASE_S

#define GPIOB                       GPIOB_S
#define GPIOB_BASE                  GPIOB_BASE_S

#define GPIOC                       GPIOC_S
#define GPIOC_BASE                  GPIOC_BASE_S

#define GPIOD                       GPIOD_S
#define GPIOD_BASE                  GPIOD_BASE_S

#define GPIOE                       GPIOE_S
#define GPIOE_BASE                  GPIOE_BASE_S

#define GPIOF                       GPIOF_S
#define GPIOF_BASE                  GPIOF_BASE_S

#define GPIOG                       GPIOG_S
#define GPIOG_BASE                  GPIOG_BASE_S

#define GPIOH                       GPIOH_S
#define GPIOH_BASE                  GPIOH_BASE_S

#define GPIOI                       GPIOI_S
#define GPIOI_BASE                  GPIOI_BASE_S

#define GPIOJ                       GPIOJ_S
#define GPIOJ_BASE                  GPIOJ_BASE_S

#define GPIOK                       GPIOK_S
#define GPIOK_BASE                  GPIOK_BASE_S

/*!< SMART_RUN_APB peripherals defaults to Secure aliases */
#define RTC                         RTC_S
#define RTC_BASE                    RTC_BASE_S

#define TAMP                        TAMP_S
#define TAMP_BASE                   TAMP_BASE_S

#define SPI8                        SPI8_S
#define SPI8_BASE                   SPI8_BASE_S

#define LPUART1                     LPUART1_S
#define LPUART1_BASE                LPUART1_BASE_S

#define I2C8                        I2C8_S
#define I2C8_BASE                   I2C8_BASE_S

#define LPTIM3                      LPTIM3_S
#define LPTIM3_BASE                 LPTIM3_BASE_S

#define LPTIM4                      LPTIM4_S
#define LPTIM4_BASE                 LPTIM4_BASE_S

#define LPTIM5                      LPTIM5_S
#define LPTIM5_BASE                 LPTIM5_BASE_S

#if defined(STM32MP2XX_ASSY2_2_1)
#define CEC                         CEC_S
#define CEC_BASE                    CEC_BASE_S
#endif /* STM32MP2XX_ASSY2_2_1 */

#define I3C4                        I3C4_S
#define I3C4_BASE                   I3C4_BASE_S

#define IWDG5                       IWDG5_S
#define IWDG5_BASE                  IWDG5_BASE_S

#define WWDG2                       WWDG2_S
#define WWDG2_BASE                  WWDG2_BASE_S

/*!< SMART_RUN_AHB peripherals defaults to Secure aliases */
#define GPIOZ                       GPIOZ_S
#define GPIOZ_BASE                  GPIOZ_BASE_S

#define LPDMA                       LPDMA_S
#define LPDMA_BASE                  LPDMA_BASE_S

#define MDF2                        MDF2_S
#define MDF2_BASE                   MDF2_BASE_S

#define EXTI2                       EXTI2_S
#define EXTI2_BASE                  EXTI2_BASE_S

#define EXTI2_C1                    EXTI2_C1_S
#define EXTI2_C1_BASE               EXTI2_C1_BASE_S

#define EXTI2_C2                    EXTI2_C2_S
#define EXTI2_C2_BASE               EXTI2_C2_BASE_S

#define EXTI2_C3                    EXTI2_C3_S
#define EXTI2_C3_BASE               EXTI2_C3_BASE_S

#define HSEM                        HSEM_S
#define HSEM_BASE                   HSEM_BASE_S

#define IPCC2                       IPCC2_S
#define IPCC2_BASE                  IPCC2_BASE_S

#define IPCC2_C1                    IPCC2_C1_S
#define IPCC2_C1_BASE               IPCC2_C1_BASE_S

#define IPCC2_C2                    IPCC2_C2_S
#define IPCC2_C2_BASE               IPCC2_C2_BASE_S

#define LPDMA_Channel0              LPDMA_Channel0_S
#define LPDMA_Channel0_BASE         LPDMA_Channel0_BASE_S

#define LPDMA_Channel1              LPDMA_Channel1_S
#define LPDMA_Channel1_BASE         LPDMA_Channel1_BASE_S

#define LPDMA_Channel2              LPDMA_Channel2_S
#define LPDMA_Channel2_BASE         LPDMA_Channel2_BASE_S

#define LPDMA_Channel3              LPDMA_Channel3_S
#define LPDMA_Channel3_BASE         LPDMA_Channel3_BASE_S

/*!< APB4 peripherals defaults to Secure aliases */
#define DSI                         DSI_S
#define DSI_BASE                    DSI_BASE_S

#define LTDC                        LTDC_S
#define LTDC_BASE                   LTDC_BASE_S

#define LTDC_Layer1                 LTDC_Layer1_S
#define LTDC_Layer1_BASE            LTDC_Layer1_BASE_S

#define LTDC_Layer2                 LTDC_Layer2_S
#define LTDC_Layer2_BASE            LTDC_Layer2_BASE_S

#define LTDC_Layer3                 LTDC_Layer3_S
#define LTDC_Layer3_BASE            LTDC_Layer3_BASE_S

#define CSI2HOST                    CSI2HOST_S
#define CSI2HOST_BASE               CSI2HOST_BASE_S

#define DCMIPP                      DCMIPP_S
#define DCMIPP_BASE                 DCMIPP_BASE_S

#define DDRC                        DDRC_S
#define DDRC_BASE                   DDRC_BASE_S

#define STGENC                      STGENC_S
#define STGENC_BASE                 STGENC_BASE_S

#define STGENR                      STGENR_S
#define STGENR_BASE                 STGENR_BASE_S

/*!< FMC Banks registers defaults to Secure aliases */
#define FMC_Bank1                   FMC_Bank1_R_S
#define FMC_Bank1_BASE              FMC_Bank1_R_BASE_S

#define FMC_Bank1E                  FMC_Bank1E_R_S
#define FMC_Bank1E_BASE             FMC_Bank1E_R_BASE_S

#define FMC_Bank2                   FMC_Bank2_R_S
#define FMC_Bank2_BASE              FMC_Bank2_R_BASE_S

#define FMC_Bank3                   FMC_Bank3_R_S
#define FMC_Bank3_BASE              FMC_Bank3_R_BASE_S

#define FMC_Bank5_6                 FMC_Bank5_6_R_S
#define FMC_Bank5_6_BASE            FMC_Bank5_6_R_BASE_S

#define SDMMC1                      SDMMC1_S
#define SDMMC1_BASE                 SDMMC1_BASE_S

#define SDMMC2                      SDMMC2_S
#define SDMMC2_BASE                 SDMMC2_BASE_S

#define SDMMC3                      SDMMC3_S
#define SDMMC3_BASE                 SDMMC3_BASE_S

#define GPU                         GPU_S
#define GPU_BASE                    GPU_BASE_S

#define ETH1                        ETH1_BAS_S
#define ETH1_BASE                   ETH1_BASE_S

#define ETH2                        ETH2_S
#define ETH2_BASE                   ETH2_BASE_S

#define USB3                        USB3_S
#define USB3DRD_BASE                USB3DRD_BASE_S

#define DDRPHYC                     DDRPHYC_S
#define DDRPHYC_BASE                DDRPHYC_BASE_S

#define DBGMCU                      DBGMCU_S
#define DBGMCU_BASE                 DBGMCU_BASE_S

#if ! defined(STM32MP2XX_ASSY2_2_1)
/*!< AHB6 peripherals defaults to Secure aliases */
#define ETHSW_MSG                  ETHSW_MSG_S
#define ETHSW_MSG_BASE             ETHSW_MSG_BASE_S

#define ETHSW_CFG                  ETHSW_CFG_S
#define ETHSW_CFG_BASE             ETHSW_CFG_BASE_S
#endif /* ! STM32MP2XX_ASSY2_2_1 */

#else /*  CORTEX_IN_SECURE_STATE */
/*!< Peripherals base addresses defaults to Non secure aliases */
#define PERIPH_BASE                 PERIPH_BASE_NS

/*!< Memory base addresses defaults to Non secure aliases */
#define SRAMS_BASE                  SRAMS_BASE_NS

#define SYSRAM_BASE                 SYSRAM_BASE_NS
#define SRAM1_BASE                  SRAM1_BASE_NS
#define SRAM2_BASE                  SRAM2_BASE_NS
#define RETRAM_BASE                 RETRAM_BASE_NS
#if defined(STM32MP2XX_ASSY2_2_1)
#define LTDC_SRAM_BASE              LTDC_SRAM_BASE_NS
#else /* STM32MP2XX_ASSY2_2_1 */
#define VDERAM_BASE                 VDERAM_BASE_NS
#endif /* else STM32MP2XX_ASSY2_2_1 */
#define LPSRAM1_BASE                LPSRAM1_BASE_NS
#define LPSRAM2_BASE                LPSRAM2_BASE_NS
#define LPSRAM3_BASE                LPSRAM3_BASE_NS

#define BKP_SRAM_BASE               BKP_SRAM_BASE_NS
#define CAN_SRAM_BASE               CAN_SRAM_BASE_NS

#define SRAMS_FETCH_BASE            SRAMS_FETCH_BASE_NS

/*!< APB1 peripherals defaults to Non secure aliases */
#define TIM2                        TIM2_NS
#define TIM2_BASE                   TIM2_BASE_NS

#define TIM3                        TIM3_NS
#define TIM3_BASE                   TIM3_BASE_NS

#define TIM4                        TIM4_NS
#define TIM4_BASE                   TIM4_BASE_NS

#define TIM5                        TIM5_NS
#define TIM5_BASE                   TIM5_BASE_NS

#define TIM6                        TIM6_NS
#define TIM6_BASE                   TIM6_BASE_NS

#define TIM7                        TIM7_NS
#define TIM7_BASE                   TIM7_BASE_NS

#define TIM12                       TIM12_NS
#define TIM12_BASE                  TIM12_BASE_NS

#define TIM13                       TIM13_NS
#define TIM13_BASE                  TIM13_BASE_NS

#define TIM14                       TIM14_NS
#define TIM14_BASE                  TIM14_BASE_NS

#define LPTIM1                      LPTIM1_NS
#define LPTIM1_BASE                 LPTIM1_BASE_NS

#define LPTIM2                      LPTIM2_NS
#define LPTIM2_BASE                 LPTIM2_BASE_NS

#define SPI2                        SPI2_NS
#define SPI2_BASE                   SPI2_BASE_NS

#define SPI3                        SPI3_NS
#define SPI3_BASE                   SPI3_BASE_NS

#define SPDIFRX                     SPDIFRX_NS
#define SPDIFRX_BASE                SPDIFRX_BASE_NS

#define USART2                      USART2_NS
#define USART2_BASE                 USART2_BASE_NS

#define USART3                      USART3_NS
#define USART3_BASE                 USART3_BASE_NS

#define UART4                       UART4_NS
#define UART4_BASE                  UART4_BASE_NS

#define UART5                       UART5_NS
#define UART5_BASE                  UART5_BASE_NS

#define I2C1                        I2C1_NS
#define I2C1_BASE                   I2C1_BASE_NS

#define I2C2                        I2C2_NS
#define I2C2_BASE                   I2C2_BASE_NS

#define I2C3                        I2C3_NS
#define I2C3_BASE                   I2C3_BASE_NS

#define I2C4                        I2C4_NS
#define I2C4_BASE                   I2C4_BASE_NS

#define I2C5                        I2C5_NS
#define I2C5_BASE                   I2C5_BASE_NS

#define I2C6                        I2C6_NS
#define I2C6_BASE                   I2C6_BASE_NS

#define I2C7                        I2C7_NS
#define I2C7_BASE                   I2C7_BASE_NS

#define I3C1                        I3C1_NS
#define I3C1_BASE                   I3C1_BASE_NS

#define I3C1                        I3C1_NS
#define I3C1_BASE                   I3C1_BASE_NS

#define I3C2                        I3C2_NS
#define I3C2_BASE                   I3C2_BASE_NS

#define I3C2                        I3C2_NS
#define I3C2_BASE                   I3C2_BASE_NS

#define I3C3                        I3C3_NS
#define I3C3_BASE                   I3C3_BASE_NS

#define TIM10                       TIM10_NS
#define TIM10_BASE                  TIM10_BASE_NS

#define TIM11                       TIM11_NS
#define TIM11_BASE                  TIM11_BASE_NS

/*!< APB2 peripherals defaults to Non secure aliases */
#define TIM1                        TIM1_NS
#define TIM1_BASE                   TIM1_BASE_NS

#define TIM8                        TIM8_NS
#define TIM8_BASE                   TIM8_BASE_NS

#define USART6                      USART6_NS
#define USART6_BASE                 USART6_BASE_NS

#define SPI1                        SPI1_NS
#define SPI1_BASE                   SPI1_BASE_NS

#define SPI4                        SPI4_NS
#define SPI4_BASE                   SPI4_BASE_NS

#define TIM15                       TIM15_NS
#define TIM15_BASE                  TIM15_BASE_NS

#define TIM16                       TIM16_NS
#define TIM16_BASE                  TIM16_BASE_NS

#define TIM17                       TIM17_NS
#define TIM17_BASE                  TIM17_BASE_NS

#define SPI5                        SPI5_NS
#define SPI5_BASE                   SPI5_BASE_NS

#define SAI1                        SAI1_NS
#define SAI1_BASE                   SAI1_BASE_NS

#define SAI1_Block_A                SAI1_Block_A_NS
#define SAI1_Block_A_BASE           SAI1_Block_A_BASE_NS

#define SAI1_Block_B                SAI1_Block_B_NS
#define SAI1_Block_B_BASE           SAI1_Block_B_BASE_NS

#define SAI2                        SAI2_NS
#define SAI2_BASE                   SAI2_BASE_NS

#define SAI2_Block_A                SAI2_Block_A_NS
#define SAI2_Block_A_BASE           SAI2_Block_A_BASE_NS

#define SAI2_Block_B                SAI2_Block_B_NS
#define SAI2_Block_B_BASE           SAI2_Block_B_BASE_NS

#define SAI3                        SAI3_NS
#define SAI3_BASE                   SAI3_BASE_NS

#define SAI3_Block_A                SAI3_Block_A_NS
#define SAI3_Block_A_BASE           SAI3_Block_A_BASE_NS

#define SAI3_Block_B                SAI3_Block_B_NS
#define SAI3_Block_B_BASE           SAI3_Block_B_BASE_NS

#define UART9                       UART9_NS
#define UART9_BASE                  UART9_BASE_NS

#define FDCAN1                      FDCAN1_NS
#define FDCAN1_BASE                 FDCAN1_BASE_NS

#define FDCAN2                      FDCAN2_NS
#define FDCAN2_BASE                 FDCAN2_BASE_NS

#define FDCAN3                      FDCAN3_NS
#define FDCAN3_BASE                 FDCAN3_BASE_NS

#define FDCAN_CCU                   FDCAN_CCU_NS
#define FDCAN_CCU_BASE              FDCAN_CCU_BASE_NS

#define TIM20                       TIM20_NS
#define TIM20_BASE                  TIM20_BASE_NS

#define USART1                      USART1_NS
#define USART1_BASE                 USART1_BASE_NS

#define SAI4                        SAI4_NS
#define SAI4_BASE                   SAI4_BASE_NS

#define SAI4_Block_A                SAI4_Block_A_NS
#define SAI4_Block_A_BASE           SAI4_Block_A_BASE_NS

#define SAI4_Block_B                SAI4_Block_B_NS
#define SAI4_Block_B_BASE           SAI4_Block_B_BASE_NS

#define SPI6                        SPI6_NS
#define SPI6_BASE                   SPI6_BASE_NS

#define SPI6                        SPI6_NS
#define SPI6_BASE                   SPI6_BASE_NS

#define SPI7                        SPI7_NS
#define SPI7_BASE                   SPI7_BASE_NS

#define UART7                       UART7_NS
#define UART7_BASE                  UART7_BASE_NS

#define UART8                       UART8_NS
#define UART8_BASE                  UART8_BASE_NS

/*!< AHB2 peripherals defaults to Non secure aliases */
#define HPDMA1                      HPDMA1_NS
#define HPDMA1_BASE                 HPDMA1_BASE_NS

#define HPDMA2                      HPDMA2_NS
#define HPDMA2_BASE                 HPDMA2_BASE_NS

#define HPDMA3                      HPDMA3_NS
#define HPDMA3_BASE                 HPDMA3_BASE_NS

#define OCTOSPI1                    OCTOSPI1_NS
#define OCTOSPI1_BASE               OCTOSPI1_BASE_NS

#define OCTOSPI2                    OCTOSPI2_NS
#define OCTOSPI2_BASE               OCTOSPI2_BASE_NS

#define OCTO1_OTFD_CRYPTO2          OCTO1_OTFD_CRYPTO2_NS
#define OCTO1_OTFD_CRYPTO2_BASE     OCTO1_OTFD_CRYPTO2_BASE_NS

#define OCTO2_OTFD_CRYPTO2          OCTO2_OTFD_CRYPTO2_NS
#define OCTO2_OTFD_CRYPTO2_BASE     OCTO2_OTFD_CRYPTO2_BASE_NS

#define ICACHE                      ICACHE_NS
#define ICACHE_BASE                 ICACHE_BASE_NS

#define DCACHE                      DCACHE_NS
#define DCACHE_BASE                 DCACHE_BASE_NS

#define IPCC1                       IPCC1_NS
#define IPCC1_BASE                  IPCC1_BASE_NS

#define IPCC1_C1                    IPCC1_C1_NS
#define IPCC1_C1_BASE               IPCC1_C1_BASE_NS

#define IPCC1_C2                    IPCC1_C2_NS
#define IPCC1_C2_BASE               IPCC1_C2_BASE_NS

#define DCMI                        DCMI_NS
#define DCMI_BASE                   DCMI_BASE_NS

#define PSSI                        PSSI_NS
#define PSSI_BASE                   PSSI_BASE_NS

#define CRC                         CRC_NS
#define CRC_BASE                    CRC_BASE_NS

#define MDF1                        MDF1_NS
#define MDF1_BASE                   MDF1_BASE_NS

#define ADC12                       ADC12_NS
#define ADC12_BASE                  ADC12_BASE_NS

#define ADC3                        ADC3_NS
#define ADC3_BASE                   ADC3_BASE_NS

#define IOMANAGER                   IOMANAGER_NS
#define IOMANAGER_BASE              IOMANAGER_BASE_NS

#define HPDMA1_Channel0             HPDMA1_Channel0_NS
#define HPDMA1_Channel0_BASE        HPDMA1_Channel0_BASE_NS

#define HPDMA1_Channel1             HPDMA1_Channel1_NS
#define HPDMA1_Channel1_BASE        HPDMA1_Channel1_BASE_NS

#define HPDMA1_Channel2             HPDMA1_Channel2_NS
#define HPDMA1_Channel2_BASE        HPDMA1_Channel2_BASE_NS

#define HPDMA1_Channel3             HPDMA1_Channel3_NS
#define HPDMA1_Channel3_BASE        HPDMA1_Channel3_BASE_NS

#define HPDMA1_Channel4             HPDMA1_Channel4_NS
#define HPDMA1_Channel4_BASE        HPDMA1_Channel4_BASE_NS

#define HPDMA1_Channel5             HPDMA1_Channel5_NS
#define HPDMA1_Channel5_BASE        HPDMA1_Channel5_BASE_NS

#define HPDMA1_Channel6             HPDMA1_Channel6_NS
#define HPDMA1_Channel6_BASE        HPDMA1_Channel6_BASE_NS

#define HPDMA1_Channel7             HPDMA1_Channel7_NS
#define HPDMA1_Channel7_BASE        HPDMA1_Channel7_BASE_NS

#define HPDMA1_Channel8             HPDMA1_Channel8_NS
#define HPDMA1_Channel8_BASE        HPDMA1_Channel8_BASE_NS

#define HPDMA1_Channel9             HPDMA1_Channel9_NS
#define HPDMA1_Channel9_BASE        HPDMA1_Channel9_BASE_NS

#define HPDMA1_Channel10            HPDMA1_Channel10_NS
#define HPDMA1_Channel10_BASE       HPDMA1_Channel10_BASE_NS

#define HPDMA1_Channel11            HPDMA1_Channel11_NS
#define HPDMA1_Channel11_BASE       HPDMA1_Channel11_BASE_NS

#define HPDMA1_Channel12            HPDMA1_Channel12_NS
#define HPDMA1_Channel12_BASE       HPDMA1_Channel12_BASE_NS

#define HPDMA1_Channel13            HPDMA1_Channel13_NS
#define HPDMA1_Channel13_BASE       HPDMA1_Channel13_BASE_NS

#define HPDMA1_Channel14            HPDMA1_Channel14_NS
#define HPDMA1_Channel14_BASE       HPDMA1_Channel14_BASE_NS

#define HPDMA1_Channel15            HPDMA1_Channel15_NS
#define HPDMA1_Channel15_BASE       HPDMA1_Channel15_BASE_NS

#define HPDMA2_Channel0             HPDMA2_Channel0_NS
#define HPDMA2_Channel0_BASE        HPDMA2_Channel0_BASE_NS

#define HPDMA2_Channel1             HPDMA2_Channel1_NS
#define HPDMA2_Channel1_BASE        HPDMA2_Channel1_BASE_NS

#define HPDMA2_Channel2             HPDMA2_Channel2_NS
#define HPDMA2_Channel2_BASE        HPDMA2_Channel2_BASE_NS

#define HPDMA2_Channel3             HPDMA2_Channel3_NS
#define HPDMA2_Channel3_BASE        HPDMA2_Channel3_BASE_NS

#define HPDMA2_Channel4             HPDMA2_Channel4_NS
#define HPDMA2_Channel4_BASE        HPDMA2_Channel4_BASE_NS

#define HPDMA2_Channel5             HPDMA2_Channel5_NS
#define HPDMA2_Channel5_BASE        HPDMA2_Channel5_BASE_NS

#define HPDMA2_Channel6             HPDMA2_Channel6_NS
#define HPDMA2_Channel6_BASE        HPDMA2_Channel6_BASE_NS

#define HPDMA2_Channel7             HPDMA2_Channel7_NS
#define HPDMA2_Channel7_BASE        HPDMA2_Channel7_BASE_NS

#define HPDMA2_Channel8             HPDMA2_Channel8_NS
#define HPDMA2_Channel8_BASE        HPDMA2_Channel8_BASE_NS

#define HPDMA2_Channel9             HPDMA2_Channel9_NS
#define HPDMA2_Channel9_BASE        HPDMA2_Channel9_BASE_NS

#define HPDMA2_Channel10            HPDMA2_Channel10_NS
#define HPDMA2_Channel10_BASE       HPDMA2_Channel10_BASE_NS

#define HPDMA2_Channel11            HPDMA2_Channel11_NS
#define HPDMA2_Channel11_BASE       HPDMA2_Channel11_BASE_NS

#define HPDMA2_Channel12            HPDMA2_Channel12_NS
#define HPDMA2_Channel12_BASE       HPDMA2_Channel12_BASE_NS

#define HPDMA2_Channel13            HPDMA2_Channel13_NS
#define HPDMA2_Channel13_BASE       HPDMA2_Channel13_BASE_NS

#define HPDMA2_Channel14            HPDMA2_Channel14_NS
#define HPDMA2_Channel14_BASE       HPDMA2_Channel14_BASE_NS

#define HPDMA2_Channel15            HPDMA2_Channel15_NS
#define HPDMA2_Channel15_BASE       HPDMA2_Channel15_BASE_NS

#define HPDMA3_Channel0             HPDMA3_Channel0_NS
#define HPDMA3_Channel0_BASE        HPDMA3_Channel0_BASE_NS

#define HPDMA3_Channel1             HPDMA3_Channel1_NS
#define HPDMA3_Channel1_BASE        HPDMA3_Channel1_BASE_NS

#define HPDMA3_Channel2             HPDMA3_Channel2_NS
#define HPDMA3_Channel2_BASE        HPDMA3_Channel2_BASE_NS

#define HPDMA3_Channel3             HPDMA3_Channel3_NS
#define HPDMA3_Channel3_BASE        HPDMA3_Channel3_BASE_NS

#define HPDMA3_Channel4             HPDMA3_Channel4_NS
#define HPDMA3_Channel4_BASE        HPDMA3_Channel4_BASE_NS

#define HPDMA3_Channel5             HPDMA3_Channel5_NS
#define HPDMA3_Channel5_BASE        HPDMA3_Channel5_BASE_NS

#define HPDMA3_Channel6             HPDMA3_Channel6_NS
#define HPDMA3_Channel6_BASE        HPDMA3_Channel6_BASE_NS

#define HPDMA3_Channel7             HPDMA3_Channel7_NS
#define HPDMA3_Channel7_BASE        HPDMA3_Channel7_BASE_NS

#define HPDMA3_Channel8             HPDMA3_Channel8_NS
#define HPDMA3_Channel8_BASE        HPDMA3_Channel8_BASE_NS

#define HPDMA3_Channel9             HPDMA3_Channel9_NS
#define HPDMA3_Channel9_BASE        HPDMA3_Channel9_BASE_NS

#define HPDMA3_Channel10            HPDMA3_Channel10_NS
#define HPDMA3_Channel10_BASE       HPDMA3_Channel10_BASE_NS

#define HPDMA3_Channel11            HPDMA3_Channel11_NS
#define HPDMA3_Channel11_BASE       HPDMA3_Channel11_BASE_NS

#define HPDMA3_Channel12            HPDMA3_Channel12_NS
#define HPDMA3_Channel12_BASE       HPDMA3_Channel12_BASE_NS

#define HPDMA3_Channel13            HPDMA3_Channel13_NS
#define HPDMA3_Channel13_BASE       HPDMA3_Channel13_BASE_NS

#define HPDMA3_Channel14            HPDMA3_Channel14_NS
#define HPDMA3_Channel14_BASE       HPDMA3_Channel14_BASE_NS

#define HPDMA3_Channel15            HPDMA3_Channel15_NS
#define HPDMA3_Channel15_BASE       HPDMA3_Channel15_BASE_NS

/*!< AHB3 peripherals defaults to Non secure aliases */
#define HASH                        HASH_NS
#define HASH_BASE                   HASH_BASE_NS

#define HASH_DIGEST                 HASH_DIGEST_NS
#define HASH_DIGEST_BASE            HASH_DIGEST_BASE_NS

#define RNG                         RNG_NS
#define RNG_BASE                    RNG_BASE_NS

#define CRYP1                       CRYP1_NS
#define CRYP1_BASE                  CRYP1_BASE_NS

#define CRYP2                       CRYP2_NS
#define CRYP2_BASE                  CRYP2_BASE_NS

#define PKA                         PKA_NS
#define PKA_BASE                    PKA_BASE_NS

#define RAMCFG                      RAMCFG_NS
#define RAMCFG_BASE                 RAMCFG_BASE_NS

#define RAMCFG_SYSRAM               RAMCFG_SYSRAM_NS
#define RAMCFG_SYSRAM_BASE          RAMCFG_SYSRAM_BASE_NS

#define RAMCFG_SRAM1                RAMCFG_SRAM1_NS
#define RAMCFG_SRAM1_BASE           RAMCFG_SRAM1_BASE_NS

#define RAMCFG_SRAM2                RAMCFG_SRAM2_NS
#define RAMCFG_SRAM2_BASE           RAMCFG_SRAM2_BASE_NS

#define RAMCFG_RETRAM               RAMCFG_RETRAM_NS
#define RAMCFG_RETRAM_BASE          RAMCFG_RETRAM_BASE_NS

#define RAMCFG_LPSRAM1              RAMCFG_LPSRAM1_NS
#define RAMCFG_LPSRAM1_BASE         RAMCFG_LPSRAM1_BASE_NS

#define RAMCFG_LPSRAM2              RAMCFG_LPSRAM2_NS
#define RAMCFG_LPSRAM2_BASE         RAMCFG_LPSRAM2_BASE_NS

#define RAMCFG_LPSRAM3              RAMCFG_LPSRAM3_NS
#define RAMCFG_LPSRAM3_BASE         RAMCFG_LPSRAM3_BASE_NS

#define RAMCFG_BKPSRAM              RAMCFG_BKPSRAM_NS
#define RAMCFG_BKPSRAM_BASE         RAMCFG_BKPSRAM_BASE_NS

#define RIFSC                       RIFSC_NS
#define RIFSC_BASE                  RIFSC_BASE_NS

#define RISC                        RISC_NS
#define RISC_BASE                   RISC_BASE_NS

#define RIMC                        RIMC_NS
#define RIMC_BASE                   RIMC_BASE_NS

#define RIFSC_ID                    RIFSC_ID_NS
#define RIFSC_ID_BASE               RIFSC_ID_BASE_NS

#define IAC                         IAC_NS
#define IAC_BASE                    IAC_BASE_NS

#define RISAF1                      RISAF1_NS
#define RISAF1_BASE                 RISAF1_BASE_NS

#define RISAF2                      RISAF2_NS
#define RISAF2_BASE                 RISAF2_BASE_NS

#define RISAF4                      RISAF4_NS
#define RISAF4_BASE                 RISAF4_BASE_NS

#define RISAF5                      RISAF5_NS
#define RISAF5_BASE                 RISAF5_BASE_NS

#define RISAB1                      RISAB1_NS
#define RISAB1_BASE                 RISAB1_BASE_NS

#define RISAB2                      RISAB2_NS
#define RISAB2_BASE                 RISAB2_BASE_NS

#define RISAB3                      RISAB3_NS
#define RISAB3_BASE                 RISAB3_BASE_NS

#define RISAB4                      RISAB4_NS
#define RISAB4_BASE                 RISAB4_BASE_NS

#define RISAB5                      RISAB5_NS
#define RISAB5_BASE                 RISAB5_BASE_NS

#define RISAB6                      RISAB6_NS
#define RISAB6_BASE                 RISAB6_BASE_NS

/*!< APB3 peripherals defaults to Non secure aliases */
#define BSEC                        BSEC_NS
#define BSEC_BASE                   BSEC_BASE_NS

#define IWDG1                       IWDG1_NS
#define IWDG1_BASE                  IWDG1_BASE_NS

#define IWDG2                       IWDG2_NS
#define IWDG2_BASE                  IWDG2_BASE_NS

#define IWDG3                       IWDG3_NS
#define IWDG3_BASE                  IWDG3_BASE_NS

#define IWDG4                       IWDG4_NS
#define IWDG4_BASE                  IWDG4_BASE_NS

#define WWDG1                       WWDG1_NS
#define WWDG1_BASE                  WWDG1_BASE_NS

#define VREFBUF                     VREFBUF_NS
#define VREFBUF_BASE                VREFBUF_BASE_NS

#define TEMP                        TEMP_NS
#define TEMP_BASE                   TEMP_BASE_NS

#if defined(STM32MP2XX_ASSY2_2_1)
#define PMB                         PMB_NS
#define PMB_BASE                    PMB_BASE_NS
#else /* STM32MP2XX_ASSY2_2_1 */
#define SERC                        SERC_NS
#define SERC_BASE                   SERC_BASE_NS
#endif /* else STM32MP2XX_ASSY2_2_1 */

#define HDP                         HDP_NS
#define HDP_BASE                    HDP_BASE_NS

/*!< AHB4 peripherals defaults to Non secure aliases */
#define RCC                         RCC_NS
#define RCC_BASE                    RCC_BASE_NS

#define PWR                         PWR_NS
#define PWR_BASE                    PWR_BASE_NS

#define EXTI1                       EXTI1_NS
#define EXTI1_BASE                  EXTI1_BASE_NS

#define EXTI1_C1                    EXTI1_C1_NS
#define EXTI1_C1_BASE               EXTI1_C1_BASE_NS

#define EXTI1_C2                    EXTI1_C2_NS
#define EXTI1_C2_BASE               EXTI1_C2_BASE_NS

#define SYSCFG                      SYSCFG_NS
#define SYSCFG_BASE                 SYSCFG_BASE_NS

#define GPIOA                       GPIOA_NS
#define GPIOA_BASE                  GPIOA_BASE_NS

#define GPIOB                       GPIOB_NS
#define GPIOB_BASE                  GPIOB_BASE_NS

#define GPIOC                       GPIOC_NS
#define GPIOC_BASE                  GPIOC_BASE_NS

#define GPIOD                       GPIOD_NS
#define GPIOD_BASE                  GPIOD_BASE_NS

#define GPIOE                       GPIOE_NS
#define GPIOE_BASE                  GPIOE_BASE_NS

#define GPIOF                       GPIOF_NS
#define GPIOF_BASE                  GPIOF_BASE_NS

#define GPIOG                       GPIOG_NS
#define GPIOG_BASE                  GPIOG_BASE_NS

#define GPIOH                       GPIOH_NS
#define GPIOH_BASE                  GPIOH_BASE_NS

#define GPIOI                       GPIOI_NS
#define GPIOI_BASE                  GPIOI_BASE_NS

#define GPIOJ                       GPIOJ_NS
#define GPIOJ_BASE                  GPIOJ_BASE_NS

#define GPIOK                       GPIOK_NS
#define GPIOK_BASE                  GPIOK_BASE_NS

/*!< SMART_RUN_APB peripherals defaults to Non secure aliases */
#define RTC                         RTC_NS
#define RTC_BASE                    RTC_BASE_NS

#define TAMP                        TAMP_NS
#define TAMP_BASE                   TAMP_BASE_NS

#define SPI8                        SPI8_NS
#define SPI8_BASE                   SPI8_BASE_NS

#define LPUART1                     LPUART1_NS
#define LPUART1_BASE                LPUART1_BASE_NS

#define I2C8                        I2C8_NS
#define I2C8_BASE                   I2C8_BASE_NS

#define LPTIM3                      LPTIM3_NS
#define LPTIM3_BASE                 LPTIM3_BASE_NS

#define LPTIM4                      LPTIM4_NS
#define LPTIM4_BASE                 LPTIM4_BASE_NS

#define LPTIM5                      LPTIM5_NS
#define LPTIM5_BASE                 LPTIM5_BASE_NS

#if defined(STM32MP2XX_ASSY2_2_1)
#define CEC                         CEC_NS
#define CEC_BASE                    CEC_BASE_NS
#endif /* STM32MP2XX_ASSY2_2_1 */

#define I3C4                        I3C4_NS
#define I3C4_BASE                   I3C4_BASE_NS

#define IWDG5                       IWDG5_NS
#define IWDG5_BASE                  IWDG5_BASE_NS

#define WWDG2                       WWDG2_NS
#define WWDG2_BASE                  WWDG2_BASE_NS

/*!< SMART_RUN_AHB peripherals defaults to Non secure aliases */
#define GPIOZ                       GPIOZ_NS
#define GPIOZ_BASE                  GPIOZ_BASE_NS

#define LPDMA                       LPDMA_NS
#define LPDMA_BASE                  LPDMA_BASE_NS

#define MDF2                        MDF2_NS
#define MDF2_BASE                   MDF2_BASE_NS

#define EXTI2                       EXTI2_NS
#define EXTI2_BASE                  EXTI2_BASE_NS

#define EXTI2_C1                    EXTI2_C1_NS
#define EXTI2_C1_BASE               EXTI2_C1_BASE_NS

#define EXTI2_C2                    EXTI2_C2_NS
#define EXTI2_C2_BASE               EXTI2_C2_BASE_NS

#define EXTI2_C3                    EXTI2_C3_NS
#define EXTI2_C3_BASE               EXTI2_C3_BASE_NS

#define HSEM                        HSEM_NS
#define HSEM_BASE                   HSEM_BASE_NS

#define IPCC2                       IPCC2_NS
#define IPCC2_BASE                  IPCC2_BASE_NS

#define IPCC2_C1                    IPCC2_C1_NS
#define IPCC2_C1_BASE               IPCC2_C1_BASE_NS

#define IPCC2_C2                    IPCC2_C2_NS
#define IPCC2_C2_BASE               IPCC2_C2_BASE_NS

#define LPDMA_Channel0              LPDMA_Channel0_NS
#define LPDMA_Channel0_BASE         LPDMA_Channel0_BASE_NS

#define LPDMA_Channel1              LPDMA_Channel1_NS
#define LPDMA_Channel1_BASE         LPDMA_Channel1_BASE_NS

#define LPDMA_Channel2              LPDMA_Channel2_NS
#define LPDMA_Channel2_BASE         LPDMA_Channel2_BASE_NS

#define LPDMA_Channel3              LPDMA_Channel3_NS
#define LPDMA_Channel3_BASE         LPDMA_Channel3_BASE_NS

#define DSI                         DSI_NS
#define DSI_BASE                    DSI_BASE_NS

#define LTDC                        LTDC_NS
#define LTDC_BASE                   LTDC_BASE_NS

#define LTDC_Layer1                 LTDC_Layer1_NS
#define LTDC_Layer1_BASE            LTDC_Layer1_BASE_NS

#define LTDC_Layer2                 LTDC_Layer2_NS
#define LTDC_Layer2_BASE            LTDC_Layer2_BASE_NS

#define LTDC_Layer3                 LTDC_Layer3_NS
#define LTDC_Layer3_BASE            LTDC_Layer3_BASE_NS

#define CSI2HOST                    CSI2HOST_NS
#define CSI2HOST_BASE               CSI2HOST_BASE_NS

#define DCMIPP                      DCMIPP_NS
#define DCMIPP_BASE                 DCMIPP_BASE_NS

#define DDRC                        DDRC_NS
#define DDRC_BASE                   DDRC_BASE_NS

#define STGENC                      STGENC_NS
#define STGENC_BASE                 STGENC_BASE_NS

#define STGENR                      STGENR_NS
#define STGENR_BASE                 STGENR_BASE_NS

/*!< FMC Banks registers defaults to Non secure aliases */
#define FMC_Bank1                   FMC_Bank1_R_NS
#define FMC_Bank1_BASE              FMC_Bank1_R_BASE_NS

#define FMC_Bank1E                  FMC_Bank1E_R_NS
#define FMC_Bank1E_BASE             FMC_Bank1E_R_BASE_NS

#define FMC_Bank2                   FMC_Bank2_R_NS
#define FMC_Bank2_BASE              FMC_Bank2_R_BASE_NS

#define FMC_Bank3                   FMC_Bank3_R_NS
#define FMC_Bank3_BASE              FMC_Bank3_R_BASE_NS

#define FMC_Bank5_6                 FMC_Bank5_6_R_NS
#define FMC_Bank5_6_BASE            FMC_Bank5_6_R_BASE_NS

#define SDMMC1                      SDMMC1_NS
#define SDMMC1_BASE                 SDMMC1_BASE_NS

#define SDMMC2                      SDMMC2_NS
#define SDMMC2_BASE                 SDMMC2_BASE_NS

#define SDMMC3                      SDMMC3_NS
#define SDMMC3_BASE                 SDMMC3_BASE_NS

#define GPU                         GPU_NS
#define GPU_BASE                    GPU_BASE_NS

#define ETH1                        ETH1_BAS_NS
#define ETH1_BASE                   ETH1_BASE_NS

#define ETH2                        ETH2_NS
#define ETH2_BASE                   ETH2_BASE_NS

#define USB3                        USB3_NS
#define USB3DRD_BASE                USB3DRD_BASE_NS

#define DDRPHYC                     DDRPHYC_NS
#define DDRPHYC_BASE                DDRPHYC_BASE_NS

#define DBGMCU                      DBGMCU_NS
#define DBGMCU_BASE                 DBGMCU_BASE_NS

#if ! defined(STM32MP2XX_ASSY2_2_1)
/*!< AHB6 peripherals defaults to Non secure aliases */
#define ETHSW_MSG                  ETHSW_MSG_NS
#define ETHSW_MSG_BASE             ETHSW_MSG_BASE_NS

#define ETHSW_CFG                  ETHSW_CFG_NS
#define ETHSW_CFG_BASE             ETHSW_CFG_BASE_NS
#endif /* ! STM32MP2XX_ASSY2_2_1 */

#endif /* CORTEX_IN_SECURE_STATE */
/**
  * @}
  */

/** @addtogroup Exported_constants
  * @{
  */

  /** @addtogroup Peripheral_Registers_Bits_Definition
  * @{
  */

/******************************************************************************/
/*                         Peripheral Registers_Bits_Definition               */
/******************************************************************************/

/******************************************************************************/
/*                                                                            */
/*                              BSEC unit (BSEC)                              */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for BSEC_FVRx register  *******************/
#define BSEC_FVRx_FV_Pos              (0U)
#define BSEC_FVRx_FV_Msk              (0xFFFFFFFFU << BSEC_FVRx_FV_Pos)       /*!< 0xFFFFFFFF */
#define BSEC_FVRx_FV                  BSEC_FVRx_FV_Msk                        /*!< fuse value */

/*****************  Bit definition for BSEC_SPLOCK0 register  *****************/
#define BSEC_SPLOCK0_SPLOCK0_Pos      (0U)
#define BSEC_SPLOCK0_SPLOCK0_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK0_Pos)      /*!< 0x00000001 */
#define BSEC_SPLOCK0_SPLOCK0          BSEC_SPLOCK0_SPLOCK0_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK1_Pos      (1U)
#define BSEC_SPLOCK0_SPLOCK1_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK1_Pos)      /*!< 0x00000002 */
#define BSEC_SPLOCK0_SPLOCK1          BSEC_SPLOCK0_SPLOCK1_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK2_Pos      (2U)
#define BSEC_SPLOCK0_SPLOCK2_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK2_Pos)      /*!< 0x00000004 */
#define BSEC_SPLOCK0_SPLOCK2          BSEC_SPLOCK0_SPLOCK2_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK3_Pos      (3U)
#define BSEC_SPLOCK0_SPLOCK3_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK3_Pos)      /*!< 0x00000008 */
#define BSEC_SPLOCK0_SPLOCK3          BSEC_SPLOCK0_SPLOCK3_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK4_Pos      (4U)
#define BSEC_SPLOCK0_SPLOCK4_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK4_Pos)      /*!< 0x00000010 */
#define BSEC_SPLOCK0_SPLOCK4          BSEC_SPLOCK0_SPLOCK4_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK5_Pos      (5U)
#define BSEC_SPLOCK0_SPLOCK5_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK5_Pos)      /*!< 0x00000020 */
#define BSEC_SPLOCK0_SPLOCK5          BSEC_SPLOCK0_SPLOCK5_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK6_Pos      (6U)
#define BSEC_SPLOCK0_SPLOCK6_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK6_Pos)      /*!< 0x00000040 */
#define BSEC_SPLOCK0_SPLOCK6          BSEC_SPLOCK0_SPLOCK6_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK7_Pos      (7U)
#define BSEC_SPLOCK0_SPLOCK7_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK7_Pos)      /*!< 0x00000080 */
#define BSEC_SPLOCK0_SPLOCK7          BSEC_SPLOCK0_SPLOCK7_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK8_Pos      (8U)
#define BSEC_SPLOCK0_SPLOCK8_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK8_Pos)      /*!< 0x00000100 */
#define BSEC_SPLOCK0_SPLOCK8          BSEC_SPLOCK0_SPLOCK8_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK9_Pos      (9U)
#define BSEC_SPLOCK0_SPLOCK9_Msk      (0x1U << BSEC_SPLOCK0_SPLOCK9_Pos)      /*!< 0x00000200 */
#define BSEC_SPLOCK0_SPLOCK9          BSEC_SPLOCK0_SPLOCK9_Msk                /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK10_Pos     (10U)
#define BSEC_SPLOCK0_SPLOCK10_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK10_Pos)     /*!< 0x00000400 */
#define BSEC_SPLOCK0_SPLOCK10         BSEC_SPLOCK0_SPLOCK10_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK11_Pos     (11U)
#define BSEC_SPLOCK0_SPLOCK11_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK11_Pos)     /*!< 0x00000800 */
#define BSEC_SPLOCK0_SPLOCK11         BSEC_SPLOCK0_SPLOCK11_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK12_Pos     (12U)
#define BSEC_SPLOCK0_SPLOCK12_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK12_Pos)     /*!< 0x00001000 */
#define BSEC_SPLOCK0_SPLOCK12         BSEC_SPLOCK0_SPLOCK12_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK13_Pos     (13U)
#define BSEC_SPLOCK0_SPLOCK13_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK13_Pos)     /*!< 0x00002000 */
#define BSEC_SPLOCK0_SPLOCK13         BSEC_SPLOCK0_SPLOCK13_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK14_Pos     (14U)
#define BSEC_SPLOCK0_SPLOCK14_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK14_Pos)     /*!< 0x00004000 */
#define BSEC_SPLOCK0_SPLOCK14         BSEC_SPLOCK0_SPLOCK14_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK15_Pos     (15U)
#define BSEC_SPLOCK0_SPLOCK15_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK15_Pos)     /*!< 0x00008000 */
#define BSEC_SPLOCK0_SPLOCK15         BSEC_SPLOCK0_SPLOCK15_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK16_Pos     (16U)
#define BSEC_SPLOCK0_SPLOCK16_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK16_Pos)     /*!< 0x00010000 */
#define BSEC_SPLOCK0_SPLOCK16         BSEC_SPLOCK0_SPLOCK16_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK17_Pos     (17U)
#define BSEC_SPLOCK0_SPLOCK17_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK17_Pos)     /*!< 0x00020000 */
#define BSEC_SPLOCK0_SPLOCK17         BSEC_SPLOCK0_SPLOCK17_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK18_Pos     (18U)
#define BSEC_SPLOCK0_SPLOCK18_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK18_Pos)     /*!< 0x00040000 */
#define BSEC_SPLOCK0_SPLOCK18         BSEC_SPLOCK0_SPLOCK18_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK19_Pos     (19U)
#define BSEC_SPLOCK0_SPLOCK19_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK19_Pos)     /*!< 0x00080000 */
#define BSEC_SPLOCK0_SPLOCK19         BSEC_SPLOCK0_SPLOCK19_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK20_Pos     (20U)
#define BSEC_SPLOCK0_SPLOCK20_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK20_Pos)     /*!< 0x00100000 */
#define BSEC_SPLOCK0_SPLOCK20         BSEC_SPLOCK0_SPLOCK20_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK21_Pos     (21U)
#define BSEC_SPLOCK0_SPLOCK21_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK21_Pos)     /*!< 0x00200000 */
#define BSEC_SPLOCK0_SPLOCK21         BSEC_SPLOCK0_SPLOCK21_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK22_Pos     (22U)
#define BSEC_SPLOCK0_SPLOCK22_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK22_Pos)     /*!< 0x00400000 */
#define BSEC_SPLOCK0_SPLOCK22         BSEC_SPLOCK0_SPLOCK22_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK23_Pos     (23U)
#define BSEC_SPLOCK0_SPLOCK23_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK23_Pos)     /*!< 0x00800000 */
#define BSEC_SPLOCK0_SPLOCK23         BSEC_SPLOCK0_SPLOCK23_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK24_Pos     (24U)
#define BSEC_SPLOCK0_SPLOCK24_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK24_Pos)     /*!< 0x01000000 */
#define BSEC_SPLOCK0_SPLOCK24         BSEC_SPLOCK0_SPLOCK24_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK25_Pos     (25U)
#define BSEC_SPLOCK0_SPLOCK25_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK25_Pos)     /*!< 0x02000000 */
#define BSEC_SPLOCK0_SPLOCK25         BSEC_SPLOCK0_SPLOCK25_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK26_Pos     (26U)
#define BSEC_SPLOCK0_SPLOCK26_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK26_Pos)     /*!< 0x04000000 */
#define BSEC_SPLOCK0_SPLOCK26         BSEC_SPLOCK0_SPLOCK26_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK27_Pos     (27U)
#define BSEC_SPLOCK0_SPLOCK27_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK27_Pos)     /*!< 0x08000000 */
#define BSEC_SPLOCK0_SPLOCK27         BSEC_SPLOCK0_SPLOCK27_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK28_Pos     (28U)
#define BSEC_SPLOCK0_SPLOCK28_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK28_Pos)     /*!< 0x10000000 */
#define BSEC_SPLOCK0_SPLOCK28         BSEC_SPLOCK0_SPLOCK28_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK29_Pos     (29U)
#define BSEC_SPLOCK0_SPLOCK29_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK29_Pos)     /*!< 0x20000000 */
#define BSEC_SPLOCK0_SPLOCK29         BSEC_SPLOCK0_SPLOCK29_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK30_Pos     (30U)
#define BSEC_SPLOCK0_SPLOCK30_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK30_Pos)     /*!< 0x40000000 */
#define BSEC_SPLOCK0_SPLOCK30         BSEC_SPLOCK0_SPLOCK30_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK0_SPLOCK31_Pos     (31U)
#define BSEC_SPLOCK0_SPLOCK31_Msk     (0x1U << BSEC_SPLOCK0_SPLOCK31_Pos)     /*!< 0x80000000 */
#define BSEC_SPLOCK0_SPLOCK31         BSEC_SPLOCK0_SPLOCK31_Msk               /*!< sticky programming lock for word y (y=0 to 31)Each bit y prevents permanent programming for the OTP word y until next power-on reset.- 0: Fuse word y can be burnt in OTP memory array- 1: Attempt to program fuse word y in OTP memory array is silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK1 register  *****************/
#define BSEC_SPLOCK1_SPLOCK32_Pos     (0U)
#define BSEC_SPLOCK1_SPLOCK32_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK32_Pos)     /*!< 0x00000001 */
#define BSEC_SPLOCK1_SPLOCK32         BSEC_SPLOCK1_SPLOCK32_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK33_Pos     (1U)
#define BSEC_SPLOCK1_SPLOCK33_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK33_Pos)     /*!< 0x00000002 */
#define BSEC_SPLOCK1_SPLOCK33         BSEC_SPLOCK1_SPLOCK33_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK34_Pos     (2U)
#define BSEC_SPLOCK1_SPLOCK34_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK34_Pos)     /*!< 0x00000004 */
#define BSEC_SPLOCK1_SPLOCK34         BSEC_SPLOCK1_SPLOCK34_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK35_Pos     (3U)
#define BSEC_SPLOCK1_SPLOCK35_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK35_Pos)     /*!< 0x00000008 */
#define BSEC_SPLOCK1_SPLOCK35         BSEC_SPLOCK1_SPLOCK35_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK36_Pos     (4U)
#define BSEC_SPLOCK1_SPLOCK36_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK36_Pos)     /*!< 0x00000010 */
#define BSEC_SPLOCK1_SPLOCK36         BSEC_SPLOCK1_SPLOCK36_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK37_Pos     (5U)
#define BSEC_SPLOCK1_SPLOCK37_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK37_Pos)     /*!< 0x00000020 */
#define BSEC_SPLOCK1_SPLOCK37         BSEC_SPLOCK1_SPLOCK37_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK38_Pos     (6U)
#define BSEC_SPLOCK1_SPLOCK38_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK38_Pos)     /*!< 0x00000040 */
#define BSEC_SPLOCK1_SPLOCK38         BSEC_SPLOCK1_SPLOCK38_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK39_Pos     (7U)
#define BSEC_SPLOCK1_SPLOCK39_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK39_Pos)     /*!< 0x00000080 */
#define BSEC_SPLOCK1_SPLOCK39         BSEC_SPLOCK1_SPLOCK39_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK40_Pos     (8U)
#define BSEC_SPLOCK1_SPLOCK40_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK40_Pos)     /*!< 0x00000100 */
#define BSEC_SPLOCK1_SPLOCK40         BSEC_SPLOCK1_SPLOCK40_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK41_Pos     (9U)
#define BSEC_SPLOCK1_SPLOCK41_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK41_Pos)     /*!< 0x00000200 */
#define BSEC_SPLOCK1_SPLOCK41         BSEC_SPLOCK1_SPLOCK41_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK42_Pos     (10U)
#define BSEC_SPLOCK1_SPLOCK42_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK42_Pos)     /*!< 0x00000400 */
#define BSEC_SPLOCK1_SPLOCK42         BSEC_SPLOCK1_SPLOCK42_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK43_Pos     (11U)
#define BSEC_SPLOCK1_SPLOCK43_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK43_Pos)     /*!< 0x00000800 */
#define BSEC_SPLOCK1_SPLOCK43         BSEC_SPLOCK1_SPLOCK43_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK44_Pos     (12U)
#define BSEC_SPLOCK1_SPLOCK44_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK44_Pos)     /*!< 0x00001000 */
#define BSEC_SPLOCK1_SPLOCK44         BSEC_SPLOCK1_SPLOCK44_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK45_Pos     (13U)
#define BSEC_SPLOCK1_SPLOCK45_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK45_Pos)     /*!< 0x00002000 */
#define BSEC_SPLOCK1_SPLOCK45         BSEC_SPLOCK1_SPLOCK45_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK46_Pos     (14U)
#define BSEC_SPLOCK1_SPLOCK46_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK46_Pos)     /*!< 0x00004000 */
#define BSEC_SPLOCK1_SPLOCK46         BSEC_SPLOCK1_SPLOCK46_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK47_Pos     (15U)
#define BSEC_SPLOCK1_SPLOCK47_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK47_Pos)     /*!< 0x00008000 */
#define BSEC_SPLOCK1_SPLOCK47         BSEC_SPLOCK1_SPLOCK47_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK48_Pos     (16U)
#define BSEC_SPLOCK1_SPLOCK48_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK48_Pos)     /*!< 0x00010000 */
#define BSEC_SPLOCK1_SPLOCK48         BSEC_SPLOCK1_SPLOCK48_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK49_Pos     (17U)
#define BSEC_SPLOCK1_SPLOCK49_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK49_Pos)     /*!< 0x00020000 */
#define BSEC_SPLOCK1_SPLOCK49         BSEC_SPLOCK1_SPLOCK49_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK50_Pos     (18U)
#define BSEC_SPLOCK1_SPLOCK50_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK50_Pos)     /*!< 0x00040000 */
#define BSEC_SPLOCK1_SPLOCK50         BSEC_SPLOCK1_SPLOCK50_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK51_Pos     (19U)
#define BSEC_SPLOCK1_SPLOCK51_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK51_Pos)     /*!< 0x00080000 */
#define BSEC_SPLOCK1_SPLOCK51         BSEC_SPLOCK1_SPLOCK51_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK52_Pos     (20U)
#define BSEC_SPLOCK1_SPLOCK52_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK52_Pos)     /*!< 0x00100000 */
#define BSEC_SPLOCK1_SPLOCK52         BSEC_SPLOCK1_SPLOCK52_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK53_Pos     (21U)
#define BSEC_SPLOCK1_SPLOCK53_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK53_Pos)     /*!< 0x00200000 */
#define BSEC_SPLOCK1_SPLOCK53         BSEC_SPLOCK1_SPLOCK53_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK54_Pos     (22U)
#define BSEC_SPLOCK1_SPLOCK54_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK54_Pos)     /*!< 0x00400000 */
#define BSEC_SPLOCK1_SPLOCK54         BSEC_SPLOCK1_SPLOCK54_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK55_Pos     (23U)
#define BSEC_SPLOCK1_SPLOCK55_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK55_Pos)     /*!< 0x00800000 */
#define BSEC_SPLOCK1_SPLOCK55         BSEC_SPLOCK1_SPLOCK55_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK56_Pos     (24U)
#define BSEC_SPLOCK1_SPLOCK56_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK56_Pos)     /*!< 0x01000000 */
#define BSEC_SPLOCK1_SPLOCK56         BSEC_SPLOCK1_SPLOCK56_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK57_Pos     (25U)
#define BSEC_SPLOCK1_SPLOCK57_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK57_Pos)     /*!< 0x02000000 */
#define BSEC_SPLOCK1_SPLOCK57         BSEC_SPLOCK1_SPLOCK57_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK58_Pos     (26U)
#define BSEC_SPLOCK1_SPLOCK58_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK58_Pos)     /*!< 0x04000000 */
#define BSEC_SPLOCK1_SPLOCK58         BSEC_SPLOCK1_SPLOCK58_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK59_Pos     (27U)
#define BSEC_SPLOCK1_SPLOCK59_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK59_Pos)     /*!< 0x08000000 */
#define BSEC_SPLOCK1_SPLOCK59         BSEC_SPLOCK1_SPLOCK59_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK60_Pos     (28U)
#define BSEC_SPLOCK1_SPLOCK60_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK60_Pos)     /*!< 0x10000000 */
#define BSEC_SPLOCK1_SPLOCK60         BSEC_SPLOCK1_SPLOCK60_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK61_Pos     (29U)
#define BSEC_SPLOCK1_SPLOCK61_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK61_Pos)     /*!< 0x20000000 */
#define BSEC_SPLOCK1_SPLOCK61         BSEC_SPLOCK1_SPLOCK61_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK62_Pos     (30U)
#define BSEC_SPLOCK1_SPLOCK62_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK62_Pos)     /*!< 0x40000000 */
#define BSEC_SPLOCK1_SPLOCK62         BSEC_SPLOCK1_SPLOCK62_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK1_SPLOCK63_Pos     (31U)
#define BSEC_SPLOCK1_SPLOCK63_Msk     (0x1U << BSEC_SPLOCK1_SPLOCK63_Pos)     /*!< 0x80000000 */
#define BSEC_SPLOCK1_SPLOCK63         BSEC_SPLOCK1_SPLOCK63_Msk               /*!< sticky programming lock for word y (y=32 to 63)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK2 register  *****************/
#define BSEC_SPLOCK2_SPLOCK64_Pos     (0U)
#define BSEC_SPLOCK2_SPLOCK64_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK64_Pos)     /*!< 0x00000001 */
#define BSEC_SPLOCK2_SPLOCK64         BSEC_SPLOCK2_SPLOCK64_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK65_Pos     (1U)
#define BSEC_SPLOCK2_SPLOCK65_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK65_Pos)     /*!< 0x00000002 */
#define BSEC_SPLOCK2_SPLOCK65         BSEC_SPLOCK2_SPLOCK65_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK66_Pos     (2U)
#define BSEC_SPLOCK2_SPLOCK66_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK66_Pos)     /*!< 0x00000004 */
#define BSEC_SPLOCK2_SPLOCK66         BSEC_SPLOCK2_SPLOCK66_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK67_Pos     (3U)
#define BSEC_SPLOCK2_SPLOCK67_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK67_Pos)     /*!< 0x00000008 */
#define BSEC_SPLOCK2_SPLOCK67         BSEC_SPLOCK2_SPLOCK67_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK68_Pos     (4U)
#define BSEC_SPLOCK2_SPLOCK68_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK68_Pos)     /*!< 0x00000010 */
#define BSEC_SPLOCK2_SPLOCK68         BSEC_SPLOCK2_SPLOCK68_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK69_Pos     (5U)
#define BSEC_SPLOCK2_SPLOCK69_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK69_Pos)     /*!< 0x00000020 */
#define BSEC_SPLOCK2_SPLOCK69         BSEC_SPLOCK2_SPLOCK69_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK70_Pos     (6U)
#define BSEC_SPLOCK2_SPLOCK70_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK70_Pos)     /*!< 0x00000040 */
#define BSEC_SPLOCK2_SPLOCK70         BSEC_SPLOCK2_SPLOCK70_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK71_Pos     (7U)
#define BSEC_SPLOCK2_SPLOCK71_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK71_Pos)     /*!< 0x00000080 */
#define BSEC_SPLOCK2_SPLOCK71         BSEC_SPLOCK2_SPLOCK71_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK72_Pos     (8U)
#define BSEC_SPLOCK2_SPLOCK72_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK72_Pos)     /*!< 0x00000100 */
#define BSEC_SPLOCK2_SPLOCK72         BSEC_SPLOCK2_SPLOCK72_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK73_Pos     (9U)
#define BSEC_SPLOCK2_SPLOCK73_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK73_Pos)     /*!< 0x00000200 */
#define BSEC_SPLOCK2_SPLOCK73         BSEC_SPLOCK2_SPLOCK73_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK74_Pos     (10U)
#define BSEC_SPLOCK2_SPLOCK74_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK74_Pos)     /*!< 0x00000400 */
#define BSEC_SPLOCK2_SPLOCK74         BSEC_SPLOCK2_SPLOCK74_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK75_Pos     (11U)
#define BSEC_SPLOCK2_SPLOCK75_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK75_Pos)     /*!< 0x00000800 */
#define BSEC_SPLOCK2_SPLOCK75         BSEC_SPLOCK2_SPLOCK75_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK76_Pos     (12U)
#define BSEC_SPLOCK2_SPLOCK76_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK76_Pos)     /*!< 0x00001000 */
#define BSEC_SPLOCK2_SPLOCK76         BSEC_SPLOCK2_SPLOCK76_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK77_Pos     (13U)
#define BSEC_SPLOCK2_SPLOCK77_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK77_Pos)     /*!< 0x00002000 */
#define BSEC_SPLOCK2_SPLOCK77         BSEC_SPLOCK2_SPLOCK77_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK78_Pos     (14U)
#define BSEC_SPLOCK2_SPLOCK78_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK78_Pos)     /*!< 0x00004000 */
#define BSEC_SPLOCK2_SPLOCK78         BSEC_SPLOCK2_SPLOCK78_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK79_Pos     (15U)
#define BSEC_SPLOCK2_SPLOCK79_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK79_Pos)     /*!< 0x00008000 */
#define BSEC_SPLOCK2_SPLOCK79         BSEC_SPLOCK2_SPLOCK79_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK80_Pos     (16U)
#define BSEC_SPLOCK2_SPLOCK80_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK80_Pos)     /*!< 0x00010000 */
#define BSEC_SPLOCK2_SPLOCK80         BSEC_SPLOCK2_SPLOCK80_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK81_Pos     (17U)
#define BSEC_SPLOCK2_SPLOCK81_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK81_Pos)     /*!< 0x00020000 */
#define BSEC_SPLOCK2_SPLOCK81         BSEC_SPLOCK2_SPLOCK81_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK82_Pos     (18U)
#define BSEC_SPLOCK2_SPLOCK82_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK82_Pos)     /*!< 0x00040000 */
#define BSEC_SPLOCK2_SPLOCK82         BSEC_SPLOCK2_SPLOCK82_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK83_Pos     (19U)
#define BSEC_SPLOCK2_SPLOCK83_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK83_Pos)     /*!< 0x00080000 */
#define BSEC_SPLOCK2_SPLOCK83         BSEC_SPLOCK2_SPLOCK83_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK84_Pos     (20U)
#define BSEC_SPLOCK2_SPLOCK84_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK84_Pos)     /*!< 0x00100000 */
#define BSEC_SPLOCK2_SPLOCK84         BSEC_SPLOCK2_SPLOCK84_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK85_Pos     (21U)
#define BSEC_SPLOCK2_SPLOCK85_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK85_Pos)     /*!< 0x00200000 */
#define BSEC_SPLOCK2_SPLOCK85         BSEC_SPLOCK2_SPLOCK85_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK86_Pos     (22U)
#define BSEC_SPLOCK2_SPLOCK86_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK86_Pos)     /*!< 0x00400000 */
#define BSEC_SPLOCK2_SPLOCK86         BSEC_SPLOCK2_SPLOCK86_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK87_Pos     (23U)
#define BSEC_SPLOCK2_SPLOCK87_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK87_Pos)     /*!< 0x00800000 */
#define BSEC_SPLOCK2_SPLOCK87         BSEC_SPLOCK2_SPLOCK87_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK88_Pos     (24U)
#define BSEC_SPLOCK2_SPLOCK88_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK88_Pos)     /*!< 0x01000000 */
#define BSEC_SPLOCK2_SPLOCK88         BSEC_SPLOCK2_SPLOCK88_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK89_Pos     (25U)
#define BSEC_SPLOCK2_SPLOCK89_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK89_Pos)     /*!< 0x02000000 */
#define BSEC_SPLOCK2_SPLOCK89         BSEC_SPLOCK2_SPLOCK89_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK90_Pos     (26U)
#define BSEC_SPLOCK2_SPLOCK90_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK90_Pos)     /*!< 0x04000000 */
#define BSEC_SPLOCK2_SPLOCK90         BSEC_SPLOCK2_SPLOCK90_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK91_Pos     (27U)
#define BSEC_SPLOCK2_SPLOCK91_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK91_Pos)     /*!< 0x08000000 */
#define BSEC_SPLOCK2_SPLOCK91         BSEC_SPLOCK2_SPLOCK91_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK92_Pos     (28U)
#define BSEC_SPLOCK2_SPLOCK92_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK92_Pos)     /*!< 0x10000000 */
#define BSEC_SPLOCK2_SPLOCK92         BSEC_SPLOCK2_SPLOCK92_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK93_Pos     (29U)
#define BSEC_SPLOCK2_SPLOCK93_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK93_Pos)     /*!< 0x20000000 */
#define BSEC_SPLOCK2_SPLOCK93         BSEC_SPLOCK2_SPLOCK93_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK94_Pos     (30U)
#define BSEC_SPLOCK2_SPLOCK94_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK94_Pos)     /*!< 0x40000000 */
#define BSEC_SPLOCK2_SPLOCK94         BSEC_SPLOCK2_SPLOCK94_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK2_SPLOCK95_Pos     (31U)
#define BSEC_SPLOCK2_SPLOCK95_Msk     (0x1U << BSEC_SPLOCK2_SPLOCK95_Pos)     /*!< 0x80000000 */
#define BSEC_SPLOCK2_SPLOCK95         BSEC_SPLOCK2_SPLOCK95_Msk               /*!< sticky programming lock for word y (y=64 to 95)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK3 register  *****************/
#define BSEC_SPLOCK3_SPLOCK96_Pos     (0U)
#define BSEC_SPLOCK3_SPLOCK96_Msk     (0x1U << BSEC_SPLOCK3_SPLOCK96_Pos)     /*!< 0x00000001 */
#define BSEC_SPLOCK3_SPLOCK96         BSEC_SPLOCK3_SPLOCK96_Msk               /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK97_Pos     (1U)
#define BSEC_SPLOCK3_SPLOCK97_Msk     (0x1U << BSEC_SPLOCK3_SPLOCK97_Pos)     /*!< 0x00000002 */
#define BSEC_SPLOCK3_SPLOCK97         BSEC_SPLOCK3_SPLOCK97_Msk               /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK98_Pos     (2U)
#define BSEC_SPLOCK3_SPLOCK98_Msk     (0x1U << BSEC_SPLOCK3_SPLOCK98_Pos)     /*!< 0x00000004 */
#define BSEC_SPLOCK3_SPLOCK98         BSEC_SPLOCK3_SPLOCK98_Msk               /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK99_Pos     (3U)
#define BSEC_SPLOCK3_SPLOCK99_Msk     (0x1U << BSEC_SPLOCK3_SPLOCK99_Pos)     /*!< 0x00000008 */
#define BSEC_SPLOCK3_SPLOCK99         BSEC_SPLOCK3_SPLOCK99_Msk               /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK100_Pos    (4U)
#define BSEC_SPLOCK3_SPLOCK100_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK100_Pos)    /*!< 0x00000010 */
#define BSEC_SPLOCK3_SPLOCK100        BSEC_SPLOCK3_SPLOCK100_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK101_Pos    (5U)
#define BSEC_SPLOCK3_SPLOCK101_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK101_Pos)    /*!< 0x00000020 */
#define BSEC_SPLOCK3_SPLOCK101        BSEC_SPLOCK3_SPLOCK101_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK102_Pos    (6U)
#define BSEC_SPLOCK3_SPLOCK102_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK102_Pos)    /*!< 0x00000040 */
#define BSEC_SPLOCK3_SPLOCK102        BSEC_SPLOCK3_SPLOCK102_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK103_Pos    (7U)
#define BSEC_SPLOCK3_SPLOCK103_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK103_Pos)    /*!< 0x00000080 */
#define BSEC_SPLOCK3_SPLOCK103        BSEC_SPLOCK3_SPLOCK103_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK104_Pos    (8U)
#define BSEC_SPLOCK3_SPLOCK104_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK104_Pos)    /*!< 0x00000100 */
#define BSEC_SPLOCK3_SPLOCK104        BSEC_SPLOCK3_SPLOCK104_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK105_Pos    (9U)
#define BSEC_SPLOCK3_SPLOCK105_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK105_Pos)    /*!< 0x00000200 */
#define BSEC_SPLOCK3_SPLOCK105        BSEC_SPLOCK3_SPLOCK105_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK106_Pos    (10U)
#define BSEC_SPLOCK3_SPLOCK106_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK106_Pos)    /*!< 0x00000400 */
#define BSEC_SPLOCK3_SPLOCK106        BSEC_SPLOCK3_SPLOCK106_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK107_Pos    (11U)
#define BSEC_SPLOCK3_SPLOCK107_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK107_Pos)    /*!< 0x00000800 */
#define BSEC_SPLOCK3_SPLOCK107        BSEC_SPLOCK3_SPLOCK107_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK108_Pos    (12U)
#define BSEC_SPLOCK3_SPLOCK108_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK108_Pos)    /*!< 0x00001000 */
#define BSEC_SPLOCK3_SPLOCK108        BSEC_SPLOCK3_SPLOCK108_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK109_Pos    (13U)
#define BSEC_SPLOCK3_SPLOCK109_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK109_Pos)    /*!< 0x00002000 */
#define BSEC_SPLOCK3_SPLOCK109        BSEC_SPLOCK3_SPLOCK109_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK110_Pos    (14U)
#define BSEC_SPLOCK3_SPLOCK110_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK110_Pos)    /*!< 0x00004000 */
#define BSEC_SPLOCK3_SPLOCK110        BSEC_SPLOCK3_SPLOCK110_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK111_Pos    (15U)
#define BSEC_SPLOCK3_SPLOCK111_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK111_Pos)    /*!< 0x00008000 */
#define BSEC_SPLOCK3_SPLOCK111        BSEC_SPLOCK3_SPLOCK111_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK112_Pos    (16U)
#define BSEC_SPLOCK3_SPLOCK112_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK112_Pos)    /*!< 0x00010000 */
#define BSEC_SPLOCK3_SPLOCK112        BSEC_SPLOCK3_SPLOCK112_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK113_Pos    (17U)
#define BSEC_SPLOCK3_SPLOCK113_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK113_Pos)    /*!< 0x00020000 */
#define BSEC_SPLOCK3_SPLOCK113        BSEC_SPLOCK3_SPLOCK113_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK114_Pos    (18U)
#define BSEC_SPLOCK3_SPLOCK114_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK114_Pos)    /*!< 0x00040000 */
#define BSEC_SPLOCK3_SPLOCK114        BSEC_SPLOCK3_SPLOCK114_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK115_Pos    (19U)
#define BSEC_SPLOCK3_SPLOCK115_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK115_Pos)    /*!< 0x00080000 */
#define BSEC_SPLOCK3_SPLOCK115        BSEC_SPLOCK3_SPLOCK115_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK116_Pos    (20U)
#define BSEC_SPLOCK3_SPLOCK116_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK116_Pos)    /*!< 0x00100000 */
#define BSEC_SPLOCK3_SPLOCK116        BSEC_SPLOCK3_SPLOCK116_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK117_Pos    (21U)
#define BSEC_SPLOCK3_SPLOCK117_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK117_Pos)    /*!< 0x00200000 */
#define BSEC_SPLOCK3_SPLOCK117        BSEC_SPLOCK3_SPLOCK117_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK118_Pos    (22U)
#define BSEC_SPLOCK3_SPLOCK118_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK118_Pos)    /*!< 0x00400000 */
#define BSEC_SPLOCK3_SPLOCK118        BSEC_SPLOCK3_SPLOCK118_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK119_Pos    (23U)
#define BSEC_SPLOCK3_SPLOCK119_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK119_Pos)    /*!< 0x00800000 */
#define BSEC_SPLOCK3_SPLOCK119        BSEC_SPLOCK3_SPLOCK119_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK120_Pos    (24U)
#define BSEC_SPLOCK3_SPLOCK120_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK120_Pos)    /*!< 0x01000000 */
#define BSEC_SPLOCK3_SPLOCK120        BSEC_SPLOCK3_SPLOCK120_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK121_Pos    (25U)
#define BSEC_SPLOCK3_SPLOCK121_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK121_Pos)    /*!< 0x02000000 */
#define BSEC_SPLOCK3_SPLOCK121        BSEC_SPLOCK3_SPLOCK121_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK122_Pos    (26U)
#define BSEC_SPLOCK3_SPLOCK122_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK122_Pos)    /*!< 0x04000000 */
#define BSEC_SPLOCK3_SPLOCK122        BSEC_SPLOCK3_SPLOCK122_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK123_Pos    (27U)
#define BSEC_SPLOCK3_SPLOCK123_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK123_Pos)    /*!< 0x08000000 */
#define BSEC_SPLOCK3_SPLOCK123        BSEC_SPLOCK3_SPLOCK123_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK124_Pos    (28U)
#define BSEC_SPLOCK3_SPLOCK124_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK124_Pos)    /*!< 0x10000000 */
#define BSEC_SPLOCK3_SPLOCK124        BSEC_SPLOCK3_SPLOCK124_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK125_Pos    (29U)
#define BSEC_SPLOCK3_SPLOCK125_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK125_Pos)    /*!< 0x20000000 */
#define BSEC_SPLOCK3_SPLOCK125        BSEC_SPLOCK3_SPLOCK125_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK126_Pos    (30U)
#define BSEC_SPLOCK3_SPLOCK126_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK126_Pos)    /*!< 0x40000000 */
#define BSEC_SPLOCK3_SPLOCK126        BSEC_SPLOCK3_SPLOCK126_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK3_SPLOCK127_Pos    (31U)
#define BSEC_SPLOCK3_SPLOCK127_Msk    (0x1U << BSEC_SPLOCK3_SPLOCK127_Pos)    /*!< 0x80000000 */
#define BSEC_SPLOCK3_SPLOCK127        BSEC_SPLOCK3_SPLOCK127_Msk              /*!< sticky programming lock for word y (y=96 to 127)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK4 register  *****************/
#define BSEC_SPLOCK4_SPLOCK128_Pos    (0U)
#define BSEC_SPLOCK4_SPLOCK128_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK128_Pos)    /*!< 0x00000001 */
#define BSEC_SPLOCK4_SPLOCK128        BSEC_SPLOCK4_SPLOCK128_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK129_Pos    (1U)
#define BSEC_SPLOCK4_SPLOCK129_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK129_Pos)    /*!< 0x00000002 */
#define BSEC_SPLOCK4_SPLOCK129        BSEC_SPLOCK4_SPLOCK129_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK130_Pos    (2U)
#define BSEC_SPLOCK4_SPLOCK130_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK130_Pos)    /*!< 0x00000004 */
#define BSEC_SPLOCK4_SPLOCK130        BSEC_SPLOCK4_SPLOCK130_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK131_Pos    (3U)
#define BSEC_SPLOCK4_SPLOCK131_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK131_Pos)    /*!< 0x00000008 */
#define BSEC_SPLOCK4_SPLOCK131        BSEC_SPLOCK4_SPLOCK131_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK132_Pos    (4U)
#define BSEC_SPLOCK4_SPLOCK132_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK132_Pos)    /*!< 0x00000010 */
#define BSEC_SPLOCK4_SPLOCK132        BSEC_SPLOCK4_SPLOCK132_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK133_Pos    (5U)
#define BSEC_SPLOCK4_SPLOCK133_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK133_Pos)    /*!< 0x00000020 */
#define BSEC_SPLOCK4_SPLOCK133        BSEC_SPLOCK4_SPLOCK133_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK134_Pos    (6U)
#define BSEC_SPLOCK4_SPLOCK134_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK134_Pos)    /*!< 0x00000040 */
#define BSEC_SPLOCK4_SPLOCK134        BSEC_SPLOCK4_SPLOCK134_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK135_Pos    (7U)
#define BSEC_SPLOCK4_SPLOCK135_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK135_Pos)    /*!< 0x00000080 */
#define BSEC_SPLOCK4_SPLOCK135        BSEC_SPLOCK4_SPLOCK135_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK136_Pos    (8U)
#define BSEC_SPLOCK4_SPLOCK136_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK136_Pos)    /*!< 0x00000100 */
#define BSEC_SPLOCK4_SPLOCK136        BSEC_SPLOCK4_SPLOCK136_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK137_Pos    (9U)
#define BSEC_SPLOCK4_SPLOCK137_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK137_Pos)    /*!< 0x00000200 */
#define BSEC_SPLOCK4_SPLOCK137        BSEC_SPLOCK4_SPLOCK137_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK138_Pos    (10U)
#define BSEC_SPLOCK4_SPLOCK138_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK138_Pos)    /*!< 0x00000400 */
#define BSEC_SPLOCK4_SPLOCK138        BSEC_SPLOCK4_SPLOCK138_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK139_Pos    (11U)
#define BSEC_SPLOCK4_SPLOCK139_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK139_Pos)    /*!< 0x00000800 */
#define BSEC_SPLOCK4_SPLOCK139        BSEC_SPLOCK4_SPLOCK139_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK140_Pos    (12U)
#define BSEC_SPLOCK4_SPLOCK140_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK140_Pos)    /*!< 0x00001000 */
#define BSEC_SPLOCK4_SPLOCK140        BSEC_SPLOCK4_SPLOCK140_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK141_Pos    (13U)
#define BSEC_SPLOCK4_SPLOCK141_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK141_Pos)    /*!< 0x00002000 */
#define BSEC_SPLOCK4_SPLOCK141        BSEC_SPLOCK4_SPLOCK141_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK142_Pos    (14U)
#define BSEC_SPLOCK4_SPLOCK142_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK142_Pos)    /*!< 0x00004000 */
#define BSEC_SPLOCK4_SPLOCK142        BSEC_SPLOCK4_SPLOCK142_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK143_Pos    (15U)
#define BSEC_SPLOCK4_SPLOCK143_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK143_Pos)    /*!< 0x00008000 */
#define BSEC_SPLOCK4_SPLOCK143        BSEC_SPLOCK4_SPLOCK143_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK144_Pos    (16U)
#define BSEC_SPLOCK4_SPLOCK144_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK144_Pos)    /*!< 0x00010000 */
#define BSEC_SPLOCK4_SPLOCK144        BSEC_SPLOCK4_SPLOCK144_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK145_Pos    (17U)
#define BSEC_SPLOCK4_SPLOCK145_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK145_Pos)    /*!< 0x00020000 */
#define BSEC_SPLOCK4_SPLOCK145        BSEC_SPLOCK4_SPLOCK145_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK146_Pos    (18U)
#define BSEC_SPLOCK4_SPLOCK146_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK146_Pos)    /*!< 0x00040000 */
#define BSEC_SPLOCK4_SPLOCK146        BSEC_SPLOCK4_SPLOCK146_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK147_Pos    (19U)
#define BSEC_SPLOCK4_SPLOCK147_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK147_Pos)    /*!< 0x00080000 */
#define BSEC_SPLOCK4_SPLOCK147        BSEC_SPLOCK4_SPLOCK147_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK148_Pos    (20U)
#define BSEC_SPLOCK4_SPLOCK148_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK148_Pos)    /*!< 0x00100000 */
#define BSEC_SPLOCK4_SPLOCK148        BSEC_SPLOCK4_SPLOCK148_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK149_Pos    (21U)
#define BSEC_SPLOCK4_SPLOCK149_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK149_Pos)    /*!< 0x00200000 */
#define BSEC_SPLOCK4_SPLOCK149        BSEC_SPLOCK4_SPLOCK149_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK150_Pos    (22U)
#define BSEC_SPLOCK4_SPLOCK150_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK150_Pos)    /*!< 0x00400000 */
#define BSEC_SPLOCK4_SPLOCK150        BSEC_SPLOCK4_SPLOCK150_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK151_Pos    (23U)
#define BSEC_SPLOCK4_SPLOCK151_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK151_Pos)    /*!< 0x00800000 */
#define BSEC_SPLOCK4_SPLOCK151        BSEC_SPLOCK4_SPLOCK151_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK152_Pos    (24U)
#define BSEC_SPLOCK4_SPLOCK152_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK152_Pos)    /*!< 0x01000000 */
#define BSEC_SPLOCK4_SPLOCK152        BSEC_SPLOCK4_SPLOCK152_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK153_Pos    (25U)
#define BSEC_SPLOCK4_SPLOCK153_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK153_Pos)    /*!< 0x02000000 */
#define BSEC_SPLOCK4_SPLOCK153        BSEC_SPLOCK4_SPLOCK153_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK154_Pos    (26U)
#define BSEC_SPLOCK4_SPLOCK154_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK154_Pos)    /*!< 0x04000000 */
#define BSEC_SPLOCK4_SPLOCK154        BSEC_SPLOCK4_SPLOCK154_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK155_Pos    (27U)
#define BSEC_SPLOCK4_SPLOCK155_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK155_Pos)    /*!< 0x08000000 */
#define BSEC_SPLOCK4_SPLOCK155        BSEC_SPLOCK4_SPLOCK155_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK156_Pos    (28U)
#define BSEC_SPLOCK4_SPLOCK156_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK156_Pos)    /*!< 0x10000000 */
#define BSEC_SPLOCK4_SPLOCK156        BSEC_SPLOCK4_SPLOCK156_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK157_Pos    (29U)
#define BSEC_SPLOCK4_SPLOCK157_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK157_Pos)    /*!< 0x20000000 */
#define BSEC_SPLOCK4_SPLOCK157        BSEC_SPLOCK4_SPLOCK157_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK158_Pos    (30U)
#define BSEC_SPLOCK4_SPLOCK158_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK158_Pos)    /*!< 0x40000000 */
#define BSEC_SPLOCK4_SPLOCK158        BSEC_SPLOCK4_SPLOCK158_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK4_SPLOCK159_Pos    (31U)
#define BSEC_SPLOCK4_SPLOCK159_Msk    (0x1U << BSEC_SPLOCK4_SPLOCK159_Pos)    /*!< 0x80000000 */
#define BSEC_SPLOCK4_SPLOCK159        BSEC_SPLOCK4_SPLOCK159_Msk              /*!< sticky programming lock for word y (y=128 to 159)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK5 register  *****************/
#define BSEC_SPLOCK5_SPLOCK160_Pos    (0U)
#define BSEC_SPLOCK5_SPLOCK160_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK160_Pos)    /*!< 0x00000001 */
#define BSEC_SPLOCK5_SPLOCK160        BSEC_SPLOCK5_SPLOCK160_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK161_Pos    (1U)
#define BSEC_SPLOCK5_SPLOCK161_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK161_Pos)    /*!< 0x00000002 */
#define BSEC_SPLOCK5_SPLOCK161        BSEC_SPLOCK5_SPLOCK161_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK162_Pos    (2U)
#define BSEC_SPLOCK5_SPLOCK162_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK162_Pos)    /*!< 0x00000004 */
#define BSEC_SPLOCK5_SPLOCK162        BSEC_SPLOCK5_SPLOCK162_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK163_Pos    (3U)
#define BSEC_SPLOCK5_SPLOCK163_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK163_Pos)    /*!< 0x00000008 */
#define BSEC_SPLOCK5_SPLOCK163        BSEC_SPLOCK5_SPLOCK163_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK164_Pos    (4U)
#define BSEC_SPLOCK5_SPLOCK164_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK164_Pos)    /*!< 0x00000010 */
#define BSEC_SPLOCK5_SPLOCK164        BSEC_SPLOCK5_SPLOCK164_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK165_Pos    (5U)
#define BSEC_SPLOCK5_SPLOCK165_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK165_Pos)    /*!< 0x00000020 */
#define BSEC_SPLOCK5_SPLOCK165        BSEC_SPLOCK5_SPLOCK165_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK166_Pos    (6U)
#define BSEC_SPLOCK5_SPLOCK166_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK166_Pos)    /*!< 0x00000040 */
#define BSEC_SPLOCK5_SPLOCK166        BSEC_SPLOCK5_SPLOCK166_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK167_Pos    (7U)
#define BSEC_SPLOCK5_SPLOCK167_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK167_Pos)    /*!< 0x00000080 */
#define BSEC_SPLOCK5_SPLOCK167        BSEC_SPLOCK5_SPLOCK167_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK168_Pos    (8U)
#define BSEC_SPLOCK5_SPLOCK168_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK168_Pos)    /*!< 0x00000100 */
#define BSEC_SPLOCK5_SPLOCK168        BSEC_SPLOCK5_SPLOCK168_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK169_Pos    (9U)
#define BSEC_SPLOCK5_SPLOCK169_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK169_Pos)    /*!< 0x00000200 */
#define BSEC_SPLOCK5_SPLOCK169        BSEC_SPLOCK5_SPLOCK169_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK170_Pos    (10U)
#define BSEC_SPLOCK5_SPLOCK170_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK170_Pos)    /*!< 0x00000400 */
#define BSEC_SPLOCK5_SPLOCK170        BSEC_SPLOCK5_SPLOCK170_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK171_Pos    (11U)
#define BSEC_SPLOCK5_SPLOCK171_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK171_Pos)    /*!< 0x00000800 */
#define BSEC_SPLOCK5_SPLOCK171        BSEC_SPLOCK5_SPLOCK171_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK172_Pos    (12U)
#define BSEC_SPLOCK5_SPLOCK172_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK172_Pos)    /*!< 0x00001000 */
#define BSEC_SPLOCK5_SPLOCK172        BSEC_SPLOCK5_SPLOCK172_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK173_Pos    (13U)
#define BSEC_SPLOCK5_SPLOCK173_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK173_Pos)    /*!< 0x00002000 */
#define BSEC_SPLOCK5_SPLOCK173        BSEC_SPLOCK5_SPLOCK173_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK174_Pos    (14U)
#define BSEC_SPLOCK5_SPLOCK174_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK174_Pos)    /*!< 0x00004000 */
#define BSEC_SPLOCK5_SPLOCK174        BSEC_SPLOCK5_SPLOCK174_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK175_Pos    (15U)
#define BSEC_SPLOCK5_SPLOCK175_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK175_Pos)    /*!< 0x00008000 */
#define BSEC_SPLOCK5_SPLOCK175        BSEC_SPLOCK5_SPLOCK175_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK176_Pos    (16U)
#define BSEC_SPLOCK5_SPLOCK176_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK176_Pos)    /*!< 0x00010000 */
#define BSEC_SPLOCK5_SPLOCK176        BSEC_SPLOCK5_SPLOCK176_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK177_Pos    (17U)
#define BSEC_SPLOCK5_SPLOCK177_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK177_Pos)    /*!< 0x00020000 */
#define BSEC_SPLOCK5_SPLOCK177        BSEC_SPLOCK5_SPLOCK177_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK178_Pos    (18U)
#define BSEC_SPLOCK5_SPLOCK178_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK178_Pos)    /*!< 0x00040000 */
#define BSEC_SPLOCK5_SPLOCK178        BSEC_SPLOCK5_SPLOCK178_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK179_Pos    (19U)
#define BSEC_SPLOCK5_SPLOCK179_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK179_Pos)    /*!< 0x00080000 */
#define BSEC_SPLOCK5_SPLOCK179        BSEC_SPLOCK5_SPLOCK179_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK180_Pos    (20U)
#define BSEC_SPLOCK5_SPLOCK180_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK180_Pos)    /*!< 0x00100000 */
#define BSEC_SPLOCK5_SPLOCK180        BSEC_SPLOCK5_SPLOCK180_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK181_Pos    (21U)
#define BSEC_SPLOCK5_SPLOCK181_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK181_Pos)    /*!< 0x00200000 */
#define BSEC_SPLOCK5_SPLOCK181        BSEC_SPLOCK5_SPLOCK181_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK182_Pos    (22U)
#define BSEC_SPLOCK5_SPLOCK182_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK182_Pos)    /*!< 0x00400000 */
#define BSEC_SPLOCK5_SPLOCK182        BSEC_SPLOCK5_SPLOCK182_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK183_Pos    (23U)
#define BSEC_SPLOCK5_SPLOCK183_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK183_Pos)    /*!< 0x00800000 */
#define BSEC_SPLOCK5_SPLOCK183        BSEC_SPLOCK5_SPLOCK183_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK184_Pos    (24U)
#define BSEC_SPLOCK5_SPLOCK184_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK184_Pos)    /*!< 0x01000000 */
#define BSEC_SPLOCK5_SPLOCK184        BSEC_SPLOCK5_SPLOCK184_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK185_Pos    (25U)
#define BSEC_SPLOCK5_SPLOCK185_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK185_Pos)    /*!< 0x02000000 */
#define BSEC_SPLOCK5_SPLOCK185        BSEC_SPLOCK5_SPLOCK185_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK186_Pos    (26U)
#define BSEC_SPLOCK5_SPLOCK186_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK186_Pos)    /*!< 0x04000000 */
#define BSEC_SPLOCK5_SPLOCK186        BSEC_SPLOCK5_SPLOCK186_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK187_Pos    (27U)
#define BSEC_SPLOCK5_SPLOCK187_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK187_Pos)    /*!< 0x08000000 */
#define BSEC_SPLOCK5_SPLOCK187        BSEC_SPLOCK5_SPLOCK187_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK188_Pos    (28U)
#define BSEC_SPLOCK5_SPLOCK188_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK188_Pos)    /*!< 0x10000000 */
#define BSEC_SPLOCK5_SPLOCK188        BSEC_SPLOCK5_SPLOCK188_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK189_Pos    (29U)
#define BSEC_SPLOCK5_SPLOCK189_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK189_Pos)    /*!< 0x20000000 */
#define BSEC_SPLOCK5_SPLOCK189        BSEC_SPLOCK5_SPLOCK189_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK190_Pos    (30U)
#define BSEC_SPLOCK5_SPLOCK190_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK190_Pos)    /*!< 0x40000000 */
#define BSEC_SPLOCK5_SPLOCK190        BSEC_SPLOCK5_SPLOCK190_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK5_SPLOCK191_Pos    (31U)
#define BSEC_SPLOCK5_SPLOCK191_Msk    (0x1U << BSEC_SPLOCK5_SPLOCK191_Pos)    /*!< 0x80000000 */
#define BSEC_SPLOCK5_SPLOCK191        BSEC_SPLOCK5_SPLOCK191_Msk              /*!< sticky programming lock for word y (y=160 to 191)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK6 register  *****************/
#define BSEC_SPLOCK6_SPLOCK192_Pos    (0U)
#define BSEC_SPLOCK6_SPLOCK192_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK192_Pos)    /*!< 0x00000001 */
#define BSEC_SPLOCK6_SPLOCK192        BSEC_SPLOCK6_SPLOCK192_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK193_Pos    (1U)
#define BSEC_SPLOCK6_SPLOCK193_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK193_Pos)    /*!< 0x00000002 */
#define BSEC_SPLOCK6_SPLOCK193        BSEC_SPLOCK6_SPLOCK193_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK194_Pos    (2U)
#define BSEC_SPLOCK6_SPLOCK194_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK194_Pos)    /*!< 0x00000004 */
#define BSEC_SPLOCK6_SPLOCK194        BSEC_SPLOCK6_SPLOCK194_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK195_Pos    (3U)
#define BSEC_SPLOCK6_SPLOCK195_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK195_Pos)    /*!< 0x00000008 */
#define BSEC_SPLOCK6_SPLOCK195        BSEC_SPLOCK6_SPLOCK195_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK196_Pos    (4U)
#define BSEC_SPLOCK6_SPLOCK196_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK196_Pos)    /*!< 0x00000010 */
#define BSEC_SPLOCK6_SPLOCK196        BSEC_SPLOCK6_SPLOCK196_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK197_Pos    (5U)
#define BSEC_SPLOCK6_SPLOCK197_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK197_Pos)    /*!< 0x00000020 */
#define BSEC_SPLOCK6_SPLOCK197        BSEC_SPLOCK6_SPLOCK197_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK198_Pos    (6U)
#define BSEC_SPLOCK6_SPLOCK198_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK198_Pos)    /*!< 0x00000040 */
#define BSEC_SPLOCK6_SPLOCK198        BSEC_SPLOCK6_SPLOCK198_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK199_Pos    (7U)
#define BSEC_SPLOCK6_SPLOCK199_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK199_Pos)    /*!< 0x00000080 */
#define BSEC_SPLOCK6_SPLOCK199        BSEC_SPLOCK6_SPLOCK199_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK200_Pos    (8U)
#define BSEC_SPLOCK6_SPLOCK200_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK200_Pos)    /*!< 0x00000100 */
#define BSEC_SPLOCK6_SPLOCK200        BSEC_SPLOCK6_SPLOCK200_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK201_Pos    (9U)
#define BSEC_SPLOCK6_SPLOCK201_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK201_Pos)    /*!< 0x00000200 */
#define BSEC_SPLOCK6_SPLOCK201        BSEC_SPLOCK6_SPLOCK201_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK202_Pos    (10U)
#define BSEC_SPLOCK6_SPLOCK202_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK202_Pos)    /*!< 0x00000400 */
#define BSEC_SPLOCK6_SPLOCK202        BSEC_SPLOCK6_SPLOCK202_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK203_Pos    (11U)
#define BSEC_SPLOCK6_SPLOCK203_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK203_Pos)    /*!< 0x00000800 */
#define BSEC_SPLOCK6_SPLOCK203        BSEC_SPLOCK6_SPLOCK203_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK204_Pos    (12U)
#define BSEC_SPLOCK6_SPLOCK204_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK204_Pos)    /*!< 0x00001000 */
#define BSEC_SPLOCK6_SPLOCK204        BSEC_SPLOCK6_SPLOCK204_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK205_Pos    (13U)
#define BSEC_SPLOCK6_SPLOCK205_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK205_Pos)    /*!< 0x00002000 */
#define BSEC_SPLOCK6_SPLOCK205        BSEC_SPLOCK6_SPLOCK205_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK206_Pos    (14U)
#define BSEC_SPLOCK6_SPLOCK206_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK206_Pos)    /*!< 0x00004000 */
#define BSEC_SPLOCK6_SPLOCK206        BSEC_SPLOCK6_SPLOCK206_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK207_Pos    (15U)
#define BSEC_SPLOCK6_SPLOCK207_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK207_Pos)    /*!< 0x00008000 */
#define BSEC_SPLOCK6_SPLOCK207        BSEC_SPLOCK6_SPLOCK207_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK208_Pos    (16U)
#define BSEC_SPLOCK6_SPLOCK208_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK208_Pos)    /*!< 0x00010000 */
#define BSEC_SPLOCK6_SPLOCK208        BSEC_SPLOCK6_SPLOCK208_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK209_Pos    (17U)
#define BSEC_SPLOCK6_SPLOCK209_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK209_Pos)    /*!< 0x00020000 */
#define BSEC_SPLOCK6_SPLOCK209        BSEC_SPLOCK6_SPLOCK209_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK210_Pos    (18U)
#define BSEC_SPLOCK6_SPLOCK210_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK210_Pos)    /*!< 0x00040000 */
#define BSEC_SPLOCK6_SPLOCK210        BSEC_SPLOCK6_SPLOCK210_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK211_Pos    (19U)
#define BSEC_SPLOCK6_SPLOCK211_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK211_Pos)    /*!< 0x00080000 */
#define BSEC_SPLOCK6_SPLOCK211        BSEC_SPLOCK6_SPLOCK211_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK212_Pos    (20U)
#define BSEC_SPLOCK6_SPLOCK212_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK212_Pos)    /*!< 0x00100000 */
#define BSEC_SPLOCK6_SPLOCK212        BSEC_SPLOCK6_SPLOCK212_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK213_Pos    (21U)
#define BSEC_SPLOCK6_SPLOCK213_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK213_Pos)    /*!< 0x00200000 */
#define BSEC_SPLOCK6_SPLOCK213        BSEC_SPLOCK6_SPLOCK213_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK214_Pos    (22U)
#define BSEC_SPLOCK6_SPLOCK214_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK214_Pos)    /*!< 0x00400000 */
#define BSEC_SPLOCK6_SPLOCK214        BSEC_SPLOCK6_SPLOCK214_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK215_Pos    (23U)
#define BSEC_SPLOCK6_SPLOCK215_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK215_Pos)    /*!< 0x00800000 */
#define BSEC_SPLOCK6_SPLOCK215        BSEC_SPLOCK6_SPLOCK215_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK216_Pos    (24U)
#define BSEC_SPLOCK6_SPLOCK216_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK216_Pos)    /*!< 0x01000000 */
#define BSEC_SPLOCK6_SPLOCK216        BSEC_SPLOCK6_SPLOCK216_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK217_Pos    (25U)
#define BSEC_SPLOCK6_SPLOCK217_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK217_Pos)    /*!< 0x02000000 */
#define BSEC_SPLOCK6_SPLOCK217        BSEC_SPLOCK6_SPLOCK217_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK218_Pos    (26U)
#define BSEC_SPLOCK6_SPLOCK218_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK218_Pos)    /*!< 0x04000000 */
#define BSEC_SPLOCK6_SPLOCK218        BSEC_SPLOCK6_SPLOCK218_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK219_Pos    (27U)
#define BSEC_SPLOCK6_SPLOCK219_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK219_Pos)    /*!< 0x08000000 */
#define BSEC_SPLOCK6_SPLOCK219        BSEC_SPLOCK6_SPLOCK219_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK220_Pos    (28U)
#define BSEC_SPLOCK6_SPLOCK220_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK220_Pos)    /*!< 0x10000000 */
#define BSEC_SPLOCK6_SPLOCK220        BSEC_SPLOCK6_SPLOCK220_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK221_Pos    (29U)
#define BSEC_SPLOCK6_SPLOCK221_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK221_Pos)    /*!< 0x20000000 */
#define BSEC_SPLOCK6_SPLOCK221        BSEC_SPLOCK6_SPLOCK221_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK222_Pos    (30U)
#define BSEC_SPLOCK6_SPLOCK222_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK222_Pos)    /*!< 0x40000000 */
#define BSEC_SPLOCK6_SPLOCK222        BSEC_SPLOCK6_SPLOCK222_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK6_SPLOCK223_Pos    (31U)
#define BSEC_SPLOCK6_SPLOCK223_Msk    (0x1U << BSEC_SPLOCK6_SPLOCK223_Pos)    /*!< 0x80000000 */
#define BSEC_SPLOCK6_SPLOCK223        BSEC_SPLOCK6_SPLOCK223_Msk              /*!< sticky programming lock for word y (y=192 to 223)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK7 register  *****************/
#define BSEC_SPLOCK7_SPLOCK224_Pos    (0U)
#define BSEC_SPLOCK7_SPLOCK224_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK224_Pos)    /*!< 0x00000001 */
#define BSEC_SPLOCK7_SPLOCK224        BSEC_SPLOCK7_SPLOCK224_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK225_Pos    (1U)
#define BSEC_SPLOCK7_SPLOCK225_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK225_Pos)    /*!< 0x00000002 */
#define BSEC_SPLOCK7_SPLOCK225        BSEC_SPLOCK7_SPLOCK225_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK226_Pos    (2U)
#define BSEC_SPLOCK7_SPLOCK226_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK226_Pos)    /*!< 0x00000004 */
#define BSEC_SPLOCK7_SPLOCK226        BSEC_SPLOCK7_SPLOCK226_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK227_Pos    (3U)
#define BSEC_SPLOCK7_SPLOCK227_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK227_Pos)    /*!< 0x00000008 */
#define BSEC_SPLOCK7_SPLOCK227        BSEC_SPLOCK7_SPLOCK227_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK228_Pos    (4U)
#define BSEC_SPLOCK7_SPLOCK228_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK228_Pos)    /*!< 0x00000010 */
#define BSEC_SPLOCK7_SPLOCK228        BSEC_SPLOCK7_SPLOCK228_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK229_Pos    (5U)
#define BSEC_SPLOCK7_SPLOCK229_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK229_Pos)    /*!< 0x00000020 */
#define BSEC_SPLOCK7_SPLOCK229        BSEC_SPLOCK7_SPLOCK229_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK230_Pos    (6U)
#define BSEC_SPLOCK7_SPLOCK230_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK230_Pos)    /*!< 0x00000040 */
#define BSEC_SPLOCK7_SPLOCK230        BSEC_SPLOCK7_SPLOCK230_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK231_Pos    (7U)
#define BSEC_SPLOCK7_SPLOCK231_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK231_Pos)    /*!< 0x00000080 */
#define BSEC_SPLOCK7_SPLOCK231        BSEC_SPLOCK7_SPLOCK231_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK232_Pos    (8U)
#define BSEC_SPLOCK7_SPLOCK232_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK232_Pos)    /*!< 0x00000100 */
#define BSEC_SPLOCK7_SPLOCK232        BSEC_SPLOCK7_SPLOCK232_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK233_Pos    (9U)
#define BSEC_SPLOCK7_SPLOCK233_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK233_Pos)    /*!< 0x00000200 */
#define BSEC_SPLOCK7_SPLOCK233        BSEC_SPLOCK7_SPLOCK233_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK234_Pos    (10U)
#define BSEC_SPLOCK7_SPLOCK234_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK234_Pos)    /*!< 0x00000400 */
#define BSEC_SPLOCK7_SPLOCK234        BSEC_SPLOCK7_SPLOCK234_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK235_Pos    (11U)
#define BSEC_SPLOCK7_SPLOCK235_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK235_Pos)    /*!< 0x00000800 */
#define BSEC_SPLOCK7_SPLOCK235        BSEC_SPLOCK7_SPLOCK235_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK236_Pos    (12U)
#define BSEC_SPLOCK7_SPLOCK236_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK236_Pos)    /*!< 0x00001000 */
#define BSEC_SPLOCK7_SPLOCK236        BSEC_SPLOCK7_SPLOCK236_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK237_Pos    (13U)
#define BSEC_SPLOCK7_SPLOCK237_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK237_Pos)    /*!< 0x00002000 */
#define BSEC_SPLOCK7_SPLOCK237        BSEC_SPLOCK7_SPLOCK237_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK238_Pos    (14U)
#define BSEC_SPLOCK7_SPLOCK238_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK238_Pos)    /*!< 0x00004000 */
#define BSEC_SPLOCK7_SPLOCK238        BSEC_SPLOCK7_SPLOCK238_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK239_Pos    (15U)
#define BSEC_SPLOCK7_SPLOCK239_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK239_Pos)    /*!< 0x00008000 */
#define BSEC_SPLOCK7_SPLOCK239        BSEC_SPLOCK7_SPLOCK239_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK240_Pos    (16U)
#define BSEC_SPLOCK7_SPLOCK240_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK240_Pos)    /*!< 0x00010000 */
#define BSEC_SPLOCK7_SPLOCK240        BSEC_SPLOCK7_SPLOCK240_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK241_Pos    (17U)
#define BSEC_SPLOCK7_SPLOCK241_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK241_Pos)    /*!< 0x00020000 */
#define BSEC_SPLOCK7_SPLOCK241        BSEC_SPLOCK7_SPLOCK241_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK242_Pos    (18U)
#define BSEC_SPLOCK7_SPLOCK242_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK242_Pos)    /*!< 0x00040000 */
#define BSEC_SPLOCK7_SPLOCK242        BSEC_SPLOCK7_SPLOCK242_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK243_Pos    (19U)
#define BSEC_SPLOCK7_SPLOCK243_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK243_Pos)    /*!< 0x00080000 */
#define BSEC_SPLOCK7_SPLOCK243        BSEC_SPLOCK7_SPLOCK243_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK244_Pos    (20U)
#define BSEC_SPLOCK7_SPLOCK244_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK244_Pos)    /*!< 0x00100000 */
#define BSEC_SPLOCK7_SPLOCK244        BSEC_SPLOCK7_SPLOCK244_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK245_Pos    (21U)
#define BSEC_SPLOCK7_SPLOCK245_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK245_Pos)    /*!< 0x00200000 */
#define BSEC_SPLOCK7_SPLOCK245        BSEC_SPLOCK7_SPLOCK245_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK246_Pos    (22U)
#define BSEC_SPLOCK7_SPLOCK246_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK246_Pos)    /*!< 0x00400000 */
#define BSEC_SPLOCK7_SPLOCK246        BSEC_SPLOCK7_SPLOCK246_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK247_Pos    (23U)
#define BSEC_SPLOCK7_SPLOCK247_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK247_Pos)    /*!< 0x00800000 */
#define BSEC_SPLOCK7_SPLOCK247        BSEC_SPLOCK7_SPLOCK247_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK248_Pos    (24U)
#define BSEC_SPLOCK7_SPLOCK248_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK248_Pos)    /*!< 0x01000000 */
#define BSEC_SPLOCK7_SPLOCK248        BSEC_SPLOCK7_SPLOCK248_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK249_Pos    (25U)
#define BSEC_SPLOCK7_SPLOCK249_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK249_Pos)    /*!< 0x02000000 */
#define BSEC_SPLOCK7_SPLOCK249        BSEC_SPLOCK7_SPLOCK249_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK250_Pos    (26U)
#define BSEC_SPLOCK7_SPLOCK250_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK250_Pos)    /*!< 0x04000000 */
#define BSEC_SPLOCK7_SPLOCK250        BSEC_SPLOCK7_SPLOCK250_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK251_Pos    (27U)
#define BSEC_SPLOCK7_SPLOCK251_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK251_Pos)    /*!< 0x08000000 */
#define BSEC_SPLOCK7_SPLOCK251        BSEC_SPLOCK7_SPLOCK251_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK252_Pos    (28U)
#define BSEC_SPLOCK7_SPLOCK252_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK252_Pos)    /*!< 0x10000000 */
#define BSEC_SPLOCK7_SPLOCK252        BSEC_SPLOCK7_SPLOCK252_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK253_Pos    (29U)
#define BSEC_SPLOCK7_SPLOCK253_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK253_Pos)    /*!< 0x20000000 */
#define BSEC_SPLOCK7_SPLOCK253        BSEC_SPLOCK7_SPLOCK253_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK254_Pos    (30U)
#define BSEC_SPLOCK7_SPLOCK254_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK254_Pos)    /*!< 0x40000000 */
#define BSEC_SPLOCK7_SPLOCK254        BSEC_SPLOCK7_SPLOCK254_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK7_SPLOCK255_Pos    (31U)
#define BSEC_SPLOCK7_SPLOCK255_Msk    (0x1U << BSEC_SPLOCK7_SPLOCK255_Pos)    /*!< 0x80000000 */
#define BSEC_SPLOCK7_SPLOCK255        BSEC_SPLOCK7_SPLOCK255_Msk              /*!< sticky programming lock for word y (y=224 to 255)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK8 register  *****************/
#define BSEC_SPLOCK8_SPLOCK256_Pos    (0U)
#define BSEC_SPLOCK8_SPLOCK256_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK256_Pos)    /*!< 0x00000001 */
#define BSEC_SPLOCK8_SPLOCK256        BSEC_SPLOCK8_SPLOCK256_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK257_Pos    (1U)
#define BSEC_SPLOCK8_SPLOCK257_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK257_Pos)    /*!< 0x00000002 */
#define BSEC_SPLOCK8_SPLOCK257        BSEC_SPLOCK8_SPLOCK257_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK258_Pos    (2U)
#define BSEC_SPLOCK8_SPLOCK258_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK258_Pos)    /*!< 0x00000004 */
#define BSEC_SPLOCK8_SPLOCK258        BSEC_SPLOCK8_SPLOCK258_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK259_Pos    (3U)
#define BSEC_SPLOCK8_SPLOCK259_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK259_Pos)    /*!< 0x00000008 */
#define BSEC_SPLOCK8_SPLOCK259        BSEC_SPLOCK8_SPLOCK259_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK260_Pos    (4U)
#define BSEC_SPLOCK8_SPLOCK260_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK260_Pos)    /*!< 0x00000010 */
#define BSEC_SPLOCK8_SPLOCK260        BSEC_SPLOCK8_SPLOCK260_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK261_Pos    (5U)
#define BSEC_SPLOCK8_SPLOCK261_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK261_Pos)    /*!< 0x00000020 */
#define BSEC_SPLOCK8_SPLOCK261        BSEC_SPLOCK8_SPLOCK261_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK262_Pos    (6U)
#define BSEC_SPLOCK8_SPLOCK262_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK262_Pos)    /*!< 0x00000040 */
#define BSEC_SPLOCK8_SPLOCK262        BSEC_SPLOCK8_SPLOCK262_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK263_Pos    (7U)
#define BSEC_SPLOCK8_SPLOCK263_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK263_Pos)    /*!< 0x00000080 */
#define BSEC_SPLOCK8_SPLOCK263        BSEC_SPLOCK8_SPLOCK263_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK264_Pos    (8U)
#define BSEC_SPLOCK8_SPLOCK264_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK264_Pos)    /*!< 0x00000100 */
#define BSEC_SPLOCK8_SPLOCK264        BSEC_SPLOCK8_SPLOCK264_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK265_Pos    (9U)
#define BSEC_SPLOCK8_SPLOCK265_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK265_Pos)    /*!< 0x00000200 */
#define BSEC_SPLOCK8_SPLOCK265        BSEC_SPLOCK8_SPLOCK265_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK266_Pos    (10U)
#define BSEC_SPLOCK8_SPLOCK266_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK266_Pos)    /*!< 0x00000400 */
#define BSEC_SPLOCK8_SPLOCK266        BSEC_SPLOCK8_SPLOCK266_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK267_Pos    (11U)
#define BSEC_SPLOCK8_SPLOCK267_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK267_Pos)    /*!< 0x00000800 */
#define BSEC_SPLOCK8_SPLOCK267        BSEC_SPLOCK8_SPLOCK267_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK268_Pos    (12U)
#define BSEC_SPLOCK8_SPLOCK268_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK268_Pos)    /*!< 0x00001000 */
#define BSEC_SPLOCK8_SPLOCK268        BSEC_SPLOCK8_SPLOCK268_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK269_Pos    (13U)
#define BSEC_SPLOCK8_SPLOCK269_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK269_Pos)    /*!< 0x00002000 */
#define BSEC_SPLOCK8_SPLOCK269        BSEC_SPLOCK8_SPLOCK269_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK270_Pos    (14U)
#define BSEC_SPLOCK8_SPLOCK270_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK270_Pos)    /*!< 0x00004000 */
#define BSEC_SPLOCK8_SPLOCK270        BSEC_SPLOCK8_SPLOCK270_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK271_Pos    (15U)
#define BSEC_SPLOCK8_SPLOCK271_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK271_Pos)    /*!< 0x00008000 */
#define BSEC_SPLOCK8_SPLOCK271        BSEC_SPLOCK8_SPLOCK271_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK272_Pos    (16U)
#define BSEC_SPLOCK8_SPLOCK272_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK272_Pos)    /*!< 0x00010000 */
#define BSEC_SPLOCK8_SPLOCK272        BSEC_SPLOCK8_SPLOCK272_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK273_Pos    (17U)
#define BSEC_SPLOCK8_SPLOCK273_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK273_Pos)    /*!< 0x00020000 */
#define BSEC_SPLOCK8_SPLOCK273        BSEC_SPLOCK8_SPLOCK273_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK274_Pos    (18U)
#define BSEC_SPLOCK8_SPLOCK274_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK274_Pos)    /*!< 0x00040000 */
#define BSEC_SPLOCK8_SPLOCK274        BSEC_SPLOCK8_SPLOCK274_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK275_Pos    (19U)
#define BSEC_SPLOCK8_SPLOCK275_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK275_Pos)    /*!< 0x00080000 */
#define BSEC_SPLOCK8_SPLOCK275        BSEC_SPLOCK8_SPLOCK275_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK276_Pos    (20U)
#define BSEC_SPLOCK8_SPLOCK276_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK276_Pos)    /*!< 0x00100000 */
#define BSEC_SPLOCK8_SPLOCK276        BSEC_SPLOCK8_SPLOCK276_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK277_Pos    (21U)
#define BSEC_SPLOCK8_SPLOCK277_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK277_Pos)    /*!< 0x00200000 */
#define BSEC_SPLOCK8_SPLOCK277        BSEC_SPLOCK8_SPLOCK277_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK278_Pos    (22U)
#define BSEC_SPLOCK8_SPLOCK278_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK278_Pos)    /*!< 0x00400000 */
#define BSEC_SPLOCK8_SPLOCK278        BSEC_SPLOCK8_SPLOCK278_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK279_Pos    (23U)
#define BSEC_SPLOCK8_SPLOCK279_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK279_Pos)    /*!< 0x00800000 */
#define BSEC_SPLOCK8_SPLOCK279        BSEC_SPLOCK8_SPLOCK279_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK280_Pos    (24U)
#define BSEC_SPLOCK8_SPLOCK280_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK280_Pos)    /*!< 0x01000000 */
#define BSEC_SPLOCK8_SPLOCK280        BSEC_SPLOCK8_SPLOCK280_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK281_Pos    (25U)
#define BSEC_SPLOCK8_SPLOCK281_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK281_Pos)    /*!< 0x02000000 */
#define BSEC_SPLOCK8_SPLOCK281        BSEC_SPLOCK8_SPLOCK281_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK282_Pos    (26U)
#define BSEC_SPLOCK8_SPLOCK282_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK282_Pos)    /*!< 0x04000000 */
#define BSEC_SPLOCK8_SPLOCK282        BSEC_SPLOCK8_SPLOCK282_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK283_Pos    (27U)
#define BSEC_SPLOCK8_SPLOCK283_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK283_Pos)    /*!< 0x08000000 */
#define BSEC_SPLOCK8_SPLOCK283        BSEC_SPLOCK8_SPLOCK283_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK284_Pos    (28U)
#define BSEC_SPLOCK8_SPLOCK284_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK284_Pos)    /*!< 0x10000000 */
#define BSEC_SPLOCK8_SPLOCK284        BSEC_SPLOCK8_SPLOCK284_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK285_Pos    (29U)
#define BSEC_SPLOCK8_SPLOCK285_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK285_Pos)    /*!< 0x20000000 */
#define BSEC_SPLOCK8_SPLOCK285        BSEC_SPLOCK8_SPLOCK285_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK286_Pos    (30U)
#define BSEC_SPLOCK8_SPLOCK286_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK286_Pos)    /*!< 0x40000000 */
#define BSEC_SPLOCK8_SPLOCK286        BSEC_SPLOCK8_SPLOCK286_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK8_SPLOCK287_Pos    (31U)
#define BSEC_SPLOCK8_SPLOCK287_Msk    (0x1U << BSEC_SPLOCK8_SPLOCK287_Pos)    /*!< 0x80000000 */
#define BSEC_SPLOCK8_SPLOCK287        BSEC_SPLOCK8_SPLOCK287_Msk              /*!< sticky programming lock for word y (y=256 to 287)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SPLOCK9 register  *****************/
#define BSEC_SPLOCK9_SPLOCK288_Pos    (0U)
#define BSEC_SPLOCK9_SPLOCK288_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK288_Pos)    /*!< 0x00000001 */
#define BSEC_SPLOCK9_SPLOCK288        BSEC_SPLOCK9_SPLOCK288_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK289_Pos    (1U)
#define BSEC_SPLOCK9_SPLOCK289_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK289_Pos)    /*!< 0x00000002 */
#define BSEC_SPLOCK9_SPLOCK289        BSEC_SPLOCK9_SPLOCK289_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK290_Pos    (2U)
#define BSEC_SPLOCK9_SPLOCK290_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK290_Pos)    /*!< 0x00000004 */
#define BSEC_SPLOCK9_SPLOCK290        BSEC_SPLOCK9_SPLOCK290_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK291_Pos    (3U)
#define BSEC_SPLOCK9_SPLOCK291_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK291_Pos)    /*!< 0x00000008 */
#define BSEC_SPLOCK9_SPLOCK291        BSEC_SPLOCK9_SPLOCK291_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK292_Pos    (4U)
#define BSEC_SPLOCK9_SPLOCK292_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK292_Pos)    /*!< 0x00000010 */
#define BSEC_SPLOCK9_SPLOCK292        BSEC_SPLOCK9_SPLOCK292_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK293_Pos    (5U)
#define BSEC_SPLOCK9_SPLOCK293_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK293_Pos)    /*!< 0x00000020 */
#define BSEC_SPLOCK9_SPLOCK293        BSEC_SPLOCK9_SPLOCK293_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK294_Pos    (6U)
#define BSEC_SPLOCK9_SPLOCK294_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK294_Pos)    /*!< 0x00000040 */
#define BSEC_SPLOCK9_SPLOCK294        BSEC_SPLOCK9_SPLOCK294_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK295_Pos    (7U)
#define BSEC_SPLOCK9_SPLOCK295_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK295_Pos)    /*!< 0x00000080 */
#define BSEC_SPLOCK9_SPLOCK295        BSEC_SPLOCK9_SPLOCK295_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK296_Pos    (8U)
#define BSEC_SPLOCK9_SPLOCK296_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK296_Pos)    /*!< 0x00000100 */
#define BSEC_SPLOCK9_SPLOCK296        BSEC_SPLOCK9_SPLOCK296_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK297_Pos    (9U)
#define BSEC_SPLOCK9_SPLOCK297_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK297_Pos)    /*!< 0x00000200 */
#define BSEC_SPLOCK9_SPLOCK297        BSEC_SPLOCK9_SPLOCK297_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK298_Pos    (10U)
#define BSEC_SPLOCK9_SPLOCK298_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK298_Pos)    /*!< 0x00000400 */
#define BSEC_SPLOCK9_SPLOCK298        BSEC_SPLOCK9_SPLOCK298_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK299_Pos    (11U)
#define BSEC_SPLOCK9_SPLOCK299_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK299_Pos)    /*!< 0x00000800 */
#define BSEC_SPLOCK9_SPLOCK299        BSEC_SPLOCK9_SPLOCK299_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK300_Pos    (12U)
#define BSEC_SPLOCK9_SPLOCK300_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK300_Pos)    /*!< 0x00001000 */
#define BSEC_SPLOCK9_SPLOCK300        BSEC_SPLOCK9_SPLOCK300_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK301_Pos    (13U)
#define BSEC_SPLOCK9_SPLOCK301_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK301_Pos)    /*!< 0x00002000 */
#define BSEC_SPLOCK9_SPLOCK301        BSEC_SPLOCK9_SPLOCK301_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK302_Pos    (14U)
#define BSEC_SPLOCK9_SPLOCK302_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK302_Pos)    /*!< 0x00004000 */
#define BSEC_SPLOCK9_SPLOCK302        BSEC_SPLOCK9_SPLOCK302_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK303_Pos    (15U)
#define BSEC_SPLOCK9_SPLOCK303_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK303_Pos)    /*!< 0x00008000 */
#define BSEC_SPLOCK9_SPLOCK303        BSEC_SPLOCK9_SPLOCK303_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK304_Pos    (16U)
#define BSEC_SPLOCK9_SPLOCK304_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK304_Pos)    /*!< 0x00010000 */
#define BSEC_SPLOCK9_SPLOCK304        BSEC_SPLOCK9_SPLOCK304_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK305_Pos    (17U)
#define BSEC_SPLOCK9_SPLOCK305_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK305_Pos)    /*!< 0x00020000 */
#define BSEC_SPLOCK9_SPLOCK305        BSEC_SPLOCK9_SPLOCK305_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK306_Pos    (18U)
#define BSEC_SPLOCK9_SPLOCK306_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK306_Pos)    /*!< 0x00040000 */
#define BSEC_SPLOCK9_SPLOCK306        BSEC_SPLOCK9_SPLOCK306_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK307_Pos    (19U)
#define BSEC_SPLOCK9_SPLOCK307_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK307_Pos)    /*!< 0x00080000 */
#define BSEC_SPLOCK9_SPLOCK307        BSEC_SPLOCK9_SPLOCK307_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK308_Pos    (20U)
#define BSEC_SPLOCK9_SPLOCK308_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK308_Pos)    /*!< 0x00100000 */
#define BSEC_SPLOCK9_SPLOCK308        BSEC_SPLOCK9_SPLOCK308_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK309_Pos    (21U)
#define BSEC_SPLOCK9_SPLOCK309_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK309_Pos)    /*!< 0x00200000 */
#define BSEC_SPLOCK9_SPLOCK309        BSEC_SPLOCK9_SPLOCK309_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK310_Pos    (22U)
#define BSEC_SPLOCK9_SPLOCK310_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK310_Pos)    /*!< 0x00400000 */
#define BSEC_SPLOCK9_SPLOCK310        BSEC_SPLOCK9_SPLOCK310_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK311_Pos    (23U)
#define BSEC_SPLOCK9_SPLOCK311_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK311_Pos)    /*!< 0x00800000 */
#define BSEC_SPLOCK9_SPLOCK311        BSEC_SPLOCK9_SPLOCK311_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK312_Pos    (24U)
#define BSEC_SPLOCK9_SPLOCK312_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK312_Pos)    /*!< 0x01000000 */
#define BSEC_SPLOCK9_SPLOCK312        BSEC_SPLOCK9_SPLOCK312_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK313_Pos    (25U)
#define BSEC_SPLOCK9_SPLOCK313_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK313_Pos)    /*!< 0x02000000 */
#define BSEC_SPLOCK9_SPLOCK313        BSEC_SPLOCK9_SPLOCK313_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK314_Pos    (26U)
#define BSEC_SPLOCK9_SPLOCK314_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK314_Pos)    /*!< 0x04000000 */
#define BSEC_SPLOCK9_SPLOCK314        BSEC_SPLOCK9_SPLOCK314_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK315_Pos    (27U)
#define BSEC_SPLOCK9_SPLOCK315_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK315_Pos)    /*!< 0x08000000 */
#define BSEC_SPLOCK9_SPLOCK315        BSEC_SPLOCK9_SPLOCK315_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK316_Pos    (28U)
#define BSEC_SPLOCK9_SPLOCK316_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK316_Pos)    /*!< 0x10000000 */
#define BSEC_SPLOCK9_SPLOCK316        BSEC_SPLOCK9_SPLOCK316_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK317_Pos    (29U)
#define BSEC_SPLOCK9_SPLOCK317_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK317_Pos)    /*!< 0x20000000 */
#define BSEC_SPLOCK9_SPLOCK317        BSEC_SPLOCK9_SPLOCK317_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK318_Pos    (30U)
#define BSEC_SPLOCK9_SPLOCK318_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK318_Pos)    /*!< 0x40000000 */
#define BSEC_SPLOCK9_SPLOCK318        BSEC_SPLOCK9_SPLOCK318_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK9_SPLOCK319_Pos    (31U)
#define BSEC_SPLOCK9_SPLOCK319_Msk    (0x1U << BSEC_SPLOCK9_SPLOCK319_Pos)    /*!< 0x80000000 */
#define BSEC_SPLOCK9_SPLOCK319        BSEC_SPLOCK9_SPLOCK319_Msk              /*!< sticky programming lock for word y (y=288 to 319)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_SPLOCK10 register  *****************/
#define BSEC_SPLOCK10_SPLOCK320_Pos   (0U)
#define BSEC_SPLOCK10_SPLOCK320_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK320_Pos)   /*!< 0x00000001 */
#define BSEC_SPLOCK10_SPLOCK320       BSEC_SPLOCK10_SPLOCK320_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK321_Pos   (1U)
#define BSEC_SPLOCK10_SPLOCK321_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK321_Pos)   /*!< 0x00000002 */
#define BSEC_SPLOCK10_SPLOCK321       BSEC_SPLOCK10_SPLOCK321_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK322_Pos   (2U)
#define BSEC_SPLOCK10_SPLOCK322_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK322_Pos)   /*!< 0x00000004 */
#define BSEC_SPLOCK10_SPLOCK322       BSEC_SPLOCK10_SPLOCK322_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK323_Pos   (3U)
#define BSEC_SPLOCK10_SPLOCK323_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK323_Pos)   /*!< 0x00000008 */
#define BSEC_SPLOCK10_SPLOCK323       BSEC_SPLOCK10_SPLOCK323_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK324_Pos   (4U)
#define BSEC_SPLOCK10_SPLOCK324_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK324_Pos)   /*!< 0x00000010 */
#define BSEC_SPLOCK10_SPLOCK324       BSEC_SPLOCK10_SPLOCK324_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK325_Pos   (5U)
#define BSEC_SPLOCK10_SPLOCK325_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK325_Pos)   /*!< 0x00000020 */
#define BSEC_SPLOCK10_SPLOCK325       BSEC_SPLOCK10_SPLOCK325_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK326_Pos   (6U)
#define BSEC_SPLOCK10_SPLOCK326_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK326_Pos)   /*!< 0x00000040 */
#define BSEC_SPLOCK10_SPLOCK326       BSEC_SPLOCK10_SPLOCK326_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK327_Pos   (7U)
#define BSEC_SPLOCK10_SPLOCK327_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK327_Pos)   /*!< 0x00000080 */
#define BSEC_SPLOCK10_SPLOCK327       BSEC_SPLOCK10_SPLOCK327_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK328_Pos   (8U)
#define BSEC_SPLOCK10_SPLOCK328_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK328_Pos)   /*!< 0x00000100 */
#define BSEC_SPLOCK10_SPLOCK328       BSEC_SPLOCK10_SPLOCK328_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK329_Pos   (9U)
#define BSEC_SPLOCK10_SPLOCK329_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK329_Pos)   /*!< 0x00000200 */
#define BSEC_SPLOCK10_SPLOCK329       BSEC_SPLOCK10_SPLOCK329_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK330_Pos   (10U)
#define BSEC_SPLOCK10_SPLOCK330_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK330_Pos)   /*!< 0x00000400 */
#define BSEC_SPLOCK10_SPLOCK330       BSEC_SPLOCK10_SPLOCK330_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK331_Pos   (11U)
#define BSEC_SPLOCK10_SPLOCK331_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK331_Pos)   /*!< 0x00000800 */
#define BSEC_SPLOCK10_SPLOCK331       BSEC_SPLOCK10_SPLOCK331_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK332_Pos   (12U)
#define BSEC_SPLOCK10_SPLOCK332_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK332_Pos)   /*!< 0x00001000 */
#define BSEC_SPLOCK10_SPLOCK332       BSEC_SPLOCK10_SPLOCK332_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK333_Pos   (13U)
#define BSEC_SPLOCK10_SPLOCK333_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK333_Pos)   /*!< 0x00002000 */
#define BSEC_SPLOCK10_SPLOCK333       BSEC_SPLOCK10_SPLOCK333_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK334_Pos   (14U)
#define BSEC_SPLOCK10_SPLOCK334_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK334_Pos)   /*!< 0x00004000 */
#define BSEC_SPLOCK10_SPLOCK334       BSEC_SPLOCK10_SPLOCK334_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK335_Pos   (15U)
#define BSEC_SPLOCK10_SPLOCK335_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK335_Pos)   /*!< 0x00008000 */
#define BSEC_SPLOCK10_SPLOCK335       BSEC_SPLOCK10_SPLOCK335_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK336_Pos   (16U)
#define BSEC_SPLOCK10_SPLOCK336_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK336_Pos)   /*!< 0x00010000 */
#define BSEC_SPLOCK10_SPLOCK336       BSEC_SPLOCK10_SPLOCK336_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK337_Pos   (17U)
#define BSEC_SPLOCK10_SPLOCK337_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK337_Pos)   /*!< 0x00020000 */
#define BSEC_SPLOCK10_SPLOCK337       BSEC_SPLOCK10_SPLOCK337_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK338_Pos   (18U)
#define BSEC_SPLOCK10_SPLOCK338_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK338_Pos)   /*!< 0x00040000 */
#define BSEC_SPLOCK10_SPLOCK338       BSEC_SPLOCK10_SPLOCK338_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK339_Pos   (19U)
#define BSEC_SPLOCK10_SPLOCK339_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK339_Pos)   /*!< 0x00080000 */
#define BSEC_SPLOCK10_SPLOCK339       BSEC_SPLOCK10_SPLOCK339_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK340_Pos   (20U)
#define BSEC_SPLOCK10_SPLOCK340_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK340_Pos)   /*!< 0x00100000 */
#define BSEC_SPLOCK10_SPLOCK340       BSEC_SPLOCK10_SPLOCK340_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK341_Pos   (21U)
#define BSEC_SPLOCK10_SPLOCK341_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK341_Pos)   /*!< 0x00200000 */
#define BSEC_SPLOCK10_SPLOCK341       BSEC_SPLOCK10_SPLOCK341_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK342_Pos   (22U)
#define BSEC_SPLOCK10_SPLOCK342_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK342_Pos)   /*!< 0x00400000 */
#define BSEC_SPLOCK10_SPLOCK342       BSEC_SPLOCK10_SPLOCK342_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK343_Pos   (23U)
#define BSEC_SPLOCK10_SPLOCK343_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK343_Pos)   /*!< 0x00800000 */
#define BSEC_SPLOCK10_SPLOCK343       BSEC_SPLOCK10_SPLOCK343_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK344_Pos   (24U)
#define BSEC_SPLOCK10_SPLOCK344_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK344_Pos)   /*!< 0x01000000 */
#define BSEC_SPLOCK10_SPLOCK344       BSEC_SPLOCK10_SPLOCK344_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK345_Pos   (25U)
#define BSEC_SPLOCK10_SPLOCK345_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK345_Pos)   /*!< 0x02000000 */
#define BSEC_SPLOCK10_SPLOCK345       BSEC_SPLOCK10_SPLOCK345_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK346_Pos   (26U)
#define BSEC_SPLOCK10_SPLOCK346_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK346_Pos)   /*!< 0x04000000 */
#define BSEC_SPLOCK10_SPLOCK346       BSEC_SPLOCK10_SPLOCK346_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK347_Pos   (27U)
#define BSEC_SPLOCK10_SPLOCK347_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK347_Pos)   /*!< 0x08000000 */
#define BSEC_SPLOCK10_SPLOCK347       BSEC_SPLOCK10_SPLOCK347_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK348_Pos   (28U)
#define BSEC_SPLOCK10_SPLOCK348_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK348_Pos)   /*!< 0x10000000 */
#define BSEC_SPLOCK10_SPLOCK348       BSEC_SPLOCK10_SPLOCK348_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK349_Pos   (29U)
#define BSEC_SPLOCK10_SPLOCK349_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK349_Pos)   /*!< 0x20000000 */
#define BSEC_SPLOCK10_SPLOCK349       BSEC_SPLOCK10_SPLOCK349_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK350_Pos   (30U)
#define BSEC_SPLOCK10_SPLOCK350_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK350_Pos)   /*!< 0x40000000 */
#define BSEC_SPLOCK10_SPLOCK350       BSEC_SPLOCK10_SPLOCK350_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK10_SPLOCK351_Pos   (31U)
#define BSEC_SPLOCK10_SPLOCK351_Msk   (0x1U << BSEC_SPLOCK10_SPLOCK351_Pos)   /*!< 0x80000000 */
#define BSEC_SPLOCK10_SPLOCK351       BSEC_SPLOCK10_SPLOCK351_Msk             /*!< sticky programming lock for word y (y=320 to 351)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_SPLOCK11 register  *****************/
#define BSEC_SPLOCK11_SPLOCK352_Pos   (0U)
#define BSEC_SPLOCK11_SPLOCK352_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK352_Pos)   /*!< 0x00000001 */
#define BSEC_SPLOCK11_SPLOCK352       BSEC_SPLOCK11_SPLOCK352_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK353_Pos   (1U)
#define BSEC_SPLOCK11_SPLOCK353_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK353_Pos)   /*!< 0x00000002 */
#define BSEC_SPLOCK11_SPLOCK353       BSEC_SPLOCK11_SPLOCK353_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK354_Pos   (2U)
#define BSEC_SPLOCK11_SPLOCK354_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK354_Pos)   /*!< 0x00000004 */
#define BSEC_SPLOCK11_SPLOCK354       BSEC_SPLOCK11_SPLOCK354_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK355_Pos   (3U)
#define BSEC_SPLOCK11_SPLOCK355_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK355_Pos)   /*!< 0x00000008 */
#define BSEC_SPLOCK11_SPLOCK355       BSEC_SPLOCK11_SPLOCK355_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK356_Pos   (4U)
#define BSEC_SPLOCK11_SPLOCK356_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK356_Pos)   /*!< 0x00000010 */
#define BSEC_SPLOCK11_SPLOCK356       BSEC_SPLOCK11_SPLOCK356_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK357_Pos   (5U)
#define BSEC_SPLOCK11_SPLOCK357_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK357_Pos)   /*!< 0x00000020 */
#define BSEC_SPLOCK11_SPLOCK357       BSEC_SPLOCK11_SPLOCK357_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK358_Pos   (6U)
#define BSEC_SPLOCK11_SPLOCK358_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK358_Pos)   /*!< 0x00000040 */
#define BSEC_SPLOCK11_SPLOCK358       BSEC_SPLOCK11_SPLOCK358_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK359_Pos   (7U)
#define BSEC_SPLOCK11_SPLOCK359_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK359_Pos)   /*!< 0x00000080 */
#define BSEC_SPLOCK11_SPLOCK359       BSEC_SPLOCK11_SPLOCK359_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK360_Pos   (8U)
#define BSEC_SPLOCK11_SPLOCK360_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK360_Pos)   /*!< 0x00000100 */
#define BSEC_SPLOCK11_SPLOCK360       BSEC_SPLOCK11_SPLOCK360_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK361_Pos   (9U)
#define BSEC_SPLOCK11_SPLOCK361_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK361_Pos)   /*!< 0x00000200 */
#define BSEC_SPLOCK11_SPLOCK361       BSEC_SPLOCK11_SPLOCK361_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK362_Pos   (10U)
#define BSEC_SPLOCK11_SPLOCK362_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK362_Pos)   /*!< 0x00000400 */
#define BSEC_SPLOCK11_SPLOCK362       BSEC_SPLOCK11_SPLOCK362_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK363_Pos   (11U)
#define BSEC_SPLOCK11_SPLOCK363_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK363_Pos)   /*!< 0x00000800 */
#define BSEC_SPLOCK11_SPLOCK363       BSEC_SPLOCK11_SPLOCK363_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK364_Pos   (12U)
#define BSEC_SPLOCK11_SPLOCK364_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK364_Pos)   /*!< 0x00001000 */
#define BSEC_SPLOCK11_SPLOCK364       BSEC_SPLOCK11_SPLOCK364_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK365_Pos   (13U)
#define BSEC_SPLOCK11_SPLOCK365_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK365_Pos)   /*!< 0x00002000 */
#define BSEC_SPLOCK11_SPLOCK365       BSEC_SPLOCK11_SPLOCK365_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK366_Pos   (14U)
#define BSEC_SPLOCK11_SPLOCK366_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK366_Pos)   /*!< 0x00004000 */
#define BSEC_SPLOCK11_SPLOCK366       BSEC_SPLOCK11_SPLOCK366_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK367_Pos   (15U)
#define BSEC_SPLOCK11_SPLOCK367_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK367_Pos)   /*!< 0x00008000 */
#define BSEC_SPLOCK11_SPLOCK367       BSEC_SPLOCK11_SPLOCK367_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK368_Pos   (16U)
#define BSEC_SPLOCK11_SPLOCK368_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK368_Pos)   /*!< 0x00010000 */
#define BSEC_SPLOCK11_SPLOCK368       BSEC_SPLOCK11_SPLOCK368_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK369_Pos   (17U)
#define BSEC_SPLOCK11_SPLOCK369_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK369_Pos)   /*!< 0x00020000 */
#define BSEC_SPLOCK11_SPLOCK369       BSEC_SPLOCK11_SPLOCK369_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK370_Pos   (18U)
#define BSEC_SPLOCK11_SPLOCK370_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK370_Pos)   /*!< 0x00040000 */
#define BSEC_SPLOCK11_SPLOCK370       BSEC_SPLOCK11_SPLOCK370_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK371_Pos   (19U)
#define BSEC_SPLOCK11_SPLOCK371_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK371_Pos)   /*!< 0x00080000 */
#define BSEC_SPLOCK11_SPLOCK371       BSEC_SPLOCK11_SPLOCK371_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK372_Pos   (20U)
#define BSEC_SPLOCK11_SPLOCK372_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK372_Pos)   /*!< 0x00100000 */
#define BSEC_SPLOCK11_SPLOCK372       BSEC_SPLOCK11_SPLOCK372_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK373_Pos   (21U)
#define BSEC_SPLOCK11_SPLOCK373_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK373_Pos)   /*!< 0x00200000 */
#define BSEC_SPLOCK11_SPLOCK373       BSEC_SPLOCK11_SPLOCK373_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK374_Pos   (22U)
#define BSEC_SPLOCK11_SPLOCK374_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK374_Pos)   /*!< 0x00400000 */
#define BSEC_SPLOCK11_SPLOCK374       BSEC_SPLOCK11_SPLOCK374_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK375_Pos   (23U)
#define BSEC_SPLOCK11_SPLOCK375_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK375_Pos)   /*!< 0x00800000 */
#define BSEC_SPLOCK11_SPLOCK375       BSEC_SPLOCK11_SPLOCK375_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK376_Pos   (24U)
#define BSEC_SPLOCK11_SPLOCK376_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK376_Pos)   /*!< 0x01000000 */
#define BSEC_SPLOCK11_SPLOCK376       BSEC_SPLOCK11_SPLOCK376_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK377_Pos   (25U)
#define BSEC_SPLOCK11_SPLOCK377_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK377_Pos)   /*!< 0x02000000 */
#define BSEC_SPLOCK11_SPLOCK377       BSEC_SPLOCK11_SPLOCK377_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK378_Pos   (26U)
#define BSEC_SPLOCK11_SPLOCK378_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK378_Pos)   /*!< 0x04000000 */
#define BSEC_SPLOCK11_SPLOCK378       BSEC_SPLOCK11_SPLOCK378_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK379_Pos   (27U)
#define BSEC_SPLOCK11_SPLOCK379_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK379_Pos)   /*!< 0x08000000 */
#define BSEC_SPLOCK11_SPLOCK379       BSEC_SPLOCK11_SPLOCK379_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK380_Pos   (28U)
#define BSEC_SPLOCK11_SPLOCK380_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK380_Pos)   /*!< 0x10000000 */
#define BSEC_SPLOCK11_SPLOCK380       BSEC_SPLOCK11_SPLOCK380_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK381_Pos   (29U)
#define BSEC_SPLOCK11_SPLOCK381_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK381_Pos)   /*!< 0x20000000 */
#define BSEC_SPLOCK11_SPLOCK381       BSEC_SPLOCK11_SPLOCK381_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK382_Pos   (30U)
#define BSEC_SPLOCK11_SPLOCK382_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK382_Pos)   /*!< 0x40000000 */
#define BSEC_SPLOCK11_SPLOCK382       BSEC_SPLOCK11_SPLOCK382_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SPLOCK11_SPLOCK383_Pos   (31U)
#define BSEC_SPLOCK11_SPLOCK383_Msk   (0x1U << BSEC_SPLOCK11_SPLOCK383_Pos)   /*!< 0x80000000 */
#define BSEC_SPLOCK11_SPLOCK383       BSEC_SPLOCK11_SPLOCK383_Msk             /*!< sticky programming lock for word y (y=352 to 383)See BSEC_SPLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK0 register  *****************/
#define BSEC_SWLOCK0_SWLOCK0_Pos      (0U)
#define BSEC_SWLOCK0_SWLOCK0_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK0_Pos)      /*!< 0x00000001 */
#define BSEC_SWLOCK0_SWLOCK0          BSEC_SWLOCK0_SWLOCK0_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK1_Pos      (1U)
#define BSEC_SWLOCK0_SWLOCK1_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK1_Pos)      /*!< 0x00000002 */
#define BSEC_SWLOCK0_SWLOCK1          BSEC_SWLOCK0_SWLOCK1_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK2_Pos      (2U)
#define BSEC_SWLOCK0_SWLOCK2_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK2_Pos)      /*!< 0x00000004 */
#define BSEC_SWLOCK0_SWLOCK2          BSEC_SWLOCK0_SWLOCK2_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK3_Pos      (3U)
#define BSEC_SWLOCK0_SWLOCK3_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK3_Pos)      /*!< 0x00000008 */
#define BSEC_SWLOCK0_SWLOCK3          BSEC_SWLOCK0_SWLOCK3_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK4_Pos      (4U)
#define BSEC_SWLOCK0_SWLOCK4_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK4_Pos)      /*!< 0x00000010 */
#define BSEC_SWLOCK0_SWLOCK4          BSEC_SWLOCK0_SWLOCK4_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK5_Pos      (5U)
#define BSEC_SWLOCK0_SWLOCK5_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK5_Pos)      /*!< 0x00000020 */
#define BSEC_SWLOCK0_SWLOCK5          BSEC_SWLOCK0_SWLOCK5_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK6_Pos      (6U)
#define BSEC_SWLOCK0_SWLOCK6_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK6_Pos)      /*!< 0x00000040 */
#define BSEC_SWLOCK0_SWLOCK6          BSEC_SWLOCK0_SWLOCK6_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK7_Pos      (7U)
#define BSEC_SWLOCK0_SWLOCK7_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK7_Pos)      /*!< 0x00000080 */
#define BSEC_SWLOCK0_SWLOCK7          BSEC_SWLOCK0_SWLOCK7_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK8_Pos      (8U)
#define BSEC_SWLOCK0_SWLOCK8_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK8_Pos)      /*!< 0x00000100 */
#define BSEC_SWLOCK0_SWLOCK8          BSEC_SWLOCK0_SWLOCK8_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK9_Pos      (9U)
#define BSEC_SWLOCK0_SWLOCK9_Msk      (0x1U << BSEC_SWLOCK0_SWLOCK9_Pos)      /*!< 0x00000200 */
#define BSEC_SWLOCK0_SWLOCK9          BSEC_SWLOCK0_SWLOCK9_Msk                /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK10_Pos     (10U)
#define BSEC_SWLOCK0_SWLOCK10_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK10_Pos)     /*!< 0x00000400 */
#define BSEC_SWLOCK0_SWLOCK10         BSEC_SWLOCK0_SWLOCK10_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK11_Pos     (11U)
#define BSEC_SWLOCK0_SWLOCK11_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK11_Pos)     /*!< 0x00000800 */
#define BSEC_SWLOCK0_SWLOCK11         BSEC_SWLOCK0_SWLOCK11_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK12_Pos     (12U)
#define BSEC_SWLOCK0_SWLOCK12_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK12_Pos)     /*!< 0x00001000 */
#define BSEC_SWLOCK0_SWLOCK12         BSEC_SWLOCK0_SWLOCK12_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK13_Pos     (13U)
#define BSEC_SWLOCK0_SWLOCK13_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK13_Pos)     /*!< 0x00002000 */
#define BSEC_SWLOCK0_SWLOCK13         BSEC_SWLOCK0_SWLOCK13_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK14_Pos     (14U)
#define BSEC_SWLOCK0_SWLOCK14_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK14_Pos)     /*!< 0x00004000 */
#define BSEC_SWLOCK0_SWLOCK14         BSEC_SWLOCK0_SWLOCK14_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK15_Pos     (15U)
#define BSEC_SWLOCK0_SWLOCK15_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK15_Pos)     /*!< 0x00008000 */
#define BSEC_SWLOCK0_SWLOCK15         BSEC_SWLOCK0_SWLOCK15_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK16_Pos     (16U)
#define BSEC_SWLOCK0_SWLOCK16_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK16_Pos)     /*!< 0x00010000 */
#define BSEC_SWLOCK0_SWLOCK16         BSEC_SWLOCK0_SWLOCK16_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK17_Pos     (17U)
#define BSEC_SWLOCK0_SWLOCK17_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK17_Pos)     /*!< 0x00020000 */
#define BSEC_SWLOCK0_SWLOCK17         BSEC_SWLOCK0_SWLOCK17_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK18_Pos     (18U)
#define BSEC_SWLOCK0_SWLOCK18_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK18_Pos)     /*!< 0x00040000 */
#define BSEC_SWLOCK0_SWLOCK18         BSEC_SWLOCK0_SWLOCK18_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK19_Pos     (19U)
#define BSEC_SWLOCK0_SWLOCK19_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK19_Pos)     /*!< 0x00080000 */
#define BSEC_SWLOCK0_SWLOCK19         BSEC_SWLOCK0_SWLOCK19_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK20_Pos     (20U)
#define BSEC_SWLOCK0_SWLOCK20_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK20_Pos)     /*!< 0x00100000 */
#define BSEC_SWLOCK0_SWLOCK20         BSEC_SWLOCK0_SWLOCK20_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK21_Pos     (21U)
#define BSEC_SWLOCK0_SWLOCK21_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK21_Pos)     /*!< 0x00200000 */
#define BSEC_SWLOCK0_SWLOCK21         BSEC_SWLOCK0_SWLOCK21_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK22_Pos     (22U)
#define BSEC_SWLOCK0_SWLOCK22_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK22_Pos)     /*!< 0x00400000 */
#define BSEC_SWLOCK0_SWLOCK22         BSEC_SWLOCK0_SWLOCK22_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK23_Pos     (23U)
#define BSEC_SWLOCK0_SWLOCK23_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK23_Pos)     /*!< 0x00800000 */
#define BSEC_SWLOCK0_SWLOCK23         BSEC_SWLOCK0_SWLOCK23_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK24_Pos     (24U)
#define BSEC_SWLOCK0_SWLOCK24_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK24_Pos)     /*!< 0x01000000 */
#define BSEC_SWLOCK0_SWLOCK24         BSEC_SWLOCK0_SWLOCK24_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK25_Pos     (25U)
#define BSEC_SWLOCK0_SWLOCK25_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK25_Pos)     /*!< 0x02000000 */
#define BSEC_SWLOCK0_SWLOCK25         BSEC_SWLOCK0_SWLOCK25_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK26_Pos     (26U)
#define BSEC_SWLOCK0_SWLOCK26_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK26_Pos)     /*!< 0x04000000 */
#define BSEC_SWLOCK0_SWLOCK26         BSEC_SWLOCK0_SWLOCK26_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK27_Pos     (27U)
#define BSEC_SWLOCK0_SWLOCK27_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK27_Pos)     /*!< 0x08000000 */
#define BSEC_SWLOCK0_SWLOCK27         BSEC_SWLOCK0_SWLOCK27_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK28_Pos     (28U)
#define BSEC_SWLOCK0_SWLOCK28_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK28_Pos)     /*!< 0x10000000 */
#define BSEC_SWLOCK0_SWLOCK28         BSEC_SWLOCK0_SWLOCK28_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK29_Pos     (29U)
#define BSEC_SWLOCK0_SWLOCK29_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK29_Pos)     /*!< 0x20000000 */
#define BSEC_SWLOCK0_SWLOCK29         BSEC_SWLOCK0_SWLOCK29_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK30_Pos     (30U)
#define BSEC_SWLOCK0_SWLOCK30_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK30_Pos)     /*!< 0x40000000 */
#define BSEC_SWLOCK0_SWLOCK30         BSEC_SWLOCK0_SWLOCK30_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK0_SWLOCK31_Pos     (31U)
#define BSEC_SWLOCK0_SWLOCK31_Msk     (0x1U << BSEC_SWLOCK0_SWLOCK31_Pos)     /*!< 0x80000000 */
#define BSEC_SWLOCK0_SWLOCK31         BSEC_SWLOCK0_SWLOCK31_Msk               /*!< sticky write lock for shadow register y (y=0 to 31)When fuse word y is shadowed (SFWy bit set in BSEC_SFSR0) setting this bit prevents the writing of register BSEC_FVRy by application until next power-on reset.- 0: Write to shadow register BSEC_FVRy is allowed- 1: Writes to shadow register BSEC_FVRy are silently ignoredWhile BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK1 register  *****************/
#define BSEC_SWLOCK1_SWLOCK32_Pos     (0U)
#define BSEC_SWLOCK1_SWLOCK32_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK32_Pos)     /*!< 0x00000001 */
#define BSEC_SWLOCK1_SWLOCK32         BSEC_SWLOCK1_SWLOCK32_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK33_Pos     (1U)
#define BSEC_SWLOCK1_SWLOCK33_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK33_Pos)     /*!< 0x00000002 */
#define BSEC_SWLOCK1_SWLOCK33         BSEC_SWLOCK1_SWLOCK33_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK34_Pos     (2U)
#define BSEC_SWLOCK1_SWLOCK34_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK34_Pos)     /*!< 0x00000004 */
#define BSEC_SWLOCK1_SWLOCK34         BSEC_SWLOCK1_SWLOCK34_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK35_Pos     (3U)
#define BSEC_SWLOCK1_SWLOCK35_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK35_Pos)     /*!< 0x00000008 */
#define BSEC_SWLOCK1_SWLOCK35         BSEC_SWLOCK1_SWLOCK35_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK36_Pos     (4U)
#define BSEC_SWLOCK1_SWLOCK36_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK36_Pos)     /*!< 0x00000010 */
#define BSEC_SWLOCK1_SWLOCK36         BSEC_SWLOCK1_SWLOCK36_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK37_Pos     (5U)
#define BSEC_SWLOCK1_SWLOCK37_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK37_Pos)     /*!< 0x00000020 */
#define BSEC_SWLOCK1_SWLOCK37         BSEC_SWLOCK1_SWLOCK37_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK38_Pos     (6U)
#define BSEC_SWLOCK1_SWLOCK38_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK38_Pos)     /*!< 0x00000040 */
#define BSEC_SWLOCK1_SWLOCK38         BSEC_SWLOCK1_SWLOCK38_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK39_Pos     (7U)
#define BSEC_SWLOCK1_SWLOCK39_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK39_Pos)     /*!< 0x00000080 */
#define BSEC_SWLOCK1_SWLOCK39         BSEC_SWLOCK1_SWLOCK39_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK40_Pos     (8U)
#define BSEC_SWLOCK1_SWLOCK40_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK40_Pos)     /*!< 0x00000100 */
#define BSEC_SWLOCK1_SWLOCK40         BSEC_SWLOCK1_SWLOCK40_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK41_Pos     (9U)
#define BSEC_SWLOCK1_SWLOCK41_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK41_Pos)     /*!< 0x00000200 */
#define BSEC_SWLOCK1_SWLOCK41         BSEC_SWLOCK1_SWLOCK41_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK42_Pos     (10U)
#define BSEC_SWLOCK1_SWLOCK42_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK42_Pos)     /*!< 0x00000400 */
#define BSEC_SWLOCK1_SWLOCK42         BSEC_SWLOCK1_SWLOCK42_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK43_Pos     (11U)
#define BSEC_SWLOCK1_SWLOCK43_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK43_Pos)     /*!< 0x00000800 */
#define BSEC_SWLOCK1_SWLOCK43         BSEC_SWLOCK1_SWLOCK43_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK44_Pos     (12U)
#define BSEC_SWLOCK1_SWLOCK44_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK44_Pos)     /*!< 0x00001000 */
#define BSEC_SWLOCK1_SWLOCK44         BSEC_SWLOCK1_SWLOCK44_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK45_Pos     (13U)
#define BSEC_SWLOCK1_SWLOCK45_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK45_Pos)     /*!< 0x00002000 */
#define BSEC_SWLOCK1_SWLOCK45         BSEC_SWLOCK1_SWLOCK45_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK46_Pos     (14U)
#define BSEC_SWLOCK1_SWLOCK46_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK46_Pos)     /*!< 0x00004000 */
#define BSEC_SWLOCK1_SWLOCK46         BSEC_SWLOCK1_SWLOCK46_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK47_Pos     (15U)
#define BSEC_SWLOCK1_SWLOCK47_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK47_Pos)     /*!< 0x00008000 */
#define BSEC_SWLOCK1_SWLOCK47         BSEC_SWLOCK1_SWLOCK47_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK48_Pos     (16U)
#define BSEC_SWLOCK1_SWLOCK48_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK48_Pos)     /*!< 0x00010000 */
#define BSEC_SWLOCK1_SWLOCK48         BSEC_SWLOCK1_SWLOCK48_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK49_Pos     (17U)
#define BSEC_SWLOCK1_SWLOCK49_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK49_Pos)     /*!< 0x00020000 */
#define BSEC_SWLOCK1_SWLOCK49         BSEC_SWLOCK1_SWLOCK49_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK50_Pos     (18U)
#define BSEC_SWLOCK1_SWLOCK50_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK50_Pos)     /*!< 0x00040000 */
#define BSEC_SWLOCK1_SWLOCK50         BSEC_SWLOCK1_SWLOCK50_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK51_Pos     (19U)
#define BSEC_SWLOCK1_SWLOCK51_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK51_Pos)     /*!< 0x00080000 */
#define BSEC_SWLOCK1_SWLOCK51         BSEC_SWLOCK1_SWLOCK51_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK52_Pos     (20U)
#define BSEC_SWLOCK1_SWLOCK52_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK52_Pos)     /*!< 0x00100000 */
#define BSEC_SWLOCK1_SWLOCK52         BSEC_SWLOCK1_SWLOCK52_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK53_Pos     (21U)
#define BSEC_SWLOCK1_SWLOCK53_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK53_Pos)     /*!< 0x00200000 */
#define BSEC_SWLOCK1_SWLOCK53         BSEC_SWLOCK1_SWLOCK53_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK54_Pos     (22U)
#define BSEC_SWLOCK1_SWLOCK54_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK54_Pos)     /*!< 0x00400000 */
#define BSEC_SWLOCK1_SWLOCK54         BSEC_SWLOCK1_SWLOCK54_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK55_Pos     (23U)
#define BSEC_SWLOCK1_SWLOCK55_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK55_Pos)     /*!< 0x00800000 */
#define BSEC_SWLOCK1_SWLOCK55         BSEC_SWLOCK1_SWLOCK55_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK56_Pos     (24U)
#define BSEC_SWLOCK1_SWLOCK56_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK56_Pos)     /*!< 0x01000000 */
#define BSEC_SWLOCK1_SWLOCK56         BSEC_SWLOCK1_SWLOCK56_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK57_Pos     (25U)
#define BSEC_SWLOCK1_SWLOCK57_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK57_Pos)     /*!< 0x02000000 */
#define BSEC_SWLOCK1_SWLOCK57         BSEC_SWLOCK1_SWLOCK57_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK58_Pos     (26U)
#define BSEC_SWLOCK1_SWLOCK58_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK58_Pos)     /*!< 0x04000000 */
#define BSEC_SWLOCK1_SWLOCK58         BSEC_SWLOCK1_SWLOCK58_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK59_Pos     (27U)
#define BSEC_SWLOCK1_SWLOCK59_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK59_Pos)     /*!< 0x08000000 */
#define BSEC_SWLOCK1_SWLOCK59         BSEC_SWLOCK1_SWLOCK59_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK60_Pos     (28U)
#define BSEC_SWLOCK1_SWLOCK60_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK60_Pos)     /*!< 0x10000000 */
#define BSEC_SWLOCK1_SWLOCK60         BSEC_SWLOCK1_SWLOCK60_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK61_Pos     (29U)
#define BSEC_SWLOCK1_SWLOCK61_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK61_Pos)     /*!< 0x20000000 */
#define BSEC_SWLOCK1_SWLOCK61         BSEC_SWLOCK1_SWLOCK61_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK62_Pos     (30U)
#define BSEC_SWLOCK1_SWLOCK62_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK62_Pos)     /*!< 0x40000000 */
#define BSEC_SWLOCK1_SWLOCK62         BSEC_SWLOCK1_SWLOCK62_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK1_SWLOCK63_Pos     (31U)
#define BSEC_SWLOCK1_SWLOCK63_Msk     (0x1U << BSEC_SWLOCK1_SWLOCK63_Pos)     /*!< 0x80000000 */
#define BSEC_SWLOCK1_SWLOCK63         BSEC_SWLOCK1_SWLOCK63_Msk               /*!< sticky write lock for shadow register y (y=32 to 63)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK2 register  *****************/
#define BSEC_SWLOCK2_SWLOCK64_Pos     (0U)
#define BSEC_SWLOCK2_SWLOCK64_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK64_Pos)     /*!< 0x00000001 */
#define BSEC_SWLOCK2_SWLOCK64         BSEC_SWLOCK2_SWLOCK64_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK65_Pos     (1U)
#define BSEC_SWLOCK2_SWLOCK65_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK65_Pos)     /*!< 0x00000002 */
#define BSEC_SWLOCK2_SWLOCK65         BSEC_SWLOCK2_SWLOCK65_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK66_Pos     (2U)
#define BSEC_SWLOCK2_SWLOCK66_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK66_Pos)     /*!< 0x00000004 */
#define BSEC_SWLOCK2_SWLOCK66         BSEC_SWLOCK2_SWLOCK66_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK67_Pos     (3U)
#define BSEC_SWLOCK2_SWLOCK67_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK67_Pos)     /*!< 0x00000008 */
#define BSEC_SWLOCK2_SWLOCK67         BSEC_SWLOCK2_SWLOCK67_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK68_Pos     (4U)
#define BSEC_SWLOCK2_SWLOCK68_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK68_Pos)     /*!< 0x00000010 */
#define BSEC_SWLOCK2_SWLOCK68         BSEC_SWLOCK2_SWLOCK68_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK69_Pos     (5U)
#define BSEC_SWLOCK2_SWLOCK69_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK69_Pos)     /*!< 0x00000020 */
#define BSEC_SWLOCK2_SWLOCK69         BSEC_SWLOCK2_SWLOCK69_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK70_Pos     (6U)
#define BSEC_SWLOCK2_SWLOCK70_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK70_Pos)     /*!< 0x00000040 */
#define BSEC_SWLOCK2_SWLOCK70         BSEC_SWLOCK2_SWLOCK70_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK71_Pos     (7U)
#define BSEC_SWLOCK2_SWLOCK71_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK71_Pos)     /*!< 0x00000080 */
#define BSEC_SWLOCK2_SWLOCK71         BSEC_SWLOCK2_SWLOCK71_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK72_Pos     (8U)
#define BSEC_SWLOCK2_SWLOCK72_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK72_Pos)     /*!< 0x00000100 */
#define BSEC_SWLOCK2_SWLOCK72         BSEC_SWLOCK2_SWLOCK72_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK73_Pos     (9U)
#define BSEC_SWLOCK2_SWLOCK73_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK73_Pos)     /*!< 0x00000200 */
#define BSEC_SWLOCK2_SWLOCK73         BSEC_SWLOCK2_SWLOCK73_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK74_Pos     (10U)
#define BSEC_SWLOCK2_SWLOCK74_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK74_Pos)     /*!< 0x00000400 */
#define BSEC_SWLOCK2_SWLOCK74         BSEC_SWLOCK2_SWLOCK74_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK75_Pos     (11U)
#define BSEC_SWLOCK2_SWLOCK75_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK75_Pos)     /*!< 0x00000800 */
#define BSEC_SWLOCK2_SWLOCK75         BSEC_SWLOCK2_SWLOCK75_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK76_Pos     (12U)
#define BSEC_SWLOCK2_SWLOCK76_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK76_Pos)     /*!< 0x00001000 */
#define BSEC_SWLOCK2_SWLOCK76         BSEC_SWLOCK2_SWLOCK76_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK77_Pos     (13U)
#define BSEC_SWLOCK2_SWLOCK77_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK77_Pos)     /*!< 0x00002000 */
#define BSEC_SWLOCK2_SWLOCK77         BSEC_SWLOCK2_SWLOCK77_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK78_Pos     (14U)
#define BSEC_SWLOCK2_SWLOCK78_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK78_Pos)     /*!< 0x00004000 */
#define BSEC_SWLOCK2_SWLOCK78         BSEC_SWLOCK2_SWLOCK78_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK79_Pos     (15U)
#define BSEC_SWLOCK2_SWLOCK79_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK79_Pos)     /*!< 0x00008000 */
#define BSEC_SWLOCK2_SWLOCK79         BSEC_SWLOCK2_SWLOCK79_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK80_Pos     (16U)
#define BSEC_SWLOCK2_SWLOCK80_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK80_Pos)     /*!< 0x00010000 */
#define BSEC_SWLOCK2_SWLOCK80         BSEC_SWLOCK2_SWLOCK80_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK81_Pos     (17U)
#define BSEC_SWLOCK2_SWLOCK81_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK81_Pos)     /*!< 0x00020000 */
#define BSEC_SWLOCK2_SWLOCK81         BSEC_SWLOCK2_SWLOCK81_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK82_Pos     (18U)
#define BSEC_SWLOCK2_SWLOCK82_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK82_Pos)     /*!< 0x00040000 */
#define BSEC_SWLOCK2_SWLOCK82         BSEC_SWLOCK2_SWLOCK82_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK83_Pos     (19U)
#define BSEC_SWLOCK2_SWLOCK83_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK83_Pos)     /*!< 0x00080000 */
#define BSEC_SWLOCK2_SWLOCK83         BSEC_SWLOCK2_SWLOCK83_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK84_Pos     (20U)
#define BSEC_SWLOCK2_SWLOCK84_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK84_Pos)     /*!< 0x00100000 */
#define BSEC_SWLOCK2_SWLOCK84         BSEC_SWLOCK2_SWLOCK84_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK85_Pos     (21U)
#define BSEC_SWLOCK2_SWLOCK85_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK85_Pos)     /*!< 0x00200000 */
#define BSEC_SWLOCK2_SWLOCK85         BSEC_SWLOCK2_SWLOCK85_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK86_Pos     (22U)
#define BSEC_SWLOCK2_SWLOCK86_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK86_Pos)     /*!< 0x00400000 */
#define BSEC_SWLOCK2_SWLOCK86         BSEC_SWLOCK2_SWLOCK86_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK87_Pos     (23U)
#define BSEC_SWLOCK2_SWLOCK87_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK87_Pos)     /*!< 0x00800000 */
#define BSEC_SWLOCK2_SWLOCK87         BSEC_SWLOCK2_SWLOCK87_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK88_Pos     (24U)
#define BSEC_SWLOCK2_SWLOCK88_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK88_Pos)     /*!< 0x01000000 */
#define BSEC_SWLOCK2_SWLOCK88         BSEC_SWLOCK2_SWLOCK88_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK89_Pos     (25U)
#define BSEC_SWLOCK2_SWLOCK89_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK89_Pos)     /*!< 0x02000000 */
#define BSEC_SWLOCK2_SWLOCK89         BSEC_SWLOCK2_SWLOCK89_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK90_Pos     (26U)
#define BSEC_SWLOCK2_SWLOCK90_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK90_Pos)     /*!< 0x04000000 */
#define BSEC_SWLOCK2_SWLOCK90         BSEC_SWLOCK2_SWLOCK90_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK91_Pos     (27U)
#define BSEC_SWLOCK2_SWLOCK91_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK91_Pos)     /*!< 0x08000000 */
#define BSEC_SWLOCK2_SWLOCK91         BSEC_SWLOCK2_SWLOCK91_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK92_Pos     (28U)
#define BSEC_SWLOCK2_SWLOCK92_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK92_Pos)     /*!< 0x10000000 */
#define BSEC_SWLOCK2_SWLOCK92         BSEC_SWLOCK2_SWLOCK92_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK93_Pos     (29U)
#define BSEC_SWLOCK2_SWLOCK93_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK93_Pos)     /*!< 0x20000000 */
#define BSEC_SWLOCK2_SWLOCK93         BSEC_SWLOCK2_SWLOCK93_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK94_Pos     (30U)
#define BSEC_SWLOCK2_SWLOCK94_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK94_Pos)     /*!< 0x40000000 */
#define BSEC_SWLOCK2_SWLOCK94         BSEC_SWLOCK2_SWLOCK94_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK2_SWLOCK95_Pos     (31U)
#define BSEC_SWLOCK2_SWLOCK95_Msk     (0x1U << BSEC_SWLOCK2_SWLOCK95_Pos)     /*!< 0x80000000 */
#define BSEC_SWLOCK2_SWLOCK95         BSEC_SWLOCK2_SWLOCK95_Msk               /*!< sticky write lock for shadow register y (y=64 to 95)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK3 register  *****************/
#define BSEC_SWLOCK3_SWLOCK96_Pos     (0U)
#define BSEC_SWLOCK3_SWLOCK96_Msk     (0x1U << BSEC_SWLOCK3_SWLOCK96_Pos)     /*!< 0x00000001 */
#define BSEC_SWLOCK3_SWLOCK96         BSEC_SWLOCK3_SWLOCK96_Msk               /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK97_Pos     (1U)
#define BSEC_SWLOCK3_SWLOCK97_Msk     (0x1U << BSEC_SWLOCK3_SWLOCK97_Pos)     /*!< 0x00000002 */
#define BSEC_SWLOCK3_SWLOCK97         BSEC_SWLOCK3_SWLOCK97_Msk               /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK98_Pos     (2U)
#define BSEC_SWLOCK3_SWLOCK98_Msk     (0x1U << BSEC_SWLOCK3_SWLOCK98_Pos)     /*!< 0x00000004 */
#define BSEC_SWLOCK3_SWLOCK98         BSEC_SWLOCK3_SWLOCK98_Msk               /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK99_Pos     (3U)
#define BSEC_SWLOCK3_SWLOCK99_Msk     (0x1U << BSEC_SWLOCK3_SWLOCK99_Pos)     /*!< 0x00000008 */
#define BSEC_SWLOCK3_SWLOCK99         BSEC_SWLOCK3_SWLOCK99_Msk               /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK100_Pos    (4U)
#define BSEC_SWLOCK3_SWLOCK100_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK100_Pos)    /*!< 0x00000010 */
#define BSEC_SWLOCK3_SWLOCK100        BSEC_SWLOCK3_SWLOCK100_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK101_Pos    (5U)
#define BSEC_SWLOCK3_SWLOCK101_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK101_Pos)    /*!< 0x00000020 */
#define BSEC_SWLOCK3_SWLOCK101        BSEC_SWLOCK3_SWLOCK101_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK102_Pos    (6U)
#define BSEC_SWLOCK3_SWLOCK102_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK102_Pos)    /*!< 0x00000040 */
#define BSEC_SWLOCK3_SWLOCK102        BSEC_SWLOCK3_SWLOCK102_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK103_Pos    (7U)
#define BSEC_SWLOCK3_SWLOCK103_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK103_Pos)    /*!< 0x00000080 */
#define BSEC_SWLOCK3_SWLOCK103        BSEC_SWLOCK3_SWLOCK103_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK104_Pos    (8U)
#define BSEC_SWLOCK3_SWLOCK104_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK104_Pos)    /*!< 0x00000100 */
#define BSEC_SWLOCK3_SWLOCK104        BSEC_SWLOCK3_SWLOCK104_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK105_Pos    (9U)
#define BSEC_SWLOCK3_SWLOCK105_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK105_Pos)    /*!< 0x00000200 */
#define BSEC_SWLOCK3_SWLOCK105        BSEC_SWLOCK3_SWLOCK105_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK106_Pos    (10U)
#define BSEC_SWLOCK3_SWLOCK106_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK106_Pos)    /*!< 0x00000400 */
#define BSEC_SWLOCK3_SWLOCK106        BSEC_SWLOCK3_SWLOCK106_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK107_Pos    (11U)
#define BSEC_SWLOCK3_SWLOCK107_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK107_Pos)    /*!< 0x00000800 */
#define BSEC_SWLOCK3_SWLOCK107        BSEC_SWLOCK3_SWLOCK107_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK108_Pos    (12U)
#define BSEC_SWLOCK3_SWLOCK108_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK108_Pos)    /*!< 0x00001000 */
#define BSEC_SWLOCK3_SWLOCK108        BSEC_SWLOCK3_SWLOCK108_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK109_Pos    (13U)
#define BSEC_SWLOCK3_SWLOCK109_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK109_Pos)    /*!< 0x00002000 */
#define BSEC_SWLOCK3_SWLOCK109        BSEC_SWLOCK3_SWLOCK109_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK110_Pos    (14U)
#define BSEC_SWLOCK3_SWLOCK110_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK110_Pos)    /*!< 0x00004000 */
#define BSEC_SWLOCK3_SWLOCK110        BSEC_SWLOCK3_SWLOCK110_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK111_Pos    (15U)
#define BSEC_SWLOCK3_SWLOCK111_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK111_Pos)    /*!< 0x00008000 */
#define BSEC_SWLOCK3_SWLOCK111        BSEC_SWLOCK3_SWLOCK111_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK112_Pos    (16U)
#define BSEC_SWLOCK3_SWLOCK112_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK112_Pos)    /*!< 0x00010000 */
#define BSEC_SWLOCK3_SWLOCK112        BSEC_SWLOCK3_SWLOCK112_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK113_Pos    (17U)
#define BSEC_SWLOCK3_SWLOCK113_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK113_Pos)    /*!< 0x00020000 */
#define BSEC_SWLOCK3_SWLOCK113        BSEC_SWLOCK3_SWLOCK113_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK114_Pos    (18U)
#define BSEC_SWLOCK3_SWLOCK114_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK114_Pos)    /*!< 0x00040000 */
#define BSEC_SWLOCK3_SWLOCK114        BSEC_SWLOCK3_SWLOCK114_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK115_Pos    (19U)
#define BSEC_SWLOCK3_SWLOCK115_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK115_Pos)    /*!< 0x00080000 */
#define BSEC_SWLOCK3_SWLOCK115        BSEC_SWLOCK3_SWLOCK115_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK116_Pos    (20U)
#define BSEC_SWLOCK3_SWLOCK116_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK116_Pos)    /*!< 0x00100000 */
#define BSEC_SWLOCK3_SWLOCK116        BSEC_SWLOCK3_SWLOCK116_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK117_Pos    (21U)
#define BSEC_SWLOCK3_SWLOCK117_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK117_Pos)    /*!< 0x00200000 */
#define BSEC_SWLOCK3_SWLOCK117        BSEC_SWLOCK3_SWLOCK117_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK118_Pos    (22U)
#define BSEC_SWLOCK3_SWLOCK118_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK118_Pos)    /*!< 0x00400000 */
#define BSEC_SWLOCK3_SWLOCK118        BSEC_SWLOCK3_SWLOCK118_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK119_Pos    (23U)
#define BSEC_SWLOCK3_SWLOCK119_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK119_Pos)    /*!< 0x00800000 */
#define BSEC_SWLOCK3_SWLOCK119        BSEC_SWLOCK3_SWLOCK119_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK120_Pos    (24U)
#define BSEC_SWLOCK3_SWLOCK120_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK120_Pos)    /*!< 0x01000000 */
#define BSEC_SWLOCK3_SWLOCK120        BSEC_SWLOCK3_SWLOCK120_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK121_Pos    (25U)
#define BSEC_SWLOCK3_SWLOCK121_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK121_Pos)    /*!< 0x02000000 */
#define BSEC_SWLOCK3_SWLOCK121        BSEC_SWLOCK3_SWLOCK121_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK122_Pos    (26U)
#define BSEC_SWLOCK3_SWLOCK122_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK122_Pos)    /*!< 0x04000000 */
#define BSEC_SWLOCK3_SWLOCK122        BSEC_SWLOCK3_SWLOCK122_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK123_Pos    (27U)
#define BSEC_SWLOCK3_SWLOCK123_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK123_Pos)    /*!< 0x08000000 */
#define BSEC_SWLOCK3_SWLOCK123        BSEC_SWLOCK3_SWLOCK123_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK124_Pos    (28U)
#define BSEC_SWLOCK3_SWLOCK124_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK124_Pos)    /*!< 0x10000000 */
#define BSEC_SWLOCK3_SWLOCK124        BSEC_SWLOCK3_SWLOCK124_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK125_Pos    (29U)
#define BSEC_SWLOCK3_SWLOCK125_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK125_Pos)    /*!< 0x20000000 */
#define BSEC_SWLOCK3_SWLOCK125        BSEC_SWLOCK3_SWLOCK125_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK126_Pos    (30U)
#define BSEC_SWLOCK3_SWLOCK126_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK126_Pos)    /*!< 0x40000000 */
#define BSEC_SWLOCK3_SWLOCK126        BSEC_SWLOCK3_SWLOCK126_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK3_SWLOCK127_Pos    (31U)
#define BSEC_SWLOCK3_SWLOCK127_Msk    (0x1U << BSEC_SWLOCK3_SWLOCK127_Pos)    /*!< 0x80000000 */
#define BSEC_SWLOCK3_SWLOCK127        BSEC_SWLOCK3_SWLOCK127_Msk              /*!< sticky write lock for shadow register y (y=96 to 127)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK4 register  *****************/
#define BSEC_SWLOCK4_SWLOCK128_Pos    (0U)
#define BSEC_SWLOCK4_SWLOCK128_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK128_Pos)    /*!< 0x00000001 */
#define BSEC_SWLOCK4_SWLOCK128        BSEC_SWLOCK4_SWLOCK128_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK129_Pos    (1U)
#define BSEC_SWLOCK4_SWLOCK129_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK129_Pos)    /*!< 0x00000002 */
#define BSEC_SWLOCK4_SWLOCK129        BSEC_SWLOCK4_SWLOCK129_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK130_Pos    (2U)
#define BSEC_SWLOCK4_SWLOCK130_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK130_Pos)    /*!< 0x00000004 */
#define BSEC_SWLOCK4_SWLOCK130        BSEC_SWLOCK4_SWLOCK130_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK131_Pos    (3U)
#define BSEC_SWLOCK4_SWLOCK131_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK131_Pos)    /*!< 0x00000008 */
#define BSEC_SWLOCK4_SWLOCK131        BSEC_SWLOCK4_SWLOCK131_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK132_Pos    (4U)
#define BSEC_SWLOCK4_SWLOCK132_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK132_Pos)    /*!< 0x00000010 */
#define BSEC_SWLOCK4_SWLOCK132        BSEC_SWLOCK4_SWLOCK132_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK133_Pos    (5U)
#define BSEC_SWLOCK4_SWLOCK133_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK133_Pos)    /*!< 0x00000020 */
#define BSEC_SWLOCK4_SWLOCK133        BSEC_SWLOCK4_SWLOCK133_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK134_Pos    (6U)
#define BSEC_SWLOCK4_SWLOCK134_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK134_Pos)    /*!< 0x00000040 */
#define BSEC_SWLOCK4_SWLOCK134        BSEC_SWLOCK4_SWLOCK134_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK135_Pos    (7U)
#define BSEC_SWLOCK4_SWLOCK135_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK135_Pos)    /*!< 0x00000080 */
#define BSEC_SWLOCK4_SWLOCK135        BSEC_SWLOCK4_SWLOCK135_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK136_Pos    (8U)
#define BSEC_SWLOCK4_SWLOCK136_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK136_Pos)    /*!< 0x00000100 */
#define BSEC_SWLOCK4_SWLOCK136        BSEC_SWLOCK4_SWLOCK136_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK137_Pos    (9U)
#define BSEC_SWLOCK4_SWLOCK137_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK137_Pos)    /*!< 0x00000200 */
#define BSEC_SWLOCK4_SWLOCK137        BSEC_SWLOCK4_SWLOCK137_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK138_Pos    (10U)
#define BSEC_SWLOCK4_SWLOCK138_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK138_Pos)    /*!< 0x00000400 */
#define BSEC_SWLOCK4_SWLOCK138        BSEC_SWLOCK4_SWLOCK138_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK139_Pos    (11U)
#define BSEC_SWLOCK4_SWLOCK139_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK139_Pos)    /*!< 0x00000800 */
#define BSEC_SWLOCK4_SWLOCK139        BSEC_SWLOCK4_SWLOCK139_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK140_Pos    (12U)
#define BSEC_SWLOCK4_SWLOCK140_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK140_Pos)    /*!< 0x00001000 */
#define BSEC_SWLOCK4_SWLOCK140        BSEC_SWLOCK4_SWLOCK140_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK141_Pos    (13U)
#define BSEC_SWLOCK4_SWLOCK141_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK141_Pos)    /*!< 0x00002000 */
#define BSEC_SWLOCK4_SWLOCK141        BSEC_SWLOCK4_SWLOCK141_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK142_Pos    (14U)
#define BSEC_SWLOCK4_SWLOCK142_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK142_Pos)    /*!< 0x00004000 */
#define BSEC_SWLOCK4_SWLOCK142        BSEC_SWLOCK4_SWLOCK142_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK143_Pos    (15U)
#define BSEC_SWLOCK4_SWLOCK143_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK143_Pos)    /*!< 0x00008000 */
#define BSEC_SWLOCK4_SWLOCK143        BSEC_SWLOCK4_SWLOCK143_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK144_Pos    (16U)
#define BSEC_SWLOCK4_SWLOCK144_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK144_Pos)    /*!< 0x00010000 */
#define BSEC_SWLOCK4_SWLOCK144        BSEC_SWLOCK4_SWLOCK144_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK145_Pos    (17U)
#define BSEC_SWLOCK4_SWLOCK145_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK145_Pos)    /*!< 0x00020000 */
#define BSEC_SWLOCK4_SWLOCK145        BSEC_SWLOCK4_SWLOCK145_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK146_Pos    (18U)
#define BSEC_SWLOCK4_SWLOCK146_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK146_Pos)    /*!< 0x00040000 */
#define BSEC_SWLOCK4_SWLOCK146        BSEC_SWLOCK4_SWLOCK146_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK147_Pos    (19U)
#define BSEC_SWLOCK4_SWLOCK147_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK147_Pos)    /*!< 0x00080000 */
#define BSEC_SWLOCK4_SWLOCK147        BSEC_SWLOCK4_SWLOCK147_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK148_Pos    (20U)
#define BSEC_SWLOCK4_SWLOCK148_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK148_Pos)    /*!< 0x00100000 */
#define BSEC_SWLOCK4_SWLOCK148        BSEC_SWLOCK4_SWLOCK148_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK149_Pos    (21U)
#define BSEC_SWLOCK4_SWLOCK149_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK149_Pos)    /*!< 0x00200000 */
#define BSEC_SWLOCK4_SWLOCK149        BSEC_SWLOCK4_SWLOCK149_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK150_Pos    (22U)
#define BSEC_SWLOCK4_SWLOCK150_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK150_Pos)    /*!< 0x00400000 */
#define BSEC_SWLOCK4_SWLOCK150        BSEC_SWLOCK4_SWLOCK150_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK151_Pos    (23U)
#define BSEC_SWLOCK4_SWLOCK151_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK151_Pos)    /*!< 0x00800000 */
#define BSEC_SWLOCK4_SWLOCK151        BSEC_SWLOCK4_SWLOCK151_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK152_Pos    (24U)
#define BSEC_SWLOCK4_SWLOCK152_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK152_Pos)    /*!< 0x01000000 */
#define BSEC_SWLOCK4_SWLOCK152        BSEC_SWLOCK4_SWLOCK152_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK153_Pos    (25U)
#define BSEC_SWLOCK4_SWLOCK153_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK153_Pos)    /*!< 0x02000000 */
#define BSEC_SWLOCK4_SWLOCK153        BSEC_SWLOCK4_SWLOCK153_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK154_Pos    (26U)
#define BSEC_SWLOCK4_SWLOCK154_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK154_Pos)    /*!< 0x04000000 */
#define BSEC_SWLOCK4_SWLOCK154        BSEC_SWLOCK4_SWLOCK154_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK155_Pos    (27U)
#define BSEC_SWLOCK4_SWLOCK155_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK155_Pos)    /*!< 0x08000000 */
#define BSEC_SWLOCK4_SWLOCK155        BSEC_SWLOCK4_SWLOCK155_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK156_Pos    (28U)
#define BSEC_SWLOCK4_SWLOCK156_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK156_Pos)    /*!< 0x10000000 */
#define BSEC_SWLOCK4_SWLOCK156        BSEC_SWLOCK4_SWLOCK156_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK157_Pos    (29U)
#define BSEC_SWLOCK4_SWLOCK157_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK157_Pos)    /*!< 0x20000000 */
#define BSEC_SWLOCK4_SWLOCK157        BSEC_SWLOCK4_SWLOCK157_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK158_Pos    (30U)
#define BSEC_SWLOCK4_SWLOCK158_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK158_Pos)    /*!< 0x40000000 */
#define BSEC_SWLOCK4_SWLOCK158        BSEC_SWLOCK4_SWLOCK158_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK4_SWLOCK159_Pos    (31U)
#define BSEC_SWLOCK4_SWLOCK159_Msk    (0x1U << BSEC_SWLOCK4_SWLOCK159_Pos)    /*!< 0x80000000 */
#define BSEC_SWLOCK4_SWLOCK159        BSEC_SWLOCK4_SWLOCK159_Msk              /*!< sticky write lock for shadow register y (y=128 to 159)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK5 register  *****************/
#define BSEC_SWLOCK5_SWLOCK160_Pos    (0U)
#define BSEC_SWLOCK5_SWLOCK160_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK160_Pos)    /*!< 0x00000001 */
#define BSEC_SWLOCK5_SWLOCK160        BSEC_SWLOCK5_SWLOCK160_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK161_Pos    (1U)
#define BSEC_SWLOCK5_SWLOCK161_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK161_Pos)    /*!< 0x00000002 */
#define BSEC_SWLOCK5_SWLOCK161        BSEC_SWLOCK5_SWLOCK161_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK162_Pos    (2U)
#define BSEC_SWLOCK5_SWLOCK162_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK162_Pos)    /*!< 0x00000004 */
#define BSEC_SWLOCK5_SWLOCK162        BSEC_SWLOCK5_SWLOCK162_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK163_Pos    (3U)
#define BSEC_SWLOCK5_SWLOCK163_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK163_Pos)    /*!< 0x00000008 */
#define BSEC_SWLOCK5_SWLOCK163        BSEC_SWLOCK5_SWLOCK163_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK164_Pos    (4U)
#define BSEC_SWLOCK5_SWLOCK164_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK164_Pos)    /*!< 0x00000010 */
#define BSEC_SWLOCK5_SWLOCK164        BSEC_SWLOCK5_SWLOCK164_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK165_Pos    (5U)
#define BSEC_SWLOCK5_SWLOCK165_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK165_Pos)    /*!< 0x00000020 */
#define BSEC_SWLOCK5_SWLOCK165        BSEC_SWLOCK5_SWLOCK165_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK166_Pos    (6U)
#define BSEC_SWLOCK5_SWLOCK166_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK166_Pos)    /*!< 0x00000040 */
#define BSEC_SWLOCK5_SWLOCK166        BSEC_SWLOCK5_SWLOCK166_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK167_Pos    (7U)
#define BSEC_SWLOCK5_SWLOCK167_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK167_Pos)    /*!< 0x00000080 */
#define BSEC_SWLOCK5_SWLOCK167        BSEC_SWLOCK5_SWLOCK167_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK168_Pos    (8U)
#define BSEC_SWLOCK5_SWLOCK168_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK168_Pos)    /*!< 0x00000100 */
#define BSEC_SWLOCK5_SWLOCK168        BSEC_SWLOCK5_SWLOCK168_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK169_Pos    (9U)
#define BSEC_SWLOCK5_SWLOCK169_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK169_Pos)    /*!< 0x00000200 */
#define BSEC_SWLOCK5_SWLOCK169        BSEC_SWLOCK5_SWLOCK169_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK170_Pos    (10U)
#define BSEC_SWLOCK5_SWLOCK170_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK170_Pos)    /*!< 0x00000400 */
#define BSEC_SWLOCK5_SWLOCK170        BSEC_SWLOCK5_SWLOCK170_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK171_Pos    (11U)
#define BSEC_SWLOCK5_SWLOCK171_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK171_Pos)    /*!< 0x00000800 */
#define BSEC_SWLOCK5_SWLOCK171        BSEC_SWLOCK5_SWLOCK171_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK172_Pos    (12U)
#define BSEC_SWLOCK5_SWLOCK172_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK172_Pos)    /*!< 0x00001000 */
#define BSEC_SWLOCK5_SWLOCK172        BSEC_SWLOCK5_SWLOCK172_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK173_Pos    (13U)
#define BSEC_SWLOCK5_SWLOCK173_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK173_Pos)    /*!< 0x00002000 */
#define BSEC_SWLOCK5_SWLOCK173        BSEC_SWLOCK5_SWLOCK173_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK174_Pos    (14U)
#define BSEC_SWLOCK5_SWLOCK174_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK174_Pos)    /*!< 0x00004000 */
#define BSEC_SWLOCK5_SWLOCK174        BSEC_SWLOCK5_SWLOCK174_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK175_Pos    (15U)
#define BSEC_SWLOCK5_SWLOCK175_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK175_Pos)    /*!< 0x00008000 */
#define BSEC_SWLOCK5_SWLOCK175        BSEC_SWLOCK5_SWLOCK175_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK176_Pos    (16U)
#define BSEC_SWLOCK5_SWLOCK176_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK176_Pos)    /*!< 0x00010000 */
#define BSEC_SWLOCK5_SWLOCK176        BSEC_SWLOCK5_SWLOCK176_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK177_Pos    (17U)
#define BSEC_SWLOCK5_SWLOCK177_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK177_Pos)    /*!< 0x00020000 */
#define BSEC_SWLOCK5_SWLOCK177        BSEC_SWLOCK5_SWLOCK177_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK178_Pos    (18U)
#define BSEC_SWLOCK5_SWLOCK178_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK178_Pos)    /*!< 0x00040000 */
#define BSEC_SWLOCK5_SWLOCK178        BSEC_SWLOCK5_SWLOCK178_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK179_Pos    (19U)
#define BSEC_SWLOCK5_SWLOCK179_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK179_Pos)    /*!< 0x00080000 */
#define BSEC_SWLOCK5_SWLOCK179        BSEC_SWLOCK5_SWLOCK179_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK180_Pos    (20U)
#define BSEC_SWLOCK5_SWLOCK180_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK180_Pos)    /*!< 0x00100000 */
#define BSEC_SWLOCK5_SWLOCK180        BSEC_SWLOCK5_SWLOCK180_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK181_Pos    (21U)
#define BSEC_SWLOCK5_SWLOCK181_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK181_Pos)    /*!< 0x00200000 */
#define BSEC_SWLOCK5_SWLOCK181        BSEC_SWLOCK5_SWLOCK181_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK182_Pos    (22U)
#define BSEC_SWLOCK5_SWLOCK182_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK182_Pos)    /*!< 0x00400000 */
#define BSEC_SWLOCK5_SWLOCK182        BSEC_SWLOCK5_SWLOCK182_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK183_Pos    (23U)
#define BSEC_SWLOCK5_SWLOCK183_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK183_Pos)    /*!< 0x00800000 */
#define BSEC_SWLOCK5_SWLOCK183        BSEC_SWLOCK5_SWLOCK183_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK184_Pos    (24U)
#define BSEC_SWLOCK5_SWLOCK184_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK184_Pos)    /*!< 0x01000000 */
#define BSEC_SWLOCK5_SWLOCK184        BSEC_SWLOCK5_SWLOCK184_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK185_Pos    (25U)
#define BSEC_SWLOCK5_SWLOCK185_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK185_Pos)    /*!< 0x02000000 */
#define BSEC_SWLOCK5_SWLOCK185        BSEC_SWLOCK5_SWLOCK185_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK186_Pos    (26U)
#define BSEC_SWLOCK5_SWLOCK186_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK186_Pos)    /*!< 0x04000000 */
#define BSEC_SWLOCK5_SWLOCK186        BSEC_SWLOCK5_SWLOCK186_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK187_Pos    (27U)
#define BSEC_SWLOCK5_SWLOCK187_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK187_Pos)    /*!< 0x08000000 */
#define BSEC_SWLOCK5_SWLOCK187        BSEC_SWLOCK5_SWLOCK187_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK188_Pos    (28U)
#define BSEC_SWLOCK5_SWLOCK188_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK188_Pos)    /*!< 0x10000000 */
#define BSEC_SWLOCK5_SWLOCK188        BSEC_SWLOCK5_SWLOCK188_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK189_Pos    (29U)
#define BSEC_SWLOCK5_SWLOCK189_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK189_Pos)    /*!< 0x20000000 */
#define BSEC_SWLOCK5_SWLOCK189        BSEC_SWLOCK5_SWLOCK189_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK190_Pos    (30U)
#define BSEC_SWLOCK5_SWLOCK190_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK190_Pos)    /*!< 0x40000000 */
#define BSEC_SWLOCK5_SWLOCK190        BSEC_SWLOCK5_SWLOCK190_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK5_SWLOCK191_Pos    (31U)
#define BSEC_SWLOCK5_SWLOCK191_Msk    (0x1U << BSEC_SWLOCK5_SWLOCK191_Pos)    /*!< 0x80000000 */
#define BSEC_SWLOCK5_SWLOCK191        BSEC_SWLOCK5_SWLOCK191_Msk              /*!< sticky write lock for shadow register y (y=160 to 191)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK6 register  *****************/
#define BSEC_SWLOCK6_SWLOCK192_Pos    (0U)
#define BSEC_SWLOCK6_SWLOCK192_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK192_Pos)    /*!< 0x00000001 */
#define BSEC_SWLOCK6_SWLOCK192        BSEC_SWLOCK6_SWLOCK192_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK193_Pos    (1U)
#define BSEC_SWLOCK6_SWLOCK193_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK193_Pos)    /*!< 0x00000002 */
#define BSEC_SWLOCK6_SWLOCK193        BSEC_SWLOCK6_SWLOCK193_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK194_Pos    (2U)
#define BSEC_SWLOCK6_SWLOCK194_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK194_Pos)    /*!< 0x00000004 */
#define BSEC_SWLOCK6_SWLOCK194        BSEC_SWLOCK6_SWLOCK194_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK195_Pos    (3U)
#define BSEC_SWLOCK6_SWLOCK195_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK195_Pos)    /*!< 0x00000008 */
#define BSEC_SWLOCK6_SWLOCK195        BSEC_SWLOCK6_SWLOCK195_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK196_Pos    (4U)
#define BSEC_SWLOCK6_SWLOCK196_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK196_Pos)    /*!< 0x00000010 */
#define BSEC_SWLOCK6_SWLOCK196        BSEC_SWLOCK6_SWLOCK196_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK197_Pos    (5U)
#define BSEC_SWLOCK6_SWLOCK197_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK197_Pos)    /*!< 0x00000020 */
#define BSEC_SWLOCK6_SWLOCK197        BSEC_SWLOCK6_SWLOCK197_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK198_Pos    (6U)
#define BSEC_SWLOCK6_SWLOCK198_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK198_Pos)    /*!< 0x00000040 */
#define BSEC_SWLOCK6_SWLOCK198        BSEC_SWLOCK6_SWLOCK198_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK199_Pos    (7U)
#define BSEC_SWLOCK6_SWLOCK199_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK199_Pos)    /*!< 0x00000080 */
#define BSEC_SWLOCK6_SWLOCK199        BSEC_SWLOCK6_SWLOCK199_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK200_Pos    (8U)
#define BSEC_SWLOCK6_SWLOCK200_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK200_Pos)    /*!< 0x00000100 */
#define BSEC_SWLOCK6_SWLOCK200        BSEC_SWLOCK6_SWLOCK200_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK201_Pos    (9U)
#define BSEC_SWLOCK6_SWLOCK201_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK201_Pos)    /*!< 0x00000200 */
#define BSEC_SWLOCK6_SWLOCK201        BSEC_SWLOCK6_SWLOCK201_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK202_Pos    (10U)
#define BSEC_SWLOCK6_SWLOCK202_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK202_Pos)    /*!< 0x00000400 */
#define BSEC_SWLOCK6_SWLOCK202        BSEC_SWLOCK6_SWLOCK202_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK203_Pos    (11U)
#define BSEC_SWLOCK6_SWLOCK203_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK203_Pos)    /*!< 0x00000800 */
#define BSEC_SWLOCK6_SWLOCK203        BSEC_SWLOCK6_SWLOCK203_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK204_Pos    (12U)
#define BSEC_SWLOCK6_SWLOCK204_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK204_Pos)    /*!< 0x00001000 */
#define BSEC_SWLOCK6_SWLOCK204        BSEC_SWLOCK6_SWLOCK204_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK205_Pos    (13U)
#define BSEC_SWLOCK6_SWLOCK205_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK205_Pos)    /*!< 0x00002000 */
#define BSEC_SWLOCK6_SWLOCK205        BSEC_SWLOCK6_SWLOCK205_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK206_Pos    (14U)
#define BSEC_SWLOCK6_SWLOCK206_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK206_Pos)    /*!< 0x00004000 */
#define BSEC_SWLOCK6_SWLOCK206        BSEC_SWLOCK6_SWLOCK206_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK207_Pos    (15U)
#define BSEC_SWLOCK6_SWLOCK207_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK207_Pos)    /*!< 0x00008000 */
#define BSEC_SWLOCK6_SWLOCK207        BSEC_SWLOCK6_SWLOCK207_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK208_Pos    (16U)
#define BSEC_SWLOCK6_SWLOCK208_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK208_Pos)    /*!< 0x00010000 */
#define BSEC_SWLOCK6_SWLOCK208        BSEC_SWLOCK6_SWLOCK208_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK209_Pos    (17U)
#define BSEC_SWLOCK6_SWLOCK209_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK209_Pos)    /*!< 0x00020000 */
#define BSEC_SWLOCK6_SWLOCK209        BSEC_SWLOCK6_SWLOCK209_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK210_Pos    (18U)
#define BSEC_SWLOCK6_SWLOCK210_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK210_Pos)    /*!< 0x00040000 */
#define BSEC_SWLOCK6_SWLOCK210        BSEC_SWLOCK6_SWLOCK210_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK211_Pos    (19U)
#define BSEC_SWLOCK6_SWLOCK211_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK211_Pos)    /*!< 0x00080000 */
#define BSEC_SWLOCK6_SWLOCK211        BSEC_SWLOCK6_SWLOCK211_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK212_Pos    (20U)
#define BSEC_SWLOCK6_SWLOCK212_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK212_Pos)    /*!< 0x00100000 */
#define BSEC_SWLOCK6_SWLOCK212        BSEC_SWLOCK6_SWLOCK212_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK213_Pos    (21U)
#define BSEC_SWLOCK6_SWLOCK213_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK213_Pos)    /*!< 0x00200000 */
#define BSEC_SWLOCK6_SWLOCK213        BSEC_SWLOCK6_SWLOCK213_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK214_Pos    (22U)
#define BSEC_SWLOCK6_SWLOCK214_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK214_Pos)    /*!< 0x00400000 */
#define BSEC_SWLOCK6_SWLOCK214        BSEC_SWLOCK6_SWLOCK214_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK215_Pos    (23U)
#define BSEC_SWLOCK6_SWLOCK215_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK215_Pos)    /*!< 0x00800000 */
#define BSEC_SWLOCK6_SWLOCK215        BSEC_SWLOCK6_SWLOCK215_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK216_Pos    (24U)
#define BSEC_SWLOCK6_SWLOCK216_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK216_Pos)    /*!< 0x01000000 */
#define BSEC_SWLOCK6_SWLOCK216        BSEC_SWLOCK6_SWLOCK216_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK217_Pos    (25U)
#define BSEC_SWLOCK6_SWLOCK217_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK217_Pos)    /*!< 0x02000000 */
#define BSEC_SWLOCK6_SWLOCK217        BSEC_SWLOCK6_SWLOCK217_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK218_Pos    (26U)
#define BSEC_SWLOCK6_SWLOCK218_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK218_Pos)    /*!< 0x04000000 */
#define BSEC_SWLOCK6_SWLOCK218        BSEC_SWLOCK6_SWLOCK218_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK219_Pos    (27U)
#define BSEC_SWLOCK6_SWLOCK219_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK219_Pos)    /*!< 0x08000000 */
#define BSEC_SWLOCK6_SWLOCK219        BSEC_SWLOCK6_SWLOCK219_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK220_Pos    (28U)
#define BSEC_SWLOCK6_SWLOCK220_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK220_Pos)    /*!< 0x10000000 */
#define BSEC_SWLOCK6_SWLOCK220        BSEC_SWLOCK6_SWLOCK220_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK221_Pos    (29U)
#define BSEC_SWLOCK6_SWLOCK221_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK221_Pos)    /*!< 0x20000000 */
#define BSEC_SWLOCK6_SWLOCK221        BSEC_SWLOCK6_SWLOCK221_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK222_Pos    (30U)
#define BSEC_SWLOCK6_SWLOCK222_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK222_Pos)    /*!< 0x40000000 */
#define BSEC_SWLOCK6_SWLOCK222        BSEC_SWLOCK6_SWLOCK222_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK6_SWLOCK223_Pos    (31U)
#define BSEC_SWLOCK6_SWLOCK223_Msk    (0x1U << BSEC_SWLOCK6_SWLOCK223_Pos)    /*!< 0x80000000 */
#define BSEC_SWLOCK6_SWLOCK223        BSEC_SWLOCK6_SWLOCK223_Msk              /*!< sticky write lock for word y (y=192 to 223)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK7 register  *****************/
#define BSEC_SWLOCK7_SWLOCK224_Pos    (0U)
#define BSEC_SWLOCK7_SWLOCK224_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK224_Pos)    /*!< 0x00000001 */
#define BSEC_SWLOCK7_SWLOCK224        BSEC_SWLOCK7_SWLOCK224_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK225_Pos    (1U)
#define BSEC_SWLOCK7_SWLOCK225_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK225_Pos)    /*!< 0x00000002 */
#define BSEC_SWLOCK7_SWLOCK225        BSEC_SWLOCK7_SWLOCK225_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK226_Pos    (2U)
#define BSEC_SWLOCK7_SWLOCK226_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK226_Pos)    /*!< 0x00000004 */
#define BSEC_SWLOCK7_SWLOCK226        BSEC_SWLOCK7_SWLOCK226_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK227_Pos    (3U)
#define BSEC_SWLOCK7_SWLOCK227_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK227_Pos)    /*!< 0x00000008 */
#define BSEC_SWLOCK7_SWLOCK227        BSEC_SWLOCK7_SWLOCK227_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK228_Pos    (4U)
#define BSEC_SWLOCK7_SWLOCK228_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK228_Pos)    /*!< 0x00000010 */
#define BSEC_SWLOCK7_SWLOCK228        BSEC_SWLOCK7_SWLOCK228_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK229_Pos    (5U)
#define BSEC_SWLOCK7_SWLOCK229_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK229_Pos)    /*!< 0x00000020 */
#define BSEC_SWLOCK7_SWLOCK229        BSEC_SWLOCK7_SWLOCK229_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK230_Pos    (6U)
#define BSEC_SWLOCK7_SWLOCK230_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK230_Pos)    /*!< 0x00000040 */
#define BSEC_SWLOCK7_SWLOCK230        BSEC_SWLOCK7_SWLOCK230_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK231_Pos    (7U)
#define BSEC_SWLOCK7_SWLOCK231_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK231_Pos)    /*!< 0x00000080 */
#define BSEC_SWLOCK7_SWLOCK231        BSEC_SWLOCK7_SWLOCK231_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK232_Pos    (8U)
#define BSEC_SWLOCK7_SWLOCK232_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK232_Pos)    /*!< 0x00000100 */
#define BSEC_SWLOCK7_SWLOCK232        BSEC_SWLOCK7_SWLOCK232_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK233_Pos    (9U)
#define BSEC_SWLOCK7_SWLOCK233_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK233_Pos)    /*!< 0x00000200 */
#define BSEC_SWLOCK7_SWLOCK233        BSEC_SWLOCK7_SWLOCK233_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK234_Pos    (10U)
#define BSEC_SWLOCK7_SWLOCK234_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK234_Pos)    /*!< 0x00000400 */
#define BSEC_SWLOCK7_SWLOCK234        BSEC_SWLOCK7_SWLOCK234_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK235_Pos    (11U)
#define BSEC_SWLOCK7_SWLOCK235_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK235_Pos)    /*!< 0x00000800 */
#define BSEC_SWLOCK7_SWLOCK235        BSEC_SWLOCK7_SWLOCK235_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK236_Pos    (12U)
#define BSEC_SWLOCK7_SWLOCK236_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK236_Pos)    /*!< 0x00001000 */
#define BSEC_SWLOCK7_SWLOCK236        BSEC_SWLOCK7_SWLOCK236_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK237_Pos    (13U)
#define BSEC_SWLOCK7_SWLOCK237_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK237_Pos)    /*!< 0x00002000 */
#define BSEC_SWLOCK7_SWLOCK237        BSEC_SWLOCK7_SWLOCK237_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK238_Pos    (14U)
#define BSEC_SWLOCK7_SWLOCK238_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK238_Pos)    /*!< 0x00004000 */
#define BSEC_SWLOCK7_SWLOCK238        BSEC_SWLOCK7_SWLOCK238_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK239_Pos    (15U)
#define BSEC_SWLOCK7_SWLOCK239_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK239_Pos)    /*!< 0x00008000 */
#define BSEC_SWLOCK7_SWLOCK239        BSEC_SWLOCK7_SWLOCK239_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK240_Pos    (16U)
#define BSEC_SWLOCK7_SWLOCK240_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK240_Pos)    /*!< 0x00010000 */
#define BSEC_SWLOCK7_SWLOCK240        BSEC_SWLOCK7_SWLOCK240_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK241_Pos    (17U)
#define BSEC_SWLOCK7_SWLOCK241_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK241_Pos)    /*!< 0x00020000 */
#define BSEC_SWLOCK7_SWLOCK241        BSEC_SWLOCK7_SWLOCK241_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK242_Pos    (18U)
#define BSEC_SWLOCK7_SWLOCK242_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK242_Pos)    /*!< 0x00040000 */
#define BSEC_SWLOCK7_SWLOCK242        BSEC_SWLOCK7_SWLOCK242_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK243_Pos    (19U)
#define BSEC_SWLOCK7_SWLOCK243_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK243_Pos)    /*!< 0x00080000 */
#define BSEC_SWLOCK7_SWLOCK243        BSEC_SWLOCK7_SWLOCK243_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK244_Pos    (20U)
#define BSEC_SWLOCK7_SWLOCK244_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK244_Pos)    /*!< 0x00100000 */
#define BSEC_SWLOCK7_SWLOCK244        BSEC_SWLOCK7_SWLOCK244_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK245_Pos    (21U)
#define BSEC_SWLOCK7_SWLOCK245_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK245_Pos)    /*!< 0x00200000 */
#define BSEC_SWLOCK7_SWLOCK245        BSEC_SWLOCK7_SWLOCK245_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK246_Pos    (22U)
#define BSEC_SWLOCK7_SWLOCK246_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK246_Pos)    /*!< 0x00400000 */
#define BSEC_SWLOCK7_SWLOCK246        BSEC_SWLOCK7_SWLOCK246_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK247_Pos    (23U)
#define BSEC_SWLOCK7_SWLOCK247_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK247_Pos)    /*!< 0x00800000 */
#define BSEC_SWLOCK7_SWLOCK247        BSEC_SWLOCK7_SWLOCK247_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK248_Pos    (24U)
#define BSEC_SWLOCK7_SWLOCK248_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK248_Pos)    /*!< 0x01000000 */
#define BSEC_SWLOCK7_SWLOCK248        BSEC_SWLOCK7_SWLOCK248_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK249_Pos    (25U)
#define BSEC_SWLOCK7_SWLOCK249_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK249_Pos)    /*!< 0x02000000 */
#define BSEC_SWLOCK7_SWLOCK249        BSEC_SWLOCK7_SWLOCK249_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK250_Pos    (26U)
#define BSEC_SWLOCK7_SWLOCK250_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK250_Pos)    /*!< 0x04000000 */
#define BSEC_SWLOCK7_SWLOCK250        BSEC_SWLOCK7_SWLOCK250_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK251_Pos    (27U)
#define BSEC_SWLOCK7_SWLOCK251_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK251_Pos)    /*!< 0x08000000 */
#define BSEC_SWLOCK7_SWLOCK251        BSEC_SWLOCK7_SWLOCK251_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK252_Pos    (28U)
#define BSEC_SWLOCK7_SWLOCK252_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK252_Pos)    /*!< 0x10000000 */
#define BSEC_SWLOCK7_SWLOCK252        BSEC_SWLOCK7_SWLOCK252_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK253_Pos    (29U)
#define BSEC_SWLOCK7_SWLOCK253_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK253_Pos)    /*!< 0x20000000 */
#define BSEC_SWLOCK7_SWLOCK253        BSEC_SWLOCK7_SWLOCK253_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK254_Pos    (30U)
#define BSEC_SWLOCK7_SWLOCK254_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK254_Pos)    /*!< 0x40000000 */
#define BSEC_SWLOCK7_SWLOCK254        BSEC_SWLOCK7_SWLOCK254_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK7_SWLOCK255_Pos    (31U)
#define BSEC_SWLOCK7_SWLOCK255_Msk    (0x1U << BSEC_SWLOCK7_SWLOCK255_Pos)    /*!< 0x80000000 */
#define BSEC_SWLOCK7_SWLOCK255        BSEC_SWLOCK7_SWLOCK255_Msk              /*!< sticky write lock for word y (y=224 to 255)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK8 register  *****************/
#define BSEC_SWLOCK8_SWLOCK256_Pos    (0U)
#define BSEC_SWLOCK8_SWLOCK256_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK256_Pos)    /*!< 0x00000001 */
#define BSEC_SWLOCK8_SWLOCK256        BSEC_SWLOCK8_SWLOCK256_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK257_Pos    (1U)
#define BSEC_SWLOCK8_SWLOCK257_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK257_Pos)    /*!< 0x00000002 */
#define BSEC_SWLOCK8_SWLOCK257        BSEC_SWLOCK8_SWLOCK257_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK258_Pos    (2U)
#define BSEC_SWLOCK8_SWLOCK258_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK258_Pos)    /*!< 0x00000004 */
#define BSEC_SWLOCK8_SWLOCK258        BSEC_SWLOCK8_SWLOCK258_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK259_Pos    (3U)
#define BSEC_SWLOCK8_SWLOCK259_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK259_Pos)    /*!< 0x00000008 */
#define BSEC_SWLOCK8_SWLOCK259        BSEC_SWLOCK8_SWLOCK259_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK260_Pos    (4U)
#define BSEC_SWLOCK8_SWLOCK260_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK260_Pos)    /*!< 0x00000010 */
#define BSEC_SWLOCK8_SWLOCK260        BSEC_SWLOCK8_SWLOCK260_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK261_Pos    (5U)
#define BSEC_SWLOCK8_SWLOCK261_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK261_Pos)    /*!< 0x00000020 */
#define BSEC_SWLOCK8_SWLOCK261        BSEC_SWLOCK8_SWLOCK261_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK262_Pos    (6U)
#define BSEC_SWLOCK8_SWLOCK262_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK262_Pos)    /*!< 0x00000040 */
#define BSEC_SWLOCK8_SWLOCK262        BSEC_SWLOCK8_SWLOCK262_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK263_Pos    (7U)
#define BSEC_SWLOCK8_SWLOCK263_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK263_Pos)    /*!< 0x00000080 */
#define BSEC_SWLOCK8_SWLOCK263        BSEC_SWLOCK8_SWLOCK263_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK264_Pos    (8U)
#define BSEC_SWLOCK8_SWLOCK264_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK264_Pos)    /*!< 0x00000100 */
#define BSEC_SWLOCK8_SWLOCK264        BSEC_SWLOCK8_SWLOCK264_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK265_Pos    (9U)
#define BSEC_SWLOCK8_SWLOCK265_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK265_Pos)    /*!< 0x00000200 */
#define BSEC_SWLOCK8_SWLOCK265        BSEC_SWLOCK8_SWLOCK265_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK266_Pos    (10U)
#define BSEC_SWLOCK8_SWLOCK266_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK266_Pos)    /*!< 0x00000400 */
#define BSEC_SWLOCK8_SWLOCK266        BSEC_SWLOCK8_SWLOCK266_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK267_Pos    (11U)
#define BSEC_SWLOCK8_SWLOCK267_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK267_Pos)    /*!< 0x00000800 */
#define BSEC_SWLOCK8_SWLOCK267        BSEC_SWLOCK8_SWLOCK267_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK268_Pos    (12U)
#define BSEC_SWLOCK8_SWLOCK268_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK268_Pos)    /*!< 0x00001000 */
#define BSEC_SWLOCK8_SWLOCK268        BSEC_SWLOCK8_SWLOCK268_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK269_Pos    (13U)
#define BSEC_SWLOCK8_SWLOCK269_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK269_Pos)    /*!< 0x00002000 */
#define BSEC_SWLOCK8_SWLOCK269        BSEC_SWLOCK8_SWLOCK269_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK270_Pos    (14U)
#define BSEC_SWLOCK8_SWLOCK270_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK270_Pos)    /*!< 0x00004000 */
#define BSEC_SWLOCK8_SWLOCK270        BSEC_SWLOCK8_SWLOCK270_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK271_Pos    (15U)
#define BSEC_SWLOCK8_SWLOCK271_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK271_Pos)    /*!< 0x00008000 */
#define BSEC_SWLOCK8_SWLOCK271        BSEC_SWLOCK8_SWLOCK271_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK272_Pos    (16U)
#define BSEC_SWLOCK8_SWLOCK272_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK272_Pos)    /*!< 0x00010000 */
#define BSEC_SWLOCK8_SWLOCK272        BSEC_SWLOCK8_SWLOCK272_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK273_Pos    (17U)
#define BSEC_SWLOCK8_SWLOCK273_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK273_Pos)    /*!< 0x00020000 */
#define BSEC_SWLOCK8_SWLOCK273        BSEC_SWLOCK8_SWLOCK273_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK274_Pos    (18U)
#define BSEC_SWLOCK8_SWLOCK274_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK274_Pos)    /*!< 0x00040000 */
#define BSEC_SWLOCK8_SWLOCK274        BSEC_SWLOCK8_SWLOCK274_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK275_Pos    (19U)
#define BSEC_SWLOCK8_SWLOCK275_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK275_Pos)    /*!< 0x00080000 */
#define BSEC_SWLOCK8_SWLOCK275        BSEC_SWLOCK8_SWLOCK275_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK276_Pos    (20U)
#define BSEC_SWLOCK8_SWLOCK276_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK276_Pos)    /*!< 0x00100000 */
#define BSEC_SWLOCK8_SWLOCK276        BSEC_SWLOCK8_SWLOCK276_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK277_Pos    (21U)
#define BSEC_SWLOCK8_SWLOCK277_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK277_Pos)    /*!< 0x00200000 */
#define BSEC_SWLOCK8_SWLOCK277        BSEC_SWLOCK8_SWLOCK277_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK278_Pos    (22U)
#define BSEC_SWLOCK8_SWLOCK278_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK278_Pos)    /*!< 0x00400000 */
#define BSEC_SWLOCK8_SWLOCK278        BSEC_SWLOCK8_SWLOCK278_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK279_Pos    (23U)
#define BSEC_SWLOCK8_SWLOCK279_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK279_Pos)    /*!< 0x00800000 */
#define BSEC_SWLOCK8_SWLOCK279        BSEC_SWLOCK8_SWLOCK279_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK280_Pos    (24U)
#define BSEC_SWLOCK8_SWLOCK280_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK280_Pos)    /*!< 0x01000000 */
#define BSEC_SWLOCK8_SWLOCK280        BSEC_SWLOCK8_SWLOCK280_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK281_Pos    (25U)
#define BSEC_SWLOCK8_SWLOCK281_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK281_Pos)    /*!< 0x02000000 */
#define BSEC_SWLOCK8_SWLOCK281        BSEC_SWLOCK8_SWLOCK281_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK282_Pos    (26U)
#define BSEC_SWLOCK8_SWLOCK282_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK282_Pos)    /*!< 0x04000000 */
#define BSEC_SWLOCK8_SWLOCK282        BSEC_SWLOCK8_SWLOCK282_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK283_Pos    (27U)
#define BSEC_SWLOCK8_SWLOCK283_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK283_Pos)    /*!< 0x08000000 */
#define BSEC_SWLOCK8_SWLOCK283        BSEC_SWLOCK8_SWLOCK283_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK284_Pos    (28U)
#define BSEC_SWLOCK8_SWLOCK284_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK284_Pos)    /*!< 0x10000000 */
#define BSEC_SWLOCK8_SWLOCK284        BSEC_SWLOCK8_SWLOCK284_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK285_Pos    (29U)
#define BSEC_SWLOCK8_SWLOCK285_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK285_Pos)    /*!< 0x20000000 */
#define BSEC_SWLOCK8_SWLOCK285        BSEC_SWLOCK8_SWLOCK285_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK286_Pos    (30U)
#define BSEC_SWLOCK8_SWLOCK286_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK286_Pos)    /*!< 0x40000000 */
#define BSEC_SWLOCK8_SWLOCK286        BSEC_SWLOCK8_SWLOCK286_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK8_SWLOCK287_Pos    (31U)
#define BSEC_SWLOCK8_SWLOCK287_Msk    (0x1U << BSEC_SWLOCK8_SWLOCK287_Pos)    /*!< 0x80000000 */
#define BSEC_SWLOCK8_SWLOCK287        BSEC_SWLOCK8_SWLOCK287_Msk              /*!< sticky write lock for word y (y=256 to 287)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SWLOCK9 register  *****************/
#define BSEC_SWLOCK9_SWLOCK288_Pos    (0U)
#define BSEC_SWLOCK9_SWLOCK288_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK288_Pos)    /*!< 0x00000001 */
#define BSEC_SWLOCK9_SWLOCK288        BSEC_SWLOCK9_SWLOCK288_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK289_Pos    (1U)
#define BSEC_SWLOCK9_SWLOCK289_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK289_Pos)    /*!< 0x00000002 */
#define BSEC_SWLOCK9_SWLOCK289        BSEC_SWLOCK9_SWLOCK289_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK290_Pos    (2U)
#define BSEC_SWLOCK9_SWLOCK290_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK290_Pos)    /*!< 0x00000004 */
#define BSEC_SWLOCK9_SWLOCK290        BSEC_SWLOCK9_SWLOCK290_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK291_Pos    (3U)
#define BSEC_SWLOCK9_SWLOCK291_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK291_Pos)    /*!< 0x00000008 */
#define BSEC_SWLOCK9_SWLOCK291        BSEC_SWLOCK9_SWLOCK291_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK292_Pos    (4U)
#define BSEC_SWLOCK9_SWLOCK292_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK292_Pos)    /*!< 0x00000010 */
#define BSEC_SWLOCK9_SWLOCK292        BSEC_SWLOCK9_SWLOCK292_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK293_Pos    (5U)
#define BSEC_SWLOCK9_SWLOCK293_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK293_Pos)    /*!< 0x00000020 */
#define BSEC_SWLOCK9_SWLOCK293        BSEC_SWLOCK9_SWLOCK293_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK294_Pos    (6U)
#define BSEC_SWLOCK9_SWLOCK294_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK294_Pos)    /*!< 0x00000040 */
#define BSEC_SWLOCK9_SWLOCK294        BSEC_SWLOCK9_SWLOCK294_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK295_Pos    (7U)
#define BSEC_SWLOCK9_SWLOCK295_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK295_Pos)    /*!< 0x00000080 */
#define BSEC_SWLOCK9_SWLOCK295        BSEC_SWLOCK9_SWLOCK295_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK296_Pos    (8U)
#define BSEC_SWLOCK9_SWLOCK296_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK296_Pos)    /*!< 0x00000100 */
#define BSEC_SWLOCK9_SWLOCK296        BSEC_SWLOCK9_SWLOCK296_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK297_Pos    (9U)
#define BSEC_SWLOCK9_SWLOCK297_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK297_Pos)    /*!< 0x00000200 */
#define BSEC_SWLOCK9_SWLOCK297        BSEC_SWLOCK9_SWLOCK297_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK298_Pos    (10U)
#define BSEC_SWLOCK9_SWLOCK298_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK298_Pos)    /*!< 0x00000400 */
#define BSEC_SWLOCK9_SWLOCK298        BSEC_SWLOCK9_SWLOCK298_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK299_Pos    (11U)
#define BSEC_SWLOCK9_SWLOCK299_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK299_Pos)    /*!< 0x00000800 */
#define BSEC_SWLOCK9_SWLOCK299        BSEC_SWLOCK9_SWLOCK299_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK300_Pos    (12U)
#define BSEC_SWLOCK9_SWLOCK300_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK300_Pos)    /*!< 0x00001000 */
#define BSEC_SWLOCK9_SWLOCK300        BSEC_SWLOCK9_SWLOCK300_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK301_Pos    (13U)
#define BSEC_SWLOCK9_SWLOCK301_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK301_Pos)    /*!< 0x00002000 */
#define BSEC_SWLOCK9_SWLOCK301        BSEC_SWLOCK9_SWLOCK301_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK302_Pos    (14U)
#define BSEC_SWLOCK9_SWLOCK302_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK302_Pos)    /*!< 0x00004000 */
#define BSEC_SWLOCK9_SWLOCK302        BSEC_SWLOCK9_SWLOCK302_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK303_Pos    (15U)
#define BSEC_SWLOCK9_SWLOCK303_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK303_Pos)    /*!< 0x00008000 */
#define BSEC_SWLOCK9_SWLOCK303        BSEC_SWLOCK9_SWLOCK303_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK304_Pos    (16U)
#define BSEC_SWLOCK9_SWLOCK304_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK304_Pos)    /*!< 0x00010000 */
#define BSEC_SWLOCK9_SWLOCK304        BSEC_SWLOCK9_SWLOCK304_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK305_Pos    (17U)
#define BSEC_SWLOCK9_SWLOCK305_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK305_Pos)    /*!< 0x00020000 */
#define BSEC_SWLOCK9_SWLOCK305        BSEC_SWLOCK9_SWLOCK305_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK306_Pos    (18U)
#define BSEC_SWLOCK9_SWLOCK306_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK306_Pos)    /*!< 0x00040000 */
#define BSEC_SWLOCK9_SWLOCK306        BSEC_SWLOCK9_SWLOCK306_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK307_Pos    (19U)
#define BSEC_SWLOCK9_SWLOCK307_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK307_Pos)    /*!< 0x00080000 */
#define BSEC_SWLOCK9_SWLOCK307        BSEC_SWLOCK9_SWLOCK307_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK308_Pos    (20U)
#define BSEC_SWLOCK9_SWLOCK308_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK308_Pos)    /*!< 0x00100000 */
#define BSEC_SWLOCK9_SWLOCK308        BSEC_SWLOCK9_SWLOCK308_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK309_Pos    (21U)
#define BSEC_SWLOCK9_SWLOCK309_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK309_Pos)    /*!< 0x00200000 */
#define BSEC_SWLOCK9_SWLOCK309        BSEC_SWLOCK9_SWLOCK309_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK310_Pos    (22U)
#define BSEC_SWLOCK9_SWLOCK310_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK310_Pos)    /*!< 0x00400000 */
#define BSEC_SWLOCK9_SWLOCK310        BSEC_SWLOCK9_SWLOCK310_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK311_Pos    (23U)
#define BSEC_SWLOCK9_SWLOCK311_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK311_Pos)    /*!< 0x00800000 */
#define BSEC_SWLOCK9_SWLOCK311        BSEC_SWLOCK9_SWLOCK311_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK312_Pos    (24U)
#define BSEC_SWLOCK9_SWLOCK312_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK312_Pos)    /*!< 0x01000000 */
#define BSEC_SWLOCK9_SWLOCK312        BSEC_SWLOCK9_SWLOCK312_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK313_Pos    (25U)
#define BSEC_SWLOCK9_SWLOCK313_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK313_Pos)    /*!< 0x02000000 */
#define BSEC_SWLOCK9_SWLOCK313        BSEC_SWLOCK9_SWLOCK313_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK314_Pos    (26U)
#define BSEC_SWLOCK9_SWLOCK314_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK314_Pos)    /*!< 0x04000000 */
#define BSEC_SWLOCK9_SWLOCK314        BSEC_SWLOCK9_SWLOCK314_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK315_Pos    (27U)
#define BSEC_SWLOCK9_SWLOCK315_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK315_Pos)    /*!< 0x08000000 */
#define BSEC_SWLOCK9_SWLOCK315        BSEC_SWLOCK9_SWLOCK315_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK316_Pos    (28U)
#define BSEC_SWLOCK9_SWLOCK316_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK316_Pos)    /*!< 0x10000000 */
#define BSEC_SWLOCK9_SWLOCK316        BSEC_SWLOCK9_SWLOCK316_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK317_Pos    (29U)
#define BSEC_SWLOCK9_SWLOCK317_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK317_Pos)    /*!< 0x20000000 */
#define BSEC_SWLOCK9_SWLOCK317        BSEC_SWLOCK9_SWLOCK317_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK318_Pos    (30U)
#define BSEC_SWLOCK9_SWLOCK318_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK318_Pos)    /*!< 0x40000000 */
#define BSEC_SWLOCK9_SWLOCK318        BSEC_SWLOCK9_SWLOCK318_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK9_SWLOCK319_Pos    (31U)
#define BSEC_SWLOCK9_SWLOCK319_Msk    (0x1U << BSEC_SWLOCK9_SWLOCK319_Pos)    /*!< 0x80000000 */
#define BSEC_SWLOCK9_SWLOCK319        BSEC_SWLOCK9_SWLOCK319_Msk              /*!< sticky write lock for word y (y=288 to 319)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_SWLOCK10 register  *****************/
#define BSEC_SWLOCK10_SWLOCK320_Pos   (0U)
#define BSEC_SWLOCK10_SWLOCK320_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK320_Pos)   /*!< 0x00000001 */
#define BSEC_SWLOCK10_SWLOCK320       BSEC_SWLOCK10_SWLOCK320_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK321_Pos   (1U)
#define BSEC_SWLOCK10_SWLOCK321_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK321_Pos)   /*!< 0x00000002 */
#define BSEC_SWLOCK10_SWLOCK321       BSEC_SWLOCK10_SWLOCK321_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK322_Pos   (2U)
#define BSEC_SWLOCK10_SWLOCK322_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK322_Pos)   /*!< 0x00000004 */
#define BSEC_SWLOCK10_SWLOCK322       BSEC_SWLOCK10_SWLOCK322_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK323_Pos   (3U)
#define BSEC_SWLOCK10_SWLOCK323_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK323_Pos)   /*!< 0x00000008 */
#define BSEC_SWLOCK10_SWLOCK323       BSEC_SWLOCK10_SWLOCK323_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK324_Pos   (4U)
#define BSEC_SWLOCK10_SWLOCK324_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK324_Pos)   /*!< 0x00000010 */
#define BSEC_SWLOCK10_SWLOCK324       BSEC_SWLOCK10_SWLOCK324_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK325_Pos   (5U)
#define BSEC_SWLOCK10_SWLOCK325_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK325_Pos)   /*!< 0x00000020 */
#define BSEC_SWLOCK10_SWLOCK325       BSEC_SWLOCK10_SWLOCK325_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK326_Pos   (6U)
#define BSEC_SWLOCK10_SWLOCK326_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK326_Pos)   /*!< 0x00000040 */
#define BSEC_SWLOCK10_SWLOCK326       BSEC_SWLOCK10_SWLOCK326_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK327_Pos   (7U)
#define BSEC_SWLOCK10_SWLOCK327_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK327_Pos)   /*!< 0x00000080 */
#define BSEC_SWLOCK10_SWLOCK327       BSEC_SWLOCK10_SWLOCK327_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK328_Pos   (8U)
#define BSEC_SWLOCK10_SWLOCK328_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK328_Pos)   /*!< 0x00000100 */
#define BSEC_SWLOCK10_SWLOCK328       BSEC_SWLOCK10_SWLOCK328_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK329_Pos   (9U)
#define BSEC_SWLOCK10_SWLOCK329_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK329_Pos)   /*!< 0x00000200 */
#define BSEC_SWLOCK10_SWLOCK329       BSEC_SWLOCK10_SWLOCK329_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK330_Pos   (10U)
#define BSEC_SWLOCK10_SWLOCK330_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK330_Pos)   /*!< 0x00000400 */
#define BSEC_SWLOCK10_SWLOCK330       BSEC_SWLOCK10_SWLOCK330_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK331_Pos   (11U)
#define BSEC_SWLOCK10_SWLOCK331_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK331_Pos)   /*!< 0x00000800 */
#define BSEC_SWLOCK10_SWLOCK331       BSEC_SWLOCK10_SWLOCK331_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK332_Pos   (12U)
#define BSEC_SWLOCK10_SWLOCK332_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK332_Pos)   /*!< 0x00001000 */
#define BSEC_SWLOCK10_SWLOCK332       BSEC_SWLOCK10_SWLOCK332_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK333_Pos   (13U)
#define BSEC_SWLOCK10_SWLOCK333_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK333_Pos)   /*!< 0x00002000 */
#define BSEC_SWLOCK10_SWLOCK333       BSEC_SWLOCK10_SWLOCK333_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK334_Pos   (14U)
#define BSEC_SWLOCK10_SWLOCK334_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK334_Pos)   /*!< 0x00004000 */
#define BSEC_SWLOCK10_SWLOCK334       BSEC_SWLOCK10_SWLOCK334_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK335_Pos   (15U)
#define BSEC_SWLOCK10_SWLOCK335_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK335_Pos)   /*!< 0x00008000 */
#define BSEC_SWLOCK10_SWLOCK335       BSEC_SWLOCK10_SWLOCK335_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK336_Pos   (16U)
#define BSEC_SWLOCK10_SWLOCK336_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK336_Pos)   /*!< 0x00010000 */
#define BSEC_SWLOCK10_SWLOCK336       BSEC_SWLOCK10_SWLOCK336_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK337_Pos   (17U)
#define BSEC_SWLOCK10_SWLOCK337_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK337_Pos)   /*!< 0x00020000 */
#define BSEC_SWLOCK10_SWLOCK337       BSEC_SWLOCK10_SWLOCK337_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK338_Pos   (18U)
#define BSEC_SWLOCK10_SWLOCK338_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK338_Pos)   /*!< 0x00040000 */
#define BSEC_SWLOCK10_SWLOCK338       BSEC_SWLOCK10_SWLOCK338_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK339_Pos   (19U)
#define BSEC_SWLOCK10_SWLOCK339_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK339_Pos)   /*!< 0x00080000 */
#define BSEC_SWLOCK10_SWLOCK339       BSEC_SWLOCK10_SWLOCK339_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK340_Pos   (20U)
#define BSEC_SWLOCK10_SWLOCK340_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK340_Pos)   /*!< 0x00100000 */
#define BSEC_SWLOCK10_SWLOCK340       BSEC_SWLOCK10_SWLOCK340_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK341_Pos   (21U)
#define BSEC_SWLOCK10_SWLOCK341_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK341_Pos)   /*!< 0x00200000 */
#define BSEC_SWLOCK10_SWLOCK341       BSEC_SWLOCK10_SWLOCK341_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK342_Pos   (22U)
#define BSEC_SWLOCK10_SWLOCK342_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK342_Pos)   /*!< 0x00400000 */
#define BSEC_SWLOCK10_SWLOCK342       BSEC_SWLOCK10_SWLOCK342_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK343_Pos   (23U)
#define BSEC_SWLOCK10_SWLOCK343_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK343_Pos)   /*!< 0x00800000 */
#define BSEC_SWLOCK10_SWLOCK343       BSEC_SWLOCK10_SWLOCK343_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK344_Pos   (24U)
#define BSEC_SWLOCK10_SWLOCK344_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK344_Pos)   /*!< 0x01000000 */
#define BSEC_SWLOCK10_SWLOCK344       BSEC_SWLOCK10_SWLOCK344_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK345_Pos   (25U)
#define BSEC_SWLOCK10_SWLOCK345_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK345_Pos)   /*!< 0x02000000 */
#define BSEC_SWLOCK10_SWLOCK345       BSEC_SWLOCK10_SWLOCK345_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK346_Pos   (26U)
#define BSEC_SWLOCK10_SWLOCK346_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK346_Pos)   /*!< 0x04000000 */
#define BSEC_SWLOCK10_SWLOCK346       BSEC_SWLOCK10_SWLOCK346_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK347_Pos   (27U)
#define BSEC_SWLOCK10_SWLOCK347_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK347_Pos)   /*!< 0x08000000 */
#define BSEC_SWLOCK10_SWLOCK347       BSEC_SWLOCK10_SWLOCK347_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK348_Pos   (28U)
#define BSEC_SWLOCK10_SWLOCK348_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK348_Pos)   /*!< 0x10000000 */
#define BSEC_SWLOCK10_SWLOCK348       BSEC_SWLOCK10_SWLOCK348_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK349_Pos   (29U)
#define BSEC_SWLOCK10_SWLOCK349_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK349_Pos)   /*!< 0x20000000 */
#define BSEC_SWLOCK10_SWLOCK349       BSEC_SWLOCK10_SWLOCK349_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK350_Pos   (30U)
#define BSEC_SWLOCK10_SWLOCK350_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK350_Pos)   /*!< 0x40000000 */
#define BSEC_SWLOCK10_SWLOCK350       BSEC_SWLOCK10_SWLOCK350_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK10_SWLOCK351_Pos   (31U)
#define BSEC_SWLOCK10_SWLOCK351_Msk   (0x1U << BSEC_SWLOCK10_SWLOCK351_Pos)   /*!< 0x80000000 */
#define BSEC_SWLOCK10_SWLOCK351       BSEC_SWLOCK10_SWLOCK351_Msk             /*!< sticky write lock for word y (y=320 to 351)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_SWLOCK11 register  *****************/
#define BSEC_SWLOCK11_SWLOCK352_Pos   (0U)
#define BSEC_SWLOCK11_SWLOCK352_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK352_Pos)   /*!< 0x00000001 */
#define BSEC_SWLOCK11_SWLOCK352       BSEC_SWLOCK11_SWLOCK352_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK353_Pos   (1U)
#define BSEC_SWLOCK11_SWLOCK353_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK353_Pos)   /*!< 0x00000002 */
#define BSEC_SWLOCK11_SWLOCK353       BSEC_SWLOCK11_SWLOCK353_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK354_Pos   (2U)
#define BSEC_SWLOCK11_SWLOCK354_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK354_Pos)   /*!< 0x00000004 */
#define BSEC_SWLOCK11_SWLOCK354       BSEC_SWLOCK11_SWLOCK354_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK355_Pos   (3U)
#define BSEC_SWLOCK11_SWLOCK355_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK355_Pos)   /*!< 0x00000008 */
#define BSEC_SWLOCK11_SWLOCK355       BSEC_SWLOCK11_SWLOCK355_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK356_Pos   (4U)
#define BSEC_SWLOCK11_SWLOCK356_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK356_Pos)   /*!< 0x00000010 */
#define BSEC_SWLOCK11_SWLOCK356       BSEC_SWLOCK11_SWLOCK356_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK357_Pos   (5U)
#define BSEC_SWLOCK11_SWLOCK357_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK357_Pos)   /*!< 0x00000020 */
#define BSEC_SWLOCK11_SWLOCK357       BSEC_SWLOCK11_SWLOCK357_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK358_Pos   (6U)
#define BSEC_SWLOCK11_SWLOCK358_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK358_Pos)   /*!< 0x00000040 */
#define BSEC_SWLOCK11_SWLOCK358       BSEC_SWLOCK11_SWLOCK358_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK359_Pos   (7U)
#define BSEC_SWLOCK11_SWLOCK359_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK359_Pos)   /*!< 0x00000080 */
#define BSEC_SWLOCK11_SWLOCK359       BSEC_SWLOCK11_SWLOCK359_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK360_Pos   (8U)
#define BSEC_SWLOCK11_SWLOCK360_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK360_Pos)   /*!< 0x00000100 */
#define BSEC_SWLOCK11_SWLOCK360       BSEC_SWLOCK11_SWLOCK360_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK361_Pos   (9U)
#define BSEC_SWLOCK11_SWLOCK361_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK361_Pos)   /*!< 0x00000200 */
#define BSEC_SWLOCK11_SWLOCK361       BSEC_SWLOCK11_SWLOCK361_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK362_Pos   (10U)
#define BSEC_SWLOCK11_SWLOCK362_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK362_Pos)   /*!< 0x00000400 */
#define BSEC_SWLOCK11_SWLOCK362       BSEC_SWLOCK11_SWLOCK362_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK363_Pos   (11U)
#define BSEC_SWLOCK11_SWLOCK363_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK363_Pos)   /*!< 0x00000800 */
#define BSEC_SWLOCK11_SWLOCK363       BSEC_SWLOCK11_SWLOCK363_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK364_Pos   (12U)
#define BSEC_SWLOCK11_SWLOCK364_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK364_Pos)   /*!< 0x00001000 */
#define BSEC_SWLOCK11_SWLOCK364       BSEC_SWLOCK11_SWLOCK364_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK365_Pos   (13U)
#define BSEC_SWLOCK11_SWLOCK365_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK365_Pos)   /*!< 0x00002000 */
#define BSEC_SWLOCK11_SWLOCK365       BSEC_SWLOCK11_SWLOCK365_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK366_Pos   (14U)
#define BSEC_SWLOCK11_SWLOCK366_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK366_Pos)   /*!< 0x00004000 */
#define BSEC_SWLOCK11_SWLOCK366       BSEC_SWLOCK11_SWLOCK366_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK367_Pos   (15U)
#define BSEC_SWLOCK11_SWLOCK367_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK367_Pos)   /*!< 0x00008000 */
#define BSEC_SWLOCK11_SWLOCK367       BSEC_SWLOCK11_SWLOCK367_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK368_Pos   (16U)
#define BSEC_SWLOCK11_SWLOCK368_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK368_Pos)   /*!< 0x00010000 */
#define BSEC_SWLOCK11_SWLOCK368       BSEC_SWLOCK11_SWLOCK368_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK369_Pos   (17U)
#define BSEC_SWLOCK11_SWLOCK369_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK369_Pos)   /*!< 0x00020000 */
#define BSEC_SWLOCK11_SWLOCK369       BSEC_SWLOCK11_SWLOCK369_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK370_Pos   (18U)
#define BSEC_SWLOCK11_SWLOCK370_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK370_Pos)   /*!< 0x00040000 */
#define BSEC_SWLOCK11_SWLOCK370       BSEC_SWLOCK11_SWLOCK370_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK371_Pos   (19U)
#define BSEC_SWLOCK11_SWLOCK371_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK371_Pos)   /*!< 0x00080000 */
#define BSEC_SWLOCK11_SWLOCK371       BSEC_SWLOCK11_SWLOCK371_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK372_Pos   (20U)
#define BSEC_SWLOCK11_SWLOCK372_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK372_Pos)   /*!< 0x00100000 */
#define BSEC_SWLOCK11_SWLOCK372       BSEC_SWLOCK11_SWLOCK372_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK373_Pos   (21U)
#define BSEC_SWLOCK11_SWLOCK373_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK373_Pos)   /*!< 0x00200000 */
#define BSEC_SWLOCK11_SWLOCK373       BSEC_SWLOCK11_SWLOCK373_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK374_Pos   (22U)
#define BSEC_SWLOCK11_SWLOCK374_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK374_Pos)   /*!< 0x00400000 */
#define BSEC_SWLOCK11_SWLOCK374       BSEC_SWLOCK11_SWLOCK374_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK375_Pos   (23U)
#define BSEC_SWLOCK11_SWLOCK375_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK375_Pos)   /*!< 0x00800000 */
#define BSEC_SWLOCK11_SWLOCK375       BSEC_SWLOCK11_SWLOCK375_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK376_Pos   (24U)
#define BSEC_SWLOCK11_SWLOCK376_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK376_Pos)   /*!< 0x01000000 */
#define BSEC_SWLOCK11_SWLOCK376       BSEC_SWLOCK11_SWLOCK376_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK377_Pos   (25U)
#define BSEC_SWLOCK11_SWLOCK377_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK377_Pos)   /*!< 0x02000000 */
#define BSEC_SWLOCK11_SWLOCK377       BSEC_SWLOCK11_SWLOCK377_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK378_Pos   (26U)
#define BSEC_SWLOCK11_SWLOCK378_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK378_Pos)   /*!< 0x04000000 */
#define BSEC_SWLOCK11_SWLOCK378       BSEC_SWLOCK11_SWLOCK378_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK379_Pos   (27U)
#define BSEC_SWLOCK11_SWLOCK379_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK379_Pos)   /*!< 0x08000000 */
#define BSEC_SWLOCK11_SWLOCK379       BSEC_SWLOCK11_SWLOCK379_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK380_Pos   (28U)
#define BSEC_SWLOCK11_SWLOCK380_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK380_Pos)   /*!< 0x10000000 */
#define BSEC_SWLOCK11_SWLOCK380       BSEC_SWLOCK11_SWLOCK380_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK381_Pos   (29U)
#define BSEC_SWLOCK11_SWLOCK381_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK381_Pos)   /*!< 0x20000000 */
#define BSEC_SWLOCK11_SWLOCK381       BSEC_SWLOCK11_SWLOCK381_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK382_Pos   (30U)
#define BSEC_SWLOCK11_SWLOCK382_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK382_Pos)   /*!< 0x40000000 */
#define BSEC_SWLOCK11_SWLOCK382       BSEC_SWLOCK11_SWLOCK382_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SWLOCK11_SWLOCK383_Pos   (31U)
#define BSEC_SWLOCK11_SWLOCK383_Msk   (0x1U << BSEC_SWLOCK11_SWLOCK383_Pos)   /*!< 0x80000000 */
#define BSEC_SWLOCK11_SWLOCK383       BSEC_SWLOCK11_SWLOCK383_Msk             /*!< sticky write lock for word y (y=352 to 383)See BSEC_SWLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK0 register  *****************/
#define BSEC_SRLOCK0_SRLOCK0_Pos      (0U)
#define BSEC_SRLOCK0_SRLOCK0_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK0_Pos)      /*!< 0x00000001 */
#define BSEC_SRLOCK0_SRLOCK0          BSEC_SRLOCK0_SRLOCK0_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK1_Pos      (1U)
#define BSEC_SRLOCK0_SRLOCK1_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK1_Pos)      /*!< 0x00000002 */
#define BSEC_SRLOCK0_SRLOCK1          BSEC_SRLOCK0_SRLOCK1_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK2_Pos      (2U)
#define BSEC_SRLOCK0_SRLOCK2_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK2_Pos)      /*!< 0x00000004 */
#define BSEC_SRLOCK0_SRLOCK2          BSEC_SRLOCK0_SRLOCK2_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK3_Pos      (3U)
#define BSEC_SRLOCK0_SRLOCK3_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK3_Pos)      /*!< 0x00000008 */
#define BSEC_SRLOCK0_SRLOCK3          BSEC_SRLOCK0_SRLOCK3_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK4_Pos      (4U)
#define BSEC_SRLOCK0_SRLOCK4_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK4_Pos)      /*!< 0x00000010 */
#define BSEC_SRLOCK0_SRLOCK4          BSEC_SRLOCK0_SRLOCK4_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK5_Pos      (5U)
#define BSEC_SRLOCK0_SRLOCK5_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK5_Pos)      /*!< 0x00000020 */
#define BSEC_SRLOCK0_SRLOCK5          BSEC_SRLOCK0_SRLOCK5_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK6_Pos      (6U)
#define BSEC_SRLOCK0_SRLOCK6_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK6_Pos)      /*!< 0x00000040 */
#define BSEC_SRLOCK0_SRLOCK6          BSEC_SRLOCK0_SRLOCK6_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK7_Pos      (7U)
#define BSEC_SRLOCK0_SRLOCK7_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK7_Pos)      /*!< 0x00000080 */
#define BSEC_SRLOCK0_SRLOCK7          BSEC_SRLOCK0_SRLOCK7_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK8_Pos      (8U)
#define BSEC_SRLOCK0_SRLOCK8_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK8_Pos)      /*!< 0x00000100 */
#define BSEC_SRLOCK0_SRLOCK8          BSEC_SRLOCK0_SRLOCK8_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK9_Pos      (9U)
#define BSEC_SRLOCK0_SRLOCK9_Msk      (0x1U << BSEC_SRLOCK0_SRLOCK9_Pos)      /*!< 0x00000200 */
#define BSEC_SRLOCK0_SRLOCK9          BSEC_SRLOCK0_SRLOCK9_Msk                /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK10_Pos     (10U)
#define BSEC_SRLOCK0_SRLOCK10_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK10_Pos)     /*!< 0x00000400 */
#define BSEC_SRLOCK0_SRLOCK10         BSEC_SRLOCK0_SRLOCK10_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK11_Pos     (11U)
#define BSEC_SRLOCK0_SRLOCK11_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK11_Pos)     /*!< 0x00000800 */
#define BSEC_SRLOCK0_SRLOCK11         BSEC_SRLOCK0_SRLOCK11_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK12_Pos     (12U)
#define BSEC_SRLOCK0_SRLOCK12_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK12_Pos)     /*!< 0x00001000 */
#define BSEC_SRLOCK0_SRLOCK12         BSEC_SRLOCK0_SRLOCK12_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK13_Pos     (13U)
#define BSEC_SRLOCK0_SRLOCK13_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK13_Pos)     /*!< 0x00002000 */
#define BSEC_SRLOCK0_SRLOCK13         BSEC_SRLOCK0_SRLOCK13_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK14_Pos     (14U)
#define BSEC_SRLOCK0_SRLOCK14_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK14_Pos)     /*!< 0x00004000 */
#define BSEC_SRLOCK0_SRLOCK14         BSEC_SRLOCK0_SRLOCK14_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK15_Pos     (15U)
#define BSEC_SRLOCK0_SRLOCK15_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK15_Pos)     /*!< 0x00008000 */
#define BSEC_SRLOCK0_SRLOCK15         BSEC_SRLOCK0_SRLOCK15_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK16_Pos     (16U)
#define BSEC_SRLOCK0_SRLOCK16_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK16_Pos)     /*!< 0x00010000 */
#define BSEC_SRLOCK0_SRLOCK16         BSEC_SRLOCK0_SRLOCK16_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK17_Pos     (17U)
#define BSEC_SRLOCK0_SRLOCK17_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK17_Pos)     /*!< 0x00020000 */
#define BSEC_SRLOCK0_SRLOCK17         BSEC_SRLOCK0_SRLOCK17_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK18_Pos     (18U)
#define BSEC_SRLOCK0_SRLOCK18_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK18_Pos)     /*!< 0x00040000 */
#define BSEC_SRLOCK0_SRLOCK18         BSEC_SRLOCK0_SRLOCK18_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK19_Pos     (19U)
#define BSEC_SRLOCK0_SRLOCK19_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK19_Pos)     /*!< 0x00080000 */
#define BSEC_SRLOCK0_SRLOCK19         BSEC_SRLOCK0_SRLOCK19_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK20_Pos     (20U)
#define BSEC_SRLOCK0_SRLOCK20_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK20_Pos)     /*!< 0x00100000 */
#define BSEC_SRLOCK0_SRLOCK20         BSEC_SRLOCK0_SRLOCK20_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK21_Pos     (21U)
#define BSEC_SRLOCK0_SRLOCK21_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK21_Pos)     /*!< 0x00200000 */
#define BSEC_SRLOCK0_SRLOCK21         BSEC_SRLOCK0_SRLOCK21_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK22_Pos     (22U)
#define BSEC_SRLOCK0_SRLOCK22_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK22_Pos)     /*!< 0x00400000 */
#define BSEC_SRLOCK0_SRLOCK22         BSEC_SRLOCK0_SRLOCK22_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK23_Pos     (23U)
#define BSEC_SRLOCK0_SRLOCK23_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK23_Pos)     /*!< 0x00800000 */
#define BSEC_SRLOCK0_SRLOCK23         BSEC_SRLOCK0_SRLOCK23_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK24_Pos     (24U)
#define BSEC_SRLOCK0_SRLOCK24_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK24_Pos)     /*!< 0x01000000 */
#define BSEC_SRLOCK0_SRLOCK24         BSEC_SRLOCK0_SRLOCK24_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK25_Pos     (25U)
#define BSEC_SRLOCK0_SRLOCK25_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK25_Pos)     /*!< 0x02000000 */
#define BSEC_SRLOCK0_SRLOCK25         BSEC_SRLOCK0_SRLOCK25_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK26_Pos     (26U)
#define BSEC_SRLOCK0_SRLOCK26_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK26_Pos)     /*!< 0x04000000 */
#define BSEC_SRLOCK0_SRLOCK26         BSEC_SRLOCK0_SRLOCK26_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK27_Pos     (27U)
#define BSEC_SRLOCK0_SRLOCK27_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK27_Pos)     /*!< 0x08000000 */
#define BSEC_SRLOCK0_SRLOCK27         BSEC_SRLOCK0_SRLOCK27_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK28_Pos     (28U)
#define BSEC_SRLOCK0_SRLOCK28_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK28_Pos)     /*!< 0x10000000 */
#define BSEC_SRLOCK0_SRLOCK28         BSEC_SRLOCK0_SRLOCK28_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK29_Pos     (29U)
#define BSEC_SRLOCK0_SRLOCK29_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK29_Pos)     /*!< 0x20000000 */
#define BSEC_SRLOCK0_SRLOCK29         BSEC_SRLOCK0_SRLOCK29_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK30_Pos     (30U)
#define BSEC_SRLOCK0_SRLOCK30_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK30_Pos)     /*!< 0x40000000 */
#define BSEC_SRLOCK0_SRLOCK30         BSEC_SRLOCK0_SRLOCK30_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK0_SRLOCK31_Pos     (31U)
#define BSEC_SRLOCK0_SRLOCK31_Msk     (0x1U << BSEC_SRLOCK0_SRLOCK31_Pos)     /*!< 0x80000000 */
#define BSEC_SRLOCK0_SRLOCK31         BSEC_SRLOCK0_SRLOCK31_Msk               /*!< sticky read lock for fuse word y (y=0 to 31)Each bit y locks reloading of fuse word y from the OTP memory array until next power-on reset.- 0: Fuse word y loading through BSEC_OTPCR is authorized.- 1: Fuse word y loading through BSEC_OTPCR is denied, i.e. BSEC_FVRy value is fixed until next power-on reset.While BUSY is set in BSEC_SR or BSEC_OTPSR writes has no effect, and reads return 0.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK1 register  *****************/
#define BSEC_SRLOCK1_SRLOCK32_Pos     (0U)
#define BSEC_SRLOCK1_SRLOCK32_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK32_Pos)     /*!< 0x00000001 */
#define BSEC_SRLOCK1_SRLOCK32         BSEC_SRLOCK1_SRLOCK32_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK33_Pos     (1U)
#define BSEC_SRLOCK1_SRLOCK33_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK33_Pos)     /*!< 0x00000002 */
#define BSEC_SRLOCK1_SRLOCK33         BSEC_SRLOCK1_SRLOCK33_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK34_Pos     (2U)
#define BSEC_SRLOCK1_SRLOCK34_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK34_Pos)     /*!< 0x00000004 */
#define BSEC_SRLOCK1_SRLOCK34         BSEC_SRLOCK1_SRLOCK34_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK35_Pos     (3U)
#define BSEC_SRLOCK1_SRLOCK35_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK35_Pos)     /*!< 0x00000008 */
#define BSEC_SRLOCK1_SRLOCK35         BSEC_SRLOCK1_SRLOCK35_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK36_Pos     (4U)
#define BSEC_SRLOCK1_SRLOCK36_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK36_Pos)     /*!< 0x00000010 */
#define BSEC_SRLOCK1_SRLOCK36         BSEC_SRLOCK1_SRLOCK36_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK37_Pos     (5U)
#define BSEC_SRLOCK1_SRLOCK37_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK37_Pos)     /*!< 0x00000020 */
#define BSEC_SRLOCK1_SRLOCK37         BSEC_SRLOCK1_SRLOCK37_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK38_Pos     (6U)
#define BSEC_SRLOCK1_SRLOCK38_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK38_Pos)     /*!< 0x00000040 */
#define BSEC_SRLOCK1_SRLOCK38         BSEC_SRLOCK1_SRLOCK38_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK39_Pos     (7U)
#define BSEC_SRLOCK1_SRLOCK39_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK39_Pos)     /*!< 0x00000080 */
#define BSEC_SRLOCK1_SRLOCK39         BSEC_SRLOCK1_SRLOCK39_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK40_Pos     (8U)
#define BSEC_SRLOCK1_SRLOCK40_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK40_Pos)     /*!< 0x00000100 */
#define BSEC_SRLOCK1_SRLOCK40         BSEC_SRLOCK1_SRLOCK40_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK41_Pos     (9U)
#define BSEC_SRLOCK1_SRLOCK41_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK41_Pos)     /*!< 0x00000200 */
#define BSEC_SRLOCK1_SRLOCK41         BSEC_SRLOCK1_SRLOCK41_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK42_Pos     (10U)
#define BSEC_SRLOCK1_SRLOCK42_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK42_Pos)     /*!< 0x00000400 */
#define BSEC_SRLOCK1_SRLOCK42         BSEC_SRLOCK1_SRLOCK42_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK43_Pos     (11U)
#define BSEC_SRLOCK1_SRLOCK43_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK43_Pos)     /*!< 0x00000800 */
#define BSEC_SRLOCK1_SRLOCK43         BSEC_SRLOCK1_SRLOCK43_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK44_Pos     (12U)
#define BSEC_SRLOCK1_SRLOCK44_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK44_Pos)     /*!< 0x00001000 */
#define BSEC_SRLOCK1_SRLOCK44         BSEC_SRLOCK1_SRLOCK44_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK45_Pos     (13U)
#define BSEC_SRLOCK1_SRLOCK45_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK45_Pos)     /*!< 0x00002000 */
#define BSEC_SRLOCK1_SRLOCK45         BSEC_SRLOCK1_SRLOCK45_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK46_Pos     (14U)
#define BSEC_SRLOCK1_SRLOCK46_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK46_Pos)     /*!< 0x00004000 */
#define BSEC_SRLOCK1_SRLOCK46         BSEC_SRLOCK1_SRLOCK46_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK47_Pos     (15U)
#define BSEC_SRLOCK1_SRLOCK47_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK47_Pos)     /*!< 0x00008000 */
#define BSEC_SRLOCK1_SRLOCK47         BSEC_SRLOCK1_SRLOCK47_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK48_Pos     (16U)
#define BSEC_SRLOCK1_SRLOCK48_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK48_Pos)     /*!< 0x00010000 */
#define BSEC_SRLOCK1_SRLOCK48         BSEC_SRLOCK1_SRLOCK48_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK49_Pos     (17U)
#define BSEC_SRLOCK1_SRLOCK49_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK49_Pos)     /*!< 0x00020000 */
#define BSEC_SRLOCK1_SRLOCK49         BSEC_SRLOCK1_SRLOCK49_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK50_Pos     (18U)
#define BSEC_SRLOCK1_SRLOCK50_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK50_Pos)     /*!< 0x00040000 */
#define BSEC_SRLOCK1_SRLOCK50         BSEC_SRLOCK1_SRLOCK50_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK51_Pos     (19U)
#define BSEC_SRLOCK1_SRLOCK51_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK51_Pos)     /*!< 0x00080000 */
#define BSEC_SRLOCK1_SRLOCK51         BSEC_SRLOCK1_SRLOCK51_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK52_Pos     (20U)
#define BSEC_SRLOCK1_SRLOCK52_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK52_Pos)     /*!< 0x00100000 */
#define BSEC_SRLOCK1_SRLOCK52         BSEC_SRLOCK1_SRLOCK52_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK53_Pos     (21U)
#define BSEC_SRLOCK1_SRLOCK53_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK53_Pos)     /*!< 0x00200000 */
#define BSEC_SRLOCK1_SRLOCK53         BSEC_SRLOCK1_SRLOCK53_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK54_Pos     (22U)
#define BSEC_SRLOCK1_SRLOCK54_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK54_Pos)     /*!< 0x00400000 */
#define BSEC_SRLOCK1_SRLOCK54         BSEC_SRLOCK1_SRLOCK54_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK55_Pos     (23U)
#define BSEC_SRLOCK1_SRLOCK55_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK55_Pos)     /*!< 0x00800000 */
#define BSEC_SRLOCK1_SRLOCK55         BSEC_SRLOCK1_SRLOCK55_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK56_Pos     (24U)
#define BSEC_SRLOCK1_SRLOCK56_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK56_Pos)     /*!< 0x01000000 */
#define BSEC_SRLOCK1_SRLOCK56         BSEC_SRLOCK1_SRLOCK56_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK57_Pos     (25U)
#define BSEC_SRLOCK1_SRLOCK57_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK57_Pos)     /*!< 0x02000000 */
#define BSEC_SRLOCK1_SRLOCK57         BSEC_SRLOCK1_SRLOCK57_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK58_Pos     (26U)
#define BSEC_SRLOCK1_SRLOCK58_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK58_Pos)     /*!< 0x04000000 */
#define BSEC_SRLOCK1_SRLOCK58         BSEC_SRLOCK1_SRLOCK58_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK59_Pos     (27U)
#define BSEC_SRLOCK1_SRLOCK59_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK59_Pos)     /*!< 0x08000000 */
#define BSEC_SRLOCK1_SRLOCK59         BSEC_SRLOCK1_SRLOCK59_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK60_Pos     (28U)
#define BSEC_SRLOCK1_SRLOCK60_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK60_Pos)     /*!< 0x10000000 */
#define BSEC_SRLOCK1_SRLOCK60         BSEC_SRLOCK1_SRLOCK60_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK61_Pos     (29U)
#define BSEC_SRLOCK1_SRLOCK61_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK61_Pos)     /*!< 0x20000000 */
#define BSEC_SRLOCK1_SRLOCK61         BSEC_SRLOCK1_SRLOCK61_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK62_Pos     (30U)
#define BSEC_SRLOCK1_SRLOCK62_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK62_Pos)     /*!< 0x40000000 */
#define BSEC_SRLOCK1_SRLOCK62         BSEC_SRLOCK1_SRLOCK62_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK1_SRLOCK63_Pos     (31U)
#define BSEC_SRLOCK1_SRLOCK63_Msk     (0x1U << BSEC_SRLOCK1_SRLOCK63_Pos)     /*!< 0x80000000 */
#define BSEC_SRLOCK1_SRLOCK63         BSEC_SRLOCK1_SRLOCK63_Msk               /*!< sticky read lock for fuse word y (y=32 to 63)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK2 register  *****************/
#define BSEC_SRLOCK2_SRLOCK64_Pos     (0U)
#define BSEC_SRLOCK2_SRLOCK64_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK64_Pos)     /*!< 0x00000001 */
#define BSEC_SRLOCK2_SRLOCK64         BSEC_SRLOCK2_SRLOCK64_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK65_Pos     (1U)
#define BSEC_SRLOCK2_SRLOCK65_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK65_Pos)     /*!< 0x00000002 */
#define BSEC_SRLOCK2_SRLOCK65         BSEC_SRLOCK2_SRLOCK65_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK66_Pos     (2U)
#define BSEC_SRLOCK2_SRLOCK66_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK66_Pos)     /*!< 0x00000004 */
#define BSEC_SRLOCK2_SRLOCK66         BSEC_SRLOCK2_SRLOCK66_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK67_Pos     (3U)
#define BSEC_SRLOCK2_SRLOCK67_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK67_Pos)     /*!< 0x00000008 */
#define BSEC_SRLOCK2_SRLOCK67         BSEC_SRLOCK2_SRLOCK67_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK68_Pos     (4U)
#define BSEC_SRLOCK2_SRLOCK68_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK68_Pos)     /*!< 0x00000010 */
#define BSEC_SRLOCK2_SRLOCK68         BSEC_SRLOCK2_SRLOCK68_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK69_Pos     (5U)
#define BSEC_SRLOCK2_SRLOCK69_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK69_Pos)     /*!< 0x00000020 */
#define BSEC_SRLOCK2_SRLOCK69         BSEC_SRLOCK2_SRLOCK69_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK70_Pos     (6U)
#define BSEC_SRLOCK2_SRLOCK70_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK70_Pos)     /*!< 0x00000040 */
#define BSEC_SRLOCK2_SRLOCK70         BSEC_SRLOCK2_SRLOCK70_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK71_Pos     (7U)
#define BSEC_SRLOCK2_SRLOCK71_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK71_Pos)     /*!< 0x00000080 */
#define BSEC_SRLOCK2_SRLOCK71         BSEC_SRLOCK2_SRLOCK71_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK72_Pos     (8U)
#define BSEC_SRLOCK2_SRLOCK72_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK72_Pos)     /*!< 0x00000100 */
#define BSEC_SRLOCK2_SRLOCK72         BSEC_SRLOCK2_SRLOCK72_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK73_Pos     (9U)
#define BSEC_SRLOCK2_SRLOCK73_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK73_Pos)     /*!< 0x00000200 */
#define BSEC_SRLOCK2_SRLOCK73         BSEC_SRLOCK2_SRLOCK73_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK74_Pos     (10U)
#define BSEC_SRLOCK2_SRLOCK74_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK74_Pos)     /*!< 0x00000400 */
#define BSEC_SRLOCK2_SRLOCK74         BSEC_SRLOCK2_SRLOCK74_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK75_Pos     (11U)
#define BSEC_SRLOCK2_SRLOCK75_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK75_Pos)     /*!< 0x00000800 */
#define BSEC_SRLOCK2_SRLOCK75         BSEC_SRLOCK2_SRLOCK75_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK76_Pos     (12U)
#define BSEC_SRLOCK2_SRLOCK76_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK76_Pos)     /*!< 0x00001000 */
#define BSEC_SRLOCK2_SRLOCK76         BSEC_SRLOCK2_SRLOCK76_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK77_Pos     (13U)
#define BSEC_SRLOCK2_SRLOCK77_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK77_Pos)     /*!< 0x00002000 */
#define BSEC_SRLOCK2_SRLOCK77         BSEC_SRLOCK2_SRLOCK77_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK78_Pos     (14U)
#define BSEC_SRLOCK2_SRLOCK78_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK78_Pos)     /*!< 0x00004000 */
#define BSEC_SRLOCK2_SRLOCK78         BSEC_SRLOCK2_SRLOCK78_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK79_Pos     (15U)
#define BSEC_SRLOCK2_SRLOCK79_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK79_Pos)     /*!< 0x00008000 */
#define BSEC_SRLOCK2_SRLOCK79         BSEC_SRLOCK2_SRLOCK79_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK80_Pos     (16U)
#define BSEC_SRLOCK2_SRLOCK80_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK80_Pos)     /*!< 0x00010000 */
#define BSEC_SRLOCK2_SRLOCK80         BSEC_SRLOCK2_SRLOCK80_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK81_Pos     (17U)
#define BSEC_SRLOCK2_SRLOCK81_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK81_Pos)     /*!< 0x00020000 */
#define BSEC_SRLOCK2_SRLOCK81         BSEC_SRLOCK2_SRLOCK81_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK82_Pos     (18U)
#define BSEC_SRLOCK2_SRLOCK82_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK82_Pos)     /*!< 0x00040000 */
#define BSEC_SRLOCK2_SRLOCK82         BSEC_SRLOCK2_SRLOCK82_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK83_Pos     (19U)
#define BSEC_SRLOCK2_SRLOCK83_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK83_Pos)     /*!< 0x00080000 */
#define BSEC_SRLOCK2_SRLOCK83         BSEC_SRLOCK2_SRLOCK83_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK84_Pos     (20U)
#define BSEC_SRLOCK2_SRLOCK84_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK84_Pos)     /*!< 0x00100000 */
#define BSEC_SRLOCK2_SRLOCK84         BSEC_SRLOCK2_SRLOCK84_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK85_Pos     (21U)
#define BSEC_SRLOCK2_SRLOCK85_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK85_Pos)     /*!< 0x00200000 */
#define BSEC_SRLOCK2_SRLOCK85         BSEC_SRLOCK2_SRLOCK85_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK86_Pos     (22U)
#define BSEC_SRLOCK2_SRLOCK86_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK86_Pos)     /*!< 0x00400000 */
#define BSEC_SRLOCK2_SRLOCK86         BSEC_SRLOCK2_SRLOCK86_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK87_Pos     (23U)
#define BSEC_SRLOCK2_SRLOCK87_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK87_Pos)     /*!< 0x00800000 */
#define BSEC_SRLOCK2_SRLOCK87         BSEC_SRLOCK2_SRLOCK87_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK88_Pos     (24U)
#define BSEC_SRLOCK2_SRLOCK88_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK88_Pos)     /*!< 0x01000000 */
#define BSEC_SRLOCK2_SRLOCK88         BSEC_SRLOCK2_SRLOCK88_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK89_Pos     (25U)
#define BSEC_SRLOCK2_SRLOCK89_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK89_Pos)     /*!< 0x02000000 */
#define BSEC_SRLOCK2_SRLOCK89         BSEC_SRLOCK2_SRLOCK89_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK90_Pos     (26U)
#define BSEC_SRLOCK2_SRLOCK90_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK90_Pos)     /*!< 0x04000000 */
#define BSEC_SRLOCK2_SRLOCK90         BSEC_SRLOCK2_SRLOCK90_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK91_Pos     (27U)
#define BSEC_SRLOCK2_SRLOCK91_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK91_Pos)     /*!< 0x08000000 */
#define BSEC_SRLOCK2_SRLOCK91         BSEC_SRLOCK2_SRLOCK91_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK92_Pos     (28U)
#define BSEC_SRLOCK2_SRLOCK92_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK92_Pos)     /*!< 0x10000000 */
#define BSEC_SRLOCK2_SRLOCK92         BSEC_SRLOCK2_SRLOCK92_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK93_Pos     (29U)
#define BSEC_SRLOCK2_SRLOCK93_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK93_Pos)     /*!< 0x20000000 */
#define BSEC_SRLOCK2_SRLOCK93         BSEC_SRLOCK2_SRLOCK93_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK94_Pos     (30U)
#define BSEC_SRLOCK2_SRLOCK94_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK94_Pos)     /*!< 0x40000000 */
#define BSEC_SRLOCK2_SRLOCK94         BSEC_SRLOCK2_SRLOCK94_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK2_SRLOCK95_Pos     (31U)
#define BSEC_SRLOCK2_SRLOCK95_Msk     (0x1U << BSEC_SRLOCK2_SRLOCK95_Pos)     /*!< 0x80000000 */
#define BSEC_SRLOCK2_SRLOCK95         BSEC_SRLOCK2_SRLOCK95_Msk               /*!< sticky read lock for fuse word y (y=64 to 95)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK3 register  *****************/
#define BSEC_SRLOCK3_SRLOCK96_Pos     (0U)
#define BSEC_SRLOCK3_SRLOCK96_Msk     (0x1U << BSEC_SRLOCK3_SRLOCK96_Pos)     /*!< 0x00000001 */
#define BSEC_SRLOCK3_SRLOCK96         BSEC_SRLOCK3_SRLOCK96_Msk               /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK97_Pos     (1U)
#define BSEC_SRLOCK3_SRLOCK97_Msk     (0x1U << BSEC_SRLOCK3_SRLOCK97_Pos)     /*!< 0x00000002 */
#define BSEC_SRLOCK3_SRLOCK97         BSEC_SRLOCK3_SRLOCK97_Msk               /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK98_Pos     (2U)
#define BSEC_SRLOCK3_SRLOCK98_Msk     (0x1U << BSEC_SRLOCK3_SRLOCK98_Pos)     /*!< 0x00000004 */
#define BSEC_SRLOCK3_SRLOCK98         BSEC_SRLOCK3_SRLOCK98_Msk               /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK99_Pos     (3U)
#define BSEC_SRLOCK3_SRLOCK99_Msk     (0x1U << BSEC_SRLOCK3_SRLOCK99_Pos)     /*!< 0x00000008 */
#define BSEC_SRLOCK3_SRLOCK99         BSEC_SRLOCK3_SRLOCK99_Msk               /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK100_Pos    (4U)
#define BSEC_SRLOCK3_SRLOCK100_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK100_Pos)    /*!< 0x00000010 */
#define BSEC_SRLOCK3_SRLOCK100        BSEC_SRLOCK3_SRLOCK100_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK101_Pos    (5U)
#define BSEC_SRLOCK3_SRLOCK101_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK101_Pos)    /*!< 0x00000020 */
#define BSEC_SRLOCK3_SRLOCK101        BSEC_SRLOCK3_SRLOCK101_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK102_Pos    (6U)
#define BSEC_SRLOCK3_SRLOCK102_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK102_Pos)    /*!< 0x00000040 */
#define BSEC_SRLOCK3_SRLOCK102        BSEC_SRLOCK3_SRLOCK102_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK103_Pos    (7U)
#define BSEC_SRLOCK3_SRLOCK103_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK103_Pos)    /*!< 0x00000080 */
#define BSEC_SRLOCK3_SRLOCK103        BSEC_SRLOCK3_SRLOCK103_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK104_Pos    (8U)
#define BSEC_SRLOCK3_SRLOCK104_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK104_Pos)    /*!< 0x00000100 */
#define BSEC_SRLOCK3_SRLOCK104        BSEC_SRLOCK3_SRLOCK104_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK105_Pos    (9U)
#define BSEC_SRLOCK3_SRLOCK105_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK105_Pos)    /*!< 0x00000200 */
#define BSEC_SRLOCK3_SRLOCK105        BSEC_SRLOCK3_SRLOCK105_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK106_Pos    (10U)
#define BSEC_SRLOCK3_SRLOCK106_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK106_Pos)    /*!< 0x00000400 */
#define BSEC_SRLOCK3_SRLOCK106        BSEC_SRLOCK3_SRLOCK106_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK107_Pos    (11U)
#define BSEC_SRLOCK3_SRLOCK107_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK107_Pos)    /*!< 0x00000800 */
#define BSEC_SRLOCK3_SRLOCK107        BSEC_SRLOCK3_SRLOCK107_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK108_Pos    (12U)
#define BSEC_SRLOCK3_SRLOCK108_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK108_Pos)    /*!< 0x00001000 */
#define BSEC_SRLOCK3_SRLOCK108        BSEC_SRLOCK3_SRLOCK108_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK109_Pos    (13U)
#define BSEC_SRLOCK3_SRLOCK109_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK109_Pos)    /*!< 0x00002000 */
#define BSEC_SRLOCK3_SRLOCK109        BSEC_SRLOCK3_SRLOCK109_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK110_Pos    (14U)
#define BSEC_SRLOCK3_SRLOCK110_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK110_Pos)    /*!< 0x00004000 */
#define BSEC_SRLOCK3_SRLOCK110        BSEC_SRLOCK3_SRLOCK110_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK111_Pos    (15U)
#define BSEC_SRLOCK3_SRLOCK111_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK111_Pos)    /*!< 0x00008000 */
#define BSEC_SRLOCK3_SRLOCK111        BSEC_SRLOCK3_SRLOCK111_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK112_Pos    (16U)
#define BSEC_SRLOCK3_SRLOCK112_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK112_Pos)    /*!< 0x00010000 */
#define BSEC_SRLOCK3_SRLOCK112        BSEC_SRLOCK3_SRLOCK112_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK113_Pos    (17U)
#define BSEC_SRLOCK3_SRLOCK113_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK113_Pos)    /*!< 0x00020000 */
#define BSEC_SRLOCK3_SRLOCK113        BSEC_SRLOCK3_SRLOCK113_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK114_Pos    (18U)
#define BSEC_SRLOCK3_SRLOCK114_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK114_Pos)    /*!< 0x00040000 */
#define BSEC_SRLOCK3_SRLOCK114        BSEC_SRLOCK3_SRLOCK114_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK115_Pos    (19U)
#define BSEC_SRLOCK3_SRLOCK115_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK115_Pos)    /*!< 0x00080000 */
#define BSEC_SRLOCK3_SRLOCK115        BSEC_SRLOCK3_SRLOCK115_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK116_Pos    (20U)
#define BSEC_SRLOCK3_SRLOCK116_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK116_Pos)    /*!< 0x00100000 */
#define BSEC_SRLOCK3_SRLOCK116        BSEC_SRLOCK3_SRLOCK116_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK117_Pos    (21U)
#define BSEC_SRLOCK3_SRLOCK117_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK117_Pos)    /*!< 0x00200000 */
#define BSEC_SRLOCK3_SRLOCK117        BSEC_SRLOCK3_SRLOCK117_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK118_Pos    (22U)
#define BSEC_SRLOCK3_SRLOCK118_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK118_Pos)    /*!< 0x00400000 */
#define BSEC_SRLOCK3_SRLOCK118        BSEC_SRLOCK3_SRLOCK118_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK119_Pos    (23U)
#define BSEC_SRLOCK3_SRLOCK119_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK119_Pos)    /*!< 0x00800000 */
#define BSEC_SRLOCK3_SRLOCK119        BSEC_SRLOCK3_SRLOCK119_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK120_Pos    (24U)
#define BSEC_SRLOCK3_SRLOCK120_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK120_Pos)    /*!< 0x01000000 */
#define BSEC_SRLOCK3_SRLOCK120        BSEC_SRLOCK3_SRLOCK120_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK121_Pos    (25U)
#define BSEC_SRLOCK3_SRLOCK121_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK121_Pos)    /*!< 0x02000000 */
#define BSEC_SRLOCK3_SRLOCK121        BSEC_SRLOCK3_SRLOCK121_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK122_Pos    (26U)
#define BSEC_SRLOCK3_SRLOCK122_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK122_Pos)    /*!< 0x04000000 */
#define BSEC_SRLOCK3_SRLOCK122        BSEC_SRLOCK3_SRLOCK122_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK123_Pos    (27U)
#define BSEC_SRLOCK3_SRLOCK123_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK123_Pos)    /*!< 0x08000000 */
#define BSEC_SRLOCK3_SRLOCK123        BSEC_SRLOCK3_SRLOCK123_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK124_Pos    (28U)
#define BSEC_SRLOCK3_SRLOCK124_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK124_Pos)    /*!< 0x10000000 */
#define BSEC_SRLOCK3_SRLOCK124        BSEC_SRLOCK3_SRLOCK124_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK125_Pos    (29U)
#define BSEC_SRLOCK3_SRLOCK125_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK125_Pos)    /*!< 0x20000000 */
#define BSEC_SRLOCK3_SRLOCK125        BSEC_SRLOCK3_SRLOCK125_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK126_Pos    (30U)
#define BSEC_SRLOCK3_SRLOCK126_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK126_Pos)    /*!< 0x40000000 */
#define BSEC_SRLOCK3_SRLOCK126        BSEC_SRLOCK3_SRLOCK126_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK3_SRLOCK127_Pos    (31U)
#define BSEC_SRLOCK3_SRLOCK127_Msk    (0x1U << BSEC_SRLOCK3_SRLOCK127_Pos)    /*!< 0x80000000 */
#define BSEC_SRLOCK3_SRLOCK127        BSEC_SRLOCK3_SRLOCK127_Msk              /*!< sticky read lock for fuse word y (y=96 to 127)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK4 register  *****************/
#define BSEC_SRLOCK4_SRLOCK128_Pos    (0U)
#define BSEC_SRLOCK4_SRLOCK128_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK128_Pos)    /*!< 0x00000001 */
#define BSEC_SRLOCK4_SRLOCK128        BSEC_SRLOCK4_SRLOCK128_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK129_Pos    (1U)
#define BSEC_SRLOCK4_SRLOCK129_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK129_Pos)    /*!< 0x00000002 */
#define BSEC_SRLOCK4_SRLOCK129        BSEC_SRLOCK4_SRLOCK129_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK130_Pos    (2U)
#define BSEC_SRLOCK4_SRLOCK130_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK130_Pos)    /*!< 0x00000004 */
#define BSEC_SRLOCK4_SRLOCK130        BSEC_SRLOCK4_SRLOCK130_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK131_Pos    (3U)
#define BSEC_SRLOCK4_SRLOCK131_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK131_Pos)    /*!< 0x00000008 */
#define BSEC_SRLOCK4_SRLOCK131        BSEC_SRLOCK4_SRLOCK131_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK132_Pos    (4U)
#define BSEC_SRLOCK4_SRLOCK132_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK132_Pos)    /*!< 0x00000010 */
#define BSEC_SRLOCK4_SRLOCK132        BSEC_SRLOCK4_SRLOCK132_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK133_Pos    (5U)
#define BSEC_SRLOCK4_SRLOCK133_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK133_Pos)    /*!< 0x00000020 */
#define BSEC_SRLOCK4_SRLOCK133        BSEC_SRLOCK4_SRLOCK133_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK134_Pos    (6U)
#define BSEC_SRLOCK4_SRLOCK134_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK134_Pos)    /*!< 0x00000040 */
#define BSEC_SRLOCK4_SRLOCK134        BSEC_SRLOCK4_SRLOCK134_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK135_Pos    (7U)
#define BSEC_SRLOCK4_SRLOCK135_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK135_Pos)    /*!< 0x00000080 */
#define BSEC_SRLOCK4_SRLOCK135        BSEC_SRLOCK4_SRLOCK135_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK136_Pos    (8U)
#define BSEC_SRLOCK4_SRLOCK136_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK136_Pos)    /*!< 0x00000100 */
#define BSEC_SRLOCK4_SRLOCK136        BSEC_SRLOCK4_SRLOCK136_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK137_Pos    (9U)
#define BSEC_SRLOCK4_SRLOCK137_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK137_Pos)    /*!< 0x00000200 */
#define BSEC_SRLOCK4_SRLOCK137        BSEC_SRLOCK4_SRLOCK137_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK138_Pos    (10U)
#define BSEC_SRLOCK4_SRLOCK138_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK138_Pos)    /*!< 0x00000400 */
#define BSEC_SRLOCK4_SRLOCK138        BSEC_SRLOCK4_SRLOCK138_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK139_Pos    (11U)
#define BSEC_SRLOCK4_SRLOCK139_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK139_Pos)    /*!< 0x00000800 */
#define BSEC_SRLOCK4_SRLOCK139        BSEC_SRLOCK4_SRLOCK139_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK140_Pos    (12U)
#define BSEC_SRLOCK4_SRLOCK140_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK140_Pos)    /*!< 0x00001000 */
#define BSEC_SRLOCK4_SRLOCK140        BSEC_SRLOCK4_SRLOCK140_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK141_Pos    (13U)
#define BSEC_SRLOCK4_SRLOCK141_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK141_Pos)    /*!< 0x00002000 */
#define BSEC_SRLOCK4_SRLOCK141        BSEC_SRLOCK4_SRLOCK141_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK142_Pos    (14U)
#define BSEC_SRLOCK4_SRLOCK142_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK142_Pos)    /*!< 0x00004000 */
#define BSEC_SRLOCK4_SRLOCK142        BSEC_SRLOCK4_SRLOCK142_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK143_Pos    (15U)
#define BSEC_SRLOCK4_SRLOCK143_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK143_Pos)    /*!< 0x00008000 */
#define BSEC_SRLOCK4_SRLOCK143        BSEC_SRLOCK4_SRLOCK143_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK144_Pos    (16U)
#define BSEC_SRLOCK4_SRLOCK144_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK144_Pos)    /*!< 0x00010000 */
#define BSEC_SRLOCK4_SRLOCK144        BSEC_SRLOCK4_SRLOCK144_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK145_Pos    (17U)
#define BSEC_SRLOCK4_SRLOCK145_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK145_Pos)    /*!< 0x00020000 */
#define BSEC_SRLOCK4_SRLOCK145        BSEC_SRLOCK4_SRLOCK145_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK146_Pos    (18U)
#define BSEC_SRLOCK4_SRLOCK146_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK146_Pos)    /*!< 0x00040000 */
#define BSEC_SRLOCK4_SRLOCK146        BSEC_SRLOCK4_SRLOCK146_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK147_Pos    (19U)
#define BSEC_SRLOCK4_SRLOCK147_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK147_Pos)    /*!< 0x00080000 */
#define BSEC_SRLOCK4_SRLOCK147        BSEC_SRLOCK4_SRLOCK147_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK148_Pos    (20U)
#define BSEC_SRLOCK4_SRLOCK148_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK148_Pos)    /*!< 0x00100000 */
#define BSEC_SRLOCK4_SRLOCK148        BSEC_SRLOCK4_SRLOCK148_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK149_Pos    (21U)
#define BSEC_SRLOCK4_SRLOCK149_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK149_Pos)    /*!< 0x00200000 */
#define BSEC_SRLOCK4_SRLOCK149        BSEC_SRLOCK4_SRLOCK149_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK150_Pos    (22U)
#define BSEC_SRLOCK4_SRLOCK150_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK150_Pos)    /*!< 0x00400000 */
#define BSEC_SRLOCK4_SRLOCK150        BSEC_SRLOCK4_SRLOCK150_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK151_Pos    (23U)
#define BSEC_SRLOCK4_SRLOCK151_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK151_Pos)    /*!< 0x00800000 */
#define BSEC_SRLOCK4_SRLOCK151        BSEC_SRLOCK4_SRLOCK151_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK152_Pos    (24U)
#define BSEC_SRLOCK4_SRLOCK152_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK152_Pos)    /*!< 0x01000000 */
#define BSEC_SRLOCK4_SRLOCK152        BSEC_SRLOCK4_SRLOCK152_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK153_Pos    (25U)
#define BSEC_SRLOCK4_SRLOCK153_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK153_Pos)    /*!< 0x02000000 */
#define BSEC_SRLOCK4_SRLOCK153        BSEC_SRLOCK4_SRLOCK153_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK154_Pos    (26U)
#define BSEC_SRLOCK4_SRLOCK154_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK154_Pos)    /*!< 0x04000000 */
#define BSEC_SRLOCK4_SRLOCK154        BSEC_SRLOCK4_SRLOCK154_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK155_Pos    (27U)
#define BSEC_SRLOCK4_SRLOCK155_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK155_Pos)    /*!< 0x08000000 */
#define BSEC_SRLOCK4_SRLOCK155        BSEC_SRLOCK4_SRLOCK155_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK156_Pos    (28U)
#define BSEC_SRLOCK4_SRLOCK156_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK156_Pos)    /*!< 0x10000000 */
#define BSEC_SRLOCK4_SRLOCK156        BSEC_SRLOCK4_SRLOCK156_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK157_Pos    (29U)
#define BSEC_SRLOCK4_SRLOCK157_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK157_Pos)    /*!< 0x20000000 */
#define BSEC_SRLOCK4_SRLOCK157        BSEC_SRLOCK4_SRLOCK157_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK158_Pos    (30U)
#define BSEC_SRLOCK4_SRLOCK158_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK158_Pos)    /*!< 0x40000000 */
#define BSEC_SRLOCK4_SRLOCK158        BSEC_SRLOCK4_SRLOCK158_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK4_SRLOCK159_Pos    (31U)
#define BSEC_SRLOCK4_SRLOCK159_Msk    (0x1U << BSEC_SRLOCK4_SRLOCK159_Pos)    /*!< 0x80000000 */
#define BSEC_SRLOCK4_SRLOCK159        BSEC_SRLOCK4_SRLOCK159_Msk              /*!< sticky read lock for fuse word y (y=128 to 159)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK5 register  *****************/
#define BSEC_SRLOCK5_SRLOCK160_Pos    (0U)
#define BSEC_SRLOCK5_SRLOCK160_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK160_Pos)    /*!< 0x00000001 */
#define BSEC_SRLOCK5_SRLOCK160        BSEC_SRLOCK5_SRLOCK160_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK161_Pos    (1U)
#define BSEC_SRLOCK5_SRLOCK161_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK161_Pos)    /*!< 0x00000002 */
#define BSEC_SRLOCK5_SRLOCK161        BSEC_SRLOCK5_SRLOCK161_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK162_Pos    (2U)
#define BSEC_SRLOCK5_SRLOCK162_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK162_Pos)    /*!< 0x00000004 */
#define BSEC_SRLOCK5_SRLOCK162        BSEC_SRLOCK5_SRLOCK162_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK163_Pos    (3U)
#define BSEC_SRLOCK5_SRLOCK163_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK163_Pos)    /*!< 0x00000008 */
#define BSEC_SRLOCK5_SRLOCK163        BSEC_SRLOCK5_SRLOCK163_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK164_Pos    (4U)
#define BSEC_SRLOCK5_SRLOCK164_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK164_Pos)    /*!< 0x00000010 */
#define BSEC_SRLOCK5_SRLOCK164        BSEC_SRLOCK5_SRLOCK164_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK165_Pos    (5U)
#define BSEC_SRLOCK5_SRLOCK165_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK165_Pos)    /*!< 0x00000020 */
#define BSEC_SRLOCK5_SRLOCK165        BSEC_SRLOCK5_SRLOCK165_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK166_Pos    (6U)
#define BSEC_SRLOCK5_SRLOCK166_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK166_Pos)    /*!< 0x00000040 */
#define BSEC_SRLOCK5_SRLOCK166        BSEC_SRLOCK5_SRLOCK166_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK167_Pos    (7U)
#define BSEC_SRLOCK5_SRLOCK167_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK167_Pos)    /*!< 0x00000080 */
#define BSEC_SRLOCK5_SRLOCK167        BSEC_SRLOCK5_SRLOCK167_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK168_Pos    (8U)
#define BSEC_SRLOCK5_SRLOCK168_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK168_Pos)    /*!< 0x00000100 */
#define BSEC_SRLOCK5_SRLOCK168        BSEC_SRLOCK5_SRLOCK168_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK169_Pos    (9U)
#define BSEC_SRLOCK5_SRLOCK169_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK169_Pos)    /*!< 0x00000200 */
#define BSEC_SRLOCK5_SRLOCK169        BSEC_SRLOCK5_SRLOCK169_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK170_Pos    (10U)
#define BSEC_SRLOCK5_SRLOCK170_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK170_Pos)    /*!< 0x00000400 */
#define BSEC_SRLOCK5_SRLOCK170        BSEC_SRLOCK5_SRLOCK170_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK171_Pos    (11U)
#define BSEC_SRLOCK5_SRLOCK171_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK171_Pos)    /*!< 0x00000800 */
#define BSEC_SRLOCK5_SRLOCK171        BSEC_SRLOCK5_SRLOCK171_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK172_Pos    (12U)
#define BSEC_SRLOCK5_SRLOCK172_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK172_Pos)    /*!< 0x00001000 */
#define BSEC_SRLOCK5_SRLOCK172        BSEC_SRLOCK5_SRLOCK172_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK173_Pos    (13U)
#define BSEC_SRLOCK5_SRLOCK173_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK173_Pos)    /*!< 0x00002000 */
#define BSEC_SRLOCK5_SRLOCK173        BSEC_SRLOCK5_SRLOCK173_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK174_Pos    (14U)
#define BSEC_SRLOCK5_SRLOCK174_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK174_Pos)    /*!< 0x00004000 */
#define BSEC_SRLOCK5_SRLOCK174        BSEC_SRLOCK5_SRLOCK174_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK175_Pos    (15U)
#define BSEC_SRLOCK5_SRLOCK175_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK175_Pos)    /*!< 0x00008000 */
#define BSEC_SRLOCK5_SRLOCK175        BSEC_SRLOCK5_SRLOCK175_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK176_Pos    (16U)
#define BSEC_SRLOCK5_SRLOCK176_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK176_Pos)    /*!< 0x00010000 */
#define BSEC_SRLOCK5_SRLOCK176        BSEC_SRLOCK5_SRLOCK176_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK177_Pos    (17U)
#define BSEC_SRLOCK5_SRLOCK177_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK177_Pos)    /*!< 0x00020000 */
#define BSEC_SRLOCK5_SRLOCK177        BSEC_SRLOCK5_SRLOCK177_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK178_Pos    (18U)
#define BSEC_SRLOCK5_SRLOCK178_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK178_Pos)    /*!< 0x00040000 */
#define BSEC_SRLOCK5_SRLOCK178        BSEC_SRLOCK5_SRLOCK178_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK179_Pos    (19U)
#define BSEC_SRLOCK5_SRLOCK179_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK179_Pos)    /*!< 0x00080000 */
#define BSEC_SRLOCK5_SRLOCK179        BSEC_SRLOCK5_SRLOCK179_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK180_Pos    (20U)
#define BSEC_SRLOCK5_SRLOCK180_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK180_Pos)    /*!< 0x00100000 */
#define BSEC_SRLOCK5_SRLOCK180        BSEC_SRLOCK5_SRLOCK180_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK181_Pos    (21U)
#define BSEC_SRLOCK5_SRLOCK181_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK181_Pos)    /*!< 0x00200000 */
#define BSEC_SRLOCK5_SRLOCK181        BSEC_SRLOCK5_SRLOCK181_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK182_Pos    (22U)
#define BSEC_SRLOCK5_SRLOCK182_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK182_Pos)    /*!< 0x00400000 */
#define BSEC_SRLOCK5_SRLOCK182        BSEC_SRLOCK5_SRLOCK182_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK183_Pos    (23U)
#define BSEC_SRLOCK5_SRLOCK183_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK183_Pos)    /*!< 0x00800000 */
#define BSEC_SRLOCK5_SRLOCK183        BSEC_SRLOCK5_SRLOCK183_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK184_Pos    (24U)
#define BSEC_SRLOCK5_SRLOCK184_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK184_Pos)    /*!< 0x01000000 */
#define BSEC_SRLOCK5_SRLOCK184        BSEC_SRLOCK5_SRLOCK184_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK185_Pos    (25U)
#define BSEC_SRLOCK5_SRLOCK185_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK185_Pos)    /*!< 0x02000000 */
#define BSEC_SRLOCK5_SRLOCK185        BSEC_SRLOCK5_SRLOCK185_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK186_Pos    (26U)
#define BSEC_SRLOCK5_SRLOCK186_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK186_Pos)    /*!< 0x04000000 */
#define BSEC_SRLOCK5_SRLOCK186        BSEC_SRLOCK5_SRLOCK186_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK187_Pos    (27U)
#define BSEC_SRLOCK5_SRLOCK187_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK187_Pos)    /*!< 0x08000000 */
#define BSEC_SRLOCK5_SRLOCK187        BSEC_SRLOCK5_SRLOCK187_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK188_Pos    (28U)
#define BSEC_SRLOCK5_SRLOCK188_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK188_Pos)    /*!< 0x10000000 */
#define BSEC_SRLOCK5_SRLOCK188        BSEC_SRLOCK5_SRLOCK188_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK189_Pos    (29U)
#define BSEC_SRLOCK5_SRLOCK189_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK189_Pos)    /*!< 0x20000000 */
#define BSEC_SRLOCK5_SRLOCK189        BSEC_SRLOCK5_SRLOCK189_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK190_Pos    (30U)
#define BSEC_SRLOCK5_SRLOCK190_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK190_Pos)    /*!< 0x40000000 */
#define BSEC_SRLOCK5_SRLOCK190        BSEC_SRLOCK5_SRLOCK190_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK5_SRLOCK191_Pos    (31U)
#define BSEC_SRLOCK5_SRLOCK191_Msk    (0x1U << BSEC_SRLOCK5_SRLOCK191_Pos)    /*!< 0x80000000 */
#define BSEC_SRLOCK5_SRLOCK191        BSEC_SRLOCK5_SRLOCK191_Msk              /*!< sticky read lock for fuse word y (y=160 to 191)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK6 register  *****************/
#define BSEC_SRLOCK6_SRLOCK192_Pos    (0U)
#define BSEC_SRLOCK6_SRLOCK192_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK192_Pos)    /*!< 0x00000001 */
#define BSEC_SRLOCK6_SRLOCK192        BSEC_SRLOCK6_SRLOCK192_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK193_Pos    (1U)
#define BSEC_SRLOCK6_SRLOCK193_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK193_Pos)    /*!< 0x00000002 */
#define BSEC_SRLOCK6_SRLOCK193        BSEC_SRLOCK6_SRLOCK193_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK194_Pos    (2U)
#define BSEC_SRLOCK6_SRLOCK194_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK194_Pos)    /*!< 0x00000004 */
#define BSEC_SRLOCK6_SRLOCK194        BSEC_SRLOCK6_SRLOCK194_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK195_Pos    (3U)
#define BSEC_SRLOCK6_SRLOCK195_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK195_Pos)    /*!< 0x00000008 */
#define BSEC_SRLOCK6_SRLOCK195        BSEC_SRLOCK6_SRLOCK195_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK196_Pos    (4U)
#define BSEC_SRLOCK6_SRLOCK196_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK196_Pos)    /*!< 0x00000010 */
#define BSEC_SRLOCK6_SRLOCK196        BSEC_SRLOCK6_SRLOCK196_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK197_Pos    (5U)
#define BSEC_SRLOCK6_SRLOCK197_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK197_Pos)    /*!< 0x00000020 */
#define BSEC_SRLOCK6_SRLOCK197        BSEC_SRLOCK6_SRLOCK197_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK198_Pos    (6U)
#define BSEC_SRLOCK6_SRLOCK198_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK198_Pos)    /*!< 0x00000040 */
#define BSEC_SRLOCK6_SRLOCK198        BSEC_SRLOCK6_SRLOCK198_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK199_Pos    (7U)
#define BSEC_SRLOCK6_SRLOCK199_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK199_Pos)    /*!< 0x00000080 */
#define BSEC_SRLOCK6_SRLOCK199        BSEC_SRLOCK6_SRLOCK199_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK200_Pos    (8U)
#define BSEC_SRLOCK6_SRLOCK200_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK200_Pos)    /*!< 0x00000100 */
#define BSEC_SRLOCK6_SRLOCK200        BSEC_SRLOCK6_SRLOCK200_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK201_Pos    (9U)
#define BSEC_SRLOCK6_SRLOCK201_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK201_Pos)    /*!< 0x00000200 */
#define BSEC_SRLOCK6_SRLOCK201        BSEC_SRLOCK6_SRLOCK201_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK202_Pos    (10U)
#define BSEC_SRLOCK6_SRLOCK202_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK202_Pos)    /*!< 0x00000400 */
#define BSEC_SRLOCK6_SRLOCK202        BSEC_SRLOCK6_SRLOCK202_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK203_Pos    (11U)
#define BSEC_SRLOCK6_SRLOCK203_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK203_Pos)    /*!< 0x00000800 */
#define BSEC_SRLOCK6_SRLOCK203        BSEC_SRLOCK6_SRLOCK203_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK204_Pos    (12U)
#define BSEC_SRLOCK6_SRLOCK204_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK204_Pos)    /*!< 0x00001000 */
#define BSEC_SRLOCK6_SRLOCK204        BSEC_SRLOCK6_SRLOCK204_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK205_Pos    (13U)
#define BSEC_SRLOCK6_SRLOCK205_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK205_Pos)    /*!< 0x00002000 */
#define BSEC_SRLOCK6_SRLOCK205        BSEC_SRLOCK6_SRLOCK205_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK206_Pos    (14U)
#define BSEC_SRLOCK6_SRLOCK206_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK206_Pos)    /*!< 0x00004000 */
#define BSEC_SRLOCK6_SRLOCK206        BSEC_SRLOCK6_SRLOCK206_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK207_Pos    (15U)
#define BSEC_SRLOCK6_SRLOCK207_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK207_Pos)    /*!< 0x00008000 */
#define BSEC_SRLOCK6_SRLOCK207        BSEC_SRLOCK6_SRLOCK207_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK208_Pos    (16U)
#define BSEC_SRLOCK6_SRLOCK208_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK208_Pos)    /*!< 0x00010000 */
#define BSEC_SRLOCK6_SRLOCK208        BSEC_SRLOCK6_SRLOCK208_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK209_Pos    (17U)
#define BSEC_SRLOCK6_SRLOCK209_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK209_Pos)    /*!< 0x00020000 */
#define BSEC_SRLOCK6_SRLOCK209        BSEC_SRLOCK6_SRLOCK209_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK210_Pos    (18U)
#define BSEC_SRLOCK6_SRLOCK210_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK210_Pos)    /*!< 0x00040000 */
#define BSEC_SRLOCK6_SRLOCK210        BSEC_SRLOCK6_SRLOCK210_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK211_Pos    (19U)
#define BSEC_SRLOCK6_SRLOCK211_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK211_Pos)    /*!< 0x00080000 */
#define BSEC_SRLOCK6_SRLOCK211        BSEC_SRLOCK6_SRLOCK211_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK212_Pos    (20U)
#define BSEC_SRLOCK6_SRLOCK212_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK212_Pos)    /*!< 0x00100000 */
#define BSEC_SRLOCK6_SRLOCK212        BSEC_SRLOCK6_SRLOCK212_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK213_Pos    (21U)
#define BSEC_SRLOCK6_SRLOCK213_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK213_Pos)    /*!< 0x00200000 */
#define BSEC_SRLOCK6_SRLOCK213        BSEC_SRLOCK6_SRLOCK213_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK214_Pos    (22U)
#define BSEC_SRLOCK6_SRLOCK214_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK214_Pos)    /*!< 0x00400000 */
#define BSEC_SRLOCK6_SRLOCK214        BSEC_SRLOCK6_SRLOCK214_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK215_Pos    (23U)
#define BSEC_SRLOCK6_SRLOCK215_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK215_Pos)    /*!< 0x00800000 */
#define BSEC_SRLOCK6_SRLOCK215        BSEC_SRLOCK6_SRLOCK215_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK216_Pos    (24U)
#define BSEC_SRLOCK6_SRLOCK216_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK216_Pos)    /*!< 0x01000000 */
#define BSEC_SRLOCK6_SRLOCK216        BSEC_SRLOCK6_SRLOCK216_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK217_Pos    (25U)
#define BSEC_SRLOCK6_SRLOCK217_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK217_Pos)    /*!< 0x02000000 */
#define BSEC_SRLOCK6_SRLOCK217        BSEC_SRLOCK6_SRLOCK217_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK218_Pos    (26U)
#define BSEC_SRLOCK6_SRLOCK218_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK218_Pos)    /*!< 0x04000000 */
#define BSEC_SRLOCK6_SRLOCK218        BSEC_SRLOCK6_SRLOCK218_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK219_Pos    (27U)
#define BSEC_SRLOCK6_SRLOCK219_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK219_Pos)    /*!< 0x08000000 */
#define BSEC_SRLOCK6_SRLOCK219        BSEC_SRLOCK6_SRLOCK219_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK220_Pos    (28U)
#define BSEC_SRLOCK6_SRLOCK220_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK220_Pos)    /*!< 0x10000000 */
#define BSEC_SRLOCK6_SRLOCK220        BSEC_SRLOCK6_SRLOCK220_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK221_Pos    (29U)
#define BSEC_SRLOCK6_SRLOCK221_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK221_Pos)    /*!< 0x20000000 */
#define BSEC_SRLOCK6_SRLOCK221        BSEC_SRLOCK6_SRLOCK221_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK222_Pos    (30U)
#define BSEC_SRLOCK6_SRLOCK222_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK222_Pos)    /*!< 0x40000000 */
#define BSEC_SRLOCK6_SRLOCK222        BSEC_SRLOCK6_SRLOCK222_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK6_SRLOCK223_Pos    (31U)
#define BSEC_SRLOCK6_SRLOCK223_Msk    (0x1U << BSEC_SRLOCK6_SRLOCK223_Pos)    /*!< 0x80000000 */
#define BSEC_SRLOCK6_SRLOCK223        BSEC_SRLOCK6_SRLOCK223_Msk              /*!< sticky read lock for word y (y=192 to 223)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK7 register  *****************/
#define BSEC_SRLOCK7_SRLOCK224_Pos    (0U)
#define BSEC_SRLOCK7_SRLOCK224_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK224_Pos)    /*!< 0x00000001 */
#define BSEC_SRLOCK7_SRLOCK224        BSEC_SRLOCK7_SRLOCK224_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK225_Pos    (1U)
#define BSEC_SRLOCK7_SRLOCK225_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK225_Pos)    /*!< 0x00000002 */
#define BSEC_SRLOCK7_SRLOCK225        BSEC_SRLOCK7_SRLOCK225_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK226_Pos    (2U)
#define BSEC_SRLOCK7_SRLOCK226_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK226_Pos)    /*!< 0x00000004 */
#define BSEC_SRLOCK7_SRLOCK226        BSEC_SRLOCK7_SRLOCK226_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK227_Pos    (3U)
#define BSEC_SRLOCK7_SRLOCK227_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK227_Pos)    /*!< 0x00000008 */
#define BSEC_SRLOCK7_SRLOCK227        BSEC_SRLOCK7_SRLOCK227_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK228_Pos    (4U)
#define BSEC_SRLOCK7_SRLOCK228_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK228_Pos)    /*!< 0x00000010 */
#define BSEC_SRLOCK7_SRLOCK228        BSEC_SRLOCK7_SRLOCK228_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK229_Pos    (5U)
#define BSEC_SRLOCK7_SRLOCK229_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK229_Pos)    /*!< 0x00000020 */
#define BSEC_SRLOCK7_SRLOCK229        BSEC_SRLOCK7_SRLOCK229_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK230_Pos    (6U)
#define BSEC_SRLOCK7_SRLOCK230_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK230_Pos)    /*!< 0x00000040 */
#define BSEC_SRLOCK7_SRLOCK230        BSEC_SRLOCK7_SRLOCK230_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK231_Pos    (7U)
#define BSEC_SRLOCK7_SRLOCK231_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK231_Pos)    /*!< 0x00000080 */
#define BSEC_SRLOCK7_SRLOCK231        BSEC_SRLOCK7_SRLOCK231_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK232_Pos    (8U)
#define BSEC_SRLOCK7_SRLOCK232_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK232_Pos)    /*!< 0x00000100 */
#define BSEC_SRLOCK7_SRLOCK232        BSEC_SRLOCK7_SRLOCK232_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK233_Pos    (9U)
#define BSEC_SRLOCK7_SRLOCK233_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK233_Pos)    /*!< 0x00000200 */
#define BSEC_SRLOCK7_SRLOCK233        BSEC_SRLOCK7_SRLOCK233_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK234_Pos    (10U)
#define BSEC_SRLOCK7_SRLOCK234_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK234_Pos)    /*!< 0x00000400 */
#define BSEC_SRLOCK7_SRLOCK234        BSEC_SRLOCK7_SRLOCK234_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK235_Pos    (11U)
#define BSEC_SRLOCK7_SRLOCK235_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK235_Pos)    /*!< 0x00000800 */
#define BSEC_SRLOCK7_SRLOCK235        BSEC_SRLOCK7_SRLOCK235_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK236_Pos    (12U)
#define BSEC_SRLOCK7_SRLOCK236_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK236_Pos)    /*!< 0x00001000 */
#define BSEC_SRLOCK7_SRLOCK236        BSEC_SRLOCK7_SRLOCK236_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK237_Pos    (13U)
#define BSEC_SRLOCK7_SRLOCK237_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK237_Pos)    /*!< 0x00002000 */
#define BSEC_SRLOCK7_SRLOCK237        BSEC_SRLOCK7_SRLOCK237_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK238_Pos    (14U)
#define BSEC_SRLOCK7_SRLOCK238_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK238_Pos)    /*!< 0x00004000 */
#define BSEC_SRLOCK7_SRLOCK238        BSEC_SRLOCK7_SRLOCK238_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK239_Pos    (15U)
#define BSEC_SRLOCK7_SRLOCK239_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK239_Pos)    /*!< 0x00008000 */
#define BSEC_SRLOCK7_SRLOCK239        BSEC_SRLOCK7_SRLOCK239_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK240_Pos    (16U)
#define BSEC_SRLOCK7_SRLOCK240_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK240_Pos)    /*!< 0x00010000 */
#define BSEC_SRLOCK7_SRLOCK240        BSEC_SRLOCK7_SRLOCK240_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK241_Pos    (17U)
#define BSEC_SRLOCK7_SRLOCK241_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK241_Pos)    /*!< 0x00020000 */
#define BSEC_SRLOCK7_SRLOCK241        BSEC_SRLOCK7_SRLOCK241_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK242_Pos    (18U)
#define BSEC_SRLOCK7_SRLOCK242_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK242_Pos)    /*!< 0x00040000 */
#define BSEC_SRLOCK7_SRLOCK242        BSEC_SRLOCK7_SRLOCK242_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK243_Pos    (19U)
#define BSEC_SRLOCK7_SRLOCK243_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK243_Pos)    /*!< 0x00080000 */
#define BSEC_SRLOCK7_SRLOCK243        BSEC_SRLOCK7_SRLOCK243_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK244_Pos    (20U)
#define BSEC_SRLOCK7_SRLOCK244_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK244_Pos)    /*!< 0x00100000 */
#define BSEC_SRLOCK7_SRLOCK244        BSEC_SRLOCK7_SRLOCK244_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK245_Pos    (21U)
#define BSEC_SRLOCK7_SRLOCK245_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK245_Pos)    /*!< 0x00200000 */
#define BSEC_SRLOCK7_SRLOCK245        BSEC_SRLOCK7_SRLOCK245_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK246_Pos    (22U)
#define BSEC_SRLOCK7_SRLOCK246_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK246_Pos)    /*!< 0x00400000 */
#define BSEC_SRLOCK7_SRLOCK246        BSEC_SRLOCK7_SRLOCK246_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK247_Pos    (23U)
#define BSEC_SRLOCK7_SRLOCK247_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK247_Pos)    /*!< 0x00800000 */
#define BSEC_SRLOCK7_SRLOCK247        BSEC_SRLOCK7_SRLOCK247_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK248_Pos    (24U)
#define BSEC_SRLOCK7_SRLOCK248_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK248_Pos)    /*!< 0x01000000 */
#define BSEC_SRLOCK7_SRLOCK248        BSEC_SRLOCK7_SRLOCK248_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK249_Pos    (25U)
#define BSEC_SRLOCK7_SRLOCK249_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK249_Pos)    /*!< 0x02000000 */
#define BSEC_SRLOCK7_SRLOCK249        BSEC_SRLOCK7_SRLOCK249_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK250_Pos    (26U)
#define BSEC_SRLOCK7_SRLOCK250_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK250_Pos)    /*!< 0x04000000 */
#define BSEC_SRLOCK7_SRLOCK250        BSEC_SRLOCK7_SRLOCK250_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK251_Pos    (27U)
#define BSEC_SRLOCK7_SRLOCK251_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK251_Pos)    /*!< 0x08000000 */
#define BSEC_SRLOCK7_SRLOCK251        BSEC_SRLOCK7_SRLOCK251_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK252_Pos    (28U)
#define BSEC_SRLOCK7_SRLOCK252_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK252_Pos)    /*!< 0x10000000 */
#define BSEC_SRLOCK7_SRLOCK252        BSEC_SRLOCK7_SRLOCK252_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK253_Pos    (29U)
#define BSEC_SRLOCK7_SRLOCK253_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK253_Pos)    /*!< 0x20000000 */
#define BSEC_SRLOCK7_SRLOCK253        BSEC_SRLOCK7_SRLOCK253_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK254_Pos    (30U)
#define BSEC_SRLOCK7_SRLOCK254_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK254_Pos)    /*!< 0x40000000 */
#define BSEC_SRLOCK7_SRLOCK254        BSEC_SRLOCK7_SRLOCK254_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK7_SRLOCK255_Pos    (31U)
#define BSEC_SRLOCK7_SRLOCK255_Msk    (0x1U << BSEC_SRLOCK7_SRLOCK255_Pos)    /*!< 0x80000000 */
#define BSEC_SRLOCK7_SRLOCK255        BSEC_SRLOCK7_SRLOCK255_Msk              /*!< sticky read lock for word y (y=224 to 255)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK8 register  *****************/
#define BSEC_SRLOCK8_SRLOCK256_Pos    (0U)
#define BSEC_SRLOCK8_SRLOCK256_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK256_Pos)    /*!< 0x00000001 */
#define BSEC_SRLOCK8_SRLOCK256        BSEC_SRLOCK8_SRLOCK256_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK257_Pos    (1U)
#define BSEC_SRLOCK8_SRLOCK257_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK257_Pos)    /*!< 0x00000002 */
#define BSEC_SRLOCK8_SRLOCK257        BSEC_SRLOCK8_SRLOCK257_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK258_Pos    (2U)
#define BSEC_SRLOCK8_SRLOCK258_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK258_Pos)    /*!< 0x00000004 */
#define BSEC_SRLOCK8_SRLOCK258        BSEC_SRLOCK8_SRLOCK258_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK259_Pos    (3U)
#define BSEC_SRLOCK8_SRLOCK259_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK259_Pos)    /*!< 0x00000008 */
#define BSEC_SRLOCK8_SRLOCK259        BSEC_SRLOCK8_SRLOCK259_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK260_Pos    (4U)
#define BSEC_SRLOCK8_SRLOCK260_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK260_Pos)    /*!< 0x00000010 */
#define BSEC_SRLOCK8_SRLOCK260        BSEC_SRLOCK8_SRLOCK260_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK261_Pos    (5U)
#define BSEC_SRLOCK8_SRLOCK261_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK261_Pos)    /*!< 0x00000020 */
#define BSEC_SRLOCK8_SRLOCK261        BSEC_SRLOCK8_SRLOCK261_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK262_Pos    (6U)
#define BSEC_SRLOCK8_SRLOCK262_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK262_Pos)    /*!< 0x00000040 */
#define BSEC_SRLOCK8_SRLOCK262        BSEC_SRLOCK8_SRLOCK262_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK263_Pos    (7U)
#define BSEC_SRLOCK8_SRLOCK263_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK263_Pos)    /*!< 0x00000080 */
#define BSEC_SRLOCK8_SRLOCK263        BSEC_SRLOCK8_SRLOCK263_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK264_Pos    (8U)
#define BSEC_SRLOCK8_SRLOCK264_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK264_Pos)    /*!< 0x00000100 */
#define BSEC_SRLOCK8_SRLOCK264        BSEC_SRLOCK8_SRLOCK264_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK265_Pos    (9U)
#define BSEC_SRLOCK8_SRLOCK265_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK265_Pos)    /*!< 0x00000200 */
#define BSEC_SRLOCK8_SRLOCK265        BSEC_SRLOCK8_SRLOCK265_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK266_Pos    (10U)
#define BSEC_SRLOCK8_SRLOCK266_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK266_Pos)    /*!< 0x00000400 */
#define BSEC_SRLOCK8_SRLOCK266        BSEC_SRLOCK8_SRLOCK266_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK267_Pos    (11U)
#define BSEC_SRLOCK8_SRLOCK267_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK267_Pos)    /*!< 0x00000800 */
#define BSEC_SRLOCK8_SRLOCK267        BSEC_SRLOCK8_SRLOCK267_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK268_Pos    (12U)
#define BSEC_SRLOCK8_SRLOCK268_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK268_Pos)    /*!< 0x00001000 */
#define BSEC_SRLOCK8_SRLOCK268        BSEC_SRLOCK8_SRLOCK268_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK269_Pos    (13U)
#define BSEC_SRLOCK8_SRLOCK269_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK269_Pos)    /*!< 0x00002000 */
#define BSEC_SRLOCK8_SRLOCK269        BSEC_SRLOCK8_SRLOCK269_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK270_Pos    (14U)
#define BSEC_SRLOCK8_SRLOCK270_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK270_Pos)    /*!< 0x00004000 */
#define BSEC_SRLOCK8_SRLOCK270        BSEC_SRLOCK8_SRLOCK270_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK271_Pos    (15U)
#define BSEC_SRLOCK8_SRLOCK271_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK271_Pos)    /*!< 0x00008000 */
#define BSEC_SRLOCK8_SRLOCK271        BSEC_SRLOCK8_SRLOCK271_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK272_Pos    (16U)
#define BSEC_SRLOCK8_SRLOCK272_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK272_Pos)    /*!< 0x00010000 */
#define BSEC_SRLOCK8_SRLOCK272        BSEC_SRLOCK8_SRLOCK272_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK273_Pos    (17U)
#define BSEC_SRLOCK8_SRLOCK273_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK273_Pos)    /*!< 0x00020000 */
#define BSEC_SRLOCK8_SRLOCK273        BSEC_SRLOCK8_SRLOCK273_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK274_Pos    (18U)
#define BSEC_SRLOCK8_SRLOCK274_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK274_Pos)    /*!< 0x00040000 */
#define BSEC_SRLOCK8_SRLOCK274        BSEC_SRLOCK8_SRLOCK274_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK275_Pos    (19U)
#define BSEC_SRLOCK8_SRLOCK275_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK275_Pos)    /*!< 0x00080000 */
#define BSEC_SRLOCK8_SRLOCK275        BSEC_SRLOCK8_SRLOCK275_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK276_Pos    (20U)
#define BSEC_SRLOCK8_SRLOCK276_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK276_Pos)    /*!< 0x00100000 */
#define BSEC_SRLOCK8_SRLOCK276        BSEC_SRLOCK8_SRLOCK276_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK277_Pos    (21U)
#define BSEC_SRLOCK8_SRLOCK277_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK277_Pos)    /*!< 0x00200000 */
#define BSEC_SRLOCK8_SRLOCK277        BSEC_SRLOCK8_SRLOCK277_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK278_Pos    (22U)
#define BSEC_SRLOCK8_SRLOCK278_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK278_Pos)    /*!< 0x00400000 */
#define BSEC_SRLOCK8_SRLOCK278        BSEC_SRLOCK8_SRLOCK278_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK279_Pos    (23U)
#define BSEC_SRLOCK8_SRLOCK279_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK279_Pos)    /*!< 0x00800000 */
#define BSEC_SRLOCK8_SRLOCK279        BSEC_SRLOCK8_SRLOCK279_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK280_Pos    (24U)
#define BSEC_SRLOCK8_SRLOCK280_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK280_Pos)    /*!< 0x01000000 */
#define BSEC_SRLOCK8_SRLOCK280        BSEC_SRLOCK8_SRLOCK280_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK281_Pos    (25U)
#define BSEC_SRLOCK8_SRLOCK281_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK281_Pos)    /*!< 0x02000000 */
#define BSEC_SRLOCK8_SRLOCK281        BSEC_SRLOCK8_SRLOCK281_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK282_Pos    (26U)
#define BSEC_SRLOCK8_SRLOCK282_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK282_Pos)    /*!< 0x04000000 */
#define BSEC_SRLOCK8_SRLOCK282        BSEC_SRLOCK8_SRLOCK282_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK283_Pos    (27U)
#define BSEC_SRLOCK8_SRLOCK283_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK283_Pos)    /*!< 0x08000000 */
#define BSEC_SRLOCK8_SRLOCK283        BSEC_SRLOCK8_SRLOCK283_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK284_Pos    (28U)
#define BSEC_SRLOCK8_SRLOCK284_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK284_Pos)    /*!< 0x10000000 */
#define BSEC_SRLOCK8_SRLOCK284        BSEC_SRLOCK8_SRLOCK284_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK285_Pos    (29U)
#define BSEC_SRLOCK8_SRLOCK285_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK285_Pos)    /*!< 0x20000000 */
#define BSEC_SRLOCK8_SRLOCK285        BSEC_SRLOCK8_SRLOCK285_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK286_Pos    (30U)
#define BSEC_SRLOCK8_SRLOCK286_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK286_Pos)    /*!< 0x40000000 */
#define BSEC_SRLOCK8_SRLOCK286        BSEC_SRLOCK8_SRLOCK286_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK8_SRLOCK287_Pos    (31U)
#define BSEC_SRLOCK8_SRLOCK287_Msk    (0x1U << BSEC_SRLOCK8_SRLOCK287_Pos)    /*!< 0x80000000 */
#define BSEC_SRLOCK8_SRLOCK287        BSEC_SRLOCK8_SRLOCK287_Msk              /*!< sticky read lock for word y (y=256 to 287)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/*****************  Bit definition for BSEC_SRLOCK9 register  *****************/
#define BSEC_SRLOCK9_SRLOCK288_Pos    (0U)
#define BSEC_SRLOCK9_SRLOCK288_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK288_Pos)    /*!< 0x00000001 */
#define BSEC_SRLOCK9_SRLOCK288        BSEC_SRLOCK9_SRLOCK288_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK289_Pos    (1U)
#define BSEC_SRLOCK9_SRLOCK289_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK289_Pos)    /*!< 0x00000002 */
#define BSEC_SRLOCK9_SRLOCK289        BSEC_SRLOCK9_SRLOCK289_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK290_Pos    (2U)
#define BSEC_SRLOCK9_SRLOCK290_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK290_Pos)    /*!< 0x00000004 */
#define BSEC_SRLOCK9_SRLOCK290        BSEC_SRLOCK9_SRLOCK290_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK291_Pos    (3U)
#define BSEC_SRLOCK9_SRLOCK291_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK291_Pos)    /*!< 0x00000008 */
#define BSEC_SRLOCK9_SRLOCK291        BSEC_SRLOCK9_SRLOCK291_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK292_Pos    (4U)
#define BSEC_SRLOCK9_SRLOCK292_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK292_Pos)    /*!< 0x00000010 */
#define BSEC_SRLOCK9_SRLOCK292        BSEC_SRLOCK9_SRLOCK292_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK293_Pos    (5U)
#define BSEC_SRLOCK9_SRLOCK293_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK293_Pos)    /*!< 0x00000020 */
#define BSEC_SRLOCK9_SRLOCK293        BSEC_SRLOCK9_SRLOCK293_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK294_Pos    (6U)
#define BSEC_SRLOCK9_SRLOCK294_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK294_Pos)    /*!< 0x00000040 */
#define BSEC_SRLOCK9_SRLOCK294        BSEC_SRLOCK9_SRLOCK294_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK295_Pos    (7U)
#define BSEC_SRLOCK9_SRLOCK295_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK295_Pos)    /*!< 0x00000080 */
#define BSEC_SRLOCK9_SRLOCK295        BSEC_SRLOCK9_SRLOCK295_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK296_Pos    (8U)
#define BSEC_SRLOCK9_SRLOCK296_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK296_Pos)    /*!< 0x00000100 */
#define BSEC_SRLOCK9_SRLOCK296        BSEC_SRLOCK9_SRLOCK296_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK297_Pos    (9U)
#define BSEC_SRLOCK9_SRLOCK297_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK297_Pos)    /*!< 0x00000200 */
#define BSEC_SRLOCK9_SRLOCK297        BSEC_SRLOCK9_SRLOCK297_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK298_Pos    (10U)
#define BSEC_SRLOCK9_SRLOCK298_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK298_Pos)    /*!< 0x00000400 */
#define BSEC_SRLOCK9_SRLOCK298        BSEC_SRLOCK9_SRLOCK298_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK299_Pos    (11U)
#define BSEC_SRLOCK9_SRLOCK299_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK299_Pos)    /*!< 0x00000800 */
#define BSEC_SRLOCK9_SRLOCK299        BSEC_SRLOCK9_SRLOCK299_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK300_Pos    (12U)
#define BSEC_SRLOCK9_SRLOCK300_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK300_Pos)    /*!< 0x00001000 */
#define BSEC_SRLOCK9_SRLOCK300        BSEC_SRLOCK9_SRLOCK300_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK301_Pos    (13U)
#define BSEC_SRLOCK9_SRLOCK301_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK301_Pos)    /*!< 0x00002000 */
#define BSEC_SRLOCK9_SRLOCK301        BSEC_SRLOCK9_SRLOCK301_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK302_Pos    (14U)
#define BSEC_SRLOCK9_SRLOCK302_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK302_Pos)    /*!< 0x00004000 */
#define BSEC_SRLOCK9_SRLOCK302        BSEC_SRLOCK9_SRLOCK302_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK303_Pos    (15U)
#define BSEC_SRLOCK9_SRLOCK303_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK303_Pos)    /*!< 0x00008000 */
#define BSEC_SRLOCK9_SRLOCK303        BSEC_SRLOCK9_SRLOCK303_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK304_Pos    (16U)
#define BSEC_SRLOCK9_SRLOCK304_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK304_Pos)    /*!< 0x00010000 */
#define BSEC_SRLOCK9_SRLOCK304        BSEC_SRLOCK9_SRLOCK304_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK305_Pos    (17U)
#define BSEC_SRLOCK9_SRLOCK305_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK305_Pos)    /*!< 0x00020000 */
#define BSEC_SRLOCK9_SRLOCK305        BSEC_SRLOCK9_SRLOCK305_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK306_Pos    (18U)
#define BSEC_SRLOCK9_SRLOCK306_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK306_Pos)    /*!< 0x00040000 */
#define BSEC_SRLOCK9_SRLOCK306        BSEC_SRLOCK9_SRLOCK306_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK307_Pos    (19U)
#define BSEC_SRLOCK9_SRLOCK307_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK307_Pos)    /*!< 0x00080000 */
#define BSEC_SRLOCK9_SRLOCK307        BSEC_SRLOCK9_SRLOCK307_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK308_Pos    (20U)
#define BSEC_SRLOCK9_SRLOCK308_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK308_Pos)    /*!< 0x00100000 */
#define BSEC_SRLOCK9_SRLOCK308        BSEC_SRLOCK9_SRLOCK308_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK309_Pos    (21U)
#define BSEC_SRLOCK9_SRLOCK309_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK309_Pos)    /*!< 0x00200000 */
#define BSEC_SRLOCK9_SRLOCK309        BSEC_SRLOCK9_SRLOCK309_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK310_Pos    (22U)
#define BSEC_SRLOCK9_SRLOCK310_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK310_Pos)    /*!< 0x00400000 */
#define BSEC_SRLOCK9_SRLOCK310        BSEC_SRLOCK9_SRLOCK310_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK311_Pos    (23U)
#define BSEC_SRLOCK9_SRLOCK311_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK311_Pos)    /*!< 0x00800000 */
#define BSEC_SRLOCK9_SRLOCK311        BSEC_SRLOCK9_SRLOCK311_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK312_Pos    (24U)
#define BSEC_SRLOCK9_SRLOCK312_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK312_Pos)    /*!< 0x01000000 */
#define BSEC_SRLOCK9_SRLOCK312        BSEC_SRLOCK9_SRLOCK312_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK313_Pos    (25U)
#define BSEC_SRLOCK9_SRLOCK313_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK313_Pos)    /*!< 0x02000000 */
#define BSEC_SRLOCK9_SRLOCK313        BSEC_SRLOCK9_SRLOCK313_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK314_Pos    (26U)
#define BSEC_SRLOCK9_SRLOCK314_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK314_Pos)    /*!< 0x04000000 */
#define BSEC_SRLOCK9_SRLOCK314        BSEC_SRLOCK9_SRLOCK314_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK315_Pos    (27U)
#define BSEC_SRLOCK9_SRLOCK315_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK315_Pos)    /*!< 0x08000000 */
#define BSEC_SRLOCK9_SRLOCK315        BSEC_SRLOCK9_SRLOCK315_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK316_Pos    (28U)
#define BSEC_SRLOCK9_SRLOCK316_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK316_Pos)    /*!< 0x10000000 */
#define BSEC_SRLOCK9_SRLOCK316        BSEC_SRLOCK9_SRLOCK316_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK317_Pos    (29U)
#define BSEC_SRLOCK9_SRLOCK317_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK317_Pos)    /*!< 0x20000000 */
#define BSEC_SRLOCK9_SRLOCK317        BSEC_SRLOCK9_SRLOCK317_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK318_Pos    (30U)
#define BSEC_SRLOCK9_SRLOCK318_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK318_Pos)    /*!< 0x40000000 */
#define BSEC_SRLOCK9_SRLOCK318        BSEC_SRLOCK9_SRLOCK318_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK9_SRLOCK319_Pos    (31U)
#define BSEC_SRLOCK9_SRLOCK319_Msk    (0x1U << BSEC_SRLOCK9_SRLOCK319_Pos)    /*!< 0x80000000 */
#define BSEC_SRLOCK9_SRLOCK319        BSEC_SRLOCK9_SRLOCK319_Msk              /*!< sticky read lock for word y (y=288 to 319)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_SRLOCK10 register  *****************/
#define BSEC_SRLOCK10_SRLOCK320_Pos   (0U)
#define BSEC_SRLOCK10_SRLOCK320_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK320_Pos)   /*!< 0x00000001 */
#define BSEC_SRLOCK10_SRLOCK320       BSEC_SRLOCK10_SRLOCK320_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK321_Pos   (1U)
#define BSEC_SRLOCK10_SRLOCK321_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK321_Pos)   /*!< 0x00000002 */
#define BSEC_SRLOCK10_SRLOCK321       BSEC_SRLOCK10_SRLOCK321_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK322_Pos   (2U)
#define BSEC_SRLOCK10_SRLOCK322_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK322_Pos)   /*!< 0x00000004 */
#define BSEC_SRLOCK10_SRLOCK322       BSEC_SRLOCK10_SRLOCK322_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK323_Pos   (3U)
#define BSEC_SRLOCK10_SRLOCK323_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK323_Pos)   /*!< 0x00000008 */
#define BSEC_SRLOCK10_SRLOCK323       BSEC_SRLOCK10_SRLOCK323_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK324_Pos   (4U)
#define BSEC_SRLOCK10_SRLOCK324_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK324_Pos)   /*!< 0x00000010 */
#define BSEC_SRLOCK10_SRLOCK324       BSEC_SRLOCK10_SRLOCK324_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK325_Pos   (5U)
#define BSEC_SRLOCK10_SRLOCK325_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK325_Pos)   /*!< 0x00000020 */
#define BSEC_SRLOCK10_SRLOCK325       BSEC_SRLOCK10_SRLOCK325_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK326_Pos   (6U)
#define BSEC_SRLOCK10_SRLOCK326_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK326_Pos)   /*!< 0x00000040 */
#define BSEC_SRLOCK10_SRLOCK326       BSEC_SRLOCK10_SRLOCK326_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK327_Pos   (7U)
#define BSEC_SRLOCK10_SRLOCK327_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK327_Pos)   /*!< 0x00000080 */
#define BSEC_SRLOCK10_SRLOCK327       BSEC_SRLOCK10_SRLOCK327_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK328_Pos   (8U)
#define BSEC_SRLOCK10_SRLOCK328_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK328_Pos)   /*!< 0x00000100 */
#define BSEC_SRLOCK10_SRLOCK328       BSEC_SRLOCK10_SRLOCK328_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK329_Pos   (9U)
#define BSEC_SRLOCK10_SRLOCK329_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK329_Pos)   /*!< 0x00000200 */
#define BSEC_SRLOCK10_SRLOCK329       BSEC_SRLOCK10_SRLOCK329_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK330_Pos   (10U)
#define BSEC_SRLOCK10_SRLOCK330_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK330_Pos)   /*!< 0x00000400 */
#define BSEC_SRLOCK10_SRLOCK330       BSEC_SRLOCK10_SRLOCK330_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK331_Pos   (11U)
#define BSEC_SRLOCK10_SRLOCK331_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK331_Pos)   /*!< 0x00000800 */
#define BSEC_SRLOCK10_SRLOCK331       BSEC_SRLOCK10_SRLOCK331_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK332_Pos   (12U)
#define BSEC_SRLOCK10_SRLOCK332_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK332_Pos)   /*!< 0x00001000 */
#define BSEC_SRLOCK10_SRLOCK332       BSEC_SRLOCK10_SRLOCK332_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK333_Pos   (13U)
#define BSEC_SRLOCK10_SRLOCK333_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK333_Pos)   /*!< 0x00002000 */
#define BSEC_SRLOCK10_SRLOCK333       BSEC_SRLOCK10_SRLOCK333_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK334_Pos   (14U)
#define BSEC_SRLOCK10_SRLOCK334_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK334_Pos)   /*!< 0x00004000 */
#define BSEC_SRLOCK10_SRLOCK334       BSEC_SRLOCK10_SRLOCK334_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK335_Pos   (15U)
#define BSEC_SRLOCK10_SRLOCK335_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK335_Pos)   /*!< 0x00008000 */
#define BSEC_SRLOCK10_SRLOCK335       BSEC_SRLOCK10_SRLOCK335_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK336_Pos   (16U)
#define BSEC_SRLOCK10_SRLOCK336_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK336_Pos)   /*!< 0x00010000 */
#define BSEC_SRLOCK10_SRLOCK336       BSEC_SRLOCK10_SRLOCK336_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK337_Pos   (17U)
#define BSEC_SRLOCK10_SRLOCK337_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK337_Pos)   /*!< 0x00020000 */
#define BSEC_SRLOCK10_SRLOCK337       BSEC_SRLOCK10_SRLOCK337_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK338_Pos   (18U)
#define BSEC_SRLOCK10_SRLOCK338_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK338_Pos)   /*!< 0x00040000 */
#define BSEC_SRLOCK10_SRLOCK338       BSEC_SRLOCK10_SRLOCK338_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK339_Pos   (19U)
#define BSEC_SRLOCK10_SRLOCK339_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK339_Pos)   /*!< 0x00080000 */
#define BSEC_SRLOCK10_SRLOCK339       BSEC_SRLOCK10_SRLOCK339_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK340_Pos   (20U)
#define BSEC_SRLOCK10_SRLOCK340_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK340_Pos)   /*!< 0x00100000 */
#define BSEC_SRLOCK10_SRLOCK340       BSEC_SRLOCK10_SRLOCK340_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK341_Pos   (21U)
#define BSEC_SRLOCK10_SRLOCK341_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK341_Pos)   /*!< 0x00200000 */
#define BSEC_SRLOCK10_SRLOCK341       BSEC_SRLOCK10_SRLOCK341_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK342_Pos   (22U)
#define BSEC_SRLOCK10_SRLOCK342_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK342_Pos)   /*!< 0x00400000 */
#define BSEC_SRLOCK10_SRLOCK342       BSEC_SRLOCK10_SRLOCK342_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK343_Pos   (23U)
#define BSEC_SRLOCK10_SRLOCK343_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK343_Pos)   /*!< 0x00800000 */
#define BSEC_SRLOCK10_SRLOCK343       BSEC_SRLOCK10_SRLOCK343_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK344_Pos   (24U)
#define BSEC_SRLOCK10_SRLOCK344_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK344_Pos)   /*!< 0x01000000 */
#define BSEC_SRLOCK10_SRLOCK344       BSEC_SRLOCK10_SRLOCK344_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK345_Pos   (25U)
#define BSEC_SRLOCK10_SRLOCK345_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK345_Pos)   /*!< 0x02000000 */
#define BSEC_SRLOCK10_SRLOCK345       BSEC_SRLOCK10_SRLOCK345_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK346_Pos   (26U)
#define BSEC_SRLOCK10_SRLOCK346_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK346_Pos)   /*!< 0x04000000 */
#define BSEC_SRLOCK10_SRLOCK346       BSEC_SRLOCK10_SRLOCK346_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK347_Pos   (27U)
#define BSEC_SRLOCK10_SRLOCK347_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK347_Pos)   /*!< 0x08000000 */
#define BSEC_SRLOCK10_SRLOCK347       BSEC_SRLOCK10_SRLOCK347_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK348_Pos   (28U)
#define BSEC_SRLOCK10_SRLOCK348_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK348_Pos)   /*!< 0x10000000 */
#define BSEC_SRLOCK10_SRLOCK348       BSEC_SRLOCK10_SRLOCK348_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK349_Pos   (29U)
#define BSEC_SRLOCK10_SRLOCK349_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK349_Pos)   /*!< 0x20000000 */
#define BSEC_SRLOCK10_SRLOCK349       BSEC_SRLOCK10_SRLOCK349_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK350_Pos   (30U)
#define BSEC_SRLOCK10_SRLOCK350_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK350_Pos)   /*!< 0x40000000 */
#define BSEC_SRLOCK10_SRLOCK350       BSEC_SRLOCK10_SRLOCK350_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK10_SRLOCK351_Pos   (31U)
#define BSEC_SRLOCK10_SRLOCK351_Msk   (0x1U << BSEC_SRLOCK10_SRLOCK351_Pos)   /*!< 0x80000000 */
#define BSEC_SRLOCK10_SRLOCK351       BSEC_SRLOCK10_SRLOCK351_Msk             /*!< sticky read lock for word y (y=320 to 351)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_SRLOCK11 register  *****************/
#define BSEC_SRLOCK11_SRLOCK352_Pos   (0U)
#define BSEC_SRLOCK11_SRLOCK352_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK352_Pos)   /*!< 0x00000001 */
#define BSEC_SRLOCK11_SRLOCK352       BSEC_SRLOCK11_SRLOCK352_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK353_Pos   (1U)
#define BSEC_SRLOCK11_SRLOCK353_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK353_Pos)   /*!< 0x00000002 */
#define BSEC_SRLOCK11_SRLOCK353       BSEC_SRLOCK11_SRLOCK353_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK354_Pos   (2U)
#define BSEC_SRLOCK11_SRLOCK354_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK354_Pos)   /*!< 0x00000004 */
#define BSEC_SRLOCK11_SRLOCK354       BSEC_SRLOCK11_SRLOCK354_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK355_Pos   (3U)
#define BSEC_SRLOCK11_SRLOCK355_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK355_Pos)   /*!< 0x00000008 */
#define BSEC_SRLOCK11_SRLOCK355       BSEC_SRLOCK11_SRLOCK355_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK356_Pos   (4U)
#define BSEC_SRLOCK11_SRLOCK356_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK356_Pos)   /*!< 0x00000010 */
#define BSEC_SRLOCK11_SRLOCK356       BSEC_SRLOCK11_SRLOCK356_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK357_Pos   (5U)
#define BSEC_SRLOCK11_SRLOCK357_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK357_Pos)   /*!< 0x00000020 */
#define BSEC_SRLOCK11_SRLOCK357       BSEC_SRLOCK11_SRLOCK357_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK358_Pos   (6U)
#define BSEC_SRLOCK11_SRLOCK358_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK358_Pos)   /*!< 0x00000040 */
#define BSEC_SRLOCK11_SRLOCK358       BSEC_SRLOCK11_SRLOCK358_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK359_Pos   (7U)
#define BSEC_SRLOCK11_SRLOCK359_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK359_Pos)   /*!< 0x00000080 */
#define BSEC_SRLOCK11_SRLOCK359       BSEC_SRLOCK11_SRLOCK359_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK360_Pos   (8U)
#define BSEC_SRLOCK11_SRLOCK360_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK360_Pos)   /*!< 0x00000100 */
#define BSEC_SRLOCK11_SRLOCK360       BSEC_SRLOCK11_SRLOCK360_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK361_Pos   (9U)
#define BSEC_SRLOCK11_SRLOCK361_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK361_Pos)   /*!< 0x00000200 */
#define BSEC_SRLOCK11_SRLOCK361       BSEC_SRLOCK11_SRLOCK361_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK362_Pos   (10U)
#define BSEC_SRLOCK11_SRLOCK362_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK362_Pos)   /*!< 0x00000400 */
#define BSEC_SRLOCK11_SRLOCK362       BSEC_SRLOCK11_SRLOCK362_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK363_Pos   (11U)
#define BSEC_SRLOCK11_SRLOCK363_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK363_Pos)   /*!< 0x00000800 */
#define BSEC_SRLOCK11_SRLOCK363       BSEC_SRLOCK11_SRLOCK363_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK364_Pos   (12U)
#define BSEC_SRLOCK11_SRLOCK364_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK364_Pos)   /*!< 0x00001000 */
#define BSEC_SRLOCK11_SRLOCK364       BSEC_SRLOCK11_SRLOCK364_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK365_Pos   (13U)
#define BSEC_SRLOCK11_SRLOCK365_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK365_Pos)   /*!< 0x00002000 */
#define BSEC_SRLOCK11_SRLOCK365       BSEC_SRLOCK11_SRLOCK365_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK366_Pos   (14U)
#define BSEC_SRLOCK11_SRLOCK366_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK366_Pos)   /*!< 0x00004000 */
#define BSEC_SRLOCK11_SRLOCK366       BSEC_SRLOCK11_SRLOCK366_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK367_Pos   (15U)
#define BSEC_SRLOCK11_SRLOCK367_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK367_Pos)   /*!< 0x00008000 */
#define BSEC_SRLOCK11_SRLOCK367       BSEC_SRLOCK11_SRLOCK367_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK368_Pos   (16U)
#define BSEC_SRLOCK11_SRLOCK368_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK368_Pos)   /*!< 0x00010000 */
#define BSEC_SRLOCK11_SRLOCK368       BSEC_SRLOCK11_SRLOCK368_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK369_Pos   (17U)
#define BSEC_SRLOCK11_SRLOCK369_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK369_Pos)   /*!< 0x00020000 */
#define BSEC_SRLOCK11_SRLOCK369       BSEC_SRLOCK11_SRLOCK369_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK370_Pos   (18U)
#define BSEC_SRLOCK11_SRLOCK370_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK370_Pos)   /*!< 0x00040000 */
#define BSEC_SRLOCK11_SRLOCK370       BSEC_SRLOCK11_SRLOCK370_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK371_Pos   (19U)
#define BSEC_SRLOCK11_SRLOCK371_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK371_Pos)   /*!< 0x00080000 */
#define BSEC_SRLOCK11_SRLOCK371       BSEC_SRLOCK11_SRLOCK371_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK372_Pos   (20U)
#define BSEC_SRLOCK11_SRLOCK372_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK372_Pos)   /*!< 0x00100000 */
#define BSEC_SRLOCK11_SRLOCK372       BSEC_SRLOCK11_SRLOCK372_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK373_Pos   (21U)
#define BSEC_SRLOCK11_SRLOCK373_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK373_Pos)   /*!< 0x00200000 */
#define BSEC_SRLOCK11_SRLOCK373       BSEC_SRLOCK11_SRLOCK373_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK374_Pos   (22U)
#define BSEC_SRLOCK11_SRLOCK374_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK374_Pos)   /*!< 0x00400000 */
#define BSEC_SRLOCK11_SRLOCK374       BSEC_SRLOCK11_SRLOCK374_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK375_Pos   (23U)
#define BSEC_SRLOCK11_SRLOCK375_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK375_Pos)   /*!< 0x00800000 */
#define BSEC_SRLOCK11_SRLOCK375       BSEC_SRLOCK11_SRLOCK375_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK376_Pos   (24U)
#define BSEC_SRLOCK11_SRLOCK376_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK376_Pos)   /*!< 0x01000000 */
#define BSEC_SRLOCK11_SRLOCK376       BSEC_SRLOCK11_SRLOCK376_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK377_Pos   (25U)
#define BSEC_SRLOCK11_SRLOCK377_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK377_Pos)   /*!< 0x02000000 */
#define BSEC_SRLOCK11_SRLOCK377       BSEC_SRLOCK11_SRLOCK377_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK378_Pos   (26U)
#define BSEC_SRLOCK11_SRLOCK378_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK378_Pos)   /*!< 0x04000000 */
#define BSEC_SRLOCK11_SRLOCK378       BSEC_SRLOCK11_SRLOCK378_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK379_Pos   (27U)
#define BSEC_SRLOCK11_SRLOCK379_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK379_Pos)   /*!< 0x08000000 */
#define BSEC_SRLOCK11_SRLOCK379       BSEC_SRLOCK11_SRLOCK379_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK380_Pos   (28U)
#define BSEC_SRLOCK11_SRLOCK380_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK380_Pos)   /*!< 0x10000000 */
#define BSEC_SRLOCK11_SRLOCK380       BSEC_SRLOCK11_SRLOCK380_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK381_Pos   (29U)
#define BSEC_SRLOCK11_SRLOCK381_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK381_Pos)   /*!< 0x20000000 */
#define BSEC_SRLOCK11_SRLOCK381       BSEC_SRLOCK11_SRLOCK381_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK382_Pos   (30U)
#define BSEC_SRLOCK11_SRLOCK382_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK382_Pos)   /*!< 0x40000000 */
#define BSEC_SRLOCK11_SRLOCK382       BSEC_SRLOCK11_SRLOCK382_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SRLOCK11_SRLOCK383_Pos   (31U)
#define BSEC_SRLOCK11_SRLOCK383_Msk   (0x1U << BSEC_SRLOCK11_SRLOCK383_Pos)   /*!< 0x80000000 */
#define BSEC_SRLOCK11_SRLOCK383       BSEC_SRLOCK11_SRLOCK383_Msk             /*!< sticky read lock for word y (y=352 to 383)See BSEC_SRLOCK0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR0 register  *****************/
#define BSEC_OTPVLDR0_VLDF0_Pos       (0U)
#define BSEC_OTPVLDR0_VLDF0_Msk       (0x1U << BSEC_OTPVLDR0_VLDF0_Pos)       /*!< 0x00000001 */
#define BSEC_OTPVLDR0_VLDF0           BSEC_OTPVLDR0_VLDF0_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF1_Pos       (1U)
#define BSEC_OTPVLDR0_VLDF1_Msk       (0x1U << BSEC_OTPVLDR0_VLDF1_Pos)       /*!< 0x00000002 */
#define BSEC_OTPVLDR0_VLDF1           BSEC_OTPVLDR0_VLDF1_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF2_Pos       (2U)
#define BSEC_OTPVLDR0_VLDF2_Msk       (0x1U << BSEC_OTPVLDR0_VLDF2_Pos)       /*!< 0x00000004 */
#define BSEC_OTPVLDR0_VLDF2           BSEC_OTPVLDR0_VLDF2_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF3_Pos       (3U)
#define BSEC_OTPVLDR0_VLDF3_Msk       (0x1U << BSEC_OTPVLDR0_VLDF3_Pos)       /*!< 0x00000008 */
#define BSEC_OTPVLDR0_VLDF3           BSEC_OTPVLDR0_VLDF3_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF4_Pos       (4U)
#define BSEC_OTPVLDR0_VLDF4_Msk       (0x1U << BSEC_OTPVLDR0_VLDF4_Pos)       /*!< 0x00000010 */
#define BSEC_OTPVLDR0_VLDF4           BSEC_OTPVLDR0_VLDF4_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF5_Pos       (5U)
#define BSEC_OTPVLDR0_VLDF5_Msk       (0x1U << BSEC_OTPVLDR0_VLDF5_Pos)       /*!< 0x00000020 */
#define BSEC_OTPVLDR0_VLDF5           BSEC_OTPVLDR0_VLDF5_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF6_Pos       (6U)
#define BSEC_OTPVLDR0_VLDF6_Msk       (0x1U << BSEC_OTPVLDR0_VLDF6_Pos)       /*!< 0x00000040 */
#define BSEC_OTPVLDR0_VLDF6           BSEC_OTPVLDR0_VLDF6_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF7_Pos       (7U)
#define BSEC_OTPVLDR0_VLDF7_Msk       (0x1U << BSEC_OTPVLDR0_VLDF7_Pos)       /*!< 0x00000080 */
#define BSEC_OTPVLDR0_VLDF7           BSEC_OTPVLDR0_VLDF7_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF8_Pos       (8U)
#define BSEC_OTPVLDR0_VLDF8_Msk       (0x1U << BSEC_OTPVLDR0_VLDF8_Pos)       /*!< 0x00000100 */
#define BSEC_OTPVLDR0_VLDF8           BSEC_OTPVLDR0_VLDF8_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF9_Pos       (9U)
#define BSEC_OTPVLDR0_VLDF9_Msk       (0x1U << BSEC_OTPVLDR0_VLDF9_Pos)       /*!< 0x00000200 */
#define BSEC_OTPVLDR0_VLDF9           BSEC_OTPVLDR0_VLDF9_Msk                 /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF10_Pos      (10U)
#define BSEC_OTPVLDR0_VLDF10_Msk      (0x1U << BSEC_OTPVLDR0_VLDF10_Pos)      /*!< 0x00000400 */
#define BSEC_OTPVLDR0_VLDF10          BSEC_OTPVLDR0_VLDF10_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF11_Pos      (11U)
#define BSEC_OTPVLDR0_VLDF11_Msk      (0x1U << BSEC_OTPVLDR0_VLDF11_Pos)      /*!< 0x00000800 */
#define BSEC_OTPVLDR0_VLDF11          BSEC_OTPVLDR0_VLDF11_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF12_Pos      (12U)
#define BSEC_OTPVLDR0_VLDF12_Msk      (0x1U << BSEC_OTPVLDR0_VLDF12_Pos)      /*!< 0x00001000 */
#define BSEC_OTPVLDR0_VLDF12          BSEC_OTPVLDR0_VLDF12_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF13_Pos      (13U)
#define BSEC_OTPVLDR0_VLDF13_Msk      (0x1U << BSEC_OTPVLDR0_VLDF13_Pos)      /*!< 0x00002000 */
#define BSEC_OTPVLDR0_VLDF13          BSEC_OTPVLDR0_VLDF13_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF14_Pos      (14U)
#define BSEC_OTPVLDR0_VLDF14_Msk      (0x1U << BSEC_OTPVLDR0_VLDF14_Pos)      /*!< 0x00004000 */
#define BSEC_OTPVLDR0_VLDF14          BSEC_OTPVLDR0_VLDF14_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF15_Pos      (15U)
#define BSEC_OTPVLDR0_VLDF15_Msk      (0x1U << BSEC_OTPVLDR0_VLDF15_Pos)      /*!< 0x00008000 */
#define BSEC_OTPVLDR0_VLDF15          BSEC_OTPVLDR0_VLDF15_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF16_Pos      (16U)
#define BSEC_OTPVLDR0_VLDF16_Msk      (0x1U << BSEC_OTPVLDR0_VLDF16_Pos)      /*!< 0x00010000 */
#define BSEC_OTPVLDR0_VLDF16          BSEC_OTPVLDR0_VLDF16_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF17_Pos      (17U)
#define BSEC_OTPVLDR0_VLDF17_Msk      (0x1U << BSEC_OTPVLDR0_VLDF17_Pos)      /*!< 0x00020000 */
#define BSEC_OTPVLDR0_VLDF17          BSEC_OTPVLDR0_VLDF17_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF18_Pos      (18U)
#define BSEC_OTPVLDR0_VLDF18_Msk      (0x1U << BSEC_OTPVLDR0_VLDF18_Pos)      /*!< 0x00040000 */
#define BSEC_OTPVLDR0_VLDF18          BSEC_OTPVLDR0_VLDF18_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF19_Pos      (19U)
#define BSEC_OTPVLDR0_VLDF19_Msk      (0x1U << BSEC_OTPVLDR0_VLDF19_Pos)      /*!< 0x00080000 */
#define BSEC_OTPVLDR0_VLDF19          BSEC_OTPVLDR0_VLDF19_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF20_Pos      (20U)
#define BSEC_OTPVLDR0_VLDF20_Msk      (0x1U << BSEC_OTPVLDR0_VLDF20_Pos)      /*!< 0x00100000 */
#define BSEC_OTPVLDR0_VLDF20          BSEC_OTPVLDR0_VLDF20_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF21_Pos      (21U)
#define BSEC_OTPVLDR0_VLDF21_Msk      (0x1U << BSEC_OTPVLDR0_VLDF21_Pos)      /*!< 0x00200000 */
#define BSEC_OTPVLDR0_VLDF21          BSEC_OTPVLDR0_VLDF21_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF22_Pos      (22U)
#define BSEC_OTPVLDR0_VLDF22_Msk      (0x1U << BSEC_OTPVLDR0_VLDF22_Pos)      /*!< 0x00400000 */
#define BSEC_OTPVLDR0_VLDF22          BSEC_OTPVLDR0_VLDF22_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF23_Pos      (23U)
#define BSEC_OTPVLDR0_VLDF23_Msk      (0x1U << BSEC_OTPVLDR0_VLDF23_Pos)      /*!< 0x00800000 */
#define BSEC_OTPVLDR0_VLDF23          BSEC_OTPVLDR0_VLDF23_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF24_Pos      (24U)
#define BSEC_OTPVLDR0_VLDF24_Msk      (0x1U << BSEC_OTPVLDR0_VLDF24_Pos)      /*!< 0x01000000 */
#define BSEC_OTPVLDR0_VLDF24          BSEC_OTPVLDR0_VLDF24_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF25_Pos      (25U)
#define BSEC_OTPVLDR0_VLDF25_Msk      (0x1U << BSEC_OTPVLDR0_VLDF25_Pos)      /*!< 0x02000000 */
#define BSEC_OTPVLDR0_VLDF25          BSEC_OTPVLDR0_VLDF25_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF26_Pos      (26U)
#define BSEC_OTPVLDR0_VLDF26_Msk      (0x1U << BSEC_OTPVLDR0_VLDF26_Pos)      /*!< 0x04000000 */
#define BSEC_OTPVLDR0_VLDF26          BSEC_OTPVLDR0_VLDF26_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF27_Pos      (27U)
#define BSEC_OTPVLDR0_VLDF27_Msk      (0x1U << BSEC_OTPVLDR0_VLDF27_Pos)      /*!< 0x08000000 */
#define BSEC_OTPVLDR0_VLDF27          BSEC_OTPVLDR0_VLDF27_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF28_Pos      (28U)
#define BSEC_OTPVLDR0_VLDF28_Msk      (0x1U << BSEC_OTPVLDR0_VLDF28_Pos)      /*!< 0x10000000 */
#define BSEC_OTPVLDR0_VLDF28          BSEC_OTPVLDR0_VLDF28_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF29_Pos      (29U)
#define BSEC_OTPVLDR0_VLDF29_Msk      (0x1U << BSEC_OTPVLDR0_VLDF29_Pos)      /*!< 0x20000000 */
#define BSEC_OTPVLDR0_VLDF29          BSEC_OTPVLDR0_VLDF29_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF30_Pos      (30U)
#define BSEC_OTPVLDR0_VLDF30_Msk      (0x1U << BSEC_OTPVLDR0_VLDF30_Pos)      /*!< 0x40000000 */
#define BSEC_OTPVLDR0_VLDF30          BSEC_OTPVLDR0_VLDF30_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR0_VLDF31_Pos      (31U)
#define BSEC_OTPVLDR0_VLDF31_Msk      (0x1U << BSEC_OTPVLDR0_VLDF31_Pos)      /*!< 0x80000000 */
#define BSEC_OTPVLDR0_VLDF31          BSEC_OTPVLDR0_VLDF31_Msk                /*!< Valid flag for shadow register y (y=0 to 31)This bit is cleared when an error occurred during the last readout of fuse word (32*x+y).- 0: An error occurred while fuse word (32*x+y) was last read. The value read from BSEC_FVR[32*x+y] register depends on the type of error (e.g. if a SEC error occurred corrected value is read through FVR register).- 1: Last readout of fuse word (32*x+y) was done without error. Correct value is available in BSEC_FVR[32*x+y].Each VLDF bit is updated when BSEC or the application reloads corresponding fuse word from the OTP array.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR1 register  *****************/
#define BSEC_OTPVLDR1_VLDF32_Pos      (0U)
#define BSEC_OTPVLDR1_VLDF32_Msk      (0x1U << BSEC_OTPVLDR1_VLDF32_Pos)      /*!< 0x00000001 */
#define BSEC_OTPVLDR1_VLDF32          BSEC_OTPVLDR1_VLDF32_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF33_Pos      (1U)
#define BSEC_OTPVLDR1_VLDF33_Msk      (0x1U << BSEC_OTPVLDR1_VLDF33_Pos)      /*!< 0x00000002 */
#define BSEC_OTPVLDR1_VLDF33          BSEC_OTPVLDR1_VLDF33_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF34_Pos      (2U)
#define BSEC_OTPVLDR1_VLDF34_Msk      (0x1U << BSEC_OTPVLDR1_VLDF34_Pos)      /*!< 0x00000004 */
#define BSEC_OTPVLDR1_VLDF34          BSEC_OTPVLDR1_VLDF34_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF35_Pos      (3U)
#define BSEC_OTPVLDR1_VLDF35_Msk      (0x1U << BSEC_OTPVLDR1_VLDF35_Pos)      /*!< 0x00000008 */
#define BSEC_OTPVLDR1_VLDF35          BSEC_OTPVLDR1_VLDF35_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF36_Pos      (4U)
#define BSEC_OTPVLDR1_VLDF36_Msk      (0x1U << BSEC_OTPVLDR1_VLDF36_Pos)      /*!< 0x00000010 */
#define BSEC_OTPVLDR1_VLDF36          BSEC_OTPVLDR1_VLDF36_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF37_Pos      (5U)
#define BSEC_OTPVLDR1_VLDF37_Msk      (0x1U << BSEC_OTPVLDR1_VLDF37_Pos)      /*!< 0x00000020 */
#define BSEC_OTPVLDR1_VLDF37          BSEC_OTPVLDR1_VLDF37_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF38_Pos      (6U)
#define BSEC_OTPVLDR1_VLDF38_Msk      (0x1U << BSEC_OTPVLDR1_VLDF38_Pos)      /*!< 0x00000040 */
#define BSEC_OTPVLDR1_VLDF38          BSEC_OTPVLDR1_VLDF38_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF39_Pos      (7U)
#define BSEC_OTPVLDR1_VLDF39_Msk      (0x1U << BSEC_OTPVLDR1_VLDF39_Pos)      /*!< 0x00000080 */
#define BSEC_OTPVLDR1_VLDF39          BSEC_OTPVLDR1_VLDF39_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF40_Pos      (8U)
#define BSEC_OTPVLDR1_VLDF40_Msk      (0x1U << BSEC_OTPVLDR1_VLDF40_Pos)      /*!< 0x00000100 */
#define BSEC_OTPVLDR1_VLDF40          BSEC_OTPVLDR1_VLDF40_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF41_Pos      (9U)
#define BSEC_OTPVLDR1_VLDF41_Msk      (0x1U << BSEC_OTPVLDR1_VLDF41_Pos)      /*!< 0x00000200 */
#define BSEC_OTPVLDR1_VLDF41          BSEC_OTPVLDR1_VLDF41_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF42_Pos      (10U)
#define BSEC_OTPVLDR1_VLDF42_Msk      (0x1U << BSEC_OTPVLDR1_VLDF42_Pos)      /*!< 0x00000400 */
#define BSEC_OTPVLDR1_VLDF42          BSEC_OTPVLDR1_VLDF42_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF43_Pos      (11U)
#define BSEC_OTPVLDR1_VLDF43_Msk      (0x1U << BSEC_OTPVLDR1_VLDF43_Pos)      /*!< 0x00000800 */
#define BSEC_OTPVLDR1_VLDF43          BSEC_OTPVLDR1_VLDF43_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF44_Pos      (12U)
#define BSEC_OTPVLDR1_VLDF44_Msk      (0x1U << BSEC_OTPVLDR1_VLDF44_Pos)      /*!< 0x00001000 */
#define BSEC_OTPVLDR1_VLDF44          BSEC_OTPVLDR1_VLDF44_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF45_Pos      (13U)
#define BSEC_OTPVLDR1_VLDF45_Msk      (0x1U << BSEC_OTPVLDR1_VLDF45_Pos)      /*!< 0x00002000 */
#define BSEC_OTPVLDR1_VLDF45          BSEC_OTPVLDR1_VLDF45_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF46_Pos      (14U)
#define BSEC_OTPVLDR1_VLDF46_Msk      (0x1U << BSEC_OTPVLDR1_VLDF46_Pos)      /*!< 0x00004000 */
#define BSEC_OTPVLDR1_VLDF46          BSEC_OTPVLDR1_VLDF46_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF47_Pos      (15U)
#define BSEC_OTPVLDR1_VLDF47_Msk      (0x1U << BSEC_OTPVLDR1_VLDF47_Pos)      /*!< 0x00008000 */
#define BSEC_OTPVLDR1_VLDF47          BSEC_OTPVLDR1_VLDF47_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF48_Pos      (16U)
#define BSEC_OTPVLDR1_VLDF48_Msk      (0x1U << BSEC_OTPVLDR1_VLDF48_Pos)      /*!< 0x00010000 */
#define BSEC_OTPVLDR1_VLDF48          BSEC_OTPVLDR1_VLDF48_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF49_Pos      (17U)
#define BSEC_OTPVLDR1_VLDF49_Msk      (0x1U << BSEC_OTPVLDR1_VLDF49_Pos)      /*!< 0x00020000 */
#define BSEC_OTPVLDR1_VLDF49          BSEC_OTPVLDR1_VLDF49_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF50_Pos      (18U)
#define BSEC_OTPVLDR1_VLDF50_Msk      (0x1U << BSEC_OTPVLDR1_VLDF50_Pos)      /*!< 0x00040000 */
#define BSEC_OTPVLDR1_VLDF50          BSEC_OTPVLDR1_VLDF50_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF51_Pos      (19U)
#define BSEC_OTPVLDR1_VLDF51_Msk      (0x1U << BSEC_OTPVLDR1_VLDF51_Pos)      /*!< 0x00080000 */
#define BSEC_OTPVLDR1_VLDF51          BSEC_OTPVLDR1_VLDF51_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF52_Pos      (20U)
#define BSEC_OTPVLDR1_VLDF52_Msk      (0x1U << BSEC_OTPVLDR1_VLDF52_Pos)      /*!< 0x00100000 */
#define BSEC_OTPVLDR1_VLDF52          BSEC_OTPVLDR1_VLDF52_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF53_Pos      (21U)
#define BSEC_OTPVLDR1_VLDF53_Msk      (0x1U << BSEC_OTPVLDR1_VLDF53_Pos)      /*!< 0x00200000 */
#define BSEC_OTPVLDR1_VLDF53          BSEC_OTPVLDR1_VLDF53_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF54_Pos      (22U)
#define BSEC_OTPVLDR1_VLDF54_Msk      (0x1U << BSEC_OTPVLDR1_VLDF54_Pos)      /*!< 0x00400000 */
#define BSEC_OTPVLDR1_VLDF54          BSEC_OTPVLDR1_VLDF54_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF55_Pos      (23U)
#define BSEC_OTPVLDR1_VLDF55_Msk      (0x1U << BSEC_OTPVLDR1_VLDF55_Pos)      /*!< 0x00800000 */
#define BSEC_OTPVLDR1_VLDF55          BSEC_OTPVLDR1_VLDF55_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF56_Pos      (24U)
#define BSEC_OTPVLDR1_VLDF56_Msk      (0x1U << BSEC_OTPVLDR1_VLDF56_Pos)      /*!< 0x01000000 */
#define BSEC_OTPVLDR1_VLDF56          BSEC_OTPVLDR1_VLDF56_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF57_Pos      (25U)
#define BSEC_OTPVLDR1_VLDF57_Msk      (0x1U << BSEC_OTPVLDR1_VLDF57_Pos)      /*!< 0x02000000 */
#define BSEC_OTPVLDR1_VLDF57          BSEC_OTPVLDR1_VLDF57_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF58_Pos      (26U)
#define BSEC_OTPVLDR1_VLDF58_Msk      (0x1U << BSEC_OTPVLDR1_VLDF58_Pos)      /*!< 0x04000000 */
#define BSEC_OTPVLDR1_VLDF58          BSEC_OTPVLDR1_VLDF58_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF59_Pos      (27U)
#define BSEC_OTPVLDR1_VLDF59_Msk      (0x1U << BSEC_OTPVLDR1_VLDF59_Pos)      /*!< 0x08000000 */
#define BSEC_OTPVLDR1_VLDF59          BSEC_OTPVLDR1_VLDF59_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF60_Pos      (28U)
#define BSEC_OTPVLDR1_VLDF60_Msk      (0x1U << BSEC_OTPVLDR1_VLDF60_Pos)      /*!< 0x10000000 */
#define BSEC_OTPVLDR1_VLDF60          BSEC_OTPVLDR1_VLDF60_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF61_Pos      (29U)
#define BSEC_OTPVLDR1_VLDF61_Msk      (0x1U << BSEC_OTPVLDR1_VLDF61_Pos)      /*!< 0x20000000 */
#define BSEC_OTPVLDR1_VLDF61          BSEC_OTPVLDR1_VLDF61_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF62_Pos      (30U)
#define BSEC_OTPVLDR1_VLDF62_Msk      (0x1U << BSEC_OTPVLDR1_VLDF62_Pos)      /*!< 0x40000000 */
#define BSEC_OTPVLDR1_VLDF62          BSEC_OTPVLDR1_VLDF62_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR1_VLDF63_Pos      (31U)
#define BSEC_OTPVLDR1_VLDF63_Msk      (0x1U << BSEC_OTPVLDR1_VLDF63_Pos)      /*!< 0x80000000 */
#define BSEC_OTPVLDR1_VLDF63          BSEC_OTPVLDR1_VLDF63_Msk                /*!< Valid flag for shadow register y (y=32 to 63)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR2 register  *****************/
#define BSEC_OTPVLDR2_VLDF64_Pos      (0U)
#define BSEC_OTPVLDR2_VLDF64_Msk      (0x1U << BSEC_OTPVLDR2_VLDF64_Pos)      /*!< 0x00000001 */
#define BSEC_OTPVLDR2_VLDF64          BSEC_OTPVLDR2_VLDF64_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF65_Pos      (1U)
#define BSEC_OTPVLDR2_VLDF65_Msk      (0x1U << BSEC_OTPVLDR2_VLDF65_Pos)      /*!< 0x00000002 */
#define BSEC_OTPVLDR2_VLDF65          BSEC_OTPVLDR2_VLDF65_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF66_Pos      (2U)
#define BSEC_OTPVLDR2_VLDF66_Msk      (0x1U << BSEC_OTPVLDR2_VLDF66_Pos)      /*!< 0x00000004 */
#define BSEC_OTPVLDR2_VLDF66          BSEC_OTPVLDR2_VLDF66_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF67_Pos      (3U)
#define BSEC_OTPVLDR2_VLDF67_Msk      (0x1U << BSEC_OTPVLDR2_VLDF67_Pos)      /*!< 0x00000008 */
#define BSEC_OTPVLDR2_VLDF67          BSEC_OTPVLDR2_VLDF67_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF68_Pos      (4U)
#define BSEC_OTPVLDR2_VLDF68_Msk      (0x1U << BSEC_OTPVLDR2_VLDF68_Pos)      /*!< 0x00000010 */
#define BSEC_OTPVLDR2_VLDF68          BSEC_OTPVLDR2_VLDF68_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF69_Pos      (5U)
#define BSEC_OTPVLDR2_VLDF69_Msk      (0x1U << BSEC_OTPVLDR2_VLDF69_Pos)      /*!< 0x00000020 */
#define BSEC_OTPVLDR2_VLDF69          BSEC_OTPVLDR2_VLDF69_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF70_Pos      (6U)
#define BSEC_OTPVLDR2_VLDF70_Msk      (0x1U << BSEC_OTPVLDR2_VLDF70_Pos)      /*!< 0x00000040 */
#define BSEC_OTPVLDR2_VLDF70          BSEC_OTPVLDR2_VLDF70_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF71_Pos      (7U)
#define BSEC_OTPVLDR2_VLDF71_Msk      (0x1U << BSEC_OTPVLDR2_VLDF71_Pos)      /*!< 0x00000080 */
#define BSEC_OTPVLDR2_VLDF71          BSEC_OTPVLDR2_VLDF71_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF72_Pos      (8U)
#define BSEC_OTPVLDR2_VLDF72_Msk      (0x1U << BSEC_OTPVLDR2_VLDF72_Pos)      /*!< 0x00000100 */
#define BSEC_OTPVLDR2_VLDF72          BSEC_OTPVLDR2_VLDF72_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF73_Pos      (9U)
#define BSEC_OTPVLDR2_VLDF73_Msk      (0x1U << BSEC_OTPVLDR2_VLDF73_Pos)      /*!< 0x00000200 */
#define BSEC_OTPVLDR2_VLDF73          BSEC_OTPVLDR2_VLDF73_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF74_Pos      (10U)
#define BSEC_OTPVLDR2_VLDF74_Msk      (0x1U << BSEC_OTPVLDR2_VLDF74_Pos)      /*!< 0x00000400 */
#define BSEC_OTPVLDR2_VLDF74          BSEC_OTPVLDR2_VLDF74_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF75_Pos      (11U)
#define BSEC_OTPVLDR2_VLDF75_Msk      (0x1U << BSEC_OTPVLDR2_VLDF75_Pos)      /*!< 0x00000800 */
#define BSEC_OTPVLDR2_VLDF75          BSEC_OTPVLDR2_VLDF75_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF76_Pos      (12U)
#define BSEC_OTPVLDR2_VLDF76_Msk      (0x1U << BSEC_OTPVLDR2_VLDF76_Pos)      /*!< 0x00001000 */
#define BSEC_OTPVLDR2_VLDF76          BSEC_OTPVLDR2_VLDF76_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF77_Pos      (13U)
#define BSEC_OTPVLDR2_VLDF77_Msk      (0x1U << BSEC_OTPVLDR2_VLDF77_Pos)      /*!< 0x00002000 */
#define BSEC_OTPVLDR2_VLDF77          BSEC_OTPVLDR2_VLDF77_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF78_Pos      (14U)
#define BSEC_OTPVLDR2_VLDF78_Msk      (0x1U << BSEC_OTPVLDR2_VLDF78_Pos)      /*!< 0x00004000 */
#define BSEC_OTPVLDR2_VLDF78          BSEC_OTPVLDR2_VLDF78_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF79_Pos      (15U)
#define BSEC_OTPVLDR2_VLDF79_Msk      (0x1U << BSEC_OTPVLDR2_VLDF79_Pos)      /*!< 0x00008000 */
#define BSEC_OTPVLDR2_VLDF79          BSEC_OTPVLDR2_VLDF79_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF80_Pos      (16U)
#define BSEC_OTPVLDR2_VLDF80_Msk      (0x1U << BSEC_OTPVLDR2_VLDF80_Pos)      /*!< 0x00010000 */
#define BSEC_OTPVLDR2_VLDF80          BSEC_OTPVLDR2_VLDF80_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF81_Pos      (17U)
#define BSEC_OTPVLDR2_VLDF81_Msk      (0x1U << BSEC_OTPVLDR2_VLDF81_Pos)      /*!< 0x00020000 */
#define BSEC_OTPVLDR2_VLDF81          BSEC_OTPVLDR2_VLDF81_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF82_Pos      (18U)
#define BSEC_OTPVLDR2_VLDF82_Msk      (0x1U << BSEC_OTPVLDR2_VLDF82_Pos)      /*!< 0x00040000 */
#define BSEC_OTPVLDR2_VLDF82          BSEC_OTPVLDR2_VLDF82_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF83_Pos      (19U)
#define BSEC_OTPVLDR2_VLDF83_Msk      (0x1U << BSEC_OTPVLDR2_VLDF83_Pos)      /*!< 0x00080000 */
#define BSEC_OTPVLDR2_VLDF83          BSEC_OTPVLDR2_VLDF83_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF84_Pos      (20U)
#define BSEC_OTPVLDR2_VLDF84_Msk      (0x1U << BSEC_OTPVLDR2_VLDF84_Pos)      /*!< 0x00100000 */
#define BSEC_OTPVLDR2_VLDF84          BSEC_OTPVLDR2_VLDF84_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF85_Pos      (21U)
#define BSEC_OTPVLDR2_VLDF85_Msk      (0x1U << BSEC_OTPVLDR2_VLDF85_Pos)      /*!< 0x00200000 */
#define BSEC_OTPVLDR2_VLDF85          BSEC_OTPVLDR2_VLDF85_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF86_Pos      (22U)
#define BSEC_OTPVLDR2_VLDF86_Msk      (0x1U << BSEC_OTPVLDR2_VLDF86_Pos)      /*!< 0x00400000 */
#define BSEC_OTPVLDR2_VLDF86          BSEC_OTPVLDR2_VLDF86_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF87_Pos      (23U)
#define BSEC_OTPVLDR2_VLDF87_Msk      (0x1U << BSEC_OTPVLDR2_VLDF87_Pos)      /*!< 0x00800000 */
#define BSEC_OTPVLDR2_VLDF87          BSEC_OTPVLDR2_VLDF87_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF88_Pos      (24U)
#define BSEC_OTPVLDR2_VLDF88_Msk      (0x1U << BSEC_OTPVLDR2_VLDF88_Pos)      /*!< 0x01000000 */
#define BSEC_OTPVLDR2_VLDF88          BSEC_OTPVLDR2_VLDF88_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF89_Pos      (25U)
#define BSEC_OTPVLDR2_VLDF89_Msk      (0x1U << BSEC_OTPVLDR2_VLDF89_Pos)      /*!< 0x02000000 */
#define BSEC_OTPVLDR2_VLDF89          BSEC_OTPVLDR2_VLDF89_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF90_Pos      (26U)
#define BSEC_OTPVLDR2_VLDF90_Msk      (0x1U << BSEC_OTPVLDR2_VLDF90_Pos)      /*!< 0x04000000 */
#define BSEC_OTPVLDR2_VLDF90          BSEC_OTPVLDR2_VLDF90_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF91_Pos      (27U)
#define BSEC_OTPVLDR2_VLDF91_Msk      (0x1U << BSEC_OTPVLDR2_VLDF91_Pos)      /*!< 0x08000000 */
#define BSEC_OTPVLDR2_VLDF91          BSEC_OTPVLDR2_VLDF91_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF92_Pos      (28U)
#define BSEC_OTPVLDR2_VLDF92_Msk      (0x1U << BSEC_OTPVLDR2_VLDF92_Pos)      /*!< 0x10000000 */
#define BSEC_OTPVLDR2_VLDF92          BSEC_OTPVLDR2_VLDF92_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF93_Pos      (29U)
#define BSEC_OTPVLDR2_VLDF93_Msk      (0x1U << BSEC_OTPVLDR2_VLDF93_Pos)      /*!< 0x20000000 */
#define BSEC_OTPVLDR2_VLDF93          BSEC_OTPVLDR2_VLDF93_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF94_Pos      (30U)
#define BSEC_OTPVLDR2_VLDF94_Msk      (0x1U << BSEC_OTPVLDR2_VLDF94_Pos)      /*!< 0x40000000 */
#define BSEC_OTPVLDR2_VLDF94          BSEC_OTPVLDR2_VLDF94_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR2_VLDF95_Pos      (31U)
#define BSEC_OTPVLDR2_VLDF95_Msk      (0x1U << BSEC_OTPVLDR2_VLDF95_Pos)      /*!< 0x80000000 */
#define BSEC_OTPVLDR2_VLDF95          BSEC_OTPVLDR2_VLDF95_Msk                /*!< Valid flag for shadow register y (y=64 to 95)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR3 register  *****************/
#define BSEC_OTPVLDR3_VLDF96_Pos      (0U)
#define BSEC_OTPVLDR3_VLDF96_Msk      (0x1U << BSEC_OTPVLDR3_VLDF96_Pos)      /*!< 0x00000001 */
#define BSEC_OTPVLDR3_VLDF96          BSEC_OTPVLDR3_VLDF96_Msk                /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF97_Pos      (1U)
#define BSEC_OTPVLDR3_VLDF97_Msk      (0x1U << BSEC_OTPVLDR3_VLDF97_Pos)      /*!< 0x00000002 */
#define BSEC_OTPVLDR3_VLDF97          BSEC_OTPVLDR3_VLDF97_Msk                /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF98_Pos      (2U)
#define BSEC_OTPVLDR3_VLDF98_Msk      (0x1U << BSEC_OTPVLDR3_VLDF98_Pos)      /*!< 0x00000004 */
#define BSEC_OTPVLDR3_VLDF98          BSEC_OTPVLDR3_VLDF98_Msk                /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF99_Pos      (3U)
#define BSEC_OTPVLDR3_VLDF99_Msk      (0x1U << BSEC_OTPVLDR3_VLDF99_Pos)      /*!< 0x00000008 */
#define BSEC_OTPVLDR3_VLDF99          BSEC_OTPVLDR3_VLDF99_Msk                /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF100_Pos     (4U)
#define BSEC_OTPVLDR3_VLDF100_Msk     (0x1U << BSEC_OTPVLDR3_VLDF100_Pos)     /*!< 0x00000010 */
#define BSEC_OTPVLDR3_VLDF100         BSEC_OTPVLDR3_VLDF100_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF101_Pos     (5U)
#define BSEC_OTPVLDR3_VLDF101_Msk     (0x1U << BSEC_OTPVLDR3_VLDF101_Pos)     /*!< 0x00000020 */
#define BSEC_OTPVLDR3_VLDF101         BSEC_OTPVLDR3_VLDF101_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF102_Pos     (6U)
#define BSEC_OTPVLDR3_VLDF102_Msk     (0x1U << BSEC_OTPVLDR3_VLDF102_Pos)     /*!< 0x00000040 */
#define BSEC_OTPVLDR3_VLDF102         BSEC_OTPVLDR3_VLDF102_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF103_Pos     (7U)
#define BSEC_OTPVLDR3_VLDF103_Msk     (0x1U << BSEC_OTPVLDR3_VLDF103_Pos)     /*!< 0x00000080 */
#define BSEC_OTPVLDR3_VLDF103         BSEC_OTPVLDR3_VLDF103_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF104_Pos     (8U)
#define BSEC_OTPVLDR3_VLDF104_Msk     (0x1U << BSEC_OTPVLDR3_VLDF104_Pos)     /*!< 0x00000100 */
#define BSEC_OTPVLDR3_VLDF104         BSEC_OTPVLDR3_VLDF104_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF105_Pos     (9U)
#define BSEC_OTPVLDR3_VLDF105_Msk     (0x1U << BSEC_OTPVLDR3_VLDF105_Pos)     /*!< 0x00000200 */
#define BSEC_OTPVLDR3_VLDF105         BSEC_OTPVLDR3_VLDF105_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF106_Pos     (10U)
#define BSEC_OTPVLDR3_VLDF106_Msk     (0x1U << BSEC_OTPVLDR3_VLDF106_Pos)     /*!< 0x00000400 */
#define BSEC_OTPVLDR3_VLDF106         BSEC_OTPVLDR3_VLDF106_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF107_Pos     (11U)
#define BSEC_OTPVLDR3_VLDF107_Msk     (0x1U << BSEC_OTPVLDR3_VLDF107_Pos)     /*!< 0x00000800 */
#define BSEC_OTPVLDR3_VLDF107         BSEC_OTPVLDR3_VLDF107_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF108_Pos     (12U)
#define BSEC_OTPVLDR3_VLDF108_Msk     (0x1U << BSEC_OTPVLDR3_VLDF108_Pos)     /*!< 0x00001000 */
#define BSEC_OTPVLDR3_VLDF108         BSEC_OTPVLDR3_VLDF108_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF109_Pos     (13U)
#define BSEC_OTPVLDR3_VLDF109_Msk     (0x1U << BSEC_OTPVLDR3_VLDF109_Pos)     /*!< 0x00002000 */
#define BSEC_OTPVLDR3_VLDF109         BSEC_OTPVLDR3_VLDF109_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF110_Pos     (14U)
#define BSEC_OTPVLDR3_VLDF110_Msk     (0x1U << BSEC_OTPVLDR3_VLDF110_Pos)     /*!< 0x00004000 */
#define BSEC_OTPVLDR3_VLDF110         BSEC_OTPVLDR3_VLDF110_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF111_Pos     (15U)
#define BSEC_OTPVLDR3_VLDF111_Msk     (0x1U << BSEC_OTPVLDR3_VLDF111_Pos)     /*!< 0x00008000 */
#define BSEC_OTPVLDR3_VLDF111         BSEC_OTPVLDR3_VLDF111_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF112_Pos     (16U)
#define BSEC_OTPVLDR3_VLDF112_Msk     (0x1U << BSEC_OTPVLDR3_VLDF112_Pos)     /*!< 0x00010000 */
#define BSEC_OTPVLDR3_VLDF112         BSEC_OTPVLDR3_VLDF112_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF113_Pos     (17U)
#define BSEC_OTPVLDR3_VLDF113_Msk     (0x1U << BSEC_OTPVLDR3_VLDF113_Pos)     /*!< 0x00020000 */
#define BSEC_OTPVLDR3_VLDF113         BSEC_OTPVLDR3_VLDF113_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF114_Pos     (18U)
#define BSEC_OTPVLDR3_VLDF114_Msk     (0x1U << BSEC_OTPVLDR3_VLDF114_Pos)     /*!< 0x00040000 */
#define BSEC_OTPVLDR3_VLDF114         BSEC_OTPVLDR3_VLDF114_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF115_Pos     (19U)
#define BSEC_OTPVLDR3_VLDF115_Msk     (0x1U << BSEC_OTPVLDR3_VLDF115_Pos)     /*!< 0x00080000 */
#define BSEC_OTPVLDR3_VLDF115         BSEC_OTPVLDR3_VLDF115_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF116_Pos     (20U)
#define BSEC_OTPVLDR3_VLDF116_Msk     (0x1U << BSEC_OTPVLDR3_VLDF116_Pos)     /*!< 0x00100000 */
#define BSEC_OTPVLDR3_VLDF116         BSEC_OTPVLDR3_VLDF116_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF117_Pos     (21U)
#define BSEC_OTPVLDR3_VLDF117_Msk     (0x1U << BSEC_OTPVLDR3_VLDF117_Pos)     /*!< 0x00200000 */
#define BSEC_OTPVLDR3_VLDF117         BSEC_OTPVLDR3_VLDF117_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF118_Pos     (22U)
#define BSEC_OTPVLDR3_VLDF118_Msk     (0x1U << BSEC_OTPVLDR3_VLDF118_Pos)     /*!< 0x00400000 */
#define BSEC_OTPVLDR3_VLDF118         BSEC_OTPVLDR3_VLDF118_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF119_Pos     (23U)
#define BSEC_OTPVLDR3_VLDF119_Msk     (0x1U << BSEC_OTPVLDR3_VLDF119_Pos)     /*!< 0x00800000 */
#define BSEC_OTPVLDR3_VLDF119         BSEC_OTPVLDR3_VLDF119_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF120_Pos     (24U)
#define BSEC_OTPVLDR3_VLDF120_Msk     (0x1U << BSEC_OTPVLDR3_VLDF120_Pos)     /*!< 0x01000000 */
#define BSEC_OTPVLDR3_VLDF120         BSEC_OTPVLDR3_VLDF120_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF121_Pos     (25U)
#define BSEC_OTPVLDR3_VLDF121_Msk     (0x1U << BSEC_OTPVLDR3_VLDF121_Pos)     /*!< 0x02000000 */
#define BSEC_OTPVLDR3_VLDF121         BSEC_OTPVLDR3_VLDF121_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF122_Pos     (26U)
#define BSEC_OTPVLDR3_VLDF122_Msk     (0x1U << BSEC_OTPVLDR3_VLDF122_Pos)     /*!< 0x04000000 */
#define BSEC_OTPVLDR3_VLDF122         BSEC_OTPVLDR3_VLDF122_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF123_Pos     (27U)
#define BSEC_OTPVLDR3_VLDF123_Msk     (0x1U << BSEC_OTPVLDR3_VLDF123_Pos)     /*!< 0x08000000 */
#define BSEC_OTPVLDR3_VLDF123         BSEC_OTPVLDR3_VLDF123_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF124_Pos     (28U)
#define BSEC_OTPVLDR3_VLDF124_Msk     (0x1U << BSEC_OTPVLDR3_VLDF124_Pos)     /*!< 0x10000000 */
#define BSEC_OTPVLDR3_VLDF124         BSEC_OTPVLDR3_VLDF124_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF125_Pos     (29U)
#define BSEC_OTPVLDR3_VLDF125_Msk     (0x1U << BSEC_OTPVLDR3_VLDF125_Pos)     /*!< 0x20000000 */
#define BSEC_OTPVLDR3_VLDF125         BSEC_OTPVLDR3_VLDF125_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF126_Pos     (30U)
#define BSEC_OTPVLDR3_VLDF126_Msk     (0x1U << BSEC_OTPVLDR3_VLDF126_Pos)     /*!< 0x40000000 */
#define BSEC_OTPVLDR3_VLDF126         BSEC_OTPVLDR3_VLDF126_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR3_VLDF127_Pos     (31U)
#define BSEC_OTPVLDR3_VLDF127_Msk     (0x1U << BSEC_OTPVLDR3_VLDF127_Pos)     /*!< 0x80000000 */
#define BSEC_OTPVLDR3_VLDF127         BSEC_OTPVLDR3_VLDF127_Msk               /*!< Valid flag for shadow register y (y=96 to 127)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR4 register  *****************/
#define BSEC_OTPVLDR4_VLDF128_Pos     (0U)
#define BSEC_OTPVLDR4_VLDF128_Msk     (0x1U << BSEC_OTPVLDR4_VLDF128_Pos)     /*!< 0x00000001 */
#define BSEC_OTPVLDR4_VLDF128         BSEC_OTPVLDR4_VLDF128_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF129_Pos     (1U)
#define BSEC_OTPVLDR4_VLDF129_Msk     (0x1U << BSEC_OTPVLDR4_VLDF129_Pos)     /*!< 0x00000002 */
#define BSEC_OTPVLDR4_VLDF129         BSEC_OTPVLDR4_VLDF129_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF130_Pos     (2U)
#define BSEC_OTPVLDR4_VLDF130_Msk     (0x1U << BSEC_OTPVLDR4_VLDF130_Pos)     /*!< 0x00000004 */
#define BSEC_OTPVLDR4_VLDF130         BSEC_OTPVLDR4_VLDF130_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF131_Pos     (3U)
#define BSEC_OTPVLDR4_VLDF131_Msk     (0x1U << BSEC_OTPVLDR4_VLDF131_Pos)     /*!< 0x00000008 */
#define BSEC_OTPVLDR4_VLDF131         BSEC_OTPVLDR4_VLDF131_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF132_Pos     (4U)
#define BSEC_OTPVLDR4_VLDF132_Msk     (0x1U << BSEC_OTPVLDR4_VLDF132_Pos)     /*!< 0x00000010 */
#define BSEC_OTPVLDR4_VLDF132         BSEC_OTPVLDR4_VLDF132_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF133_Pos     (5U)
#define BSEC_OTPVLDR4_VLDF133_Msk     (0x1U << BSEC_OTPVLDR4_VLDF133_Pos)     /*!< 0x00000020 */
#define BSEC_OTPVLDR4_VLDF133         BSEC_OTPVLDR4_VLDF133_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF134_Pos     (6U)
#define BSEC_OTPVLDR4_VLDF134_Msk     (0x1U << BSEC_OTPVLDR4_VLDF134_Pos)     /*!< 0x00000040 */
#define BSEC_OTPVLDR4_VLDF134         BSEC_OTPVLDR4_VLDF134_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF135_Pos     (7U)
#define BSEC_OTPVLDR4_VLDF135_Msk     (0x1U << BSEC_OTPVLDR4_VLDF135_Pos)     /*!< 0x00000080 */
#define BSEC_OTPVLDR4_VLDF135         BSEC_OTPVLDR4_VLDF135_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF136_Pos     (8U)
#define BSEC_OTPVLDR4_VLDF136_Msk     (0x1U << BSEC_OTPVLDR4_VLDF136_Pos)     /*!< 0x00000100 */
#define BSEC_OTPVLDR4_VLDF136         BSEC_OTPVLDR4_VLDF136_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF137_Pos     (9U)
#define BSEC_OTPVLDR4_VLDF137_Msk     (0x1U << BSEC_OTPVLDR4_VLDF137_Pos)     /*!< 0x00000200 */
#define BSEC_OTPVLDR4_VLDF137         BSEC_OTPVLDR4_VLDF137_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF138_Pos     (10U)
#define BSEC_OTPVLDR4_VLDF138_Msk     (0x1U << BSEC_OTPVLDR4_VLDF138_Pos)     /*!< 0x00000400 */
#define BSEC_OTPVLDR4_VLDF138         BSEC_OTPVLDR4_VLDF138_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF139_Pos     (11U)
#define BSEC_OTPVLDR4_VLDF139_Msk     (0x1U << BSEC_OTPVLDR4_VLDF139_Pos)     /*!< 0x00000800 */
#define BSEC_OTPVLDR4_VLDF139         BSEC_OTPVLDR4_VLDF139_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF140_Pos     (12U)
#define BSEC_OTPVLDR4_VLDF140_Msk     (0x1U << BSEC_OTPVLDR4_VLDF140_Pos)     /*!< 0x00001000 */
#define BSEC_OTPVLDR4_VLDF140         BSEC_OTPVLDR4_VLDF140_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF141_Pos     (13U)
#define BSEC_OTPVLDR4_VLDF141_Msk     (0x1U << BSEC_OTPVLDR4_VLDF141_Pos)     /*!< 0x00002000 */
#define BSEC_OTPVLDR4_VLDF141         BSEC_OTPVLDR4_VLDF141_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF142_Pos     (14U)
#define BSEC_OTPVLDR4_VLDF142_Msk     (0x1U << BSEC_OTPVLDR4_VLDF142_Pos)     /*!< 0x00004000 */
#define BSEC_OTPVLDR4_VLDF142         BSEC_OTPVLDR4_VLDF142_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF143_Pos     (15U)
#define BSEC_OTPVLDR4_VLDF143_Msk     (0x1U << BSEC_OTPVLDR4_VLDF143_Pos)     /*!< 0x00008000 */
#define BSEC_OTPVLDR4_VLDF143         BSEC_OTPVLDR4_VLDF143_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF144_Pos     (16U)
#define BSEC_OTPVLDR4_VLDF144_Msk     (0x1U << BSEC_OTPVLDR4_VLDF144_Pos)     /*!< 0x00010000 */
#define BSEC_OTPVLDR4_VLDF144         BSEC_OTPVLDR4_VLDF144_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF145_Pos     (17U)
#define BSEC_OTPVLDR4_VLDF145_Msk     (0x1U << BSEC_OTPVLDR4_VLDF145_Pos)     /*!< 0x00020000 */
#define BSEC_OTPVLDR4_VLDF145         BSEC_OTPVLDR4_VLDF145_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF146_Pos     (18U)
#define BSEC_OTPVLDR4_VLDF146_Msk     (0x1U << BSEC_OTPVLDR4_VLDF146_Pos)     /*!< 0x00040000 */
#define BSEC_OTPVLDR4_VLDF146         BSEC_OTPVLDR4_VLDF146_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF147_Pos     (19U)
#define BSEC_OTPVLDR4_VLDF147_Msk     (0x1U << BSEC_OTPVLDR4_VLDF147_Pos)     /*!< 0x00080000 */
#define BSEC_OTPVLDR4_VLDF147         BSEC_OTPVLDR4_VLDF147_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF148_Pos     (20U)
#define BSEC_OTPVLDR4_VLDF148_Msk     (0x1U << BSEC_OTPVLDR4_VLDF148_Pos)     /*!< 0x00100000 */
#define BSEC_OTPVLDR4_VLDF148         BSEC_OTPVLDR4_VLDF148_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF149_Pos     (21U)
#define BSEC_OTPVLDR4_VLDF149_Msk     (0x1U << BSEC_OTPVLDR4_VLDF149_Pos)     /*!< 0x00200000 */
#define BSEC_OTPVLDR4_VLDF149         BSEC_OTPVLDR4_VLDF149_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF150_Pos     (22U)
#define BSEC_OTPVLDR4_VLDF150_Msk     (0x1U << BSEC_OTPVLDR4_VLDF150_Pos)     /*!< 0x00400000 */
#define BSEC_OTPVLDR4_VLDF150         BSEC_OTPVLDR4_VLDF150_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF151_Pos     (23U)
#define BSEC_OTPVLDR4_VLDF151_Msk     (0x1U << BSEC_OTPVLDR4_VLDF151_Pos)     /*!< 0x00800000 */
#define BSEC_OTPVLDR4_VLDF151         BSEC_OTPVLDR4_VLDF151_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF152_Pos     (24U)
#define BSEC_OTPVLDR4_VLDF152_Msk     (0x1U << BSEC_OTPVLDR4_VLDF152_Pos)     /*!< 0x01000000 */
#define BSEC_OTPVLDR4_VLDF152         BSEC_OTPVLDR4_VLDF152_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF153_Pos     (25U)
#define BSEC_OTPVLDR4_VLDF153_Msk     (0x1U << BSEC_OTPVLDR4_VLDF153_Pos)     /*!< 0x02000000 */
#define BSEC_OTPVLDR4_VLDF153         BSEC_OTPVLDR4_VLDF153_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF154_Pos     (26U)
#define BSEC_OTPVLDR4_VLDF154_Msk     (0x1U << BSEC_OTPVLDR4_VLDF154_Pos)     /*!< 0x04000000 */
#define BSEC_OTPVLDR4_VLDF154         BSEC_OTPVLDR4_VLDF154_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF155_Pos     (27U)
#define BSEC_OTPVLDR4_VLDF155_Msk     (0x1U << BSEC_OTPVLDR4_VLDF155_Pos)     /*!< 0x08000000 */
#define BSEC_OTPVLDR4_VLDF155         BSEC_OTPVLDR4_VLDF155_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF156_Pos     (28U)
#define BSEC_OTPVLDR4_VLDF156_Msk     (0x1U << BSEC_OTPVLDR4_VLDF156_Pos)     /*!< 0x10000000 */
#define BSEC_OTPVLDR4_VLDF156         BSEC_OTPVLDR4_VLDF156_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF157_Pos     (29U)
#define BSEC_OTPVLDR4_VLDF157_Msk     (0x1U << BSEC_OTPVLDR4_VLDF157_Pos)     /*!< 0x20000000 */
#define BSEC_OTPVLDR4_VLDF157         BSEC_OTPVLDR4_VLDF157_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF158_Pos     (30U)
#define BSEC_OTPVLDR4_VLDF158_Msk     (0x1U << BSEC_OTPVLDR4_VLDF158_Pos)     /*!< 0x40000000 */
#define BSEC_OTPVLDR4_VLDF158         BSEC_OTPVLDR4_VLDF158_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR4_VLDF159_Pos     (31U)
#define BSEC_OTPVLDR4_VLDF159_Msk     (0x1U << BSEC_OTPVLDR4_VLDF159_Pos)     /*!< 0x80000000 */
#define BSEC_OTPVLDR4_VLDF159         BSEC_OTPVLDR4_VLDF159_Msk               /*!< Valid flag for shadow register y (y=128 to 159)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR5 register  *****************/
#define BSEC_OTPVLDR5_VLDF160_Pos     (0U)
#define BSEC_OTPVLDR5_VLDF160_Msk     (0x1U << BSEC_OTPVLDR5_VLDF160_Pos)     /*!< 0x00000001 */
#define BSEC_OTPVLDR5_VLDF160         BSEC_OTPVLDR5_VLDF160_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF161_Pos     (1U)
#define BSEC_OTPVLDR5_VLDF161_Msk     (0x1U << BSEC_OTPVLDR5_VLDF161_Pos)     /*!< 0x00000002 */
#define BSEC_OTPVLDR5_VLDF161         BSEC_OTPVLDR5_VLDF161_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF162_Pos     (2U)
#define BSEC_OTPVLDR5_VLDF162_Msk     (0x1U << BSEC_OTPVLDR5_VLDF162_Pos)     /*!< 0x00000004 */
#define BSEC_OTPVLDR5_VLDF162         BSEC_OTPVLDR5_VLDF162_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF163_Pos     (3U)
#define BSEC_OTPVLDR5_VLDF163_Msk     (0x1U << BSEC_OTPVLDR5_VLDF163_Pos)     /*!< 0x00000008 */
#define BSEC_OTPVLDR5_VLDF163         BSEC_OTPVLDR5_VLDF163_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF164_Pos     (4U)
#define BSEC_OTPVLDR5_VLDF164_Msk     (0x1U << BSEC_OTPVLDR5_VLDF164_Pos)     /*!< 0x00000010 */
#define BSEC_OTPVLDR5_VLDF164         BSEC_OTPVLDR5_VLDF164_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF165_Pos     (5U)
#define BSEC_OTPVLDR5_VLDF165_Msk     (0x1U << BSEC_OTPVLDR5_VLDF165_Pos)     /*!< 0x00000020 */
#define BSEC_OTPVLDR5_VLDF165         BSEC_OTPVLDR5_VLDF165_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF166_Pos     (6U)
#define BSEC_OTPVLDR5_VLDF166_Msk     (0x1U << BSEC_OTPVLDR5_VLDF166_Pos)     /*!< 0x00000040 */
#define BSEC_OTPVLDR5_VLDF166         BSEC_OTPVLDR5_VLDF166_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF167_Pos     (7U)
#define BSEC_OTPVLDR5_VLDF167_Msk     (0x1U << BSEC_OTPVLDR5_VLDF167_Pos)     /*!< 0x00000080 */
#define BSEC_OTPVLDR5_VLDF167         BSEC_OTPVLDR5_VLDF167_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF168_Pos     (8U)
#define BSEC_OTPVLDR5_VLDF168_Msk     (0x1U << BSEC_OTPVLDR5_VLDF168_Pos)     /*!< 0x00000100 */
#define BSEC_OTPVLDR5_VLDF168         BSEC_OTPVLDR5_VLDF168_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF169_Pos     (9U)
#define BSEC_OTPVLDR5_VLDF169_Msk     (0x1U << BSEC_OTPVLDR5_VLDF169_Pos)     /*!< 0x00000200 */
#define BSEC_OTPVLDR5_VLDF169         BSEC_OTPVLDR5_VLDF169_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF170_Pos     (10U)
#define BSEC_OTPVLDR5_VLDF170_Msk     (0x1U << BSEC_OTPVLDR5_VLDF170_Pos)     /*!< 0x00000400 */
#define BSEC_OTPVLDR5_VLDF170         BSEC_OTPVLDR5_VLDF170_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF171_Pos     (11U)
#define BSEC_OTPVLDR5_VLDF171_Msk     (0x1U << BSEC_OTPVLDR5_VLDF171_Pos)     /*!< 0x00000800 */
#define BSEC_OTPVLDR5_VLDF171         BSEC_OTPVLDR5_VLDF171_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF172_Pos     (12U)
#define BSEC_OTPVLDR5_VLDF172_Msk     (0x1U << BSEC_OTPVLDR5_VLDF172_Pos)     /*!< 0x00001000 */
#define BSEC_OTPVLDR5_VLDF172         BSEC_OTPVLDR5_VLDF172_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF173_Pos     (13U)
#define BSEC_OTPVLDR5_VLDF173_Msk     (0x1U << BSEC_OTPVLDR5_VLDF173_Pos)     /*!< 0x00002000 */
#define BSEC_OTPVLDR5_VLDF173         BSEC_OTPVLDR5_VLDF173_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF174_Pos     (14U)
#define BSEC_OTPVLDR5_VLDF174_Msk     (0x1U << BSEC_OTPVLDR5_VLDF174_Pos)     /*!< 0x00004000 */
#define BSEC_OTPVLDR5_VLDF174         BSEC_OTPVLDR5_VLDF174_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF175_Pos     (15U)
#define BSEC_OTPVLDR5_VLDF175_Msk     (0x1U << BSEC_OTPVLDR5_VLDF175_Pos)     /*!< 0x00008000 */
#define BSEC_OTPVLDR5_VLDF175         BSEC_OTPVLDR5_VLDF175_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF176_Pos     (16U)
#define BSEC_OTPVLDR5_VLDF176_Msk     (0x1U << BSEC_OTPVLDR5_VLDF176_Pos)     /*!< 0x00010000 */
#define BSEC_OTPVLDR5_VLDF176         BSEC_OTPVLDR5_VLDF176_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF177_Pos     (17U)
#define BSEC_OTPVLDR5_VLDF177_Msk     (0x1U << BSEC_OTPVLDR5_VLDF177_Pos)     /*!< 0x00020000 */
#define BSEC_OTPVLDR5_VLDF177         BSEC_OTPVLDR5_VLDF177_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF178_Pos     (18U)
#define BSEC_OTPVLDR5_VLDF178_Msk     (0x1U << BSEC_OTPVLDR5_VLDF178_Pos)     /*!< 0x00040000 */
#define BSEC_OTPVLDR5_VLDF178         BSEC_OTPVLDR5_VLDF178_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF179_Pos     (19U)
#define BSEC_OTPVLDR5_VLDF179_Msk     (0x1U << BSEC_OTPVLDR5_VLDF179_Pos)     /*!< 0x00080000 */
#define BSEC_OTPVLDR5_VLDF179         BSEC_OTPVLDR5_VLDF179_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF180_Pos     (20U)
#define BSEC_OTPVLDR5_VLDF180_Msk     (0x1U << BSEC_OTPVLDR5_VLDF180_Pos)     /*!< 0x00100000 */
#define BSEC_OTPVLDR5_VLDF180         BSEC_OTPVLDR5_VLDF180_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF181_Pos     (21U)
#define BSEC_OTPVLDR5_VLDF181_Msk     (0x1U << BSEC_OTPVLDR5_VLDF181_Pos)     /*!< 0x00200000 */
#define BSEC_OTPVLDR5_VLDF181         BSEC_OTPVLDR5_VLDF181_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF182_Pos     (22U)
#define BSEC_OTPVLDR5_VLDF182_Msk     (0x1U << BSEC_OTPVLDR5_VLDF182_Pos)     /*!< 0x00400000 */
#define BSEC_OTPVLDR5_VLDF182         BSEC_OTPVLDR5_VLDF182_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF183_Pos     (23U)
#define BSEC_OTPVLDR5_VLDF183_Msk     (0x1U << BSEC_OTPVLDR5_VLDF183_Pos)     /*!< 0x00800000 */
#define BSEC_OTPVLDR5_VLDF183         BSEC_OTPVLDR5_VLDF183_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF184_Pos     (24U)
#define BSEC_OTPVLDR5_VLDF184_Msk     (0x1U << BSEC_OTPVLDR5_VLDF184_Pos)     /*!< 0x01000000 */
#define BSEC_OTPVLDR5_VLDF184         BSEC_OTPVLDR5_VLDF184_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF185_Pos     (25U)
#define BSEC_OTPVLDR5_VLDF185_Msk     (0x1U << BSEC_OTPVLDR5_VLDF185_Pos)     /*!< 0x02000000 */
#define BSEC_OTPVLDR5_VLDF185         BSEC_OTPVLDR5_VLDF185_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF186_Pos     (26U)
#define BSEC_OTPVLDR5_VLDF186_Msk     (0x1U << BSEC_OTPVLDR5_VLDF186_Pos)     /*!< 0x04000000 */
#define BSEC_OTPVLDR5_VLDF186         BSEC_OTPVLDR5_VLDF186_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF187_Pos     (27U)
#define BSEC_OTPVLDR5_VLDF187_Msk     (0x1U << BSEC_OTPVLDR5_VLDF187_Pos)     /*!< 0x08000000 */
#define BSEC_OTPVLDR5_VLDF187         BSEC_OTPVLDR5_VLDF187_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF188_Pos     (28U)
#define BSEC_OTPVLDR5_VLDF188_Msk     (0x1U << BSEC_OTPVLDR5_VLDF188_Pos)     /*!< 0x10000000 */
#define BSEC_OTPVLDR5_VLDF188         BSEC_OTPVLDR5_VLDF188_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF189_Pos     (29U)
#define BSEC_OTPVLDR5_VLDF189_Msk     (0x1U << BSEC_OTPVLDR5_VLDF189_Pos)     /*!< 0x20000000 */
#define BSEC_OTPVLDR5_VLDF189         BSEC_OTPVLDR5_VLDF189_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF190_Pos     (30U)
#define BSEC_OTPVLDR5_VLDF190_Msk     (0x1U << BSEC_OTPVLDR5_VLDF190_Pos)     /*!< 0x40000000 */
#define BSEC_OTPVLDR5_VLDF190         BSEC_OTPVLDR5_VLDF190_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR5_VLDF191_Pos     (31U)
#define BSEC_OTPVLDR5_VLDF191_Msk     (0x1U << BSEC_OTPVLDR5_VLDF191_Pos)     /*!< 0x80000000 */
#define BSEC_OTPVLDR5_VLDF191         BSEC_OTPVLDR5_VLDF191_Msk               /*!< Valid flag for shadow register y (y=160 to 191)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR6 register  *****************/
#define BSEC_OTPVLDR6_VLDF192_Pos     (0U)
#define BSEC_OTPVLDR6_VLDF192_Msk     (0x1U << BSEC_OTPVLDR6_VLDF192_Pos)     /*!< 0x00000001 */
#define BSEC_OTPVLDR6_VLDF192         BSEC_OTPVLDR6_VLDF192_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF193_Pos     (1U)
#define BSEC_OTPVLDR6_VLDF193_Msk     (0x1U << BSEC_OTPVLDR6_VLDF193_Pos)     /*!< 0x00000002 */
#define BSEC_OTPVLDR6_VLDF193         BSEC_OTPVLDR6_VLDF193_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF194_Pos     (2U)
#define BSEC_OTPVLDR6_VLDF194_Msk     (0x1U << BSEC_OTPVLDR6_VLDF194_Pos)     /*!< 0x00000004 */
#define BSEC_OTPVLDR6_VLDF194         BSEC_OTPVLDR6_VLDF194_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF195_Pos     (3U)
#define BSEC_OTPVLDR6_VLDF195_Msk     (0x1U << BSEC_OTPVLDR6_VLDF195_Pos)     /*!< 0x00000008 */
#define BSEC_OTPVLDR6_VLDF195         BSEC_OTPVLDR6_VLDF195_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF196_Pos     (4U)
#define BSEC_OTPVLDR6_VLDF196_Msk     (0x1U << BSEC_OTPVLDR6_VLDF196_Pos)     /*!< 0x00000010 */
#define BSEC_OTPVLDR6_VLDF196         BSEC_OTPVLDR6_VLDF196_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF197_Pos     (5U)
#define BSEC_OTPVLDR6_VLDF197_Msk     (0x1U << BSEC_OTPVLDR6_VLDF197_Pos)     /*!< 0x00000020 */
#define BSEC_OTPVLDR6_VLDF197         BSEC_OTPVLDR6_VLDF197_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF198_Pos     (6U)
#define BSEC_OTPVLDR6_VLDF198_Msk     (0x1U << BSEC_OTPVLDR6_VLDF198_Pos)     /*!< 0x00000040 */
#define BSEC_OTPVLDR6_VLDF198         BSEC_OTPVLDR6_VLDF198_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF199_Pos     (7U)
#define BSEC_OTPVLDR6_VLDF199_Msk     (0x1U << BSEC_OTPVLDR6_VLDF199_Pos)     /*!< 0x00000080 */
#define BSEC_OTPVLDR6_VLDF199         BSEC_OTPVLDR6_VLDF199_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF200_Pos     (8U)
#define BSEC_OTPVLDR6_VLDF200_Msk     (0x1U << BSEC_OTPVLDR6_VLDF200_Pos)     /*!< 0x00000100 */
#define BSEC_OTPVLDR6_VLDF200         BSEC_OTPVLDR6_VLDF200_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF201_Pos     (9U)
#define BSEC_OTPVLDR6_VLDF201_Msk     (0x1U << BSEC_OTPVLDR6_VLDF201_Pos)     /*!< 0x00000200 */
#define BSEC_OTPVLDR6_VLDF201         BSEC_OTPVLDR6_VLDF201_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF202_Pos     (10U)
#define BSEC_OTPVLDR6_VLDF202_Msk     (0x1U << BSEC_OTPVLDR6_VLDF202_Pos)     /*!< 0x00000400 */
#define BSEC_OTPVLDR6_VLDF202         BSEC_OTPVLDR6_VLDF202_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF203_Pos     (11U)
#define BSEC_OTPVLDR6_VLDF203_Msk     (0x1U << BSEC_OTPVLDR6_VLDF203_Pos)     /*!< 0x00000800 */
#define BSEC_OTPVLDR6_VLDF203         BSEC_OTPVLDR6_VLDF203_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF204_Pos     (12U)
#define BSEC_OTPVLDR6_VLDF204_Msk     (0x1U << BSEC_OTPVLDR6_VLDF204_Pos)     /*!< 0x00001000 */
#define BSEC_OTPVLDR6_VLDF204         BSEC_OTPVLDR6_VLDF204_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF205_Pos     (13U)
#define BSEC_OTPVLDR6_VLDF205_Msk     (0x1U << BSEC_OTPVLDR6_VLDF205_Pos)     /*!< 0x00002000 */
#define BSEC_OTPVLDR6_VLDF205         BSEC_OTPVLDR6_VLDF205_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF206_Pos     (14U)
#define BSEC_OTPVLDR6_VLDF206_Msk     (0x1U << BSEC_OTPVLDR6_VLDF206_Pos)     /*!< 0x00004000 */
#define BSEC_OTPVLDR6_VLDF206         BSEC_OTPVLDR6_VLDF206_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF207_Pos     (15U)
#define BSEC_OTPVLDR6_VLDF207_Msk     (0x1U << BSEC_OTPVLDR6_VLDF207_Pos)     /*!< 0x00008000 */
#define BSEC_OTPVLDR6_VLDF207         BSEC_OTPVLDR6_VLDF207_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF208_Pos     (16U)
#define BSEC_OTPVLDR6_VLDF208_Msk     (0x1U << BSEC_OTPVLDR6_VLDF208_Pos)     /*!< 0x00010000 */
#define BSEC_OTPVLDR6_VLDF208         BSEC_OTPVLDR6_VLDF208_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF209_Pos     (17U)
#define BSEC_OTPVLDR6_VLDF209_Msk     (0x1U << BSEC_OTPVLDR6_VLDF209_Pos)     /*!< 0x00020000 */
#define BSEC_OTPVLDR6_VLDF209         BSEC_OTPVLDR6_VLDF209_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF210_Pos     (18U)
#define BSEC_OTPVLDR6_VLDF210_Msk     (0x1U << BSEC_OTPVLDR6_VLDF210_Pos)     /*!< 0x00040000 */
#define BSEC_OTPVLDR6_VLDF210         BSEC_OTPVLDR6_VLDF210_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF211_Pos     (19U)
#define BSEC_OTPVLDR6_VLDF211_Msk     (0x1U << BSEC_OTPVLDR6_VLDF211_Pos)     /*!< 0x00080000 */
#define BSEC_OTPVLDR6_VLDF211         BSEC_OTPVLDR6_VLDF211_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF212_Pos     (20U)
#define BSEC_OTPVLDR6_VLDF212_Msk     (0x1U << BSEC_OTPVLDR6_VLDF212_Pos)     /*!< 0x00100000 */
#define BSEC_OTPVLDR6_VLDF212         BSEC_OTPVLDR6_VLDF212_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF213_Pos     (21U)
#define BSEC_OTPVLDR6_VLDF213_Msk     (0x1U << BSEC_OTPVLDR6_VLDF213_Pos)     /*!< 0x00200000 */
#define BSEC_OTPVLDR6_VLDF213         BSEC_OTPVLDR6_VLDF213_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF214_Pos     (22U)
#define BSEC_OTPVLDR6_VLDF214_Msk     (0x1U << BSEC_OTPVLDR6_VLDF214_Pos)     /*!< 0x00400000 */
#define BSEC_OTPVLDR6_VLDF214         BSEC_OTPVLDR6_VLDF214_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF215_Pos     (23U)
#define BSEC_OTPVLDR6_VLDF215_Msk     (0x1U << BSEC_OTPVLDR6_VLDF215_Pos)     /*!< 0x00800000 */
#define BSEC_OTPVLDR6_VLDF215         BSEC_OTPVLDR6_VLDF215_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF216_Pos     (24U)
#define BSEC_OTPVLDR6_VLDF216_Msk     (0x1U << BSEC_OTPVLDR6_VLDF216_Pos)     /*!< 0x01000000 */
#define BSEC_OTPVLDR6_VLDF216         BSEC_OTPVLDR6_VLDF216_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF217_Pos     (25U)
#define BSEC_OTPVLDR6_VLDF217_Msk     (0x1U << BSEC_OTPVLDR6_VLDF217_Pos)     /*!< 0x02000000 */
#define BSEC_OTPVLDR6_VLDF217         BSEC_OTPVLDR6_VLDF217_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF218_Pos     (26U)
#define BSEC_OTPVLDR6_VLDF218_Msk     (0x1U << BSEC_OTPVLDR6_VLDF218_Pos)     /*!< 0x04000000 */
#define BSEC_OTPVLDR6_VLDF218         BSEC_OTPVLDR6_VLDF218_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF219_Pos     (27U)
#define BSEC_OTPVLDR6_VLDF219_Msk     (0x1U << BSEC_OTPVLDR6_VLDF219_Pos)     /*!< 0x08000000 */
#define BSEC_OTPVLDR6_VLDF219         BSEC_OTPVLDR6_VLDF219_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF220_Pos     (28U)
#define BSEC_OTPVLDR6_VLDF220_Msk     (0x1U << BSEC_OTPVLDR6_VLDF220_Pos)     /*!< 0x10000000 */
#define BSEC_OTPVLDR6_VLDF220         BSEC_OTPVLDR6_VLDF220_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF221_Pos     (29U)
#define BSEC_OTPVLDR6_VLDF221_Msk     (0x1U << BSEC_OTPVLDR6_VLDF221_Pos)     /*!< 0x20000000 */
#define BSEC_OTPVLDR6_VLDF221         BSEC_OTPVLDR6_VLDF221_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF222_Pos     (30U)
#define BSEC_OTPVLDR6_VLDF222_Msk     (0x1U << BSEC_OTPVLDR6_VLDF222_Pos)     /*!< 0x40000000 */
#define BSEC_OTPVLDR6_VLDF222         BSEC_OTPVLDR6_VLDF222_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR6_VLDF223_Pos     (31U)
#define BSEC_OTPVLDR6_VLDF223_Msk     (0x1U << BSEC_OTPVLDR6_VLDF223_Pos)     /*!< 0x80000000 */
#define BSEC_OTPVLDR6_VLDF223         BSEC_OTPVLDR6_VLDF223_Msk               /*!< Valid flag for shadow register y (y=192 to 223)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR7 register  *****************/
#define BSEC_OTPVLDR7_VLDF224_Pos     (0U)
#define BSEC_OTPVLDR7_VLDF224_Msk     (0x1U << BSEC_OTPVLDR7_VLDF224_Pos)     /*!< 0x00000001 */
#define BSEC_OTPVLDR7_VLDF224         BSEC_OTPVLDR7_VLDF224_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF225_Pos     (1U)
#define BSEC_OTPVLDR7_VLDF225_Msk     (0x1U << BSEC_OTPVLDR7_VLDF225_Pos)     /*!< 0x00000002 */
#define BSEC_OTPVLDR7_VLDF225         BSEC_OTPVLDR7_VLDF225_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF226_Pos     (2U)
#define BSEC_OTPVLDR7_VLDF226_Msk     (0x1U << BSEC_OTPVLDR7_VLDF226_Pos)     /*!< 0x00000004 */
#define BSEC_OTPVLDR7_VLDF226         BSEC_OTPVLDR7_VLDF226_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF227_Pos     (3U)
#define BSEC_OTPVLDR7_VLDF227_Msk     (0x1U << BSEC_OTPVLDR7_VLDF227_Pos)     /*!< 0x00000008 */
#define BSEC_OTPVLDR7_VLDF227         BSEC_OTPVLDR7_VLDF227_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF228_Pos     (4U)
#define BSEC_OTPVLDR7_VLDF228_Msk     (0x1U << BSEC_OTPVLDR7_VLDF228_Pos)     /*!< 0x00000010 */
#define BSEC_OTPVLDR7_VLDF228         BSEC_OTPVLDR7_VLDF228_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF229_Pos     (5U)
#define BSEC_OTPVLDR7_VLDF229_Msk     (0x1U << BSEC_OTPVLDR7_VLDF229_Pos)     /*!< 0x00000020 */
#define BSEC_OTPVLDR7_VLDF229         BSEC_OTPVLDR7_VLDF229_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF230_Pos     (6U)
#define BSEC_OTPVLDR7_VLDF230_Msk     (0x1U << BSEC_OTPVLDR7_VLDF230_Pos)     /*!< 0x00000040 */
#define BSEC_OTPVLDR7_VLDF230         BSEC_OTPVLDR7_VLDF230_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF231_Pos     (7U)
#define BSEC_OTPVLDR7_VLDF231_Msk     (0x1U << BSEC_OTPVLDR7_VLDF231_Pos)     /*!< 0x00000080 */
#define BSEC_OTPVLDR7_VLDF231         BSEC_OTPVLDR7_VLDF231_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF232_Pos     (8U)
#define BSEC_OTPVLDR7_VLDF232_Msk     (0x1U << BSEC_OTPVLDR7_VLDF232_Pos)     /*!< 0x00000100 */
#define BSEC_OTPVLDR7_VLDF232         BSEC_OTPVLDR7_VLDF232_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF233_Pos     (9U)
#define BSEC_OTPVLDR7_VLDF233_Msk     (0x1U << BSEC_OTPVLDR7_VLDF233_Pos)     /*!< 0x00000200 */
#define BSEC_OTPVLDR7_VLDF233         BSEC_OTPVLDR7_VLDF233_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF234_Pos     (10U)
#define BSEC_OTPVLDR7_VLDF234_Msk     (0x1U << BSEC_OTPVLDR7_VLDF234_Pos)     /*!< 0x00000400 */
#define BSEC_OTPVLDR7_VLDF234         BSEC_OTPVLDR7_VLDF234_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF235_Pos     (11U)
#define BSEC_OTPVLDR7_VLDF235_Msk     (0x1U << BSEC_OTPVLDR7_VLDF235_Pos)     /*!< 0x00000800 */
#define BSEC_OTPVLDR7_VLDF235         BSEC_OTPVLDR7_VLDF235_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF236_Pos     (12U)
#define BSEC_OTPVLDR7_VLDF236_Msk     (0x1U << BSEC_OTPVLDR7_VLDF236_Pos)     /*!< 0x00001000 */
#define BSEC_OTPVLDR7_VLDF236         BSEC_OTPVLDR7_VLDF236_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF237_Pos     (13U)
#define BSEC_OTPVLDR7_VLDF237_Msk     (0x1U << BSEC_OTPVLDR7_VLDF237_Pos)     /*!< 0x00002000 */
#define BSEC_OTPVLDR7_VLDF237         BSEC_OTPVLDR7_VLDF237_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF238_Pos     (14U)
#define BSEC_OTPVLDR7_VLDF238_Msk     (0x1U << BSEC_OTPVLDR7_VLDF238_Pos)     /*!< 0x00004000 */
#define BSEC_OTPVLDR7_VLDF238         BSEC_OTPVLDR7_VLDF238_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF239_Pos     (15U)
#define BSEC_OTPVLDR7_VLDF239_Msk     (0x1U << BSEC_OTPVLDR7_VLDF239_Pos)     /*!< 0x00008000 */
#define BSEC_OTPVLDR7_VLDF239         BSEC_OTPVLDR7_VLDF239_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF240_Pos     (16U)
#define BSEC_OTPVLDR7_VLDF240_Msk     (0x1U << BSEC_OTPVLDR7_VLDF240_Pos)     /*!< 0x00010000 */
#define BSEC_OTPVLDR7_VLDF240         BSEC_OTPVLDR7_VLDF240_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF241_Pos     (17U)
#define BSEC_OTPVLDR7_VLDF241_Msk     (0x1U << BSEC_OTPVLDR7_VLDF241_Pos)     /*!< 0x00020000 */
#define BSEC_OTPVLDR7_VLDF241         BSEC_OTPVLDR7_VLDF241_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF242_Pos     (18U)
#define BSEC_OTPVLDR7_VLDF242_Msk     (0x1U << BSEC_OTPVLDR7_VLDF242_Pos)     /*!< 0x00040000 */
#define BSEC_OTPVLDR7_VLDF242         BSEC_OTPVLDR7_VLDF242_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF243_Pos     (19U)
#define BSEC_OTPVLDR7_VLDF243_Msk     (0x1U << BSEC_OTPVLDR7_VLDF243_Pos)     /*!< 0x00080000 */
#define BSEC_OTPVLDR7_VLDF243         BSEC_OTPVLDR7_VLDF243_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF244_Pos     (20U)
#define BSEC_OTPVLDR7_VLDF244_Msk     (0x1U << BSEC_OTPVLDR7_VLDF244_Pos)     /*!< 0x00100000 */
#define BSEC_OTPVLDR7_VLDF244         BSEC_OTPVLDR7_VLDF244_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF245_Pos     (21U)
#define BSEC_OTPVLDR7_VLDF245_Msk     (0x1U << BSEC_OTPVLDR7_VLDF245_Pos)     /*!< 0x00200000 */
#define BSEC_OTPVLDR7_VLDF245         BSEC_OTPVLDR7_VLDF245_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF246_Pos     (22U)
#define BSEC_OTPVLDR7_VLDF246_Msk     (0x1U << BSEC_OTPVLDR7_VLDF246_Pos)     /*!< 0x00400000 */
#define BSEC_OTPVLDR7_VLDF246         BSEC_OTPVLDR7_VLDF246_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF247_Pos     (23U)
#define BSEC_OTPVLDR7_VLDF247_Msk     (0x1U << BSEC_OTPVLDR7_VLDF247_Pos)     /*!< 0x00800000 */
#define BSEC_OTPVLDR7_VLDF247         BSEC_OTPVLDR7_VLDF247_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF248_Pos     (24U)
#define BSEC_OTPVLDR7_VLDF248_Msk     (0x1U << BSEC_OTPVLDR7_VLDF248_Pos)     /*!< 0x01000000 */
#define BSEC_OTPVLDR7_VLDF248         BSEC_OTPVLDR7_VLDF248_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF249_Pos     (25U)
#define BSEC_OTPVLDR7_VLDF249_Msk     (0x1U << BSEC_OTPVLDR7_VLDF249_Pos)     /*!< 0x02000000 */
#define BSEC_OTPVLDR7_VLDF249         BSEC_OTPVLDR7_VLDF249_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF250_Pos     (26U)
#define BSEC_OTPVLDR7_VLDF250_Msk     (0x1U << BSEC_OTPVLDR7_VLDF250_Pos)     /*!< 0x04000000 */
#define BSEC_OTPVLDR7_VLDF250         BSEC_OTPVLDR7_VLDF250_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF251_Pos     (27U)
#define BSEC_OTPVLDR7_VLDF251_Msk     (0x1U << BSEC_OTPVLDR7_VLDF251_Pos)     /*!< 0x08000000 */
#define BSEC_OTPVLDR7_VLDF251         BSEC_OTPVLDR7_VLDF251_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF252_Pos     (28U)
#define BSEC_OTPVLDR7_VLDF252_Msk     (0x1U << BSEC_OTPVLDR7_VLDF252_Pos)     /*!< 0x10000000 */
#define BSEC_OTPVLDR7_VLDF252         BSEC_OTPVLDR7_VLDF252_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF253_Pos     (29U)
#define BSEC_OTPVLDR7_VLDF253_Msk     (0x1U << BSEC_OTPVLDR7_VLDF253_Pos)     /*!< 0x20000000 */
#define BSEC_OTPVLDR7_VLDF253         BSEC_OTPVLDR7_VLDF253_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF254_Pos     (30U)
#define BSEC_OTPVLDR7_VLDF254_Msk     (0x1U << BSEC_OTPVLDR7_VLDF254_Pos)     /*!< 0x40000000 */
#define BSEC_OTPVLDR7_VLDF254         BSEC_OTPVLDR7_VLDF254_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR7_VLDF255_Pos     (31U)
#define BSEC_OTPVLDR7_VLDF255_Msk     (0x1U << BSEC_OTPVLDR7_VLDF255_Pos)     /*!< 0x80000000 */
#define BSEC_OTPVLDR7_VLDF255         BSEC_OTPVLDR7_VLDF255_Msk               /*!< Valid flag for shadow register y (y=224 to 255)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR8 register  *****************/
#define BSEC_OTPVLDR8_VLDF256_Pos     (0U)
#define BSEC_OTPVLDR8_VLDF256_Msk     (0x1U << BSEC_OTPVLDR8_VLDF256_Pos)     /*!< 0x00000001 */
#define BSEC_OTPVLDR8_VLDF256         BSEC_OTPVLDR8_VLDF256_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF257_Pos     (1U)
#define BSEC_OTPVLDR8_VLDF257_Msk     (0x1U << BSEC_OTPVLDR8_VLDF257_Pos)     /*!< 0x00000002 */
#define BSEC_OTPVLDR8_VLDF257         BSEC_OTPVLDR8_VLDF257_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF258_Pos     (2U)
#define BSEC_OTPVLDR8_VLDF258_Msk     (0x1U << BSEC_OTPVLDR8_VLDF258_Pos)     /*!< 0x00000004 */
#define BSEC_OTPVLDR8_VLDF258         BSEC_OTPVLDR8_VLDF258_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF259_Pos     (3U)
#define BSEC_OTPVLDR8_VLDF259_Msk     (0x1U << BSEC_OTPVLDR8_VLDF259_Pos)     /*!< 0x00000008 */
#define BSEC_OTPVLDR8_VLDF259         BSEC_OTPVLDR8_VLDF259_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF260_Pos     (4U)
#define BSEC_OTPVLDR8_VLDF260_Msk     (0x1U << BSEC_OTPVLDR8_VLDF260_Pos)     /*!< 0x00000010 */
#define BSEC_OTPVLDR8_VLDF260         BSEC_OTPVLDR8_VLDF260_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF261_Pos     (5U)
#define BSEC_OTPVLDR8_VLDF261_Msk     (0x1U << BSEC_OTPVLDR8_VLDF261_Pos)     /*!< 0x00000020 */
#define BSEC_OTPVLDR8_VLDF261         BSEC_OTPVLDR8_VLDF261_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF262_Pos     (6U)
#define BSEC_OTPVLDR8_VLDF262_Msk     (0x1U << BSEC_OTPVLDR8_VLDF262_Pos)     /*!< 0x00000040 */
#define BSEC_OTPVLDR8_VLDF262         BSEC_OTPVLDR8_VLDF262_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF263_Pos     (7U)
#define BSEC_OTPVLDR8_VLDF263_Msk     (0x1U << BSEC_OTPVLDR8_VLDF263_Pos)     /*!< 0x00000080 */
#define BSEC_OTPVLDR8_VLDF263         BSEC_OTPVLDR8_VLDF263_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF264_Pos     (8U)
#define BSEC_OTPVLDR8_VLDF264_Msk     (0x1U << BSEC_OTPVLDR8_VLDF264_Pos)     /*!< 0x00000100 */
#define BSEC_OTPVLDR8_VLDF264         BSEC_OTPVLDR8_VLDF264_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF265_Pos     (9U)
#define BSEC_OTPVLDR8_VLDF265_Msk     (0x1U << BSEC_OTPVLDR8_VLDF265_Pos)     /*!< 0x00000200 */
#define BSEC_OTPVLDR8_VLDF265         BSEC_OTPVLDR8_VLDF265_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF266_Pos     (10U)
#define BSEC_OTPVLDR8_VLDF266_Msk     (0x1U << BSEC_OTPVLDR8_VLDF266_Pos)     /*!< 0x00000400 */
#define BSEC_OTPVLDR8_VLDF266         BSEC_OTPVLDR8_VLDF266_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF267_Pos     (11U)
#define BSEC_OTPVLDR8_VLDF267_Msk     (0x1U << BSEC_OTPVLDR8_VLDF267_Pos)     /*!< 0x00000800 */
#define BSEC_OTPVLDR8_VLDF267         BSEC_OTPVLDR8_VLDF267_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF268_Pos     (12U)
#define BSEC_OTPVLDR8_VLDF268_Msk     (0x1U << BSEC_OTPVLDR8_VLDF268_Pos)     /*!< 0x00001000 */
#define BSEC_OTPVLDR8_VLDF268         BSEC_OTPVLDR8_VLDF268_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF269_Pos     (13U)
#define BSEC_OTPVLDR8_VLDF269_Msk     (0x1U << BSEC_OTPVLDR8_VLDF269_Pos)     /*!< 0x00002000 */
#define BSEC_OTPVLDR8_VLDF269         BSEC_OTPVLDR8_VLDF269_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF270_Pos     (14U)
#define BSEC_OTPVLDR8_VLDF270_Msk     (0x1U << BSEC_OTPVLDR8_VLDF270_Pos)     /*!< 0x00004000 */
#define BSEC_OTPVLDR8_VLDF270         BSEC_OTPVLDR8_VLDF270_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF271_Pos     (15U)
#define BSEC_OTPVLDR8_VLDF271_Msk     (0x1U << BSEC_OTPVLDR8_VLDF271_Pos)     /*!< 0x00008000 */
#define BSEC_OTPVLDR8_VLDF271         BSEC_OTPVLDR8_VLDF271_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF272_Pos     (16U)
#define BSEC_OTPVLDR8_VLDF272_Msk     (0x1U << BSEC_OTPVLDR8_VLDF272_Pos)     /*!< 0x00010000 */
#define BSEC_OTPVLDR8_VLDF272         BSEC_OTPVLDR8_VLDF272_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF273_Pos     (17U)
#define BSEC_OTPVLDR8_VLDF273_Msk     (0x1U << BSEC_OTPVLDR8_VLDF273_Pos)     /*!< 0x00020000 */
#define BSEC_OTPVLDR8_VLDF273         BSEC_OTPVLDR8_VLDF273_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF274_Pos     (18U)
#define BSEC_OTPVLDR8_VLDF274_Msk     (0x1U << BSEC_OTPVLDR8_VLDF274_Pos)     /*!< 0x00040000 */
#define BSEC_OTPVLDR8_VLDF274         BSEC_OTPVLDR8_VLDF274_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF275_Pos     (19U)
#define BSEC_OTPVLDR8_VLDF275_Msk     (0x1U << BSEC_OTPVLDR8_VLDF275_Pos)     /*!< 0x00080000 */
#define BSEC_OTPVLDR8_VLDF275         BSEC_OTPVLDR8_VLDF275_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF276_Pos     (20U)
#define BSEC_OTPVLDR8_VLDF276_Msk     (0x1U << BSEC_OTPVLDR8_VLDF276_Pos)     /*!< 0x00100000 */
#define BSEC_OTPVLDR8_VLDF276         BSEC_OTPVLDR8_VLDF276_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF277_Pos     (21U)
#define BSEC_OTPVLDR8_VLDF277_Msk     (0x1U << BSEC_OTPVLDR8_VLDF277_Pos)     /*!< 0x00200000 */
#define BSEC_OTPVLDR8_VLDF277         BSEC_OTPVLDR8_VLDF277_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF278_Pos     (22U)
#define BSEC_OTPVLDR8_VLDF278_Msk     (0x1U << BSEC_OTPVLDR8_VLDF278_Pos)     /*!< 0x00400000 */
#define BSEC_OTPVLDR8_VLDF278         BSEC_OTPVLDR8_VLDF278_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF279_Pos     (23U)
#define BSEC_OTPVLDR8_VLDF279_Msk     (0x1U << BSEC_OTPVLDR8_VLDF279_Pos)     /*!< 0x00800000 */
#define BSEC_OTPVLDR8_VLDF279         BSEC_OTPVLDR8_VLDF279_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF280_Pos     (24U)
#define BSEC_OTPVLDR8_VLDF280_Msk     (0x1U << BSEC_OTPVLDR8_VLDF280_Pos)     /*!< 0x01000000 */
#define BSEC_OTPVLDR8_VLDF280         BSEC_OTPVLDR8_VLDF280_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF281_Pos     (25U)
#define BSEC_OTPVLDR8_VLDF281_Msk     (0x1U << BSEC_OTPVLDR8_VLDF281_Pos)     /*!< 0x02000000 */
#define BSEC_OTPVLDR8_VLDF281         BSEC_OTPVLDR8_VLDF281_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF282_Pos     (26U)
#define BSEC_OTPVLDR8_VLDF282_Msk     (0x1U << BSEC_OTPVLDR8_VLDF282_Pos)     /*!< 0x04000000 */
#define BSEC_OTPVLDR8_VLDF282         BSEC_OTPVLDR8_VLDF282_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF283_Pos     (27U)
#define BSEC_OTPVLDR8_VLDF283_Msk     (0x1U << BSEC_OTPVLDR8_VLDF283_Pos)     /*!< 0x08000000 */
#define BSEC_OTPVLDR8_VLDF283         BSEC_OTPVLDR8_VLDF283_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF284_Pos     (28U)
#define BSEC_OTPVLDR8_VLDF284_Msk     (0x1U << BSEC_OTPVLDR8_VLDF284_Pos)     /*!< 0x10000000 */
#define BSEC_OTPVLDR8_VLDF284         BSEC_OTPVLDR8_VLDF284_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF285_Pos     (29U)
#define BSEC_OTPVLDR8_VLDF285_Msk     (0x1U << BSEC_OTPVLDR8_VLDF285_Pos)     /*!< 0x20000000 */
#define BSEC_OTPVLDR8_VLDF285         BSEC_OTPVLDR8_VLDF285_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF286_Pos     (30U)
#define BSEC_OTPVLDR8_VLDF286_Msk     (0x1U << BSEC_OTPVLDR8_VLDF286_Pos)     /*!< 0x40000000 */
#define BSEC_OTPVLDR8_VLDF286         BSEC_OTPVLDR8_VLDF286_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR8_VLDF287_Pos     (31U)
#define BSEC_OTPVLDR8_VLDF287_Msk     (0x1U << BSEC_OTPVLDR8_VLDF287_Pos)     /*!< 0x80000000 */
#define BSEC_OTPVLDR8_VLDF287         BSEC_OTPVLDR8_VLDF287_Msk               /*!< Valid flag for shadow register y (y=256 to 287)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR9 register  *****************/
#define BSEC_OTPVLDR9_VLDF288_Pos     (0U)
#define BSEC_OTPVLDR9_VLDF288_Msk     (0x1U << BSEC_OTPVLDR9_VLDF288_Pos)     /*!< 0x00000001 */
#define BSEC_OTPVLDR9_VLDF288         BSEC_OTPVLDR9_VLDF288_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF289_Pos     (1U)
#define BSEC_OTPVLDR9_VLDF289_Msk     (0x1U << BSEC_OTPVLDR9_VLDF289_Pos)     /*!< 0x00000002 */
#define BSEC_OTPVLDR9_VLDF289         BSEC_OTPVLDR9_VLDF289_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF290_Pos     (2U)
#define BSEC_OTPVLDR9_VLDF290_Msk     (0x1U << BSEC_OTPVLDR9_VLDF290_Pos)     /*!< 0x00000004 */
#define BSEC_OTPVLDR9_VLDF290         BSEC_OTPVLDR9_VLDF290_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF291_Pos     (3U)
#define BSEC_OTPVLDR9_VLDF291_Msk     (0x1U << BSEC_OTPVLDR9_VLDF291_Pos)     /*!< 0x00000008 */
#define BSEC_OTPVLDR9_VLDF291         BSEC_OTPVLDR9_VLDF291_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF292_Pos     (4U)
#define BSEC_OTPVLDR9_VLDF292_Msk     (0x1U << BSEC_OTPVLDR9_VLDF292_Pos)     /*!< 0x00000010 */
#define BSEC_OTPVLDR9_VLDF292         BSEC_OTPVLDR9_VLDF292_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF293_Pos     (5U)
#define BSEC_OTPVLDR9_VLDF293_Msk     (0x1U << BSEC_OTPVLDR9_VLDF293_Pos)     /*!< 0x00000020 */
#define BSEC_OTPVLDR9_VLDF293         BSEC_OTPVLDR9_VLDF293_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF294_Pos     (6U)
#define BSEC_OTPVLDR9_VLDF294_Msk     (0x1U << BSEC_OTPVLDR9_VLDF294_Pos)     /*!< 0x00000040 */
#define BSEC_OTPVLDR9_VLDF294         BSEC_OTPVLDR9_VLDF294_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF295_Pos     (7U)
#define BSEC_OTPVLDR9_VLDF295_Msk     (0x1U << BSEC_OTPVLDR9_VLDF295_Pos)     /*!< 0x00000080 */
#define BSEC_OTPVLDR9_VLDF295         BSEC_OTPVLDR9_VLDF295_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF296_Pos     (8U)
#define BSEC_OTPVLDR9_VLDF296_Msk     (0x1U << BSEC_OTPVLDR9_VLDF296_Pos)     /*!< 0x00000100 */
#define BSEC_OTPVLDR9_VLDF296         BSEC_OTPVLDR9_VLDF296_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF297_Pos     (9U)
#define BSEC_OTPVLDR9_VLDF297_Msk     (0x1U << BSEC_OTPVLDR9_VLDF297_Pos)     /*!< 0x00000200 */
#define BSEC_OTPVLDR9_VLDF297         BSEC_OTPVLDR9_VLDF297_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF298_Pos     (10U)
#define BSEC_OTPVLDR9_VLDF298_Msk     (0x1U << BSEC_OTPVLDR9_VLDF298_Pos)     /*!< 0x00000400 */
#define BSEC_OTPVLDR9_VLDF298         BSEC_OTPVLDR9_VLDF298_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF299_Pos     (11U)
#define BSEC_OTPVLDR9_VLDF299_Msk     (0x1U << BSEC_OTPVLDR9_VLDF299_Pos)     /*!< 0x00000800 */
#define BSEC_OTPVLDR9_VLDF299         BSEC_OTPVLDR9_VLDF299_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF300_Pos     (12U)
#define BSEC_OTPVLDR9_VLDF300_Msk     (0x1U << BSEC_OTPVLDR9_VLDF300_Pos)     /*!< 0x00001000 */
#define BSEC_OTPVLDR9_VLDF300         BSEC_OTPVLDR9_VLDF300_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF301_Pos     (13U)
#define BSEC_OTPVLDR9_VLDF301_Msk     (0x1U << BSEC_OTPVLDR9_VLDF301_Pos)     /*!< 0x00002000 */
#define BSEC_OTPVLDR9_VLDF301         BSEC_OTPVLDR9_VLDF301_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF302_Pos     (14U)
#define BSEC_OTPVLDR9_VLDF302_Msk     (0x1U << BSEC_OTPVLDR9_VLDF302_Pos)     /*!< 0x00004000 */
#define BSEC_OTPVLDR9_VLDF302         BSEC_OTPVLDR9_VLDF302_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF303_Pos     (15U)
#define BSEC_OTPVLDR9_VLDF303_Msk     (0x1U << BSEC_OTPVLDR9_VLDF303_Pos)     /*!< 0x00008000 */
#define BSEC_OTPVLDR9_VLDF303         BSEC_OTPVLDR9_VLDF303_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF304_Pos     (16U)
#define BSEC_OTPVLDR9_VLDF304_Msk     (0x1U << BSEC_OTPVLDR9_VLDF304_Pos)     /*!< 0x00010000 */
#define BSEC_OTPVLDR9_VLDF304         BSEC_OTPVLDR9_VLDF304_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF305_Pos     (17U)
#define BSEC_OTPVLDR9_VLDF305_Msk     (0x1U << BSEC_OTPVLDR9_VLDF305_Pos)     /*!< 0x00020000 */
#define BSEC_OTPVLDR9_VLDF305         BSEC_OTPVLDR9_VLDF305_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF306_Pos     (18U)
#define BSEC_OTPVLDR9_VLDF306_Msk     (0x1U << BSEC_OTPVLDR9_VLDF306_Pos)     /*!< 0x00040000 */
#define BSEC_OTPVLDR9_VLDF306         BSEC_OTPVLDR9_VLDF306_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF307_Pos     (19U)
#define BSEC_OTPVLDR9_VLDF307_Msk     (0x1U << BSEC_OTPVLDR9_VLDF307_Pos)     /*!< 0x00080000 */
#define BSEC_OTPVLDR9_VLDF307         BSEC_OTPVLDR9_VLDF307_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF308_Pos     (20U)
#define BSEC_OTPVLDR9_VLDF308_Msk     (0x1U << BSEC_OTPVLDR9_VLDF308_Pos)     /*!< 0x00100000 */
#define BSEC_OTPVLDR9_VLDF308         BSEC_OTPVLDR9_VLDF308_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF309_Pos     (21U)
#define BSEC_OTPVLDR9_VLDF309_Msk     (0x1U << BSEC_OTPVLDR9_VLDF309_Pos)     /*!< 0x00200000 */
#define BSEC_OTPVLDR9_VLDF309         BSEC_OTPVLDR9_VLDF309_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF310_Pos     (22U)
#define BSEC_OTPVLDR9_VLDF310_Msk     (0x1U << BSEC_OTPVLDR9_VLDF310_Pos)     /*!< 0x00400000 */
#define BSEC_OTPVLDR9_VLDF310         BSEC_OTPVLDR9_VLDF310_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF311_Pos     (23U)
#define BSEC_OTPVLDR9_VLDF311_Msk     (0x1U << BSEC_OTPVLDR9_VLDF311_Pos)     /*!< 0x00800000 */
#define BSEC_OTPVLDR9_VLDF311         BSEC_OTPVLDR9_VLDF311_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF312_Pos     (24U)
#define BSEC_OTPVLDR9_VLDF312_Msk     (0x1U << BSEC_OTPVLDR9_VLDF312_Pos)     /*!< 0x01000000 */
#define BSEC_OTPVLDR9_VLDF312         BSEC_OTPVLDR9_VLDF312_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF313_Pos     (25U)
#define BSEC_OTPVLDR9_VLDF313_Msk     (0x1U << BSEC_OTPVLDR9_VLDF313_Pos)     /*!< 0x02000000 */
#define BSEC_OTPVLDR9_VLDF313         BSEC_OTPVLDR9_VLDF313_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF314_Pos     (26U)
#define BSEC_OTPVLDR9_VLDF314_Msk     (0x1U << BSEC_OTPVLDR9_VLDF314_Pos)     /*!< 0x04000000 */
#define BSEC_OTPVLDR9_VLDF314         BSEC_OTPVLDR9_VLDF314_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF315_Pos     (27U)
#define BSEC_OTPVLDR9_VLDF315_Msk     (0x1U << BSEC_OTPVLDR9_VLDF315_Pos)     /*!< 0x08000000 */
#define BSEC_OTPVLDR9_VLDF315         BSEC_OTPVLDR9_VLDF315_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF316_Pos     (28U)
#define BSEC_OTPVLDR9_VLDF316_Msk     (0x1U << BSEC_OTPVLDR9_VLDF316_Pos)     /*!< 0x10000000 */
#define BSEC_OTPVLDR9_VLDF316         BSEC_OTPVLDR9_VLDF316_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF317_Pos     (29U)
#define BSEC_OTPVLDR9_VLDF317_Msk     (0x1U << BSEC_OTPVLDR9_VLDF317_Pos)     /*!< 0x20000000 */
#define BSEC_OTPVLDR9_VLDF317         BSEC_OTPVLDR9_VLDF317_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF318_Pos     (30U)
#define BSEC_OTPVLDR9_VLDF318_Msk     (0x1U << BSEC_OTPVLDR9_VLDF318_Pos)     /*!< 0x40000000 */
#define BSEC_OTPVLDR9_VLDF318         BSEC_OTPVLDR9_VLDF318_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR9_VLDF319_Pos     (31U)
#define BSEC_OTPVLDR9_VLDF319_Msk     (0x1U << BSEC_OTPVLDR9_VLDF319_Pos)     /*!< 0x80000000 */
#define BSEC_OTPVLDR9_VLDF319         BSEC_OTPVLDR9_VLDF319_Msk               /*!< Valid flag for shadow register y (y=288 to 319)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR10 register  ****************/
#define BSEC_OTPVLDR10_VLDF320_Pos    (0U)
#define BSEC_OTPVLDR10_VLDF320_Msk    (0x1U << BSEC_OTPVLDR10_VLDF320_Pos)    /*!< 0x00000001 */
#define BSEC_OTPVLDR10_VLDF320        BSEC_OTPVLDR10_VLDF320_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF321_Pos    (1U)
#define BSEC_OTPVLDR10_VLDF321_Msk    (0x1U << BSEC_OTPVLDR10_VLDF321_Pos)    /*!< 0x00000002 */
#define BSEC_OTPVLDR10_VLDF321        BSEC_OTPVLDR10_VLDF321_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF322_Pos    (2U)
#define BSEC_OTPVLDR10_VLDF322_Msk    (0x1U << BSEC_OTPVLDR10_VLDF322_Pos)    /*!< 0x00000004 */
#define BSEC_OTPVLDR10_VLDF322        BSEC_OTPVLDR10_VLDF322_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF323_Pos    (3U)
#define BSEC_OTPVLDR10_VLDF323_Msk    (0x1U << BSEC_OTPVLDR10_VLDF323_Pos)    /*!< 0x00000008 */
#define BSEC_OTPVLDR10_VLDF323        BSEC_OTPVLDR10_VLDF323_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF324_Pos    (4U)
#define BSEC_OTPVLDR10_VLDF324_Msk    (0x1U << BSEC_OTPVLDR10_VLDF324_Pos)    /*!< 0x00000010 */
#define BSEC_OTPVLDR10_VLDF324        BSEC_OTPVLDR10_VLDF324_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF325_Pos    (5U)
#define BSEC_OTPVLDR10_VLDF325_Msk    (0x1U << BSEC_OTPVLDR10_VLDF325_Pos)    /*!< 0x00000020 */
#define BSEC_OTPVLDR10_VLDF325        BSEC_OTPVLDR10_VLDF325_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF326_Pos    (6U)
#define BSEC_OTPVLDR10_VLDF326_Msk    (0x1U << BSEC_OTPVLDR10_VLDF326_Pos)    /*!< 0x00000040 */
#define BSEC_OTPVLDR10_VLDF326        BSEC_OTPVLDR10_VLDF326_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF327_Pos    (7U)
#define BSEC_OTPVLDR10_VLDF327_Msk    (0x1U << BSEC_OTPVLDR10_VLDF327_Pos)    /*!< 0x00000080 */
#define BSEC_OTPVLDR10_VLDF327        BSEC_OTPVLDR10_VLDF327_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF328_Pos    (8U)
#define BSEC_OTPVLDR10_VLDF328_Msk    (0x1U << BSEC_OTPVLDR10_VLDF328_Pos)    /*!< 0x00000100 */
#define BSEC_OTPVLDR10_VLDF328        BSEC_OTPVLDR10_VLDF328_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF329_Pos    (9U)
#define BSEC_OTPVLDR10_VLDF329_Msk    (0x1U << BSEC_OTPVLDR10_VLDF329_Pos)    /*!< 0x00000200 */
#define BSEC_OTPVLDR10_VLDF329        BSEC_OTPVLDR10_VLDF329_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF330_Pos    (10U)
#define BSEC_OTPVLDR10_VLDF330_Msk    (0x1U << BSEC_OTPVLDR10_VLDF330_Pos)    /*!< 0x00000400 */
#define BSEC_OTPVLDR10_VLDF330        BSEC_OTPVLDR10_VLDF330_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF331_Pos    (11U)
#define BSEC_OTPVLDR10_VLDF331_Msk    (0x1U << BSEC_OTPVLDR10_VLDF331_Pos)    /*!< 0x00000800 */
#define BSEC_OTPVLDR10_VLDF331        BSEC_OTPVLDR10_VLDF331_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF332_Pos    (12U)
#define BSEC_OTPVLDR10_VLDF332_Msk    (0x1U << BSEC_OTPVLDR10_VLDF332_Pos)    /*!< 0x00001000 */
#define BSEC_OTPVLDR10_VLDF332        BSEC_OTPVLDR10_VLDF332_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF333_Pos    (13U)
#define BSEC_OTPVLDR10_VLDF333_Msk    (0x1U << BSEC_OTPVLDR10_VLDF333_Pos)    /*!< 0x00002000 */
#define BSEC_OTPVLDR10_VLDF333        BSEC_OTPVLDR10_VLDF333_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF334_Pos    (14U)
#define BSEC_OTPVLDR10_VLDF334_Msk    (0x1U << BSEC_OTPVLDR10_VLDF334_Pos)    /*!< 0x00004000 */
#define BSEC_OTPVLDR10_VLDF334        BSEC_OTPVLDR10_VLDF334_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF335_Pos    (15U)
#define BSEC_OTPVLDR10_VLDF335_Msk    (0x1U << BSEC_OTPVLDR10_VLDF335_Pos)    /*!< 0x00008000 */
#define BSEC_OTPVLDR10_VLDF335        BSEC_OTPVLDR10_VLDF335_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF336_Pos    (16U)
#define BSEC_OTPVLDR10_VLDF336_Msk    (0x1U << BSEC_OTPVLDR10_VLDF336_Pos)    /*!< 0x00010000 */
#define BSEC_OTPVLDR10_VLDF336        BSEC_OTPVLDR10_VLDF336_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF337_Pos    (17U)
#define BSEC_OTPVLDR10_VLDF337_Msk    (0x1U << BSEC_OTPVLDR10_VLDF337_Pos)    /*!< 0x00020000 */
#define BSEC_OTPVLDR10_VLDF337        BSEC_OTPVLDR10_VLDF337_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF338_Pos    (18U)
#define BSEC_OTPVLDR10_VLDF338_Msk    (0x1U << BSEC_OTPVLDR10_VLDF338_Pos)    /*!< 0x00040000 */
#define BSEC_OTPVLDR10_VLDF338        BSEC_OTPVLDR10_VLDF338_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF339_Pos    (19U)
#define BSEC_OTPVLDR10_VLDF339_Msk    (0x1U << BSEC_OTPVLDR10_VLDF339_Pos)    /*!< 0x00080000 */
#define BSEC_OTPVLDR10_VLDF339        BSEC_OTPVLDR10_VLDF339_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF340_Pos    (20U)
#define BSEC_OTPVLDR10_VLDF340_Msk    (0x1U << BSEC_OTPVLDR10_VLDF340_Pos)    /*!< 0x00100000 */
#define BSEC_OTPVLDR10_VLDF340        BSEC_OTPVLDR10_VLDF340_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF341_Pos    (21U)
#define BSEC_OTPVLDR10_VLDF341_Msk    (0x1U << BSEC_OTPVLDR10_VLDF341_Pos)    /*!< 0x00200000 */
#define BSEC_OTPVLDR10_VLDF341        BSEC_OTPVLDR10_VLDF341_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF342_Pos    (22U)
#define BSEC_OTPVLDR10_VLDF342_Msk    (0x1U << BSEC_OTPVLDR10_VLDF342_Pos)    /*!< 0x00400000 */
#define BSEC_OTPVLDR10_VLDF342        BSEC_OTPVLDR10_VLDF342_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF343_Pos    (23U)
#define BSEC_OTPVLDR10_VLDF343_Msk    (0x1U << BSEC_OTPVLDR10_VLDF343_Pos)    /*!< 0x00800000 */
#define BSEC_OTPVLDR10_VLDF343        BSEC_OTPVLDR10_VLDF343_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF344_Pos    (24U)
#define BSEC_OTPVLDR10_VLDF344_Msk    (0x1U << BSEC_OTPVLDR10_VLDF344_Pos)    /*!< 0x01000000 */
#define BSEC_OTPVLDR10_VLDF344        BSEC_OTPVLDR10_VLDF344_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF345_Pos    (25U)
#define BSEC_OTPVLDR10_VLDF345_Msk    (0x1U << BSEC_OTPVLDR10_VLDF345_Pos)    /*!< 0x02000000 */
#define BSEC_OTPVLDR10_VLDF345        BSEC_OTPVLDR10_VLDF345_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF346_Pos    (26U)
#define BSEC_OTPVLDR10_VLDF346_Msk    (0x1U << BSEC_OTPVLDR10_VLDF346_Pos)    /*!< 0x04000000 */
#define BSEC_OTPVLDR10_VLDF346        BSEC_OTPVLDR10_VLDF346_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF347_Pos    (27U)
#define BSEC_OTPVLDR10_VLDF347_Msk    (0x1U << BSEC_OTPVLDR10_VLDF347_Pos)    /*!< 0x08000000 */
#define BSEC_OTPVLDR10_VLDF347        BSEC_OTPVLDR10_VLDF347_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF348_Pos    (28U)
#define BSEC_OTPVLDR10_VLDF348_Msk    (0x1U << BSEC_OTPVLDR10_VLDF348_Pos)    /*!< 0x10000000 */
#define BSEC_OTPVLDR10_VLDF348        BSEC_OTPVLDR10_VLDF348_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF349_Pos    (29U)
#define BSEC_OTPVLDR10_VLDF349_Msk    (0x1U << BSEC_OTPVLDR10_VLDF349_Pos)    /*!< 0x20000000 */
#define BSEC_OTPVLDR10_VLDF349        BSEC_OTPVLDR10_VLDF349_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF350_Pos    (30U)
#define BSEC_OTPVLDR10_VLDF350_Msk    (0x1U << BSEC_OTPVLDR10_VLDF350_Pos)    /*!< 0x40000000 */
#define BSEC_OTPVLDR10_VLDF350        BSEC_OTPVLDR10_VLDF350_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR10_VLDF351_Pos    (31U)
#define BSEC_OTPVLDR10_VLDF351_Msk    (0x1U << BSEC_OTPVLDR10_VLDF351_Pos)    /*!< 0x80000000 */
#define BSEC_OTPVLDR10_VLDF351        BSEC_OTPVLDR10_VLDF351_Msk              /*!< Valid flag for shadow register y (y=320 to 351)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/****************  Bit definition for BSEC_OTPVLDR11 register  ****************/
#define BSEC_OTPVLDR11_VLDF352_Pos    (0U)
#define BSEC_OTPVLDR11_VLDF352_Msk    (0x1U << BSEC_OTPVLDR11_VLDF352_Pos)    /*!< 0x00000001 */
#define BSEC_OTPVLDR11_VLDF352        BSEC_OTPVLDR11_VLDF352_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF353_Pos    (1U)
#define BSEC_OTPVLDR11_VLDF353_Msk    (0x1U << BSEC_OTPVLDR11_VLDF353_Pos)    /*!< 0x00000002 */
#define BSEC_OTPVLDR11_VLDF353        BSEC_OTPVLDR11_VLDF353_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF354_Pos    (2U)
#define BSEC_OTPVLDR11_VLDF354_Msk    (0x1U << BSEC_OTPVLDR11_VLDF354_Pos)    /*!< 0x00000004 */
#define BSEC_OTPVLDR11_VLDF354        BSEC_OTPVLDR11_VLDF354_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF355_Pos    (3U)
#define BSEC_OTPVLDR11_VLDF355_Msk    (0x1U << BSEC_OTPVLDR11_VLDF355_Pos)    /*!< 0x00000008 */
#define BSEC_OTPVLDR11_VLDF355        BSEC_OTPVLDR11_VLDF355_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF356_Pos    (4U)
#define BSEC_OTPVLDR11_VLDF356_Msk    (0x1U << BSEC_OTPVLDR11_VLDF356_Pos)    /*!< 0x00000010 */
#define BSEC_OTPVLDR11_VLDF356        BSEC_OTPVLDR11_VLDF356_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF357_Pos    (5U)
#define BSEC_OTPVLDR11_VLDF357_Msk    (0x1U << BSEC_OTPVLDR11_VLDF357_Pos)    /*!< 0x00000020 */
#define BSEC_OTPVLDR11_VLDF357        BSEC_OTPVLDR11_VLDF357_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF358_Pos    (6U)
#define BSEC_OTPVLDR11_VLDF358_Msk    (0x1U << BSEC_OTPVLDR11_VLDF358_Pos)    /*!< 0x00000040 */
#define BSEC_OTPVLDR11_VLDF358        BSEC_OTPVLDR11_VLDF358_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF359_Pos    (7U)
#define BSEC_OTPVLDR11_VLDF359_Msk    (0x1U << BSEC_OTPVLDR11_VLDF359_Pos)    /*!< 0x00000080 */
#define BSEC_OTPVLDR11_VLDF359        BSEC_OTPVLDR11_VLDF359_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF360_Pos    (8U)
#define BSEC_OTPVLDR11_VLDF360_Msk    (0x1U << BSEC_OTPVLDR11_VLDF360_Pos)    /*!< 0x00000100 */
#define BSEC_OTPVLDR11_VLDF360        BSEC_OTPVLDR11_VLDF360_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF361_Pos    (9U)
#define BSEC_OTPVLDR11_VLDF361_Msk    (0x1U << BSEC_OTPVLDR11_VLDF361_Pos)    /*!< 0x00000200 */
#define BSEC_OTPVLDR11_VLDF361        BSEC_OTPVLDR11_VLDF361_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF362_Pos    (10U)
#define BSEC_OTPVLDR11_VLDF362_Msk    (0x1U << BSEC_OTPVLDR11_VLDF362_Pos)    /*!< 0x00000400 */
#define BSEC_OTPVLDR11_VLDF362        BSEC_OTPVLDR11_VLDF362_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF363_Pos    (11U)
#define BSEC_OTPVLDR11_VLDF363_Msk    (0x1U << BSEC_OTPVLDR11_VLDF363_Pos)    /*!< 0x00000800 */
#define BSEC_OTPVLDR11_VLDF363        BSEC_OTPVLDR11_VLDF363_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF364_Pos    (12U)
#define BSEC_OTPVLDR11_VLDF364_Msk    (0x1U << BSEC_OTPVLDR11_VLDF364_Pos)    /*!< 0x00001000 */
#define BSEC_OTPVLDR11_VLDF364        BSEC_OTPVLDR11_VLDF364_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF365_Pos    (13U)
#define BSEC_OTPVLDR11_VLDF365_Msk    (0x1U << BSEC_OTPVLDR11_VLDF365_Pos)    /*!< 0x00002000 */
#define BSEC_OTPVLDR11_VLDF365        BSEC_OTPVLDR11_VLDF365_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF366_Pos    (14U)
#define BSEC_OTPVLDR11_VLDF366_Msk    (0x1U << BSEC_OTPVLDR11_VLDF366_Pos)    /*!< 0x00004000 */
#define BSEC_OTPVLDR11_VLDF366        BSEC_OTPVLDR11_VLDF366_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF367_Pos    (15U)
#define BSEC_OTPVLDR11_VLDF367_Msk    (0x1U << BSEC_OTPVLDR11_VLDF367_Pos)    /*!< 0x00008000 */
#define BSEC_OTPVLDR11_VLDF367        BSEC_OTPVLDR11_VLDF367_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF368_Pos    (16U)
#define BSEC_OTPVLDR11_VLDF368_Msk    (0x1U << BSEC_OTPVLDR11_VLDF368_Pos)    /*!< 0x00010000 */
#define BSEC_OTPVLDR11_VLDF368        BSEC_OTPVLDR11_VLDF368_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF369_Pos    (17U)
#define BSEC_OTPVLDR11_VLDF369_Msk    (0x1U << BSEC_OTPVLDR11_VLDF369_Pos)    /*!< 0x00020000 */
#define BSEC_OTPVLDR11_VLDF369        BSEC_OTPVLDR11_VLDF369_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF370_Pos    (18U)
#define BSEC_OTPVLDR11_VLDF370_Msk    (0x1U << BSEC_OTPVLDR11_VLDF370_Pos)    /*!< 0x00040000 */
#define BSEC_OTPVLDR11_VLDF370        BSEC_OTPVLDR11_VLDF370_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF371_Pos    (19U)
#define BSEC_OTPVLDR11_VLDF371_Msk    (0x1U << BSEC_OTPVLDR11_VLDF371_Pos)    /*!< 0x00080000 */
#define BSEC_OTPVLDR11_VLDF371        BSEC_OTPVLDR11_VLDF371_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF372_Pos    (20U)
#define BSEC_OTPVLDR11_VLDF372_Msk    (0x1U << BSEC_OTPVLDR11_VLDF372_Pos)    /*!< 0x00100000 */
#define BSEC_OTPVLDR11_VLDF372        BSEC_OTPVLDR11_VLDF372_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF373_Pos    (21U)
#define BSEC_OTPVLDR11_VLDF373_Msk    (0x1U << BSEC_OTPVLDR11_VLDF373_Pos)    /*!< 0x00200000 */
#define BSEC_OTPVLDR11_VLDF373        BSEC_OTPVLDR11_VLDF373_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF374_Pos    (22U)
#define BSEC_OTPVLDR11_VLDF374_Msk    (0x1U << BSEC_OTPVLDR11_VLDF374_Pos)    /*!< 0x00400000 */
#define BSEC_OTPVLDR11_VLDF374        BSEC_OTPVLDR11_VLDF374_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF375_Pos    (23U)
#define BSEC_OTPVLDR11_VLDF375_Msk    (0x1U << BSEC_OTPVLDR11_VLDF375_Pos)    /*!< 0x00800000 */
#define BSEC_OTPVLDR11_VLDF375        BSEC_OTPVLDR11_VLDF375_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF376_Pos    (24U)
#define BSEC_OTPVLDR11_VLDF376_Msk    (0x1U << BSEC_OTPVLDR11_VLDF376_Pos)    /*!< 0x01000000 */
#define BSEC_OTPVLDR11_VLDF376        BSEC_OTPVLDR11_VLDF376_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF377_Pos    (25U)
#define BSEC_OTPVLDR11_VLDF377_Msk    (0x1U << BSEC_OTPVLDR11_VLDF377_Pos)    /*!< 0x02000000 */
#define BSEC_OTPVLDR11_VLDF377        BSEC_OTPVLDR11_VLDF377_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF378_Pos    (26U)
#define BSEC_OTPVLDR11_VLDF378_Msk    (0x1U << BSEC_OTPVLDR11_VLDF378_Pos)    /*!< 0x04000000 */
#define BSEC_OTPVLDR11_VLDF378        BSEC_OTPVLDR11_VLDF378_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF379_Pos    (27U)
#define BSEC_OTPVLDR11_VLDF379_Msk    (0x1U << BSEC_OTPVLDR11_VLDF379_Pos)    /*!< 0x08000000 */
#define BSEC_OTPVLDR11_VLDF379        BSEC_OTPVLDR11_VLDF379_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF380_Pos    (28U)
#define BSEC_OTPVLDR11_VLDF380_Msk    (0x1U << BSEC_OTPVLDR11_VLDF380_Pos)    /*!< 0x10000000 */
#define BSEC_OTPVLDR11_VLDF380        BSEC_OTPVLDR11_VLDF380_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF381_Pos    (29U)
#define BSEC_OTPVLDR11_VLDF381_Msk    (0x1U << BSEC_OTPVLDR11_VLDF381_Pos)    /*!< 0x20000000 */
#define BSEC_OTPVLDR11_VLDF381        BSEC_OTPVLDR11_VLDF381_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF382_Pos    (30U)
#define BSEC_OTPVLDR11_VLDF382_Msk    (0x1U << BSEC_OTPVLDR11_VLDF382_Pos)    /*!< 0x40000000 */
#define BSEC_OTPVLDR11_VLDF382        BSEC_OTPVLDR11_VLDF382_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_OTPVLDR11_VLDF383_Pos    (31U)
#define BSEC_OTPVLDR11_VLDF383_Msk    (0x1U << BSEC_OTPVLDR11_VLDF383_Pos)    /*!< 0x80000000 */
#define BSEC_OTPVLDR11_VLDF383        BSEC_OTPVLDR11_VLDF383_Msk              /*!< Valid flag for shadow register y (y=352 to 383)See BSEC_OTPVLDR0 for details.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/******************  Bit definition for BSEC_SFSR0 register  ******************/
#define BSEC_SFSR0_SFW0_Pos           (0U)
#define BSEC_SFSR0_SFW0_Msk           (0x1U << BSEC_SFSR0_SFW0_Pos)           /*!< 0x00000001 */
#define BSEC_SFSR0_SFW0               BSEC_SFSR0_SFW0_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW1_Pos           (1U)
#define BSEC_SFSR0_SFW1_Msk           (0x1U << BSEC_SFSR0_SFW1_Pos)           /*!< 0x00000002 */
#define BSEC_SFSR0_SFW1               BSEC_SFSR0_SFW1_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW2_Pos           (2U)
#define BSEC_SFSR0_SFW2_Msk           (0x1U << BSEC_SFSR0_SFW2_Pos)           /*!< 0x00000004 */
#define BSEC_SFSR0_SFW2               BSEC_SFSR0_SFW2_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW3_Pos           (3U)
#define BSEC_SFSR0_SFW3_Msk           (0x1U << BSEC_SFSR0_SFW3_Pos)           /*!< 0x00000008 */
#define BSEC_SFSR0_SFW3               BSEC_SFSR0_SFW3_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW4_Pos           (4U)
#define BSEC_SFSR0_SFW4_Msk           (0x1U << BSEC_SFSR0_SFW4_Pos)           /*!< 0x00000010 */
#define BSEC_SFSR0_SFW4               BSEC_SFSR0_SFW4_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW5_Pos           (5U)
#define BSEC_SFSR0_SFW5_Msk           (0x1U << BSEC_SFSR0_SFW5_Pos)           /*!< 0x00000020 */
#define BSEC_SFSR0_SFW5               BSEC_SFSR0_SFW5_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW6_Pos           (6U)
#define BSEC_SFSR0_SFW6_Msk           (0x1U << BSEC_SFSR0_SFW6_Pos)           /*!< 0x00000040 */
#define BSEC_SFSR0_SFW6               BSEC_SFSR0_SFW6_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW7_Pos           (7U)
#define BSEC_SFSR0_SFW7_Msk           (0x1U << BSEC_SFSR0_SFW7_Pos)           /*!< 0x00000080 */
#define BSEC_SFSR0_SFW7               BSEC_SFSR0_SFW7_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW8_Pos           (8U)
#define BSEC_SFSR0_SFW8_Msk           (0x1U << BSEC_SFSR0_SFW8_Pos)           /*!< 0x00000100 */
#define BSEC_SFSR0_SFW8               BSEC_SFSR0_SFW8_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW9_Pos           (9U)
#define BSEC_SFSR0_SFW9_Msk           (0x1U << BSEC_SFSR0_SFW9_Pos)           /*!< 0x00000200 */
#define BSEC_SFSR0_SFW9               BSEC_SFSR0_SFW9_Msk                     /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW10_Pos          (10U)
#define BSEC_SFSR0_SFW10_Msk          (0x1U << BSEC_SFSR0_SFW10_Pos)          /*!< 0x00000400 */
#define BSEC_SFSR0_SFW10              BSEC_SFSR0_SFW10_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW11_Pos          (11U)
#define BSEC_SFSR0_SFW11_Msk          (0x1U << BSEC_SFSR0_SFW11_Pos)          /*!< 0x00000800 */
#define BSEC_SFSR0_SFW11              BSEC_SFSR0_SFW11_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW12_Pos          (12U)
#define BSEC_SFSR0_SFW12_Msk          (0x1U << BSEC_SFSR0_SFW12_Pos)          /*!< 0x00001000 */
#define BSEC_SFSR0_SFW12              BSEC_SFSR0_SFW12_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW13_Pos          (13U)
#define BSEC_SFSR0_SFW13_Msk          (0x1U << BSEC_SFSR0_SFW13_Pos)          /*!< 0x00002000 */
#define BSEC_SFSR0_SFW13              BSEC_SFSR0_SFW13_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW14_Pos          (14U)
#define BSEC_SFSR0_SFW14_Msk          (0x1U << BSEC_SFSR0_SFW14_Pos)          /*!< 0x00004000 */
#define BSEC_SFSR0_SFW14              BSEC_SFSR0_SFW14_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW15_Pos          (15U)
#define BSEC_SFSR0_SFW15_Msk          (0x1U << BSEC_SFSR0_SFW15_Pos)          /*!< 0x00008000 */
#define BSEC_SFSR0_SFW15              BSEC_SFSR0_SFW15_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW16_Pos          (16U)
#define BSEC_SFSR0_SFW16_Msk          (0x1U << BSEC_SFSR0_SFW16_Pos)          /*!< 0x00010000 */
#define BSEC_SFSR0_SFW16              BSEC_SFSR0_SFW16_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW17_Pos          (17U)
#define BSEC_SFSR0_SFW17_Msk          (0x1U << BSEC_SFSR0_SFW17_Pos)          /*!< 0x00020000 */
#define BSEC_SFSR0_SFW17              BSEC_SFSR0_SFW17_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW18_Pos          (18U)
#define BSEC_SFSR0_SFW18_Msk          (0x1U << BSEC_SFSR0_SFW18_Pos)          /*!< 0x00040000 */
#define BSEC_SFSR0_SFW18              BSEC_SFSR0_SFW18_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW19_Pos          (19U)
#define BSEC_SFSR0_SFW19_Msk          (0x1U << BSEC_SFSR0_SFW19_Pos)          /*!< 0x00080000 */
#define BSEC_SFSR0_SFW19              BSEC_SFSR0_SFW19_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW20_Pos          (20U)
#define BSEC_SFSR0_SFW20_Msk          (0x1U << BSEC_SFSR0_SFW20_Pos)          /*!< 0x00100000 */
#define BSEC_SFSR0_SFW20              BSEC_SFSR0_SFW20_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW21_Pos          (21U)
#define BSEC_SFSR0_SFW21_Msk          (0x1U << BSEC_SFSR0_SFW21_Pos)          /*!< 0x00200000 */
#define BSEC_SFSR0_SFW21              BSEC_SFSR0_SFW21_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW22_Pos          (22U)
#define BSEC_SFSR0_SFW22_Msk          (0x1U << BSEC_SFSR0_SFW22_Pos)          /*!< 0x00400000 */
#define BSEC_SFSR0_SFW22              BSEC_SFSR0_SFW22_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW23_Pos          (23U)
#define BSEC_SFSR0_SFW23_Msk          (0x1U << BSEC_SFSR0_SFW23_Pos)          /*!< 0x00800000 */
#define BSEC_SFSR0_SFW23              BSEC_SFSR0_SFW23_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW24_Pos          (24U)
#define BSEC_SFSR0_SFW24_Msk          (0x1U << BSEC_SFSR0_SFW24_Pos)          /*!< 0x01000000 */
#define BSEC_SFSR0_SFW24              BSEC_SFSR0_SFW24_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW25_Pos          (25U)
#define BSEC_SFSR0_SFW25_Msk          (0x1U << BSEC_SFSR0_SFW25_Pos)          /*!< 0x02000000 */
#define BSEC_SFSR0_SFW25              BSEC_SFSR0_SFW25_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW26_Pos          (26U)
#define BSEC_SFSR0_SFW26_Msk          (0x1U << BSEC_SFSR0_SFW26_Pos)          /*!< 0x04000000 */
#define BSEC_SFSR0_SFW26              BSEC_SFSR0_SFW26_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW27_Pos          (27U)
#define BSEC_SFSR0_SFW27_Msk          (0x1U << BSEC_SFSR0_SFW27_Pos)          /*!< 0x08000000 */
#define BSEC_SFSR0_SFW27              BSEC_SFSR0_SFW27_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW28_Pos          (28U)
#define BSEC_SFSR0_SFW28_Msk          (0x1U << BSEC_SFSR0_SFW28_Pos)          /*!< 0x10000000 */
#define BSEC_SFSR0_SFW28              BSEC_SFSR0_SFW28_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW29_Pos          (29U)
#define BSEC_SFSR0_SFW29_Msk          (0x1U << BSEC_SFSR0_SFW29_Pos)          /*!< 0x20000000 */
#define BSEC_SFSR0_SFW29              BSEC_SFSR0_SFW29_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW30_Pos          (30U)
#define BSEC_SFSR0_SFW30_Msk          (0x1U << BSEC_SFSR0_SFW30_Pos)          /*!< 0x40000000 */
#define BSEC_SFSR0_SFW30              BSEC_SFSR0_SFW30_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */
#define BSEC_SFSR0_SFW31_Pos          (31U)
#define BSEC_SFSR0_SFW31_Msk          (0x1U << BSEC_SFSR0_SFW31_Pos)          /*!< 0x80000000 */
#define BSEC_SFSR0_SFW31              BSEC_SFSR0_SFW31_Msk                    /*!< Shadowed fuse word y (y=0 to 31)- 0: Fuse word is not shadowed. Fuse value must be (re)loaded using BSEC_OTPCR before reading BSEC_FVRy register.- 1: Fuse word is shadowed in BSEC_FVRy register at BSEC reset. Fuse value can be read there directly if FUSEOK is set in BSEC_OTPSR. Reloading fuse value using BSEC_OTPCR is only required if the fuse value changed since the last BSEC reset.The boot CPU can access this bit in temporal isolation level 0 and 1, if allowed (cf Fusemap). */

/******************  Bit definition for BSEC_SFSR1 register  ******************/
#define BSEC_SFSR1_SFW32_Pos          (0U)
#define BSEC_SFSR1_SFW32_Msk          (0x1U << BSEC_SFSR1_SFW32_Pos)          /*!< 0x00000001 */
#define BSEC_SFSR1_SFW32              BSEC_SFSR1_SFW32_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW33_Pos          (1U)
#define BSEC_SFSR1_SFW33_Msk          (0x1U << BSEC_SFSR1_SFW33_Pos)          /*!< 0x00000002 */
#define BSEC_SFSR1_SFW33              BSEC_SFSR1_SFW33_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW34_Pos          (2U)
#define BSEC_SFSR1_SFW34_Msk          (0x1U << BSEC_SFSR1_SFW34_Pos)          /*!< 0x00000004 */
#define BSEC_SFSR1_SFW34              BSEC_SFSR1_SFW34_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW35_Pos          (3U)
#define BSEC_SFSR1_SFW35_Msk          (0x1U << BSEC_SFSR1_SFW35_Pos)          /*!< 0x00000008 */
#define BSEC_SFSR1_SFW35              BSEC_SFSR1_SFW35_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW36_Pos          (4U)
#define BSEC_SFSR1_SFW36_Msk          (0x1U << BSEC_SFSR1_SFW36_Pos)          /*!< 0x00000010 */
#define BSEC_SFSR1_SFW36              BSEC_SFSR1_SFW36_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW37_Pos          (5U)
#define BSEC_SFSR1_SFW37_Msk          (0x1U << BSEC_SFSR1_SFW37_Pos)          /*!< 0x00000020 */
#define BSEC_SFSR1_SFW37              BSEC_SFSR1_SFW37_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW38_Pos          (6U)
#define BSEC_SFSR1_SFW38_Msk          (0x1U << BSEC_SFSR1_SFW38_Pos)          /*!< 0x00000040 */
#define BSEC_SFSR1_SFW38              BSEC_SFSR1_SFW38_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW39_Pos          (7U)
#define BSEC_SFSR1_SFW39_Msk          (0x1U << BSEC_SFSR1_SFW39_Pos)          /*!< 0x00000080 */
#define BSEC_SFSR1_SFW39              BSEC_SFSR1_SFW39_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW40_Pos          (8U)
#define BSEC_SFSR1_SFW40_Msk          (0x1U << BSEC_SFSR1_SFW40_Pos)          /*!< 0x00000100 */
#define BSEC_SFSR1_SFW40              BSEC_SFSR1_SFW40_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW41_Pos          (9U)
#define BSEC_SFSR1_SFW41_Msk          (0x1U << BSEC_SFSR1_SFW41_Pos)          /*!< 0x00000200 */
#define BSEC_SFSR1_SFW41              BSEC_SFSR1_SFW41_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW42_Pos          (10U)
#define BSEC_SFSR1_SFW42_Msk          (0x1U << BSEC_SFSR1_SFW42_Pos)          /*!< 0x00000400 */
#define BSEC_SFSR1_SFW42              BSEC_SFSR1_SFW42_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW43_Pos          (11U)
#define BSEC_SFSR1_SFW43_Msk          (0x1U << BSEC_SFSR1_SFW43_Pos)          /*!< 0x00000800 */
#define BSEC_SFSR1_SFW43              BSEC_SFSR1_SFW43_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW44_Pos          (12U)
#define BSEC_SFSR1_SFW44_Msk          (0x1U << BSEC_SFSR1_SFW44_Pos)          /*!< 0x00001000 */
#define BSEC_SFSR1_SFW44              BSEC_SFSR1_SFW44_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW45_Pos          (13U)
#define BSEC_SFSR1_SFW45_Msk          (0x1U << BSEC_SFSR1_SFW45_Pos)          /*!< 0x00002000 */
#define BSEC_SFSR1_SFW45              BSEC_SFSR1_SFW45_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW46_Pos          (14U)
#define BSEC_SFSR1_SFW46_Msk          (0x1U << BSEC_SFSR1_SFW46_Pos)          /*!< 0x00004000 */
#define BSEC_SFSR1_SFW46              BSEC_SFSR1_SFW46_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW47_Pos          (15U)
#define BSEC_SFSR1_SFW47_Msk          (0x1U << BSEC_SFSR1_SFW47_Pos)          /*!< 0x00008000 */
#define BSEC_SFSR1_SFW47              BSEC_SFSR1_SFW47_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW48_Pos          (16U)
#define BSEC_SFSR1_SFW48_Msk          (0x1U << BSEC_SFSR1_SFW48_Pos)          /*!< 0x00010000 */
#define BSEC_SFSR1_SFW48              BSEC_SFSR1_SFW48_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW49_Pos          (17U)
#define BSEC_SFSR1_SFW49_Msk          (0x1U << BSEC_SFSR1_SFW49_Pos)          /*!< 0x00020000 */
#define BSEC_SFSR1_SFW49              BSEC_SFSR1_SFW49_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW50_Pos          (18U)
#define BSEC_SFSR1_SFW50_Msk          (0x1U << BSEC_SFSR1_SFW50_Pos)          /*!< 0x00040000 */
#define BSEC_SFSR1_SFW50              BSEC_SFSR1_SFW50_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW51_Pos          (19U)
#define BSEC_SFSR1_SFW51_Msk          (0x1U << BSEC_SFSR1_SFW51_Pos)          /*!< 0x00080000 */
#define BSEC_SFSR1_SFW51              BSEC_SFSR1_SFW51_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW52_Pos          (20U)
#define BSEC_SFSR1_SFW52_Msk          (0x1U << BSEC_SFSR1_SFW52_Pos)          /*!< 0x00100000 */
#define BSEC_SFSR1_SFW52              BSEC_SFSR1_SFW52_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW53_Pos          (21U)
#define BSEC_SFSR1_SFW53_Msk          (0x1U << BSEC_SFSR1_SFW53_Pos)          /*!< 0x00200000 */
#define BSEC_SFSR1_SFW53              BSEC_SFSR1_SFW53_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW54_Pos          (22U)
#define BSEC_SFSR1_SFW54_Msk          (0x1U << BSEC_SFSR1_SFW54_Pos)          /*!< 0x00400000 */
#define BSEC_SFSR1_SFW54              BSEC_SFSR1_SFW54_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW55_Pos          (23U)
#define BSEC_SFSR1_SFW55_Msk          (0x1U << BSEC_SFSR1_SFW55_Pos)          /*!< 0x00800000 */
#define BSEC_SFSR1_SFW55              BSEC_SFSR1_SFW55_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW56_Pos          (24U)
#define BSEC_SFSR1_SFW56_Msk          (0x1U << BSEC_SFSR1_SFW56_Pos)          /*!< 0x01000000 */
#define BSEC_SFSR1_SFW56              BSEC_SFSR1_SFW56_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW57_Pos          (25U)
#define BSEC_SFSR1_SFW57_Msk          (0x1U << BSEC_SFSR1_SFW57_Pos)          /*!< 0x02000000 */
#define BSEC_SFSR1_SFW57              BSEC_SFSR1_SFW57_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW58_Pos          (26U)
#define BSEC_SFSR1_SFW58_Msk          (0x1U << BSEC_SFSR1_SFW58_Pos)          /*!< 0x04000000 */
#define BSEC_SFSR1_SFW58              BSEC_SFSR1_SFW58_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW59_Pos          (27U)
#define BSEC_SFSR1_SFW59_Msk          (0x1U << BSEC_SFSR1_SFW59_Pos)          /*!< 0x08000000 */
#define BSEC_SFSR1_SFW59              BSEC_SFSR1_SFW59_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW60_Pos          (28U)
#define BSEC_SFSR1_SFW60_Msk          (0x1U << BSEC_SFSR1_SFW60_Pos)          /*!< 0x10000000 */
#define BSEC_SFSR1_SFW60              BSEC_SFSR1_SFW60_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW61_Pos          (29U)
#define BSEC_SFSR1_SFW61_Msk          (0x1U << BSEC_SFSR1_SFW61_Pos)          /*!< 0x20000000 */
#define BSEC_SFSR1_SFW61              BSEC_SFSR1_SFW61_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW62_Pos          (30U)
#define BSEC_SFSR1_SFW62_Msk          (0x1U << BSEC_SFSR1_SFW62_Pos)          /*!< 0x40000000 */
#define BSEC_SFSR1_SFW62              BSEC_SFSR1_SFW62_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR1_SFW63_Pos          (31U)
#define BSEC_SFSR1_SFW63_Msk          (0x1U << BSEC_SFSR1_SFW63_Pos)          /*!< 0x80000000 */
#define BSEC_SFSR1_SFW63              BSEC_SFSR1_SFW63_Msk                    /*!< Shadowed fuse word y (y=32 to 63)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR2 register  ******************/
#define BSEC_SFSR2_SFW64_Pos          (0U)
#define BSEC_SFSR2_SFW64_Msk          (0x1U << BSEC_SFSR2_SFW64_Pos)          /*!< 0x00000001 */
#define BSEC_SFSR2_SFW64              BSEC_SFSR2_SFW64_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW65_Pos          (1U)
#define BSEC_SFSR2_SFW65_Msk          (0x1U << BSEC_SFSR2_SFW65_Pos)          /*!< 0x00000002 */
#define BSEC_SFSR2_SFW65              BSEC_SFSR2_SFW65_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW66_Pos          (2U)
#define BSEC_SFSR2_SFW66_Msk          (0x1U << BSEC_SFSR2_SFW66_Pos)          /*!< 0x00000004 */
#define BSEC_SFSR2_SFW66              BSEC_SFSR2_SFW66_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW67_Pos          (3U)
#define BSEC_SFSR2_SFW67_Msk          (0x1U << BSEC_SFSR2_SFW67_Pos)          /*!< 0x00000008 */
#define BSEC_SFSR2_SFW67              BSEC_SFSR2_SFW67_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW68_Pos          (4U)
#define BSEC_SFSR2_SFW68_Msk          (0x1U << BSEC_SFSR2_SFW68_Pos)          /*!< 0x00000010 */
#define BSEC_SFSR2_SFW68              BSEC_SFSR2_SFW68_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW69_Pos          (5U)
#define BSEC_SFSR2_SFW69_Msk          (0x1U << BSEC_SFSR2_SFW69_Pos)          /*!< 0x00000020 */
#define BSEC_SFSR2_SFW69              BSEC_SFSR2_SFW69_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW70_Pos          (6U)
#define BSEC_SFSR2_SFW70_Msk          (0x1U << BSEC_SFSR2_SFW70_Pos)          /*!< 0x00000040 */
#define BSEC_SFSR2_SFW70              BSEC_SFSR2_SFW70_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW71_Pos          (7U)
#define BSEC_SFSR2_SFW71_Msk          (0x1U << BSEC_SFSR2_SFW71_Pos)          /*!< 0x00000080 */
#define BSEC_SFSR2_SFW71              BSEC_SFSR2_SFW71_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW72_Pos          (8U)
#define BSEC_SFSR2_SFW72_Msk          (0x1U << BSEC_SFSR2_SFW72_Pos)          /*!< 0x00000100 */
#define BSEC_SFSR2_SFW72              BSEC_SFSR2_SFW72_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW73_Pos          (9U)
#define BSEC_SFSR2_SFW73_Msk          (0x1U << BSEC_SFSR2_SFW73_Pos)          /*!< 0x00000200 */
#define BSEC_SFSR2_SFW73              BSEC_SFSR2_SFW73_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW74_Pos          (10U)
#define BSEC_SFSR2_SFW74_Msk          (0x1U << BSEC_SFSR2_SFW74_Pos)          /*!< 0x00000400 */
#define BSEC_SFSR2_SFW74              BSEC_SFSR2_SFW74_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW75_Pos          (11U)
#define BSEC_SFSR2_SFW75_Msk          (0x1U << BSEC_SFSR2_SFW75_Pos)          /*!< 0x00000800 */
#define BSEC_SFSR2_SFW75              BSEC_SFSR2_SFW75_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW76_Pos          (12U)
#define BSEC_SFSR2_SFW76_Msk          (0x1U << BSEC_SFSR2_SFW76_Pos)          /*!< 0x00001000 */
#define BSEC_SFSR2_SFW76              BSEC_SFSR2_SFW76_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW77_Pos          (13U)
#define BSEC_SFSR2_SFW77_Msk          (0x1U << BSEC_SFSR2_SFW77_Pos)          /*!< 0x00002000 */
#define BSEC_SFSR2_SFW77              BSEC_SFSR2_SFW77_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW78_Pos          (14U)
#define BSEC_SFSR2_SFW78_Msk          (0x1U << BSEC_SFSR2_SFW78_Pos)          /*!< 0x00004000 */
#define BSEC_SFSR2_SFW78              BSEC_SFSR2_SFW78_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW79_Pos          (15U)
#define BSEC_SFSR2_SFW79_Msk          (0x1U << BSEC_SFSR2_SFW79_Pos)          /*!< 0x00008000 */
#define BSEC_SFSR2_SFW79              BSEC_SFSR2_SFW79_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW80_Pos          (16U)
#define BSEC_SFSR2_SFW80_Msk          (0x1U << BSEC_SFSR2_SFW80_Pos)          /*!< 0x00010000 */
#define BSEC_SFSR2_SFW80              BSEC_SFSR2_SFW80_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW81_Pos          (17U)
#define BSEC_SFSR2_SFW81_Msk          (0x1U << BSEC_SFSR2_SFW81_Pos)          /*!< 0x00020000 */
#define BSEC_SFSR2_SFW81              BSEC_SFSR2_SFW81_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW82_Pos          (18U)
#define BSEC_SFSR2_SFW82_Msk          (0x1U << BSEC_SFSR2_SFW82_Pos)          /*!< 0x00040000 */
#define BSEC_SFSR2_SFW82              BSEC_SFSR2_SFW82_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW83_Pos          (19U)
#define BSEC_SFSR2_SFW83_Msk          (0x1U << BSEC_SFSR2_SFW83_Pos)          /*!< 0x00080000 */
#define BSEC_SFSR2_SFW83              BSEC_SFSR2_SFW83_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW84_Pos          (20U)
#define BSEC_SFSR2_SFW84_Msk          (0x1U << BSEC_SFSR2_SFW84_Pos)          /*!< 0x00100000 */
#define BSEC_SFSR2_SFW84              BSEC_SFSR2_SFW84_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW85_Pos          (21U)
#define BSEC_SFSR2_SFW85_Msk          (0x1U << BSEC_SFSR2_SFW85_Pos)          /*!< 0x00200000 */
#define BSEC_SFSR2_SFW85              BSEC_SFSR2_SFW85_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW86_Pos          (22U)
#define BSEC_SFSR2_SFW86_Msk          (0x1U << BSEC_SFSR2_SFW86_Pos)          /*!< 0x00400000 */
#define BSEC_SFSR2_SFW86              BSEC_SFSR2_SFW86_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW87_Pos          (23U)
#define BSEC_SFSR2_SFW87_Msk          (0x1U << BSEC_SFSR2_SFW87_Pos)          /*!< 0x00800000 */
#define BSEC_SFSR2_SFW87              BSEC_SFSR2_SFW87_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW88_Pos          (24U)
#define BSEC_SFSR2_SFW88_Msk          (0x1U << BSEC_SFSR2_SFW88_Pos)          /*!< 0x01000000 */
#define BSEC_SFSR2_SFW88              BSEC_SFSR2_SFW88_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW89_Pos          (25U)
#define BSEC_SFSR2_SFW89_Msk          (0x1U << BSEC_SFSR2_SFW89_Pos)          /*!< 0x02000000 */
#define BSEC_SFSR2_SFW89              BSEC_SFSR2_SFW89_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW90_Pos          (26U)
#define BSEC_SFSR2_SFW90_Msk          (0x1U << BSEC_SFSR2_SFW90_Pos)          /*!< 0x04000000 */
#define BSEC_SFSR2_SFW90              BSEC_SFSR2_SFW90_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW91_Pos          (27U)
#define BSEC_SFSR2_SFW91_Msk          (0x1U << BSEC_SFSR2_SFW91_Pos)          /*!< 0x08000000 */
#define BSEC_SFSR2_SFW91              BSEC_SFSR2_SFW91_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW92_Pos          (28U)
#define BSEC_SFSR2_SFW92_Msk          (0x1U << BSEC_SFSR2_SFW92_Pos)          /*!< 0x10000000 */
#define BSEC_SFSR2_SFW92              BSEC_SFSR2_SFW92_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW93_Pos          (29U)
#define BSEC_SFSR2_SFW93_Msk          (0x1U << BSEC_SFSR2_SFW93_Pos)          /*!< 0x20000000 */
#define BSEC_SFSR2_SFW93              BSEC_SFSR2_SFW93_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW94_Pos          (30U)
#define BSEC_SFSR2_SFW94_Msk          (0x1U << BSEC_SFSR2_SFW94_Pos)          /*!< 0x40000000 */
#define BSEC_SFSR2_SFW94              BSEC_SFSR2_SFW94_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR2_SFW95_Pos          (31U)
#define BSEC_SFSR2_SFW95_Msk          (0x1U << BSEC_SFSR2_SFW95_Pos)          /*!< 0x80000000 */
#define BSEC_SFSR2_SFW95              BSEC_SFSR2_SFW95_Msk                    /*!< Shadowed fuse word y (y=64 to 95)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR3 register  ******************/
#define BSEC_SFSR3_SFW96_Pos          (0U)
#define BSEC_SFSR3_SFW96_Msk          (0x1U << BSEC_SFSR3_SFW96_Pos)          /*!< 0x00000001 */
#define BSEC_SFSR3_SFW96              BSEC_SFSR3_SFW96_Msk                    /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW97_Pos          (1U)
#define BSEC_SFSR3_SFW97_Msk          (0x1U << BSEC_SFSR3_SFW97_Pos)          /*!< 0x00000002 */
#define BSEC_SFSR3_SFW97              BSEC_SFSR3_SFW97_Msk                    /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW98_Pos          (2U)
#define BSEC_SFSR3_SFW98_Msk          (0x1U << BSEC_SFSR3_SFW98_Pos)          /*!< 0x00000004 */
#define BSEC_SFSR3_SFW98              BSEC_SFSR3_SFW98_Msk                    /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW99_Pos          (3U)
#define BSEC_SFSR3_SFW99_Msk          (0x1U << BSEC_SFSR3_SFW99_Pos)          /*!< 0x00000008 */
#define BSEC_SFSR3_SFW99              BSEC_SFSR3_SFW99_Msk                    /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW100_Pos         (4U)
#define BSEC_SFSR3_SFW100_Msk         (0x1U << BSEC_SFSR3_SFW100_Pos)         /*!< 0x00000010 */
#define BSEC_SFSR3_SFW100             BSEC_SFSR3_SFW100_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW101_Pos         (5U)
#define BSEC_SFSR3_SFW101_Msk         (0x1U << BSEC_SFSR3_SFW101_Pos)         /*!< 0x00000020 */
#define BSEC_SFSR3_SFW101             BSEC_SFSR3_SFW101_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW102_Pos         (6U)
#define BSEC_SFSR3_SFW102_Msk         (0x1U << BSEC_SFSR3_SFW102_Pos)         /*!< 0x00000040 */
#define BSEC_SFSR3_SFW102             BSEC_SFSR3_SFW102_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW103_Pos         (7U)
#define BSEC_SFSR3_SFW103_Msk         (0x1U << BSEC_SFSR3_SFW103_Pos)         /*!< 0x00000080 */
#define BSEC_SFSR3_SFW103             BSEC_SFSR3_SFW103_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW104_Pos         (8U)
#define BSEC_SFSR3_SFW104_Msk         (0x1U << BSEC_SFSR3_SFW104_Pos)         /*!< 0x00000100 */
#define BSEC_SFSR3_SFW104             BSEC_SFSR3_SFW104_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW105_Pos         (9U)
#define BSEC_SFSR3_SFW105_Msk         (0x1U << BSEC_SFSR3_SFW105_Pos)         /*!< 0x00000200 */
#define BSEC_SFSR3_SFW105             BSEC_SFSR3_SFW105_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW106_Pos         (10U)
#define BSEC_SFSR3_SFW106_Msk         (0x1U << BSEC_SFSR3_SFW106_Pos)         /*!< 0x00000400 */
#define BSEC_SFSR3_SFW106             BSEC_SFSR3_SFW106_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW107_Pos         (11U)
#define BSEC_SFSR3_SFW107_Msk         (0x1U << BSEC_SFSR3_SFW107_Pos)         /*!< 0x00000800 */
#define BSEC_SFSR3_SFW107             BSEC_SFSR3_SFW107_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW108_Pos         (12U)
#define BSEC_SFSR3_SFW108_Msk         (0x1U << BSEC_SFSR3_SFW108_Pos)         /*!< 0x00001000 */
#define BSEC_SFSR3_SFW108             BSEC_SFSR3_SFW108_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW109_Pos         (13U)
#define BSEC_SFSR3_SFW109_Msk         (0x1U << BSEC_SFSR3_SFW109_Pos)         /*!< 0x00002000 */
#define BSEC_SFSR3_SFW109             BSEC_SFSR3_SFW109_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW110_Pos         (14U)
#define BSEC_SFSR3_SFW110_Msk         (0x1U << BSEC_SFSR3_SFW110_Pos)         /*!< 0x00004000 */
#define BSEC_SFSR3_SFW110             BSEC_SFSR3_SFW110_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW111_Pos         (15U)
#define BSEC_SFSR3_SFW111_Msk         (0x1U << BSEC_SFSR3_SFW111_Pos)         /*!< 0x00008000 */
#define BSEC_SFSR3_SFW111             BSEC_SFSR3_SFW111_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW112_Pos         (16U)
#define BSEC_SFSR3_SFW112_Msk         (0x1U << BSEC_SFSR3_SFW112_Pos)         /*!< 0x00010000 */
#define BSEC_SFSR3_SFW112             BSEC_SFSR3_SFW112_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW113_Pos         (17U)
#define BSEC_SFSR3_SFW113_Msk         (0x1U << BSEC_SFSR3_SFW113_Pos)         /*!< 0x00020000 */
#define BSEC_SFSR3_SFW113             BSEC_SFSR3_SFW113_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW114_Pos         (18U)
#define BSEC_SFSR3_SFW114_Msk         (0x1U << BSEC_SFSR3_SFW114_Pos)         /*!< 0x00040000 */
#define BSEC_SFSR3_SFW114             BSEC_SFSR3_SFW114_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW115_Pos         (19U)
#define BSEC_SFSR3_SFW115_Msk         (0x1U << BSEC_SFSR3_SFW115_Pos)         /*!< 0x00080000 */
#define BSEC_SFSR3_SFW115             BSEC_SFSR3_SFW115_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW116_Pos         (20U)
#define BSEC_SFSR3_SFW116_Msk         (0x1U << BSEC_SFSR3_SFW116_Pos)         /*!< 0x00100000 */
#define BSEC_SFSR3_SFW116             BSEC_SFSR3_SFW116_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW117_Pos         (21U)
#define BSEC_SFSR3_SFW117_Msk         (0x1U << BSEC_SFSR3_SFW117_Pos)         /*!< 0x00200000 */
#define BSEC_SFSR3_SFW117             BSEC_SFSR3_SFW117_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW118_Pos         (22U)
#define BSEC_SFSR3_SFW118_Msk         (0x1U << BSEC_SFSR3_SFW118_Pos)         /*!< 0x00400000 */
#define BSEC_SFSR3_SFW118             BSEC_SFSR3_SFW118_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW119_Pos         (23U)
#define BSEC_SFSR3_SFW119_Msk         (0x1U << BSEC_SFSR3_SFW119_Pos)         /*!< 0x00800000 */
#define BSEC_SFSR3_SFW119             BSEC_SFSR3_SFW119_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW120_Pos         (24U)
#define BSEC_SFSR3_SFW120_Msk         (0x1U << BSEC_SFSR3_SFW120_Pos)         /*!< 0x01000000 */
#define BSEC_SFSR3_SFW120             BSEC_SFSR3_SFW120_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW121_Pos         (25U)
#define BSEC_SFSR3_SFW121_Msk         (0x1U << BSEC_SFSR3_SFW121_Pos)         /*!< 0x02000000 */
#define BSEC_SFSR3_SFW121             BSEC_SFSR3_SFW121_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW122_Pos         (26U)
#define BSEC_SFSR3_SFW122_Msk         (0x1U << BSEC_SFSR3_SFW122_Pos)         /*!< 0x04000000 */
#define BSEC_SFSR3_SFW122             BSEC_SFSR3_SFW122_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW123_Pos         (27U)
#define BSEC_SFSR3_SFW123_Msk         (0x1U << BSEC_SFSR3_SFW123_Pos)         /*!< 0x08000000 */
#define BSEC_SFSR3_SFW123             BSEC_SFSR3_SFW123_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW124_Pos         (28U)
#define BSEC_SFSR3_SFW124_Msk         (0x1U << BSEC_SFSR3_SFW124_Pos)         /*!< 0x10000000 */
#define BSEC_SFSR3_SFW124             BSEC_SFSR3_SFW124_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW125_Pos         (29U)
#define BSEC_SFSR3_SFW125_Msk         (0x1U << BSEC_SFSR3_SFW125_Pos)         /*!< 0x20000000 */
#define BSEC_SFSR3_SFW125             BSEC_SFSR3_SFW125_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW126_Pos         (30U)
#define BSEC_SFSR3_SFW126_Msk         (0x1U << BSEC_SFSR3_SFW126_Pos)         /*!< 0x40000000 */
#define BSEC_SFSR3_SFW126             BSEC_SFSR3_SFW126_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR3_SFW127_Pos         (31U)
#define BSEC_SFSR3_SFW127_Msk         (0x1U << BSEC_SFSR3_SFW127_Pos)         /*!< 0x80000000 */
#define BSEC_SFSR3_SFW127             BSEC_SFSR3_SFW127_Msk                   /*!< Shadowed fuse word y (y=96 to 127)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR4 register  ******************/
#define BSEC_SFSR4_SFW128_Pos         (0U)
#define BSEC_SFSR4_SFW128_Msk         (0x1U << BSEC_SFSR4_SFW128_Pos)         /*!< 0x00000001 */
#define BSEC_SFSR4_SFW128             BSEC_SFSR4_SFW128_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW129_Pos         (1U)
#define BSEC_SFSR4_SFW129_Msk         (0x1U << BSEC_SFSR4_SFW129_Pos)         /*!< 0x00000002 */
#define BSEC_SFSR4_SFW129             BSEC_SFSR4_SFW129_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW130_Pos         (2U)
#define BSEC_SFSR4_SFW130_Msk         (0x1U << BSEC_SFSR4_SFW130_Pos)         /*!< 0x00000004 */
#define BSEC_SFSR4_SFW130             BSEC_SFSR4_SFW130_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW131_Pos         (3U)
#define BSEC_SFSR4_SFW131_Msk         (0x1U << BSEC_SFSR4_SFW131_Pos)         /*!< 0x00000008 */
#define BSEC_SFSR4_SFW131             BSEC_SFSR4_SFW131_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW132_Pos         (4U)
#define BSEC_SFSR4_SFW132_Msk         (0x1U << BSEC_SFSR4_SFW132_Pos)         /*!< 0x00000010 */
#define BSEC_SFSR4_SFW132             BSEC_SFSR4_SFW132_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW133_Pos         (5U)
#define BSEC_SFSR4_SFW133_Msk         (0x1U << BSEC_SFSR4_SFW133_Pos)         /*!< 0x00000020 */
#define BSEC_SFSR4_SFW133             BSEC_SFSR4_SFW133_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW134_Pos         (6U)
#define BSEC_SFSR4_SFW134_Msk         (0x1U << BSEC_SFSR4_SFW134_Pos)         /*!< 0x00000040 */
#define BSEC_SFSR4_SFW134             BSEC_SFSR4_SFW134_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW135_Pos         (7U)
#define BSEC_SFSR4_SFW135_Msk         (0x1U << BSEC_SFSR4_SFW135_Pos)         /*!< 0x00000080 */
#define BSEC_SFSR4_SFW135             BSEC_SFSR4_SFW135_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW136_Pos         (8U)
#define BSEC_SFSR4_SFW136_Msk         (0x1U << BSEC_SFSR4_SFW136_Pos)         /*!< 0x00000100 */
#define BSEC_SFSR4_SFW136             BSEC_SFSR4_SFW136_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW137_Pos         (9U)
#define BSEC_SFSR4_SFW137_Msk         (0x1U << BSEC_SFSR4_SFW137_Pos)         /*!< 0x00000200 */
#define BSEC_SFSR4_SFW137             BSEC_SFSR4_SFW137_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW138_Pos         (10U)
#define BSEC_SFSR4_SFW138_Msk         (0x1U << BSEC_SFSR4_SFW138_Pos)         /*!< 0x00000400 */
#define BSEC_SFSR4_SFW138             BSEC_SFSR4_SFW138_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW139_Pos         (11U)
#define BSEC_SFSR4_SFW139_Msk         (0x1U << BSEC_SFSR4_SFW139_Pos)         /*!< 0x00000800 */
#define BSEC_SFSR4_SFW139             BSEC_SFSR4_SFW139_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW140_Pos         (12U)
#define BSEC_SFSR4_SFW140_Msk         (0x1U << BSEC_SFSR4_SFW140_Pos)         /*!< 0x00001000 */
#define BSEC_SFSR4_SFW140             BSEC_SFSR4_SFW140_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW141_Pos         (13U)
#define BSEC_SFSR4_SFW141_Msk         (0x1U << BSEC_SFSR4_SFW141_Pos)         /*!< 0x00002000 */
#define BSEC_SFSR4_SFW141             BSEC_SFSR4_SFW141_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW142_Pos         (14U)
#define BSEC_SFSR4_SFW142_Msk         (0x1U << BSEC_SFSR4_SFW142_Pos)         /*!< 0x00004000 */
#define BSEC_SFSR4_SFW142             BSEC_SFSR4_SFW142_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW143_Pos         (15U)
#define BSEC_SFSR4_SFW143_Msk         (0x1U << BSEC_SFSR4_SFW143_Pos)         /*!< 0x00008000 */
#define BSEC_SFSR4_SFW143             BSEC_SFSR4_SFW143_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW144_Pos         (16U)
#define BSEC_SFSR4_SFW144_Msk         (0x1U << BSEC_SFSR4_SFW144_Pos)         /*!< 0x00010000 */
#define BSEC_SFSR4_SFW144             BSEC_SFSR4_SFW144_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW145_Pos         (17U)
#define BSEC_SFSR4_SFW145_Msk         (0x1U << BSEC_SFSR4_SFW145_Pos)         /*!< 0x00020000 */
#define BSEC_SFSR4_SFW145             BSEC_SFSR4_SFW145_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW146_Pos         (18U)
#define BSEC_SFSR4_SFW146_Msk         (0x1U << BSEC_SFSR4_SFW146_Pos)         /*!< 0x00040000 */
#define BSEC_SFSR4_SFW146             BSEC_SFSR4_SFW146_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW147_Pos         (19U)
#define BSEC_SFSR4_SFW147_Msk         (0x1U << BSEC_SFSR4_SFW147_Pos)         /*!< 0x00080000 */
#define BSEC_SFSR4_SFW147             BSEC_SFSR4_SFW147_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW148_Pos         (20U)
#define BSEC_SFSR4_SFW148_Msk         (0x1U << BSEC_SFSR4_SFW148_Pos)         /*!< 0x00100000 */
#define BSEC_SFSR4_SFW148             BSEC_SFSR4_SFW148_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW149_Pos         (21U)
#define BSEC_SFSR4_SFW149_Msk         (0x1U << BSEC_SFSR4_SFW149_Pos)         /*!< 0x00200000 */
#define BSEC_SFSR4_SFW149             BSEC_SFSR4_SFW149_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW150_Pos         (22U)
#define BSEC_SFSR4_SFW150_Msk         (0x1U << BSEC_SFSR4_SFW150_Pos)         /*!< 0x00400000 */
#define BSEC_SFSR4_SFW150             BSEC_SFSR4_SFW150_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW151_Pos         (23U)
#define BSEC_SFSR4_SFW151_Msk         (0x1U << BSEC_SFSR4_SFW151_Pos)         /*!< 0x00800000 */
#define BSEC_SFSR4_SFW151             BSEC_SFSR4_SFW151_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW152_Pos         (24U)
#define BSEC_SFSR4_SFW152_Msk         (0x1U << BSEC_SFSR4_SFW152_Pos)         /*!< 0x01000000 */
#define BSEC_SFSR4_SFW152             BSEC_SFSR4_SFW152_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW153_Pos         (25U)
#define BSEC_SFSR4_SFW153_Msk         (0x1U << BSEC_SFSR4_SFW153_Pos)         /*!< 0x02000000 */
#define BSEC_SFSR4_SFW153             BSEC_SFSR4_SFW153_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW154_Pos         (26U)
#define BSEC_SFSR4_SFW154_Msk         (0x1U << BSEC_SFSR4_SFW154_Pos)         /*!< 0x04000000 */
#define BSEC_SFSR4_SFW154             BSEC_SFSR4_SFW154_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW155_Pos         (27U)
#define BSEC_SFSR4_SFW155_Msk         (0x1U << BSEC_SFSR4_SFW155_Pos)         /*!< 0x08000000 */
#define BSEC_SFSR4_SFW155             BSEC_SFSR4_SFW155_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW156_Pos         (28U)
#define BSEC_SFSR4_SFW156_Msk         (0x1U << BSEC_SFSR4_SFW156_Pos)         /*!< 0x10000000 */
#define BSEC_SFSR4_SFW156             BSEC_SFSR4_SFW156_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW157_Pos         (29U)
#define BSEC_SFSR4_SFW157_Msk         (0x1U << BSEC_SFSR4_SFW157_Pos)         /*!< 0x20000000 */
#define BSEC_SFSR4_SFW157             BSEC_SFSR4_SFW157_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW158_Pos         (30U)
#define BSEC_SFSR4_SFW158_Msk         (0x1U << BSEC_SFSR4_SFW158_Pos)         /*!< 0x40000000 */
#define BSEC_SFSR4_SFW158             BSEC_SFSR4_SFW158_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR4_SFW159_Pos         (31U)
#define BSEC_SFSR4_SFW159_Msk         (0x1U << BSEC_SFSR4_SFW159_Pos)         /*!< 0x80000000 */
#define BSEC_SFSR4_SFW159             BSEC_SFSR4_SFW159_Msk                   /*!< Shadowed fuse word y (y=128 to 159)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR5 register  ******************/
#define BSEC_SFSR5_SFW160_Pos         (0U)
#define BSEC_SFSR5_SFW160_Msk         (0x1U << BSEC_SFSR5_SFW160_Pos)         /*!< 0x00000001 */
#define BSEC_SFSR5_SFW160             BSEC_SFSR5_SFW160_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW161_Pos         (1U)
#define BSEC_SFSR5_SFW161_Msk         (0x1U << BSEC_SFSR5_SFW161_Pos)         /*!< 0x00000002 */
#define BSEC_SFSR5_SFW161             BSEC_SFSR5_SFW161_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW162_Pos         (2U)
#define BSEC_SFSR5_SFW162_Msk         (0x1U << BSEC_SFSR5_SFW162_Pos)         /*!< 0x00000004 */
#define BSEC_SFSR5_SFW162             BSEC_SFSR5_SFW162_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW163_Pos         (3U)
#define BSEC_SFSR5_SFW163_Msk         (0x1U << BSEC_SFSR5_SFW163_Pos)         /*!< 0x00000008 */
#define BSEC_SFSR5_SFW163             BSEC_SFSR5_SFW163_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW164_Pos         (4U)
#define BSEC_SFSR5_SFW164_Msk         (0x1U << BSEC_SFSR5_SFW164_Pos)         /*!< 0x00000010 */
#define BSEC_SFSR5_SFW164             BSEC_SFSR5_SFW164_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW165_Pos         (5U)
#define BSEC_SFSR5_SFW165_Msk         (0x1U << BSEC_SFSR5_SFW165_Pos)         /*!< 0x00000020 */
#define BSEC_SFSR5_SFW165             BSEC_SFSR5_SFW165_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW166_Pos         (6U)
#define BSEC_SFSR5_SFW166_Msk         (0x1U << BSEC_SFSR5_SFW166_Pos)         /*!< 0x00000040 */
#define BSEC_SFSR5_SFW166             BSEC_SFSR5_SFW166_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW167_Pos         (7U)
#define BSEC_SFSR5_SFW167_Msk         (0x1U << BSEC_SFSR5_SFW167_Pos)         /*!< 0x00000080 */
#define BSEC_SFSR5_SFW167             BSEC_SFSR5_SFW167_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW168_Pos         (8U)
#define BSEC_SFSR5_SFW168_Msk         (0x1U << BSEC_SFSR5_SFW168_Pos)         /*!< 0x00000100 */
#define BSEC_SFSR5_SFW168             BSEC_SFSR5_SFW168_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW169_Pos         (9U)
#define BSEC_SFSR5_SFW169_Msk         (0x1U << BSEC_SFSR5_SFW169_Pos)         /*!< 0x00000200 */
#define BSEC_SFSR5_SFW169             BSEC_SFSR5_SFW169_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW170_Pos         (10U)
#define BSEC_SFSR5_SFW170_Msk         (0x1U << BSEC_SFSR5_SFW170_Pos)         /*!< 0x00000400 */
#define BSEC_SFSR5_SFW170             BSEC_SFSR5_SFW170_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW171_Pos         (11U)
#define BSEC_SFSR5_SFW171_Msk         (0x1U << BSEC_SFSR5_SFW171_Pos)         /*!< 0x00000800 */
#define BSEC_SFSR5_SFW171             BSEC_SFSR5_SFW171_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW172_Pos         (12U)
#define BSEC_SFSR5_SFW172_Msk         (0x1U << BSEC_SFSR5_SFW172_Pos)         /*!< 0x00001000 */
#define BSEC_SFSR5_SFW172             BSEC_SFSR5_SFW172_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW173_Pos         (13U)
#define BSEC_SFSR5_SFW173_Msk         (0x1U << BSEC_SFSR5_SFW173_Pos)         /*!< 0x00002000 */
#define BSEC_SFSR5_SFW173             BSEC_SFSR5_SFW173_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW174_Pos         (14U)
#define BSEC_SFSR5_SFW174_Msk         (0x1U << BSEC_SFSR5_SFW174_Pos)         /*!< 0x00004000 */
#define BSEC_SFSR5_SFW174             BSEC_SFSR5_SFW174_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW175_Pos         (15U)
#define BSEC_SFSR5_SFW175_Msk         (0x1U << BSEC_SFSR5_SFW175_Pos)         /*!< 0x00008000 */
#define BSEC_SFSR5_SFW175             BSEC_SFSR5_SFW175_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW176_Pos         (16U)
#define BSEC_SFSR5_SFW176_Msk         (0x1U << BSEC_SFSR5_SFW176_Pos)         /*!< 0x00010000 */
#define BSEC_SFSR5_SFW176             BSEC_SFSR5_SFW176_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW177_Pos         (17U)
#define BSEC_SFSR5_SFW177_Msk         (0x1U << BSEC_SFSR5_SFW177_Pos)         /*!< 0x00020000 */
#define BSEC_SFSR5_SFW177             BSEC_SFSR5_SFW177_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW178_Pos         (18U)
#define BSEC_SFSR5_SFW178_Msk         (0x1U << BSEC_SFSR5_SFW178_Pos)         /*!< 0x00040000 */
#define BSEC_SFSR5_SFW178             BSEC_SFSR5_SFW178_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW179_Pos         (19U)
#define BSEC_SFSR5_SFW179_Msk         (0x1U << BSEC_SFSR5_SFW179_Pos)         /*!< 0x00080000 */
#define BSEC_SFSR5_SFW179             BSEC_SFSR5_SFW179_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW180_Pos         (20U)
#define BSEC_SFSR5_SFW180_Msk         (0x1U << BSEC_SFSR5_SFW180_Pos)         /*!< 0x00100000 */
#define BSEC_SFSR5_SFW180             BSEC_SFSR5_SFW180_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW181_Pos         (21U)
#define BSEC_SFSR5_SFW181_Msk         (0x1U << BSEC_SFSR5_SFW181_Pos)         /*!< 0x00200000 */
#define BSEC_SFSR5_SFW181             BSEC_SFSR5_SFW181_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW182_Pos         (22U)
#define BSEC_SFSR5_SFW182_Msk         (0x1U << BSEC_SFSR5_SFW182_Pos)         /*!< 0x00400000 */
#define BSEC_SFSR5_SFW182             BSEC_SFSR5_SFW182_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW183_Pos         (23U)
#define BSEC_SFSR5_SFW183_Msk         (0x1U << BSEC_SFSR5_SFW183_Pos)         /*!< 0x00800000 */
#define BSEC_SFSR5_SFW183             BSEC_SFSR5_SFW183_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW184_Pos         (24U)
#define BSEC_SFSR5_SFW184_Msk         (0x1U << BSEC_SFSR5_SFW184_Pos)         /*!< 0x01000000 */
#define BSEC_SFSR5_SFW184             BSEC_SFSR5_SFW184_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW185_Pos         (25U)
#define BSEC_SFSR5_SFW185_Msk         (0x1U << BSEC_SFSR5_SFW185_Pos)         /*!< 0x02000000 */
#define BSEC_SFSR5_SFW185             BSEC_SFSR5_SFW185_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW186_Pos         (26U)
#define BSEC_SFSR5_SFW186_Msk         (0x1U << BSEC_SFSR5_SFW186_Pos)         /*!< 0x04000000 */
#define BSEC_SFSR5_SFW186             BSEC_SFSR5_SFW186_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW187_Pos         (27U)
#define BSEC_SFSR5_SFW187_Msk         (0x1U << BSEC_SFSR5_SFW187_Pos)         /*!< 0x08000000 */
#define BSEC_SFSR5_SFW187             BSEC_SFSR5_SFW187_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW188_Pos         (28U)
#define BSEC_SFSR5_SFW188_Msk         (0x1U << BSEC_SFSR5_SFW188_Pos)         /*!< 0x10000000 */
#define BSEC_SFSR5_SFW188             BSEC_SFSR5_SFW188_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW189_Pos         (29U)
#define BSEC_SFSR5_SFW189_Msk         (0x1U << BSEC_SFSR5_SFW189_Pos)         /*!< 0x20000000 */
#define BSEC_SFSR5_SFW189             BSEC_SFSR5_SFW189_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW190_Pos         (30U)
#define BSEC_SFSR5_SFW190_Msk         (0x1U << BSEC_SFSR5_SFW190_Pos)         /*!< 0x40000000 */
#define BSEC_SFSR5_SFW190             BSEC_SFSR5_SFW190_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR5_SFW191_Pos         (31U)
#define BSEC_SFSR5_SFW191_Msk         (0x1U << BSEC_SFSR5_SFW191_Pos)         /*!< 0x80000000 */
#define BSEC_SFSR5_SFW191             BSEC_SFSR5_SFW191_Msk                   /*!< Shadowed fuse word y (y=160 to 191)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR6 register  ******************/
#define BSEC_SFSR6_SFW192_Pos         (0U)
#define BSEC_SFSR6_SFW192_Msk         (0x1U << BSEC_SFSR6_SFW192_Pos)         /*!< 0x00000001 */
#define BSEC_SFSR6_SFW192             BSEC_SFSR6_SFW192_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW193_Pos         (1U)
#define BSEC_SFSR6_SFW193_Msk         (0x1U << BSEC_SFSR6_SFW193_Pos)         /*!< 0x00000002 */
#define BSEC_SFSR6_SFW193             BSEC_SFSR6_SFW193_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW194_Pos         (2U)
#define BSEC_SFSR6_SFW194_Msk         (0x1U << BSEC_SFSR6_SFW194_Pos)         /*!< 0x00000004 */
#define BSEC_SFSR6_SFW194             BSEC_SFSR6_SFW194_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW195_Pos         (3U)
#define BSEC_SFSR6_SFW195_Msk         (0x1U << BSEC_SFSR6_SFW195_Pos)         /*!< 0x00000008 */
#define BSEC_SFSR6_SFW195             BSEC_SFSR6_SFW195_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW196_Pos         (4U)
#define BSEC_SFSR6_SFW196_Msk         (0x1U << BSEC_SFSR6_SFW196_Pos)         /*!< 0x00000010 */
#define BSEC_SFSR6_SFW196             BSEC_SFSR6_SFW196_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW197_Pos         (5U)
#define BSEC_SFSR6_SFW197_Msk         (0x1U << BSEC_SFSR6_SFW197_Pos)         /*!< 0x00000020 */
#define BSEC_SFSR6_SFW197             BSEC_SFSR6_SFW197_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW198_Pos         (6U)
#define BSEC_SFSR6_SFW198_Msk         (0x1U << BSEC_SFSR6_SFW198_Pos)         /*!< 0x00000040 */
#define BSEC_SFSR6_SFW198             BSEC_SFSR6_SFW198_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW199_Pos         (7U)
#define BSEC_SFSR6_SFW199_Msk         (0x1U << BSEC_SFSR6_SFW199_Pos)         /*!< 0x00000080 */
#define BSEC_SFSR6_SFW199             BSEC_SFSR6_SFW199_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW200_Pos         (8U)
#define BSEC_SFSR6_SFW200_Msk         (0x1U << BSEC_SFSR6_SFW200_Pos)         /*!< 0x00000100 */
#define BSEC_SFSR6_SFW200             BSEC_SFSR6_SFW200_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW201_Pos         (9U)
#define BSEC_SFSR6_SFW201_Msk         (0x1U << BSEC_SFSR6_SFW201_Pos)         /*!< 0x00000200 */
#define BSEC_SFSR6_SFW201             BSEC_SFSR6_SFW201_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW202_Pos         (10U)
#define BSEC_SFSR6_SFW202_Msk         (0x1U << BSEC_SFSR6_SFW202_Pos)         /*!< 0x00000400 */
#define BSEC_SFSR6_SFW202             BSEC_SFSR6_SFW202_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW203_Pos         (11U)
#define BSEC_SFSR6_SFW203_Msk         (0x1U << BSEC_SFSR6_SFW203_Pos)         /*!< 0x00000800 */
#define BSEC_SFSR6_SFW203             BSEC_SFSR6_SFW203_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW204_Pos         (12U)
#define BSEC_SFSR6_SFW204_Msk         (0x1U << BSEC_SFSR6_SFW204_Pos)         /*!< 0x00001000 */
#define BSEC_SFSR6_SFW204             BSEC_SFSR6_SFW204_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW205_Pos         (13U)
#define BSEC_SFSR6_SFW205_Msk         (0x1U << BSEC_SFSR6_SFW205_Pos)         /*!< 0x00002000 */
#define BSEC_SFSR6_SFW205             BSEC_SFSR6_SFW205_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW206_Pos         (14U)
#define BSEC_SFSR6_SFW206_Msk         (0x1U << BSEC_SFSR6_SFW206_Pos)         /*!< 0x00004000 */
#define BSEC_SFSR6_SFW206             BSEC_SFSR6_SFW206_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW207_Pos         (15U)
#define BSEC_SFSR6_SFW207_Msk         (0x1U << BSEC_SFSR6_SFW207_Pos)         /*!< 0x00008000 */
#define BSEC_SFSR6_SFW207             BSEC_SFSR6_SFW207_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW208_Pos         (16U)
#define BSEC_SFSR6_SFW208_Msk         (0x1U << BSEC_SFSR6_SFW208_Pos)         /*!< 0x00010000 */
#define BSEC_SFSR6_SFW208             BSEC_SFSR6_SFW208_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW209_Pos         (17U)
#define BSEC_SFSR6_SFW209_Msk         (0x1U << BSEC_SFSR6_SFW209_Pos)         /*!< 0x00020000 */
#define BSEC_SFSR6_SFW209             BSEC_SFSR6_SFW209_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW210_Pos         (18U)
#define BSEC_SFSR6_SFW210_Msk         (0x1U << BSEC_SFSR6_SFW210_Pos)         /*!< 0x00040000 */
#define BSEC_SFSR6_SFW210             BSEC_SFSR6_SFW210_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW211_Pos         (19U)
#define BSEC_SFSR6_SFW211_Msk         (0x1U << BSEC_SFSR6_SFW211_Pos)         /*!< 0x00080000 */
#define BSEC_SFSR6_SFW211             BSEC_SFSR6_SFW211_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW212_Pos         (20U)
#define BSEC_SFSR6_SFW212_Msk         (0x1U << BSEC_SFSR6_SFW212_Pos)         /*!< 0x00100000 */
#define BSEC_SFSR6_SFW212             BSEC_SFSR6_SFW212_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW213_Pos         (21U)
#define BSEC_SFSR6_SFW213_Msk         (0x1U << BSEC_SFSR6_SFW213_Pos)         /*!< 0x00200000 */
#define BSEC_SFSR6_SFW213             BSEC_SFSR6_SFW213_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW214_Pos         (22U)
#define BSEC_SFSR6_SFW214_Msk         (0x1U << BSEC_SFSR6_SFW214_Pos)         /*!< 0x00400000 */
#define BSEC_SFSR6_SFW214             BSEC_SFSR6_SFW214_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW215_Pos         (23U)
#define BSEC_SFSR6_SFW215_Msk         (0x1U << BSEC_SFSR6_SFW215_Pos)         /*!< 0x00800000 */
#define BSEC_SFSR6_SFW215             BSEC_SFSR6_SFW215_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW216_Pos         (24U)
#define BSEC_SFSR6_SFW216_Msk         (0x1U << BSEC_SFSR6_SFW216_Pos)         /*!< 0x01000000 */
#define BSEC_SFSR6_SFW216             BSEC_SFSR6_SFW216_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW217_Pos         (25U)
#define BSEC_SFSR6_SFW217_Msk         (0x1U << BSEC_SFSR6_SFW217_Pos)         /*!< 0x02000000 */
#define BSEC_SFSR6_SFW217             BSEC_SFSR6_SFW217_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW218_Pos         (26U)
#define BSEC_SFSR6_SFW218_Msk         (0x1U << BSEC_SFSR6_SFW218_Pos)         /*!< 0x04000000 */
#define BSEC_SFSR6_SFW218             BSEC_SFSR6_SFW218_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW219_Pos         (27U)
#define BSEC_SFSR6_SFW219_Msk         (0x1U << BSEC_SFSR6_SFW219_Pos)         /*!< 0x08000000 */
#define BSEC_SFSR6_SFW219             BSEC_SFSR6_SFW219_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW220_Pos         (28U)
#define BSEC_SFSR6_SFW220_Msk         (0x1U << BSEC_SFSR6_SFW220_Pos)         /*!< 0x10000000 */
#define BSEC_SFSR6_SFW220             BSEC_SFSR6_SFW220_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW221_Pos         (29U)
#define BSEC_SFSR6_SFW221_Msk         (0x1U << BSEC_SFSR6_SFW221_Pos)         /*!< 0x20000000 */
#define BSEC_SFSR6_SFW221             BSEC_SFSR6_SFW221_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW222_Pos         (30U)
#define BSEC_SFSR6_SFW222_Msk         (0x1U << BSEC_SFSR6_SFW222_Pos)         /*!< 0x40000000 */
#define BSEC_SFSR6_SFW222             BSEC_SFSR6_SFW222_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR6_SFW223_Pos         (31U)
#define BSEC_SFSR6_SFW223_Msk         (0x1U << BSEC_SFSR6_SFW223_Pos)         /*!< 0x80000000 */
#define BSEC_SFSR6_SFW223             BSEC_SFSR6_SFW223_Msk                   /*!< Shadowed fuse word y (y=192 to 223)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR7 register  ******************/
#define BSEC_SFSR7_SFW224_Pos         (0U)
#define BSEC_SFSR7_SFW224_Msk         (0x1U << BSEC_SFSR7_SFW224_Pos)         /*!< 0x00000001 */
#define BSEC_SFSR7_SFW224             BSEC_SFSR7_SFW224_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW225_Pos         (1U)
#define BSEC_SFSR7_SFW225_Msk         (0x1U << BSEC_SFSR7_SFW225_Pos)         /*!< 0x00000002 */
#define BSEC_SFSR7_SFW225             BSEC_SFSR7_SFW225_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW226_Pos         (2U)
#define BSEC_SFSR7_SFW226_Msk         (0x1U << BSEC_SFSR7_SFW226_Pos)         /*!< 0x00000004 */
#define BSEC_SFSR7_SFW226             BSEC_SFSR7_SFW226_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW227_Pos         (3U)
#define BSEC_SFSR7_SFW227_Msk         (0x1U << BSEC_SFSR7_SFW227_Pos)         /*!< 0x00000008 */
#define BSEC_SFSR7_SFW227             BSEC_SFSR7_SFW227_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW228_Pos         (4U)
#define BSEC_SFSR7_SFW228_Msk         (0x1U << BSEC_SFSR7_SFW228_Pos)         /*!< 0x00000010 */
#define BSEC_SFSR7_SFW228             BSEC_SFSR7_SFW228_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW229_Pos         (5U)
#define BSEC_SFSR7_SFW229_Msk         (0x1U << BSEC_SFSR7_SFW229_Pos)         /*!< 0x00000020 */
#define BSEC_SFSR7_SFW229             BSEC_SFSR7_SFW229_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW230_Pos         (6U)
#define BSEC_SFSR7_SFW230_Msk         (0x1U << BSEC_SFSR7_SFW230_Pos)         /*!< 0x00000040 */
#define BSEC_SFSR7_SFW230             BSEC_SFSR7_SFW230_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW231_Pos         (7U)
#define BSEC_SFSR7_SFW231_Msk         (0x1U << BSEC_SFSR7_SFW231_Pos)         /*!< 0x00000080 */
#define BSEC_SFSR7_SFW231             BSEC_SFSR7_SFW231_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW232_Pos         (8U)
#define BSEC_SFSR7_SFW232_Msk         (0x1U << BSEC_SFSR7_SFW232_Pos)         /*!< 0x00000100 */
#define BSEC_SFSR7_SFW232             BSEC_SFSR7_SFW232_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW233_Pos         (9U)
#define BSEC_SFSR7_SFW233_Msk         (0x1U << BSEC_SFSR7_SFW233_Pos)         /*!< 0x00000200 */
#define BSEC_SFSR7_SFW233             BSEC_SFSR7_SFW233_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW234_Pos         (10U)
#define BSEC_SFSR7_SFW234_Msk         (0x1U << BSEC_SFSR7_SFW234_Pos)         /*!< 0x00000400 */
#define BSEC_SFSR7_SFW234             BSEC_SFSR7_SFW234_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW235_Pos         (11U)
#define BSEC_SFSR7_SFW235_Msk         (0x1U << BSEC_SFSR7_SFW235_Pos)         /*!< 0x00000800 */
#define BSEC_SFSR7_SFW235             BSEC_SFSR7_SFW235_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW236_Pos         (12U)
#define BSEC_SFSR7_SFW236_Msk         (0x1U << BSEC_SFSR7_SFW236_Pos)         /*!< 0x00001000 */
#define BSEC_SFSR7_SFW236             BSEC_SFSR7_SFW236_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW237_Pos         (13U)
#define BSEC_SFSR7_SFW237_Msk         (0x1U << BSEC_SFSR7_SFW237_Pos)         /*!< 0x00002000 */
#define BSEC_SFSR7_SFW237             BSEC_SFSR7_SFW237_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW238_Pos         (14U)
#define BSEC_SFSR7_SFW238_Msk         (0x1U << BSEC_SFSR7_SFW238_Pos)         /*!< 0x00004000 */
#define BSEC_SFSR7_SFW238             BSEC_SFSR7_SFW238_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW239_Pos         (15U)
#define BSEC_SFSR7_SFW239_Msk         (0x1U << BSEC_SFSR7_SFW239_Pos)         /*!< 0x00008000 */
#define BSEC_SFSR7_SFW239             BSEC_SFSR7_SFW239_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW240_Pos         (16U)
#define BSEC_SFSR7_SFW240_Msk         (0x1U << BSEC_SFSR7_SFW240_Pos)         /*!< 0x00010000 */
#define BSEC_SFSR7_SFW240             BSEC_SFSR7_SFW240_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW241_Pos         (17U)
#define BSEC_SFSR7_SFW241_Msk         (0x1U << BSEC_SFSR7_SFW241_Pos)         /*!< 0x00020000 */
#define BSEC_SFSR7_SFW241             BSEC_SFSR7_SFW241_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW242_Pos         (18U)
#define BSEC_SFSR7_SFW242_Msk         (0x1U << BSEC_SFSR7_SFW242_Pos)         /*!< 0x00040000 */
#define BSEC_SFSR7_SFW242             BSEC_SFSR7_SFW242_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW243_Pos         (19U)
#define BSEC_SFSR7_SFW243_Msk         (0x1U << BSEC_SFSR7_SFW243_Pos)         /*!< 0x00080000 */
#define BSEC_SFSR7_SFW243             BSEC_SFSR7_SFW243_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW244_Pos         (20U)
#define BSEC_SFSR7_SFW244_Msk         (0x1U << BSEC_SFSR7_SFW244_Pos)         /*!< 0x00100000 */
#define BSEC_SFSR7_SFW244             BSEC_SFSR7_SFW244_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW245_Pos         (21U)
#define BSEC_SFSR7_SFW245_Msk         (0x1U << BSEC_SFSR7_SFW245_Pos)         /*!< 0x00200000 */
#define BSEC_SFSR7_SFW245             BSEC_SFSR7_SFW245_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW246_Pos         (22U)
#define BSEC_SFSR7_SFW246_Msk         (0x1U << BSEC_SFSR7_SFW246_Pos)         /*!< 0x00400000 */
#define BSEC_SFSR7_SFW246             BSEC_SFSR7_SFW246_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW247_Pos         (23U)
#define BSEC_SFSR7_SFW247_Msk         (0x1U << BSEC_SFSR7_SFW247_Pos)         /*!< 0x00800000 */
#define BSEC_SFSR7_SFW247             BSEC_SFSR7_SFW247_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW248_Pos         (24U)
#define BSEC_SFSR7_SFW248_Msk         (0x1U << BSEC_SFSR7_SFW248_Pos)         /*!< 0x01000000 */
#define BSEC_SFSR7_SFW248             BSEC_SFSR7_SFW248_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW249_Pos         (25U)
#define BSEC_SFSR7_SFW249_Msk         (0x1U << BSEC_SFSR7_SFW249_Pos)         /*!< 0x02000000 */
#define BSEC_SFSR7_SFW249             BSEC_SFSR7_SFW249_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW250_Pos         (26U)
#define BSEC_SFSR7_SFW250_Msk         (0x1U << BSEC_SFSR7_SFW250_Pos)         /*!< 0x04000000 */
#define BSEC_SFSR7_SFW250             BSEC_SFSR7_SFW250_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW251_Pos         (27U)
#define BSEC_SFSR7_SFW251_Msk         (0x1U << BSEC_SFSR7_SFW251_Pos)         /*!< 0x08000000 */
#define BSEC_SFSR7_SFW251             BSEC_SFSR7_SFW251_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW252_Pos         (28U)
#define BSEC_SFSR7_SFW252_Msk         (0x1U << BSEC_SFSR7_SFW252_Pos)         /*!< 0x10000000 */
#define BSEC_SFSR7_SFW252             BSEC_SFSR7_SFW252_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW253_Pos         (29U)
#define BSEC_SFSR7_SFW253_Msk         (0x1U << BSEC_SFSR7_SFW253_Pos)         /*!< 0x20000000 */
#define BSEC_SFSR7_SFW253             BSEC_SFSR7_SFW253_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW254_Pos         (30U)
#define BSEC_SFSR7_SFW254_Msk         (0x1U << BSEC_SFSR7_SFW254_Pos)         /*!< 0x40000000 */
#define BSEC_SFSR7_SFW254             BSEC_SFSR7_SFW254_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR7_SFW255_Pos         (31U)
#define BSEC_SFSR7_SFW255_Msk         (0x1U << BSEC_SFSR7_SFW255_Pos)         /*!< 0x80000000 */
#define BSEC_SFSR7_SFW255             BSEC_SFSR7_SFW255_Msk                   /*!< Shadowed fuse word y (y=224 to 255)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR8 register  ******************/
#define BSEC_SFSR8_SFW256_Pos         (0U)
#define BSEC_SFSR8_SFW256_Msk         (0x1U << BSEC_SFSR8_SFW256_Pos)         /*!< 0x00000001 */
#define BSEC_SFSR8_SFW256             BSEC_SFSR8_SFW256_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW257_Pos         (1U)
#define BSEC_SFSR8_SFW257_Msk         (0x1U << BSEC_SFSR8_SFW257_Pos)         /*!< 0x00000002 */
#define BSEC_SFSR8_SFW257             BSEC_SFSR8_SFW257_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW258_Pos         (2U)
#define BSEC_SFSR8_SFW258_Msk         (0x1U << BSEC_SFSR8_SFW258_Pos)         /*!< 0x00000004 */
#define BSEC_SFSR8_SFW258             BSEC_SFSR8_SFW258_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW259_Pos         (3U)
#define BSEC_SFSR8_SFW259_Msk         (0x1U << BSEC_SFSR8_SFW259_Pos)         /*!< 0x00000008 */
#define BSEC_SFSR8_SFW259             BSEC_SFSR8_SFW259_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW260_Pos         (4U)
#define BSEC_SFSR8_SFW260_Msk         (0x1U << BSEC_SFSR8_SFW260_Pos)         /*!< 0x00000010 */
#define BSEC_SFSR8_SFW260             BSEC_SFSR8_SFW260_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW261_Pos         (5U)
#define BSEC_SFSR8_SFW261_Msk         (0x1U << BSEC_SFSR8_SFW261_Pos)         /*!< 0x00000020 */
#define BSEC_SFSR8_SFW261             BSEC_SFSR8_SFW261_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW262_Pos         (6U)
#define BSEC_SFSR8_SFW262_Msk         (0x1U << BSEC_SFSR8_SFW262_Pos)         /*!< 0x00000040 */
#define BSEC_SFSR8_SFW262             BSEC_SFSR8_SFW262_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW263_Pos         (7U)
#define BSEC_SFSR8_SFW263_Msk         (0x1U << BSEC_SFSR8_SFW263_Pos)         /*!< 0x00000080 */
#define BSEC_SFSR8_SFW263             BSEC_SFSR8_SFW263_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW264_Pos         (8U)
#define BSEC_SFSR8_SFW264_Msk         (0x1U << BSEC_SFSR8_SFW264_Pos)         /*!< 0x00000100 */
#define BSEC_SFSR8_SFW264             BSEC_SFSR8_SFW264_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW265_Pos         (9U)
#define BSEC_SFSR8_SFW265_Msk         (0x1U << BSEC_SFSR8_SFW265_Pos)         /*!< 0x00000200 */
#define BSEC_SFSR8_SFW265             BSEC_SFSR8_SFW265_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW266_Pos         (10U)
#define BSEC_SFSR8_SFW266_Msk         (0x1U << BSEC_SFSR8_SFW266_Pos)         /*!< 0x00000400 */
#define BSEC_SFSR8_SFW266             BSEC_SFSR8_SFW266_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW267_Pos         (11U)
#define BSEC_SFSR8_SFW267_Msk         (0x1U << BSEC_SFSR8_SFW267_Pos)         /*!< 0x00000800 */
#define BSEC_SFSR8_SFW267             BSEC_SFSR8_SFW267_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW268_Pos         (12U)
#define BSEC_SFSR8_SFW268_Msk         (0x1U << BSEC_SFSR8_SFW268_Pos)         /*!< 0x00001000 */
#define BSEC_SFSR8_SFW268             BSEC_SFSR8_SFW268_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW269_Pos         (13U)
#define BSEC_SFSR8_SFW269_Msk         (0x1U << BSEC_SFSR8_SFW269_Pos)         /*!< 0x00002000 */
#define BSEC_SFSR8_SFW269             BSEC_SFSR8_SFW269_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW270_Pos         (14U)
#define BSEC_SFSR8_SFW270_Msk         (0x1U << BSEC_SFSR8_SFW270_Pos)         /*!< 0x00004000 */
#define BSEC_SFSR8_SFW270             BSEC_SFSR8_SFW270_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW271_Pos         (15U)
#define BSEC_SFSR8_SFW271_Msk         (0x1U << BSEC_SFSR8_SFW271_Pos)         /*!< 0x00008000 */
#define BSEC_SFSR8_SFW271             BSEC_SFSR8_SFW271_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW272_Pos         (16U)
#define BSEC_SFSR8_SFW272_Msk         (0x1U << BSEC_SFSR8_SFW272_Pos)         /*!< 0x00010000 */
#define BSEC_SFSR8_SFW272             BSEC_SFSR8_SFW272_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW273_Pos         (17U)
#define BSEC_SFSR8_SFW273_Msk         (0x1U << BSEC_SFSR8_SFW273_Pos)         /*!< 0x00020000 */
#define BSEC_SFSR8_SFW273             BSEC_SFSR8_SFW273_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW274_Pos         (18U)
#define BSEC_SFSR8_SFW274_Msk         (0x1U << BSEC_SFSR8_SFW274_Pos)         /*!< 0x00040000 */
#define BSEC_SFSR8_SFW274             BSEC_SFSR8_SFW274_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW275_Pos         (19U)
#define BSEC_SFSR8_SFW275_Msk         (0x1U << BSEC_SFSR8_SFW275_Pos)         /*!< 0x00080000 */
#define BSEC_SFSR8_SFW275             BSEC_SFSR8_SFW275_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW276_Pos         (20U)
#define BSEC_SFSR8_SFW276_Msk         (0x1U << BSEC_SFSR8_SFW276_Pos)         /*!< 0x00100000 */
#define BSEC_SFSR8_SFW276             BSEC_SFSR8_SFW276_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW277_Pos         (21U)
#define BSEC_SFSR8_SFW277_Msk         (0x1U << BSEC_SFSR8_SFW277_Pos)         /*!< 0x00200000 */
#define BSEC_SFSR8_SFW277             BSEC_SFSR8_SFW277_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW278_Pos         (22U)
#define BSEC_SFSR8_SFW278_Msk         (0x1U << BSEC_SFSR8_SFW278_Pos)         /*!< 0x00400000 */
#define BSEC_SFSR8_SFW278             BSEC_SFSR8_SFW278_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW279_Pos         (23U)
#define BSEC_SFSR8_SFW279_Msk         (0x1U << BSEC_SFSR8_SFW279_Pos)         /*!< 0x00800000 */
#define BSEC_SFSR8_SFW279             BSEC_SFSR8_SFW279_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW280_Pos         (24U)
#define BSEC_SFSR8_SFW280_Msk         (0x1U << BSEC_SFSR8_SFW280_Pos)         /*!< 0x01000000 */
#define BSEC_SFSR8_SFW280             BSEC_SFSR8_SFW280_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW281_Pos         (25U)
#define BSEC_SFSR8_SFW281_Msk         (0x1U << BSEC_SFSR8_SFW281_Pos)         /*!< 0x02000000 */
#define BSEC_SFSR8_SFW281             BSEC_SFSR8_SFW281_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW282_Pos         (26U)
#define BSEC_SFSR8_SFW282_Msk         (0x1U << BSEC_SFSR8_SFW282_Pos)         /*!< 0x04000000 */
#define BSEC_SFSR8_SFW282             BSEC_SFSR8_SFW282_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW283_Pos         (27U)
#define BSEC_SFSR8_SFW283_Msk         (0x1U << BSEC_SFSR8_SFW283_Pos)         /*!< 0x08000000 */
#define BSEC_SFSR8_SFW283             BSEC_SFSR8_SFW283_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW284_Pos         (28U)
#define BSEC_SFSR8_SFW284_Msk         (0x1U << BSEC_SFSR8_SFW284_Pos)         /*!< 0x10000000 */
#define BSEC_SFSR8_SFW284             BSEC_SFSR8_SFW284_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW285_Pos         (29U)
#define BSEC_SFSR8_SFW285_Msk         (0x1U << BSEC_SFSR8_SFW285_Pos)         /*!< 0x20000000 */
#define BSEC_SFSR8_SFW285             BSEC_SFSR8_SFW285_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW286_Pos         (30U)
#define BSEC_SFSR8_SFW286_Msk         (0x1U << BSEC_SFSR8_SFW286_Pos)         /*!< 0x40000000 */
#define BSEC_SFSR8_SFW286             BSEC_SFSR8_SFW286_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR8_SFW287_Pos         (31U)
#define BSEC_SFSR8_SFW287_Msk         (0x1U << BSEC_SFSR8_SFW287_Pos)         /*!< 0x80000000 */
#define BSEC_SFSR8_SFW287             BSEC_SFSR8_SFW287_Msk                   /*!< Shadowed fuse word y (y=256 to 287)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_SFSR9 register  ******************/
#define BSEC_SFSR9_SFW288_Pos         (0U)
#define BSEC_SFSR9_SFW288_Msk         (0x1U << BSEC_SFSR9_SFW288_Pos)         /*!< 0x00000001 */
#define BSEC_SFSR9_SFW288             BSEC_SFSR9_SFW288_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW289_Pos         (1U)
#define BSEC_SFSR9_SFW289_Msk         (0x1U << BSEC_SFSR9_SFW289_Pos)         /*!< 0x00000002 */
#define BSEC_SFSR9_SFW289             BSEC_SFSR9_SFW289_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW290_Pos         (2U)
#define BSEC_SFSR9_SFW290_Msk         (0x1U << BSEC_SFSR9_SFW290_Pos)         /*!< 0x00000004 */
#define BSEC_SFSR9_SFW290             BSEC_SFSR9_SFW290_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW291_Pos         (3U)
#define BSEC_SFSR9_SFW291_Msk         (0x1U << BSEC_SFSR9_SFW291_Pos)         /*!< 0x00000008 */
#define BSEC_SFSR9_SFW291             BSEC_SFSR9_SFW291_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW292_Pos         (4U)
#define BSEC_SFSR9_SFW292_Msk         (0x1U << BSEC_SFSR9_SFW292_Pos)         /*!< 0x00000010 */
#define BSEC_SFSR9_SFW292             BSEC_SFSR9_SFW292_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW293_Pos         (5U)
#define BSEC_SFSR9_SFW293_Msk         (0x1U << BSEC_SFSR9_SFW293_Pos)         /*!< 0x00000020 */
#define BSEC_SFSR9_SFW293             BSEC_SFSR9_SFW293_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW294_Pos         (6U)
#define BSEC_SFSR9_SFW294_Msk         (0x1U << BSEC_SFSR9_SFW294_Pos)         /*!< 0x00000040 */
#define BSEC_SFSR9_SFW294             BSEC_SFSR9_SFW294_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW295_Pos         (7U)
#define BSEC_SFSR9_SFW295_Msk         (0x1U << BSEC_SFSR9_SFW295_Pos)         /*!< 0x00000080 */
#define BSEC_SFSR9_SFW295             BSEC_SFSR9_SFW295_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW296_Pos         (8U)
#define BSEC_SFSR9_SFW296_Msk         (0x1U << BSEC_SFSR9_SFW296_Pos)         /*!< 0x00000100 */
#define BSEC_SFSR9_SFW296             BSEC_SFSR9_SFW296_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW297_Pos         (9U)
#define BSEC_SFSR9_SFW297_Msk         (0x1U << BSEC_SFSR9_SFW297_Pos)         /*!< 0x00000200 */
#define BSEC_SFSR9_SFW297             BSEC_SFSR9_SFW297_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW298_Pos         (10U)
#define BSEC_SFSR9_SFW298_Msk         (0x1U << BSEC_SFSR9_SFW298_Pos)         /*!< 0x00000400 */
#define BSEC_SFSR9_SFW298             BSEC_SFSR9_SFW298_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW299_Pos         (11U)
#define BSEC_SFSR9_SFW299_Msk         (0x1U << BSEC_SFSR9_SFW299_Pos)         /*!< 0x00000800 */
#define BSEC_SFSR9_SFW299             BSEC_SFSR9_SFW299_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW300_Pos         (12U)
#define BSEC_SFSR9_SFW300_Msk         (0x1U << BSEC_SFSR9_SFW300_Pos)         /*!< 0x00001000 */
#define BSEC_SFSR9_SFW300             BSEC_SFSR9_SFW300_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW301_Pos         (13U)
#define BSEC_SFSR9_SFW301_Msk         (0x1U << BSEC_SFSR9_SFW301_Pos)         /*!< 0x00002000 */
#define BSEC_SFSR9_SFW301             BSEC_SFSR9_SFW301_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW302_Pos         (14U)
#define BSEC_SFSR9_SFW302_Msk         (0x1U << BSEC_SFSR9_SFW302_Pos)         /*!< 0x00004000 */
#define BSEC_SFSR9_SFW302             BSEC_SFSR9_SFW302_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW303_Pos         (15U)
#define BSEC_SFSR9_SFW303_Msk         (0x1U << BSEC_SFSR9_SFW303_Pos)         /*!< 0x00008000 */
#define BSEC_SFSR9_SFW303             BSEC_SFSR9_SFW303_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW304_Pos         (16U)
#define BSEC_SFSR9_SFW304_Msk         (0x1U << BSEC_SFSR9_SFW304_Pos)         /*!< 0x00010000 */
#define BSEC_SFSR9_SFW304             BSEC_SFSR9_SFW304_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW305_Pos         (17U)
#define BSEC_SFSR9_SFW305_Msk         (0x1U << BSEC_SFSR9_SFW305_Pos)         /*!< 0x00020000 */
#define BSEC_SFSR9_SFW305             BSEC_SFSR9_SFW305_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW306_Pos         (18U)
#define BSEC_SFSR9_SFW306_Msk         (0x1U << BSEC_SFSR9_SFW306_Pos)         /*!< 0x00040000 */
#define BSEC_SFSR9_SFW306             BSEC_SFSR9_SFW306_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW307_Pos         (19U)
#define BSEC_SFSR9_SFW307_Msk         (0x1U << BSEC_SFSR9_SFW307_Pos)         /*!< 0x00080000 */
#define BSEC_SFSR9_SFW307             BSEC_SFSR9_SFW307_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW308_Pos         (20U)
#define BSEC_SFSR9_SFW308_Msk         (0x1U << BSEC_SFSR9_SFW308_Pos)         /*!< 0x00100000 */
#define BSEC_SFSR9_SFW308             BSEC_SFSR9_SFW308_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW309_Pos         (21U)
#define BSEC_SFSR9_SFW309_Msk         (0x1U << BSEC_SFSR9_SFW309_Pos)         /*!< 0x00200000 */
#define BSEC_SFSR9_SFW309             BSEC_SFSR9_SFW309_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW310_Pos         (22U)
#define BSEC_SFSR9_SFW310_Msk         (0x1U << BSEC_SFSR9_SFW310_Pos)         /*!< 0x00400000 */
#define BSEC_SFSR9_SFW310             BSEC_SFSR9_SFW310_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW311_Pos         (23U)
#define BSEC_SFSR9_SFW311_Msk         (0x1U << BSEC_SFSR9_SFW311_Pos)         /*!< 0x00800000 */
#define BSEC_SFSR9_SFW311             BSEC_SFSR9_SFW311_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW312_Pos         (24U)
#define BSEC_SFSR9_SFW312_Msk         (0x1U << BSEC_SFSR9_SFW312_Pos)         /*!< 0x01000000 */
#define BSEC_SFSR9_SFW312             BSEC_SFSR9_SFW312_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW313_Pos         (25U)
#define BSEC_SFSR9_SFW313_Msk         (0x1U << BSEC_SFSR9_SFW313_Pos)         /*!< 0x02000000 */
#define BSEC_SFSR9_SFW313             BSEC_SFSR9_SFW313_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW314_Pos         (26U)
#define BSEC_SFSR9_SFW314_Msk         (0x1U << BSEC_SFSR9_SFW314_Pos)         /*!< 0x04000000 */
#define BSEC_SFSR9_SFW314             BSEC_SFSR9_SFW314_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW315_Pos         (27U)
#define BSEC_SFSR9_SFW315_Msk         (0x1U << BSEC_SFSR9_SFW315_Pos)         /*!< 0x08000000 */
#define BSEC_SFSR9_SFW315             BSEC_SFSR9_SFW315_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW316_Pos         (28U)
#define BSEC_SFSR9_SFW316_Msk         (0x1U << BSEC_SFSR9_SFW316_Pos)         /*!< 0x10000000 */
#define BSEC_SFSR9_SFW316             BSEC_SFSR9_SFW316_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW317_Pos         (29U)
#define BSEC_SFSR9_SFW317_Msk         (0x1U << BSEC_SFSR9_SFW317_Pos)         /*!< 0x20000000 */
#define BSEC_SFSR9_SFW317             BSEC_SFSR9_SFW317_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW318_Pos         (30U)
#define BSEC_SFSR9_SFW318_Msk         (0x1U << BSEC_SFSR9_SFW318_Pos)         /*!< 0x40000000 */
#define BSEC_SFSR9_SFW318             BSEC_SFSR9_SFW318_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR9_SFW319_Pos         (31U)
#define BSEC_SFSR9_SFW319_Msk         (0x1U << BSEC_SFSR9_SFW319_Pos)         /*!< 0x80000000 */
#define BSEC_SFSR9_SFW319             BSEC_SFSR9_SFW319_Msk                   /*!< Shadowed fuse word y (y=288 to 319)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/*****************  Bit definition for BSEC_SFSR10 register  ******************/
#define BSEC_SFSR10_SFW320_Pos        (0U)
#define BSEC_SFSR10_SFW320_Msk        (0x1U << BSEC_SFSR10_SFW320_Pos)        /*!< 0x00000001 */
#define BSEC_SFSR10_SFW320            BSEC_SFSR10_SFW320_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW321_Pos        (1U)
#define BSEC_SFSR10_SFW321_Msk        (0x1U << BSEC_SFSR10_SFW321_Pos)        /*!< 0x00000002 */
#define BSEC_SFSR10_SFW321            BSEC_SFSR10_SFW321_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW322_Pos        (2U)
#define BSEC_SFSR10_SFW322_Msk        (0x1U << BSEC_SFSR10_SFW322_Pos)        /*!< 0x00000004 */
#define BSEC_SFSR10_SFW322            BSEC_SFSR10_SFW322_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW323_Pos        (3U)
#define BSEC_SFSR10_SFW323_Msk        (0x1U << BSEC_SFSR10_SFW323_Pos)        /*!< 0x00000008 */
#define BSEC_SFSR10_SFW323            BSEC_SFSR10_SFW323_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW324_Pos        (4U)
#define BSEC_SFSR10_SFW324_Msk        (0x1U << BSEC_SFSR10_SFW324_Pos)        /*!< 0x00000010 */
#define BSEC_SFSR10_SFW324            BSEC_SFSR10_SFW324_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW325_Pos        (5U)
#define BSEC_SFSR10_SFW325_Msk        (0x1U << BSEC_SFSR10_SFW325_Pos)        /*!< 0x00000020 */
#define BSEC_SFSR10_SFW325            BSEC_SFSR10_SFW325_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW326_Pos        (6U)
#define BSEC_SFSR10_SFW326_Msk        (0x1U << BSEC_SFSR10_SFW326_Pos)        /*!< 0x00000040 */
#define BSEC_SFSR10_SFW326            BSEC_SFSR10_SFW326_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW327_Pos        (7U)
#define BSEC_SFSR10_SFW327_Msk        (0x1U << BSEC_SFSR10_SFW327_Pos)        /*!< 0x00000080 */
#define BSEC_SFSR10_SFW327            BSEC_SFSR10_SFW327_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW328_Pos        (8U)
#define BSEC_SFSR10_SFW328_Msk        (0x1U << BSEC_SFSR10_SFW328_Pos)        /*!< 0x00000100 */
#define BSEC_SFSR10_SFW328            BSEC_SFSR10_SFW328_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW329_Pos        (9U)
#define BSEC_SFSR10_SFW329_Msk        (0x1U << BSEC_SFSR10_SFW329_Pos)        /*!< 0x00000200 */
#define BSEC_SFSR10_SFW329            BSEC_SFSR10_SFW329_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW330_Pos        (10U)
#define BSEC_SFSR10_SFW330_Msk        (0x1U << BSEC_SFSR10_SFW330_Pos)        /*!< 0x00000400 */
#define BSEC_SFSR10_SFW330            BSEC_SFSR10_SFW330_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW331_Pos        (11U)
#define BSEC_SFSR10_SFW331_Msk        (0x1U << BSEC_SFSR10_SFW331_Pos)        /*!< 0x00000800 */
#define BSEC_SFSR10_SFW331            BSEC_SFSR10_SFW331_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW332_Pos        (12U)
#define BSEC_SFSR10_SFW332_Msk        (0x1U << BSEC_SFSR10_SFW332_Pos)        /*!< 0x00001000 */
#define BSEC_SFSR10_SFW332            BSEC_SFSR10_SFW332_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW333_Pos        (13U)
#define BSEC_SFSR10_SFW333_Msk        (0x1U << BSEC_SFSR10_SFW333_Pos)        /*!< 0x00002000 */
#define BSEC_SFSR10_SFW333            BSEC_SFSR10_SFW333_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW334_Pos        (14U)
#define BSEC_SFSR10_SFW334_Msk        (0x1U << BSEC_SFSR10_SFW334_Pos)        /*!< 0x00004000 */
#define BSEC_SFSR10_SFW334            BSEC_SFSR10_SFW334_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW335_Pos        (15U)
#define BSEC_SFSR10_SFW335_Msk        (0x1U << BSEC_SFSR10_SFW335_Pos)        /*!< 0x00008000 */
#define BSEC_SFSR10_SFW335            BSEC_SFSR10_SFW335_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW336_Pos        (16U)
#define BSEC_SFSR10_SFW336_Msk        (0x1U << BSEC_SFSR10_SFW336_Pos)        /*!< 0x00010000 */
#define BSEC_SFSR10_SFW336            BSEC_SFSR10_SFW336_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW337_Pos        (17U)
#define BSEC_SFSR10_SFW337_Msk        (0x1U << BSEC_SFSR10_SFW337_Pos)        /*!< 0x00020000 */
#define BSEC_SFSR10_SFW337            BSEC_SFSR10_SFW337_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW338_Pos        (18U)
#define BSEC_SFSR10_SFW338_Msk        (0x1U << BSEC_SFSR10_SFW338_Pos)        /*!< 0x00040000 */
#define BSEC_SFSR10_SFW338            BSEC_SFSR10_SFW338_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW339_Pos        (19U)
#define BSEC_SFSR10_SFW339_Msk        (0x1U << BSEC_SFSR10_SFW339_Pos)        /*!< 0x00080000 */
#define BSEC_SFSR10_SFW339            BSEC_SFSR10_SFW339_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW340_Pos        (20U)
#define BSEC_SFSR10_SFW340_Msk        (0x1U << BSEC_SFSR10_SFW340_Pos)        /*!< 0x00100000 */
#define BSEC_SFSR10_SFW340            BSEC_SFSR10_SFW340_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW341_Pos        (21U)
#define BSEC_SFSR10_SFW341_Msk        (0x1U << BSEC_SFSR10_SFW341_Pos)        /*!< 0x00200000 */
#define BSEC_SFSR10_SFW341            BSEC_SFSR10_SFW341_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW342_Pos        (22U)
#define BSEC_SFSR10_SFW342_Msk        (0x1U << BSEC_SFSR10_SFW342_Pos)        /*!< 0x00400000 */
#define BSEC_SFSR10_SFW342            BSEC_SFSR10_SFW342_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW343_Pos        (23U)
#define BSEC_SFSR10_SFW343_Msk        (0x1U << BSEC_SFSR10_SFW343_Pos)        /*!< 0x00800000 */
#define BSEC_SFSR10_SFW343            BSEC_SFSR10_SFW343_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW344_Pos        (24U)
#define BSEC_SFSR10_SFW344_Msk        (0x1U << BSEC_SFSR10_SFW344_Pos)        /*!< 0x01000000 */
#define BSEC_SFSR10_SFW344            BSEC_SFSR10_SFW344_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW345_Pos        (25U)
#define BSEC_SFSR10_SFW345_Msk        (0x1U << BSEC_SFSR10_SFW345_Pos)        /*!< 0x02000000 */
#define BSEC_SFSR10_SFW345            BSEC_SFSR10_SFW345_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW346_Pos        (26U)
#define BSEC_SFSR10_SFW346_Msk        (0x1U << BSEC_SFSR10_SFW346_Pos)        /*!< 0x04000000 */
#define BSEC_SFSR10_SFW346            BSEC_SFSR10_SFW346_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW347_Pos        (27U)
#define BSEC_SFSR10_SFW347_Msk        (0x1U << BSEC_SFSR10_SFW347_Pos)        /*!< 0x08000000 */
#define BSEC_SFSR10_SFW347            BSEC_SFSR10_SFW347_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW348_Pos        (28U)
#define BSEC_SFSR10_SFW348_Msk        (0x1U << BSEC_SFSR10_SFW348_Pos)        /*!< 0x10000000 */
#define BSEC_SFSR10_SFW348            BSEC_SFSR10_SFW348_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW349_Pos        (29U)
#define BSEC_SFSR10_SFW349_Msk        (0x1U << BSEC_SFSR10_SFW349_Pos)        /*!< 0x20000000 */
#define BSEC_SFSR10_SFW349            BSEC_SFSR10_SFW349_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW350_Pos        (30U)
#define BSEC_SFSR10_SFW350_Msk        (0x1U << BSEC_SFSR10_SFW350_Pos)        /*!< 0x40000000 */
#define BSEC_SFSR10_SFW350            BSEC_SFSR10_SFW350_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR10_SFW351_Pos        (31U)
#define BSEC_SFSR10_SFW351_Msk        (0x1U << BSEC_SFSR10_SFW351_Pos)        /*!< 0x80000000 */
#define BSEC_SFSR10_SFW351            BSEC_SFSR10_SFW351_Msk                  /*!< Shadowed fuse word y (y=320 to 351)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/*****************  Bit definition for BSEC_SFSR11 register  ******************/
#define BSEC_SFSR11_SFW352_Pos        (0U)
#define BSEC_SFSR11_SFW352_Msk        (0x1U << BSEC_SFSR11_SFW352_Pos)        /*!< 0x00000001 */
#define BSEC_SFSR11_SFW352            BSEC_SFSR11_SFW352_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW353_Pos        (1U)
#define BSEC_SFSR11_SFW353_Msk        (0x1U << BSEC_SFSR11_SFW353_Pos)        /*!< 0x00000002 */
#define BSEC_SFSR11_SFW353            BSEC_SFSR11_SFW353_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW354_Pos        (2U)
#define BSEC_SFSR11_SFW354_Msk        (0x1U << BSEC_SFSR11_SFW354_Pos)        /*!< 0x00000004 */
#define BSEC_SFSR11_SFW354            BSEC_SFSR11_SFW354_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW355_Pos        (3U)
#define BSEC_SFSR11_SFW355_Msk        (0x1U << BSEC_SFSR11_SFW355_Pos)        /*!< 0x00000008 */
#define BSEC_SFSR11_SFW355            BSEC_SFSR11_SFW355_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW356_Pos        (4U)
#define BSEC_SFSR11_SFW356_Msk        (0x1U << BSEC_SFSR11_SFW356_Pos)        /*!< 0x00000010 */
#define BSEC_SFSR11_SFW356            BSEC_SFSR11_SFW356_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW357_Pos        (5U)
#define BSEC_SFSR11_SFW357_Msk        (0x1U << BSEC_SFSR11_SFW357_Pos)        /*!< 0x00000020 */
#define BSEC_SFSR11_SFW357            BSEC_SFSR11_SFW357_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW358_Pos        (6U)
#define BSEC_SFSR11_SFW358_Msk        (0x1U << BSEC_SFSR11_SFW358_Pos)        /*!< 0x00000040 */
#define BSEC_SFSR11_SFW358            BSEC_SFSR11_SFW358_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW359_Pos        (7U)
#define BSEC_SFSR11_SFW359_Msk        (0x1U << BSEC_SFSR11_SFW359_Pos)        /*!< 0x00000080 */
#define BSEC_SFSR11_SFW359            BSEC_SFSR11_SFW359_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW360_Pos        (8U)
#define BSEC_SFSR11_SFW360_Msk        (0x1U << BSEC_SFSR11_SFW360_Pos)        /*!< 0x00000100 */
#define BSEC_SFSR11_SFW360            BSEC_SFSR11_SFW360_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW361_Pos        (9U)
#define BSEC_SFSR11_SFW361_Msk        (0x1U << BSEC_SFSR11_SFW361_Pos)        /*!< 0x00000200 */
#define BSEC_SFSR11_SFW361            BSEC_SFSR11_SFW361_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW362_Pos        (10U)
#define BSEC_SFSR11_SFW362_Msk        (0x1U << BSEC_SFSR11_SFW362_Pos)        /*!< 0x00000400 */
#define BSEC_SFSR11_SFW362            BSEC_SFSR11_SFW362_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW363_Pos        (11U)
#define BSEC_SFSR11_SFW363_Msk        (0x1U << BSEC_SFSR11_SFW363_Pos)        /*!< 0x00000800 */
#define BSEC_SFSR11_SFW363            BSEC_SFSR11_SFW363_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW364_Pos        (12U)
#define BSEC_SFSR11_SFW364_Msk        (0x1U << BSEC_SFSR11_SFW364_Pos)        /*!< 0x00001000 */
#define BSEC_SFSR11_SFW364            BSEC_SFSR11_SFW364_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW365_Pos        (13U)
#define BSEC_SFSR11_SFW365_Msk        (0x1U << BSEC_SFSR11_SFW365_Pos)        /*!< 0x00002000 */
#define BSEC_SFSR11_SFW365            BSEC_SFSR11_SFW365_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW366_Pos        (14U)
#define BSEC_SFSR11_SFW366_Msk        (0x1U << BSEC_SFSR11_SFW366_Pos)        /*!< 0x00004000 */
#define BSEC_SFSR11_SFW366            BSEC_SFSR11_SFW366_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW367_Pos        (15U)
#define BSEC_SFSR11_SFW367_Msk        (0x1U << BSEC_SFSR11_SFW367_Pos)        /*!< 0x00008000 */
#define BSEC_SFSR11_SFW367            BSEC_SFSR11_SFW367_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW368_Pos        (16U)
#define BSEC_SFSR11_SFW368_Msk        (0x1U << BSEC_SFSR11_SFW368_Pos)        /*!< 0x00010000 */
#define BSEC_SFSR11_SFW368            BSEC_SFSR11_SFW368_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW369_Pos        (17U)
#define BSEC_SFSR11_SFW369_Msk        (0x1U << BSEC_SFSR11_SFW369_Pos)        /*!< 0x00020000 */
#define BSEC_SFSR11_SFW369            BSEC_SFSR11_SFW369_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW370_Pos        (18U)
#define BSEC_SFSR11_SFW370_Msk        (0x1U << BSEC_SFSR11_SFW370_Pos)        /*!< 0x00040000 */
#define BSEC_SFSR11_SFW370            BSEC_SFSR11_SFW370_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW371_Pos        (19U)
#define BSEC_SFSR11_SFW371_Msk        (0x1U << BSEC_SFSR11_SFW371_Pos)        /*!< 0x00080000 */
#define BSEC_SFSR11_SFW371            BSEC_SFSR11_SFW371_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW372_Pos        (20U)
#define BSEC_SFSR11_SFW372_Msk        (0x1U << BSEC_SFSR11_SFW372_Pos)        /*!< 0x00100000 */
#define BSEC_SFSR11_SFW372            BSEC_SFSR11_SFW372_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW373_Pos        (21U)
#define BSEC_SFSR11_SFW373_Msk        (0x1U << BSEC_SFSR11_SFW373_Pos)        /*!< 0x00200000 */
#define BSEC_SFSR11_SFW373            BSEC_SFSR11_SFW373_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW374_Pos        (22U)
#define BSEC_SFSR11_SFW374_Msk        (0x1U << BSEC_SFSR11_SFW374_Pos)        /*!< 0x00400000 */
#define BSEC_SFSR11_SFW374            BSEC_SFSR11_SFW374_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW375_Pos        (23U)
#define BSEC_SFSR11_SFW375_Msk        (0x1U << BSEC_SFSR11_SFW375_Pos)        /*!< 0x00800000 */
#define BSEC_SFSR11_SFW375            BSEC_SFSR11_SFW375_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW376_Pos        (24U)
#define BSEC_SFSR11_SFW376_Msk        (0x1U << BSEC_SFSR11_SFW376_Pos)        /*!< 0x01000000 */
#define BSEC_SFSR11_SFW376            BSEC_SFSR11_SFW376_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW377_Pos        (25U)
#define BSEC_SFSR11_SFW377_Msk        (0x1U << BSEC_SFSR11_SFW377_Pos)        /*!< 0x02000000 */
#define BSEC_SFSR11_SFW377            BSEC_SFSR11_SFW377_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW378_Pos        (26U)
#define BSEC_SFSR11_SFW378_Msk        (0x1U << BSEC_SFSR11_SFW378_Pos)        /*!< 0x04000000 */
#define BSEC_SFSR11_SFW378            BSEC_SFSR11_SFW378_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW379_Pos        (27U)
#define BSEC_SFSR11_SFW379_Msk        (0x1U << BSEC_SFSR11_SFW379_Pos)        /*!< 0x08000000 */
#define BSEC_SFSR11_SFW379            BSEC_SFSR11_SFW379_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW380_Pos        (28U)
#define BSEC_SFSR11_SFW380_Msk        (0x1U << BSEC_SFSR11_SFW380_Pos)        /*!< 0x10000000 */
#define BSEC_SFSR11_SFW380            BSEC_SFSR11_SFW380_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW381_Pos        (29U)
#define BSEC_SFSR11_SFW381_Msk        (0x1U << BSEC_SFSR11_SFW381_Pos)        /*!< 0x20000000 */
#define BSEC_SFSR11_SFW381            BSEC_SFSR11_SFW381_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW382_Pos        (30U)
#define BSEC_SFSR11_SFW382_Msk        (0x1U << BSEC_SFSR11_SFW382_Pos)        /*!< 0x40000000 */
#define BSEC_SFSR11_SFW382            BSEC_SFSR11_SFW382_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */
#define BSEC_SFSR11_SFW383_Pos        (31U)
#define BSEC_SFSR11_SFW383_Msk        (0x1U << BSEC_SFSR11_SFW383_Pos)        /*!< 0x80000000 */
#define BSEC_SFSR11_SFW383            BSEC_SFSR11_SFW383_Msk                  /*!< Shadowed fuse word y (y=352 to 383)Boot CPU access if allowed (cf fusemap), in temporal isolation level 0 and 1 only.See BSEC_SFSR0 for details. */

/******************  Bit definition for BSEC_OTPCR register  ******************/
#define BSEC_OTPCR_ADDR_Pos           (0U)
#define BSEC_OTPCR_ADDR_Msk           (0x1FFU << BSEC_OTPCR_ADDR_Pos)         /*!< 0x000001FF */
#define BSEC_OTPCR_ADDR               BSEC_OTPCR_ADDR_Msk                     /*!< Fuse word address */
#define BSEC_OTPCR_PROG_Pos           (13U)
#define BSEC_OTPCR_PROG_Msk           (0x1U << BSEC_OTPCR_PROG_Pos)           /*!< 0x00002000 */
#define BSEC_OTPCR_PROG               BSEC_OTPCR_PROG_Msk                     /*!< Fuse word programming */
#define BSEC_OTPCR_PPLOCK_Pos         (14U)
#define BSEC_OTPCR_PPLOCK_Msk         (0x1U << BSEC_OTPCR_PPLOCK_Pos)         /*!< 0x00004000 */
#define BSEC_OTPCR_PPLOCK             BSEC_OTPCR_PPLOCK_Msk                   /*!< Permanent programming lock */
#define BSEC_OTPCR_LASTCID_Pos        (19U)
#define BSEC_OTPCR_LASTCID_Msk        (0x7U << BSEC_OTPCR_LASTCID_Pos)        /*!< 0x00380000 */
#define BSEC_OTPCR_LASTCID            BSEC_OTPCR_LASTCID_Msk                  /*!< Last CID */

/*******************  Bit definition for BSEC_WDR register  *******************/
#define BSEC_WDR_WRDATA_Pos           (0U)
#define BSEC_WDR_WRDATA_Msk           (0xFFFFFFFFU << BSEC_WDR_WRDATA_Pos)    /*!< 0xFFFFFFFF */
#define BSEC_WDR_WRDATA               BSEC_WDR_WRDATA_Msk                     /*!< OTP write data */

/*****************  Bit definition for BSEC_SRDATAR register  *****************/
#define BSEC_SRDATAR_SRDATA_Pos       (0U)
#define BSEC_SRDATAR_SRDATA_Msk       (0xFFFFFFFFU << BSEC_SRDATAR_SRDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_SRDATAR_SRDATA           BSEC_SRDATAR_SRDATA_Msk                 /*!< Supplementary read data */

/****************  Bit definition for BSEC_SCRATCHR0 register  ****************/
#define BSEC_SCRATCHR0_SDATA_Pos      (0U)
#define BSEC_SCRATCHR0_SDATA_Msk      (0xFFFFFFFFU << BSEC_SCRATCHR0_SDATA_Pos) /*!< 0xFFFFFFFF */
#define BSEC_SCRATCHR0_SDATA          BSEC_SCRATCHR0_SDATA_Msk                /*!< Scratch data */

/****************  Bit definition for BSEC_SCRATCHR1 register  ****************/
#define BSEC_SCRATCHR1_SDATA_Pos      (0U)
#define BSEC_SCRATCHR1_SDATA_Msk      (0xFFFFFFFFU << BSEC_SCRATCHR1_SDATA_Pos) /*!< 0xFFFFFFFF */
#define BSEC_SCRATCHR1_SDATA          BSEC_SCRATCHR1_SDATA_Msk                /*!< Scratch data */

/****************  Bit definition for BSEC_SCRATCHR2 register  ****************/
#define BSEC_SCRATCHR2_SDATA_Pos      (0U)
#define BSEC_SCRATCHR2_SDATA_Msk      (0xFFFFFFFFU << BSEC_SCRATCHR2_SDATA_Pos) /*!< 0xFFFFFFFF */
#define BSEC_SCRATCHR2_SDATA          BSEC_SCRATCHR2_SDATA_Msk                /*!< Scratch data */

/****************  Bit definition for BSEC_SCRATCHR3 register  ****************/
#define BSEC_SCRATCHR3_SDATA_Pos      (0U)
#define BSEC_SCRATCHR3_SDATA_Msk      (0xFFFFFFFFU << BSEC_SCRATCHR3_SDATA_Pos) /*!< 0xFFFFFFFF */
#define BSEC_SCRATCHR3_SDATA          BSEC_SCRATCHR3_SDATA_Msk                /*!< Scratch data */

/******************  Bit definition for BSEC_LOCKR register  ******************/
#define BSEC_LOCKR_GWLOCK_Pos         (0U)
#define BSEC_LOCKR_GWLOCK_Msk         (0x1U << BSEC_LOCKR_GWLOCK_Pos)         /*!< 0x00000001 */
#define BSEC_LOCKR_GWLOCK             BSEC_LOCKR_GWLOCK_Msk                   /*!< Global write lock */
#define BSEC_LOCKR_DENLOCK_Pos        (1U)
#define BSEC_LOCKR_DENLOCK_Msk        (0x1U << BSEC_LOCKR_DENLOCK_Pos)        /*!< 0x00000002 */
#define BSEC_LOCKR_DENLOCK            BSEC_LOCKR_DENLOCK_Msk                  /*!< Debug enable register sticky lock */
#define BSEC_LOCKR_HKLOCK_Pos         (2U)
#define BSEC_LOCKR_HKLOCK_Msk         (0x1U << BSEC_LOCKR_HKLOCK_Pos)         /*!< 0x00000004 */
#define BSEC_LOCKR_HKLOCK             BSEC_LOCKR_HKLOCK_Msk                   /*!< Hardware key lock */

/*****************  Bit definition for BSEC_JTAGINR register  *****************/
#define BSEC_JTAGINR_JDATAIN_Pos      (0U)
#define BSEC_JTAGINR_JDATAIN_Msk      (0xFFFFFFFFU << BSEC_JTAGINR_JDATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_JTAGINR_JDATAIN          BSEC_JTAGINR_JDATAIN_Msk                /*!< JTAG input data */

/****************  Bit definition for BSEC_JTAGOUTR register  *****************/
#define BSEC_JTAGOUTR_JDATAOUT_Pos    (0U)
#define BSEC_JTAGOUTR_JDATAOUT_Msk    (0xFFFFFFFFU << BSEC_JTAGOUTR_JDATAOUT_Pos)   /*!< 0xFFFFFFFF */
#define BSEC_JTAGOUTR_JDATAOUT        BSEC_JTAGOUTR_JDATAOUT_Msk              /*!< JTAG output data */

/******************  Bit definition for BSEC_DENR register  *******************/
#define BSEC_DENR_LPDBGEN_Pos         (0U)
#define BSEC_DENR_LPDBGEN_Msk         (0x1U << BSEC_DENR_LPDBGEN_Pos)         /*!< 0x00000001 */
#define BSEC_DENR_LPDBGEN             BSEC_DENR_LPDBGEN_Msk                   /*!< Low power debug enable */
#define BSEC_DENR_DBGENA_Pos          (1U)
#define BSEC_DENR_DBGENA_Msk          (0x1U << BSEC_DENR_DBGENA_Pos)          /*!< 0x00000002 */
#define BSEC_DENR_DBGENA              BSEC_DENR_DBGENA_Msk                    /*!< Debug enable for Cortex A */
#define BSEC_DENR_NIDENA_Pos          (2U)
#define BSEC_DENR_NIDENA_Msk          (0x1U << BSEC_DENR_NIDENA_Pos)          /*!< 0x00000004 */
#define BSEC_DENR_NIDENA              BSEC_DENR_NIDENA_Msk                    /*!< Non invasive debug enable for Cortex A */
#define BSEC_DENR_DEVICEEN_Pos        (3U)
#define BSEC_DENR_DEVICEEN_Msk        (0x1U << BSEC_DENR_DEVICEEN_Pos)        /*!< 0x00000008 */
#define BSEC_DENR_DEVICEEN            BSEC_DENR_DEVICEEN_Msk                  /*!< Device debug enable */
#define BSEC_DENR_HDPEN_Pos           (4U)
#define BSEC_DENR_HDPEN_Msk           (0x1U << BSEC_DENR_HDPEN_Pos)           /*!< 0x00000010 */
#define BSEC_DENR_HDPEN               BSEC_DENR_HDPEN_Msk                     /*!< Hardware debug port enable */
#define BSEC_DENR_SPIDENA_Pos         (5U)
#define BSEC_DENR_SPIDENA_Msk         (0x1U << BSEC_DENR_SPIDENA_Pos)         /*!< 0x00000020 */
#define BSEC_DENR_SPIDENA             BSEC_DENR_SPIDENA_Msk                   /*!< Secure privilege invasive debug enable for Cortex A */
#define BSEC_DENR_SPNIDENA_Pos        (6U)
#define BSEC_DENR_SPNIDENA_Msk        (0x1U << BSEC_DENR_SPNIDENA_Pos)        /*!< 0x00000040 */
#define BSEC_DENR_SPNIDENA            BSEC_DENR_SPNIDENA_Msk                  /*!< Secure privilege non-invasive debug enable for Cortex A */
#define BSEC_DENR_DBGSWEN_Pos         (7U)
#define BSEC_DENR_DBGSWEN_Msk         (0x1U << BSEC_DENR_DBGSWEN_Pos)         /*!< 0x00000080 */
#define BSEC_DENR_DBGSWEN             BSEC_DENR_DBGSWEN_Msk                   /*!< Self-hosted debug enable */
#define BSEC_DENR_DBGENM_Pos          (8U)
#define BSEC_DENR_DBGENM_Msk          (0x1U << BSEC_DENR_DBGENM_Pos)          /*!< 0x00000100 */
#define BSEC_DENR_DBGENM              BSEC_DENR_DBGENM_Msk                    /*!< Debug enable for Cortex M */
#define BSEC_DENR_NIDENM_Pos          (9U)
#define BSEC_DENR_NIDENM_Msk          (0x1U << BSEC_DENR_NIDENM_Pos)          /*!< 0x00000200 */
#define BSEC_DENR_NIDENM              BSEC_DENR_NIDENM_Msk                    /*!< Non invasive debug enable for Cortex M */
#define BSEC_DENR_SPIDENM_Pos         (10U)
#define BSEC_DENR_SPIDENM_Msk         (0x1U << BSEC_DENR_SPIDENM_Pos)         /*!< 0x00000400 */
#define BSEC_DENR_SPIDENM             BSEC_DENR_SPIDENM_Msk                   /*!< Secure privilege invasive debug enable for Cortex M */
#define BSEC_DENR_SPNIDENM_Pos        (11U)
#define BSEC_DENR_SPNIDENM_Msk        (0x1U << BSEC_DENR_SPNIDENM_Pos)        /*!< 0x00000800 */
#define BSEC_DENR_SPNIDENM            BSEC_DENR_SPNIDENM_Msk                  /*!< Secure privilege non-invasive debug enable for Cortex M */
#define BSEC_DENR_CFGSDIS_Pos         (12U)
#define BSEC_DENR_CFGSDIS_Msk         (0x1U << BSEC_DENR_CFGSDIS_Pos)         /*!< 0x00001000 */
#define BSEC_DENR_CFGSDIS             BSEC_DENR_CFGSDIS_Msk                   /*!< CFGSDISABLE */
#define BSEC_DENR_CP15SDIS_Pos        (13U)
#define BSEC_DENR_CP15SDIS_Msk        (0x3U << BSEC_DENR_CP15SDIS_Pos)        /*!< 0x00006000 */
#define BSEC_DENR_CP15SDIS            BSEC_DENR_CP15SDIS_Msk                  /*!< CP15SDISABLE for core x (x=0 or 1) */
#define BSEC_DENR_LPDBGDIS_Pos        (15U)
#define BSEC_DENR_LPDBGDIS_Msk        (0x1U << BSEC_DENR_LPDBGDIS_Pos)        /*!< 0x00008000 */
#define BSEC_DENR_LPDBGDIS            BSEC_DENR_LPDBGDIS_Msk                  /*!< Low power debug disable */

/*****************  Bit definition for BSEC_UNMAPR register  ******************/
#define BSEC_UNMAPR_UNMAP_Pos         (0U)
#define BSEC_UNMAPR_UNMAP_Msk         (0xFFFFFFFFU << BSEC_UNMAPR_UNMAP_Pos)  /*!< 0xFFFFFFFF */
#define BSEC_UNMAPR_UNMAP             BSEC_UNMAPR_UNMAP_Msk                   /*!< unmap key */

/*******************  Bit definition for BSEC_SR register  ********************/
#define BSEC_SR_BUSY_Pos              (0U)
#define BSEC_SR_BUSY_Msk              (0x1U << BSEC_SR_BUSY_Pos)              /*!< 0x00000001 */
#define BSEC_SR_BUSY                  BSEC_SR_BUSY_Msk                        /*!< Busy flag */
#define BSEC_SR_HVALID_Pos            (1U)
#define BSEC_SR_HVALID_Msk            (0x1U << BSEC_SR_HVALID_Pos)            /*!< 0x00000002 */
#define BSEC_SR_HVALID                BSEC_SR_HVALID_Msk                      /*!< Hardware key valid */
#define BSEC_SR_RNGERR_Pos            (2U)
#define BSEC_SR_RNGERR_Msk            (0x1U << BSEC_SR_RNGERR_Pos)            /*!< 0x00000004 */
#define BSEC_SR_RNGERR                BSEC_SR_RNGERR_Msk                      /*!< RNG error */
#define BSEC_SR_HKWW_Pos              (8U)
#define BSEC_SR_HKWW_Msk              (0xFFU << BSEC_SR_HKWW_Pos)             /*!< 0x0000FF00 */
#define BSEC_SR_HKWW                  BSEC_SR_HKWW_Msk                        /*!< HWKEY word written */
#define BSEC_SR_NVSTATE_Pos           (26U)
#define BSEC_SR_NVSTATE_Msk           (0x3FU << BSEC_SR_NVSTATE_Pos)          /*!< 0xFC000000 */
#define BSEC_SR_NVSTATE               BSEC_SR_NVSTATE_Msk                     /*!< Non-volatile state */

/******************  Bit definition for BSEC_OTPSR register  ******************/
#define BSEC_OTPSR_BUSY_Pos           (0U)
#define BSEC_OTPSR_BUSY_Msk           (0x1U << BSEC_OTPSR_BUSY_Pos)           /*!< 0x00000001 */
#define BSEC_OTPSR_BUSY               BSEC_OTPSR_BUSY_Msk                     /*!< Busy flag */
#define BSEC_OTPSR_FUSEOK_Pos         (1U)
#define BSEC_OTPSR_FUSEOK_Msk         (0x1U << BSEC_OTPSR_FUSEOK_Pos)         /*!< 0x00000002 */
#define BSEC_OTPSR_FUSEOK             BSEC_OTPSR_FUSEOK_Msk                   /*!< Fuses OK */
#define BSEC_OTPSR_HIDEUP_Pos         (2U)
#define BSEC_OTPSR_HIDEUP_Msk         (0x1U << BSEC_OTPSR_HIDEUP_Pos)         /*!< 0x00000004 */
#define BSEC_OTPSR_HIDEUP             BSEC_OTPSR_HIDEUP_Msk                   /*!< Hide upper fuse words */
#define BSEC_OTPSR_OTPNVIR_Pos        (4U)
#define BSEC_OTPSR_OTPNVIR_Msk        (0x1U << BSEC_OTPSR_OTPNVIR_Pos)        /*!< 0x00000010 */
#define BSEC_OTPSR_OTPNVIR            BSEC_OTPSR_OTPNVIR_Msk                  /*!< OTP not virgin */
#define BSEC_OTPSR_OTPERR_Pos         (5U)
#define BSEC_OTPSR_OTPERR_Msk         (0x1U << BSEC_OTPSR_OTPERR_Pos)         /*!< 0x00000020 */
#define BSEC_OTPSR_OTPERR             BSEC_OTPSR_OTPERR_Msk                   /*!< OTP with error */
#define BSEC_OTPSR_OTPSEC_Pos         (6U)
#define BSEC_OTPSR_OTPSEC_Msk         (0x1U << BSEC_OTPSR_OTPSEC_Pos)         /*!< 0x00000040 */
#define BSEC_OTPSR_OTPSEC             BSEC_OTPSR_OTPSEC_Msk                   /*!< OTP with single error correction */
#define BSEC_OTPSR_PROGFAIL_Pos       (16U)
#define BSEC_OTPSR_PROGFAIL_Msk       (0x1U << BSEC_OTPSR_PROGFAIL_Pos)       /*!< 0x00010000 */
#define BSEC_OTPSR_PROGFAIL           BSEC_OTPSR_PROGFAIL_Msk                 /*!< Programming failed */
#define BSEC_OTPSR_DISTURBF_Pos       (17U)
#define BSEC_OTPSR_DISTURBF_Msk       (0x1U << BSEC_OTPSR_DISTURBF_Pos)       /*!< 0x00020000 */
#define BSEC_OTPSR_DISTURBF           BSEC_OTPSR_DISTURBF_Msk                 /*!< Disturb flag */
#define BSEC_OTPSR_DEDF_Pos           (18U)
#define BSEC_OTPSR_DEDF_Msk           (0x1U << BSEC_OTPSR_DEDF_Pos)           /*!< 0x00040000 */
#define BSEC_OTPSR_DEDF               BSEC_OTPSR_DEDF_Msk                     /*!< Double error detection flag */
#define BSEC_OTPSR_SECF_Pos           (19U)
#define BSEC_OTPSR_SECF_Msk           (0x1U << BSEC_OTPSR_SECF_Pos)           /*!< 0x00080000 */
#define BSEC_OTPSR_SECF               BSEC_OTPSR_SECF_Msk                     /*!< Single error correction flag */
#define BSEC_OTPSR_PPLF_Pos           (20U)
#define BSEC_OTPSR_PPLF_Msk           (0x1U << BSEC_OTPSR_PPLF_Pos)           /*!< 0x00100000 */
#define BSEC_OTPSR_PPLF               BSEC_OTPSR_PPLF_Msk                     /*!< Permanent programming lock flag */
#define BSEC_OTPSR_PPLMF_Pos          (21U)
#define BSEC_OTPSR_PPLMF_Msk          (0x1U << BSEC_OTPSR_PPLMF_Pos)          /*!< 0x00200000 */
#define BSEC_OTPSR_PPLMF              BSEC_OTPSR_PPLMF_Msk                    /*!< Permanent programming lock mismatch flag */
#define BSEC_OTPSR_AMEF_Pos           (22U)
#define BSEC_OTPSR_AMEF_Msk           (0x1U << BSEC_OTPSR_AMEF_Pos)           /*!< 0x00400000 */
#define BSEC_OTPSR_AMEF               BSEC_OTPSR_AMEF_Msk                     /*!< Addresses mismatch error flag (**WLROMOUT**) */

/****************  Bit definition for BSEC_ENCKEYR0 register  *****************/
#define BSEC_ENCKEYR0_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR0_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR0_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR0_DATAIN          BSEC_ENCKEYR0_DATAIN_Msk                /*!< Data input */

/****************  Bit definition for BSEC_ENCKEYR1 register  *****************/
#define BSEC_ENCKEYR1_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR1_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR1_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR1_DATAIN          BSEC_ENCKEYR1_DATAIN_Msk                /*!< Data input */

/****************  Bit definition for BSEC_ENCKEYR2 register  *****************/
#define BSEC_ENCKEYR2_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR2_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR2_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR2_DATAIN          BSEC_ENCKEYR2_DATAIN_Msk                /*!< Data input */

/****************  Bit definition for BSEC_ENCKEYR3 register  *****************/
#define BSEC_ENCKEYR3_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR3_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR3_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR3_DATAIN          BSEC_ENCKEYR3_DATAIN_Msk                /*!< Data input */

/****************  Bit definition for BSEC_ENCKEYR4 register  *****************/
#define BSEC_ENCKEYR4_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR4_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR4_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR4_DATAIN          BSEC_ENCKEYR4_DATAIN_Msk                /*!< Data input */

/****************  Bit definition for BSEC_ENCKEYR5 register  *****************/
#define BSEC_ENCKEYR5_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR5_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR5_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR5_DATAIN          BSEC_ENCKEYR5_DATAIN_Msk                /*!< Data input */

/****************  Bit definition for BSEC_ENCKEYR6 register  *****************/
#define BSEC_ENCKEYR6_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR6_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR6_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR6_DATAIN          BSEC_ENCKEYR6_DATAIN_Msk                /*!< Data input */

/****************  Bit definition for BSEC_ENCKEYR7 register  *****************/
#define BSEC_ENCKEYR7_DATAIN_Pos      (0U)
#define BSEC_ENCKEYR7_DATAIN_Msk      (0xFFFFFFFFU << BSEC_ENCKEYR7_DATAIN_Pos) /*!< 0xFFFFFFFF */
#define BSEC_ENCKEYR7_DATAIN          BSEC_ENCKEYR7_DATAIN_Msk                /*!< Data input */

/*****************  Bit definition for BSEC_HWKEYR register  ******************/
#define BSEC_HWKEYR_INDEX_Pos         (0U)
#define BSEC_HWKEYR_INDEX_Msk         (0x7U << BSEC_HWKEYR_INDEX_Pos)         /*!< 0x00000007 */
#define BSEC_HWKEYR_INDEX             BSEC_HWKEYR_INDEX_Msk                   /*!< random word index */

/*****************  Bit definition for BSEC_WOSCR0 register  ******************/
#define BSEC_WOSCR0_WOSDATA_Pos       (0U)
#define BSEC_WOSCR0_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR0_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR0_WOSDATA           BSEC_WOSCR0_WOSDATA_Msk                 /*!< Write once scratch data */

/*****************  Bit definition for BSEC_WOSCR1 register  ******************/
#define BSEC_WOSCR1_WOSDATA_Pos       (0U)
#define BSEC_WOSCR1_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR1_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR1_WOSDATA           BSEC_WOSCR1_WOSDATA_Msk                 /*!< Write once scratch data */

/*****************  Bit definition for BSEC_WOSCR2 register  ******************/
#define BSEC_WOSCR2_WOSDATA_Pos       (0U)
#define BSEC_WOSCR2_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR2_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR2_WOSDATA           BSEC_WOSCR2_WOSDATA_Msk                 /*!< Write once scratch data */

/*****************  Bit definition for BSEC_WOSCR3 register  ******************/
#define BSEC_WOSCR3_WOSDATA_Pos       (0U)
#define BSEC_WOSCR3_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR3_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR3_WOSDATA           BSEC_WOSCR3_WOSDATA_Msk                 /*!< Write once scratch data */

/*****************  Bit definition for BSEC_WOSCR4 register  ******************/
#define BSEC_WOSCR4_WOSDATA_Pos       (0U)
#define BSEC_WOSCR4_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR4_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR4_WOSDATA           BSEC_WOSCR4_WOSDATA_Msk                 /*!< Write once scratch data */

/*****************  Bit definition for BSEC_WOSCR5 register  ******************/
#define BSEC_WOSCR5_WOSDATA_Pos       (0U)
#define BSEC_WOSCR5_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR5_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR5_WOSDATA           BSEC_WOSCR5_WOSDATA_Msk                 /*!< Write once scratch data */

/*****************  Bit definition for BSEC_WOSCR6 register  ******************/
#define BSEC_WOSCR6_WOSDATA_Pos       (0U)
#define BSEC_WOSCR6_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR6_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR6_WOSDATA           BSEC_WOSCR6_WOSDATA_Msk                 /*!< Write once scratch data */

/*****************  Bit definition for BSEC_WOSCR7 register  ******************/
#define BSEC_WOSCR7_WOSDATA_Pos       (0U)
#define BSEC_WOSCR7_WOSDATA_Msk       (0xFFFFFFFFU << BSEC_WOSCR7_WOSDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_WOSCR7_WOSDATA           BSEC_WOSCR7_WOSDATA_Msk                 /*!< Write once scratch data */

/******************  Bit definition for BSEC_HRCR register  *******************/
#define BSEC_HRCR_HRC_Pos             (0U)
#define BSEC_HRCR_HRC_Msk             (0xFFFFFFFFU << BSEC_HRCR_HRC_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_HRCR_HRC                 BSEC_HRCR_HRC_Msk                       /*!< hot reset counter */

/******************  Bit definition for BSEC_WRCR register  *******************/
#define BSEC_WRCR_WRC_Pos             (0U)
#define BSEC_WRCR_WRC_Msk             (0xFFFFFFFFU << BSEC_WRCR_WRC_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_WRCR_WRC                 BSEC_WRCR_WRC_Msk                       /*!< warm reset counter */

/*****************  Bit definition for BSEC_HWCFGR register  ******************/

/******************  Bit definition for BSEC_VERR register  *******************/
#define BSEC_VERR_MINREV_Pos          (0U)
#define BSEC_VERR_MINREV_Msk          (0xFU << BSEC_VERR_MINREV_Pos)          /*!< 0x0000000F */
#define BSEC_VERR_MINREV              BSEC_VERR_MINREV_Msk                    /*!< minor revision information */
#define BSEC_VERR_MAJREV_Pos          (4U)
#define BSEC_VERR_MAJREV_Msk          (0xFU << BSEC_VERR_MAJREV_Pos)          /*!< 0x000000F0 */
#define BSEC_VERR_MAJREV              BSEC_VERR_MAJREV_Msk                    /*!< major revision information */

/******************  Bit definition for BSEC_IPIDR register  ******************/
#define BSEC_IPIDR_ID_Pos             (0U)
#define BSEC_IPIDR_ID_Msk             (0xFFFFFFFFU << BSEC_IPIDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_IPIDR_ID                 BSEC_IPIDR_ID_Msk                       /*!< BSEC identification */

/******************  Bit definition for BSEC_SIDR register  *******************/
#define BSEC_SIDR_SID_Pos             (0U)
#define BSEC_SIDR_SID_Msk             (0xFFFFFFFFU << BSEC_SIDR_SID_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_SIDR_SID                 BSEC_SIDR_SID_Msk                       /*!< BSEC size identification */

/******************************************************************************/
/*                                                                            */
/*                          CRC calculation unit                              */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for CRC_DR register  *********************/
#define CRC_DR_DR_Pos            (0U)
#define CRC_DR_DR_Msk            (0xFFFFFFFFU << CRC_DR_DR_Pos)                /*!< 0xFFFFFFFF */
#define CRC_DR_DR                CRC_DR_DR_Msk                                 /*!< Data register bits */

/*******************  Bit definition for CRC_IDR register  ********************/
#define CRC_IDR_IDR_Pos          (0U)
#define CRC_IDR_IDR_Msk          (0xFFFFFFFFU << CRC_IDR_IDR_Pos)              /*!< 0xFFFFFFFF */
#define CRC_IDR_IDR              CRC_IDR_IDR_Msk                               /*!< General-purpose 32-bit data register bits */

/********************  Bit definition for CRC_CR register  ********************/
#define CRC_CR_RESET_Pos         (0U)
#define CRC_CR_RESET_Msk         (0x1U << CRC_CR_RESET_Pos)                    /*!< 0x00000001 */
#define CRC_CR_RESET             CRC_CR_RESET_Msk                              /*!< RESET the CRC computation unit bit */
#define CRC_CR_POLYSIZE_Pos      (3U)
#define CRC_CR_POLYSIZE_Msk      (0x3U << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000018 */
#define CRC_CR_POLYSIZE          CRC_CR_POLYSIZE_Msk                           /*!< Polynomial size bits */
#define CRC_CR_POLYSIZE_0        (0x1U << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000008 */
#define CRC_CR_POLYSIZE_1        (0x2U << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000010 */
#define CRC_CR_REV_IN_Pos        (5U)
#define CRC_CR_REV_IN_Msk        (0x3U << CRC_CR_REV_IN_Pos)                   /*!< 0x00000060 */
#define CRC_CR_REV_IN            CRC_CR_REV_IN_Msk                             /*!< REV_IN Reverse Input Data bits */
#define CRC_CR_REV_IN_0          (0x1U << CRC_CR_REV_IN_Pos)                   /*!< 0x00000020 */
#define CRC_CR_REV_IN_1          (0x2U << CRC_CR_REV_IN_Pos)                   /*!< 0x00000040 */
#define CRC_CR_REV_OUT_Pos       (7U)
#define CRC_CR_REV_OUT_Msk       (0x1U << CRC_CR_REV_OUT_Pos)                  /*!< 0x00000080 */
#define CRC_CR_REV_OUT           CRC_CR_REV_OUT_Msk                            /*!< REV_OUT Reverse Output Data bits */

/*******************  Bit definition for CRC_INIT register  *******************/
#define CRC_INIT_INIT_Pos        (0U)
#define CRC_INIT_INIT_Msk        (0xFFFFFFFFU << CRC_INIT_INIT_Pos)            /*!< 0xFFFFFFFF */
#define CRC_INIT_INIT            CRC_INIT_INIT_Msk                             /*!< Initial CRC value bits */

/*******************  Bit definition for CRC_POL register  ********************/
#define CRC_POL_POL_Pos          (0U)
#define CRC_POL_POL_Msk          (0xFFFFFFFFU << CRC_POL_POL_Pos)              /*!< 0xFFFFFFFF */
#define CRC_POL_POL              CRC_POL_POL_Msk                               /*!< Coefficients of the polynomial */

/******************************************************************************/
/*                                                                            */
/*                            Crypto Processor                                */
/*                                                                            */
/******************************************************************************/
/******************* Bits definition for CRYP_CR register  ********************/
#define CRYP_CR_ALGODIR_Pos              (2U)
#define CRYP_CR_ALGODIR_Msk              (0x1U << CRYP_CR_ALGODIR_Pos)         /*!< 0x00000004 */
#define CRYP_CR_ALGODIR                  CRYP_CR_ALGODIR_Msk

#define CRYP_CR_ALGOMODE_Pos             (3U)
#define CRYP_CR_ALGOMODE_Msk             (0x10007U << CRYP_CR_ALGOMODE_Pos)    /*!< 0x00080038 */
#define CRYP_CR_ALGOMODE                 CRYP_CR_ALGOMODE_Msk
#define CRYP_CR_ALGOMODE_0               (0x00001U << CRYP_CR_ALGOMODE_Pos)    /*!< 0x00000008 */
#define CRYP_CR_ALGOMODE_1               (0x00002U << CRYP_CR_ALGOMODE_Pos)    /*!< 0x00000010 */
#define CRYP_CR_ALGOMODE_2               (0x00004U << CRYP_CR_ALGOMODE_Pos)    /*!< 0x00000020 */
#define CRYP_CR_ALGOMODE_TDES_ECB        ((uint32_t)0x00000000)
#define CRYP_CR_ALGOMODE_TDES_CBC_Pos    (3U)
#define CRYP_CR_ALGOMODE_TDES_CBC_Msk    (0x1U << CRYP_CR_ALGOMODE_TDES_CBC_Pos) /*!< 0x00000008 */
#define CRYP_CR_ALGOMODE_TDES_CBC        CRYP_CR_ALGOMODE_TDES_CBC_Msk
#define CRYP_CR_ALGOMODE_DES_ECB_Pos     (4U)
#define CRYP_CR_ALGOMODE_DES_ECB_Msk     (0x1U << CRYP_CR_ALGOMODE_DES_ECB_Pos) /*!< 0x00000010 */
#define CRYP_CR_ALGOMODE_DES_ECB         CRYP_CR_ALGOMODE_DES_ECB_Msk
#define CRYP_CR_ALGOMODE_DES_CBC_Pos     (3U)
#define CRYP_CR_ALGOMODE_DES_CBC_Msk     (0x3U << CRYP_CR_ALGOMODE_DES_CBC_Pos) /*!< 0x00000018 */
#define CRYP_CR_ALGOMODE_DES_CBC         CRYP_CR_ALGOMODE_DES_CBC_Msk
#define CRYP_CR_ALGOMODE_AES_ECB_Pos     (5U)
#define CRYP_CR_ALGOMODE_AES_ECB_Msk     (0x1U << CRYP_CR_ALGOMODE_AES_ECB_Pos) /*!< 0x00000020 */
#define CRYP_CR_ALGOMODE_AES_ECB         CRYP_CR_ALGOMODE_AES_ECB_Msk
#define CRYP_CR_ALGOMODE_AES_CBC_Pos     (3U)
#define CRYP_CR_ALGOMODE_AES_CBC_Msk     (0x5U << CRYP_CR_ALGOMODE_AES_CBC_Pos) /*!< 0x00000028 */
#define CRYP_CR_ALGOMODE_AES_CBC         CRYP_CR_ALGOMODE_AES_CBC_Msk
#define CRYP_CR_ALGOMODE_AES_CTR_Pos     (4U)
#define CRYP_CR_ALGOMODE_AES_CTR_Msk     (0x3U << CRYP_CR_ALGOMODE_AES_CTR_Pos) /*!< 0x00000030 */
#define CRYP_CR_ALGOMODE_AES_CTR         CRYP_CR_ALGOMODE_AES_CTR_Msk
#define CRYP_CR_ALGOMODE_AES_GCM_Pos     (19U)
#define CRYP_CR_ALGOMODE_AES_GCM_Msk     (0x1U << CRYP_CR_ALGOMODE_AES_GCM_Pos) /*!< 0x00080000 */
#define CRYP_CR_ALGOMODE_AES_GCM         CRYP_CR_ALGOMODE_AES_GCM_Msk
#define CRYP_CR_ALGOMODE_AES_CCM_Pos     (3U)
#define CRYP_CR_ALGOMODE_AES_CCM_Msk     (0x10001U << CRYP_CR_ALGOMODE_AES_CCM_Pos) /*!< 0x00080008 */
#define CRYP_CR_ALGOMODE_AES_CCM         CRYP_CR_ALGOMODE_AES_CCM_Msk
#define CRYP_CR_ALGOMODE_AES_KEY_Pos     (3U)
#define CRYP_CR_ALGOMODE_AES_KEY_Msk     (0x7U << CRYP_CR_ALGOMODE_AES_KEY_Pos) /*!< 0x00000038 */
#define CRYP_CR_ALGOMODE_AES_KEY         CRYP_CR_ALGOMODE_AES_KEY_Msk

#define CRYP_CR_DATATYPE_Pos             (6U)
#define CRYP_CR_DATATYPE_Msk             (0x3U << CRYP_CR_DATATYPE_Pos)        /*!< 0x000000C0 */
#define CRYP_CR_DATATYPE                 CRYP_CR_DATATYPE_Msk
#define CRYP_CR_DATATYPE_0               (0x1U << CRYP_CR_DATATYPE_Pos)        /*!< 0x00000040 */
#define CRYP_CR_DATATYPE_1               (0x2U << CRYP_CR_DATATYPE_Pos)        /*!< 0x00000080 */
#define CRYP_CR_KEYSIZE_Pos              (8U)
#define CRYP_CR_KEYSIZE_Msk              (0x3U << CRYP_CR_KEYSIZE_Pos)         /*!< 0x00000300 */
#define CRYP_CR_KEYSIZE                  CRYP_CR_KEYSIZE_Msk
#define CRYP_CR_KEYSIZE_0                (0x1U << CRYP_CR_KEYSIZE_Pos)         /*!< 0x00000100 */
#define CRYP_CR_KEYSIZE_1                (0x2U << CRYP_CR_KEYSIZE_Pos)         /*!< 0x00000200 */
#define CRYP_CR_FFLUSH_Pos               (14U)
#define CRYP_CR_FFLUSH_Msk               (0x1U << CRYP_CR_FFLUSH_Pos)          /*!< 0x00004000 */
#define CRYP_CR_FFLUSH                   CRYP_CR_FFLUSH_Msk
#define CRYP_CR_CRYPEN_Pos               (15U)
#define CRYP_CR_CRYPEN_Msk               (0x1U << CRYP_CR_CRYPEN_Pos)          /*!< 0x00008000 */
#define CRYP_CR_CRYPEN                   CRYP_CR_CRYPEN_Msk

#define CRYP_CR_GCM_CCMPH_Pos            (16U)
#define CRYP_CR_GCM_CCMPH_Msk            (0x3U << CRYP_CR_GCM_CCMPH_Pos)       /*!< 0x00030000 */
#define CRYP_CR_GCM_CCMPH                CRYP_CR_GCM_CCMPH_Msk
#define CRYP_CR_GCM_CCMPH_0              (0x1U << CRYP_CR_GCM_CCMPH_Pos)       /*!< 0x00010000 */
#define CRYP_CR_GCM_CCMPH_1              (0x2U << CRYP_CR_GCM_CCMPH_Pos)       /*!< 0x00020000 */
#define CRYP_CR_ALGOMODE_3               ((uint32_t)0x00080000)
#define CRYP_CR_NPBLB_Pos                (20U)
#define CRYP_CR_NPBLB_Msk                (0xFU << CRYP_CR_NPBLB_Pos)           /*!< 0x00F00000 */
#define CRYP_CR_NPBLB                    CRYP_CR_NPBLB_Msk

/****************** Bits definition for CRYP_SR register  *********************/
#define CRYP_SR_IFEM_Pos                 (0U)
#define CRYP_SR_IFEM_Msk                 (0x1U << CRYP_SR_IFEM_Pos)            /*!< 0x00000001 */
#define CRYP_SR_IFEM                     CRYP_SR_IFEM_Msk
#define CRYP_SR_IFNF_Pos                 (1U)
#define CRYP_SR_IFNF_Msk                 (0x1U << CRYP_SR_IFNF_Pos)            /*!< 0x00000002 */
#define CRYP_SR_IFNF                     CRYP_SR_IFNF_Msk
#define CRYP_SR_OFNE_Pos                 (2U)
#define CRYP_SR_OFNE_Msk                 (0x1U << CRYP_SR_OFNE_Pos)            /*!< 0x00000004 */
#define CRYP_SR_OFNE                     CRYP_SR_OFNE_Msk
#define CRYP_SR_OFFU_Pos                 (3U)
#define CRYP_SR_OFFU_Msk                 (0x1U << CRYP_SR_OFFU_Pos)            /*!< 0x00000008 */
#define CRYP_SR_OFFU                     CRYP_SR_OFFU_Msk
#define CRYP_SR_BUSY_Pos                 (4U)
#define CRYP_SR_BUSY_Msk                 (0x1U << CRYP_SR_BUSY_Pos)            /*!< 0x00000010 */
#define CRYP_SR_BUSY                     CRYP_SR_BUSY_Msk
/****************** Bits definition for CRYP_DMACR register  ******************/
#define CRYP_DMACR_DIEN_Pos              (0U)
#define CRYP_DMACR_DIEN_Msk              (0x1U << CRYP_DMACR_DIEN_Pos)         /*!< 0x00000001 */
#define CRYP_DMACR_DIEN                  CRYP_DMACR_DIEN_Msk
#define CRYP_DMACR_DOEN_Pos              (1U)
#define CRYP_DMACR_DOEN_Msk              (0x1U << CRYP_DMACR_DOEN_Pos)         /*!< 0x00000002 */
#define CRYP_DMACR_DOEN                  CRYP_DMACR_DOEN_Msk
/*****************  Bits definition for CRYP_IMSCR register  ******************/
#define CRYP_IMSCR_INIM_Pos              (0U)
#define CRYP_IMSCR_INIM_Msk              (0x1U << CRYP_IMSCR_INIM_Pos)         /*!< 0x00000001 */
#define CRYP_IMSCR_INIM                  CRYP_IMSCR_INIM_Msk
#define CRYP_IMSCR_OUTIM_Pos             (1U)
#define CRYP_IMSCR_OUTIM_Msk             (0x1U << CRYP_IMSCR_OUTIM_Pos)        /*!< 0x00000002 */
#define CRYP_IMSCR_OUTIM                 CRYP_IMSCR_OUTIM_Msk
/****************** Bits definition for CRYP_RISR register  *******************/
#define CRYP_RISR_OUTRIS_Pos             (0U)
#define CRYP_RISR_OUTRIS_Msk             (0x1U << CRYP_RISR_OUTRIS_Pos)        /*!< 0x00000001 */
#define CRYP_RISR_OUTRIS                 CRYP_RISR_OUTRIS_Msk
#define CRYP_RISR_INRIS_Pos              (1U)
#define CRYP_RISR_INRIS_Msk              (0x1U << CRYP_RISR_INRIS_Pos)         /*!< 0x00000002 */
#define CRYP_RISR_INRIS                  CRYP_RISR_INRIS_Msk
/****************** Bits definition for CRYP_MISR register  *******************/
#define CRYP_MISR_INMIS_Pos              (0U)
#define CRYP_MISR_INMIS_Msk              (0x1U << CRYP_MISR_INMIS_Pos)         /*!< 0x00000001 */
#define CRYP_MISR_INMIS                  CRYP_MISR_INMIS_Msk
#define CRYP_MISR_OUTMIS_Pos             (1U)
#define CRYP_MISR_OUTMIS_Msk             (0x1U << CRYP_MISR_OUTMIS_Pos)        /*!< 0x00000002 */
#define CRYP_MISR_OUTMIS                 CRYP_MISR_OUTMIS_Msk

/******************************************************************************/
/*                                                                            */
/*                                    CSI2HOST                                */
/*                                                                            */
/******************************************************************************/
/* Bit fields for CSI_PCR register */
#define CSI_PCR_PWRDOWN_Pos                   0
#define CSI_PCR_PWRDOWN_Msk                   (0x1 << 0)
#define CSI_PCR_PWRDOWN                       (0x1 << 0)
#define CSI_PCR_CLEN_Pos                      1
#define CSI_PCR_CLEN_Msk                      (0x1 << 1)
#define CSI_PCR_CLEN                          (0x1 << 1)
#define CSI_PCR_DL0EN_Pos                     2
#define CSI_PCR_DL0EN_Msk                     (0x1 << 2)
#define CSI_PCR_DL0EN                         (0x1 << 2)
#define CSI_PCR_DL1EN_Pos                     3
#define CSI_PCR_DL1EN_Msk                     (0x1 << 3)
#define CSI_PCR_DL1EN                         (0x1 << 3)

/* Bit fields for CSI_VC0CFGR1 register */
#define CSI_VC0CFGR1_ALLDT_Pos                0
#define CSI_VC0CFGR1_ALLDT_Msk                (0x1 << 0)
#define CSI_VC0CFGR1_ALLDT                    (0x1 << 0)
#define CSI_VC0CFGR1_DT0EN_Pos                1
#define CSI_VC0CFGR1_DT0EN_Msk                (0x1 << 1)
#define CSI_VC0CFGR1_DT0EN                    (0x1 << 1)
#define CSI_VC0CFGR1_DT1EN_Pos                2
#define CSI_VC0CFGR1_DT1EN_Msk                (0x1 << 2)
#define CSI_VC0CFGR1_DT1EN                    (0x1 << 2)
#define CSI_VC0CFGR1_DT2EN_Pos                3
#define CSI_VC0CFGR1_DT2EN_Msk                (0x1 << 3)
#define CSI_VC0CFGR1_DT2EN                    (0x1 << 3)
#define CSI_VC0CFGR1_DT3EN_Pos                4
#define CSI_VC0CFGR1_DT3EN_Msk                (0x1 << 4)
#define CSI_VC0CFGR1_DT3EN                    (0x1 << 4)
#define CSI_VC0CFGR1_DT4EN_Pos                5
#define CSI_VC0CFGR1_DT4EN_Msk                (0x1 << 5)
#define CSI_VC0CFGR1_DT4EN                    (0x1 << 5)
#define CSI_VC0CFGR1_DT5EN_Pos                6
#define CSI_VC0CFGR1_DT5EN_Msk                (0x1 << 6)
#define CSI_VC0CFGR1_DT5EN                    (0x1 << 6)
#define CSI_VC0CFGR1_DT6EN_Pos                7
#define CSI_VC0CFGR1_DT6EN_Msk                (0x1 << 7)
#define CSI_VC0CFGR1_DT6EN                    (0x1 << 7)
#define CSI_VC0CFGR1_CDTFT_Pos                8
#define CSI_VC0CFGR1_CDTFT_Msk                (0x1f << 8)
#define CSI_VC0CFGR1_CDTFT                    (0x1f << 8)
#define CSI_VC0CFGR1_DT0_Pos                  16
#define CSI_VC0CFGR1_DT0_Msk                  (0x3f << 16)
#define CSI_VC0CFGR1_DT0                      (0x3f << 16)
#define CSI_VC0CFGR1_DT0FT_Pos                24
#define CSI_VC0CFGR1_DT0FT_Msk                (0x1f << 24)
#define CSI_VC0CFGR1_DT0FT                    (0x1f << 24)

/* Bit fields for CSI_VC0CFGR2 register */
#define CSI_VC0CFGR2_DT1_Pos                  0
#define CSI_VC0CFGR2_DT1_Msk                  (0x3f << 0)
#define CSI_VC0CFGR2_DT1                      (0x3f << 0)
#define CSI_VC0CFGR2_DT1FT_Pos                8
#define CSI_VC0CFGR2_DT1FT_Msk                (0x1f << 8)
#define CSI_VC0CFGR2_DT1FT                    (0x1f << 8)
#define CSI_VC0CFGR2_DT2_Pos                  16
#define CSI_VC0CFGR2_DT2_Msk                  (0x3f << 16)
#define CSI_VC0CFGR2_DT2                      (0x3f << 16)
#define CSI_VC0CFGR2_DT2FT_Pos                24
#define CSI_VC0CFGR2_DT2FT_Msk                (0x1f << 24)
#define CSI_VC0CFGR2_DT2FT                    (0x1f << 24)

/* Bit fields for CSI_VC0CFGR3 register */
#define CSI_VC0CFGR3_DT3_Pos                  0
#define CSI_VC0CFGR3_DT3_Msk                  (0x3f << 0)
#define CSI_VC0CFGR3_DT3                      (0x3f << 0)
#define CSI_VC0CFGR3_DT3FT_Pos                8
#define CSI_VC0CFGR3_DT3FT_Msk                (0x1f << 8)
#define CSI_VC0CFGR3_DT3FT                    (0x1f << 8)
#define CSI_VC0CFGR3_DT4_Pos                  16
#define CSI_VC0CFGR3_DT4_Msk                  (0x3f << 16)
#define CSI_VC0CFGR3_DT4                      (0x3f << 16)
#define CSI_VC0CFGR3_DT4FT_Pos                24
#define CSI_VC0CFGR3_DT4FT_Msk                (0x1f << 24)
#define CSI_VC0CFGR3_DT4FT                    (0x1f << 24)

/* Bit fields for CSI_VC0CFGR4 register */
#define CSI_VC0CFGR4_DT5_Pos                  0
#define CSI_VC0CFGR4_DT5_Msk                  (0x3f << 0)
#define CSI_VC0CFGR4_DT5                      (0x3f << 0)
#define CSI_VC0CFGR4_DT5FT_Pos                8
#define CSI_VC0CFGR4_DT5FT_Msk                (0x1f << 8)
#define CSI_VC0CFGR4_DT5FT                    (0x1f << 8)
#define CSI_VC0CFGR4_DT6_Pos                  16
#define CSI_VC0CFGR4_DT6_Msk                  (0x3f << 16)
#define CSI_VC0CFGR4_DT6                      (0x3f << 16)
#define CSI_VC0CFGR4_DT6FT_Pos                24
#define CSI_VC0CFGR4_DT6FT_Msk                (0x1f << 24)
#define CSI_VC0CFGR4_DT6FT                    (0x1f << 24)

/* Bit fields for CSI_VC1CFGR1 register */
#define CSI_VC1CFGR1_ALLDT_Pos                0
#define CSI_VC1CFGR1_ALLDT_Msk                (0x1 << 0)
#define CSI_VC1CFGR1_ALLDT                    (0x1 << 0)
#define CSI_VC1CFGR1_DT0EN_Pos                1
#define CSI_VC1CFGR1_DT0EN_Msk                (0x1 << 1)
#define CSI_VC1CFGR1_DT0EN                    (0x1 << 1)
#define CSI_VC1CFGR1_DT1EN_Pos                2
#define CSI_VC1CFGR1_DT1EN_Msk                (0x1 << 2)
#define CSI_VC1CFGR1_DT1EN                    (0x1 << 2)
#define CSI_VC1CFGR1_DT2EN_Pos                3
#define CSI_VC1CFGR1_DT2EN_Msk                (0x1 << 3)
#define CSI_VC1CFGR1_DT2EN                    (0x1 << 3)
#define CSI_VC1CFGR1_DT3EN_Pos                4
#define CSI_VC1CFGR1_DT3EN_Msk                (0x1 << 4)
#define CSI_VC1CFGR1_DT3EN                    (0x1 << 4)
#define CSI_VC1CFGR1_DT4EN_Pos                5
#define CSI_VC1CFGR1_DT4EN_Msk                (0x1 << 5)
#define CSI_VC1CFGR1_DT4EN                    (0x1 << 5)
#define CSI_VC1CFGR1_DT5EN_Pos                6
#define CSI_VC1CFGR1_DT5EN_Msk                (0x1 << 6)
#define CSI_VC1CFGR1_DT5EN                    (0x1 << 6)
#define CSI_VC1CFGR1_DT6EN_Pos                7
#define CSI_VC1CFGR1_DT6EN_Msk                (0x1 << 7)
#define CSI_VC1CFGR1_DT6EN                    (0x1 << 7)
#define CSI_VC1CFGR1_CDTFT_Pos                8
#define CSI_VC1CFGR1_CDTFT_Msk                (0x1f << 8)
#define CSI_VC1CFGR1_CDTFT                    (0x1f << 8)
#define CSI_VC1CFGR1_DT0_Pos                  16
#define CSI_VC1CFGR1_DT0_Msk                  (0x3f << 16)
#define CSI_VC1CFGR1_DT0                      (0x3f << 16)
#define CSI_VC1CFGR1_DT0FT_Pos                24
#define CSI_VC1CFGR1_DT0FT_Msk                (0x1f << 24)
#define CSI_VC1CFGR1_DT0FT                    (0x1f << 24)

/* Bit fields for CSI_VC1CFGR2 register */
#define CSI_VC1CFGR2_DT1_Pos                  0
#define CSI_VC1CFGR2_DT1_Msk                  (0x3f << 0)
#define CSI_VC1CFGR2_DT1                      (0x3f << 0)
#define CSI_VC1CFGR2_DT1FT_Pos                8
#define CSI_VC1CFGR2_DT1FT_Msk                (0x1f << 8)
#define CSI_VC1CFGR2_DT1FT                    (0x1f << 8)
#define CSI_VC1CFGR2_DT2_Pos                  16
#define CSI_VC1CFGR2_DT2_Msk                  (0x3f << 16)
#define CSI_VC1CFGR2_DT2                      (0x3f << 16)
#define CSI_VC1CFGR2_DT2FT_Pos                24
#define CSI_VC1CFGR2_DT2FT_Msk                (0x1f << 24)
#define CSI_VC1CFGR2_DT2FT                    (0x1f << 24)

/* Bit fields for CSI_VC1CFGR3 register */
#define CSI_VC1CFGR3_DT3_Pos                  0
#define CSI_VC1CFGR3_DT3_Msk                  (0x3f << 0)
#define CSI_VC1CFGR3_DT3                      (0x3f << 0)
#define CSI_VC1CFGR3_DT3FT_Pos                8
#define CSI_VC1CFGR3_DT3FT_Msk                (0x1f << 8)
#define CSI_VC1CFGR3_DT3FT                    (0x1f << 8)
#define CSI_VC1CFGR3_DT4_Pos                  16
#define CSI_VC1CFGR3_DT4_Msk                  (0x3f << 16)
#define CSI_VC1CFGR3_DT4                      (0x3f << 16)
#define CSI_VC1CFGR3_DT4FT_Pos                24
#define CSI_VC1CFGR3_DT4FT_Msk                (0x1f << 24)
#define CSI_VC1CFGR3_DT4FT                    (0x1f << 24)

/* Bit fields for CSI_VC1CFGR4 register */
#define CSI_VC1CFGR4_DT5_Pos                  0
#define CSI_VC1CFGR4_DT5_Msk                  (0x3f << 0)
#define CSI_VC1CFGR4_DT5                      (0x3f << 0)
#define CSI_VC1CFGR4_DT5FT_Pos                8
#define CSI_VC1CFGR4_DT5FT_Msk                (0x1f << 8)
#define CSI_VC1CFGR4_DT5FT                    (0x1f << 8)
#define CSI_VC1CFGR4_DT6_Pos                  16
#define CSI_VC1CFGR4_DT6_Msk                  (0x3f << 16)
#define CSI_VC1CFGR4_DT6                      (0x3f << 16)
#define CSI_VC1CFGR4_DT6FT_Pos                24
#define CSI_VC1CFGR4_DT6FT_Msk                (0x1f << 24)
#define CSI_VC1CFGR4_DT6FT                    (0x1f << 24)

/* Bit fields for CSI_VC2CFGR1 register */
#define CSI_VC2CFGR1_ALLDT_Pos                0
#define CSI_VC2CFGR1_ALLDT_Msk                (0x1 << 0)
#define CSI_VC2CFGR1_ALLDT                    (0x1 << 0)
#define CSI_VC2CFGR1_DT0EN_Pos                1
#define CSI_VC2CFGR1_DT0EN_Msk                (0x1 << 1)
#define CSI_VC2CFGR1_DT0EN                    (0x1 << 1)
#define CSI_VC2CFGR1_DT1EN_Pos                2
#define CSI_VC2CFGR1_DT1EN_Msk                (0x1 << 2)
#define CSI_VC2CFGR1_DT1EN                    (0x1 << 2)
#define CSI_VC2CFGR1_DT2EN_Pos                3
#define CSI_VC2CFGR1_DT2EN_Msk                (0x1 << 3)
#define CSI_VC2CFGR1_DT2EN                    (0x1 << 3)
#define CSI_VC2CFGR1_DT3EN_Pos                4
#define CSI_VC2CFGR1_DT3EN_Msk                (0x1 << 4)
#define CSI_VC2CFGR1_DT3EN                    (0x1 << 4)
#define CSI_VC2CFGR1_DT4EN_Pos                5
#define CSI_VC2CFGR1_DT4EN_Msk                (0x1 << 5)
#define CSI_VC2CFGR1_DT4EN                    (0x1 << 5)
#define CSI_VC2CFGR1_DT5EN_Pos                6
#define CSI_VC2CFGR1_DT5EN_Msk                (0x1 << 6)
#define CSI_VC2CFGR1_DT5EN                    (0x1 << 6)
#define CSI_VC2CFGR1_DT6EN_Pos                7
#define CSI_VC2CFGR1_DT6EN_Msk                (0x1 << 7)
#define CSI_VC2CFGR1_DT6EN                    (0x1 << 7)
#define CSI_VC2CFGR1_CDTFT_Pos                8
#define CSI_VC2CFGR1_CDTFT_Msk                (0x1f << 8)
#define CSI_VC2CFGR1_CDTFT                    (0x1f << 8)
#define CSI_VC2CFGR1_DT0_Pos                  16
#define CSI_VC2CFGR1_DT0_Msk                  (0x3f << 16)
#define CSI_VC2CFGR1_DT0                      (0x3f << 16)
#define CSI_VC2CFGR1_DT0FT_Pos                24
#define CSI_VC2CFGR1_DT0FT_Msk                (0x1f << 24)
#define CSI_VC2CFGR1_DT0FT                    (0x1f << 24)

/* Bit fields for CSI_VC2CFGR2 register */
#define CSI_VC2CFGR2_DT1_Pos                  0
#define CSI_VC2CFGR2_DT1_Msk                  (0x3f << 0)
#define CSI_VC2CFGR2_DT1                      (0x3f << 0)
#define CSI_VC2CFGR2_DT1FT_Pos                8
#define CSI_VC2CFGR2_DT1FT_Msk                (0x1f << 8)
#define CSI_VC2CFGR2_DT1FT                    (0x1f << 8)
#define CSI_VC2CFGR2_DT2_Pos                  16
#define CSI_VC2CFGR2_DT2_Msk                  (0x3f << 16)
#define CSI_VC2CFGR2_DT2                      (0x3f << 16)
#define CSI_VC2CFGR2_DT2FT_Pos                24
#define CSI_VC2CFGR2_DT2FT_Msk                (0x1f << 24)
#define CSI_VC2CFGR2_DT2FT                    (0x1f << 24)

/* Bit fields for CSI_VC2CFGR3 register */
#define CSI_VC2CFGR3_DT3_Pos                  0
#define CSI_VC2CFGR3_DT3_Msk                  (0x3f << 0)
#define CSI_VC2CFGR3_DT3                      (0x3f << 0)
#define CSI_VC2CFGR3_DT3FT_Pos                8
#define CSI_VC2CFGR3_DT3FT_Msk                (0x1f << 8)
#define CSI_VC2CFGR3_DT3FT                    (0x1f << 8)
#define CSI_VC2CFGR3_DT4_Pos                  16
#define CSI_VC2CFGR3_DT4_Msk                  (0x3f << 16)
#define CSI_VC2CFGR3_DT4                      (0x3f << 16)
#define CSI_VC2CFGR3_DT4FT_Pos                24
#define CSI_VC2CFGR3_DT4FT_Msk                (0x1f << 24)
#define CSI_VC2CFGR3_DT4FT                    (0x1f << 24)

/* Bit fields for CSI_VC2CFGR4 register */
#define CSI_VC2CFGR4_DT5_Pos                  0
#define CSI_VC2CFGR4_DT5_Msk                  (0x3f << 0)
#define CSI_VC2CFGR4_DT5                      (0x3f << 0)
#define CSI_VC2CFGR4_DT5FT_Pos                8
#define CSI_VC2CFGR4_DT5FT_Msk                (0x1f << 8)
#define CSI_VC2CFGR4_DT5FT                    (0x1f << 8)
#define CSI_VC2CFGR4_DT6_Pos                  16
#define CSI_VC2CFGR4_DT6_Msk                  (0x3f << 16)
#define CSI_VC2CFGR4_DT6                      (0x3f << 16)
#define CSI_VC2CFGR4_DT6FT_Pos                24
#define CSI_VC2CFGR4_DT6FT_Msk                (0x1f << 24)
#define CSI_VC2CFGR4_DT6FT                    (0x1f << 24)

/* Bit fields for CSI_VC3CFGR1 register */
#define CSI_VC3CFGR1_ALLDT_Pos                0
#define CSI_VC3CFGR1_ALLDT_Msk                (0x1 << 0)
#define CSI_VC3CFGR1_ALLDT                    (0x1 << 0)
#define CSI_VC3CFGR1_DT0EN_Pos                1
#define CSI_VC3CFGR1_DT0EN_Msk                (0x1 << 1)
#define CSI_VC3CFGR1_DT0EN                    (0x1 << 1)
#define CSI_VC3CFGR1_DT1EN_Pos                2
#define CSI_VC3CFGR1_DT1EN_Msk                (0x1 << 2)
#define CSI_VC3CFGR1_DT1EN                    (0x1 << 2)
#define CSI_VC3CFGR1_DT2EN_Pos                3
#define CSI_VC3CFGR1_DT2EN_Msk                (0x1 << 3)
#define CSI_VC3CFGR1_DT2EN                    (0x1 << 3)
#define CSI_VC3CFGR1_DT3EN_Pos                4
#define CSI_VC3CFGR1_DT3EN_Msk                (0x1 << 4)
#define CSI_VC3CFGR1_DT3EN                    (0x1 << 4)
#define CSI_VC3CFGR1_DT4EN_Pos                5
#define CSI_VC3CFGR1_DT4EN_Msk                (0x1 << 5)
#define CSI_VC3CFGR1_DT4EN                    (0x1 << 5)
#define CSI_VC3CFGR1_DT5EN_Pos                6
#define CSI_VC3CFGR1_DT5EN_Msk                (0x1 << 6)
#define CSI_VC3CFGR1_DT5EN                    (0x1 << 6)
#define CSI_VC3CFGR1_DT6EN_Pos                7
#define CSI_VC3CFGR1_DT6EN_Msk                (0x1 << 7)
#define CSI_VC3CFGR1_DT6EN                    (0x1 << 7)
#define CSI_VC3CFGR1_CDTFT_Pos                8
#define CSI_VC3CFGR1_CDTFT_Msk                (0x1f << 8)
#define CSI_VC3CFGR1_CDTFT                    (0x1f << 8)
#define CSI_VC3CFGR1_DT0_Pos                  16
#define CSI_VC3CFGR1_DT0_Msk                  (0x3f << 16)
#define CSI_VC3CFGR1_DT0                      (0x3f << 16)
#define CSI_VC3CFGR1_DT0FT_Pos                24
#define CSI_VC3CFGR1_DT0FT_Msk                (0x1f << 24)
#define CSI_VC3CFGR1_DT0FT                    (0x1f << 24)

/* Bit fields for CSI_VC3CFGR2 register */
#define CSI_VC3CFGR2_DT1_Pos                  0
#define CSI_VC3CFGR2_DT1_Msk                  (0x3f << 0)
#define CSI_VC3CFGR2_DT1                      (0x3f << 0)
#define CSI_VC3CFGR2_DT1FT_Pos                8
#define CSI_VC3CFGR2_DT1FT_Msk                (0x1f << 8)
#define CSI_VC3CFGR2_DT1FT                    (0x1f << 8)
#define CSI_VC3CFGR2_DT2_Pos                  16
#define CSI_VC3CFGR2_DT2_Msk                  (0x3f << 16)
#define CSI_VC3CFGR2_DT2                      (0x3f << 16)
#define CSI_VC3CFGR2_DT2FT_Pos                24
#define CSI_VC3CFGR2_DT2FT_Msk                (0x1f << 24)
#define CSI_VC3CFGR2_DT2FT                    (0x1f << 24)

/* Bit fields for CSI_VC3CFGR3 register */
#define CSI_VC3CFGR3_DT3_Pos                  0
#define CSI_VC3CFGR3_DT3_Msk                  (0x3f << 0)
#define CSI_VC3CFGR3_DT3                      (0x3f << 0)
#define CSI_VC3CFGR3_DT3FT_Pos                8
#define CSI_VC3CFGR3_DT3FT_Msk                (0x1f << 8)
#define CSI_VC3CFGR3_DT3FT                    (0x1f << 8)
#define CSI_VC3CFGR3_DT4_Pos                  16
#define CSI_VC3CFGR3_DT4_Msk                  (0x3f << 16)
#define CSI_VC3CFGR3_DT4                      (0x3f << 16)
#define CSI_VC3CFGR3_DT4FT_Pos                24
#define CSI_VC3CFGR3_DT4FT_Msk                (0x1f << 24)
#define CSI_VC3CFGR3_DT4FT                    (0x1f << 24)

/* Bit fields for CSI_VC3CFGR4 register */
#define CSI_VC3CFGR4_DT5_Pos                  0
#define CSI_VC3CFGR4_DT5_Msk                  (0x3f << 0)
#define CSI_VC3CFGR4_DT5                      (0x3f << 0)
#define CSI_VC3CFGR4_DT5FT_Pos                8
#define CSI_VC3CFGR4_DT5FT_Msk                (0x1f << 8)
#define CSI_VC3CFGR4_DT5FT                    (0x1f << 8)
#define CSI_VC3CFGR4_DT6_Pos                  16
#define CSI_VC3CFGR4_DT6_Msk                  (0x3f << 16)
#define CSI_VC3CFGR4_DT6                      (0x3f << 16)
#define CSI_VC3CFGR4_DT6FT_Pos                24
#define CSI_VC3CFGR4_DT6FT_Msk                (0x1f << 24)
#define CSI_VC3CFGR4_DT6FT                    (0x1f << 24)

/* Bit fields for CSI_LB0CFGR register */
#define CSI_LB0CFGR_BYTECNT_Pos               0
#define CSI_LB0CFGR_BYTECNT_Msk               (0xffff << 0)
#define CSI_LB0CFGR_BYTECNT                   (0xffff << 0)
#define CSI_LB0CFGR_LINECNT_Pos               16
#define CSI_LB0CFGR_LINECNT_Msk               (0xffff << 16)
#define CSI_LB0CFGR_LINECNT                   (0xffff << 16)

/* Bit fields for CSI_LB1CFGR register */
#define CSI_LB1CFGR_BYTECNT_Pos               0
#define CSI_LB1CFGR_BYTECNT_Msk               (0xffff << 0)
#define CSI_LB1CFGR_BYTECNT                   (0xffff << 0)
#define CSI_LB1CFGR_LINECNT_Pos               16
#define CSI_LB1CFGR_LINECNT_Msk               (0xffff << 16)
#define CSI_LB1CFGR_LINECNT                   (0xffff << 16)

/* Bit fields for CSI_LB2CFGR register */
#define CSI_LB2CFGR_BYTECNT_Pos               0
#define CSI_LB2CFGR_BYTECNT_Msk               (0xffff << 0)
#define CSI_LB2CFGR_BYTECNT                   (0xffff << 0)
#define CSI_LB2CFGR_LINECNT_Pos               16
#define CSI_LB2CFGR_LINECNT_Msk               (0xffff << 16)
#define CSI_LB2CFGR_LINECNT                   (0xffff << 16)

/* Bit fields for CSI_LB3CFGR register */
#define CSI_LB3CFGR_BYTECNT_Pos               0
#define CSI_LB3CFGR_BYTECNT_Msk               (0xffff << 0)
#define CSI_LB3CFGR_BYTECNT                   (0xffff << 0)
#define CSI_LB3CFGR_LINECNT_Pos               16
#define CSI_LB3CFGR_LINECNT_Msk               (0xffff << 16)
#define CSI_LB3CFGR_LINECNT                   (0xffff << 16)

/* Bit fields for CSI_TIM0CFGR register */
#define CSI_TIM0CFGR_COUNT_Pos                0
#define CSI_TIM0CFGR_COUNT_Msk                (0x1ffffff << 0)
#define CSI_TIM0CFGR_COUNT                    (0x1ffffff << 0)

/* Bit fields for CSI_TIM1CFGR register */
#define CSI_TIM1CFGR_COUNT_Pos                0
#define CSI_TIM1CFGR_COUNT_Msk                (0x1ffffff << 0)
#define CSI_TIM1CFGR_COUNT                    (0x1ffffff << 0)

/* Bit fields for CSI_TIM2CFGR register */
#define CSI_TIM2CFGR_COUNT_Pos                0
#define CSI_TIM2CFGR_COUNT_Msk                (0x1ffffff << 0)
#define CSI_TIM2CFGR_COUNT                    (0x1ffffff << 0)

/* Bit fields for CSI_TIM3CFGR register */
#define CSI_TIM3CFGR_COUNT_Pos                0
#define CSI_TIM3CFGR_COUNT_Msk                (0x1ffffff << 0)
#define CSI_TIM3CFGR_COUNT                    (0x1ffffff << 0)

/* Bit fields for CSI_LMCFGR register */
#define CSI_LMCFGR_LANENB_Pos                 8
#define CSI_LMCFGR_LANENB_Msk                 (0x7 << 8)
#define CSI_LMCFGR_LANENB                     (0x7 << 8)
#define CSI_LMCFGR_DL0MAP_Pos                 16
#define CSI_LMCFGR_DL0MAP_Msk                 (0x7 << 16)
#define CSI_LMCFGR_DL0MAP                     (0x7 << 16)
#define CSI_LMCFGR_DL1MAP_Pos                 20
#define CSI_LMCFGR_DL1MAP_Msk                 (0x7 << 20)
#define CSI_LMCFGR_DL1MAP                     (0x7 << 20)

/* Bit fields for CSI_PRGITR register */
#define CSI_PRGITR_LB0VC_Pos                  0
#define CSI_PRGITR_LB0VC_Msk                  (0x3 << 0)
#define CSI_PRGITR_LB0VC                      (0x3 << 0)
#define CSI_PRGITR_LB0EN_Pos                  3
#define CSI_PRGITR_LB0EN_Msk                  (0x1 << 3)
#define CSI_PRGITR_LB0EN                      (0x1 << 3)
#define CSI_PRGITR_LB1VC_Pos                  4
#define CSI_PRGITR_LB1VC_Msk                  (0x3 << 4)
#define CSI_PRGITR_LB1VC                      (0x3 << 4)
#define CSI_PRGITR_LB1EN_Pos                  7
#define CSI_PRGITR_LB1EN_Msk                  (0x1 << 7)
#define CSI_PRGITR_LB1EN                      (0x1 << 7)
#define CSI_PRGITR_LB2VC_Pos                  8
#define CSI_PRGITR_LB2VC_Msk                  (0x3 << 8)
#define CSI_PRGITR_LB2VC                      (0x3 << 8)
#define CSI_PRGITR_LB2EN_Pos                  11
#define CSI_PRGITR_LB2EN_Msk                  (0x1 << 11)
#define CSI_PRGITR_LB2EN                      (0x1 << 11)
#define CSI_PRGITR_LB3VC_Pos                  12
#define CSI_PRGITR_LB3VC_Msk                  (0x3 << 12)
#define CSI_PRGITR_LB3VC                      (0x3 << 12)
#define CSI_PRGITR_LB3EN_Pos                  15
#define CSI_PRGITR_LB3EN_Msk                  (0x1 << 15)
#define CSI_PRGITR_LB3EN                      (0x1 << 15)
#define CSI_PRGITR_TIM0VC_Pos                 16
#define CSI_PRGITR_TIM0VC_Msk                 (0x3 << 16)
#define CSI_PRGITR_TIM0VC                     (0x3 << 16)
#define CSI_PRGITR_TIM0EOF_Pos                18
#define CSI_PRGITR_TIM0EOF_Msk                (0x1 << 18)
#define CSI_PRGITR_TIM0EOF                    (0x1 << 18)
#define CSI_PRGITR_TIM0EN_Pos                 19
#define CSI_PRGITR_TIM0EN_Msk                 (0x1 << 19)
#define CSI_PRGITR_TIM0EN                     (0x1 << 19)
#define CSI_PRGITR_TIM1VC_Pos                 20
#define CSI_PRGITR_TIM1VC_Msk                 (0x3 << 20)
#define CSI_PRGITR_TIM1VC                     (0x3 << 20)
#define CSI_PRGITR_TIM1EOF_Pos                22
#define CSI_PRGITR_TIM1EOF_Msk                (0x1 << 22)
#define CSI_PRGITR_TIM1EOF                    (0x1 << 22)
#define CSI_PRGITR_TIM1EN_Pos                 23
#define CSI_PRGITR_TIM1EN_Msk                 (0x1 << 23)
#define CSI_PRGITR_TIM1EN                     (0x1 << 23)
#define CSI_PRGITR_TIM2VC_Pos                 24
#define CSI_PRGITR_TIM2VC_Msk                 (0x3 << 24)
#define CSI_PRGITR_TIM2VC                     (0x3 << 24)
#define CSI_PRGITR_TIM2EOF_Pos                26
#define CSI_PRGITR_TIM2EOF_Msk                (0x1 << 26)
#define CSI_PRGITR_TIM2EOF                    (0x1 << 26)
#define CSI_PRGITR_TIM2EN_Pos                 27
#define CSI_PRGITR_TIM2EN_Msk                 (0x1 << 27)
#define CSI_PRGITR_TIM2EN                     (0x1 << 27)
#define CSI_PRGITR_TIM3VC_Pos                 28
#define CSI_PRGITR_TIM3VC_Msk                 (0x3 << 28)
#define CSI_PRGITR_TIM3VC                     (0x3 << 28)
#define CSI_PRGITR_TIM3EOF_Pos                30
#define CSI_PRGITR_TIM3EOF_Msk                (0x1 << 30)
#define CSI_PRGITR_TIM3EOF                    (0x1 << 30)
#define CSI_PRGITR_TIM3EN_Pos                 31
#define CSI_PRGITR_TIM3EN_Msk                 (0x1 << 31)
#define CSI_PRGITR_TIM3EN                     (0x1 << 31)

/* Bit fields for CSI_WDR register */
#define CSI_WDR_CNT_Pos                       0
#define CSI_WDR_CNT_Msk                       (0xFFFFFFFF << 0)
#define CSI_WDR_CNT                           (0xFFFFFFFF << 0)

/* Bit fields for CSI_IER0 register */
#define CSI_IER0_LB0IE_Pos                    0
#define CSI_IER0_LB0IE_Msk                    (0x1 << 0)
#define CSI_IER0_LB0IE                        (0x1 << 0)
#define CSI_IER0_LB1IE_Pos                    1
#define CSI_IER0_LB1IE_Msk                    (0x1 << 1)
#define CSI_IER0_LB1IE                        (0x1 << 1)
#define CSI_IER0_LB2IE_Pos                    2
#define CSI_IER0_LB2IE_Msk                    (0x1 << 2)
#define CSI_IER0_LB2IE                        (0x1 << 2)
#define CSI_IER0_LB3IE_Pos                    3
#define CSI_IER0_LB3IE_Msk                    (0x1 << 3)
#define CSI_IER0_LB3IE                        (0x1 << 3)
#define CSI_IER0_TIM0IE_Pos                   4
#define CSI_IER0_TIM0IE_Msk                   (0x1 << 4)
#define CSI_IER0_TIM0IE                       (0x1 << 4)
#define CSI_IER0_TIM1IE_Pos                   5
#define CSI_IER0_TIM1IE_Msk                   (0x1 << 5)
#define CSI_IER0_TIM1IE                       (0x1 << 5)
#define CSI_IER0_TIM2IE_Pos                   6
#define CSI_IER0_TIM2IE_Msk                   (0x1 << 6)
#define CSI_IER0_TIM2IE                       (0x1 << 6)
#define CSI_IER0_TIM3IE_Pos                   7
#define CSI_IER0_TIM3IE_Msk                   (0x1 << 7)
#define CSI_IER0_TIM3IE                       (0x1 << 7)
#define CSI_IER0_SOF0IE_Pos                   8
#define CSI_IER0_SOF0IE_Msk                   (0x1 << 8)
#define CSI_IER0_SOF0IE                       (0x1 << 8)
#define CSI_IER0_SOF1IE_Pos                   9
#define CSI_IER0_SOF1IE_Msk                   (0x1 << 9)
#define CSI_IER0_SOF1IE                       (0x1 << 9)
#define CSI_IER0_SOF2IE_Pos                   10
#define CSI_IER0_SOF2IE_Msk                   (0x1 << 10)
#define CSI_IER0_SOF2IE                       (0x1 << 10)
#define CSI_IER0_SOF3IE_Pos                   11
#define CSI_IER0_SOF3IE_Msk                   (0x1 << 11)
#define CSI_IER0_SOF3IE                       (0x1 << 11)
#define CSI_IER0_EOF0IE_Pos                   12
#define CSI_IER0_EOF0IE_Msk                   (0x1 << 12)
#define CSI_IER0_EOF0IE                       (0x1 << 12)
#define CSI_IER0_EOF1IE_Pos                   13
#define CSI_IER0_EOF1IE_Msk                   (0x1 << 13)
#define CSI_IER0_EOF1IE                       (0x1 << 13)
#define CSI_IER0_EOF2IE_Pos                   14
#define CSI_IER0_EOF2IE_Msk                   (0x1 << 14)
#define CSI_IER0_EOF2IE                       (0x1 << 14)
#define CSI_IER0_EOF3IE_Pos                   15
#define CSI_IER0_EOF3IE_Msk                   (0x1 << 15)
#define CSI_IER0_EOF3IE                       (0x1 << 15)
#define CSI_IER0_SPKTIE_Pos                   16
#define CSI_IER0_SPKTIE_Msk                   (0x1 << 16)
#define CSI_IER0_SPKTIE                       (0x1 << 16)
#define CSI_IER0_CCFIFOFIE_Pos                21
#define CSI_IER0_CCFIFOFIE_Msk                (0x1 << 21)
#define CSI_IER0_CCFIFOFIE                    (0x1 << 21)
#define CSI_IER0_CRCERRIE_Pos                 24
#define CSI_IER0_CRCERRIE_Msk                 (0x1 << 24)
#define CSI_IER0_CRCERRIE                     (0x1 << 24)
#define CSI_IER0_ECCERRIE_Pos                 25
#define CSI_IER0_ECCERRIE_Msk                 (0x1 << 25)
#define CSI_IER0_ECCERRIE                     (0x1 << 25)
#define CSI_IER0_CECCERRIE_Pos                26
#define CSI_IER0_CECCERRIE_Msk                (0x1 << 26)
#define CSI_IER0_CECCERRIE                    (0x1 << 26)
#define CSI_IER0_IDERRIE_Pos                  27
#define CSI_IER0_IDERRIE_Msk                  (0x1 << 27)
#define CSI_IER0_IDERRIE                      (0x1 << 27)
#define CSI_IER0_SPKTERRIE_Pos                28
#define CSI_IER0_SPKTERRIE_Msk                (0x1 << 28)
#define CSI_IER0_SPKTERRIE                    (0x1 << 28)
#define CSI_IER0_WDERRIE_Pos                  29
#define CSI_IER0_WDERRIE_Msk                  (0x1 << 29)
#define CSI_IER0_WDERRIE                      (0x1 << 29)
#define CSI_IER0_SYNCERRIE_Pos                30
#define CSI_IER0_SYNCERRIE_Msk                (0x1 << 30)
#define CSI_IER0_SYNCERRIE                    (0x1 << 30)

/* Bit fields for CSI_IER1 register */
#define CSI_IER1_ESOTDL0IE_Pos                0
#define CSI_IER1_ESOTDL0IE_Msk                (0x1 << 0)
#define CSI_IER1_ESOTDL0IE                    (0x1 << 0)
#define CSI_IER1_ESOTSYNCDL0IE_Pos            1
#define CSI_IER1_ESOTSYNCDL0IE_Msk            (0x1 << 1)
#define CSI_IER1_ESOTSYNCDL0IE                (0x1 << 1)
#define CSI_IER1_EESCDL0IE_Pos                2
#define CSI_IER1_EESCDL0IE_Msk                (0x1 << 2)
#define CSI_IER1_EESCDL0IE                    (0x1 << 2)
#define CSI_IER1_ESYNCESCDL0IE_Pos            3
#define CSI_IER1_ESYNCESCDL0IE_Msk            (0x1 << 3)
#define CSI_IER1_ESYNCESCDL0IE                (0x1 << 3)
#define CSI_IER1_ECTRLDL0IE_Pos               4
#define CSI_IER1_ECTRLDL0IE_Msk               (0x1 << 4)
#define CSI_IER1_ECTRLDL0IE                   (0x1 << 4)
#define CSI_IER1_ESOTDL1IE_Pos                8
#define CSI_IER1_ESOTDL1IE_Msk                (0x1 << 8)
#define CSI_IER1_ESOTDL1IE                    (0x1 << 8)
#define CSI_IER1_ESOTSYNCDL1IE_Pos            9
#define CSI_IER1_ESOTSYNCDL1IE_Msk            (0x1 << 9)
#define CSI_IER1_ESOTSYNCDL1IE                (0x1 << 9)
#define CSI_IER1_EESCDL1IE_Pos                10
#define CSI_IER1_EESCDL1IE_Msk                (0x1 << 10)
#define CSI_IER1_EESCDL1IE                    (0x1 << 10)
#define CSI_IER1_ESYNCESCDL1IE_Pos            11
#define CSI_IER1_ESYNCESCDL1IE_Msk            (0x1 << 11)
#define CSI_IER1_ESYNCESCDL1IE                (0x1 << 11)
#define CSI_IER1_ECTRLDL1IE_Pos               12
#define CSI_IER1_ECTRLDL1IE_Msk               (0x1 << 12)
#define CSI_IER1_ECTRLDL1IE                   (0x1 << 12)

/* Bit fields for CSI_SR0 register */
#define CSI_SR0_LB0F_Pos                      0
#define CSI_SR0_LB0F_Msk                      (0x1 << 0)
#define CSI_SR0_LB0F                          (0x1 << 0)
#define CSI_SR0_LB1F_Pos                      1
#define CSI_SR0_LB1F_Msk                      (0x1 << 1)
#define CSI_SR0_LB1F                          (0x1 << 1)
#define CSI_SR0_LB2F_Pos                      2
#define CSI_SR0_LB2F_Msk                      (0x1 << 2)
#define CSI_SR0_LB2F                          (0x1 << 2)
#define CSI_SR0_LB3F_Pos                      3
#define CSI_SR0_LB3F_Msk                      (0x1 << 3)
#define CSI_SR0_LB3F                          (0x1 << 3)
#define CSI_SR0_TIM0F_Pos                     4
#define CSI_SR0_TIM0F_Msk                     (0x1 << 4)
#define CSI_SR0_TIM0F                         (0x1 << 4)
#define CSI_SR0_TIM1F_Pos                     5
#define CSI_SR0_TIM1F_Msk                     (0x1 << 5)
#define CSI_SR0_TIM1F                         (0x1 << 5)
#define CSI_SR0_TIM2F_Pos                     6
#define CSI_SR0_TIM2F_Msk                     (0x1 << 6)
#define CSI_SR0_TIM2F                         (0x1 << 6)
#define CSI_SR0_TIM3F_Pos                     7
#define CSI_SR0_TIM3F_Msk                     (0x1 << 7)
#define CSI_SR0_TIM3F                         (0x1 << 7)
#define CSI_SR0_SOF0F_Pos                     8
#define CSI_SR0_SOF0F_Msk                     (0x1 << 8)
#define CSI_SR0_SOF0F                         (0x1 << 8)
#define CSI_SR0_SOF1F_Pos                     9
#define CSI_SR0_SOF1F_Msk                     (0x1 << 9)
#define CSI_SR0_SOF1F                         (0x1 << 9)
#define CSI_SR0_SOF2F_Pos                     10
#define CSI_SR0_SOF2F_Msk                     (0x1 << 10)
#define CSI_SR0_SOF2F                         (0x1 << 10)
#define CSI_SR0_SOF3F_Pos                     11
#define CSI_SR0_SOF3F_Msk                     (0x1 << 11)
#define CSI_SR0_SOF3F                         (0x1 << 11)
#define CSI_SR0_EOF0F_Pos                     12
#define CSI_SR0_EOF0F_Msk                     (0x1 << 12)
#define CSI_SR0_EOF0F                         (0x1 << 12)
#define CSI_SR0_EOF1F_Pos                     13
#define CSI_SR0_EOF1F_Msk                     (0x1 << 13)
#define CSI_SR0_EOF1F                         (0x1 << 13)
#define CSI_SR0_EOF2F_Pos                     14
#define CSI_SR0_EOF2F_Msk                     (0x1 << 14)
#define CSI_SR0_EOF2F                         (0x1 << 14)
#define CSI_SR0_EOF3F_Pos                     15
#define CSI_SR0_EOF3F_Msk                     (0x1 << 15)
#define CSI_SR0_EOF3F                         (0x1 << 15)
#define CSI_SR0_SPKTF_Pos                     16
#define CSI_SR0_SPKTF_Msk                     (0x1 << 16)
#define CSI_SR0_SPKTF                         (0x1 << 16)
#define CSI_SR0_VC0STATEF_Pos                 17
#define CSI_SR0_VC0STATEF_Msk                 (0x1 << 17)
#define CSI_SR0_VC0STATEF                     (0x1 << 17)
#define CSI_SR0_VC1STATEF_Pos                 18
#define CSI_SR0_VC1STATEF_Msk                 (0x1 << 18)
#define CSI_SR0_VC1STATEF                     (0x1 << 18)
#define CSI_SR0_VC2STATEF_Pos                 19
#define CSI_SR0_VC2STATEF_Msk                 (0x1 << 19)
#define CSI_SR0_VC2STATEF                     (0x1 << 19)
#define CSI_SR0_VC3STATEF_Pos                 20
#define CSI_SR0_VC3STATEF_Msk                 (0x1 << 20)
#define CSI_SR0_VC3STATEF                     (0x1 << 20)
#define CSI_SR0_CCFIFOFF_Pos                  21
#define CSI_SR0_CCFIFOFF_Msk                  (0x1 << 21)
#define CSI_SR0_CCFIFOFF                      (0x1 << 21)
#define CSI_SR0_CRCERRF_Pos                   24
#define CSI_SR0_CRCERRF_Msk                   (0x1 << 24)
#define CSI_SR0_CRCERRF                       (0x1 << 24)
#define CSI_SR0_ECCERRF_Pos                   25
#define CSI_SR0_ECCERRF_Msk                   (0x1 << 25)
#define CSI_SR0_ECCERRF                       (0x1 << 25)
#define CSI_SR0_CECCERRF_Pos                  26
#define CSI_SR0_CECCERRF_Msk                  (0x1 << 26)
#define CSI_SR0_CECCERRF                      (0x1 << 26)
#define CSI_SR0_IDERRF_Pos                    27
#define CSI_SR0_IDERRF_Msk                    (0x1 << 27)
#define CSI_SR0_IDERRF                        (0x1 << 27)
#define CSI_SR0_SPKTERRF_Pos                  28
#define CSI_SR0_SPKTERRF_Msk                  (0x1 << 28)
#define CSI_SR0_SPKTERRF                      (0x1 << 28)
#define CSI_SR0_WDERRF_Pos                    29
#define CSI_SR0_WDERRF_Msk                    (0x1 << 29)
#define CSI_SR0_WDERRF                        (0x1 << 29)
#define CSI_SR0_SYNCERRF_Pos                  30
#define CSI_SR0_SYNCERRF_Msk                  (0x1 << 30)
#define CSI_SR0_SYNCERRF                      (0x1 << 30)

/* Bit fields for CSI_SR1 register */
#define CSI_SR1_ESOTDL0F_Pos                  0
#define CSI_SR1_ESOTDL0F_Msk                  (0x1 << 0)
#define CSI_SR1_ESOTDL0F                      (0x1 << 0)
#define CSI_SR1_ESOTSYNCDL0F_Pos              1
#define CSI_SR1_ESOTSYNCDL0F_Msk              (0x1 << 1)
#define CSI_SR1_ESOTSYNCDL0F                  (0x1 << 1)
#define CSI_SR1_EESCDL0F_Pos                  2
#define CSI_SR1_EESCDL0F_Msk                  (0x1 << 2)
#define CSI_SR1_EESCDL0F                      (0x1 << 2)
#define CSI_SR1_ESYNCESCDL0F_Pos              3
#define CSI_SR1_ESYNCESCDL0F_Msk              (0x1 << 3)
#define CSI_SR1_ESYNCESCDL0F                  (0x1 << 3)
#define CSI_SR1_ECTRLDL0F_Pos                 4
#define CSI_SR1_ECTRLDL0F_Msk                 (0x1 << 4)
#define CSI_SR1_ECTRLDL0F                     (0x1 << 4)
#define CSI_SR1_ESOTDL1F_Pos                  8
#define CSI_SR1_ESOTDL1F_Msk                  (0x1 << 8)
#define CSI_SR1_ESOTDL1F                      (0x1 << 8)
#define CSI_SR1_ESOTSYNCDL1F_Pos              9
#define CSI_SR1_ESOTSYNCDL1F_Msk              (0x1 << 9)
#define CSI_SR1_ESOTSYNCDL1F                  (0x1 << 9)
#define CSI_SR1_EESCDL1F_Pos                  10
#define CSI_SR1_EESCDL1F_Msk                  (0x1 << 10)
#define CSI_SR1_EESCDL1F                      (0x1 << 10)
#define CSI_SR1_ESYNCESCDL1F_Pos              11
#define CSI_SR1_ESYNCESCDL1F_Msk              (0x1 << 11)
#define CSI_SR1_ESYNCESCDL1F                  (0x1 << 11)
#define CSI_SR1_ECTRLDL1F_Pos                 12
#define CSI_SR1_ECTRLDL1F_Msk                 (0x1 << 12)
#define CSI_SR1_ECTRLDL1F                     (0x1 << 12)
#define CSI_SR1_ACTDL0F_Pos                   16
#define CSI_SR1_ACTDL0F_Msk                   (0x1 << 16)
#define CSI_SR1_ACTDL0F                       (0x1 << 16)
#define CSI_SR1_SYNCDL0F_Pos                  17
#define CSI_SR1_SYNCDL0F_Msk                  (0x1 << 17)
#define CSI_SR1_SYNCDL0F                      (0x1 << 17)
#define CSI_SR1_SKCALDL0F_Pos                 18
#define CSI_SR1_SKCALDL0F_Msk                 (0x1 << 18)
#define CSI_SR1_SKCALDL0F                     (0x1 << 18)
#define CSI_SR1_STOPDL0F_Pos                  19
#define CSI_SR1_STOPDL0F_Msk                  (0x1 << 19)
#define CSI_SR1_STOPDL0F                      (0x1 << 19)
#define CSI_SR1_ULPNDL0F_Pos                  20
#define CSI_SR1_ULPNDL0F_Msk                  (0x1 << 20)
#define CSI_SR1_ULPNDL0F                      (0x1 << 20)
#define CSI_SR1_ACTDL1F_Pos                   22
#define CSI_SR1_ACTDL1F_Msk                   (0x1 << 22)
#define CSI_SR1_ACTDL1F                       (0x1 << 22)
#define CSI_SR1_SYNCDL1F_Pos                  23
#define CSI_SR1_SYNCDL1F_Msk                  (0x1 << 23)
#define CSI_SR1_SYNCDL1F                      (0x1 << 23)
#define CSI_SR1_SKCALDL1F_Pos                 24
#define CSI_SR1_SKCALDL1F_Msk                 (0x1 << 24)
#define CSI_SR1_SKCALDL1F                     (0x1 << 24)
#define CSI_SR1_STOPDL1F_Pos                  25
#define CSI_SR1_STOPDL1F_Msk                  (0x1 << 25)
#define CSI_SR1_STOPDL1F                      (0x1 << 25)
#define CSI_SR1_ULPNDL1F_Pos                  26
#define CSI_SR1_ULPNDL1F_Msk                  (0x1 << 26)
#define CSI_SR1_ULPNDL1F                      (0x1 << 26)
#define CSI_SR1_STOPCLF_Pos                   28
#define CSI_SR1_STOPCLF_Msk                   (0x1 << 28)
#define CSI_SR1_STOPCLF                       (0x1 << 28)
#define CSI_SR1_ULPNACTF_Pos                  29
#define CSI_SR1_ULPNACTF_Msk                  (0x1 << 29)
#define CSI_SR1_ULPNACTF                      (0x1 << 29)
#define CSI_SR1_ULPNCLF_Pos                   30
#define CSI_SR1_ULPNCLF_Msk                   (0x1 << 30)
#define CSI_SR1_ULPNCLF                       (0x1 << 30)
#define CSI_SR1_ACTCLF_Pos                    31
#define CSI_SR1_ACTCLF_Msk                    (0x1 << 31)
#define CSI_SR1_ACTCLF                        (0x1 << 31)

/* Bit fields for CSI_FCR0 register */
#define CSI_FCR0_CLB0F_Pos                    0
#define CSI_FCR0_CLB0F_Msk                    (0x1 << 0)
#define CSI_FCR0_CLB0F                        (0x1 << 0)
#define CSI_FCR0_CLB1F_Pos                    1
#define CSI_FCR0_CLB1F_Msk                    (0x1 << 1)
#define CSI_FCR0_CLB1F                        (0x1 << 1)
#define CSI_FCR0_CLB2F_Pos                    2
#define CSI_FCR0_CLB2F_Msk                    (0x1 << 2)
#define CSI_FCR0_CLB2F                        (0x1 << 2)
#define CSI_FCR0_CLB3F_Pos                    3
#define CSI_FCR0_CLB3F_Msk                    (0x1 << 3)
#define CSI_FCR0_CLB3F                        (0x1 << 3)
#define CSI_FCR0_CTIM0F_Pos                   4
#define CSI_FCR0_CTIM0F_Msk                   (0x1 << 4)
#define CSI_FCR0_CTIM0F                       (0x1 << 4)
#define CSI_FCR0_CTIM1F_Pos                   5
#define CSI_FCR0_CTIM1F_Msk                   (0x1 << 5)
#define CSI_FCR0_CTIM1F                       (0x1 << 5)
#define CSI_FCR0_CTIM2F_Pos                   6
#define CSI_FCR0_CTIM2F_Msk                   (0x1 << 6)
#define CSI_FCR0_CTIM2F                       (0x1 << 6)
#define CSI_FCR0_CTIM3F_Pos                   7
#define CSI_FCR0_CTIM3F_Msk                   (0x1 << 7)
#define CSI_FCR0_CTIM3F                       (0x1 << 7)
#define CSI_FCR0_CSOF0F_Pos                   8
#define CSI_FCR0_CSOF0F_Msk                   (0x1 << 8)
#define CSI_FCR0_CSOF0F                       (0x1 << 8)
#define CSI_FCR0_CSOF1F_Pos                   9
#define CSI_FCR0_CSOF1F_Msk                   (0x1 << 9)
#define CSI_FCR0_CSOF1F                       (0x1 << 9)
#define CSI_FCR0_CSOF2F_Pos                   10
#define CSI_FCR0_CSOF2F_Msk                   (0x1 << 10)
#define CSI_FCR0_CSOF2F                       (0x1 << 10)
#define CSI_FCR0_CSOF3F_Pos                   11
#define CSI_FCR0_CSOF3F_Msk                   (0x1 << 11)
#define CSI_FCR0_CSOF3F                       (0x1 << 11)
#define CSI_FCR0_CEOF0F_Pos                   12
#define CSI_FCR0_CEOF0F_Msk                   (0x1 << 12)
#define CSI_FCR0_CEOF0F                       (0x1 << 12)
#define CSI_FCR0_CEOF1F_Pos                   13
#define CSI_FCR0_CEOF1F_Msk                   (0x1 << 13)
#define CSI_FCR0_CEOF1F                       (0x1 << 13)
#define CSI_FCR0_CEOF2F_Pos                   14
#define CSI_FCR0_CEOF2F_Msk                   (0x1 << 14)
#define CSI_FCR0_CEOF2F                       (0x1 << 14)
#define CSI_FCR0_CEOF3F_Pos                   15
#define CSI_FCR0_CEOF3F_Msk                   (0x1 << 15)
#define CSI_FCR0_CEOF3F                       (0x1 << 15)
#define CSI_FCR0_CSPKTF_Pos                   16
#define CSI_FCR0_CSPKTF_Msk                   (0x1 << 16)
#define CSI_FCR0_CSPKTF                       (0x1 << 16)
#define CSI_FCR0_CCCFIFOFF_Pos                21
#define CSI_FCR0_CCCFIFOFF_Msk                (0x1 << 21)
#define CSI_FCR0_CCCFIFOFF                    (0x1 << 21)
#define CSI_FCR0_CCRCERRF_Pos                 24
#define CSI_FCR0_CCRCERRF_Msk                 (0x1 << 24)
#define CSI_FCR0_CCRCERRF                     (0x1 << 24)
#define CSI_FCR0_CECCERRF_Pos                 25
#define CSI_FCR0_CECCERRF_Msk                 (0x1 << 25)
#define CSI_FCR0_CECCERRF                     (0x1 << 25)
#define CSI_FCR0_CCECCERRF_Pos                26
#define CSI_FCR0_CCECCERRF_Msk                (0x1 << 26)
#define CSI_FCR0_CCECCERRF                    (0x1 << 26)
#define CSI_FCR0_CIDERRF_Pos                  27
#define CSI_FCR0_CIDERRF_Msk                  (0x1 << 27)
#define CSI_FCR0_CIDERRF                      (0x1 << 27)
#define CSI_FCR0_CSPKTERRF_Pos                28
#define CSI_FCR0_CSPKTERRF_Msk                (0x1 << 28)
#define CSI_FCR0_CSPKTERRF                    (0x1 << 28)
#define CSI_FCR0_CWDERRF_Pos                  29
#define CSI_FCR0_CWDERRF_Msk                  (0x1 << 29)
#define CSI_FCR0_CWDERRF                      (0x1 << 29)
#define CSI_FCR0_CSYNCERRF_Pos                30
#define CSI_FCR0_CSYNCERRF_Msk                (0x1 << 30)
#define CSI_FCR0_CSYNCERRF                    (0x1 << 30)

/* Bit fields for CSI_FCR1 register */
#define CSI_FCR1_CESOTDL0F_Pos                0
#define CSI_FCR1_CESOTDL0F_Msk                (0x1 << 0)
#define CSI_FCR1_CESOTDL0F                    (0x1 << 0)
#define CSI_FCR1_CESOTSYNCDL0F_Pos            1
#define CSI_FCR1_CESOTSYNCDL0F_Msk            (0x1 << 1)
#define CSI_FCR1_CESOTSYNCDL0F                (0x1 << 1)
#define CSI_FCR1_CEESCDL0F_Pos                2
#define CSI_FCR1_CEESCDL0F_Msk                (0x1 << 2)
#define CSI_FCR1_CEESCDL0F                    (0x1 << 2)
#define CSI_FCR1_CESYNCESCDL0F_Pos            3
#define CSI_FCR1_CESYNCESCDL0F_Msk            (0x1 << 3)
#define CSI_FCR1_CESYNCESCDL0F                (0x1 << 3)
#define CSI_FCR1_CECTRLDL0F_Pos               4
#define CSI_FCR1_CECTRLDL0F_Msk               (0x1 << 4)
#define CSI_FCR1_CECTRLDL0F                   (0x1 << 4)
#define CSI_FCR1_CESOTDL1F_Pos                8
#define CSI_FCR1_CESOTDL1F_Msk                (0x1 << 8)
#define CSI_FCR1_CESOTDL1F                    (0x1 << 8)
#define CSI_FCR1_CESOTSYNCDL1F_Pos            9
#define CSI_FCR1_CESOTSYNCDL1F_Msk            (0x1 << 9)
#define CSI_FCR1_CESOTSYNCDL1F                (0x1 << 9)
#define CSI_FCR1_CEESCDL1F_Pos                10
#define CSI_FCR1_CEESCDL1F_Msk                (0x1 << 10)
#define CSI_FCR1_CEESCDL1F                    (0x1 << 10)
#define CSI_FCR1_CESYNCESCDL1F_Pos            11
#define CSI_FCR1_CESYNCESCDL1F_Msk            (0x1 << 11)
#define CSI_FCR1_CESYNCESCDL1F                (0x1 << 11)
#define CSI_FCR1_CECTRLDL1F_Pos               12
#define CSI_FCR1_CECTRLDL1F_Msk               (0x1 << 12)
#define CSI_FCR1_CECTRLDL1F                   (0x1 << 12)

/* Bit fields for CSI_SPDFR register */
#define CSI_SPDFR_DATAFIELD_Pos               0
#define CSI_SPDFR_DATAFIELD_Msk               (0xffff << 0)
#define CSI_SPDFR_DATAFIELD                   (0xffff << 0)
#define CSI_SPDFR_DATATYPE_Pos                16
#define CSI_SPDFR_DATATYPE_Msk                (0x3f << 16)
#define CSI_SPDFR_DATATYPE                    (0x3f << 16)
#define CSI_SPDFR_VCHANNEL_Pos                22
#define CSI_SPDFR_VCHANNEL_Msk                (0x3 << 22)
#define CSI_SPDFR_VCHANNEL                    (0x3 << 22)

/* Bit fields for CSI_ERR1 register */
#define CSI_ERR1_CRCDTERR_Pos                 0
#define CSI_ERR1_CRCDTERR_Msk                 (0x3f << 0)
#define CSI_ERR1_CRCDTERR                     (0x3f << 0)
#define CSI_ERR1_CRCVCERR_Pos                 6
#define CSI_ERR1_CRCVCERR_Msk                 (0x3 << 6)
#define CSI_ERR1_CRCVCERR                     (0x3 << 6)
#define CSI_ERR1_CECCDTERR_Pos                8
#define CSI_ERR1_CECCDTERR_Msk                (0x3f << 8)
#define CSI_ERR1_CECCDTERR                    (0x3f << 8)
#define CSI_ERR1_CECCVCERR_Pos                14
#define CSI_ERR1_CECCVCERR_Msk                (0x3 << 14)
#define CSI_ERR1_CECCVCERR                    (0x3 << 14)
#define CSI_ERR1_IDDTERR_Pos                  16
#define CSI_ERR1_IDDTERR_Msk                  (0x3f << 16)
#define CSI_ERR1_IDDTERR                      (0x3f << 16)
#define CSI_ERR1_IDVCERR_Pos                  22
#define CSI_ERR1_IDVCERR_Msk                  (0x3 << 22)
#define CSI_ERR1_IDVCERR                      (0x3 << 22)

/* Bit fields for CSI_ERR2 register */
#define CSI_ERR2_SPKTDTERR_Pos                0
#define CSI_ERR2_SPKTDTERR_Msk                (0x3f << 0)
#define CSI_ERR2_SPKTDTERR                    (0x3f << 0)
#define CSI_ERR2_SPKTVCERR_Pos                6
#define CSI_ERR2_SPKTVCERR_Msk                (0x3 << 6)
#define CSI_ERR2_SPKTVCERR                    (0x3 << 6)
#define CSI_ERR2_WDVCERR_Pos                  16
#define CSI_ERR2_WDVCERR_Msk                  (0x3 << 16)
#define CSI_ERR2_WDVCERR                      (0x3 << 16)
#define CSI_ERR2_SYNCVCERR_Pos                18
#define CSI_ERR2_SYNCVCERR_Msk                (0x3 << 18)
#define CSI_ERR2_SYNCVCERR                    (0x3 << 18)

/* Bit fields for CSI_HWCFGR register */
#define CSI_HWCFGR_TECHNO_Pos                 0
#define CSI_HWCFGR_TECHNO_Msk                 (0xf << 0)
#define CSI_HWCFGR_TECHNO                     (0xf << 0)

/* Bit fields for CSI_VERR register */
#define CSI_VERR_MINREV_Pos                   0
#define CSI_VERR_MINREV_Msk                   (0xf << 0)
#define CSI_VERR_MINREV                       (0xf << 0)
#define CSI_VERR_MAJREV_Pos                   4
#define CSI_VERR_MAJREV_Msk                   (0xf << 4)
#define CSI_VERR_MAJREV                       (0xf << 4)

/* Bit fields for CSI_IPIDR register */
#define CSI_IPIDR_ID_Pos                      0
#define CSI_IPIDR_ID_Msk                      (0xFFFFFFFF << 0)
#define CSI_IPIDR_ID                          (0xFFFFFFFF << 0)

/* Bit fields for CSI_SIDR register */
#define CSI_SIDR_SID_Pos                      0
#define CSI_SIDR_SID_Msk                      (0xFFFFFFFF << 0)
#define CSI_SIDR_SID                          (0xFFFFFFFF << 0)

/******************************************************************************/
/*                                                                            */
/*                                DBGMCU                                      */
/*                                                                            */
/* - according to chapter "1.10.11 Microcontroller Debug Unit (DBGMCU)" in    */
/*    (version v0.1 - May 07th, 2019)                                         */
/* - But with registers and bits names aligned with other STM32               */
/*   For instance in STM32U5 (Cobra) CMSIS device component and               */
/*    Reference manual chapter "64.11 Microcontroller debug unit (DBGMCU)"    */
/*    and STM32U5 (Cobra) Reference manual RM0456_Cobra_v0.1c.pdf             */
/*    (version v0.1c - August 30th, 2019)                                     */
/******************************************************************************/
/********************  Bit definition for DBGMCU_IDCODE register  *************/
#define DBGMCU_IDCODE_DEV_ID_Pos                    (0U)
#define DBGMCU_IDCODE_DEV_ID_Msk                    (0xFFFU << DBGMCU_IDCODE_DEV_ID_Pos)                /*!< 0x00000FFF */
#define DBGMCU_IDCODE_DEV_ID                        DBGMCU_IDCODE_DEV_ID_Msk                            /*!< Device ID */
#define DBGMCU_IDCODE_REV_ID_Pos                    (16U)
#define DBGMCU_IDCODE_REV_ID_Msk                    (0xFFFFU << DBGMCU_IDCODE_REV_ID_Pos)               /*!< 0xFFFF0000 */
#define DBGMCU_IDCODE_REV_ID                        DBGMCU_IDCODE_REV_ID_Msk                            /*!< Device revision */

/********************  Bit definition for DBGMCU_CR register  *****************/
#define DBGMCU_CR_DBG_SLEEP_Pos                     (0U)
#define DBGMCU_CR_DBG_SLEEP_Msk                     (0x1U << DBGMCU_CR_DBG_SLEEP_Pos)                   /*!< 0x00000001 */
#define DBGMCU_CR_DBG_SLEEP                         DBGMCU_CR_DBG_SLEEP_Msk                             /*!< Allow debug in SLEEP mode */
#define DBGMCU_CR_DBG_STOP_Pos                      (1U)
#define DBGMCU_CR_DBG_STOP_Msk                      (0x1U << DBGMCU_CR_DBG_STOP_Pos)                    /*!< 0x00000002 */
#define DBGMCU_CR_DBG_STOP                          DBGMCU_CR_DBG_STOP_Msk                              /*!< Allow debug in STOP mode */
#define DBGMCU_CR_DBG_STANDBY_Pos                   (2U)
#define DBGMCU_CR_DBG_STANDBY_Msk                   (0x1U << DBGMCU_CR_DBG_STANDBY_Pos)                 /*!< 0x00000004 */
#define DBGMCU_CR_DBG_STANDBY                       DBGMCU_CR_DBG_STANDBY_Msk                           /*!< Allow debug in STANDBY mode */
#define DBGMCU_CR_DBG_SWD_SELN_Pos                  (4U)
#define DBGMCU_CR_DBG_SWD_SELN_Msk                  (0x1U << DBGMCU_CR_DBG_SWD_SELN_Pos)                /*!< 0x00000010 */
#define DBGMCU_CR_DBG_SWD_SELN                      DBGMCU_CR_DBG_SWD_SELN_Msk                          /*!< Select M0+ debug interface */

/******************  Bit definition for DBGMCU_CRA35 register  ****************/
#define DBGMCU_CRA35_WDFZCTL_Pos                    (0U)
#define DBGMCU_CRA35_WDFZCTL_Msk                    (0x1U << DBGMCU_CRA35_WDFZCTL_Pos)                  /*!< 0x00000001 */
#define DBGMCU_CRA35_WDFZCTL                        DBGMCU_CRA35_WDFZCTL_Msk                            /*!< IWDG1 behavior when secure debug enabled */
#define DBGMCU_CRA35_OS_HALT_DBG_Pos                (1U)
#define DBGMCU_CRA35_OS_HALT_DBG_Msk                (0x1U << DBGMCU_CRA35_OS_HALT_DBG_Pos)              /*!< 0x00000002 */
#define DBGMCU_CRA35_OS_HALT_DBG                    DBGMCU_CRA35_OS_HALT_DBG_Msk                        /*!< STGEN behavior when debug is enabled */

/********************  Bit definition for AHB2LFZ register  *******************/
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Pos      (0U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Pos)    /*!< 0x00000001 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Msk              /*!< HPDMA1 Channel 0 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Pos      (1U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Pos)    /*!< 0x00000002 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Msk              /*!< HPDMA1 Channel 1 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Pos      (2U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Pos)    /*!< 0x00000004 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Msk              /*!< HPDMA1 Channel 2 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Pos      (3U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Pos)    /*!< 0x00000008 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Msk              /*!< HPDMA1 Channel 3 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Pos      (4U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Pos)    /*!< 0x00000010 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Msk              /*!< HPDMA1 Channel 4 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Pos      (5U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Pos)    /*!< 0x00000020 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Msk              /*!< HPDMA1 Channel 5 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Pos      (6U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Pos)    /*!< 0x00000040 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Msk              /*!< HPDMA1 Channel 6 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Pos      (7U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Pos)    /*!< 0x00000080 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Msk              /*!< HPDMA1 Channel 7 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Pos      (8U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Pos)    /*!< 0x00000100 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Msk              /*!< HPDMA1 Channel 8 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Pos      (9U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Pos)    /*!< 0x00000200 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Msk              /*!< HPDMA1 Channel 9 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Pos     (10U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Pos)   /*!< 0x00000400 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Msk             /*!< HPDMA1 Channel 10 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Pos     (11U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Pos)   /*!< 0x00000800 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Msk             /*!< HPDMA1 Channel 11 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Pos     (12U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Pos)   /*!< 0x00001000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Msk             /*!< HPDMA1 Channel 12 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Pos     (13U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Pos)   /*!< 0x00002000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Msk             /*!< HPDMA1 Channel 13 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Pos     (14U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Pos)   /*!< 0x00004000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Msk             /*!< HPDMA1 Channel 14 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Pos     (15U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Pos)   /*!< 0x00008000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Msk             /*!< HPDMA1 Channel 15 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Pos      (16U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Pos)    /*!< 0x00010000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Msk              /*!< HPDMA2 Channel 0 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Pos      (17U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Pos)    /*!< 0x00020000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Msk              /*!< HPDMA2 Channel 1 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Pos      (18U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Pos)    /*!< 0x00040000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Msk              /*!< HPDMA2 Channel 2 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Pos      (19U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Pos)    /*!< 0x00080000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Msk              /*!< HPDMA2 Channel 3 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Pos      (20U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Pos)    /*!< 0x00100000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Msk              /*!< HPDMA2 Channel 4 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Pos      (21U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Pos)    /*!< 0x00200000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Msk              /*!< HPDMA2 Channel 5 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Pos      (22U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Pos)    /*!< 0x00400000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Msk              /*!< HPDMA2 Channel 6 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Pos      (23U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Pos)    /*!< 0x00800000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Msk              /*!< HPDMA2 Channel 7 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Pos      (24U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Pos)    /*!< 0x01000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Msk              /*!< HPDMA2 Channel 8 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Pos      (25U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Msk      (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Pos)    /*!< 0x02000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Msk              /*!< HPDMA2 Channel 9 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Pos     (26U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Pos)   /*!< 0x04000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Msk             /*!< HPDMA2 Channel 10 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Pos     (27U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Pos)   /*!< 0x08000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Msk             /*!< HPDMA2 Channel 11 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Pos     (28U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Pos)   /*!< 0x10000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Msk             /*!< HPDMA2 Channel 12 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Pos     (29U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Pos)   /*!< 0x20000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Msk             /*!< HPDMA2 Channel 13 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Pos     (30U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Pos)   /*!< 0x40000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Msk             /*!< HPDMA2 Channel 14 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Pos     (31U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Msk     (0x1U << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Pos)   /*!< 0x80000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Msk             /*!< HPDMA2 Channel 15 suspend in debug */

/********************  Bit definition for AHB2HFZ register  *******************/
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Pos      (0U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Pos)    /*!< 0x00000001 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Msk              /*!< HPDMA3 Channel 0 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Pos      (1U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Pos)    /*!< 0x00000002 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Msk              /*!< HPDMA3 Channel 1 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Pos      (2U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Pos)    /*!< 0x00000004 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Msk              /*!< HPDMA3 Channel 2 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Pos      (3U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Pos)    /*!< 0x00000008 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Msk              /*!< HPDMA3 Channel 3 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Pos      (4U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Pos)    /*!< 0x00000010 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Msk              /*!< HPDMA3 Channel 4 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Pos      (5U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Pos)    /*!< 0x00000020 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Msk              /*!< HPDMA3 Channel 5 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Pos      (6U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Pos)    /*!< 0x00000040 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Msk              /*!< HPDMA3 Channel 6 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Pos      (7U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Pos)    /*!< 0x00000080 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Msk              /*!< HPDMA3 Channel 7 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Pos      (8U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Pos)    /*!< 0x00000100 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Msk              /*!< HPDMA3 Channel 8 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Pos      (9U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Msk      (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Pos)    /*!< 0x00000200 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Msk              /*!< HPDMA3 Channel 9 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Pos     (10U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Msk     (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Pos)   /*!< 0x00000400 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Msk             /*!< HPDMA3 Channel 10 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Pos     (11U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Msk     (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Pos)   /*!< 0x00000800 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Msk             /*!< HPDMA3 Channel 11 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Pos     (12U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Msk     (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Pos)   /*!< 0x00001000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Msk             /*!< HPDMA3 Channel 12 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Pos     (13U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Msk     (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Pos)   /*!< 0x00002000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Msk             /*!< HPDMA3 Channel 13 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Pos     (14U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Msk     (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Pos)   /*!< 0x00004000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Msk             /*!< HPDMA3 Channel 14 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Pos     (15U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Msk     (0x1U << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Pos)   /*!< 0x00008000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Msk             /*!< HPDMA3 Channel 15 suspend in debug */

/********************  Bit definition for AHBSRFZ register  *******************/
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Pos       (0U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Msk       (0x1U << DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Pos)     /*!< 0x00000001 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Msk               /*!< LPDMA Channel 0 suspend in debug */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Pos       (1U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Msk       (0x1U << DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Pos)     /*!< 0x00000002 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Msk               /*!< LPDMA Channel 1 suspend in debug */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Pos       (2U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Msk       (0x1U << DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Pos)     /*!< 0x00000004 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Msk               /*!< LPDMA Channel 2 suspend in debug */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Pos       (3U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Msk       (0x1U << DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Pos)     /*!< 0x00000008 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Msk               /*!< LPDMA Channel 3 suspend in debug */

/******************  Bit definition for APBSR_RTCFZ register  *****************/
#define DBGMCU_APBSR_RTCFZ_DBG_RTC_STOP_Pos         (0U)
#define DBGMCU_APBSR_RTCFZ_DBG_RTC_STOP_Msk         (0x1U << DBGMCU_APBSR_RTCFZ_DBG_RTC_STOP_Pos)       /*!< 0x00000001 */
#define DBGMCU_APBSR_RTCFZ_DBG_RTC_STOP             DBGMCU_APBSR_RTCFZ_DBG_RTC_STOP_Msk                 /*!< RTC suspend in debug */

/********************  Bit definition for APB1FZ register  ********************/
#define DBGMCU_APB1FZ_DBG_TIM2_STOP_Pos             (0U)
#define DBGMCU_APB1FZ_DBG_TIM2_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_TIM2_STOP_Pos)           /*!< 0x00000001 */
#define DBGMCU_APB1FZ_DBG_TIM2_STOP                 DBGMCU_APB1FZ_DBG_TIM2_STOP_Msk                     /*!< TIM2 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM3_STOP_Pos             (1U)
#define DBGMCU_APB1FZ_DBG_TIM3_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_TIM3_STOP_Pos)           /*!< 0x00000002 */
#define DBGMCU_APB1FZ_DBG_TIM3_STOP                 DBGMCU_APB1FZ_DBG_TIM3_STOP_Msk                     /*!< TIM3 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM4_STOP_Pos             (2U)
#define DBGMCU_APB1FZ_DBG_TIM4_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_TIM4_STOP_Pos)           /*!< 0x00000004 */
#define DBGMCU_APB1FZ_DBG_TIM4_STOP                 DBGMCU_APB1FZ_DBG_TIM4_STOP_Msk                     /*!< TIM4 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM5_STOP_Pos             (3U)
#define DBGMCU_APB1FZ_DBG_TIM5_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_TIM5_STOP_Pos)           /*!< 0x00000008 */
#define DBGMCU_APB1FZ_DBG_TIM5_STOP                 DBGMCU_APB1FZ_DBG_TIM5_STOP_Msk                     /*!< TIM5 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM6_STOP_Pos             (4U)
#define DBGMCU_APB1FZ_DBG_TIM6_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_TIM6_STOP_Pos)           /*!< 0x00000010 */
#define DBGMCU_APB1FZ_DBG_TIM6_STOP                 DBGMCU_APB1FZ_DBG_TIM6_STOP_Msk                     /*!< TIM6 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM7_STOP_Pos             (5U)
#define DBGMCU_APB1FZ_DBG_TIM7_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_TIM7_STOP_Pos)           /*!< 0x00000020 */
#define DBGMCU_APB1FZ_DBG_TIM7_STOP                 DBGMCU_APB1FZ_DBG_TIM7_STOP_Msk                     /*!< TIM7 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM12_STOP_Pos            (6U)
#define DBGMCU_APB1FZ_DBG_TIM12_STOP_Msk            (0x1U << DBGMCU_APB1FZ_DBG_TIM12_STOP_Pos)          /*!< 0x00000040 */
#define DBGMCU_APB1FZ_DBG_TIM12_STOP                DBGMCU_APB1FZ_DBG_TIM12_STOP_Msk                    /*!< TIM12 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM13_STOP_Pos            (7U)
#define DBGMCU_APB1FZ_DBG_TIM13_STOP_Msk            (0x1U << DBGMCU_APB1FZ_DBG_TIM13_STOP_Pos)          /*!< 0x00000080 */
#define DBGMCU_APB1FZ_DBG_TIM13_STOP                DBGMCU_APB1FZ_DBG_TIM13_STOP_Msk                    /*!< TIM13 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM14_STOP_Pos            (8U)
#define DBGMCU_APB1FZ_DBG_TIM14_STOP_Msk            (0x1U << DBGMCU_APB1FZ_DBG_TIM14_STOP_Pos)          /*!< 0x00000100 */
#define DBGMCU_APB1FZ_DBG_TIM14_STOP                DBGMCU_APB1FZ_DBG_TIM14_STOP_Msk                    /*!< TIM14 suspend in debug */
#define DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Pos           (9U)
#define DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Msk           (0x1U << DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Pos)         /*!< 0x00000200 */
#define DBGMCU_APB1FZ_DBG_LPTIM1_STOP               DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Msk                   /*!< LPTIM1 suspend in debug */
#define DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Pos           (10U)
#define DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Msk           (0x1U << DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Pos)         /*!< 0x00000400 */
#define DBGMCU_APB1FZ_DBG_LPTIM2_STOP               DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Msk                   /*!< LPTIM2 suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C1_STOP_Pos             (18U)
#define DBGMCU_APB1FZ_DBG_I2C1_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_I2C1_STOP_Pos)           /*!< 0x00040000 */
#define DBGMCU_APB1FZ_DBG_I2C1_STOP                 DBGMCU_APB1FZ_DBG_I2C1_STOP_Msk                     /*!< I2C1 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C2_STOP_Pos             (19U)
#define DBGMCU_APB1FZ_DBG_I2C2_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_I2C2_STOP_Pos)           /*!< 0x00080000 */
#define DBGMCU_APB1FZ_DBG_I2C2_STOP                 DBGMCU_APB1FZ_DBG_I2C2_STOP_Msk                     /*!< I2C2 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C3_STOP_Pos             (20U)
#define DBGMCU_APB1FZ_DBG_I2C3_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_I2C3_STOP_Pos)           /*!< 0x00100000 */
#define DBGMCU_APB1FZ_DBG_I2C3_STOP                 DBGMCU_APB1FZ_DBG_I2C3_STOP_Msk                     /*!< I2C3 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C4_STOP_Pos             (21U)
#define DBGMCU_APB1FZ_DBG_I2C4_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_I2C4_STOP_Pos)           /*!< 0x00200000 */
#define DBGMCU_APB1FZ_DBG_I2C4_STOP                 DBGMCU_APB1FZ_DBG_I2C4_STOP_Msk                     /*!< I2C4 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C5_STOP_Pos             (22U)
#define DBGMCU_APB1FZ_DBG_I2C5_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_I2C5_STOP_Pos)           /*!< 0x00400000 */
#define DBGMCU_APB1FZ_DBG_I2C5_STOP                 DBGMCU_APB1FZ_DBG_I2C5_STOP_Msk                     /*!< I2C5 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C6_STOP_Pos             (23U)
#define DBGMCU_APB1FZ_DBG_I2C6_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_I2C6_STOP_Pos)           /*!< 0x00800000 */
#define DBGMCU_APB1FZ_DBG_I2C6_STOP                 DBGMCU_APB1FZ_DBG_I2C6_STOP_Msk                     /*!< I2C6 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C7_STOP_Pos             (24U)
#define DBGMCU_APB1FZ_DBG_I2C7_STOP_Msk             (0x1U << DBGMCU_APB1FZ_DBG_I2C7_STOP_Pos)           /*!< 0x01000000 */
#define DBGMCU_APB1FZ_DBG_I2C7_STOP                 DBGMCU_APB1FZ_DBG_I2C7_STOP_Msk                     /*!< I2C7 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM10_STOP_Pos            (29U)
#define DBGMCU_APB1FZ_DBG_TIM10_STOP_Msk            (0x1U << DBGMCU_APB1FZ_DBG_TIM10_STOP_Pos)          /*!< 0x2000000 */
#define DBGMCU_APB1FZ_DBG_TIM10_STOP                DBGMCU_APB1FZ_DBG_TIM10_STOP_Msk                    /*!< TIM10 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM11_STOP_Pos            (30U)
#define DBGMCU_APB1FZ_DBG_TIM11_STOP_Msk            (0x1U << DBGMCU_APB1FZ_DBG_TIM11_STOP_Pos)          /*!< 0x40000000 */
#define DBGMCU_APB1FZ_DBG_TIM11_STOP                DBGMCU_APB1FZ_DBG_TIM11_STOP_Msk                    /*!< TIM11 suspend in debug */

/********************  Bit definition for APB2FZ register  ********************/
#define DBGMCU_APB2FZ_DBG_TIM1_STOP_Pos             (0U)
#define DBGMCU_APB2FZ_DBG_TIM1_STOP_Msk             (0x1U << DBGMCU_APB2FZ_DBG_TIM1_STOP_Pos)           /*!< 0x00000001 */
#define DBGMCU_APB2FZ_DBG_TIM1_STOP                 DBGMCU_APB2FZ_DBG_TIM1_STOP_Msk                     /*!< TIM1 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM8_STOP_Pos             (1U)
#define DBGMCU_APB2FZ_DBG_TIM8_STOP_Msk             (0x1U << DBGMCU_APB2FZ_DBG_TIM8_STOP_Pos)           /*!< 0x00000002 */
#define DBGMCU_APB2FZ_DBG_TIM8_STOP                 DBGMCU_APB2FZ_DBG_TIM8_STOP_Msk                     /*!< TIM8 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM15_STOP_Pos            (5U)
#define DBGMCU_APB2FZ_DBG_TIM15_STOP_Msk            (0x1U << DBGMCU_APB2FZ_DBG_TIM15_STOP_Pos)          /*!< 0x00000020 */
#define DBGMCU_APB2FZ_DBG_TIM15_STOP                DBGMCU_APB2FZ_DBG_TIM15_STOP_Msk                    /*!< TIM15 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM16_STOP_Pos            (6U)
#define DBGMCU_APB2FZ_DBG_TIM16_STOP_Msk            (0x1U << DBGMCU_APB2FZ_DBG_TIM16_STOP_Pos)          /*!< 0x00000040 */
#define DBGMCU_APB2FZ_DBG_TIM16_STOP                DBGMCU_APB2FZ_DBG_TIM16_STOP_Msk                    /*!< TIM16 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM17_STOP_Pos            (7U)
#define DBGMCU_APB2FZ_DBG_TIM17_STOP_Msk            (0x1U << DBGMCU_APB2FZ_DBG_TIM17_STOP_Pos)          /*!< 0x00000080 */
#define DBGMCU_APB2FZ_DBG_TIM17_STOP                DBGMCU_APB2FZ_DBG_TIM17_STOP_Msk                    /*!< TIM17 suspend in debug */
#define DBGMCU_APB2FZ_DBG_FDCAN_STOP_Pos            (13U)
#define DBGMCU_APB2FZ_DBG_FDCAN_STOP_Msk            (0x1U << DBGMCU_APB2FZ_DBG_FDCAN_STOP_Pos)          /*!< 0x00002000 */
#define DBGMCU_APB2FZ_DBG_FDCAN_STOP                DBGMCU_APB2FZ_DBG_FDCAN_STOP_Msk                    /*!< FDCAN suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM20_STOP_Pos            (18U)
#define DBGMCU_APB2FZ_DBG_TIM20_STOP_Msk            (0x1U << DBGMCU_APB2FZ_DBG_TIM20_STOP_Pos)          /*!< 0x00040000 */
#define DBGMCU_APB2FZ_DBG_TIM20_STOP                DBGMCU_APB2FZ_DBG_TIM20_STOP_Msk                    /*!< TIM20 suspend in debug */

/********************  Bit definition for APB3FZ register  ********************/
#define DBGMCU_APB3FZ_DBG_IWDG1_STOP_Pos            (1U)
#define DBGMCU_APB3FZ_DBG_IWDG1_STOP_Msk            (0x1U << DBGMCU_APB3FZ_DBG_IWDG1_STOP_Pos)          /*!< 0x00000002 */
#define DBGMCU_APB3FZ_DBG_IWDG1_STOP                DBGMCU_APB3FZ_DBG_IWDG1_STOP_Msk                    /*!< IWDG1 suspend in debug */
#define DBGMCU_APB3FZ_DBG_IWDG2_STOP_Pos            (2U)
#define DBGMCU_APB3FZ_DBG_IWDG2_STOP_Msk            (0x1U << DBGMCU_APB3FZ_DBG_IWDG2_STOP_Pos)          /*!< 0x00000004 */
#define DBGMCU_APB3FZ_DBG_IWDG2_STOP                DBGMCU_APB3FZ_DBG_IWDG2_STOP_Msk                    /*!< IWDG2 suspend in debug */
#define DBGMCU_APB3FZ_DBG_IWDG3_STOP_Pos            (3U)
#define DBGMCU_APB3FZ_DBG_IWDG3_STOP_Msk            (0x1U << DBGMCU_APB3FZ_DBG_IWDG3_STOP_Pos)          /*!< 0x00000008 */
#define DBGMCU_APB3FZ_DBG_IWDG3_STOP                DBGMCU_APB3FZ_DBG_IWDG3_STOP_Msk                    /*!< IWDG3 suspend in debug */
#define DBGMCU_APB3FZ_DBG_IWDG4_STOP_Pos            (4U)
#define DBGMCU_APB3FZ_DBG_IWDG4_STOP_Msk            (0x1U << DBGMCU_APB3FZ_DBG_IWDG4_STOP_Pos)          /*!< 0x00000010 */
#define DBGMCU_APB3FZ_DBG_IWDG4_STOP                DBGMCU_APB3FZ_DBG_IWDG4_STOP_Msk                    /*!< IWDG4 suspend in debug */
#define DBGMCU_APB3FZ_DBG_WWDG1_STOP_Pos            (5U)
#define DBGMCU_APB3FZ_DBG_WWDG1_STOP_Msk            (0x1U << DBGMCU_APB3FZ_DBG_WWDG1_STOP_Pos)          /*!< 0x00000020 */
#define DBGMCU_APB3FZ_DBG_WWDG1_STOP                DBGMCU_APB3FZ_DBG_WWDG1_STOP_Msk                    /*!< WWDG1 suspend in debug */

/********************  Bit definition for APBSRFZ register  *******************/
#define DBGMCU_APBSRFZ_DBG_I2C8_STOP_Pos            (4U)
#define DBGMCU_APBSRFZ_DBG_I2C8_STOP_Msk            (0x1U << DBGMCU_APBSRFZ_DBG_I2C8_STOP_Pos)          /*!< 0x00000010 */
#define DBGMCU_APBSRFZ_DBG_I2C8_STOP                DBGMCU_APBSRFZ_DBG_I2C8_STOP_Msk                    /*!< I2C8 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Pos          (5U)
#define DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Msk          (0x1U << DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Pos)        /*!< 0x00000020 */
#define DBGMCU_APBSRFZ_DBG_LPTIM3_STOP              DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Msk                  /*!< LPTIM3 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Pos          (6U)
#define DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Msk          (0x1U << DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Pos)        /*!< 0x00000040 */
#define DBGMCU_APBSRFZ_DBG_LPTIM4_STOP              DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Msk                  /*!< LPTIM4 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Pos          (7U)
#define DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Msk          (0x1U << DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Pos)        /*!< 0x00000080 */
#define DBGMCU_APBSRFZ_DBG_LPTIM5_STOP              DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Msk                  /*!< LPTIM5 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Pos           (9U)
#define DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Msk           (0x1U << DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Pos)         /*!< 0x00000200 */
#define DBGMCU_APBSRFZ_DBG_IWDG5_STOP               DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Msk                   /*!< IWDG5 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Pos           (10U)
#define DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Msk           (0x1U << DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Pos)         /*!< 0x00000400 */
#define DBGMCU_APBSRFZ_DBG_WWDG2_STOP               DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Msk                   /*!< WWDG2 suspend in debug */

/******************************************************************************/
/*                                                                            */
/*                                    DCMI                                    */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for DCMI_CR register  ******************/
#define DCMI_CR_CAPTURE_Pos        (0U)
#define DCMI_CR_CAPTURE_Msk        (0x1UL << DCMI_CR_CAPTURE_Pos)              /*!< 0x00000001 */
#define DCMI_CR_CAPTURE            DCMI_CR_CAPTURE_Msk
#define DCMI_CR_CM_Pos             (1U)
#define DCMI_CR_CM_Msk             (0x1UL << DCMI_CR_CM_Pos)                   /*!< 0x00000002 */
#define DCMI_CR_CM                 DCMI_CR_CM_Msk
#define DCMI_CR_CROP_Pos           (2U)
#define DCMI_CR_CROP_Msk           (0x1UL << DCMI_CR_CROP_Pos)                 /*!< 0x00000004 */
#define DCMI_CR_CROP               DCMI_CR_CROP_Msk
#define DCMI_CR_JPEG_Pos           (3U)
#define DCMI_CR_JPEG_Msk           (0x1UL << DCMI_CR_JPEG_Pos)                 /*!< 0x00000008 */
#define DCMI_CR_JPEG               DCMI_CR_JPEG_Msk
#define DCMI_CR_ESS_Pos            (4U)
#define DCMI_CR_ESS_Msk            (0x1UL << DCMI_CR_ESS_Pos)                  /*!< 0x00000010 */
#define DCMI_CR_ESS                DCMI_CR_ESS_Msk
#define DCMI_CR_PCKPOL_Pos         (5U)
#define DCMI_CR_PCKPOL_Msk         (0x1UL << DCMI_CR_PCKPOL_Pos)               /*!< 0x00000020 */
#define DCMI_CR_PCKPOL             DCMI_CR_PCKPOL_Msk
#define DCMI_CR_HSPOL_Pos          (6U)
#define DCMI_CR_HSPOL_Msk          (0x1UL << DCMI_CR_HSPOL_Pos)                /*!< 0x00000040 */
#define DCMI_CR_HSPOL              DCMI_CR_HSPOL_Msk
#define DCMI_CR_VSPOL_Pos          (7U)
#define DCMI_CR_VSPOL_Msk          (0x1UL << DCMI_CR_VSPOL_Pos)                /*!< 0x00000080 */
#define DCMI_CR_VSPOL              DCMI_CR_VSPOL_Msk
#define DCMI_CR_FCRC_0             ((uint32_t)0x00000100U)
#define DCMI_CR_FCRC_1             ((uint32_t)0x00000200U)
#define DCMI_CR_EDM_0              ((uint32_t)0x00000400U)
#define DCMI_CR_EDM_1              ((uint32_t)0x00000800U)
#define DCMI_CR_CRE_Pos            (12U)
#define DCMI_CR_CRE_Msk            (0x1UL << DCMI_CR_CRE_Pos)                  /*!< 0x00001000 */
#define DCMI_CR_CRE                DCMI_CR_CRE_Msk
#define DCMI_CR_ENABLE_Pos         (14U)
#define DCMI_CR_ENABLE_Msk         (0x1UL << DCMI_CR_ENABLE_Pos)               /*!< 0x00004000 */
#define DCMI_CR_ENABLE             DCMI_CR_ENABLE_Msk
#define DCMI_CR_BSM_Pos            (16U)
#define DCMI_CR_BSM_Msk            (0x3UL << DCMI_CR_BSM_Pos)                  /*!< 0x00030000 */
#define DCMI_CR_BSM                DCMI_CR_BSM_Msk
#define DCMI_CR_BSM_0              (0x1U << DCMI_CR_BSM_Pos)                   /*!< 0x00010000 */
#define DCMI_CR_BSM_1              (0x2U << DCMI_CR_BSM_Pos)                   /*!< 0x00020000 */
#define DCMI_CR_OEBS_Pos           (18U)
#define DCMI_CR_OEBS_Msk           (0x1UL << DCMI_CR_OEBS_Pos)                 /*!< 0x00040000 */
#define DCMI_CR_OEBS               DCMI_CR_OEBS_Msk
#define DCMI_CR_LSM_Pos            (19U)
#define DCMI_CR_LSM_Msk            (0x1UL << DCMI_CR_LSM_Pos)                  /*!< 0x00080000 */
#define DCMI_CR_LSM                DCMI_CR_LSM_Msk
#define DCMI_CR_OELS_Pos           (20U)
#define DCMI_CR_OELS_Msk           (0x1UL << DCMI_CR_OELS_Pos)                 /*!< 0x00100000 */
#define DCMI_CR_OELS               DCMI_CR_OELS_Msk

/********************  Bits definition for DCMI_SR register  ******************/
#define DCMI_SR_HSYNC_Pos          (0U)
#define DCMI_SR_HSYNC_Msk          (0x1UL << DCMI_SR_HSYNC_Pos)                /*!< 0x00000001 */
#define DCMI_SR_HSYNC              DCMI_SR_HSYNC_Msk
#define DCMI_SR_VSYNC_Pos          (1U)
#define DCMI_SR_VSYNC_Msk          (0x1UL << DCMI_SR_VSYNC_Pos)                /*!< 0x00000002 */
#define DCMI_SR_VSYNC              DCMI_SR_VSYNC_Msk
#define DCMI_SR_FNE_Pos            (2U)
#define DCMI_SR_FNE_Msk            (0x1UL << DCMI_SR_FNE_Pos)                  /*!< 0x00000004 */
#define DCMI_SR_FNE                DCMI_SR_FNE_Msk

/********************  Bits definition for DCMI_RIS register   ****************/
#define DCMI_RIS_FRAME_RIS_Pos     (0U)
#define DCMI_RIS_FRAME_RIS_Msk     (0x1UL << DCMI_RIS_FRAME_RIS_Pos)           /*!< 0x00000001 */
#define DCMI_RIS_FRAME_RIS         DCMI_RIS_FRAME_RIS_Msk
#define DCMI_RIS_OVR_RIS_Pos       (1U)
#define DCMI_RIS_OVR_RIS_Msk       (0x1UL << DCMI_RIS_OVR_RIS_Pos)             /*!< 0x00000002 */
#define DCMI_RIS_OVR_RIS           DCMI_RIS_OVR_RIS_Msk
#define DCMI_RIS_ERR_RIS_Pos       (2U)
#define DCMI_RIS_ERR_RIS_Msk       (0x1UL << DCMI_RIS_ERR_RIS_Pos)             /*!< 0x00000004 */
#define DCMI_RIS_ERR_RIS           DCMI_RIS_ERR_RIS_Msk
#define DCMI_RIS_VSYNC_RIS_Pos     (3U)
#define DCMI_RIS_VSYNC_RIS_Msk     (0x1UL << DCMI_RIS_VSYNC_RIS_Pos)           /*!< 0x00000008 */
#define DCMI_RIS_VSYNC_RIS         DCMI_RIS_VSYNC_RIS_Msk
#define DCMI_RIS_LINE_RIS_Pos      (4U)
#define DCMI_RIS_LINE_RIS_Msk      (0x1UL << DCMI_RIS_LINE_RIS_Pos)            /*!< 0x00000010 */
#define DCMI_RIS_LINE_RIS          DCMI_RIS_LINE_RIS_Msk

/********************  Bits definition for DCMI_IER register  *****************/
#define DCMI_IER_FRAME_IE_Pos      (0U)
#define DCMI_IER_FRAME_IE_Msk      (0x1UL << DCMI_IER_FRAME_IE_Pos)            /*!< 0x00000001 */
#define DCMI_IER_FRAME_IE          DCMI_IER_FRAME_IE_Msk
#define DCMI_IER_OVR_IE_Pos        (1U)
#define DCMI_IER_OVR_IE_Msk        (0x1UL << DCMI_IER_OVR_IE_Pos)              /*!< 0x00000002 */
#define DCMI_IER_OVR_IE            DCMI_IER_OVR_IE_Msk
#define DCMI_IER_ERR_IE_Pos        (2U)
#define DCMI_IER_ERR_IE_Msk        (0x1UL << DCMI_IER_ERR_IE_Pos)              /*!< 0x00000004 */
#define DCMI_IER_ERR_IE            DCMI_IER_ERR_IE_Msk
#define DCMI_IER_VSYNC_IE_Pos      (3U)
#define DCMI_IER_VSYNC_IE_Msk      (0x1UL << DCMI_IER_VSYNC_IE_Pos)            /*!< 0x00000008 */
#define DCMI_IER_VSYNC_IE          DCMI_IER_VSYNC_IE_Msk
#define DCMI_IER_LINE_IE_Pos       (4U)
#define DCMI_IER_LINE_IE_Msk       (0x1UL << DCMI_IER_LINE_IE_Pos)             /*!< 0x00000010 */
#define DCMI_IER_LINE_IE           DCMI_IER_LINE_IE_Msk

/********************  Bits definition for DCMI_MIS register  *****************/
#define DCMI_MIS_FRAME_MIS_Pos     (0U)
#define DCMI_MIS_FRAME_MIS_Msk     (0x1UL << DCMI_MIS_FRAME_MIS_Pos)           /*!< 0x00000001 */
#define DCMI_MIS_FRAME_MIS         DCMI_MIS_FRAME_MIS_Msk
#define DCMI_MIS_OVR_MIS_Pos       (1U)
#define DCMI_MIS_OVR_MIS_Msk       (0x1UL << DCMI_MIS_OVR_MIS_Pos)             /*!< 0x00000002 */
#define DCMI_MIS_OVR_MIS           DCMI_MIS_OVR_MIS_Msk
#define DCMI_MIS_ERR_MIS_Pos       (2U)
#define DCMI_MIS_ERR_MIS_Msk       (0x1UL << DCMI_MIS_ERR_MIS_Pos)             /*!< 0x00000004 */
#define DCMI_MIS_ERR_MIS           DCMI_MIS_ERR_MIS_Msk
#define DCMI_MIS_VSYNC_MIS_Pos     (3U)
#define DCMI_MIS_VSYNC_MIS_Msk     (0x1UL << DCMI_MIS_VSYNC_MIS_Pos)           /*!< 0x00000008 */
#define DCMI_MIS_VSYNC_MIS         DCMI_MIS_VSYNC_MIS_Msk
#define DCMI_MIS_LINE_MIS_Pos      (4U)
#define DCMI_MIS_LINE_MIS_Msk      (0x1UL << DCMI_MIS_LINE_MIS_Pos)            /*!< 0x00000010 */
#define DCMI_MIS_LINE_MIS          DCMI_MIS_LINE_MIS_Msk

/********************  Bits definition for DCMI_ICR register  *****************/
#define DCMI_ICR_FRAME_ISC_Pos     (0U)
#define DCMI_ICR_FRAME_ISC_Msk     (0x1UL << DCMI_ICR_FRAME_ISC_Pos)           /*!< 0x00000001 */
#define DCMI_ICR_FRAME_ISC         DCMI_ICR_FRAME_ISC_Msk
#define DCMI_ICR_OVR_ISC_Pos       (1U)
#define DCMI_ICR_OVR_ISC_Msk       (0x1UL << DCMI_ICR_OVR_ISC_Pos)             /*!< 0x00000002 */
#define DCMI_ICR_OVR_ISC           DCMI_ICR_OVR_ISC_Msk
#define DCMI_ICR_ERR_ISC_Pos       (2U)
#define DCMI_ICR_ERR_ISC_Msk       (0x1UL << DCMI_ICR_ERR_ISC_Pos)             /*!< 0x00000004 */
#define DCMI_ICR_ERR_ISC           DCMI_ICR_ERR_ISC_Msk
#define DCMI_ICR_VSYNC_ISC_Pos     (3U)
#define DCMI_ICR_VSYNC_ISC_Msk     (0x1UL << DCMI_ICR_VSYNC_ISC_Pos)           /*!< 0x00000008 */
#define DCMI_ICR_VSYNC_ISC         DCMI_ICR_VSYNC_ISC_Msk
#define DCMI_ICR_LINE_ISC_Pos      (4U)
#define DCMI_ICR_LINE_ISC_Msk      (0x1UL << DCMI_ICR_LINE_ISC_Pos)            /*!< 0x00000010 */
#define DCMI_ICR_LINE_ISC          DCMI_ICR_LINE_ISC_Msk

/********************  Bits definition for DCMI_ESCR register  ******************/
#define DCMI_ESCR_FSC_Pos          (0U)
#define DCMI_ESCR_FSC_Msk          (0xFFUL << DCMI_ESCR_FSC_Pos)               /*!< 0x000000FF */
#define DCMI_ESCR_FSC              DCMI_ESCR_FSC_Msk
#define DCMI_ESCR_LSC_Pos          (8U)
#define DCMI_ESCR_LSC_Msk          (0xFFUL << DCMI_ESCR_LSC_Pos)               /*!< 0x0000FF00 */
#define DCMI_ESCR_LSC              DCMI_ESCR_LSC_Msk
#define DCMI_ESCR_LEC_Pos          (16U)
#define DCMI_ESCR_LEC_Msk          (0xFFUL << DCMI_ESCR_LEC_Pos)               /*!< 0x00FF0000 */
#define DCMI_ESCR_LEC              DCMI_ESCR_LEC_Msk
#define DCMI_ESCR_FEC_Pos          (24U)
#define DCMI_ESCR_FEC_Msk          (0xFFUL << DCMI_ESCR_FEC_Pos)               /*!< 0xFF000000 */
#define DCMI_ESCR_FEC              DCMI_ESCR_FEC_Msk

/********************  Bits definition for DCMI_ESUR register  ******************/
#define DCMI_ESUR_FSU_Pos          (0U)
#define DCMI_ESUR_FSU_Msk          (0xFFUL << DCMI_ESUR_FSU_Pos)               /*!< 0x000000FF */
#define DCMI_ESUR_FSU              DCMI_ESUR_FSU_Msk
#define DCMI_ESUR_LSU_Pos          (8U)
#define DCMI_ESUR_LSU_Msk          (0xFFUL << DCMI_ESUR_LSU_Pos)               /*!< 0x0000FF00 */
#define DCMI_ESUR_LSU              DCMI_ESUR_LSU_Msk
#define DCMI_ESUR_LEU_Pos          (16U)
#define DCMI_ESUR_LEU_Msk          (0xFFUL << DCMI_ESUR_LEU_Pos)               /*!< 0x00FF0000 */
#define DCMI_ESUR_LEU              DCMI_ESUR_LEU_Msk
#define DCMI_ESUR_FEU_Pos          (24U)
#define DCMI_ESUR_FEU_Msk          (0xFFUL << DCMI_ESUR_FEU_Pos)               /*!< 0xFF000000 */
#define DCMI_ESUR_FEU              DCMI_ESUR_FEU_Msk

/********************  Bits definition for DCMI_CWSTRT register  ******************/
#define DCMI_CWSTRT_HOFFCNT_Pos    (0U)
#define DCMI_CWSTRT_HOFFCNT_Msk    (0x3FFFUL << DCMI_CWSTRT_HOFFCNT_Pos)       /*!< 0x00003FFF */
#define DCMI_CWSTRT_HOFFCNT        DCMI_CWSTRT_HOFFCNT_Msk
#define DCMI_CWSTRT_VST_Pos        (16U)
#define DCMI_CWSTRT_VST_Msk        (0x1FFFUL << DCMI_CWSTRT_VST_Pos)           /*!< 0x1FFF0000 */
#define DCMI_CWSTRT_VST            DCMI_CWSTRT_VST_Msk

/********************  Bits definition for DCMI_CWSIZE register  ******************/
#define DCMI_CWSIZE_CAPCNT_Pos     (0U)
#define DCMI_CWSIZE_CAPCNT_Msk     (0x3FFFUL << DCMI_CWSIZE_CAPCNT_Pos)        /*!< 0x00003FFF */
#define DCMI_CWSIZE_CAPCNT         DCMI_CWSIZE_CAPCNT_Msk
#define DCMI_CWSIZE_VLINE_Pos      (16U)
#define DCMI_CWSIZE_VLINE_Msk      (0x3FFFUL << DCMI_CWSIZE_VLINE_Pos)         /*!< 0x3FFF0000 */
#define DCMI_CWSIZE_VLINE          DCMI_CWSIZE_VLINE_Msk

/********************  Bits definition for DCMI_DR register  ******************/
#define DCMI_DR_BYTE0_Pos          (0U)
#define DCMI_DR_BYTE0_Msk          (0xFFUL << DCMI_DR_BYTE0_Pos)               /*!< 0x000000FF */
#define DCMI_DR_BYTE0              DCMI_DR_BYTE0_Msk
#define DCMI_DR_BYTE1_Pos          (8U)
#define DCMI_DR_BYTE1_Msk          (0xFFUL << DCMI_DR_BYTE1_Pos)               /*!< 0x0000FF00 */
#define DCMI_DR_BYTE1              DCMI_DR_BYTE1_Msk
#define DCMI_DR_BYTE2_Pos          (16U)
#define DCMI_DR_BYTE2_Msk          (0xFFUL << DCMI_DR_BYTE2_Pos)               /*!< 0x00FF0000 */
#define DCMI_DR_BYTE2              DCMI_DR_BYTE2_Msk
#define DCMI_DR_BYTE3_Pos          (24U)
#define DCMI_DR_BYTE3_Msk          (0xFFUL << DCMI_DR_BYTE3_Pos)               /*!< 0xFF000000 */
#define DCMI_DR_BYTE3              DCMI_DR_BYTE3_Msk

/******************************************************************************/
/*                                                                            */
/*                                    DCMIPP                                  */
/*                                                                            */
/******************************************************************************/
/* Bit fields for DCMIPP_CMHWCFGR register */
#define DCMIPP_CMHWCFGR_CDMA_Pos                 0
#define DCMIPP_CMHWCFGR_CDMA_Msk                 (0x3 << 0)
#define DCMIPP_CMHWCFGR_CDMA                     (0x3 << 0)
#define DCMIPP_CMHWCFGR_CPIPES_Pos               2
#define DCMIPP_CMHWCFGR_CPIPES_Msk               (0x3 << 2)
#define DCMIPP_CMHWCFGR_CPIPES                   (0x3 << 2)
#define DCMIPP_CMHWCFGR_CPAR_Pos                 4
#define DCMIPP_CMHWCFGR_CPAR_Msk                 (0x1 << 4)
#define DCMIPP_CMHWCFGR_CPAR                     (0x1 << 4)
#define DCMIPP_CMHWCFGR_CCSI_Pos                 5
#define DCMIPP_CMHWCFGR_CCSI_Msk                 (0x1 << 5)
#define DCMIPP_CMHWCFGR_CCSI                     (0x1 << 5)

/* Bit fields for DCMIPP_CMIER register */
#define DCMIPP_CMIER_PRERRIE_Pos                 6
#define DCMIPP_CMIER_PRERRIE_Msk                 (0x1 << 6)
#define DCMIPP_CMIER_PRERRIE                     (0x1 << 6)
#define DCMIPP_CMIER_PROVRIE_Pos                 7
#define DCMIPP_CMIER_PROVRIE_Msk                 (0x1 << 7)
#define DCMIPP_CMIER_PROVRIE                     (0x1 << 7)
#define DCMIPP_CMIER_P0LINEIE_Pos                8
#define DCMIPP_CMIER_P0LINEIE_Msk                (0x1 << 8)
#define DCMIPP_CMIER_P0LINEIE                    (0x1 << 8)
#define DCMIPP_CMIER_P0FRAMEIE_Pos               9
#define DCMIPP_CMIER_P0FRAMEIE_Msk               (0x1 << 9)
#define DCMIPP_CMIER_P0FRAMEIE                   (0x1 << 9)
#define DCMIPP_CMIER_P0VSYNCIE_Pos               10
#define DCMIPP_CMIER_P0VSYNCIE_Msk               (0x1 << 10)
#define DCMIPP_CMIER_P0VSYNCIE                   (0x1 << 10)
#define DCMIPP_CMIER_P0LIMITIE_Pos               14
#define DCMIPP_CMIER_P0LIMITIE_Msk               (0x1 << 14)
#define DCMIPP_CMIER_P0LIMITIE                   (0x1 << 14)
#define DCMIPP_CMIER_P0OVRIE_Pos                 15
#define DCMIPP_CMIER_P0OVRIE_Msk                 (0x1 << 15)
#define DCMIPP_CMIER_P0OVRIE                     (0x1 << 15)
#define DCMIPP_CMIER_P1LINEIE_Pos                16
#define DCMIPP_CMIER_P1LINEIE_Msk                (0x1 << 16)
#define DCMIPP_CMIER_P1LINEIE                    (0x1 << 16)
#define DCMIPP_CMIER_P1FRAMEIE_Pos               17
#define DCMIPP_CMIER_P1FRAMEIE_Msk               (0x1 << 17)
#define DCMIPP_CMIER_P1FRAMEIE                   (0x1 << 17)
#define DCMIPP_CMIER_P1VSYNCIE_Pos               18
#define DCMIPP_CMIER_P1VSYNCIE_Msk               (0x1 << 18)
#define DCMIPP_CMIER_P1VSYNCIE                   (0x1 << 18)
#define DCMIPP_CMIER_P1OVRIE_Pos                 23
#define DCMIPP_CMIER_P1OVRIE_Msk                 (0x1 << 23)
#define DCMIPP_CMIER_P1OVRIE                     (0x1 << 23)
#define DCMIPP_CMIER_P2LINEIE_Pos                24
#define DCMIPP_CMIER_P2LINEIE_Msk                (0x1 << 24)
#define DCMIPP_CMIER_P2LINEIE                    (0x1 << 24)
#define DCMIPP_CMIER_P2FRAMEIE_Pos               25
#define DCMIPP_CMIER_P2FRAMEIE_Msk               (0x1 << 25)
#define DCMIPP_CMIER_P2FRAMEIE                   (0x1 << 25)
#define DCMIPP_CMIER_P2VSYNCIE_Pos               26
#define DCMIPP_CMIER_P2VSYNCIE_Msk               (0x1 << 26)
#define DCMIPP_CMIER_P2VSYNCIE                   (0x1 << 26)
#define DCMIPP_CMIER_P2OVRIE_Pos                 31
#define DCMIPP_CMIER_P2OVRIE_Msk                 (0x1 << 31)
#define DCMIPP_CMIER_P2OVRIE                     (0x1 << 31)

/* Bit fields for DCMIPP_CMSR1 register */
#define DCMIPP_CMSR1_PRHSYNC_Pos                 0
#define DCMIPP_CMSR1_PRHSYNC_Msk                 (0x1 << 0)
#define DCMIPP_CMSR1_PRHSYNC                     (0x1 << 0)
#define DCMIPP_CMSR1_PRVSYNC_Pos                 1
#define DCMIPP_CMSR1_PRVSYNC_Msk                 (0x1 << 1)
#define DCMIPP_CMSR1_PRVSYNC                     (0x1 << 1)
#define DCMIPP_CMSR1_P0LSTFRM_Pos                9
#define DCMIPP_CMSR1_P0LSTFRM_Msk                (0x1 << 9)
#define DCMIPP_CMSR1_P0LSTFRM                    (0x1 << 9)
#define DCMIPP_CMSR1_P0LSTVCID_Pos               10
#define DCMIPP_CMSR1_P0LSTVCID_Msk               (0x3 << 10)
#define DCMIPP_CMSR1_P0LSTVCID                   (0x3 << 10)
#define DCMIPP_CMSR1_P0CPTACT_Pos                15
#define DCMIPP_CMSR1_P0CPTACT_Msk                (0x1 << 15)
#define DCMIPP_CMSR1_P0CPTACT                    (0x1 << 15)
#define DCMIPP_CMSR1_P1LSTLINE_Pos               16
#define DCMIPP_CMSR1_P1LSTLINE_Msk               (0x1 << 16)
#define DCMIPP_CMSR1_P1LSTLINE                   (0x1 << 16)
#define DCMIPP_CMSR1_P1LSTFRM_Pos                17
#define DCMIPP_CMSR1_P1LSTFRM_Msk                (0x1 << 17)
#define DCMIPP_CMSR1_P1LSTFRM                    (0x1 << 17)
#define DCMIPP_CMSR1_P1LSTVCID_Pos               18
#define DCMIPP_CMSR1_P1LSTVCID_Msk               (0x3 << 18)
#define DCMIPP_CMSR1_P1LSTVCID                   (0x3 << 18)
#define DCMIPP_CMSR1_P1CPTACT_Pos                23
#define DCMIPP_CMSR1_P1CPTACT_Msk                (0x1 << 23)
#define DCMIPP_CMSR1_P1CPTACT                    (0x1 << 23)
#define DCMIPP_CMSR1_P2LSTLINE_Pos               24
#define DCMIPP_CMSR1_P2LSTLINE_Msk               (0x1 << 24)
#define DCMIPP_CMSR1_P2LSTLINE                   (0x1 << 24)
#define DCMIPP_CMSR1_P2LSTFRM_Pos                25
#define DCMIPP_CMSR1_P2LSTFRM_Msk                (0x1 << 25)
#define DCMIPP_CMSR1_P2LSTFRM                    (0x1 << 25)
#define DCMIPP_CMSR1_P2LSTVCID_Pos               26
#define DCMIPP_CMSR1_P2LSTVCID_Msk               (0x3 << 26)
#define DCMIPP_CMSR1_P2LSTVCID                   (0x3 << 26)
#define DCMIPP_CMSR1_P2CPTACT_Pos                31
#define DCMIPP_CMSR1_P2CPTACT_Msk                (0x1 << 31)
#define DCMIPP_CMSR1_P2CPTACT                    (0x1 << 31)

/* Bit fields for DCMIPP_CMSR2 register */
#define DCMIPP_CMSR2_PRERRF_Pos                  6
#define DCMIPP_CMSR2_PRERRF_Msk                  (0x1 << 6)
#define DCMIPP_CMSR2_PRERRF                      (0x1 << 6)
#define DCMIPP_CMSR2_PROVRF_Pos                  7
#define DCMIPP_CMSR2_PROVRF_Msk                  (0x1 << 7)
#define DCMIPP_CMSR2_PROVRF                      (0x1 << 7)
#define DCMIPP_CMSR2_P0FRAMEF_Pos                9
#define DCMIPP_CMSR2_P0FRAMEF_Msk                (0x1 << 9)
#define DCMIPP_CMSR2_P0FRAMEF                    (0x1 << 9)
#define DCMIPP_CMSR2_P0VSYNCF_Pos                10
#define DCMIPP_CMSR2_P0VSYNCF_Msk                (0x1 << 10)
#define DCMIPP_CMSR2_P0VSYNCF                    (0x1 << 10)
#define DCMIPP_CMSR2_P0LIMITF_Pos                14
#define DCMIPP_CMSR2_P0LIMITF_Msk                (0x1 << 14)
#define DCMIPP_CMSR2_P0LIMITF                    (0x1 << 14)
#define DCMIPP_CMSR2_P0OVRF_Pos                  15
#define DCMIPP_CMSR2_P0OVRF_Msk                  (0x1 << 15)
#define DCMIPP_CMSR2_P0OVRF                      (0x1 << 15)
#define DCMIPP_CMSR2_P1LINEF_Pos                 16
#define DCMIPP_CMSR2_P1LINEF_Msk                 (0x1 << 16)
#define DCMIPP_CMSR2_P1LINEF                     (0x1 << 16)
#define DCMIPP_CMSR2_P1FRAMEF_Pos                17
#define DCMIPP_CMSR2_P1FRAMEF_Msk                (0x1 << 17)
#define DCMIPP_CMSR2_P1FRAMEF                    (0x1 << 17)
#define DCMIPP_CMSR2_P1VSYNCF_Pos                18
#define DCMIPP_CMSR2_P1VSYNCF_Msk                (0x1 << 18)
#define DCMIPP_CMSR2_P1VSYNCF                    (0x1 << 18)
#define DCMIPP_CMSR2_P1OVRF_Pos                  23
#define DCMIPP_CMSR2_P1OVRF_Msk                  (0x1 << 23)
#define DCMIPP_CMSR2_P1OVRF                      (0x1 << 23)
#define DCMIPP_CMSR2_P2LINEF_Pos                 24
#define DCMIPP_CMSR2_P2LINEF_Msk                 (0x1 << 24)
#define DCMIPP_CMSR2_P2LINEF                     (0x1 << 24)
#define DCMIPP_CMSR2_P2FRAMEF_Pos                25
#define DCMIPP_CMSR2_P2FRAMEF_Msk                (0x1 << 25)
#define DCMIPP_CMSR2_P2FRAMEF                    (0x1 << 25)
#define DCMIPP_CMSR2_P2VSYNCF_Pos                26
#define DCMIPP_CMSR2_P2VSYNCF_Msk                (0x1 << 26)
#define DCMIPP_CMSR2_P2VSYNCF                    (0x1 << 26)
#define DCMIPP_CMSR2_P2OVRF_Pos                  31
#define DCMIPP_CMSR2_P2OVRF_Msk                  (0x1 << 31)
#define DCMIPP_CMSR2_P2OVRF                      (0x1 << 31)

/* Bit fields for DCMIPP_CMFCR register */
#define DCMIPP_CMFCR_CPRERRF_Pos                 6
#define DCMIPP_CMFCR_CPRERRF_Msk                 (0x1 << 6)
#define DCMIPP_CMFCR_CPRERRF                     (0x1 << 6)
#define DCMIPP_CMFCR_CPROVRF_Pos                 7
#define DCMIPP_CMFCR_CPROVRF_Msk                 (0x1 << 7)
#define DCMIPP_CMFCR_CPROVRF                     (0x1 << 7)
#define DCMIPP_CMFCR_CP0FRAMEF_Pos               9
#define DCMIPP_CMFCR_CP0FRAMEF_Msk               (0x1 << 9)
#define DCMIPP_CMFCR_CP0FRAMEF                   (0x1 << 9)
#define DCMIPP_CMFCR_CP0VSYNCF_Pos               10
#define DCMIPP_CMFCR_CP0VSYNCF_Msk               (0x1 << 10)
#define DCMIPP_CMFCR_CP0VSYNCF                   (0x1 << 10)
#define DCMIPP_CMFCR_CP0LIMITF_Pos               14
#define DCMIPP_CMFCR_CP0LIMITF_Msk               (0x1 << 14)
#define DCMIPP_CMFCR_CP0LIMITF                   (0x1 << 14)
#define DCMIPP_CMFCR_CP0OVRF_Pos                 15
#define DCMIPP_CMFCR_CP0OVRF_Msk                 (0x1 << 15)
#define DCMIPP_CMFCR_CP0OVRF                     (0x1 << 15)
#define DCMIPP_CMFCR_CP1LINEF_Pos                16
#define DCMIPP_CMFCR_CP1LINEF_Msk                (0x1 << 16)
#define DCMIPP_CMFCR_CP1LINEF                    (0x1 << 16)
#define DCMIPP_CMFCR_CP1FRAMEF_Pos               17
#define DCMIPP_CMFCR_CP1FRAMEF_Msk               (0x1 << 17)
#define DCMIPP_CMFCR_CP1FRAMEF                   (0x1 << 17)
#define DCMIPP_CMFCR_CP1VSYNCF_Pos               18
#define DCMIPP_CMFCR_CP1VSYNCF_Msk               (0x1 << 18)
#define DCMIPP_CMFCR_CP1VSYNCF                   (0x1 << 18)
#define DCMIPP_CMFCR_CP1OVRF_Pos                 23
#define DCMIPP_CMFCR_CP1OVRF_Msk                 (0x1 << 23)
#define DCMIPP_CMFCR_CP1OVRF                     (0x1 << 23)
#define DCMIPP_CMFCR_CP2LINEF_Pos                24
#define DCMIPP_CMFCR_CP2LINEF_Msk                (0x1 << 24)
#define DCMIPP_CMFCR_CP2LINEF                    (0x1 << 24)
#define DCMIPP_CMFCR_CP2FRAMEF_Pos               25
#define DCMIPP_CMFCR_CP2FRAMEF_Msk               (0x1 << 25)
#define DCMIPP_CMFCR_CP2FRAMEF                   (0x1 << 25)
#define DCMIPP_CMFCR_CP2VSYNCF_Pos               26
#define DCMIPP_CMFCR_CP2VSYNCF_Msk               (0x1 << 26)
#define DCMIPP_CMFCR_CP2VSYNCF                   (0x1 << 26)
#define DCMIPP_CMFCR_CP2OVRF_Pos                 31
#define DCMIPP_CMFCR_CP2OVRF_Msk                 (0x1 << 31)
#define DCMIPP_CMFCR_CP2OVRF                     (0x1 << 31)

/* Bit fields for DCMIPP_PRHWCFGR register */

/* Bit fields for DCMIPP_PRCR register */
#define DCMIPP_PRCR_ESS_Pos                      4
#define DCMIPP_PRCR_ESS_Msk                      (0x1 << 4)
#define DCMIPP_PRCR_ESS                          (0x1 << 4)
#define DCMIPP_PRCR_PCKPOL_Pos                   5
#define DCMIPP_PRCR_PCKPOL_Msk                   (0x1 << 5)
#define DCMIPP_PRCR_PCKPOL                       (0x1 << 5)
#define DCMIPP_PRCR_HSPOL_Pos                    6
#define DCMIPP_PRCR_HSPOL_Msk                    (0x1 << 6)
#define DCMIPP_PRCR_HSPOL                        (0x1 << 6)
#define DCMIPP_PRCR_VSPOL_Pos                    7
#define DCMIPP_PRCR_VSPOL_Msk                    (0x1 << 7)
#define DCMIPP_PRCR_VSPOL                        (0x1 << 7)
#define DCMIPP_PRCR_EDM_Pos                      10
#define DCMIPP_PRCR_EDM_Msk                      (0x7 << 10)
#define DCMIPP_PRCR_EDM                          (0x7 << 10)
#define DCMIPP_PRCR_ENABLE_Pos                   14
#define DCMIPP_PRCR_ENABLE_Msk                   (0x1 << 14)
#define DCMIPP_PRCR_ENABLE                       (0x1 << 14)
#define DCMIPP_PRCR_FORMAT_Pos                   16
#define DCMIPP_PRCR_FORMAT_Msk                   (0xff << 16)
#define DCMIPP_PRCR_FORMAT                       (0xff << 16)
#define DCMIPP_PRCR_SWAPRB_Pos                   24
#define DCMIPP_PRCR_SWAPRB_Msk                   (0x1 << 24)
#define DCMIPP_PRCR_SWAPRB                       (0x1 << 24)
#define DCMIPP_PRCR_SWAPCYCLES_Pos               25
#define DCMIPP_PRCR_SWAPCYCLES_Msk               (0x1 << 25)
#define DCMIPP_PRCR_SWAPCYCLES                   (0x1 << 25)
#define DCMIPP_PRCR_SWAPBITS_Pos                 26
#define DCMIPP_PRCR_SWAPBITS_Msk                 (0x1 << 26)
#define DCMIPP_PRCR_SWAPBITS                     (0x1 << 26)

/* Bit fields for DCMIPP_PRESCR register */
#define DCMIPP_PRESCR_FSC_Pos                    0
#define DCMIPP_PRESCR_FSC_Msk                    (0xff << 0)
#define DCMIPP_PRESCR_FSC                        (0xff << 0)
#define DCMIPP_PRESCR_LSC_Pos                    8
#define DCMIPP_PRESCR_LSC_Msk                    (0xff << 8)
#define DCMIPP_PRESCR_LSC                        (0xff << 8)
#define DCMIPP_PRESCR_LEC_Pos                    16
#define DCMIPP_PRESCR_LEC_Msk                    (0xff << 16)
#define DCMIPP_PRESCR_LEC                        (0xff << 16)
#define DCMIPP_PRESCR_FEC_Pos                    24
#define DCMIPP_PRESCR_FEC_Msk                    (0xff << 24)
#define DCMIPP_PRESCR_FEC                        (0xff << 24)

/* Bit fields for DCMIPP_PRESUR register */
#define DCMIPP_PRESUR_FSU_Pos                    0
#define DCMIPP_PRESUR_FSU_Msk                    (0xff << 0)
#define DCMIPP_PRESUR_FSU                        (0xff << 0)
#define DCMIPP_PRESUR_LSU_Pos                    8
#define DCMIPP_PRESUR_LSU_Msk                    (0xff << 8)
#define DCMIPP_PRESUR_LSU                        (0xff << 8)
#define DCMIPP_PRESUR_LEU_Pos                    16
#define DCMIPP_PRESUR_LEU_Msk                    (0xff << 16)
#define DCMIPP_PRESUR_LEU                        (0xff << 16)
#define DCMIPP_PRESUR_FEU_Pos                    24
#define DCMIPP_PRESUR_FEU_Msk                    (0xff << 24)
#define DCMIPP_PRESUR_FEU                        (0xff << 24)

/* Bit fields for DCMIPP_PRIER register */
#define DCMIPP_PRIER_ERRIE_Pos                   6
#define DCMIPP_PRIER_ERRIE_Msk                   (0x1 << 6)
#define DCMIPP_PRIER_ERRIE                       (0x1 << 6)
#define DCMIPP_PRIER_OVRIE_Pos                   7
#define DCMIPP_PRIER_OVRIE_Msk                   (0x1 << 7)
#define DCMIPP_PRIER_OVRIE                       (0x1 << 7)

/* Bit fields for DCMIPP_PRSR register */
#define DCMIPP_PRSR_ERRF_Pos                     6
#define DCMIPP_PRSR_ERRF_Msk                     (0x1 << 6)
#define DCMIPP_PRSR_ERRF                         (0x1 << 6)
#define DCMIPP_PRSR_OVRF_Pos                     7
#define DCMIPP_PRSR_OVRF_Msk                     (0x1 << 7)
#define DCMIPP_PRSR_OVRF                         (0x1 << 7)
#define DCMIPP_PRSR_HSYNC_Pos                    16
#define DCMIPP_PRSR_HSYNC_Msk                    (0x1 << 16)
#define DCMIPP_PRSR_HSYNC                        (0x1 << 16)
#define DCMIPP_PRSR_VSYNC_Pos                    17
#define DCMIPP_PRSR_VSYNC_Msk                    (0x1 << 17)
#define DCMIPP_PRSR_VSYNC                        (0x1 << 17)

/* Bit fields for DCMIPP_PRFCR register */
#define DCMIPP_PRFCR_CERRF_Pos                   6
#define DCMIPP_PRFCR_CERRF_Msk                   (0x1 << 6)
#define DCMIPP_PRFCR_CERRF                       (0x1 << 6)
#define DCMIPP_PRFCR_COVRF_Pos                   7
#define DCMIPP_PRFCR_COVRF_Msk                   (0x1 << 7)
#define DCMIPP_PRFCR_COVRF                       (0x1 << 7)

/* Bit fields for DCMIPP_P0HWCFGR register */
#define DCMIPP_P0HWCFGR_CINT_Pos                 0
#define DCMIPP_P0HWCFGR_CINT_Msk                 (0x1 << 0)
#define DCMIPP_P0HWCFGR_CINT                     (0x1 << 0)
#define DCMIPP_P0HWCFGR_CBUF2_Pos                1
#define DCMIPP_P0HWCFGR_CBUF2_Msk                (0x1 << 1)
#define DCMIPP_P0HWCFGR_CBUF2                    (0x1 << 1)
#define DCMIPP_P0HWCFGR_CPLA3_Pos                2
#define DCMIPP_P0HWCFGR_CPLA3_Msk                (0x1 << 2)
#define DCMIPP_P0HWCFGR_CPLA3                    (0x1 << 2)
#define DCMIPP_P0HWCFGR_CD2D_Pos                 3
#define DCMIPP_P0HWCFGR_CD2D_Msk                 (0x1 << 3)
#define DCMIPP_P0HWCFGR_CD2D                     (0x1 << 3)
#define DCMIPP_P0HWCFGR_CHEAD_Pos                4
#define DCMIPP_P0HWCFGR_CHEAD_Msk                (0x1 << 4)
#define DCMIPP_P0HWCFGR_CHEAD                    (0x1 << 4)
#define DCMIPP_P0HWCFGR_CVMIR_Pos                5
#define DCMIPP_P0HWCFGR_CVMIR_Msk                (0x1 << 5)
#define DCMIPP_P0HWCFGR_CVMIR                    (0x1 << 5)
#define DCMIPP_P0HWCFGR_CHMIR_Pos                6
#define DCMIPP_P0HWCFGR_CHMIR_Msk                (0x1 << 6)
#define DCMIPP_P0HWCFGR_CHMIR                    (0x1 << 6)
#define DCMIPP_P0HWCFGR_CPP_Pos                  7
#define DCMIPP_P0HWCFGR_CPP_Msk                  (0x1 << 7)
#define DCMIPP_P0HWCFGR_CPP                      (0x1 << 7)
#define DCMIPP_P0HWCFGR_CDC_Pos                  8
#define DCMIPP_P0HWCFGR_CDC_Msk                  (0x1 << 8)
#define DCMIPP_P0HWCFGR_CDC                      (0x1 << 8)
#define DCMIPP_P0HWCFGR_CDEC_Pos                 9
#define DCMIPP_P0HWCFGR_CDEC_Msk                 (0x1 << 9)
#define DCMIPP_P0HWCFGR_CDEC                     (0x1 << 9)
#define DCMIPP_P0HWCFGR_CCC_Pos                  10
#define DCMIPP_P0HWCFGR_CCC_Msk                  (0x1 << 10)
#define DCMIPP_P0HWCFGR_CCC                      (0x1 << 10)
#define DCMIPP_P0HWCFGR_CDS_Pos                  11
#define DCMIPP_P0HWCFGR_CDS_Msk                  (0x3 << 11)
#define DCMIPP_P0HWCFGR_CDS                      (0x3 << 11)
#define DCMIPP_P0HWCFGR_CCR_Pos                  13
#define DCMIPP_P0HWCFGR_CCR_Msk                  (0x3 << 13)
#define DCMIPP_P0HWCFGR_CCR                      (0x3 << 13)
#define DCMIPP_P0HWCFGR_CRB_Pos                  15
#define DCMIPP_P0HWCFGR_CRB_Msk                  (0x3 << 15)
#define DCMIPP_P0HWCFGR_CRB                      (0x3 << 15)
#define DCMIPP_P0HWCFGR_CSR_Pos                  17
#define DCMIPP_P0HWCFGR_CSR_Msk                  (0x1 << 17)
#define DCMIPP_P0HWCFGR_CSR                      (0x1 << 17)
#define DCMIPP_P0HWCFGR_CGM_Pos                  18
#define DCMIPP_P0HWCFGR_CGM_Msk                  (0x3 << 18)
#define DCMIPP_P0HWCFGR_CGM                      (0x3 << 18)
#define DCMIPP_P0HWCFGR_CFRATE_Pos               20
#define DCMIPP_P0HWCFGR_CFRATE_Msk               (0x1 << 20)
#define DCMIPP_P0HWCFGR_CFRATE                   (0x1 << 20)
#define DCMIPP_P0HWCFGR_CCPT_Pos                 21
#define DCMIPP_P0HWCFGR_CCPT_Msk                 (0x1 << 21)
#define DCMIPP_P0HWCFGR_CCPT                     (0x1 << 21)
#define DCMIPP_P0HWCFGR_CFRMCNT_Pos              22
#define DCMIPP_P0HWCFGR_CFRMCNT_Msk              (0x1 << 22)
#define DCMIPP_P0HWCFGR_CFRMCNT                  (0x1 << 22)
#define DCMIPP_P0HWCFGR_CPIPEDIFF_Pos            23
#define DCMIPP_P0HWCFGR_CPIPEDIFF_Msk            (0x1 << 23)
#define DCMIPP_P0HWCFGR_CPIPEDIFF                (0x1 << 23)
#define DCMIPP_P0HWCFGR_CVCDT_Pos                24
#define DCMIPP_P0HWCFGR_CVCDT_Msk                (0x1 << 24)
#define DCMIPP_P0HWCFGR_CVCDT                    (0x1 << 24)
#define DCMIPP_P0HWCFGR_CINSEL_Pos               25
#define DCMIPP_P0HWCFGR_CINSEL_Msk               (0x1 << 25)
#define DCMIPP_P0HWCFGR_CINSEL                   (0x1 << 25)

/* Bit fields for DCMIPP_P0FSCR register */
#define DCMIPP_P0FSCR_VCDTIDB_Pos                0
#define DCMIPP_P0FSCR_VCDTIDB_Msk                (0xff << 0)
#define DCMIPP_P0FSCR_VCDTIDB                    (0xff << 0)
#define DCMIPP_P0FSCR_VCDTIDA_Pos                8
#define DCMIPP_P0FSCR_VCDTIDA_Msk                (0xff << 8)
#define DCMIPP_P0FSCR_VCDTIDA                    (0xff << 8)
#define DCMIPP_P0FSCR_VCDTMODE_Pos               16
#define DCMIPP_P0FSCR_VCDTMODE_Msk               (0x3 << 16)
#define DCMIPP_P0FSCR_VCDTMODE                   (0x3 << 16)
#define DCMIPP_P0FSCR_FRATE_Pos                  26
#define DCMIPP_P0FSCR_FRATE_Msk                  (0x3 << 26)
#define DCMIPP_P0FSCR_FRATE                      (0x3 << 26)
#define DCMIPP_P0FSCR_CPTMODE_Pos                28
#define DCMIPP_P0FSCR_CPTMODE_Msk                (0x1 << 28)
#define DCMIPP_P0FSCR_CPTMODE                    (0x1 << 28)
#define DCMIPP_P0FSCR_CPTREQ_Pos                 29
#define DCMIPP_P0FSCR_CPTREQ_Msk                 (0x1 << 29)
#define DCMIPP_P0FSCR_CPTREQ                     (0x1 << 29)
#define DCMIPP_P0FSCR_INSEL_Pos                  30
#define DCMIPP_P0FSCR_INSEL_Msk                  (0x1 << 30)
#define DCMIPP_P0FSCR_INSEL                      (0x1 << 30)
#define DCMIPP_P0FSCR_PIPEN_Pos                  31
#define DCMIPP_P0FSCR_PIPEN_Msk                  (0x1 << 31)
#define DCMIPP_P0FSCR_PIPEN                      (0x1 << 31)

/* Bit fields for DCMIPP_P0DCOFFSETR register */
#define DCMIPP_P0DCOFFSETR_OFFSET_Pos            0
#define DCMIPP_P0DCOFFSETR_OFFSET_Msk            (0xffffff << 0)
#define DCMIPP_P0DCOFFSETR_OFFSET                (0xffffff << 0)

/* Bit fields for DCMIPP_P0DCCNTR register */
#define DCMIPP_P0DCCNTR_CNT_Pos                  0
#define DCMIPP_P0DCCNTR_CNT_Msk                  (0xffffff << 0)
#define DCMIPP_P0DCCNTR_CNT                      (0xffffff << 0)

/* Bit fields for DCMIPP_P0DCLIMITR register */
#define DCMIPP_P0DCLIMITR_LIMIT_Pos              0
#define DCMIPP_P0DCLIMITR_LIMIT_Msk              (0xffffff << 0)
#define DCMIPP_P0DCLIMITR_LIMIT                  (0xffffff << 0)
#define DCMIPP_P0DCLIMITR_ENABLE_Pos             31
#define DCMIPP_P0DCLIMITR_ENABLE_Msk             (0x1 << 31)
#define DCMIPP_P0DCLIMITR_ENABLE                 (0x1 << 31)

/* Bit fields for DCMIPP_P0PPCR register */
#define DCMIPP_P0PPCR_PAD_Pos                    5
#define DCMIPP_P0PPCR_PAD_Msk                    (0x1 << 5)
#define DCMIPP_P0PPCR_PAD                        (0x1 << 5)
#define DCMIPP_P0PPCR_HEADEREN_Pos               6
#define DCMIPP_P0PPCR_HEADEREN_Msk               (0x1 << 6)
#define DCMIPP_P0PPCR_HEADEREN                   (0x1 << 6)

/* Bit fields for DCMIPP_P0PPM0AR register */
#define DCMIPP_P0PPM0AR_M0A_Pos                  0
#define DCMIPP_P0PPM0AR_M0A_Msk                  (0xFFFFFFFF << 0)
#define DCMIPP_P0PPM0AR_M0A                      (0xFFFFFFFF << 0)

/* Bit fields for DCMIPP_P0IER register */
#define DCMIPP_P0IER_FRAMEIE_Pos                 1
#define DCMIPP_P0IER_FRAMEIE_Msk                 (0x1 << 1)
#define DCMIPP_P0IER_FRAMEIE                     (0x1 << 1)
#define DCMIPP_P0IER_VSYNCIE_Pos                 2
#define DCMIPP_P0IER_VSYNCIE_Msk                 (0x1 << 2)
#define DCMIPP_P0IER_VSYNCIE                     (0x1 << 2)
#define DCMIPP_P0IER_LIMITIE_Pos                 6
#define DCMIPP_P0IER_LIMITIE_Msk                 (0x1 << 6)
#define DCMIPP_P0IER_LIMITIE                     (0x1 << 6)
#define DCMIPP_P0IER_OVRIE_Pos                   7
#define DCMIPP_P0IER_OVRIE_Msk                   (0x1 << 7)
#define DCMIPP_P0IER_OVRIE                       (0x1 << 7)

/* Bit fields for DCMIPP_P0SR register */
#define DCMIPP_P0SR_FRAMEF_Pos                   1
#define DCMIPP_P0SR_FRAMEF_Msk                   (0x1 << 1)
#define DCMIPP_P0SR_FRAMEF                       (0x1 << 1)
#define DCMIPP_P0SR_VSYNCF_Pos                   2
#define DCMIPP_P0SR_VSYNCF_Msk                   (0x1 << 2)
#define DCMIPP_P0SR_VSYNCF                       (0x1 << 2)
#define DCMIPP_P0SR_LIMITF_Pos                   6
#define DCMIPP_P0SR_LIMITF_Msk                   (0x1 << 6)
#define DCMIPP_P0SR_LIMITF                       (0x1 << 6)
#define DCMIPP_P0SR_OVRF_Pos                     7
#define DCMIPP_P0SR_OVRF_Msk                     (0x1 << 7)
#define DCMIPP_P0SR_OVRF                         (0x1 << 7)
#define DCMIPP_P0SR_LSTLINE_Pos                  16
#define DCMIPP_P0SR_LSTLINE_Msk                  (0x1 << 16)
#define DCMIPP_P0SR_LSTLINE                      (0x1 << 16)
#define DCMIPP_P0SR_LSTFRM_Pos                   17
#define DCMIPP_P0SR_LSTFRM_Msk                   (0x1 << 17)
#define DCMIPP_P0SR_LSTFRM                       (0x1 << 17)
#define DCMIPP_P0SR_LSTVCID_Pos                  18
#define DCMIPP_P0SR_LSTVCID_Msk                  (0x3 << 18)
#define DCMIPP_P0SR_LSTVCID                      (0x3 << 18)
#define DCMIPP_P0SR_CPTACT_Pos                   23
#define DCMIPP_P0SR_CPTACT_Msk                   (0x1 << 23)
#define DCMIPP_P0SR_CPTACT                       (0x1 << 23)

/* Bit fields for DCMIPP_P0FCR register */
#define DCMIPP_P0FCR_CFRAMEF_Pos                 1
#define DCMIPP_P0FCR_CFRAMEF_Msk                 (0x1 << 1)
#define DCMIPP_P0FCR_CFRAMEF                     (0x1 << 1)
#define DCMIPP_P0FCR_CVSYNCF_Pos                 2
#define DCMIPP_P0FCR_CVSYNCF_Msk                 (0x1 << 2)
#define DCMIPP_P0FCR_CVSYNCF                     (0x1 << 2)
#define DCMIPP_P0FCR_CLIMITF_Pos                 6
#define DCMIPP_P0FCR_CLIMITF_Msk                 (0x1 << 6)
#define DCMIPP_P0FCR_CLIMITF                     (0x1 << 6)
#define DCMIPP_P0FCR_COVRF_Pos                   7
#define DCMIPP_P0FCR_COVRF_Msk                   (0x1 << 7)
#define DCMIPP_P0FCR_COVRF                       (0x1 << 7)

/* Bit fields for DCMIPP_P1FSCR register */
#define DCMIPP_P1FSCR_VCDTIDB_Pos                0
#define DCMIPP_P1FSCR_VCDTIDB_Msk                (0xff << 0)
#define DCMIPP_P1FSCR_VCDTIDB                    (0xff << 0)
#define DCMIPP_P1FSCR_VCDTIDA_Pos                8
#define DCMIPP_P1FSCR_VCDTIDA_Msk                (0xff << 8)
#define DCMIPP_P1FSCR_VCDTIDA                    (0xff << 8)
#define DCMIPP_P1FSCR_VCDTMODE_Pos               16
#define DCMIPP_P1FSCR_VCDTMODE_Msk               (0x3 << 16)
#define DCMIPP_P1FSCR_VCDTMODE                   (0x3 << 16)
#define DCMIPP_P1FSCR_PIPEDIFF_Pos               18
#define DCMIPP_P1FSCR_PIPEDIFF_Msk               (0x1 << 18)
#define DCMIPP_P1FSCR_PIPEDIFF                   (0x1 << 18)
#define DCMIPP_P1FSCR_FRATE_Pos                  26
#define DCMIPP_P1FSCR_FRATE_Msk                  (0x3 << 26)
#define DCMIPP_P1FSCR_FRATE                      (0x3 << 26)
#define DCMIPP_P1FSCR_CPTMODE_Pos                28
#define DCMIPP_P1FSCR_CPTMODE_Msk                (0x1 << 28)
#define DCMIPP_P1FSCR_CPTMODE                    (0x1 << 28)
#define DCMIPP_P1FSCR_CPTREQ_Pos                 29
#define DCMIPP_P1FSCR_CPTREQ_Msk                 (0x1 << 29)
#define DCMIPP_P1FSCR_CPTREQ                     (0x1 << 29)
#define DCMIPP_P1FSCR_PIPEN_Pos                  31
#define DCMIPP_P1FSCR_PIPEN_Msk                  (0x1 << 31)
#define DCMIPP_P1FSCR_PIPEN                      (0x1 << 31)

/* Bit fields for DCMIPP_P1FSCNTR register */
#define DCMIPP_P1FSCNTR_FRMCNT_Pos               0
#define DCMIPP_P1FSCNTR_FRMCNT_Msk               (0xFFFFFFFF << 0)
#define DCMIPP_P1FSCNTR_FRMCNT                   (0xFFFFFFFF << 0)

/* Bit fields for DCMIPP_P1GMCR0 register */
#define DCMIPP_P1GMCR0_SHB_Pos                   2
#define DCMIPP_P1GMCR0_SHB_Msk                   (0x3 << 2)
#define DCMIPP_P1GMCR0_SHB                       (0x3 << 2)
#define DCMIPP_P1GMCR0_SHG_Pos                   4
#define DCMIPP_P1GMCR0_SHG_Msk                   (0x3 << 4)
#define DCMIPP_P1GMCR0_SHG                       (0x3 << 4)
#define DCMIPP_P1GMCR0_SHR_Pos                   6
#define DCMIPP_P1GMCR0_SHR_Msk                   (0x3 << 6)
#define DCMIPP_P1GMCR0_SHR                       (0x3 << 6)
#define DCMIPP_P1GMCR0_ENABLE_Pos                8
#define DCMIPP_P1GMCR0_ENABLE_Msk                (0x1 << 8)
#define DCMIPP_P1GMCR0_ENABLE                    (0x1 << 8)
#define DCMIPP_P1GMCR0_BR0_Pos                   16
#define DCMIPP_P1GMCR0_BR0_Msk                   (0x7f << 16)
#define DCMIPP_P1GMCR0_BR0                       (0x7f << 16)
#define DCMIPP_P1GMCR0_AR0_Pos                   24
#define DCMIPP_P1GMCR0_AR0_Msk                   (0x3f << 24)
#define DCMIPP_P1GMCR0_AR0                       (0x3f << 24)

/* Bit fields for DCMIPP_P1GMCR1 register */
#define DCMIPP_P1GMCR1_BR1_Pos                   0
#define DCMIPP_P1GMCR1_BR1_Msk                   (0x7f << 0)
#define DCMIPP_P1GMCR1_BR1                       (0x7f << 0)
#define DCMIPP_P1GMCR1_AR1_Pos                   8
#define DCMIPP_P1GMCR1_AR1_Msk                   (0x3f << 8)
#define DCMIPP_P1GMCR1_AR1                       (0x3f << 8)
#define DCMIPP_P1GMCR1_BR2_Pos                   16
#define DCMIPP_P1GMCR1_BR2_Msk                   (0x7f << 16)
#define DCMIPP_P1GMCR1_BR2                       (0x7f << 16)
#define DCMIPP_P1GMCR1_AR2_Pos                   24
#define DCMIPP_P1GMCR1_AR2_Msk                   (0x3f << 24)
#define DCMIPP_P1GMCR1_AR2                       (0x3f << 24)

/* Bit fields for DCMIPP_P1GMCR2 register */
#define DCMIPP_P1GMCR2_BG0_Pos                   0
#define DCMIPP_P1GMCR2_BG0_Msk                   (0x7f << 0)
#define DCMIPP_P1GMCR2_BG0                       (0x7f << 0)
#define DCMIPP_P1GMCR2_AG0_Pos                   8
#define DCMIPP_P1GMCR2_AG0_Msk                   (0x3f << 8)
#define DCMIPP_P1GMCR2_AG0                       (0x3f << 8)
#define DCMIPP_P1GMCR2_BG1_Pos                   16
#define DCMIPP_P1GMCR2_BG1_Msk                   (0x7f << 16)
#define DCMIPP_P1GMCR2_BG1                       (0x7f << 16)
#define DCMIPP_P1GMCR2_AG1_Pos                   24
#define DCMIPP_P1GMCR2_AG1_Msk                   (0x3f << 24)
#define DCMIPP_P1GMCR2_AG1                       (0x3f << 24)

/* Bit fields for DCMIPP_P1GMCR3 register */
#define DCMIPP_P1GMCR3_BG2_Pos                   0
#define DCMIPP_P1GMCR3_BG2_Msk                   (0x7f << 0)
#define DCMIPP_P1GMCR3_BG2                       (0x7f << 0)
#define DCMIPP_P1GMCR3_AG2_Pos                   8
#define DCMIPP_P1GMCR3_AG2_Msk                   (0x3f << 8)
#define DCMIPP_P1GMCR3_AG2                       (0x3f << 8)
#define DCMIPP_P1GMCR3_BB0_Pos                   16
#define DCMIPP_P1GMCR3_BB0_Msk                   (0x7f << 16)
#define DCMIPP_P1GMCR3_BB0                       (0x7f << 16)
#define DCMIPP_P1GMCR3_AB0_Pos                   24
#define DCMIPP_P1GMCR3_AB0_Msk                   (0x3f << 24)
#define DCMIPP_P1GMCR3_AB0                       (0x3f << 24)

/* Bit fields for DCMIPP_P1GMCR4 register */
#define DCMIPP_P1GMCR4_BB1_Pos                   0
#define DCMIPP_P1GMCR4_BB1_Msk                   (0x7f << 0)
#define DCMIPP_P1GMCR4_BB1                       (0x7f << 0)
#define DCMIPP_P1GMCR4_AB1_Pos                   8
#define DCMIPP_P1GMCR4_AB1_Msk                   (0x3f << 8)
#define DCMIPP_P1GMCR4_AB1                       (0x3f << 8)
#define DCMIPP_P1GMCR4_BB2_Pos                   16
#define DCMIPP_P1GMCR4_BB2_Msk                   (0x7f << 16)
#define DCMIPP_P1GMCR4_BB2                       (0x7f << 16)
#define DCMIPP_P1GMCR4_AB2_Pos                   24
#define DCMIPP_P1GMCR4_AB2_Msk                   (0x3f << 24)
#define DCMIPP_P1GMCR4_AB2                       (0x3f << 24)

/* Bit fields for DCMIPP_P1SRCR register */
#define DCMIPP_P1SRCR_LASTLINE_Pos               0
#define DCMIPP_P1SRCR_LASTLINE_Msk               (0xfff << 0)
#define DCMIPP_P1SRCR_LASTLINE                   (0xfff << 0)
#define DCMIPP_P1SRCR_FIRSTLINEDEL_Pos           12
#define DCMIPP_P1SRCR_FIRSTLINEDEL_Msk           (0x7 << 12)
#define DCMIPP_P1SRCR_FIRSTLINEDEL               (0x7 << 12)
#define DCMIPP_P1SRCR_DELEN_Pos                  15
#define DCMIPP_P1SRCR_DELEN_Msk                  (0x1 << 15)
#define DCMIPP_P1SRCR_DELEN                      (0x1 << 15)

/* Bit fields for DCMIPP_P1RBCR register */
#define DCMIPP_P1RBCR_ENABLE_Pos                 0
#define DCMIPP_P1RBCR_ENABLE_Msk                 (0x1 << 0)
#define DCMIPP_P1RBCR_ENABLE                     (0x1 << 0)
#define DCMIPP_P1RBCR_TYPE_Pos                   1
#define DCMIPP_P1RBCR_TYPE_Msk                   (0x3 << 1)
#define DCMIPP_P1RBCR_TYPE                       (0x3 << 1)
#define DCMIPP_P1RBCR_PEAK_Pos                   16
#define DCMIPP_P1RBCR_PEAK_Msk                   (0xf << 16)
#define DCMIPP_P1RBCR_PEAK                       (0xf << 16)
#define DCMIPP_P1RBCR_LINEV_Pos                  20
#define DCMIPP_P1RBCR_LINEV_Msk                  (0xf << 20)
#define DCMIPP_P1RBCR_LINEV                      (0xf << 20)
#define DCMIPP_P1RBCR_LINEH_Pos                  24
#define DCMIPP_P1RBCR_LINEH_Msk                  (0xf << 24)
#define DCMIPP_P1RBCR_LINEH                      (0xf << 24)
#define DCMIPP_P1RBCR_EDGE_Pos                   28
#define DCMIPP_P1RBCR_EDGE_Msk                   (0xf << 28)
#define DCMIPP_P1RBCR_EDGE                       (0xf << 28)

/* Bit fields for DCMIPP_P1CRSTARTR register */
#define DCMIPP_P1CRSTARTR_HSTART_Pos             0
#define DCMIPP_P1CRSTARTR_HSTART_Msk             (0xfff << 0)
#define DCMIPP_P1CRSTARTR_HSTART                 (0xfff << 0)
#define DCMIPP_P1CRSTARTR_VSTART_Pos             16
#define DCMIPP_P1CRSTARTR_VSTART_Msk             (0xfff << 16)
#define DCMIPP_P1CRSTARTR_VSTART                 (0xfff << 16)

/* Bit fields for DCMIPP_P1CRSIZER register */
#define DCMIPP_P1CRSIZER_HSIZE_Pos               0
#define DCMIPP_P1CRSIZER_HSIZE_Msk               (0xfff << 0)
#define DCMIPP_P1CRSIZER_HSIZE                   (0xfff << 0)
#define DCMIPP_P1CRSIZER_VSIZE_Pos               16
#define DCMIPP_P1CRSIZER_VSIZE_Msk               (0xfff << 16)
#define DCMIPP_P1CRSIZER_VSIZE                   (0xfff << 16)
#define DCMIPP_P1CRSIZER_ENABLE_Pos              31
#define DCMIPP_P1CRSIZER_ENABLE_Msk              (0x1 << 31)
#define DCMIPP_P1CRSIZER_ENABLE                  (0x1 << 31)

/* Bit fields for DCMIPP_P1DSCR register */
#define DCMIPP_P1DSCR_HDIV_Pos                   0
#define DCMIPP_P1DSCR_HDIV_Msk                   (0x3ff << 0)
#define DCMIPP_P1DSCR_HDIV                       (0x3ff << 0)
#define DCMIPP_P1DSCR_VDIV_Pos                   16
#define DCMIPP_P1DSCR_VDIV_Msk                   (0x3ff << 16)
#define DCMIPP_P1DSCR_VDIV                       (0x3ff << 16)
#define DCMIPP_P1DSCR_ENABLE_Pos                 31
#define DCMIPP_P1DSCR_ENABLE_Msk                 (0x1 << 31)
#define DCMIPP_P1DSCR_ENABLE                     (0x1 << 31)

/* Bit fields for DCMIPP_P1DSRATIOR register */
#define DCMIPP_P1DSRATIOR_HRATIO_Pos             0
#define DCMIPP_P1DSRATIOR_HRATIO_Msk             (0xffff << 0)
#define DCMIPP_P1DSRATIOR_HRATIO                 (0xffff << 0)
#define DCMIPP_P1DSRATIOR_VRATIO_Pos             16
#define DCMIPP_P1DSRATIOR_VRATIO_Msk             (0xffff << 16)
#define DCMIPP_P1DSRATIOR_VRATIO                 (0xffff << 16)

/* Bit fields for DCMIPP_P1DSSIZER register */
#define DCMIPP_P1DSSIZER_HSIZE_Pos               0
#define DCMIPP_P1DSSIZER_HSIZE_Msk               (0xfff << 0)
#define DCMIPP_P1DSSIZER_HSIZE                   (0xfff << 0)
#define DCMIPP_P1DSSIZER_VSIZE_Pos               16
#define DCMIPP_P1DSSIZER_VSIZE_Msk               (0xfff << 16)
#define DCMIPP_P1DSSIZER_VSIZE                   (0xfff << 16)

/* Bit fields for DCMIPP_P1CCCR register */
#define DCMIPP_P1CCCR_ENABLE_Pos                 0
#define DCMIPP_P1CCCR_ENABLE_Msk                 (0x1 << 0)
#define DCMIPP_P1CCCR_ENABLE                     (0x1 << 0)
#define DCMIPP_P1CCCR_TYPE_Pos                   1
#define DCMIPP_P1CCCR_TYPE_Msk                   (0x1 << 1)
#define DCMIPP_P1CCCR_TYPE                       (0x1 << 1)
#define DCMIPP_P1CCCR_CLAMP_Pos                  2
#define DCMIPP_P1CCCR_CLAMP_Msk                  (0x1 << 2)
#define DCMIPP_P1CCCR_CLAMP                      (0x1 << 2)

/* Bit fields for DCMIPP_P1CCRR1 register */
#define DCMIPP_P1CCRR1_RR_Pos                    0
#define DCMIPP_P1CCRR1_RR_Msk                    (0x7ff << 0)
#define DCMIPP_P1CCRR1_RR                        (0x7ff << 0)
#define DCMIPP_P1CCRR1_RG_Pos                    16
#define DCMIPP_P1CCRR1_RG_Msk                    (0x7ff << 16)
#define DCMIPP_P1CCRR1_RG                        (0x7ff << 16)

/* Bit fields for DCMIPP_P1CCRR2 register */
#define DCMIPP_P1CCRR2_RB_Pos                    0
#define DCMIPP_P1CCRR2_RB_Msk                    (0x7ff << 0)
#define DCMIPP_P1CCRR2_RB                        (0x7ff << 0)
#define DCMIPP_P1CCRR2_RA_Pos                    16
#define DCMIPP_P1CCRR2_RA_Msk                    (0x3ff << 16)
#define DCMIPP_P1CCRR2_RA                        (0x3ff << 16)

/* Bit fields for DCMIPP_P1CCGR1 register */
#define DCMIPP_P1CCGR1_GR_Pos                    0
#define DCMIPP_P1CCGR1_GR_Msk                    (0x7ff << 0)
#define DCMIPP_P1CCGR1_GR                        (0x7ff << 0)
#define DCMIPP_P1CCGR1_GG_Pos                    16
#define DCMIPP_P1CCGR1_GG_Msk                    (0x7ff << 16)
#define DCMIPP_P1CCGR1_GG                        (0x7ff << 16)

/* Bit fields for DCMIPP_P1CCGR2 register */
#define DCMIPP_P1CCGR2_GB_Pos                    0
#define DCMIPP_P1CCGR2_GB_Msk                    (0x7ff << 0)
#define DCMIPP_P1CCGR2_GB                        (0x7ff << 0)
#define DCMIPP_P1CCGR2_GA_Pos                    16
#define DCMIPP_P1CCGR2_GA_Msk                    (0x3ff << 16)
#define DCMIPP_P1CCGR2_GA                        (0x3ff << 16)

/* Bit fields for DCMIPP_P1CCBR1 register */
#define DCMIPP_P1CCBR1_BR_Pos                    0
#define DCMIPP_P1CCBR1_BR_Msk                    (0x7ff << 0)
#define DCMIPP_P1CCBR1_BR                        (0x7ff << 0)
#define DCMIPP_P1CCBR1_BG_Pos                    16
#define DCMIPP_P1CCBR1_BG_Msk                    (0x7ff << 16)
#define DCMIPP_P1CCBR1_BG                        (0x7ff << 16)

/* Bit fields for DCMIPP_P1CCBR2 register */
#define DCMIPP_P1CCBR2_BB_Pos                    0
#define DCMIPP_P1CCBR2_BB_Msk                    (0x7ff << 0)
#define DCMIPP_P1CCBR2_BB                        (0x7ff << 0)
#define DCMIPP_P1CCBR2_BA_Pos                    16
#define DCMIPP_P1CCBR2_BA_Msk                    (0x3ff << 16)
#define DCMIPP_P1CCBR2_BA                        (0x3ff << 16)

/* Bit fields for DCMIPP_P1PPCR register */
#define DCMIPP_P1PPCR_FORMAT_Pos                 0
#define DCMIPP_P1PPCR_FORMAT_Msk                 (0xf << 0)
#define DCMIPP_P1PPCR_FORMAT                     (0xf << 0)
#define DCMIPP_P1PPCR_SWAPRB_Pos                 4
#define DCMIPP_P1PPCR_SWAPRB_Msk                 (0x1 << 4)
#define DCMIPP_P1PPCR_SWAPRB                     (0x1 << 4)
#define DCMIPP_P1PPCR_VDEC_Pos                   7
#define DCMIPP_P1PPCR_VDEC_Msk                   (0x3 << 7)
#define DCMIPP_P1PPCR_VDEC                       (0x3 << 7)
#define DCMIPP_P1PPCR_HDEC_Pos                   9
#define DCMIPP_P1PPCR_HDEC_Msk                   (0x3 << 9)
#define DCMIPP_P1PPCR_HDEC                       (0x3 << 9)
#define DCMIPP_P1PPCR_LINEMULT_Pos               13
#define DCMIPP_P1PPCR_LINEMULT_Msk               (0x7 << 13)
#define DCMIPP_P1PPCR_LINEMULT                   (0x7 << 13)

/* Bit fields for DCMIPP_P1PPM0AR register */
#define DCMIPP_P1PPM0AR_M0A_Pos                  0
#define DCMIPP_P1PPM0AR_M0A_Msk                  (0xFFFFFFFF << 0)
#define DCMIPP_P1PPM0AR_M0A                      (0xFFFFFFFF << 0)

/* Bit fields for DCMIPP_P1PPM0PITCHR register */
#define DCMIPP_P1PPM0PITCHR_PITCH_Pos            0
#define DCMIPP_P1PPM0PITCHR_PITCH_Msk            (0x7fff << 0)
#define DCMIPP_P1PPM0PITCHR_PITCH                (0x7fff << 0)

/* Bit fields for DCMIPP_P1PPM1AR register */
#define DCMIPP_P1PPM1AR_M1A_Pos                  0
#define DCMIPP_P1PPM1AR_M1A_Msk                  (0xFFFFFFFF << 0)
#define DCMIPP_P1PPM1AR_M1A                      (0xFFFFFFFF << 0)

/* Bit fields for DCMIPP_P1PPM1PITCHR register */
#define DCMIPP_P1PPM1PITCHR_PITCH_Pos            0
#define DCMIPP_P1PPM1PITCHR_PITCH_Msk            (0x7fff << 0)
#define DCMIPP_P1PPM1PITCHR_PITCH                (0x7fff << 0)

/* Bit fields for DCMIPP_P1PPM2AR register */
#define DCMIPP_P1PPM2AR_M2A_Pos                  0
#define DCMIPP_P1PPM2AR_M2A_Msk                  (0xFFFFFFFF << 0)
#define DCMIPP_P1PPM2AR_M2A                      (0xFFFFFFFF << 0)

/* Bit fields for DCMIPP_P1IER register */
#define DCMIPP_P1IER_LINEIE_Pos                  0
#define DCMIPP_P1IER_LINEIE_Msk                  (0x1 << 0)
#define DCMIPP_P1IER_LINEIE                      (0x1 << 0)
#define DCMIPP_P1IER_FRAMEIE_Pos                 1
#define DCMIPP_P1IER_FRAMEIE_Msk                 (0x1 << 1)
#define DCMIPP_P1IER_FRAMEIE                     (0x1 << 1)
#define DCMIPP_P1IER_VSYNCIE_Pos                 2
#define DCMIPP_P1IER_VSYNCIE_Msk                 (0x1 << 2)
#define DCMIPP_P1IER_VSYNCIE                     (0x1 << 2)
#define DCMIPP_P1IER_OVRIE_Pos                   7
#define DCMIPP_P1IER_OVRIE_Msk                   (0x1 << 7)
#define DCMIPP_P1IER_OVRIE                       (0x1 << 7)

/* Bit fields for DCMIPP_P1SR register */
#define DCMIPP_P1SR_LINEF_Pos                    0
#define DCMIPP_P1SR_LINEF_Msk                    (0x1 << 0)
#define DCMIPP_P1SR_LINEF                        (0x1 << 0)
#define DCMIPP_P1SR_FRAMEF_Pos                   1
#define DCMIPP_P1SR_FRAMEF_Msk                   (0x1 << 1)
#define DCMIPP_P1SR_FRAMEF                       (0x1 << 1)
#define DCMIPP_P1SR_VSYNCF_Pos                   2
#define DCMIPP_P1SR_VSYNCF_Msk                   (0x1 << 2)
#define DCMIPP_P1SR_VSYNCF                       (0x1 << 2)
#define DCMIPP_P1SR_OVRF_Pos                     7
#define DCMIPP_P1SR_OVRF_Msk                     (0x1 << 7)
#define DCMIPP_P1SR_OVRF                         (0x1 << 7)
#define DCMIPP_P1SR_LSTLINE_Pos                  16
#define DCMIPP_P1SR_LSTLINE_Msk                  (0x1 << 16)
#define DCMIPP_P1SR_LSTLINE                      (0x1 << 16)
#define DCMIPP_P1SR_LSTFRM_Pos                   17
#define DCMIPP_P1SR_LSTFRM_Msk                   (0x1 << 17)
#define DCMIPP_P1SR_LSTFRM                       (0x1 << 17)
#define DCMIPP_P1SR_LSTVCID_Pos                  18
#define DCMIPP_P1SR_LSTVCID_Msk                  (0x3 << 18)
#define DCMIPP_P1SR_LSTVCID                      (0x3 << 18)
#define DCMIPP_P1SR_CPTACT_Pos                   23
#define DCMIPP_P1SR_CPTACT_Msk                   (0x1 << 23)
#define DCMIPP_P1SR_CPTACT                       (0x1 << 23)

/* Bit fields for DCMIPP_P1FCR register */
#define DCMIPP_P1FCR_CLINEF_Pos                  0
#define DCMIPP_P1FCR_CLINEF_Msk                  (0x1 << 0)
#define DCMIPP_P1FCR_CLINEF                      (0x1 << 0)
#define DCMIPP_P1FCR_CFRAMEF_Pos                 1
#define DCMIPP_P1FCR_CFRAMEF_Msk                 (0x1 << 1)
#define DCMIPP_P1FCR_CFRAMEF                     (0x1 << 1)
#define DCMIPP_P1FCR_CVSYNCF_Pos                 2
#define DCMIPP_P1FCR_CVSYNCF_Msk                 (0x1 << 2)
#define DCMIPP_P1FCR_CVSYNCF                     (0x1 << 2)
#define DCMIPP_P1FCR_COVRF_Pos                   7
#define DCMIPP_P1FCR_COVRF_Msk                   (0x1 << 7)
#define DCMIPP_P1FCR_COVRF                       (0x1 << 7)

/* Bit fields for DCMIPP_P2HWCFGR register */
#define DCMIPP_P2HWCFGR_CINT_Pos                 0
#define DCMIPP_P2HWCFGR_CINT_Msk                 (0x1 << 0)
#define DCMIPP_P2HWCFGR_CINT                     (0x1 << 0)
#define DCMIPP_P2HWCFGR_CBUF2_Pos                1
#define DCMIPP_P2HWCFGR_CBUF2_Msk                (0x1 << 1)
#define DCMIPP_P2HWCFGR_CBUF2                    (0x1 << 1)
#define DCMIPP_P2HWCFGR_CPLA3_Pos                2
#define DCMIPP_P2HWCFGR_CPLA3_Msk                (0x1 << 2)
#define DCMIPP_P2HWCFGR_CPLA3                    (0x1 << 2)
#define DCMIPP_P2HWCFGR_CD2D_Pos                 3
#define DCMIPP_P2HWCFGR_CD2D_Msk                 (0x1 << 3)
#define DCMIPP_P2HWCFGR_CD2D                     (0x1 << 3)
#define DCMIPP_P2HWCFGR_CHEAD_Pos                4
#define DCMIPP_P2HWCFGR_CHEAD_Msk                (0x1 << 4)
#define DCMIPP_P2HWCFGR_CHEAD                    (0x1 << 4)
#define DCMIPP_P2HWCFGR_CVMIR_Pos                5
#define DCMIPP_P2HWCFGR_CVMIR_Msk                (0x1 << 5)
#define DCMIPP_P2HWCFGR_CVMIR                    (0x1 << 5)
#define DCMIPP_P2HWCFGR_CHMIR_Pos                6
#define DCMIPP_P2HWCFGR_CHMIR_Msk                (0x1 << 6)
#define DCMIPP_P2HWCFGR_CHMIR                    (0x1 << 6)
#define DCMIPP_P2HWCFGR_CPP_Pos                  7
#define DCMIPP_P2HWCFGR_CPP_Msk                  (0x1 << 7)
#define DCMIPP_P2HWCFGR_CPP                      (0x1 << 7)
#define DCMIPP_P2HWCFGR_CDC_Pos                  8
#define DCMIPP_P2HWCFGR_CDC_Msk                  (0x1 << 8)
#define DCMIPP_P2HWCFGR_CDC                      (0x1 << 8)
#define DCMIPP_P2HWCFGR_CDEC_Pos                 9
#define DCMIPP_P2HWCFGR_CDEC_Msk                 (0x1 << 9)
#define DCMIPP_P2HWCFGR_CDEC                     (0x1 << 9)
#define DCMIPP_P2HWCFGR_CCC_Pos                  10
#define DCMIPP_P2HWCFGR_CCC_Msk                  (0x1 << 10)
#define DCMIPP_P2HWCFGR_CCC                      (0x1 << 10)
#define DCMIPP_P2HWCFGR_CDS_Pos                  11
#define DCMIPP_P2HWCFGR_CDS_Msk                  (0x3 << 11)
#define DCMIPP_P2HWCFGR_CDS                      (0x3 << 11)
#define DCMIPP_P2HWCFGR_CCR_Pos                  13
#define DCMIPP_P2HWCFGR_CCR_Msk                  (0x3 << 13)
#define DCMIPP_P2HWCFGR_CCR                      (0x3 << 13)
#define DCMIPP_P2HWCFGR_CRB_Pos                  15
#define DCMIPP_P2HWCFGR_CRB_Msk                  (0x3 << 15)
#define DCMIPP_P2HWCFGR_CRB                      (0x3 << 15)
#define DCMIPP_P2HWCFGR_CSR_Pos                  17
#define DCMIPP_P2HWCFGR_CSR_Msk                  (0x1 << 17)
#define DCMIPP_P2HWCFGR_CSR                      (0x1 << 17)
#define DCMIPP_P2HWCFGR_CGM_Pos                  18
#define DCMIPP_P2HWCFGR_CGM_Msk                  (0x3 << 18)
#define DCMIPP_P2HWCFGR_CGM                      (0x3 << 18)
#define DCMIPP_P2HWCFGR_CFRATE_Pos               20
#define DCMIPP_P2HWCFGR_CFRATE_Msk               (0x1 << 20)
#define DCMIPP_P2HWCFGR_CFRATE                   (0x1 << 20)
#define DCMIPP_P2HWCFGR_CCPT_Pos                 21
#define DCMIPP_P2HWCFGR_CCPT_Msk                 (0x1 << 21)
#define DCMIPP_P2HWCFGR_CCPT                     (0x1 << 21)
#define DCMIPP_P2HWCFGR_CFRMCNT_Pos              22
#define DCMIPP_P2HWCFGR_CFRMCNT_Msk              (0x1 << 22)
#define DCMIPP_P2HWCFGR_CFRMCNT                  (0x1 << 22)
#define DCMIPP_P2HWCFGR_CPIPEDIFF_Pos            23
#define DCMIPP_P2HWCFGR_CPIPEDIFF_Msk            (0x1 << 23)
#define DCMIPP_P2HWCFGR_CPIPEDIFF                (0x1 << 23)
#define DCMIPP_P2HWCFGR_CVCDT_Pos                24
#define DCMIPP_P2HWCFGR_CVCDT_Msk                (0x1 << 24)
#define DCMIPP_P2HWCFGR_CVCDT                    (0x1 << 24)
#define DCMIPP_P2HWCFGR_CINSEL_Pos               25
#define DCMIPP_P2HWCFGR_CINSEL_Msk               (0x1 << 25)
#define DCMIPP_P2HWCFGR_CINSEL                   (0x1 << 25)

/* Bit fields for DCMIPP_P2FSCR register */
#define DCMIPP_P2FSCR_FRATE_Pos                  26
#define DCMIPP_P2FSCR_FRATE_Msk                  (0x3 << 26)
#define DCMIPP_P2FSCR_FRATE                      (0x3 << 26)
#define DCMIPP_P2FSCR_CPTMODE_Pos                28
#define DCMIPP_P2FSCR_CPTMODE_Msk                (0x1 << 28)
#define DCMIPP_P2FSCR_CPTMODE                    (0x1 << 28)
#define DCMIPP_P2FSCR_CPTREQ_Pos                 29
#define DCMIPP_P2FSCR_CPTREQ_Msk                 (0x1 << 29)
#define DCMIPP_P2FSCR_CPTREQ                     (0x1 << 29)
#define DCMIPP_P2FSCR_PIPEN_Pos                  31
#define DCMIPP_P2FSCR_PIPEN_Msk                  (0x1 << 31)
#define DCMIPP_P2FSCR_PIPEN                      (0x1 << 31)

/* Bit fields for DCMIPP_P2CRSTARTR register */
#define DCMIPP_P2CRSTARTR_HSTART_Pos             0
#define DCMIPP_P2CRSTARTR_HSTART_Msk             (0xfff << 0)
#define DCMIPP_P2CRSTARTR_HSTART                 (0xfff << 0)
#define DCMIPP_P2CRSTARTR_VSTART_Pos             16
#define DCMIPP_P2CRSTARTR_VSTART_Msk             (0xfff << 16)
#define DCMIPP_P2CRSTARTR_VSTART                 (0xfff << 16)

/* Bit fields for DCMIPP_P2CRSIZER register */
#define DCMIPP_P2CRSIZER_HSIZE_Pos               0
#define DCMIPP_P2CRSIZER_HSIZE_Msk               (0xfff << 0)
#define DCMIPP_P2CRSIZER_HSIZE                   (0xfff << 0)
#define DCMIPP_P2CRSIZER_VSIZE_Pos               16
#define DCMIPP_P2CRSIZER_VSIZE_Msk               (0xfff << 16)
#define DCMIPP_P2CRSIZER_VSIZE                   (0xfff << 16)
#define DCMIPP_P2CRSIZER_ENABLE_Pos              31
#define DCMIPP_P2CRSIZER_ENABLE_Msk              (0x1 << 31)
#define DCMIPP_P2CRSIZER_ENABLE                  (0x1 << 31)

/* Bit fields for DCMIPP_P2DSCR register */
#define DCMIPP_P2DSCR_HDIV_Pos                   0
#define DCMIPP_P2DSCR_HDIV_Msk                   (0x3ff << 0)
#define DCMIPP_P2DSCR_HDIV                       (0x3ff << 0)
#define DCMIPP_P2DSCR_VDIV_Pos                   16
#define DCMIPP_P2DSCR_VDIV_Msk                   (0x3ff << 16)
#define DCMIPP_P2DSCR_VDIV                       (0x3ff << 16)
#define DCMIPP_P2DSCR_ENABLE_Pos                 31
#define DCMIPP_P2DSCR_ENABLE_Msk                 (0x1 << 31)
#define DCMIPP_P2DSCR_ENABLE                     (0x1 << 31)

/* Bit fields for DCMIPP_P2DSRATIOR register */
#define DCMIPP_P2DSRATIOR_HRATIO_Pos             0
#define DCMIPP_P2DSRATIOR_HRATIO_Msk             (0xffff << 0)
#define DCMIPP_P2DSRATIOR_HRATIO                 (0xffff << 0)
#define DCMIPP_P2DSRATIOR_VRATIO_Pos             16
#define DCMIPP_P2DSRATIOR_VRATIO_Msk             (0xffff << 16)
#define DCMIPP_P2DSRATIOR_VRATIO                 (0xffff << 16)

/* Bit fields for DCMIPP_P2DSSIZER register */
#define DCMIPP_P2DSSIZER_HSIZE_Pos               0
#define DCMIPP_P2DSSIZER_HSIZE_Msk               (0xfff << 0)
#define DCMIPP_P2DSSIZER_HSIZE                   (0xfff << 0)
#define DCMIPP_P2DSSIZER_VSIZE_Pos               16
#define DCMIPP_P2DSSIZER_VSIZE_Msk               (0xfff << 16)
#define DCMIPP_P2DSSIZER_VSIZE                   (0xfff << 16)

/* Bit fields for DCMIPP_P2CCCR register */
#define DCMIPP_P2CCCR_ENABLE_Pos                 0
#define DCMIPP_P2CCCR_ENABLE_Msk                 (0x1 << 0)
#define DCMIPP_P2CCCR_ENABLE                     (0x1 << 0)
#define DCMIPP_P2CCCR_TYPE_Pos                   1
#define DCMIPP_P2CCCR_TYPE_Msk                   (0x1 << 1)
#define DCMIPP_P2CCCR_TYPE                       (0x1 << 1)
#define DCMIPP_P2CCCR_CLAMP_Pos                  2
#define DCMIPP_P2CCCR_CLAMP_Msk                  (0x1 << 2)
#define DCMIPP_P2CCCR_CLAMP                      (0x1 << 2)

/* Bit fields for DCMIPP_P2CCRR1 register */
#define DCMIPP_P2CCRR1_RR_Pos                    0
#define DCMIPP_P2CCRR1_RR_Msk                    (0x7ff << 0)
#define DCMIPP_P2CCRR1_RR                        (0x7ff << 0)
#define DCMIPP_P2CCRR1_RG_Pos                    16
#define DCMIPP_P2CCRR1_RG_Msk                    (0x7ff << 16)
#define DCMIPP_P2CCRR1_RG                        (0x7ff << 16)

/* Bit fields for DCMIPP_P2CCRR2 register */
#define DCMIPP_P2CCRR2_RB_Pos                    0
#define DCMIPP_P2CCRR2_RB_Msk                    (0x7ff << 0)
#define DCMIPP_P2CCRR2_RB                        (0x7ff << 0)
#define DCMIPP_P2CCRR2_RA_Pos                    16
#define DCMIPP_P2CCRR2_RA_Msk                    (0x3ff << 16)
#define DCMIPP_P2CCRR2_RA                        (0x3ff << 16)

/* Bit fields for DCMIPP_P2CCGR1 register */
#define DCMIPP_P2CCGR1_GR_Pos                    0
#define DCMIPP_P2CCGR1_GR_Msk                    (0x7ff << 0)
#define DCMIPP_P2CCGR1_GR                        (0x7ff << 0)
#define DCMIPP_P2CCGR1_GG_Pos                    16
#define DCMIPP_P2CCGR1_GG_Msk                    (0x7ff << 16)
#define DCMIPP_P2CCGR1_GG                        (0x7ff << 16)

/* Bit fields for DCMIPP_P2CCGR2 register */
#define DCMIPP_P2CCGR2_GB_Pos                    0
#define DCMIPP_P2CCGR2_GB_Msk                    (0x7ff << 0)
#define DCMIPP_P2CCGR2_GB                        (0x7ff << 0)
#define DCMIPP_P2CCGR2_GA_Pos                    16
#define DCMIPP_P2CCGR2_GA_Msk                    (0x3ff << 16)
#define DCMIPP_P2CCGR2_GA                        (0x3ff << 16)

/* Bit fields for DCMIPP_P2CCBR1 register */
#define DCMIPP_P2CCBR1_BR_Pos                    0
#define DCMIPP_P2CCBR1_BR_Msk                    (0x7ff << 0)
#define DCMIPP_P2CCBR1_BR                        (0x7ff << 0)
#define DCMIPP_P2CCBR1_BG_Pos                    16
#define DCMIPP_P2CCBR1_BG_Msk                    (0x7ff << 16)
#define DCMIPP_P2CCBR1_BG                        (0x7ff << 16)

/* Bit fields for DCMIPP_P2CCBR2 register */
#define DCMIPP_P2CCBR2_BB_Pos                    0
#define DCMIPP_P2CCBR2_BB_Msk                    (0x7ff << 0)
#define DCMIPP_P2CCBR2_BB                        (0x7ff << 0)
#define DCMIPP_P2CCBR2_BA_Pos                    16
#define DCMIPP_P2CCBR2_BA_Msk                    (0x3ff << 16)
#define DCMIPP_P2CCBR2_BA                        (0x3ff << 16)

/* Bit fields for DCMIPP_P2PPCR register */
#define DCMIPP_P2PPCR_FORMAT_Pos                 0
#define DCMIPP_P2PPCR_FORMAT_Msk                 (0xf << 0)
#define DCMIPP_P2PPCR_FORMAT                     (0xf << 0)
#define DCMIPP_P2PPCR_SWAPRB_Pos                 4
#define DCMIPP_P2PPCR_SWAPRB_Msk                 (0x1 << 4)
#define DCMIPP_P2PPCR_SWAPRB                     (0x1 << 4)
#define DCMIPP_P2PPCR_VDEC_Pos                   7
#define DCMIPP_P2PPCR_VDEC_Msk                   (0x3 << 7)
#define DCMIPP_P2PPCR_VDEC                       (0x3 << 7)
#define DCMIPP_P2PPCR_HDEC_Pos                   9
#define DCMIPP_P2PPCR_HDEC_Msk                   (0x3 << 9)
#define DCMIPP_P2PPCR_HDEC                       (0x3 << 9)
#define DCMIPP_P2PPCR_Reserved_Pos               11
#define DCMIPP_P2PPCR_Reserved_Msk               (0x3 << 11)
#define DCMIPP_P2PPCR_Reserved                   (0x3 << 11)
#define DCMIPP_P2PPCR_LINEMULT_Pos               13
#define DCMIPP_P2PPCR_LINEMULT_Msk               (0x7 << 13)
#define DCMIPP_P2PPCR_LINEMULT                   (0x7 << 13)

/* Bit fields for DCMIPP_P2PPM0AR register */
#define DCMIPP_P2PPM0AR_M0A_Pos                  0
#define DCMIPP_P2PPM0AR_M0A_Msk                  (0xFFFFFFFF << 0)
#define DCMIPP_P2PPM0AR_M0A                      (0xFFFFFFFF << 0)

/* Bit fields for DCMIPP_P2PPM0PITCHR register */
#define DCMIPP_P2PPM0PITCHR_PITCH_Pos            0
#define DCMIPP_P2PPM0PITCHR_PITCH_Msk            (0x7fff << 0)
#define DCMIPP_P2PPM0PITCHR_PITCH                (0x7fff << 0)

/* Bit fields for DCMIPP_P2IER register */
#define DCMIPP_P2IER_LINEIE_Pos                  0
#define DCMIPP_P2IER_LINEIE_Msk                  (0x1 << 0)
#define DCMIPP_P2IER_LINEIE                      (0x1 << 0)
#define DCMIPP_P2IER_FRAMEIE_Pos                 1
#define DCMIPP_P2IER_FRAMEIE_Msk                 (0x1 << 1)
#define DCMIPP_P2IER_FRAMEIE                     (0x1 << 1)
#define DCMIPP_P2IER_VSYNCIE_Pos                 2
#define DCMIPP_P2IER_VSYNCIE_Msk                 (0x1 << 2)
#define DCMIPP_P2IER_VSYNCIE                     (0x1 << 2)
#define DCMIPP_P2IER_OVRIE_Pos                   7
#define DCMIPP_P2IER_OVRIE_Msk                   (0x1 << 7)
#define DCMIPP_P2IER_OVRIE                       (0x1 << 7)

/* Bit fields for DCMIPP_P2SR register */
#define DCMIPP_P2SR_LINEF_Pos                    0
#define DCMIPP_P2SR_LINEF_Msk                    (0x1 << 0)
#define DCMIPP_P2SR_LINEF                        (0x1 << 0)
#define DCMIPP_P2SR_FRAMEF_Pos                   1
#define DCMIPP_P2SR_FRAMEF_Msk                   (0x1 << 1)
#define DCMIPP_P2SR_FRAMEF                       (0x1 << 1)
#define DCMIPP_P2SR_VSYNCF_Pos                   2
#define DCMIPP_P2SR_VSYNCF_Msk                   (0x1 << 2)
#define DCMIPP_P2SR_VSYNCF                       (0x1 << 2)
#define DCMIPP_P2SR_OVRF_Pos                     7
#define DCMIPP_P2SR_OVRF_Msk                     (0x1 << 7)
#define DCMIPP_P2SR_OVRF                         (0x1 << 7)
#define DCMIPP_P2SR_LSTLINE_Pos                  16
#define DCMIPP_P2SR_LSTLINE_Msk                  (0x1 << 16)
#define DCMIPP_P2SR_LSTLINE                      (0x1 << 16)
#define DCMIPP_P2SR_LSTFRM_Pos                   17
#define DCMIPP_P2SR_LSTFRM_Msk                   (0x1 << 17)
#define DCMIPP_P2SR_LSTFRM                       (0x1 << 17)
#define DCMIPP_P2SR_LSTVCID_Pos                  18
#define DCMIPP_P2SR_LSTVCID_Msk                  (0x3 << 18)
#define DCMIPP_P2SR_LSTVCID                      (0x3 << 18)
#define DCMIPP_P2SR_CPTACT_Pos                   23
#define DCMIPP_P2SR_CPTACT_Msk                   (0x1 << 23)
#define DCMIPP_P2SR_CPTACT                       (0x1 << 23)

/* Bit fields for DCMIPP_P2FCR register */
#define DCMIPP_P2FCR_CLINEF_Pos                  0
#define DCMIPP_P2FCR_CLINEF_Msk                  (0x1 << 0)
#define DCMIPP_P2FCR_CLINEF                      (0x1 << 0)
#define DCMIPP_P2FCR_CFRAMEF_Pos                 1
#define DCMIPP_P2FCR_CFRAMEF_Msk                 (0x1 << 1)
#define DCMIPP_P2FCR_CFRAMEF                     (0x1 << 1)
#define DCMIPP_P2FCR_CVSYNCF_Pos                 2
#define DCMIPP_P2FCR_CVSYNCF_Msk                 (0x1 << 2)
#define DCMIPP_P2FCR_CVSYNCF                     (0x1 << 2)
#define DCMIPP_P2FCR_COVRF_Pos                   7
#define DCMIPP_P2FCR_COVRF_Msk                   (0x1 << 7)
#define DCMIPP_P2FCR_COVRF                       (0x1 << 7)
/* Bit fields for DCMIPP_HWCFGR register */

/* Bit fields for DCMIPP_VERR register */
#define DCMIPP_VERR_MINREV_Pos                   0
#define DCMIPP_VERR_MINREV_Msk                   (0xf << 0)
#define DCMIPP_VERR_MINREV                       (0xf << 0)
#define DCMIPP_VERR_MAJREV_Pos                   4
#define DCMIPP_VERR_MAJREV_Msk                   (0xf << 4)
#define DCMIPP_VERR_MAJREV                       (0xf << 4)

/* Bit fields for DCMIPP_IPIDR register */
#define DCMIPP_IPIDR_IDR_Pos                     0
#define DCMIPP_IPIDR_IDR_Msk                     (0xFFFFFFFF << 0)
#define DCMIPP_IPIDR_IDR                         (0xFFFFFFFF << 0)

/* Bit fields for DCMIPP_SIDR register */
#define DCMIPP_SIDR_SID_Pos                      0
#define DCMIPP_SIDR_SID_Msk                      (0xFFFFFFFF << 0)
#define DCMIPP_SIDR_SID                          (0xFFFFFFFF << 0)

/******************************************************************************/
/*                                                                            */
/*                             DMA Controller                                 */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for DMA_SECCFGR register  ****************/
#define DMA_SECCFGR_SEC0_Pos     (0U)
#define DMA_SECCFGR_SEC0_Msk     (0x1U << DMA_SECCFGR_SEC0_Pos)                /*!< 0x00000001 */
#define DMA_SECCFGR_SEC0         DMA_SECCFGR_SEC0_Msk                          /*!< Secure State of Channel 0 */
#define DMA_SECCFGR_SEC1_Pos     (1U)
#define DMA_SECCFGR_SEC1_Msk     (0x1U << DMA_SECCFGR_SEC1_Pos)                /*!< 0x00000002 */
#define DMA_SECCFGR_SEC1         DMA_SECCFGR_SEC1_Msk                          /*!< Secure State of Channel 1 */
#define DMA_SECCFGR_SEC2_Pos     (2U)
#define DMA_SECCFGR_SEC2_Msk     (0x1U << DMA_SECCFGR_SEC2_Pos)                /*!< 0x00000004 */
#define DMA_SECCFGR_SEC2         DMA_SECCFGR_SEC2_Msk                          /*!< Secure State of Channel 2 */
#define DMA_SECCFGR_SEC3_Pos     (3U)
#define DMA_SECCFGR_SEC3_Msk     (0x1U << DMA_SECCFGR_SEC3_Pos)                /*!< 0x00000008 */
#define DMA_SECCFGR_SEC3         DMA_SECCFGR_SEC3_Msk                          /*!< Secure State of Channel 3 */
#define DMA_SECCFGR_SEC4_Pos     (4U)
#define DMA_SECCFGR_SEC4_Msk     (0x1U << DMA_SECCFGR_SEC4_Pos)                /*!< 0x00000010 */
#define DMA_SECCFGR_SEC4         DMA_SECCFGR_SEC4_Msk                          /*!< Secure State of Channel 4 */
#define DMA_SECCFGR_SEC5_Pos     (5U)
#define DMA_SECCFGR_SEC5_Msk     (0x1U << DMA_SECCFGR_SEC5_Pos)                /*!< 0x00000020 */
#define DMA_SECCFGR_SEC5         DMA_SECCFGR_SEC5_Msk                          /*!< Secure State of Channel 5 */
#define DMA_SECCFGR_SEC6_Pos     (6U)
#define DMA_SECCFGR_SEC6_Msk     (0x1U << DMA_SECCFGR_SEC6_Pos)                /*!< 0x00000040 */
#define DMA_SECCFGR_SEC6         DMA_SECCFGR_SEC6_Msk                          /*!< Secure State of Channel 6 */
#define DMA_SECCFGR_SEC7_Pos     (7U)
#define DMA_SECCFGR_SEC7_Msk     (0x1U << DMA_SECCFGR_SEC7_Pos)                /*!< 0x00000080 */
#define DMA_SECCFGR_SEC7         DMA_SECCFGR_SEC7_Msk                          /*!< Secure State of Channel 7 */
#define DMA_SECCFGR_SEC8_Pos     (8U)
#define DMA_SECCFGR_SEC8_Msk     (0x1U << DMA_SECCFGR_SEC8_Pos)                /*!< 0x00000100 */
#define DMA_SECCFGR_SEC8         DMA_SECCFGR_SEC8_Msk                          /*!< Secure State of Channel 8 */
#define DMA_SECCFGR_SEC9_Pos     (9U)
#define DMA_SECCFGR_SEC9_Msk     (0x1U << DMA_SECCFGR_SEC9_Pos)                /*!< 0x00000200 */
#define DMA_SECCFGR_SEC9         DMA_SECCFGR_SEC9_Msk                          /*!< Secure State of Channel 9 */
#define DMA_SECCFGR_SEC10_Pos    (10U)
#define DMA_SECCFGR_SEC10_Msk    (0x1U << DMA_SECCFGR_SEC10_Pos)               /*!< 0x00000400 */
#define DMA_SECCFGR_SEC10        DMA_SECCFGR_SEC10_Msk                         /*!< Secure State of Channel 10 */
#define DMA_SECCFGR_SEC11_Pos    (11U)
#define DMA_SECCFGR_SEC11_Msk    (0x1U << DMA_SECCFGR_SEC11_Pos)               /*!< 0x00000800 */
#define DMA_SECCFGR_SEC11        DMA_SECCFGR_SEC11_Msk                         /*!< Secure State of Channel 11 */
#define DMA_SECCFGR_SEC12_Pos    (12U)
#define DMA_SECCFGR_SEC12_Msk    (0x1U << DMA_SECCFGR_SEC12_Pos)               /*!< 0x00001000 */
#define DMA_SECCFGR_SEC12        DMA_SECCFGR_SEC12_Msk                         /*!< Secure State of Channel 12 */
#define DMA_SECCFGR_SEC13_Pos    (13U)
#define DMA_SECCFGR_SEC13_Msk    (0x1U << DMA_SECCFGR_SEC13_Pos)               /*!< 0x00002000 */
#define DMA_SECCFGR_SEC13        DMA_SECCFGR_SEC13_Msk                         /*!< Secure State of Channel 13 */
#define DMA_SECCFGR_SEC14_Pos    (14U)
#define DMA_SECCFGR_SEC14_Msk    (0x1U << DMA_SECCFGR_SEC14_Pos)               /*!< 0x00004000 */
#define DMA_SECCFGR_SEC14        DMA_SECCFGR_SEC14_Msk                         /*!< Secure State of Channel 14 */
#define DMA_SECCFGR_SEC15_Pos    (15U)
#define DMA_SECCFGR_SEC15_Msk    (0x1U << DMA_SECCFGR_SEC15_Pos)               /*!< 0x00008000 */
#define DMA_SECCFGR_SEC15        DMA_SECCFGR_SEC14_Msk                         /*!< Secure State of Channel 15 */

/*******************  Bit definition for DMA_PRIVCFGR register  ****************/
#define DMA_PRIVCFGR_PRIV0_Pos   (0U)
#define DMA_PRIVCFGR_PRIV0_Msk   (0x1U << DMA_PRIVCFGR_PRIV0_Pos)              /*!< 0x00000001 */
#define DMA_PRIVCFGR_PRIV0       DMA_PRIVCFGR_PRIV0_Msk                        /*!< Privileged State of Channel 0 */
#define DMA_PRIVCFGR_PRIV1_Pos   (1U)
#define DMA_PRIVCFGR_PRIV1_Msk   (0x1U << DMA_PRIVCFGR_PRIV1_Pos)              /*!< 0x00000002 */
#define DMA_PRIVCFGR_PRIV1       DMA_PRIVCFGR_PRIV1_Msk                        /*!< Privileged State of Channel 1 */
#define DMA_PRIVCFGR_PRIV2_Pos   (2U)
#define DMA_PRIVCFGR_PRIV2_Msk   (0x1U << DMA_PRIVCFGR_PRIV2_Pos)              /*!< 0x00000004 */
#define DMA_PRIVCFGR_PRIV2       DMA_PRIVCFGR_PRIV2_Msk                        /*!< Privileged State of Channel 2 */
#define DMA_PRIVCFGR_PRIV3_Pos   (3U)
#define DMA_PRIVCFGR_PRIV3_Msk   (0x1U << DMA_PRIVCFGR_PRIV3_Pos)              /*!< 0x00000008 */
#define DMA_PRIVCFGR_PRIV3       DMA_PRIVCFGR_PRIV3_Msk                        /*!< Privileged State of Channel 3 */
#define DMA_PRIVCFGR_PRIV4_Pos   (4U)
#define DMA_PRIVCFGR_PRIV4_Msk   (0x1U << DMA_PRIVCFGR_PRIV4_Pos)              /*!< 0x00000010 */
#define DMA_PRIVCFGR_PRIV4       DMA_PRIVCFGR_PRIV4_Msk                        /*!< Privileged State of Channel 4 */
#define DMA_PRIVCFGR_PRIV5_Pos   (5U)
#define DMA_PRIVCFGR_PRIV5_Msk   (0x1U << DMA_PRIVCFGR_PRIV5_Pos)              /*!< 0x00000020 */
#define DMA_PRIVCFGR_PRIV5       DMA_PRIVCFGR_PRIV5_Msk                        /*!< Privileged State of Channel 5 */
#define DMA_PRIVCFGR_PRIV6_Pos   (6U)
#define DMA_PRIVCFGR_PRIV6_Msk   (0x1U << DMA_PRIVCFGR_PRIV6_Pos)              /*!< 0x00000040 */
#define DMA_PRIVCFGR_PRIV6       DMA_PRIVCFGR_PRIV6_Msk                        /*!< Privileged State of Channel 6 */
#define DMA_PRIVCFGR_PRIV7_Pos   (7U)
#define DMA_PRIVCFGR_PRIV7_Msk   (0x1U << DMA_PRIVCFGR_PRIV7_Pos)              /*!< 0x00000080 */
#define DMA_PRIVCFGR_PRIV7       DMA_PRIVCFGR_PRIV7_Msk                        /*!< Privileged State of Channel 7 */
#define DMA_PRIVCFGR_PRIV8_Pos   (8U)
#define DMA_PRIVCFGR_PRIV8_Msk   (0x1U << DMA_PRIVCFGR_PRIV8_Pos)              /*!< 0x00000100 */
#define DMA_PRIVCFGR_PRIV8       DMA_PRIVCFGR_PRIV8_Msk                        /*!< Privileged State of Channel 8 */
#define DMA_PRIVCFGR_PRIV9_Pos   (9U)
#define DMA_PRIVCFGR_PRIV9_Msk   (0x1U << DMA_PRIVCFGR_PRIV9_Pos)              /*!< 0x00000200 */
#define DMA_PRIVCFGR_PRIV9       DMA_PRIVCFGR_PRIV9_Msk                        /*!< Privileged State of Channel 9 */
#define DMA_PRIVCFGR_PRIV10_Pos  (10U)
#define DMA_PRIVCFGR_PRIV10_Msk  (0x1U << DMA_PRIVCFGR_PRIV10_Pos)             /*!< 0x00000400 */
#define DMA_PRIVCFGR_PRIV10      DMA_PRIVCFGR_PRIV10_Msk                       /*!< Privileged State of Channel 10 */
#define DMA_PRIVCFGR_PRIV11_Pos  (11U)
#define DMA_PRIVCFGR_PRIV11_Msk  (0x1U << DMA_PRIVCFGR_PRIV11_Pos)             /*!< 0x00000800 */
#define DMA_PRIVCFGR_PRIV11      DMA_PRIVCFGR_PRIV11_Msk                       /*!< Privileged State of Channel 11 */
#define DMA_PRIVCFGR_PRIV12_Pos  (12U)
#define DMA_PRIVCFGR_PRIV12_Msk  (0x1U << DMA_PRIVCFGR_PRIV12_Pos)             /*!< 0x00001000 */
#define DMA_PRIVCFGR_PRIV12      DMA_PRIVCFGR_PRIV12_Msk                       /*!< Privileged State of Channel 12 */
#define DMA_PRIVCFGR_PRIV13_Pos  (13U)
#define DMA_PRIVCFGR_PRIV13_Msk  (0x1U << DMA_PRIVCFGR_PRIV13_Pos)             /*!< 0x00002000 */
#define DMA_PRIVCFGR_PRIV13      DMA_PRIVCFGR_PRIV13_Msk                       /*!< Privileged State of Channel 13 */
#define DMA_PRIVCFGR_PRIV14_Pos  (14U)
#define DMA_PRIVCFGR_PRIV14_Msk  (0x1U << DMA_PRIVCFGR_PRIV14_Pos)             /*!< 0x00004000 */
#define DMA_PRIVCFGR_PRIV14      DMA_PRIVCFGR_PRIV14_Msk                       /*!< Privileged State of Channel 14 */
#define DMA_PRIVCFGR_PRIV15_Pos  (15U)
#define DMA_PRIVCFGR_PRIV15_Msk  (0x1U << DMA_PRIVCFGR_PRIV15_Pos)             /*!< 0x00008000 */
#define DMA_PRIVCFGR_PRIV15      DMA_PRIVCFGR_PRIV15_Msk                       /*!< Privileged State of Channel 15 */

/*******************  Bit definition for DMA_MISR register  ****************/
#define DMA_MISR_MIS0_Pos        (0U)
#define DMA_MISR_MIS0_Msk        (0x1U << DMA_MISR_MIS0_Pos)                  /*!< 0x00000001 */
#define DMA_MISR_MIS0            DMA_MISR_MIS0_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 0 */
#define DMA_MISR_MIS1_Pos        (1U)
#define DMA_MISR_MIS1_Msk        (0x1U << DMA_MISR_MIS1_Pos)                  /*!< 0x00000002 */
#define DMA_MISR_MIS1            DMA_MISR_MIS1_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 1 */
#define DMA_MISR_MIS2_Pos        (2U)
#define DMA_MISR_MIS2_Msk        (0x1U << DMA_MISR_MIS2_Pos)                  /*!< 0x00000004 */
#define DMA_MISR_MIS2            DMA_MISR_MIS2_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 2 */
#define DMA_MISR_MIS3_Pos        (3U)
#define DMA_MISR_MIS3_Msk        (0x1U << DMA_MISR_MIS3_Pos)                  /*!< 0x00000008 */
#define DMA_MISR_MIS3            DMA_MISR_MIS3_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 3 */
#define DMA_MISR_MIS4_Pos        (4U)
#define DMA_MISR_MIS4_Msk        (0x1U << DMA_MISR_MIS4_Pos)                  /*!< 0x00000010 */
#define DMA_MISR_MIS4            DMA_MISR_MIS4_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 4 */
#define DMA_MISR_MIS5_Pos        (5U)
#define DMA_MISR_MIS5_Msk        (0x1U << DMA_MISR_MIS5_Pos)                  /*!< 0x00000020 */
#define DMA_MISR_MIS5            DMA_MISR_MIS5_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 5 */
#define DMA_MISR_MIS6_Pos        (6U)
#define DMA_MISR_MIS6_Msk        (0x1U << DMA_MISR_MIS6_Pos)                  /*!< 0x00000040 */
#define DMA_MISR_MIS6            DMA_MISR_MIS6_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 6 */
#define DMA_MISR_MIS7_Pos        (7U)
#define DMA_MISR_MIS7_Msk        (0x1U << DMA_MISR_MIS7_Pos)                  /*!< 0x00000080 */
#define DMA_MISR_MIS7            DMA_MISR_MIS7_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 7 */
#define DMA_MISR_MIS8_Pos        (8U)
#define DMA_MISR_MIS8_Msk        (0x1U << DMA_MISR_MIS8_Pos)                  /*!< 0x00000100 */
#define DMA_MISR_MIS8            DMA_MISR_MIS8_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 8 */
#define DMA_MISR_MIS9_Pos        (9U)
#define DMA_MISR_MIS9_Msk        (0x1U << DMA_MISR_MIS9_Pos)                  /*!< 0x00000200 */
#define DMA_MISR_MIS9            DMA_MISR_MIS9_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 9 */
#define DMA_MISR_MIS10_Pos       (10U)
#define DMA_MISR_MIS10_Msk       (0x1U << DMA_MISR_MIS10_Pos)                 /*!< 0x00000400 */
#define DMA_MISR_MIS10           DMA_MISR_MIS10_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 10 */
#define DMA_MISR_MIS11_Pos       (11U)
#define DMA_MISR_MIS11_Msk       (0x1U << DMA_MISR_MIS11_Pos)                 /*!< 0x00000800 */
#define DMA_MISR_MIS11           DMA_MISR_MIS11_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 11 */
#define DMA_MISR_MIS12_Pos       (12U)
#define DMA_MISR_MIS12_Msk       (0x1U << DMA_MISR_MIS12_Pos)                 /*!< 0x00001000 */
#define DMA_MISR_MIS12           DMA_MISR_MIS12_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 12 */
#define DMA_MISR_MIS13_Pos       (13U)
#define DMA_MISR_MIS13_Msk       (0x1U << DMA_MISR_MIS13_Pos)                 /*!< 0x00002000 */
#define DMA_MISR_MIS13           DMA_MISR_MIS13_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 13 */
#define DMA_MISR_MIS14_Pos       (14U)
#define DMA_MISR_MIS14_Msk       (0x1U << DMA_MISR_MIS14_Pos)                 /*!< 0x00004000 */
#define DMA_MISR_MIS14           DMA_MISR_MIS14_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 14 */
#define DMA_MISR_MIS15_Pos       (15U)
#define DMA_MISR_MIS15_Msk       (0x1U << DMA_MISR_MIS15_Pos)                 /*!< 0x00008000 */
#define DMA_MISR_MIS15           DMA_MISR_MIS14_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 15 */

/*******************  Bit definition for DMA_SMISR register  ****************/
#define DMA_SMISR_MIS0_Pos       (0U)
#define DMA_SMISR_MIS0_Msk       (0x1U << DMA_SMISR_MIS0_Pos)                  /*!< 0x00000001 */
#define DMA_SMISR_MIS0           DMA_SMISR_MIS0_Msk                            /*!< Masked Interrupt State of Secure Channel 0 */
#define DMA_SMISR_MIS1_Pos       (1U)
#define DMA_SMISR_MIS1_Msk       (0x1U << DMA_SMISR_MIS1_Pos)                  /*!< 0x00000002 */
#define DMA_SMISR_MIS1           DMA_SMISR_MIS1_Msk                            /*!< Masked Interrupt State of Secure Channel 1 */
#define DMA_SMISR_MIS2_Pos       (2U)
#define DMA_SMISR_MIS2_Msk       (0x1U << DMA_SMISR_MIS2_Pos)                  /*!< 0x00000004 */
#define DMA_SMISR_MIS2           DMA_SMISR_MIS2_Msk                            /*!< Masked Interrupt State of Secure Channel 2 */
#define DMA_SMISR_MIS3_Pos       (3U)
#define DMA_SMISR_MIS3_Msk       (0x1U << DMA_SMISR_MIS3_Pos)                  /*!< 0x00000008 */
#define DMA_SMISR_MIS3           DMA_SMISR_MIS3_Msk                            /*!< Masked Interrupt State of Secure Channel 3 */
#define DMA_SMISR_MIS4_Pos       (4U)
#define DMA_SMISR_MIS4_Msk       (0x1U << DMA_SMISR_MIS4_Pos)                  /*!< 0x00000010 */
#define DMA_SMISR_MIS4           DMA_SMISR_MIS4_Msk                            /*!< Masked Interrupt State of Secure Channel 4 */
#define DMA_SMISR_MIS5_Pos       (5U)
#define DMA_SMISR_MIS5_Msk       (0x1U << DMA_SMISR_MIS5_Pos)                  /*!< 0x00000020 */
#define DMA_SMISR_MIS5           DMA_SMISR_MIS5_Msk                            /*!< Masked Interrupt State of Secure Channel 5 */
#define DMA_SMISR_MIS6_Pos       (6U)
#define DMA_SMISR_MIS6_Msk       (0x1U << DMA_SMISR_MIS6_Pos)                  /*!< 0x00000040 */
#define DMA_SMISR_MIS6           DMA_SMISR_MIS6_Msk                            /*!< Masked Interrupt State of Secure Channel 6 */
#define DMA_SMISR_MIS7_Pos       (7U)
#define DMA_SMISR_MIS7_Msk       (0x1U << DMA_SMISR_MIS7_Pos)                  /*!< 0x00000080 */
#define DMA_SMISR_MIS7           DMA_SMISR_MIS7_Msk                            /*!< Masked Interrupt State of Secure Channel 7 */
#define DMA_SMISR_MIS8_Pos       (8U)
#define DMA_SMISR_MIS8_Msk       (0x1U << DMA_SMISR_MIS8_Pos)                  /*!< 0x00000100 */
#define DMA_SMISR_MIS8           DMA_SMISR_MIS8_Msk                            /*!< Masked Interrupt State of Secure Channel 8 */
#define DMA_SMISR_MIS9_Pos       (9U)
#define DMA_SMISR_MIS9_Msk       (0x1U << DMA_SMISR_MIS9_Pos)                  /*!< 0x00000200 */
#define DMA_SMISR_MIS9           DMA_SMISR_MIS9_Msk                            /*!< Masked Interrupt State of Secure Channel 9 */
#define DMA_SMISR_MIS10_Pos      (10U)
#define DMA_SMISR_MIS10_Msk      (0x1U << DMA_SMISR_MIS10_Pos)                 /*!< 0x00000400 */
#define DMA_SMISR_MIS10          DMA_SMISR_MIS10_Msk                           /*!< Masked Interrupt State of Secure Channel 10 */
#define DMA_SMISR_MIS11_Pos      (11U)
#define DMA_SMISR_MIS11_Msk      (0x1U << DMA_SMISR_MIS11_Pos)                 /*!< 0x00000800 */
#define DMA_SMISR_MIS11          DMA_SMISR_MIS11_Msk                           /*!< Masked Interrupt State of Secure Channel 11 */
#define DMA_SMISR_MIS12_Pos      (12U)
#define DMA_SMISR_MIS12_Msk      (0x1U << DMA_SMISR_MIS12_Pos)                 /*!< 0x00001000 */
#define DMA_SMISR_MIS12          DMA_SMISR_MIS12_Msk                           /*!< Masked Interrupt State of Secure Channel 12 */
#define DMA_SMISR_MIS13_Pos      (13U)
#define DMA_SMISR_MIS13_Msk      (0x1U << DMA_SMISR_MIS13_Pos)                 /*!< 0x00002000 */
#define DMA_SMISR_MIS13          DMA_SMISR_MIS13_Msk                           /*!< Masked Interrupt State of Secure Channel 13 */
#define DMA_SMISR_MIS14_Pos      (14U)
#define DMA_SMISR_MIS14_Msk      (0x1U << DMA_SMISR_MIS14_Pos)                 /*!< 0x00004000 */
#define DMA_SMISR_MIS14          DMA_SMISR_MIS14_Msk                           /*!< Masked Interrupt State of Secure Channel 14 */
#define DMA_SMISR_MIS15_Pos      (15U)
#define DMA_SMISR_MIS15_Msk      (0x1U << DMA_SMISR_MIS15_Pos)                 /*!< 0x00008000 */
#define DMA_SMISR_MIS15          DMA_SMISR_MIS14_Msk                           /*!< Masked Interrupt State of Secure Channel 15 */

/*******************  Bit definition for DMA_CLBAR register  ****************/
#define DMA_CLBAR_LBA_Pos         (16U)
#define DMA_CLBAR_LBA_Msk         (0xFFFFU << DMA_CLBAR_LBA_Pos)               /*!< 0xFFFF0000 */
#define DMA_CLBAR_LBA             DMA_CLBAR_LBA_Msk                            /*!< Linked-list Base Address of DMA channel x */

/*******************  Bit definition for DMA_CCIDCFGR register  *******************/
#define DMA_CCIDCFGR_CFEN_Pos           (0U)
#define DMA_CCIDCFGR_CFEN_Msk           (0x1U << DMA_CCIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define DMA_CCIDCFGR_CFEN               DMA_CCIDCFGR_CFEN_Msk                   /*!< CID filtering enable of the channel x */
#define DMA_CCIDCFGR_SEMEN_Pos          (1U)
#define DMA_CCIDCFGR_SEMEN_Msk          (0x1U << DMA_CCIDCFGR_SEMEN_Pos)        /*!< 0x00000002 */
#define DMA_CCIDCFGR_SEMEN              DMA_CCIDCFGR_SEMEN_Msk                  /*!< semaphore enable mode */
#define DMA_CCIDCFGR_SCID_Pos           (4U)
#define DMA_CCIDCFGR_SCID_Msk           (0x3U << DMA_CCIDCFGR_SCID_Pos)         /*!< 0x00000030 */
#define DMA_CCIDCFGR_SCID               DMA_CCIDCFGR_SCID_Msk                   /*!< select a static CID to the channel x */
#define DMA_CCIDCFGR_WLISTCID0_Pos      (16U)
#define DMA_CCIDCFGR_WLISTCID0_Msk      (0x1U << DMA_CCIDCFGR_WLISTCID0_Pos)    /*!< 0x00010000 */
#define DMA_CCIDCFGR_WLISTCID0          DMA_CCIDCFGR_WLISTCID0_Msk              /*!< white-listed CID0 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID1_Pos      (17U)
#define DMA_CCIDCFGR_WLISTCID1_Msk      (0x1U << DMA_CCIDCFGR_WLISTCID1_Pos)    /*!< 0x00020000 */
#define DMA_CCIDCFGR_WLISTCID1          DMA_CCIDCFGR_WLISTCID1_Msk              /*!< white-listed CID1 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID2_Pos      (18U)
#define DMA_CCIDCFGR_WLISTCID2_Msk      (0x1U << DMA_CCIDCFGR_WLISTCID2_Pos)    /*!< 0x00040000 */
#define DMA_CCIDCFGR_WLISTCID2          DMA_CCIDCFGR_WLISTCID2_Msk              /*!< white-listed CID2 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID3_Pos      (19U)
#define DMA_CCIDCFGR_WLISTCID3_Msk      (0x1U << DMA_CCIDCFGR_WLISTCID3_Pos)    /*!< 0x00080000 */
#define DMA_CCIDCFGR_WLISTCID3          DMA_CCIDCFGR_WLISTCID3_Msk              /*!< white-listed CID3 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID_CURRENT   ((0x1U << RIF_CID_CPU2_CM33) << DMA_CCIDCFGR_WLISTCID0_Pos)

/*******************  Bit definition for DMA_CSEMCR register  *******************/
#define DMA_CSEMCR_SEMMUTEX_Pos       (0U)
#define DMA_CSEMCR_SEMMUTEX_Msk       (0x1U << DMA_CSEMCR_SEMMUTEX_Pos)       /*!< 0x00000001 */
#define DMA_CSEMCR_SEMMUTEX           DMA_CSEMCR_SEMMUTEX_Msk                 /*!< mutex for the CID allocation of the channel x */
#define DMA_CSEMCR_SEMCCID_Pos        (4U)
#define DMA_CSEMCR_SEMCCID_Msk        (0x3U << DMA_CSEMCR_SEMCCID_Pos)         /*!< 0x00000030 */
#define DMA_CSEMCR_SEMCCID            DMA_CSEMCR_SEMCCID_Msk                   /*!< current CID allocated to the channel x */
#define DMA_CSEMCR_SEMCCID_CID1       (RIF_CID_CPU1_CA35 << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CID2       (RIF_CID_CPU2_CM33 << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CID3       (RIF_CID_CPU3_CM0  << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CURRENT    DMA_CSEMCR_SEMCCID_CID2

/*******************  Bit definition for DMA_CFCR register  *******************/
#define DMA_CFCR_TCF_Pos       (8U)
#define DMA_CFCR_TCF_Msk       (0x1U << DMA_CFCR_TCF_Pos)                    /*!< 0x00000100 */
#define DMA_CFCR_TCF           DMA_CFCR_TCF_Msk                              /*!< Transfer complete flag clear */
#define DMA_CFCR_HTF_Pos       (9U)
#define DMA_CFCR_HTF_Msk       (0x1U << DMA_CFCR_HTF_Pos)                    /*!< 0x00000200 */
#define DMA_CFCR_HTF           DMA_CFCR_HTF_Msk                              /*!< Half transfer complete flag clear */
#define DMA_CFCR_DTEF_Pos      (10U)
#define DMA_CFCR_DTEF_Msk      (0x1U << DMA_CFCR_DTEF_Pos)                   /*!< 0x00000400 */
#define DMA_CFCR_DTEF          DMA_CFCR_DTEF_Msk                             /*!< Data transfer error flag clear */
#define DMA_CFCR_ULEF_Pos      (11U)
#define DMA_CFCR_ULEF_Msk      (0x1U << DMA_CFCR_ULEF_Pos)                   /*!< 0x00000800 */
#define DMA_CFCR_ULEF          DMA_CFCR_ULEF_Msk                             /*!< Update linked-list item error flag clear */
#define DMA_CFCR_USEF_Pos      (12U)
#define DMA_CFCR_USEF_Msk      (0x1U << DMA_CFCR_USEF_Pos)                   /*!< 0x00001000 */
#define DMA_CFCR_USEF          DMA_CFCR_USEF_Msk                             /*!< User setting error flag clear */
#define DMA_CFCR_SUSPF_Pos     (13U)
#define DMA_CFCR_SUSPF_Msk     (0x1U << DMA_CFCR_SUSPF_Pos)                   /*!< 0x00002000 */
#define DMA_CFCR_SUSPF         DMA_CFCR_SUSPF_Msk                             /*!< Completed suspension flag clear */

/*******************  Bit definition for DMA_CSR register  *******************/
#define DMA_CSR_IDLEF_Pos      (0U)
#define DMA_CSR_IDLEF_Msk      (0x1U << DMA_CSR_IDLEF_Pos)                  /*!< 0x00000001 */
#define DMA_CSR_IDLEF          DMA_CSR_IDLEF_Msk                            /*!< Idle flag */
#define DMA_CSR_TCF_Pos        (8U)
#define DMA_CSR_TCF_Msk        (0x1U << DMA_CSR_TCF_Pos)                    /*!< 0x00000100 */
#define DMA_CSR_TCF            DMA_CSR_TCF_Msk                              /*!< Transfer complete flag */
#define DMA_CSR_HTF_Pos        (9U)
#define DMA_CSR_HTF_Msk        (0x1U << DMA_CSR_HTF_Pos)                    /*!< 0x00000200 */
#define DMA_CSR_HTF            DMA_CSR_HTF_Msk                              /*!< Half transfer complete flag */
#define DMA_CSR_DTEF_Pos       (10U)
#define DMA_CSR_DTEF_Msk       (0x1U << DMA_CSR_DTEF_Pos)                   /*!< 0x00000400 */
#define DMA_CSR_DTEF           DMA_CSR_DTEF_Msk                             /*!< Data transfer error flag */
#define DMA_CSR_ULEF_Pos       (11U)
#define DMA_CSR_ULEF_Msk       (0x1U << DMA_CSR_ULEF_Pos)                   /*!< 0x00000800 */
#define DMA_CSR_ULEF           DMA_CSR_ULEF_Msk                             /*!< Update linked-list item error flag */
#define DMA_CSR_USEF_Pos       (12U)
#define DMA_CSR_USEF_Msk       (0x1U << DMA_CSR_USEF_Pos)                   /*!< 0x00001000 */
#define DMA_CSR_USEF           DMA_CSR_USEF_Msk                             /*!< User setting error flag */
#define DMA_CSR_SUSPF_Pos      (13U)
#define DMA_CSR_SUSPF_Msk      (0x1U << DMA_CSR_SUSPF_Pos)                  /*!< 0x00002000 */
#define DMA_CSR_SUSPF          DMA_CSR_SUSPF_Msk                            /*!< User setting error flag */
#define DMA_CSR_FIFOL_Pos      (16U)
#define DMA_CSR_FIFOL_Msk      (0xFFU << DMA_CSR_FIFOL_Pos)                 /*!< 0x00FF0000 */
#define DMA_CSR_FIFOL          DMA_CSR_FIFOL_Msk                            /*!< Monitored FIFO level in bytes */

/*******************  Bit definition for DMA_CCR register  ********************/
#define DMA_CCR_EN_Pos         (0U)
#define DMA_CCR_EN_Msk         (0x1U << DMA_CCR_EN_Pos)                     /*!< 0x00000001 */
#define DMA_CCR_EN             DMA_CCR_EN_Msk                               /*!< Channel enable */
#define DMA_CCR_RESET_Pos      (1U)
#define DMA_CCR_RESET_Msk      (0x1U << DMA_CCR_RESET_Pos)                  /*!< 0x00000002 */
#define DMA_CCR_RESET          DMA_CCR_RESET_Msk                            /*!< Channel reset */
#define DMA_CCR_SUSP_Pos       (2U)
#define DMA_CCR_SUSP_Msk       (0x1U << DMA_CCR_SUSP_Pos)                   /*!< 0x00000004 */
#define DMA_CCR_SUSP           DMA_CCR_SUSP_Msk                             /*!< Channel suspend */
#define DMA_CCR_TCIE_Pos       (8U)
#define DMA_CCR_TCIE_Msk       (0x1U << DMA_CCR_TCIE_Pos)                   /*!< 0x00000100 */
#define DMA_CCR_TCIE           DMA_CCR_TCIE_Msk                             /*!< Transfer complete interrupt enable */
#define DMA_CCR_HTIE_Pos       (9U)
#define DMA_CCR_HTIE_Msk       (0x1U << DMA_CCR_HTIE_Pos)                   /*!< 0x00000200 */
#define DMA_CCR_HTIE           DMA_CCR_HTIE_Msk                             /*!< Half transfer complete interrupt enable */
#define DMA_CCR_DTEIE_Pos      (10U)
#define DMA_CCR_DTEIE_Msk      (0x1U << DMA_CCR_DTEIE_Pos)                  /*!< 0x00000400 */
#define DMA_CCR_DTEIE          DMA_CCR_DTEIE_Msk                            /*!< Data transfer error interrput enable */
#define DMA_CCR_ULEIE_Pos      (11U)
#define DMA_CCR_ULEIE_Msk      (0x1U << DMA_CCR_ULEIE_Pos)                  /*!< 0x00000800 */
#define DMA_CCR_ULEIE          DMA_CCR_ULEIE_Msk                            /*!< Update linked-list item error interrput enable */
#define DMA_CCR_USEIE_Pos      (12U)
#define DMA_CCR_USEIE_Msk      (0x1U << DMA_CCR_USEIE_Pos)                  /*!< 0x00001000 */
#define DMA_CCR_USEIE          DMA_CCR_USEIE_Msk                            /*!< User setting error interrput enable */
#define DMA_CCR_SUSPIE_Pos     (13U)
#define DMA_CCR_SUSPIE_Msk     (0x1U << DMA_CCR_SUSPIE_Pos)                 /*!< 0x00002000 */
#define DMA_CCR_SUSPIE         DMA_CCR_SUSPIE_Msk                           /*!< Completed suspension interrput enable */
#define DMA_CCR_LSM_Pos        (16U)
#define DMA_CCR_LSM_Msk        (0x1U << DMA_CCR_LSM_Pos)                    /*!< 0x00010000 */
#define DMA_CCR_LSM            DMA_CCR_LSM_Msk                              /*!< Link step mode */
#define DMA_CCR_LAP_Pos        (17U)
#define DMA_CCR_LAP_Msk        (0x1U << DMA_CCR_LAP_Pos)                    /*!< 0x00020000 */
#define DMA_CCR_LAP            DMA_CCR_LAP_Msk                              /*!< Linked-list allocated port */
#define DMA_CCR_PRIO_Pos       (22U)
#define DMA_CCR_PRIO_Msk       (0x3U << DMA_CCR_PRIO_Pos)                   /*!< 0x00C00000 */
#define DMA_CCR_PRIO           DMA_CCR_PRIO_Msk                             /*!< Priority level */
#define DMA_CCR_PRIO_0         (0x1U << DMA_CCR_PRIO_Pos)                   /*!< 0x00400000 */
#define DMA_CCR_PRIO_1         (0x2U << DMA_CCR_PRIO_Pos)                   /*!< 0x00800000 */
#define DMA_CCR_BAM_Pos        (28U)
#define DMA_CCR_BAM_Msk        (0x3U << DMA_CCR_BAM_Pos)                    /*!< 0x30000000 */
#define DMA_CCR_BAM            DMA_CCR_BAM_Msk                              /*!< block alignment mode */
#define DMA_CCR_BAM_0          (0x1U << DMA_CCR_BAM_Pos)                    /*!< 0x10000000 */
#define DMA_CCR_BAM_1          (0x2U << DMA_CCR_BAM_Pos)                    /*!< 0x20000000 */
#define DMA_CCR_BRAM_Pos       (30U)
#define DMA_CCR_BRAM_Msk       (0x3U << DMA_CCR_BRAM_Pos)                   /*!< 0xC0000000 */
#define DMA_CCR_BRAM           DMA_CCR_BRAM_Msk                             /*!< block repeated alignment mode */
#define DMA_CCR_BRAM_0         (0x1U << DMA_CCR_BRAM_Pos)                   /*!< 0x40000000 */
#define DMA_CCR_BRAM_1         (0x2U << DMA_CCR_BRAM_Pos)                   /*!< 0x80000000 */

/*******************  Bit definition for DMA_CTR1 register  *******************/
#define DMA_CTR1_SDW_LOG2_Pos  (0U)
#define DMA_CTR1_SDW_LOG2_Msk  (0x3U << DMA_CTR1_SDW_LOG2_Pos)             /*!< 0x00000003 */
#define DMA_CTR1_SDW_LOG2      DMA_CTR1_SDW_LOG2_Msk                       /*!< Binary logarithm of the source data width of a burst */
#define DMA_CTR1_SDW_LOG2_0    (0x1U << DMA_CTR1_SDW_LOG2_Pos)             /*!< Bit 0 */
#define DMA_CTR1_SDW_LOG2_1    (0x2U << DMA_CTR1_SDW_LOG2_Pos)             /*!< Bit 1 */
#define DMA_CTR1_SINC_Pos      (3U)
#define DMA_CTR1_SINC_Msk      (0x1U << DMA_CTR1_SINC_Pos)                 /*!< 0x00000008 */
#define DMA_CTR1_SINC          DMA_CTR1_SINC_Msk                           /*!< Source incrementing burst */
#define DMA_CTR1_SBL_1_Pos     (4U)
#define DMA_CTR1_SBL_1_Msk     (0x3FU << DMA_CTR1_SBL_1_Pos)               /*!< 0x000003F0 */
#define DMA_CTR1_SBL_1         DMA_CTR1_SBL_1_Msk                          /*!< Source burst length minus 1 */
#define DMA_CTR1_PAM_Pos       (11U)
#define DMA_CTR1_PAM_Msk       (0x3U << DMA_CTR1_PAM_Pos)                  /*!< 0x0001800 */
#define DMA_CTR1_PAM           DMA_CTR1_PAM_Msk                            /*!< Padding / alignment mode */
#define DMA_CTR1_PAM_0         (0x1U << DMA_CTR1_PAM_Pos)                  /*!< Bit 0 */
#define DMA_CTR1_PAM_1         (0x2U << DMA_CTR1_PAM_Pos)                  /*!< Bit 1 */
#define DMA_CTR1_SBEX_Pos      (13U)
#define DMA_CTR1_SBEX_Msk      (0x1U << DMA_CTR1_SBEX_Pos)                 /*!< 0x00002000 */
#define DMA_CTR1_SBEX          DMA_CTR1_SBEX_Msk                           /*!< Source byte exchange within the unaligned half-word of each source word */
#define DMA_CTR1_SAP_Pos       (14U)
#define DMA_CTR1_SAP_Msk       (0x1U << DMA_CTR1_SAP_Pos)                  /*!< 0x00004000 */
#define DMA_CTR1_SAP           DMA_CTR1_SAP_Msk                            /*!< Source allocated port */
#define DMA_CTR1_SSEC_Pos      (15U)
#define DMA_CTR1_SSEC_Msk      (0x1U << DMA_CTR1_SSEC_Pos)                 /*!< 0x00008000 */
#define DMA_CTR1_SSEC          DMA_CTR1_SSEC_Msk                           /*!< Security attribute of the DMA transfer from the source */
#define DMA_CTR1_DDW_LOG2_Pos  (16U)
#define DMA_CTR1_DDW_LOG2_Msk  (0x3U << DMA_CTR1_DDW_LOG2_Pos)             /*!< 0x00030000 */
#define DMA_CTR1_DDW_LOG2      DMA_CTR1_DDW_LOG2_Msk                       /*!< Binary logarithm of the destination data width of a burst */
#define DMA_CTR1_DDW_LOG2_0    (0x1U << DMA_CTR1_DDW_LOG2_Pos)             /*!< Bit 0 */
#define DMA_CTR1_DDW_LOG2_1    (0x2U << DMA_CTR1_DDW_LOG2_Pos)             /*!< Bit 1 */
#define DMA_CTR1_DINC_Pos      (19U)
#define DMA_CTR1_DINC_Msk      (0x1U << DMA_CTR1_DINC_Pos)                 /*!< 0x00080000 */
#define DMA_CTR1_DINC          DMA_CTR1_DINC_Msk                           /*!< Destination incrementing burst */
#define DMA_CTR1_DBL_1_Pos     (20U)
#define DMA_CTR1_DBL_1_Msk     (0x3FU << DMA_CTR1_DBL_1_Pos)               /*!< 0x03F00000 */
#define DMA_CTR1_DBL_1         DMA_CTR1_DBL_1_Msk                          /*!< Destination burst length minus 1 */
#define DMA_CTR1_DBEX_Pos      (26U)
#define DMA_CTR1_DBEX_Msk      (0x1U << DMA_CTR1_DBEX_Pos)                 /*!< 0x04000000 */
#define DMA_CTR1_DBEX          DMA_CTR1_DBEX_Msk                           /*!< Destination byte exchange */
#define DMA_CTR1_DHEX_Pos      (27U)
#define DMA_CTR1_DHEX_Msk      (0x1U << DMA_CTR1_DHEX_Pos)                 /*!< 0x08000000 */
#define DMA_CTR1_DHEX          DMA_CTR1_DHEX_Msk                           /*!< Destination half-word exchange */
#define DMA_CTR1_DWX_Pos       (28U)
#define DMA_CTR1_DWX_Msk       (0x1U << DMA_CTR1_DWX_Pos)                  /*!< 0x10000000 */
#define DMA_CTR1_DWX           DMA_CTR1_DWX_Msk                            /*!< Destination word exchange */
#define DMA_CTR1_DAP_Pos       (30U)
#define DMA_CTR1_DAP_Msk       (0x1U << DMA_CTR1_DAP_Pos)                  /*!< 0x40000000 */
#define DMA_CTR1_DAP           DMA_CTR1_DAP_Msk                            /*!< Destination allocated port */
#define DMA_CTR1_DSEC_Pos      (31U)
#define DMA_CTR1_DSEC_Msk      (0x1U << DMA_CTR1_DSEC_Pos)                 /*!< 0x80000000 */
#define DMA_CTR1_DSEC          DMA_CTR1_DSEC_Msk                           /*!< Security attribute of the DMA transfer from the destination */

/******************  Bit definition for DMA_CTR2 register  *******************/
#define DMA_CTR2_REQSEL_Pos     (0U)
#define DMA_CTR2_REQSEL_Msk     (0xFFU << DMA_CTR2_REQSEL_Pos)             /*!< 0x000000FF */
#define DMA_CTR2_REQSEL         DMA_CTR2_REQSEL_Msk                        /*!< DMA hardware request selection */
#define DMA_CTR2_SWREQ_Pos      (9U)
#define DMA_CTR2_SWREQ_Msk      (0x1U << DMA_CTR2_SWREQ_Pos)               /*!< 0x00000200 */
#define DMA_CTR2_SWREQ          DMA_CTR2_SWREQ_Msk                         /*!< Software request */
#define DMA_CTR2_DREQ_Pos       (10U)
#define DMA_CTR2_DREQ_Msk       (0x1U << DMA_CTR2_DREQ_Pos)                /*!< 0x00000400 */
#define DMA_CTR2_DREQ           DMA_CTR2_DREQ_Msk                          /*!< Destination hardware request */
#define DMA_CTR2_BREQ_Pos       (11U)
#define DMA_CTR2_BREQ_Msk       (0x1U << DMA_CTR2_BREQ_Pos)                /*!< 0x00000800 */
#define DMA_CTR2_BREQ           DMA_CTR2_BREQ_Msk                          /*!< Block hardware request */
#define DMA_CTR2_TRIGM_Pos      (14U)
#define DMA_CTR2_TRIGM_Msk      (0x3U << DMA_CTR2_TRIGM_Pos)                /*!< 0x0000C000 */
#define DMA_CTR2_TRIGM          DMA_CTR2_TRIGM_Msk                          /*!< Trigger mode */
#define DMA_CTR2_TRIGM_0        (0x1U << DMA_CTR2_TRIGM_Pos)                /*!< Bit 0 */
#define DMA_CTR2_TRIGM_1        (0x2U << DMA_CTR2_TRIGM_Pos)                /*!< Bit 1 */
#define DMA_CTR2_TRIGSEL_Pos    (16U)
#define DMA_CTR2_TRIGSEL_Msk    (0x7FU << DMA_CTR2_TRIGSEL_Pos)            /*!< 0x007F0000 */
#define DMA_CTR2_TRIGSEL        DMA_CTR2_TRIGSEL_Msk                       /*!< Trigger event input selection */
#define DMA_CTR2_TRIGPOL_Pos    (24U)
#define DMA_CTR2_TRIGPOL_Msk    (0x3U << DMA_CTR2_TRIGPOL_Pos)             /*!< 0x03000000 */
#define DMA_CTR2_TRIGPOL        DMA_CTR2_TRIGPOL_Msk                       /*!< Trigger event polarity */
#define DMA_CTR2_TRIGPOL_0      (0x1U << DMA_CTR2_TRIGPOL_Pos)             /*!< Bit 0 */
#define DMA_CTR2_TRIGPOL_1      (0x2U << DMA_CTR2_TRIGPOL_Pos)             /*!< Bit 1 */
#define DMA_CTR2_TCEM_Pos       (30U)
#define DMA_CTR2_TCEM_Msk       (0x3U << DMA_CTR2_TCEM_Pos)                /*!< 0xC0000000 */
#define DMA_CTR2_TCEM           DMA_CTR2_TCEM_Msk                          /*!< Transfer complete event mode */
#define DMA_CTR2_TCEM_0         (0x1U << DMA_CTR2_TCEM_Pos)                /*!< Bit 0 */
#define DMA_CTR2_TCEM_1         (0x2U << DMA_CTR2_TCEM_Pos)                /*!< Bit 1 */

/******************  Bit definition for DMA_CBR1 register  *******************/
#define DMA_CBR1_BNDT_Pos      (0U)
#define DMA_CBR1_BNDT_Msk      (0xFFFFU << DMA_CBR1_BNDT_Pos)              /*!< 0x0000FFFF */
#define DMA_CBR1_BNDT          DMA_CBR1_BNDT_Msk                           /*!< Block number of data bytes to transfer from the source */
#define DMA_CBR1_BRC_Pos       (16U)
#define DMA_CBR1_BRC_Msk       (0x7FFU << DMA_CBR1_BRC_Pos)               /*!< 0x07FF0000 */
#define DMA_CBR1_BRC           DMA_CBR1_BRC_Msk                            /*!< Block repeat counter */
#define DMA_CBR1_SDEC_Pos      (28U)
#define DMA_CBR1_SDEC_Msk      (0x1U << DMA_CBR1_SDEC_Pos)                 /*!< 0x10000000 */
#define DMA_CBR1_SDEC          DMA_CBR1_SDEC_Msk                           /*!< Source address decrement */
#define DMA_CBR1_DDEC_Pos      (29U)
#define DMA_CBR1_DDEC_Msk      (0x1U << DMA_CBR1_DDEC_Pos)                 /*!< 0x20000000 */
#define DMA_CBR1_DDEC          DMA_CBR1_DDEC_Msk                           /*!< Destination address decrement */
#define DMA_CBR1_BRSDEC_Pos    (30U)
#define DMA_CBR1_BRSDEC_Msk    (0x1U << DMA_CBR1_BRSDEC_Pos)               /*!< 0x40000000 */
#define DMA_CBR1_BRSDEC        DMA_CBR1_BRSDEC_Msk                         /*!< Block repeat source address decrement */
#define DMA_CBR1_BRDDEC_Pos    (31U)
#define DMA_CBR1_BRDDEC_Msk    (0x1U << DMA_CBR1_BRDDEC_Pos)               /*!< 0x80000000 */
#define DMA_CBR1_BRDDEC        DMA_CBR1_BRDDEC_Msk                         /*!< Block repeat destination address decrement */

/******************  Bit definition for DMA_CSAR register  ********************/
#define DMA_CSAR_SA_Pos        (0U)
#define DMA_CSAR_SA_Msk        (0xFFFFFFFFU << DMA_CSAR_SA_Pos)            /*!< 0xFFFFFFFF */
#define DMA_CSAR_SA            DMA_CSAR_SA_Msk                             /*!< Source Address */

/******************  Bit definition for DMA_CDAR register  *******************/
#define DMA_CDAR_DA_Pos        (0U)
#define DMA_CDAR_DA_Msk        (0xFFFFFFFFU << DMA_CDAR_DA_Pos)             /*!< 0xFFFFFFFF */
#define DMA_CDAR_DA            DMA_CDAR_DA_Msk                              /*!< Destination address */

/******************  Bit definition for DMA_CTR3 register  *******************/
#define DMA_CTR3_SAO_Pos       (0U)
#define DMA_CTR3_SAO_Msk       (0x1FFFU << DMA_CTR3_SAO_Pos)               /*!< 0x00001FFF */
#define DMA_CTR3_SAO           DMA_CTR3_SAO_Msk                            /*!< Source address offset increment */
#define DMA_CTR3_DAO_Pos       (16U)
#define DMA_CTR3_DAO_Msk       (0x1FFFU << DMA_CTR3_DAO_Pos)               /*!< 0x1FFF0000 */
#define DMA_CTR3_DAO           DMA_CTR3_DAO_Msk                            /*!< Destination address offset increment */

/******************  Bit definition for DMA_CBR2 register  *******************/
#define DMA_CBR2_BRSAO_Pos     (0U)
#define DMA_CBR2_BRSAO_Msk     (0xFFFFU << DMA_CBR2_BRSAO_Pos)             /*!< 0x0000FFFF */
#define DMA_CBR2_BRSAO         DMA_CBR2_BRSAO_Msk                          /*!< Block repeated source address offset */
#define DMA_CBR2_BRDAO_Pos     (16U)
#define DMA_CBR2_BRDAO_Msk     (0xFFFFU << DMA_CBR2_BRDAO_Pos)             /*!< 0xFFFF0000 */
#define DMA_CBR2_BRDAO         DMA_CBR2_BRDAO_Msk                          /*!< Block repeated destination address offset */

/******************  Bit definition for DMA_CLLR register  *******************/
#define DMA_CLLR_LA_Pos        (2U)
#define DMA_CLLR_LA_Msk        (0x3FFFU << DMA_CLLR_LA_Pos)                /*!< 0x0000FFFC */
#define DMA_CLLR_LA            DMA_CLLR_LA_Msk                             /*!< Pointer to the next linked-list data structure */
#define DMA_CLLR_ULL_Pos       (16U)
#define DMA_CLLR_ULL_Msk       (0x1U << DMA_CLLR_ULL_Pos)                  /*!< 0x00010000 */
#define DMA_CLLR_ULL           DMA_CLLR_ULL_Msk                            /*!< Update link address register from memory */
#define DMA_CLLR_UB2_Pos       (25U)
#define DMA_CLLR_UB2_Msk       (0x1U << DMA_CLLR_UB2_Pos)                  /*!< 0x02000000 */
#define DMA_CLLR_UB2           DMA_CLLR_UB2_Msk                            /*!< Update block register 2 from memory */
#define DMA_CLLR_UT3_Pos       (26U)
#define DMA_CLLR_UT3_Msk       (0x1U << DMA_CLLR_UT3_Pos)                  /*!< 0x04000000 */
#define DMA_CLLR_UT3           DMA_CLLR_UT3_Msk                            /*!< Update transfer register 3 from SRAM */
#define DMA_CLLR_UDA_Pos       (27U)
#define DMA_CLLR_UDA_Msk       (0x1U << DMA_CLLR_UDA_Pos)                  /*!< 0x08000000 */
#define DMA_CLLR_UDA           DMA_CLLR_UDA_Msk                            /*!< Update destination address register from SRAM */
#define DMA_CLLR_USA_Pos       (28U)
#define DMA_CLLR_USA_Msk       (0x1U << DMA_CLLR_USA_Pos)                  /*!< 0x10000000 */
#define DMA_CLLR_USA           DMA_CLLR_USA_Msk                            /*!< Update source address register from SRAM */
#define DMA_CLLR_UB1_Pos       (29U)
#define DMA_CLLR_UB1_Msk       (0x1U << DMA_CLLR_UB1_Pos)                  /*!< 0x20000000 */
#define DMA_CLLR_UB1           DMA_CLLR_UB1_Msk                            /*!< Update block register 1 from SRAM */
#define DMA_CLLR_UT2_Pos       (30U)
#define DMA_CLLR_UT2_Msk       (0x1U << DMA_CLLR_UT2_Pos)                  /*!< 0x40000000 */
#define DMA_CLLR_UT2           DMA_CLLR_UT2_Msk                            /*!< Update transfer register 2 from SRAM */
#define DMA_CLLR_UT1_Pos       (31U)
#define DMA_CLLR_UT1_Msk       (0x1U << DMA_CLLR_UT1_Pos)                  /*!< 0x80000000 */
#define DMA_CLLR_UT1           DMA_CLLR_UT1_Msk                            /*!< Update transfer register 1 from SRAM */

/******************************************************************************/
/*                                                                            */
/*                     Display Serial Interface (DSI)                         */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for DSI_VR register  *****************/
#define DSI_VR                         ((uint32_t)0x3133312AU)               /*!< DSI Host Version */

/*******************  Bit definition for DSI_CR register  *****************/
#define DSI_CR_EN                      ((uint32_t)0x00000001U)               /*!< DSI Host power up and reset */

/*******************  Bit definition for DSI_CCR register  ****************/
#define DSI_CCR_TXECKDIV               ((uint32_t)0x000000FFU)               /*!< TX Escape Clock Division */
#define DSI_CCR_TXECKDIV0              ((uint32_t)0x00000001U)
#define DSI_CCR_TXECKDIV1              ((uint32_t)0x00000002U)
#define DSI_CCR_TXECKDIV2              ((uint32_t)0x00000004U)
#define DSI_CCR_TXECKDIV3              ((uint32_t)0x00000008U)
#define DSI_CCR_TXECKDIV4              ((uint32_t)0x00000010U)
#define DSI_CCR_TXECKDIV5              ((uint32_t)0x00000020U)
#define DSI_CCR_TXECKDIV6              ((uint32_t)0x00000040U)
#define DSI_CCR_TXECKDIV7              ((uint32_t)0x00000080U)

#define DSI_CCR_TOCKDIV                ((uint32_t)0x0000FF00U)               /*!< Timeout Clock Division */
#define DSI_CCR_TOCKDIV0               ((uint32_t)0x00000100U)
#define DSI_CCR_TOCKDIV1               ((uint32_t)0x00000200U)
#define DSI_CCR_TOCKDIV2               ((uint32_t)0x00000400U)
#define DSI_CCR_TOCKDIV3               ((uint32_t)0x00000800U)
#define DSI_CCR_TOCKDIV4               ((uint32_t)0x00001000U)
#define DSI_CCR_TOCKDIV5               ((uint32_t)0x00002000U)
#define DSI_CCR_TOCKDIV6               ((uint32_t)0x00004000U)
#define DSI_CCR_TOCKDIV7               ((uint32_t)0x00008000U)

/*******************  Bit definition for DSI_LVCIDR register  *************/
#define DSI_LVCIDR_VCID                ((uint32_t)0x00000003U)               /*!< Virtual Channel ID */
#define DSI_LVCIDR_VCID0               ((uint32_t)0x00000001U)
#define DSI_LVCIDR_VCID1               ((uint32_t)0x00000002U)

/*******************  Bit definition for DSI_LCOLCR register  *************/
#define DSI_LCOLCR_COLC                ((uint32_t)0x0000000FU)               /*!< Color Coding */
#define DSI_LCOLCR_COLC0               ((uint32_t)0x00000001U)
#define DSI_LCOLCR_COLC1               ((uint32_t)0x00000002U)
#define DSI_LCOLCR_COLC2               ((uint32_t)0x00000004U)
#define DSI_LCOLCR_COLC3               ((uint32_t)0x00000008U)

#define DSI_LCOLCR_LPE                 ((uint32_t)0x00000100U)               /*!< Loosly Packet Enable */

/*******************  Bit definition for DSI_LPCR register  ***************/
#define DSI_LPCR_DEP                   ((uint32_t)0x00000001U)               /*!< Data Enable Polarity */
#define DSI_LPCR_VSP                   ((uint32_t)0x00000002U)               /*!< VSYNC Polarity */
#define DSI_LPCR_HSP                   ((uint32_t)0x00000004U)               /*!< HSYNC Polarity */

/*******************  Bit definition for DSI_LPMCR register  **************/
#define DSI_LPMCR_VLPSIZE              ((uint32_t)0x000000FFU)               /*!< VACT Largest Packet Size */
#define DSI_LPMCR_VLPSIZE0             ((uint32_t)0x00000001U)
#define DSI_LPMCR_VLPSIZE1             ((uint32_t)0x00000002U)
#define DSI_LPMCR_VLPSIZE2             ((uint32_t)0x00000004U)
#define DSI_LPMCR_VLPSIZE3             ((uint32_t)0x00000008U)
#define DSI_LPMCR_VLPSIZE4             ((uint32_t)0x00000010U)
#define DSI_LPMCR_VLPSIZE5             ((uint32_t)0x00000020U)
#define DSI_LPMCR_VLPSIZE6             ((uint32_t)0x00000040U)
#define DSI_LPMCR_VLPSIZE7             ((uint32_t)0x00000080U)

#define DSI_LPMCR_LPSIZE               ((uint32_t)0x00FF0000U)               /*!< Largest Packet Size */
#define DSI_LPMCR_LPSIZE0              ((uint32_t)0x00010000U)
#define DSI_LPMCR_LPSIZE1              ((uint32_t)0x00020000U)
#define DSI_LPMCR_LPSIZE2              ((uint32_t)0x00040000U)
#define DSI_LPMCR_LPSIZE3              ((uint32_t)0x00080000U)
#define DSI_LPMCR_LPSIZE4              ((uint32_t)0x00100000U)
#define DSI_LPMCR_LPSIZE5              ((uint32_t)0x00200000U)
#define DSI_LPMCR_LPSIZE6              ((uint32_t)0x00400000U)
#define DSI_LPMCR_LPSIZE7              ((uint32_t)0x00800000U)

/*******************  Bit definition for DSI_PCR register  ****************/
#define DSI_PCR_ETTXE                  ((uint32_t)0x00000001U)               /*!< EoTp Transmission Enable */
#define DSI_PCR_ETRXE                  ((uint32_t)0x00000002U)               /*!< EoTp Reception Enable */
#define DSI_PCR_BTAE                   ((uint32_t)0x00000004U)               /*!< Bus Turn Around Enable */
#define DSI_PCR_ECCRXE                 ((uint32_t)0x00000008U)               /*!< ECC Reception Enable */
#define DSI_PCR_CRCRXE                 ((uint32_t)0x00000010U)               /*!< CRC Reception Enable */

/*******************  Bit definition for DSI_GVCIDR register  *************/
#define DSI_GVCIDR_VCID                ((uint32_t)0x00000003U)               /*!< Virtual Channel ID */
#define DSI_GVCIDR_VCID0               ((uint32_t)0x00000001U)
#define DSI_GVCIDR_VCID1               ((uint32_t)0x00000002U)

/*******************  Bit definition for DSI_MCR register  ****************/
#define DSI_MCR_CMDM                   ((uint32_t)0x00000001U)               /*!< Command Mode */

/*******************  Bit definition for DSI_VMCR register  ***************/
#define DSI_VMCR_VMT                   ((uint32_t)0x00000003U)               /*!< Video Mode Type */
#define DSI_VMCR_VMT0                  ((uint32_t)0x00000001U)
#define DSI_VMCR_VMT1                  ((uint32_t)0x00000002U)

#define DSI_VMCR_LPVSAE                ((uint32_t)0x00000100U)               /*!< Low-Power Vertical Sync Active Enable */
#define DSI_VMCR_LPVBPE                ((uint32_t)0x00000200U)               /*!< Low-power Vertical Back-Porch Enable */
#define DSI_VMCR_LPVFPE                ((uint32_t)0x00000400U)               /*!< Low-power Vertical Front-porch Enable */
#define DSI_VMCR_LPVAE                 ((uint32_t)0x00000800U)               /*!< Low-Power Vertical Active Enable */
#define DSI_VMCR_LPHBPE                ((uint32_t)0x00001000U)               /*!< Low-Power Horizontal Back-Porch Enable */
#define DSI_VMCR_LPHFPE                ((uint32_t)0x00002000U)               /*!< Low-Power Horizontal Front-Porch Enable */
#define DSI_VMCR_FBTAAE                ((uint32_t)0x00004000U)               /*!< Frame Bus-Turn-Around Acknowledge Enable */
#define DSI_VMCR_LPCE                  ((uint32_t)0x00008000U)               /*!< Low-Power Command Enable */
#define DSI_VMCR_PGE                   ((uint32_t)0x00010000U)               /*!< Pattern Generator Enable */
#define DSI_VMCR_PGM                   ((uint32_t)0x00100000U)               /*!< Pattern Generator Mode */
#define DSI_VMCR_PGO                   ((uint32_t)0x01000000U)               /*!< Pattern Generator Orientation */

/*******************  Bit definition for DSI_VPCR register  ***************/
#define DSI_VPCR_VPSIZE                ((uint32_t)0x00003FFFU)               /*!< Video Packet Size */
#define DSI_VPCR_VPSIZE0               ((uint32_t)0x00000001U)
#define DSI_VPCR_VPSIZE1               ((uint32_t)0x00000002U)
#define DSI_VPCR_VPSIZE2               ((uint32_t)0x00000004U)
#define DSI_VPCR_VPSIZE3               ((uint32_t)0x00000008U)
#define DSI_VPCR_VPSIZE4               ((uint32_t)0x00000010U)
#define DSI_VPCR_VPSIZE5               ((uint32_t)0x00000020U)
#define DSI_VPCR_VPSIZE6               ((uint32_t)0x00000040U)
#define DSI_VPCR_VPSIZE7               ((uint32_t)0x00000080U)
#define DSI_VPCR_VPSIZE8               ((uint32_t)0x00000100U)
#define DSI_VPCR_VPSIZE9               ((uint32_t)0x00000200U)
#define DSI_VPCR_VPSIZE10              ((uint32_t)0x00000400U)
#define DSI_VPCR_VPSIZE11              ((uint32_t)0x00000800U)
#define DSI_VPCR_VPSIZE12              ((uint32_t)0x00001000U)
#define DSI_VPCR_VPSIZE13              ((uint32_t)0x00002000U)

/*******************  Bit definition for DSI_VCCR register  ***************/
#define DSI_VCCR_NUMC                  ((uint32_t)0x00001FFFU)               /*!< Number of Chunks */
#define DSI_VCCR_NUMC0                 ((uint32_t)0x00000001U)
#define DSI_VCCR_NUMC1                 ((uint32_t)0x00000002U)
#define DSI_VCCR_NUMC2                 ((uint32_t)0x00000004U)
#define DSI_VCCR_NUMC3                 ((uint32_t)0x00000008U)
#define DSI_VCCR_NUMC4                 ((uint32_t)0x00000010U)
#define DSI_VCCR_NUMC5                 ((uint32_t)0x00000020U)
#define DSI_VCCR_NUMC6                 ((uint32_t)0x00000040U)
#define DSI_VCCR_NUMC7                 ((uint32_t)0x00000080U)
#define DSI_VCCR_NUMC8                 ((uint32_t)0x00000100U)
#define DSI_VCCR_NUMC9                 ((uint32_t)0x00000200U)
#define DSI_VCCR_NUMC10                ((uint32_t)0x00000400U)
#define DSI_VCCR_NUMC11                ((uint32_t)0x00000800U)
#define DSI_VCCR_NUMC12                ((uint32_t)0x00001000U)

/*******************  Bit definition for DSI_VNPCR register  **************/
#define DSI_VNPCR_NPSIZE               ((uint32_t)0x00001FFFU)               /*!< Null Packet Size */
#define DSI_VNPCR_NPSIZE0              ((uint32_t)0x00000001U)
#define DSI_VNPCR_NPSIZE1              ((uint32_t)0x00000002U)
#define DSI_VNPCR_NPSIZE2              ((uint32_t)0x00000004U)
#define DSI_VNPCR_NPSIZE3              ((uint32_t)0x00000008U)
#define DSI_VNPCR_NPSIZE4              ((uint32_t)0x00000010U)
#define DSI_VNPCR_NPSIZE5              ((uint32_t)0x00000020U)
#define DSI_VNPCR_NPSIZE6              ((uint32_t)0x00000040U)
#define DSI_VNPCR_NPSIZE7              ((uint32_t)0x00000080U)
#define DSI_VNPCR_NPSIZE8              ((uint32_t)0x00000100U)
#define DSI_VNPCR_NPSIZE9              ((uint32_t)0x00000200U)
#define DSI_VNPCR_NPSIZE10             ((uint32_t)0x00000400U)
#define DSI_VNPCR_NPSIZE11             ((uint32_t)0x00000800U)
#define DSI_VNPCR_NPSIZE12             ((uint32_t)0x00001000U)

/*******************  Bit definition for DSI_VHSACR register  *************/
#define DSI_VHSACR_HSA                 ((uint32_t)0x00000FFFU)               /*!< Horizontal Synchronism Active duration */
#define DSI_VHSACR_HSA0                ((uint32_t)0x00000001U)
#define DSI_VHSACR_HSA1                ((uint32_t)0x00000002U)
#define DSI_VHSACR_HSA2                ((uint32_t)0x00000004U)
#define DSI_VHSACR_HSA3                ((uint32_t)0x00000008U)
#define DSI_VHSACR_HSA4                ((uint32_t)0x00000010U)
#define DSI_VHSACR_HSA5                ((uint32_t)0x00000020U)
#define DSI_VHSACR_HSA6                ((uint32_t)0x00000040U)
#define DSI_VHSACR_HSA7                ((uint32_t)0x00000080U)
#define DSI_VHSACR_HSA8                ((uint32_t)0x00000100U)
#define DSI_VHSACR_HSA9                ((uint32_t)0x00000200U)
#define DSI_VHSACR_HSA10               ((uint32_t)0x00000400U)
#define DSI_VHSACR_HSA11               ((uint32_t)0x00000800U)

/*******************  Bit definition for DSI_VHBPCR register  *************/
#define DSI_VHBPCR_HBP                 ((uint32_t)0x00000FFFU)               /*!< Horizontal Back-Porch duration */
#define DSI_VHBPCR_HBP0                ((uint32_t)0x00000001U)
#define DSI_VHBPCR_HBP1                ((uint32_t)0x00000002U)
#define DSI_VHBPCR_HBP2                ((uint32_t)0x00000004U)
#define DSI_VHBPCR_HBP3                ((uint32_t)0x00000008U)
#define DSI_VHBPCR_HBP4                ((uint32_t)0x00000010U)
#define DSI_VHBPCR_HBP5                ((uint32_t)0x00000020U)
#define DSI_VHBPCR_HBP6                ((uint32_t)0x00000040U)
#define DSI_VHBPCR_HBP7                ((uint32_t)0x00000080U)
#define DSI_VHBPCR_HBP8                ((uint32_t)0x00000100U)
#define DSI_VHBPCR_HBP9                ((uint32_t)0x00000200U)
#define DSI_VHBPCR_HBP10               ((uint32_t)0x00000400U)
#define DSI_VHBPCR_HBP11               ((uint32_t)0x00000800U)

/*******************  Bit definition for DSI_VLCR register  ***************/
#define DSI_VLCR_HLINE                 ((uint32_t)0x00007FFFU)               /*!< Horizontal Line duration */
#define DSI_VLCR_HLINE0                ((uint32_t)0x00000001U)
#define DSI_VLCR_HLINE1                ((uint32_t)0x00000002U)
#define DSI_VLCR_HLINE2                ((uint32_t)0x00000004U)
#define DSI_VLCR_HLINE3                ((uint32_t)0x00000008U)
#define DSI_VLCR_HLINE4                ((uint32_t)0x00000010U)
#define DSI_VLCR_HLINE5                ((uint32_t)0x00000020U)
#define DSI_VLCR_HLINE6                ((uint32_t)0x00000040U)
#define DSI_VLCR_HLINE7                ((uint32_t)0x00000080U)
#define DSI_VLCR_HLINE8                ((uint32_t)0x00000100U)
#define DSI_VLCR_HLINE9                ((uint32_t)0x00000200U)
#define DSI_VLCR_HLINE10               ((uint32_t)0x00000400U)
#define DSI_VLCR_HLINE11               ((uint32_t)0x00000800U)
#define DSI_VLCR_HLINE12               ((uint32_t)0x00001000U)
#define DSI_VLCR_HLINE13               ((uint32_t)0x00002000U)
#define DSI_VLCR_HLINE14               ((uint32_t)0x00004000U)

/*******************  Bit definition for DSI_VVSACR register  *************/
#define DSI_VVSACR_VSA                 ((uint32_t)0x000003FFU)               /*!< Vertical Synchronism Active duration */
#define DSI_VVSACR_VSA0                ((uint32_t)0x00000001U)
#define DSI_VVSACR_VSA1                ((uint32_t)0x00000002U)
#define DSI_VVSACR_VSA2                ((uint32_t)0x00000004U)
#define DSI_VVSACR_VSA3                ((uint32_t)0x00000008U)
#define DSI_VVSACR_VSA4                ((uint32_t)0x00000010U)
#define DSI_VVSACR_VSA5                ((uint32_t)0x00000020U)
#define DSI_VVSACR_VSA6                ((uint32_t)0x00000040U)
#define DSI_VVSACR_VSA7                ((uint32_t)0x00000080U)
#define DSI_VVSACR_VSA8                ((uint32_t)0x00000100U)
#define DSI_VVSACR_VSA9                ((uint32_t)0x00000200U)

/*******************  Bit definition for DSI_VVBPCR register  *************/
#define DSI_VVBPCR_VBP                 ((uint32_t)0x000003FFU)               /*!< Vertical Back-Porch duration */
#define DSI_VVBPCR_VBP0                ((uint32_t)0x00000001U)
#define DSI_VVBPCR_VBP1                ((uint32_t)0x00000002U)
#define DSI_VVBPCR_VBP2                ((uint32_t)0x00000004U)
#define DSI_VVBPCR_VBP3                ((uint32_t)0x00000008U)
#define DSI_VVBPCR_VBP4                ((uint32_t)0x00000010U)
#define DSI_VVBPCR_VBP5                ((uint32_t)0x00000020U)
#define DSI_VVBPCR_VBP6                ((uint32_t)0x00000040U)
#define DSI_VVBPCR_VBP7                ((uint32_t)0x00000080U)
#define DSI_VVBPCR_VBP8                ((uint32_t)0x00000100U)
#define DSI_VVBPCR_VBP9                ((uint32_t)0x00000200U)

/*******************  Bit definition for DSI_VVFPCR register  *************/
#define DSI_VVFPCR_VFP                 ((uint32_t)0x000003FFU)               /*!< Vertical Front-Porch duration */
#define DSI_VVFPCR_VFP0                ((uint32_t)0x00000001U)
#define DSI_VVFPCR_VFP1                ((uint32_t)0x00000002U)
#define DSI_VVFPCR_VFP2                ((uint32_t)0x00000004U)
#define DSI_VVFPCR_VFP3                ((uint32_t)0x00000008U)
#define DSI_VVFPCR_VFP4                ((uint32_t)0x00000010U)
#define DSI_VVFPCR_VFP5                ((uint32_t)0x00000020U)
#define DSI_VVFPCR_VFP6                ((uint32_t)0x00000040U)
#define DSI_VVFPCR_VFP7                ((uint32_t)0x00000080U)
#define DSI_VVFPCR_VFP8                ((uint32_t)0x00000100U)
#define DSI_VVFPCR_VFP9                ((uint32_t)0x00000200U)

/*******************  Bit definition for DSI_VVACR register  **************/
#define DSI_VVACR_VA                   ((uint32_t)0x00003FFFU)               /*!< Vertical Active duration */
#define DSI_VVACR_VA0                  ((uint32_t)0x00000001U)
#define DSI_VVACR_VA1                  ((uint32_t)0x00000002U)
#define DSI_VVACR_VA2                  ((uint32_t)0x00000004U)
#define DSI_VVACR_VA3                  ((uint32_t)0x00000008U)
#define DSI_VVACR_VA4                  ((uint32_t)0x00000010U)
#define DSI_VVACR_VA5                  ((uint32_t)0x00000020U)
#define DSI_VVACR_VA6                  ((uint32_t)0x00000040U)
#define DSI_VVACR_VA7                  ((uint32_t)0x00000080U)
#define DSI_VVACR_VA8                  ((uint32_t)0x00000100U)
#define DSI_VVACR_VA9                  ((uint32_t)0x00000200U)
#define DSI_VVACR_VA10                 ((uint32_t)0x00000400U)
#define DSI_VVACR_VA11                 ((uint32_t)0x00000800U)
#define DSI_VVACR_VA12                 ((uint32_t)0x00001000U)
#define DSI_VVACR_VA13                 ((uint32_t)0x00002000U)

/*******************  Bit definition for DSI_LCCR register  ***************/
#define DSI_LCCR_CMDSIZE               ((uint32_t)0x0000FFFFU)               /*!< Command Size */
#define DSI_LCCR_CMDSIZE0              ((uint32_t)0x00000001U)
#define DSI_LCCR_CMDSIZE1              ((uint32_t)0x00000002U)
#define DSI_LCCR_CMDSIZE2              ((uint32_t)0x00000004U)
#define DSI_LCCR_CMDSIZE3              ((uint32_t)0x00000008U)
#define DSI_LCCR_CMDSIZE4              ((uint32_t)0x00000010U)
#define DSI_LCCR_CMDSIZE5              ((uint32_t)0x00000020U)
#define DSI_LCCR_CMDSIZE6              ((uint32_t)0x00000040U)
#define DSI_LCCR_CMDSIZE7              ((uint32_t)0x00000080U)
#define DSI_LCCR_CMDSIZE8              ((uint32_t)0x00000100U)
#define DSI_LCCR_CMDSIZE9              ((uint32_t)0x00000200U)
#define DSI_LCCR_CMDSIZE10             ((uint32_t)0x00000400U)
#define DSI_LCCR_CMDSIZE11             ((uint32_t)0x00000800U)
#define DSI_LCCR_CMDSIZE12             ((uint32_t)0x00001000U)
#define DSI_LCCR_CMDSIZE13             ((uint32_t)0x00002000U)
#define DSI_LCCR_CMDSIZE14             ((uint32_t)0x00004000U)
#define DSI_LCCR_CMDSIZE15             ((uint32_t)0x00008000U)

/*******************  Bit definition for DSI_CMCR register  ***************/
#define DSI_CMCR_TEARE                 ((uint32_t)0x00000001U)               /*!< Tearing Effect Acknowledge Request Enable */
#define DSI_CMCR_ARE                   ((uint32_t)0x00000002U)               /*!< Acknowledge Request Enable */
#define DSI_CMCR_GSW0TX                ((uint32_t)0x00000100U)               /*!< Generic Short Write Zero parameters Transmission */
#define DSI_CMCR_GSW1TX                ((uint32_t)0x00000200U)               /*!< Generic Short Write One parameters Transmission */
#define DSI_CMCR_GSW2TX                ((uint32_t)0x00000400U)               /*!< Generic Short Write Two parameters Transmission */
#define DSI_CMCR_GSR0TX                ((uint32_t)0x00000800U)               /*!< Generic Short Read Zero parameters Transmission */
#define DSI_CMCR_GSR1TX                ((uint32_t)0x00001000U)               /*!< Generic Short Read One parameters Transmission */
#define DSI_CMCR_GSR2TX                ((uint32_t)0x00002000U)               /*!< Generic Short Read Two parameters Transmission */
#define DSI_CMCR_GLWTX                 ((uint32_t)0x00004000U)               /*!< Generic Long Write Transmission */
#define DSI_CMCR_DSW0TX                ((uint32_t)0x00010000U)               /*!< DCS Short Write Zero parameter Transmission */
#define DSI_CMCR_DSW1TX                ((uint32_t)0x00020000U)               /*!< DCS Short Read One parameter Transmission */
#define DSI_CMCR_DSR0TX                ((uint32_t)0x00040000U)               /*!< DCS Short Read Zero parameter Transmission */
#define DSI_CMCR_DLWTX                 ((uint32_t)0x00080000U)               /*!< DCS Long Write Transmission */
#define DSI_CMCR_MRDPS                 ((uint32_t)0x01000000U)               /*!< Maximum Read Packet Size */

/*******************  Bit definition for DSI_GHCR register  ***************/
#define DSI_GHCR_DT                    ((uint32_t)0x0000003FU)               /*!< Type */
#define DSI_GHCR_DT0                   ((uint32_t)0x00000001U)
#define DSI_GHCR_DT1                   ((uint32_t)0x00000002U)
#define DSI_GHCR_DT2                   ((uint32_t)0x00000004U)
#define DSI_GHCR_DT3                   ((uint32_t)0x00000008U)
#define DSI_GHCR_DT4                   ((uint32_t)0x00000010U)
#define DSI_GHCR_DT5                   ((uint32_t)0x00000020U)

#define DSI_GHCR_VCID                  ((uint32_t)0x000000C0U)               /*!< Channel */
#define DSI_GHCR_VCID0                 ((uint32_t)0x00000040U)
#define DSI_GHCR_VCID1                 ((uint32_t)0x00000080U)

#define DSI_GHCR_WCLSB                 ((uint32_t)0x0000FF00U)               /*!< WordCount LSB */
#define DSI_GHCR_WCLSB0                ((uint32_t)0x00000100U)
#define DSI_GHCR_WCLSB1                ((uint32_t)0x00000200U)
#define DSI_GHCR_WCLSB2                ((uint32_t)0x00000400U)
#define DSI_GHCR_WCLSB3                ((uint32_t)0x00000800U)
#define DSI_GHCR_WCLSB4                ((uint32_t)0x00001000U)
#define DSI_GHCR_WCLSB5                ((uint32_t)0x00002000U)
#define DSI_GHCR_WCLSB6                ((uint32_t)0x00004000U)
#define DSI_GHCR_WCLSB7                ((uint32_t)0x00008000U)

#define DSI_GHCR_WCMSB                 ((uint32_t)0x00FF0000U)               /*!< WordCount MSB */
#define DSI_GHCR_WCMSB0                ((uint32_t)0x00010000U)
#define DSI_GHCR_WCMSB1                ((uint32_t)0x00020000U)
#define DSI_GHCR_WCMSB2                ((uint32_t)0x00040000U)
#define DSI_GHCR_WCMSB3                ((uint32_t)0x00080000U)
#define DSI_GHCR_WCMSB4                ((uint32_t)0x00100000U)
#define DSI_GHCR_WCMSB5                ((uint32_t)0x00200000U)
#define DSI_GHCR_WCMSB6                ((uint32_t)0x00400000U)
#define DSI_GHCR_WCMSB7                ((uint32_t)0x00800000U)

/*******************  Bit definition for DSI_GPDR register  ***************/
#define DSI_GPDR_DATA1                 ((uint32_t)0x000000FFU)               /*!< Payload Byte 1 */
#define DSI_GPDR_DATA1_0               ((uint32_t)0x00000001U)
#define DSI_GPDR_DATA1_1               ((uint32_t)0x00000002U)
#define DSI_GPDR_DATA1_2               ((uint32_t)0x00000004U)
#define DSI_GPDR_DATA1_3               ((uint32_t)0x00000008U)
#define DSI_GPDR_DATA1_4               ((uint32_t)0x00000010U)
#define DSI_GPDR_DATA1_5               ((uint32_t)0x00000020U)
#define DSI_GPDR_DATA1_6               ((uint32_t)0x00000040U)
#define DSI_GPDR_DATA1_7               ((uint32_t)0x00000080U)

#define DSI_GPDR_DATA2                 ((uint32_t)0x0000FF00U)               /*!< Payload Byte 2 */
#define DSI_GPDR_DATA2_0               ((uint32_t)0x00000100U)
#define DSI_GPDR_DATA2_1               ((uint32_t)0x00000200U)
#define DSI_GPDR_DATA2_2               ((uint32_t)0x00000400U)
#define DSI_GPDR_DATA2_3               ((uint32_t)0x00000800U)
#define DSI_GPDR_DATA2_4               ((uint32_t)0x00001000U)
#define DSI_GPDR_DATA2_5               ((uint32_t)0x00002000U)
#define DSI_GPDR_DATA2_6               ((uint32_t)0x00004000U)
#define DSI_GPDR_DATA2_7               ((uint32_t)0x00008000U)

#define DSI_GPDR_DATA3                 ((uint32_t)0x00FF0000U)               /*!< Payload Byte 3 */
#define DSI_GPDR_DATA3_0               ((uint32_t)0x00010000U)
#define DSI_GPDR_DATA3_1               ((uint32_t)0x00020000U)
#define DSI_GPDR_DATA3_2               ((uint32_t)0x00040000U)
#define DSI_GPDR_DATA3_3               ((uint32_t)0x00080000U)
#define DSI_GPDR_DATA3_4               ((uint32_t)0x00100000U)
#define DSI_GPDR_DATA3_5               ((uint32_t)0x00200000U)
#define DSI_GPDR_DATA3_6               ((uint32_t)0x00400000U)
#define DSI_GPDR_DATA3_7               ((uint32_t)0x00800000U)

#define DSI_GPDR_DATA4                 ((uint32_t)0xFF000000U)               /*!< Payload Byte 4 */
#define DSI_GPDR_DATA4_0               ((uint32_t)0x01000000U)
#define DSI_GPDR_DATA4_1               ((uint32_t)0x02000000U)
#define DSI_GPDR_DATA4_2               ((uint32_t)0x04000000U)
#define DSI_GPDR_DATA4_3               ((uint32_t)0x08000000U)
#define DSI_GPDR_DATA4_4               ((uint32_t)0x10000000U)
#define DSI_GPDR_DATA4_5               ((uint32_t)0x20000000U)
#define DSI_GPDR_DATA4_6               ((uint32_t)0x40000000U)
#define DSI_GPDR_DATA4_7               ((uint32_t)0x80000000U)

/*******************  Bit definition for DSI_GPSR register  ***************/
#define DSI_GPSR_CMDFE                 ((uint32_t)0x00000001U)               /*!< Command FIFO Empty */
#define DSI_GPSR_CMDFF                 ((uint32_t)0x00000002U)               /*!< Command FIFO Full */
#define DSI_GPSR_PWRFE                 ((uint32_t)0x00000004U)               /*!< Payload Write FIFO Empty */
#define DSI_GPSR_PWRFF                 ((uint32_t)0x00000008U)               /*!< Payload Write FIFO Full */
#define DSI_GPSR_PRDFE                 ((uint32_t)0x00000010U)               /*!< Payload Read FIFO Empty */
#define DSI_GPSR_PRDFF                 ((uint32_t)0x00000020U)               /*!< Payload Read FIFO Full */
#define DSI_GPSR_RCB                   ((uint32_t)0x00000040U)               /*!< Read Command Busy */

/*******************  Bit definition for DSI_TCCR0 register  **************/
#define DSI_TCCR0_LPRX_TOCNT           ((uint32_t)0x0000FFFFU)               /*!< Low-power Reception Timeout Counter */
#define DSI_TCCR0_LPRX_TOCNT0          ((uint32_t)0x00000001U)
#define DSI_TCCR0_LPRX_TOCNT1          ((uint32_t)0x00000002U)
#define DSI_TCCR0_LPRX_TOCNT2          ((uint32_t)0x00000004U)
#define DSI_TCCR0_LPRX_TOCNT3          ((uint32_t)0x00000008U)
#define DSI_TCCR0_LPRX_TOCNT4          ((uint32_t)0x00000010U)
#define DSI_TCCR0_LPRX_TOCNT5          ((uint32_t)0x00000020U)
#define DSI_TCCR0_LPRX_TOCNT6          ((uint32_t)0x00000040U)
#define DSI_TCCR0_LPRX_TOCNT7          ((uint32_t)0x00000080U)
#define DSI_TCCR0_LPRX_TOCNT8          ((uint32_t)0x00000100U)
#define DSI_TCCR0_LPRX_TOCNT9          ((uint32_t)0x00000200U)
#define DSI_TCCR0_LPRX_TOCNT10         ((uint32_t)0x00000400U)
#define DSI_TCCR0_LPRX_TOCNT11         ((uint32_t)0x00000800U)
#define DSI_TCCR0_LPRX_TOCNT12         ((uint32_t)0x00001000U)
#define DSI_TCCR0_LPRX_TOCNT13         ((uint32_t)0x00002000U)
#define DSI_TCCR0_LPRX_TOCNT14         ((uint32_t)0x00004000U)
#define DSI_TCCR0_LPRX_TOCNT15         ((uint32_t)0x00008000U)

#define DSI_TCCR0_HSTX_TOCNT           ((uint32_t)0xFFFF0000U)               /*!< High-Speed Transmission Timeout Counter */
#define DSI_TCCR0_HSTX_TOCNT0          ((uint32_t)0x00010000U)
#define DSI_TCCR0_HSTX_TOCNT1          ((uint32_t)0x00020000U)
#define DSI_TCCR0_HSTX_TOCNT2          ((uint32_t)0x00040000U)
#define DSI_TCCR0_HSTX_TOCNT3          ((uint32_t)0x00080000U)
#define DSI_TCCR0_HSTX_TOCNT4          ((uint32_t)0x00100000U)
#define DSI_TCCR0_HSTX_TOCNT5          ((uint32_t)0x00200000U)
#define DSI_TCCR0_HSTX_TOCNT6          ((uint32_t)0x00400000U)
#define DSI_TCCR0_HSTX_TOCNT7          ((uint32_t)0x00800000U)
#define DSI_TCCR0_HSTX_TOCNT8          ((uint32_t)0x01000000U)
#define DSI_TCCR0_HSTX_TOCNT9          ((uint32_t)0x02000000U)
#define DSI_TCCR0_HSTX_TOCNT10         ((uint32_t)0x04000000U)
#define DSI_TCCR0_HSTX_TOCNT11         ((uint32_t)0x08000000U)
#define DSI_TCCR0_HSTX_TOCNT12         ((uint32_t)0x10000000U)
#define DSI_TCCR0_HSTX_TOCNT13         ((uint32_t)0x20000000U)
#define DSI_TCCR0_HSTX_TOCNT14         ((uint32_t)0x40000000U)
#define DSI_TCCR0_HSTX_TOCNT15         ((uint32_t)0x80000000U)

/*******************  Bit definition for DSI_TCCR1 register  **************/
#define DSI_TCCR1_HSRD_TOCNT           ((uint32_t)0x0000FFFFU)               /*!< High-Speed Read Timeout Counter */
#define DSI_TCCR1_HSRD_TOCNT0          ((uint32_t)0x00000001U)
#define DSI_TCCR1_HSRD_TOCNT1          ((uint32_t)0x00000002U)
#define DSI_TCCR1_HSRD_TOCNT2          ((uint32_t)0x00000004U)
#define DSI_TCCR1_HSRD_TOCNT3          ((uint32_t)0x00000008U)
#define DSI_TCCR1_HSRD_TOCNT4          ((uint32_t)0x00000010U)
#define DSI_TCCR1_HSRD_TOCNT5          ((uint32_t)0x00000020U)
#define DSI_TCCR1_HSRD_TOCNT6          ((uint32_t)0x00000040U)
#define DSI_TCCR1_HSRD_TOCNT7          ((uint32_t)0x00000080U)
#define DSI_TCCR1_HSRD_TOCNT8          ((uint32_t)0x00000100U)
#define DSI_TCCR1_HSRD_TOCNT9          ((uint32_t)0x00000200U)
#define DSI_TCCR1_HSRD_TOCNT10         ((uint32_t)0x00000400U)
#define DSI_TCCR1_HSRD_TOCNT11         ((uint32_t)0x00000800U)
#define DSI_TCCR1_HSRD_TOCNT12         ((uint32_t)0x00001000U)
#define DSI_TCCR1_HSRD_TOCNT13         ((uint32_t)0x00002000U)
#define DSI_TCCR1_HSRD_TOCNT14         ((uint32_t)0x00004000U)
#define DSI_TCCR1_HSRD_TOCNT15         ((uint32_t)0x00008000U)

/*******************  Bit definition for DSI_TCCR2 register  **************/
#define DSI_TCCR2_LPRD_TOCNT           ((uint32_t)0x0000FFFFU)               /*!< Low-Power Read Timeout Counter */
#define DSI_TCCR2_LPRD_TOCNT0          ((uint32_t)0x00000001U)
#define DSI_TCCR2_LPRD_TOCNT1          ((uint32_t)0x00000002U)
#define DSI_TCCR2_LPRD_TOCNT2          ((uint32_t)0x00000004U)
#define DSI_TCCR2_LPRD_TOCNT3          ((uint32_t)0x00000008U)
#define DSI_TCCR2_LPRD_TOCNT4          ((uint32_t)0x00000010U)
#define DSI_TCCR2_LPRD_TOCNT5          ((uint32_t)0x00000020U)
#define DSI_TCCR2_LPRD_TOCNT6          ((uint32_t)0x00000040U)
#define DSI_TCCR2_LPRD_TOCNT7          ((uint32_t)0x00000080U)
#define DSI_TCCR2_LPRD_TOCNT8          ((uint32_t)0x00000100U)
#define DSI_TCCR2_LPRD_TOCNT9          ((uint32_t)0x00000200U)
#define DSI_TCCR2_LPRD_TOCNT10         ((uint32_t)0x00000400U)
#define DSI_TCCR2_LPRD_TOCNT11         ((uint32_t)0x00000800U)
#define DSI_TCCR2_LPRD_TOCNT12         ((uint32_t)0x00001000U)
#define DSI_TCCR2_LPRD_TOCNT13         ((uint32_t)0x00002000U)
#define DSI_TCCR2_LPRD_TOCNT14         ((uint32_t)0x00004000U)
#define DSI_TCCR2_LPRD_TOCNT15         ((uint32_t)0x00008000U)

/*******************  Bit definition for DSI_TCCR3 register  **************/
#define DSI_TCCR3_HSWR_TOCNT           ((uint32_t)0x0000FFFFU)               /*!< High-Speed Write Timeout Counter */
#define DSI_TCCR3_HSWR_TOCNT0          ((uint32_t)0x00000001U)
#define DSI_TCCR3_HSWR_TOCNT1          ((uint32_t)0x00000002U)
#define DSI_TCCR3_HSWR_TOCNT2          ((uint32_t)0x00000004U)
#define DSI_TCCR3_HSWR_TOCNT3          ((uint32_t)0x00000008U)
#define DSI_TCCR3_HSWR_TOCNT4          ((uint32_t)0x00000010U)
#define DSI_TCCR3_HSWR_TOCNT5          ((uint32_t)0x00000020U)
#define DSI_TCCR3_HSWR_TOCNT6          ((uint32_t)0x00000040U)
#define DSI_TCCR3_HSWR_TOCNT7          ((uint32_t)0x00000080U)
#define DSI_TCCR3_HSWR_TOCNT8          ((uint32_t)0x00000100U)
#define DSI_TCCR3_HSWR_TOCNT9          ((uint32_t)0x00000200U)
#define DSI_TCCR3_HSWR_TOCNT10         ((uint32_t)0x00000400U)
#define DSI_TCCR3_HSWR_TOCNT11         ((uint32_t)0x00000800U)
#define DSI_TCCR3_HSWR_TOCNT12         ((uint32_t)0x00001000U)
#define DSI_TCCR3_HSWR_TOCNT13         ((uint32_t)0x00002000U)
#define DSI_TCCR3_HSWR_TOCNT14         ((uint32_t)0x00004000U)
#define DSI_TCCR3_HSWR_TOCNT15         ((uint32_t)0x00008000U)

#define DSI_TCCR3_PM                   ((uint32_t)0x01000000U)               /*!< Presp Mode */

/*******************  Bit definition for DSI_TCCR4 register  **************/
#define DSI_TCCR4_LPWR_TOCNT           ((uint32_t)0x0000FFFFU)               /*!< Low-Power Write Timeout Counter */
#define DSI_TCCR4_LPWR_TOCNT0          ((uint32_t)0x00000001U)
#define DSI_TCCR4_LPWR_TOCNT1          ((uint32_t)0x00000002U)
#define DSI_TCCR4_LPWR_TOCNT2          ((uint32_t)0x00000004U)
#define DSI_TCCR4_LPWR_TOCNT3          ((uint32_t)0x00000008U)
#define DSI_TCCR4_LPWR_TOCNT4          ((uint32_t)0x00000010U)
#define DSI_TCCR4_LPWR_TOCNT5          ((uint32_t)0x00000020U)
#define DSI_TCCR4_LPWR_TOCNT6          ((uint32_t)0x00000040U)
#define DSI_TCCR4_LPWR_TOCNT7          ((uint32_t)0x00000080U)
#define DSI_TCCR4_LPWR_TOCNT8          ((uint32_t)0x00000100U)
#define DSI_TCCR4_LPWR_TOCNT9          ((uint32_t)0x00000200U)
#define DSI_TCCR4_LPWR_TOCNT10         ((uint32_t)0x00000400U)
#define DSI_TCCR4_LPWR_TOCNT11         ((uint32_t)0x00000800U)
#define DSI_TCCR4_LPWR_TOCNT12         ((uint32_t)0x00001000U)
#define DSI_TCCR4_LPWR_TOCNT13         ((uint32_t)0x00002000U)
#define DSI_TCCR4_LPWR_TOCNT14         ((uint32_t)0x00004000U)
#define DSI_TCCR4_LPWR_TOCNT15         ((uint32_t)0x00008000U)

/*******************  Bit definition for DSI_TCCR5 register  **************/
#define DSI_TCCR5_BTA_TOCNT            ((uint32_t)0x0000FFFFU)               /*!< Bus-Turn-Around Timeout Counter */
#define DSI_TCCR5_BTA_TOCNT0           ((uint32_t)0x00000001U)
#define DSI_TCCR5_BTA_TOCNT1           ((uint32_t)0x00000002U)
#define DSI_TCCR5_BTA_TOCNT2           ((uint32_t)0x00000004U)
#define DSI_TCCR5_BTA_TOCNT3           ((uint32_t)0x00000008U)
#define DSI_TCCR5_BTA_TOCNT4           ((uint32_t)0x00000010U)
#define DSI_TCCR5_BTA_TOCNT5           ((uint32_t)0x00000020U)
#define DSI_TCCR5_BTA_TOCNT6           ((uint32_t)0x00000040U)
#define DSI_TCCR5_BTA_TOCNT7           ((uint32_t)0x00000080U)
#define DSI_TCCR5_BTA_TOCNT8           ((uint32_t)0x00000100U)
#define DSI_TCCR5_BTA_TOCNT9           ((uint32_t)0x00000200U)
#define DSI_TCCR5_BTA_TOCNT10          ((uint32_t)0x00000400U)
#define DSI_TCCR5_BTA_TOCNT11          ((uint32_t)0x00000800U)
#define DSI_TCCR5_BTA_TOCNT12          ((uint32_t)0x00001000U)
#define DSI_TCCR5_BTA_TOCNT13          ((uint32_t)0x00002000U)
#define DSI_TCCR5_BTA_TOCNT14          ((uint32_t)0x00004000U)
#define DSI_TCCR5_BTA_TOCNT15          ((uint32_t)0x00008000U)

/*******************  Bit definition for DSI_TDCR register  ***************/
#define DSI_TDCR_3DM                   ((uint32_t)0x00000003U)               /*!< 3D Mode */
#define DSI_TDCR_3DM0                  ((uint32_t)0x00000001U)
#define DSI_TDCR_3DM1                  ((uint32_t)0x00000002U)

#define DSI_TDCR_3DF                   ((uint32_t)0x0000000CU)               /*!< 3D Format */
#define DSI_TDCR_3DF0                  ((uint32_t)0x00000004U)
#define DSI_TDCR_3DF1                  ((uint32_t)0x00000008U)

#define DSI_TDCR_SVS                   ((uint32_t)0x00000010U)               /*!< Second VSYNC */
#define DSI_TDCR_RF                    ((uint32_t)0x00000020U)               /*!< Right First */
#define DSI_TDCR_S3DC                  ((uint32_t)0x00010000U)               /*!< Send 3D Control */

/*******************  Bit definition for DSI_CLCR register  ***************/
#define DSI_CLCR_DPCC                  ((uint32_t)0x00000001U)               /*!< D-PHY Clock Control */
#define DSI_CLCR_ACR                   ((uint32_t)0x00000002U)               /*!< Automatic Clocklane Control */

/*******************  Bit definition for DSI_CLTCR register  **************/
#define DSI_CLTCR_LP2HS_TIME           ((uint32_t)0x000003FFU)               /*!< Low-Power to High-Speed Time */
#define DSI_CLTCR_LP2HS_TIME0          ((uint32_t)0x00000001U)
#define DSI_CLTCR_LP2HS_TIME1          ((uint32_t)0x00000002U)
#define DSI_CLTCR_LP2HS_TIME2          ((uint32_t)0x00000004U)
#define DSI_CLTCR_LP2HS_TIME3          ((uint32_t)0x00000008U)
#define DSI_CLTCR_LP2HS_TIME4          ((uint32_t)0x00000010U)
#define DSI_CLTCR_LP2HS_TIME5          ((uint32_t)0x00000020U)
#define DSI_CLTCR_LP2HS_TIME6          ((uint32_t)0x00000040U)
#define DSI_CLTCR_LP2HS_TIME7          ((uint32_t)0x00000080U)
#define DSI_CLTCR_LP2HS_TIME8          ((uint32_t)0x00000100U)
#define DSI_CLTCR_LP2HS_TIME9          ((uint32_t)0x00000200U)

#define DSI_CLTCR_HS2LP_TIME           ((uint32_t)0x03FF0000U)               /*!< High-Speed to Low-Power Time */
#define DSI_CLTCR_HS2LP_TIME0          ((uint32_t)0x00010000U)
#define DSI_CLTCR_HS2LP_TIME1          ((uint32_t)0x00020000U)
#define DSI_CLTCR_HS2LP_TIME2          ((uint32_t)0x00040000U)
#define DSI_CLTCR_HS2LP_TIME3          ((uint32_t)0x00080000U)
#define DSI_CLTCR_HS2LP_TIME4          ((uint32_t)0x00100000U)
#define DSI_CLTCR_HS2LP_TIME5          ((uint32_t)0x00200000U)
#define DSI_CLTCR_HS2LP_TIME6          ((uint32_t)0x00400000U)
#define DSI_CLTCR_HS2LP_TIME7          ((uint32_t)0x00800000U)
#define DSI_CLTCR_HS2LP_TIME8          ((uint32_t)0x01000000U)
#define DSI_CLTCR_HS2LP_TIME9          ((uint32_t)0x02000000U)

/*******************  Bit definition for DSI_DLTCR register  **************/
#define DSI_DLTCR_MRD_TIME             0x00007FFFU               /*!< Maximum Read Time */
#define DSI_DLTCR_MRD_TIME0            0x00000001U
#define DSI_DLTCR_MRD_TIME1            0x00000002U
#define DSI_DLTCR_MRD_TIME2            0x00000004U
#define DSI_DLTCR_MRD_TIME3            0x00000008U
#define DSI_DLTCR_MRD_TIME4            0x00000010U
#define DSI_DLTCR_MRD_TIME5            0x00000020U
#define DSI_DLTCR_MRD_TIME6            0x00000040U
#define DSI_DLTCR_MRD_TIME7            0x00000080U
#define DSI_DLTCR_MRD_TIME8            0x00000100U
#define DSI_DLTCR_MRD_TIME9            0x00000200U
#define DSI_DLTCR_MRD_TIME10           0x00000400U
#define DSI_DLTCR_MRD_TIME11           0x00000800U
#define DSI_DLTCR_MRD_TIME12           0x00001000U
#define DSI_DLTCR_MRD_TIME13           0x00002000U
#define DSI_DLTCR_MRD_TIME14           0x00004000U

#define DSI_DLTCR_LP2HS_TIME           ((uint32_t)0x000003FFU)               /*!< Low-Power to High-Speed Time */
#define DSI_DLTCR_LP2HS_TIME0          ((uint32_t)0x00000001U)
#define DSI_DLTCR_LP2HS_TIME1          ((uint32_t)0x00000002U)
#define DSI_DLTCR_LP2HS_TIME2          ((uint32_t)0x00000004U)
#define DSI_DLTCR_LP2HS_TIME3          ((uint32_t)0x00000008U)
#define DSI_DLTCR_LP2HS_TIME4          ((uint32_t)0x00000010U)
#define DSI_DLTCR_LP2HS_TIME5          ((uint32_t)0x00000020U)
#define DSI_DLTCR_LP2HS_TIME6          ((uint32_t)0x00000040U)
#define DSI_DLTCR_LP2HS_TIME7          ((uint32_t)0x00000080U)
#define DSI_DLTCR_LP2HS_TIME8          ((uint32_t)0x00000100U)
#define DSI_DLTCR_LP2HS_TIME9          ((uint32_t)0x00000200U)

#define DSI_DLTCR_HS2LP_TIME           ((uint32_t)0x03FF0000U)               /*!< High-Speed to Low-Power Time */
#define DSI_DLTCR_HS2LP_TIME0          ((uint32_t)0x00010000U)
#define DSI_DLTCR_HS2LP_TIME1          ((uint32_t)0x00020000U)
#define DSI_DLTCR_HS2LP_TIME2          ((uint32_t)0x00040000U)
#define DSI_DLTCR_HS2LP_TIME3          ((uint32_t)0x00080000U)
#define DSI_DLTCR_HS2LP_TIME4          ((uint32_t)0x00100000U)
#define DSI_DLTCR_HS2LP_TIME5          ((uint32_t)0x00200000U)
#define DSI_DLTCR_HS2LP_TIME6          ((uint32_t)0x00400000U)
#define DSI_DLTCR_HS2LP_TIME7          ((uint32_t)0x00800000U)
#define DSI_DLTCR_HS2LP_TIME8          ((uint32_t)0x01000000U)
#define DSI_DLTCR_HS2LP_TIME9          ((uint32_t)0x02000000U)

/*******************  Bit definition for DSI_PCTLR register  **************/
#define DSI_PCTLR_DEN                  ((uint32_t)0x00000002U)               /*!< Digital Enable */
#define DSI_PCTLR_CKE                  ((uint32_t)0x00000004U)               /*!< Clock Enable */

/*******************  Bit definition for DSI_PCONFR register  *************/
#define DSI_PCONFR_NL                  ((uint32_t)0x00000003U)               /*!< Number of Lanes */
#define DSI_PCONFR_NL0                 ((uint32_t)0x00000001U)
#define DSI_PCONFR_NL1                 ((uint32_t)0x00000002U)

#define DSI_PCONFR_SW_TIME             ((uint32_t)0x0000FF00U)               /*!< Stop Wait Time */
#define DSI_PCONFR_SW_TIME0            ((uint32_t)0x00000100U)
#define DSI_PCONFR_SW_TIME1            ((uint32_t)0x00000200U)
#define DSI_PCONFR_SW_TIME2            ((uint32_t)0x00000400U)
#define DSI_PCONFR_SW_TIME3            ((uint32_t)0x00000800U)
#define DSI_PCONFR_SW_TIME4            ((uint32_t)0x00001000U)
#define DSI_PCONFR_SW_TIME5            ((uint32_t)0x00002000U)
#define DSI_PCONFR_SW_TIME6            ((uint32_t)0x00004000U)
#define DSI_PCONFR_SW_TIME7            ((uint32_t)0x00008000U)

/*******************  Bit definition for DSI_PUCR register  ***************/
#define DSI_PUCR_URCL                  ((uint32_t)0x00000001U)               /*!< ULPS Request on Clock Lane */
#define DSI_PUCR_UECL                  ((uint32_t)0x00000002U)               /*!< ULPS Exit on Clock Lane */
#define DSI_PUCR_URDL                  ((uint32_t)0x00000004U)               /*!< ULPS Request on Data Lane */
#define DSI_PUCR_UEDL                  ((uint32_t)0x00000008U)               /*!< ULPS Exit on Data Lane */

/*******************  Bit definition for DSI_PTTCR register  **************/
#define DSI_PTTCR_TX_TRIG              ((uint32_t)0x0000000FU)               /*!< Transmission Trigger */
#define DSI_PTTCR_TX_TRIG0             ((uint32_t)0x00000001U)
#define DSI_PTTCR_TX_TRIG1             ((uint32_t)0x00000002U)
#define DSI_PTTCR_TX_TRIG2             ((uint32_t)0x00000004U)
#define DSI_PTTCR_TX_TRIG3             ((uint32_t)0x00000008U)

/*******************  Bit definition for DSI_PSR register  ****************/
#define DSI_PSR_PD                     ((uint32_t)0x00000002U)               /*!< PHY Direction */
#define DSI_PSR_PSSC                   ((uint32_t)0x00000004U)               /*!< PHY Stop State Clock lane */
#define DSI_PSR_UANC                   ((uint32_t)0x00000008U)               /*!< ULPS Active Not Clock lane */
#define DSI_PSR_PSS0                   ((uint32_t)0x00000010U)               /*!< PHY Stop State lane 0 */
#define DSI_PSR_UAN0                   ((uint32_t)0x00000020U)               /*!< ULPS Active Not lane 0 */
#define DSI_PSR_RUE0                   ((uint32_t)0x00000040U)               /*!< RX ULPS Escape lane 0 */
#define DSI_PSR_PSS1                   ((uint32_t)0x00000080U)               /*!< PHY Stop State lane 1 */
#define DSI_PSR_UAN1                   ((uint32_t)0x00000100U)               /*!< ULPS Active Not lane 1 */

/*******************  Bit definition for DSI_ISR0 register  ***************/
#define DSI_ISR0_AE0                   ((uint32_t)0x00000001U)               /*!< Acknowledge Error 0 */
#define DSI_ISR0_AE1                   ((uint32_t)0x00000002U)               /*!< Acknowledge Error 1 */
#define DSI_ISR0_AE2                   ((uint32_t)0x00000004U)               /*!< Acknowledge Error 2 */
#define DSI_ISR0_AE3                   ((uint32_t)0x00000008U)               /*!< Acknowledge Error 3 */
#define DSI_ISR0_AE4                   ((uint32_t)0x00000010U)               /*!< Acknowledge Error 4 */
#define DSI_ISR0_AE5                   ((uint32_t)0x00000020U)               /*!< Acknowledge Error 5 */
#define DSI_ISR0_AE6                   ((uint32_t)0x00000040U)               /*!< Acknowledge Error 6 */
#define DSI_ISR0_AE7                   ((uint32_t)0x00000080U)               /*!< Acknowledge Error 7 */
#define DSI_ISR0_AE8                   ((uint32_t)0x00000100U)               /*!< Acknowledge Error 8 */
#define DSI_ISR0_AE9                   ((uint32_t)0x00000200U)               /*!< Acknowledge Error 9 */
#define DSI_ISR0_AE10                  ((uint32_t)0x00000400U)               /*!< Acknowledge Error 10 */
#define DSI_ISR0_AE11                  ((uint32_t)0x00000800U)               /*!< Acknowledge Error 11 */
#define DSI_ISR0_AE12                  ((uint32_t)0x00001000U)               /*!< Acknowledge Error 12 */
#define DSI_ISR0_AE13                  ((uint32_t)0x00002000U)               /*!< Acknowledge Error 13 */
#define DSI_ISR0_AE14                  ((uint32_t)0x00004000U)               /*!< Acknowledge Error 14 */
#define DSI_ISR0_AE15                  ((uint32_t)0x00008000U)               /*!< Acknowledge Error 15 */
#define DSI_ISR0_PE0                   ((uint32_t)0x00010000U)               /*!< PHY Error 0 */
#define DSI_ISR0_PE1                   ((uint32_t)0x00020000U)               /*!< PHY Error 1 */
#define DSI_ISR0_PE2                   ((uint32_t)0x00040000U)               /*!< PHY Error 2 */
#define DSI_ISR0_PE3                   ((uint32_t)0x00080000U)               /*!< PHY Error 3 */
#define DSI_ISR0_PE4                   ((uint32_t)0x00100000U)               /*!< PHY Error 4 */

/*******************  Bit definition for DSI_ISR1 register  ***************/
#define DSI_ISR1_TOHSTX                ((uint32_t)0x00000001U)               /*!< Timeout High-Speed Transmission */
#define DSI_ISR1_TOLPRX                ((uint32_t)0x00000002U)               /*!< Timeout Low-Power Reception */
#define DSI_ISR1_ECCSE                 ((uint32_t)0x00000004U)               /*!< ECC Single-bit Error */
#define DSI_ISR1_ECCME                 ((uint32_t)0x00000008U)               /*!< ECC Multi-bit Error */
#define DSI_ISR1_CRCE                  ((uint32_t)0x00000010U)               /*!< CRC Error */
#define DSI_ISR1_PSE                   ((uint32_t)0x00000020U)               /*!< Packet Size Error */
#define DSI_ISR1_EOTPE                 ((uint32_t)0x00000040U)               /*!< EoTp Error */
#define DSI_ISR1_LPWRE                 ((uint32_t)0x00000080U)               /*!< LTDC Payload Write Error */
#define DSI_ISR1_GCWRE                 ((uint32_t)0x00000100U)               /*!< Generic Command Write Error */
#define DSI_ISR1_GPWRE                 ((uint32_t)0x00000200U)               /*!< Generic Payload Write Error */
#define DSI_ISR1_GPTXE                 ((uint32_t)0x00000400U)               /*!< Generic Payload Transmit Error */
#define DSI_ISR1_GPRDE                 ((uint32_t)0x00000800U)               /*!< Generic Payload Read Error */
#define DSI_ISR1_GPRXE                 ((uint32_t)0x00001000U)               /*!< Generic Payload Receive Error */

/*******************  Bit definition for DSI_IER0 register  ***************/
#define DSI_IER0_AE0IE                 ((uint32_t)0x00000001U)               /*!< Acknowledge Error 0 Interrupt Enable */
#define DSI_IER0_AE1IE                 ((uint32_t)0x00000002U)               /*!< Acknowledge Error 1 Interrupt Enable */
#define DSI_IER0_AE2IE                 ((uint32_t)0x00000004U)               /*!< Acknowledge Error 2 Interrupt Enable */
#define DSI_IER0_AE3IE                 ((uint32_t)0x00000008U)               /*!< Acknowledge Error 3 Interrupt Enable */
#define DSI_IER0_AE4IE                 ((uint32_t)0x00000010U)               /*!< Acknowledge Error 4 Interrupt Enable */
#define DSI_IER0_AE5IE                 ((uint32_t)0x00000020U)               /*!< Acknowledge Error 5 Interrupt Enable */
#define DSI_IER0_AE6IE                 ((uint32_t)0x00000040U)               /*!< Acknowledge Error 6 Interrupt Enable */
#define DSI_IER0_AE7IE                 ((uint32_t)0x00000080U)               /*!< Acknowledge Error 7 Interrupt Enable */
#define DSI_IER0_AE8IE                 ((uint32_t)0x00000100U)               /*!< Acknowledge Error 8 Interrupt Enable */
#define DSI_IER0_AE9IE                 ((uint32_t)0x00000200U)               /*!< Acknowledge Error 9 Interrupt Enable */
#define DSI_IER0_AE10IE                ((uint32_t)0x00000400U)               /*!< Acknowledge Error 10 Interrupt Enable */
#define DSI_IER0_AE11IE                ((uint32_t)0x00000800U)               /*!< Acknowledge Error 11 Interrupt Enable */
#define DSI_IER0_AE12IE                ((uint32_t)0x00001000U)               /*!< Acknowledge Error 12 Interrupt Enable */
#define DSI_IER0_AE13IE                ((uint32_t)0x00002000U)               /*!< Acknowledge Error 13 Interrupt Enable */
#define DSI_IER0_AE14IE                ((uint32_t)0x00004000U)               /*!< Acknowledge Error 14 Interrupt Enable */
#define DSI_IER0_AE15IE                ((uint32_t)0x00008000U)               /*!< Acknowledge Error 15 Interrupt Enable */
#define DSI_IER0_PE0IE                 ((uint32_t)0x00010000U)               /*!< PHY Error 0 Interrupt Enable */
#define DSI_IER0_PE1IE                 ((uint32_t)0x00020000U)               /*!< PHY Error 1 Interrupt Enable */
#define DSI_IER0_PE2IE                 ((uint32_t)0x00040000U)               /*!< PHY Error 2 Interrupt Enable */
#define DSI_IER0_PE3IE                 ((uint32_t)0x00080000U)               /*!< PHY Error 3 Interrupt Enable */
#define DSI_IER0_PE4IE                 ((uint32_t)0x00100000U)               /*!< PHY Error 4 Interrupt Enable */

/*******************  Bit definition for DSI_IER1 register  ***************/
#define DSI_IER1_TOHSTXIE              ((uint32_t)0x00000001U)               /*!< Timeout High-Speed Transmission Interrupt Enable */
#define DSI_IER1_TOLPRXIE              ((uint32_t)0x00000002U)               /*!< Timeout Low-Power Reception Interrupt Enable */
#define DSI_IER1_ECCSEIE               ((uint32_t)0x00000004U)               /*!< ECC Single-bit Error Interrupt Enable */
#define DSI_IER1_ECCMEIE               ((uint32_t)0x00000008U)               /*!< ECC Multi-bit Error Interrupt Enable */
#define DSI_IER1_CRCEIE                ((uint32_t)0x00000010U)               /*!< CRC Error Interrupt Enable */
#define DSI_IER1_PSEIE                 ((uint32_t)0x00000020U)               /*!< Packet Size Error Interrupt Enable */
#define DSI_IER1_EOTPEIE               ((uint32_t)0x00000040U)               /*!< EoTp Error Interrupt Enable */
#define DSI_IER1_LPWREIE               ((uint32_t)0x00000080U)               /*!< LTDC Payload Write Error Interrupt Enable */
#define DSI_IER1_GCWREIE               ((uint32_t)0x00000100U)               /*!< Generic Command Write Error Interrupt Enable */
#define DSI_IER1_GPWREIE               ((uint32_t)0x00000200U)               /*!< Generic Payload Write Error Interrupt Enable */
#define DSI_IER1_GPTXEIE               ((uint32_t)0x00000400U)               /*!< Generic Payload Transmit Error Interrupt Enable */
#define DSI_IER1_GPRDEIE               ((uint32_t)0x00000800U)               /*!< Generic Payload Read Error Interrupt Enable */
#define DSI_IER1_GPRXEIE               ((uint32_t)0x00001000U)               /*!< Generic Payload Receive Error Interrupt Enable */

/*******************  Bit definition for DSI_FIR0 register  ***************/
#define DSI_FIR0_FAE0                  ((uint32_t)0x00000001U)               /*!< Force Acknowledge Error 0 */
#define DSI_FIR0_FAE1                  ((uint32_t)0x00000002U)               /*!< Force Acknowledge Error 1 */
#define DSI_FIR0_FAE2                  ((uint32_t)0x00000004U)               /*!< Force Acknowledge Error 2 */
#define DSI_FIR0_FAE3                  ((uint32_t)0x00000008U)               /*!< Force Acknowledge Error 3 */
#define DSI_FIR0_FAE4                  ((uint32_t)0x00000010U)               /*!< Force Acknowledge Error 4 */
#define DSI_FIR0_FAE5                  ((uint32_t)0x00000020U)               /*!< Force Acknowledge Error 5 */
#define DSI_FIR0_FAE6                  ((uint32_t)0x00000040U)               /*!< Force Acknowledge Error 6 */
#define DSI_FIR0_FAE7                  ((uint32_t)0x00000080U)               /*!< Force Acknowledge Error 7 */
#define DSI_FIR0_FAE8                  ((uint32_t)0x00000100U)               /*!< Force Acknowledge Error 8 */
#define DSI_FIR0_FAE9                  ((uint32_t)0x00000200U)               /*!< Force Acknowledge Error 9 */
#define DSI_FIR0_FAE10                 ((uint32_t)0x00000400U)               /*!< Force Acknowledge Error 10 */
#define DSI_FIR0_FAE11                 ((uint32_t)0x00000800U)               /*!< Force Acknowledge Error 11 */
#define DSI_FIR0_FAE12                 ((uint32_t)0x00001000U)               /*!< Force Acknowledge Error 12 */
#define DSI_FIR0_FAE13                 ((uint32_t)0x00002000U)               /*!< Force Acknowledge Error 13 */
#define DSI_FIR0_FAE14                 ((uint32_t)0x00004000U)               /*!< Force Acknowledge Error 14 */
#define DSI_FIR0_FAE15                 ((uint32_t)0x00008000U)               /*!< Force Acknowledge Error 15 */
#define DSI_FIR0_FPE0                  ((uint32_t)0x00010000U)               /*!< Force PHY Error 0 */
#define DSI_FIR0_FPE1                  ((uint32_t)0x00020000U)               /*!< Force PHY Error 1 */
#define DSI_FIR0_FPE2                  ((uint32_t)0x00040000U)               /*!< Force PHY Error 2 */
#define DSI_FIR0_FPE3                  ((uint32_t)0x00080000U)               /*!< Force PHY Error 3 */
#define DSI_FIR0_FPE4                  ((uint32_t)0x00100000U)               /*!< Force PHY Error 4 */

/*******************  Bit definition for DSI_FIR1 register  ***************/
#define DSI_FIR1_FTOHSTX               ((uint32_t)0x00000001U)               /*!< Force Timeout High-Speed Transmission */
#define DSI_FIR1_FTOLPRX               ((uint32_t)0x00000002U)               /*!< Force Timeout Low-Power Reception */
#define DSI_FIR1_FECCSE                ((uint32_t)0x00000004U)               /*!< Force ECC Single-bit Error */
#define DSI_FIR1_FECCME                ((uint32_t)0x00000008U)               /*!< Force ECC Multi-bit Error */
#define DSI_FIR1_FCRCE                 ((uint32_t)0x00000010U)               /*!< Force CRC Error */
#define DSI_FIR1_FPSE                  ((uint32_t)0x00000020U)               /*!< Force Packet Size Error */
#define DSI_FIR1_FEOTPE                ((uint32_t)0x00000040U)               /*!< Force EoTp Error */
#define DSI_FIR1_FLPWRE                ((uint32_t)0x00000080U)               /*!< Force LTDC Payload Write Error */
#define DSI_FIR1_FGCWRE                ((uint32_t)0x00000100U)               /*!< Force Generic Command Write Error */
#define DSI_FIR1_FGPWRE                ((uint32_t)0x00000200U)               /*!< Force Generic Payload Write Error */
#define DSI_FIR1_FGPTXE                ((uint32_t)0x00000400U)               /*!< Force Generic Payload Transmit Error */
#define DSI_FIR1_FGPRDE                ((uint32_t)0x00000800U)               /*!< Force Generic Payload Read Error */
#define DSI_FIR1_FGPRXE                ((uint32_t)0x00001000U)               /*!< Force Generic Payload Receive Error */

/*******************  Bit definition for DSI_DLTRCR register  *************/
#define DSI_DLTRCR_MRD_TIME            ((uint32_t)0x00007FFFU)               /*!< Maximum Read Time */
#define DSI_DLTRCR_MRD_TIME0           ((uint32_t)0x00000001U)
#define DSI_DLTRCR_MRD_TIME1           ((uint32_t)0x00000002U)
#define DSI_DLTRCR_MRD_TIME2           ((uint32_t)0x00000004U)
#define DSI_DLTRCR_MRD_TIME3           ((uint32_t)0x00000008U)
#define DSI_DLTRCR_MRD_TIME4           ((uint32_t)0x00000010U)
#define DSI_DLTRCR_MRD_TIME5           ((uint32_t)0x00000020U)
#define DSI_DLTRCR_MRD_TIME6           ((uint32_t)0x00000040U)
#define DSI_DLTRCR_MRD_TIME7           ((uint32_t)0x00000080U)
#define DSI_DLTRCR_MRD_TIME8           ((uint32_t)0x00000100U)
#define DSI_DLTRCR_MRD_TIME9           ((uint32_t)0x00000200U)
#define DSI_DLTRCR_MRD_TIME10          ((uint32_t)0x00000400U)
#define DSI_DLTRCR_MRD_TIME11          ((uint32_t)0x00000800U)
#define DSI_DLTRCR_MRD_TIME12          ((uint32_t)0x00001000U)
#define DSI_DLTRCR_MRD_TIME13          ((uint32_t)0x00002000U)
#define DSI_DLTRCR_MRD_TIME14          ((uint32_t)0x00004000U)

/*******************  Bit definition for DSI_VSCR register  ***************/
#define DSI_VSCR_EN                    ((uint32_t)0x00000001U)               /*!< Enable */
#define DSI_VSCR_UR                    ((uint32_t)0x00000100U)               /*!< Update Register */

/*******************  Bit definition for DSI_LCVCIDR register  ************/
#define DSI_LCVCIDR_VCID               ((uint32_t)0x00000003U)               /*!< Virtual Channel ID */
#define DSI_LCVCIDR_VCID0              ((uint32_t)0x00000001U)
#define DSI_LCVCIDR_VCID1              ((uint32_t)0x00000002U)

/*******************  Bit definition for DSI_LCCCR register  **************/
#define DSI_LCCCR_COLC                 ((uint32_t)0x0000000FU)               /*!< Color Coding */
#define DSI_LCCCR_COLC0                ((uint32_t)0x00000001U)
#define DSI_LCCCR_COLC1                ((uint32_t)0x00000002U)
#define DSI_LCCCR_COLC2                ((uint32_t)0x00000004U)
#define DSI_LCCCR_COLC3                ((uint32_t)0x00000008U)

#define DSI_LCCCR_LPE                  ((uint32_t)0x00000100U)               /*!< Loosely Packed Enable */

/*******************  Bit definition for DSI_LPMCCR register  *************/
#define DSI_LPMCCR_VLPSIZE             ((uint32_t)0x000000FFU)               /*!< VACT Largest Packet Size */
#define DSI_LPMCCR_VLPSIZE0            ((uint32_t)0x00000001U)
#define DSI_LPMCCR_VLPSIZE1            ((uint32_t)0x00000002U)
#define DSI_LPMCCR_VLPSIZE2            ((uint32_t)0x00000004U)
#define DSI_LPMCCR_VLPSIZE3            ((uint32_t)0x00000008U)
#define DSI_LPMCCR_VLPSIZE4            ((uint32_t)0x00000010U)
#define DSI_LPMCCR_VLPSIZE5            ((uint32_t)0x00000020U)
#define DSI_LPMCCR_VLPSIZE6            ((uint32_t)0x00000040U)
#define DSI_LPMCCR_VLPSIZE7            ((uint32_t)0x00000080U)

#define DSI_LPMCCR_LPSIZE              ((uint32_t)0x00FF0000U)               /*!< Largest Packet Size */
#define DSI_LPMCCR_LPSIZE0             ((uint32_t)0x00010000U)
#define DSI_LPMCCR_LPSIZE1             ((uint32_t)0x00020000U)
#define DSI_LPMCCR_LPSIZE2             ((uint32_t)0x00040000U)
#define DSI_LPMCCR_LPSIZE3             ((uint32_t)0x00080000U)
#define DSI_LPMCCR_LPSIZE4             ((uint32_t)0x00100000U)
#define DSI_LPMCCR_LPSIZE5             ((uint32_t)0x00200000U)
#define DSI_LPMCCR_LPSIZE6             ((uint32_t)0x00400000U)
#define DSI_LPMCCR_LPSIZE7             ((uint32_t)0x00800000U)

/*******************  Bit definition for DSI_VMCCR register  **************/
#define DSI_VMCCR_VMT                  ((uint32_t)0x00000003U)               /*!< Video Mode Type */
#define DSI_VMCCR_VMT0                 ((uint32_t)0x00000001U)
#define DSI_VMCCR_VMT1                 ((uint32_t)0x00000002U)

#define DSI_VMCCR_LPVSAE               ((uint32_t)0x00000100U)               /*!< Low-power Vertical Sync time Enable */
#define DSI_VMCCR_LPVBPE               ((uint32_t)0x00000200U)               /*!< Low-power Vertical Back-porch Enable */
#define DSI_VMCCR_LPVFPE               ((uint32_t)0x00000400U)               /*!< Low-power Vertical Front-porch Enable */
#define DSI_VMCCR_LPVAE                ((uint32_t)0x00000800U)               /*!< Low-power Vertical Active Enable */
#define DSI_VMCCR_LPHBPE               ((uint32_t)0x00001000U)               /*!< Low-power Horizontal Back-porch Enable */
#define DSI_VMCCR_LPHFE                ((uint32_t)0x00002000U)               /*!< Low-power Horizontal Front-porch Enable */
#define DSI_VMCCR_FBTAAE               ((uint32_t)0x00004000U)               /*!< Frame BTA Acknowledge Enable */
#define DSI_VMCCR_LPCE                 ((uint32_t)0x00008000U)               /*!< Low-power Command Enable */

/*******************  Bit definition for DSI_VPCCR register  **************/
#define DSI_VPCCR_VPSIZE               ((uint32_t)0x00003FFFU)               /*!< Video Packet Size */
#define DSI_VPCCR_VPSIZE0              ((uint32_t)0x00000001U)
#define DSI_VPCCR_VPSIZE1              ((uint32_t)0x00000002U)
#define DSI_VPCCR_VPSIZE2              ((uint32_t)0x00000004U)
#define DSI_VPCCR_VPSIZE3              ((uint32_t)0x00000008U)
#define DSI_VPCCR_VPSIZE4              ((uint32_t)0x00000010U)
#define DSI_VPCCR_VPSIZE5              ((uint32_t)0x00000020U)
#define DSI_VPCCR_VPSIZE6              ((uint32_t)0x00000040U)
#define DSI_VPCCR_VPSIZE7              ((uint32_t)0x00000080U)
#define DSI_VPCCR_VPSIZE8              ((uint32_t)0x00000100U)
#define DSI_VPCCR_VPSIZE9              ((uint32_t)0x00000200U)
#define DSI_VPCCR_VPSIZE10             ((uint32_t)0x00000400U)
#define DSI_VPCCR_VPSIZE11             ((uint32_t)0x00000800U)
#define DSI_VPCCR_VPSIZE12             ((uint32_t)0x00001000U)
#define DSI_VPCCR_VPSIZE13             ((uint32_t)0x00002000U)

/*******************  Bit definition for DSI_VCCCR register  **************/
#define DSI_VCCCR_NUMC                 ((uint32_t)0x00001FFFU)               /*!< Number of Chunks */
#define DSI_VCCCR_NUMC0                ((uint32_t)0x00000001U)
#define DSI_VCCCR_NUMC1                ((uint32_t)0x00000002U)
#define DSI_VCCCR_NUMC2                ((uint32_t)0x00000004U)
#define DSI_VCCCR_NUMC3                ((uint32_t)0x00000008U)
#define DSI_VCCCR_NUMC4                ((uint32_t)0x00000010U)
#define DSI_VCCCR_NUMC5                ((uint32_t)0x00000020U)
#define DSI_VCCCR_NUMC6                ((uint32_t)0x00000040U)
#define DSI_VCCCR_NUMC7                ((uint32_t)0x00000080U)
#define DSI_VCCCR_NUMC8                ((uint32_t)0x00000100U)
#define DSI_VCCCR_NUMC9                ((uint32_t)0x00000200U)
#define DSI_VCCCR_NUMC10               ((uint32_t)0x00000400U)
#define DSI_VCCCR_NUMC11               ((uint32_t)0x00000800U)
#define DSI_VCCCR_NUMC12               ((uint32_t)0x00001000U)

/*******************  Bit definition for DSI_VNPCCR register  *************/
#define DSI_VNPCCR_NPSIZE              ((uint32_t)0x00001FFFU)               /*!< Number of Chunks */
#define DSI_VNPCCR_NPSIZE0             ((uint32_t)0x00000001U)
#define DSI_VNPCCR_NPSIZE1             ((uint32_t)0x00000002U)
#define DSI_VNPCCR_NPSIZE2             ((uint32_t)0x00000004U)
#define DSI_VNPCCR_NPSIZE3             ((uint32_t)0x00000008U)
#define DSI_VNPCCR_NPSIZE4             ((uint32_t)0x00000010U)
#define DSI_VNPCCR_NPSIZE5             ((uint32_t)0x00000020U)
#define DSI_VNPCCR_NPSIZE6             ((uint32_t)0x00000040U)
#define DSI_VNPCCR_NPSIZE7             ((uint32_t)0x00000080U)
#define DSI_VNPCCR_NPSIZE8             ((uint32_t)0x00000100U)
#define DSI_VNPCCR_NPSIZE9             ((uint32_t)0x00000200U)
#define DSI_VNPCCR_NPSIZE10            ((uint32_t)0x00000400U)
#define DSI_VNPCCR_NPSIZE11            ((uint32_t)0x00000800U)
#define DSI_VNPCCR_NPSIZE12            ((uint32_t)0x00001000U)

/*******************  Bit definition for DSI_VHSACCR register  ************/
#define DSI_VHSACCR_HSA                ((uint32_t)0x00000FFFU)               /*!< Horizontal Synchronism Active duration */
#define DSI_VHSACCR_HSA0               ((uint32_t)0x00000001U)
#define DSI_VHSACCR_HSA1               ((uint32_t)0x00000002U)
#define DSI_VHSACCR_HSA2               ((uint32_t)0x00000004U)
#define DSI_VHSACCR_HSA3               ((uint32_t)0x00000008U)
#define DSI_VHSACCR_HSA4               ((uint32_t)0x00000010U)
#define DSI_VHSACCR_HSA5               ((uint32_t)0x00000020U)
#define DSI_VHSACCR_HSA6               ((uint32_t)0x00000040U)
#define DSI_VHSACCR_HSA7               ((uint32_t)0x00000080U)
#define DSI_VHSACCR_HSA8               ((uint32_t)0x00000100U)
#define DSI_VHSACCR_HSA9               ((uint32_t)0x00000200U)
#define DSI_VHSACCR_HSA10              ((uint32_t)0x00000400U)
#define DSI_VHSACCR_HSA11              ((uint32_t)0x00000800U)

/*******************  Bit definition for DSI_VHBPCCR register  ************/
#define DSI_VHBPCCR_HBP                ((uint32_t)0x00000FFFU)               /*!< Horizontal Back-Porch duration */
#define DSI_VHBPCCR_HBP0               ((uint32_t)0x00000001U)
#define DSI_VHBPCCR_HBP1               ((uint32_t)0x00000002U)
#define DSI_VHBPCCR_HBP2               ((uint32_t)0x00000004U)
#define DSI_VHBPCCR_HBP3               ((uint32_t)0x00000008U)
#define DSI_VHBPCCR_HBP4               ((uint32_t)0x00000010U)
#define DSI_VHBPCCR_HBP5               ((uint32_t)0x00000020U)
#define DSI_VHBPCCR_HBP6               ((uint32_t)0x00000040U)
#define DSI_VHBPCCR_HBP7               ((uint32_t)0x00000080U)
#define DSI_VHBPCCR_HBP8               ((uint32_t)0x00000100U)
#define DSI_VHBPCCR_HBP9               ((uint32_t)0x00000200U)
#define DSI_VHBPCCR_HBP10              ((uint32_t)0x00000400U)
#define DSI_VHBPCCR_HBP11              ((uint32_t)0x00000800U)

/*******************  Bit definition for DSI_VLCCR register  **************/
#define DSI_VLCCR_HLINE                ((uint32_t)0x00007FFFU)               /*!< Horizontal Line duration */
#define DSI_VLCCR_HLINE0               ((uint32_t)0x00000001U)
#define DSI_VLCCR_HLINE1               ((uint32_t)0x00000002U)
#define DSI_VLCCR_HLINE2               ((uint32_t)0x00000004U)
#define DSI_VLCCR_HLINE3               ((uint32_t)0x00000008U)
#define DSI_VLCCR_HLINE4               ((uint32_t)0x00000010U)
#define DSI_VLCCR_HLINE5               ((uint32_t)0x00000020U)
#define DSI_VLCCR_HLINE6               ((uint32_t)0x00000040U)
#define DSI_VLCCR_HLINE7               ((uint32_t)0x00000080U)
#define DSI_VLCCR_HLINE8               ((uint32_t)0x00000100U)
#define DSI_VLCCR_HLINE9               ((uint32_t)0x00000200U)
#define DSI_VLCCR_HLINE10              ((uint32_t)0x00000400U)
#define DSI_VLCCR_HLINE11              ((uint32_t)0x00000800U)
#define DSI_VLCCR_HLINE12              ((uint32_t)0x00001000U)
#define DSI_VLCCR_HLINE13              ((uint32_t)0x00002000U)
#define DSI_VLCCR_HLINE14              ((uint32_t)0x00004000U)

/*******************  Bit definition for DSI_VVSACCR register  ***************/
#define DSI_VVSACCR_VSA                ((uint32_t)0x000003FFU)               /*!< Vertical Synchronism Active duration */
#define DSI_VVSACCR_VSA0               ((uint32_t)0x00000001U)
#define DSI_VVSACCR_VSA1               ((uint32_t)0x00000002U)
#define DSI_VVSACCR_VSA2               ((uint32_t)0x00000004U)
#define DSI_VVSACCR_VSA3               ((uint32_t)0x00000008U)
#define DSI_VVSACCR_VSA4               ((uint32_t)0x00000010U)
#define DSI_VVSACCR_VSA5               ((uint32_t)0x00000020U)
#define DSI_VVSACCR_VSA6               ((uint32_t)0x00000040U)
#define DSI_VVSACCR_VSA7               ((uint32_t)0x00000080U)
#define DSI_VVSACCR_VSA8               ((uint32_t)0x00000100U)
#define DSI_VVSACCR_VSA9               ((uint32_t)0x00000200U)

/*******************  Bit definition for DSI_VVBPCCR register  ************/
#define DSI_VVBPCCR_VBP                ((uint32_t)0x000003FFU)               /*!< Vertical Back-Porch duration */
#define DSI_VVBPCCR_VBP0               ((uint32_t)0x00000001U)
#define DSI_VVBPCCR_VBP1               ((uint32_t)0x00000002U)
#define DSI_VVBPCCR_VBP2               ((uint32_t)0x00000004U)
#define DSI_VVBPCCR_VBP3               ((uint32_t)0x00000008U)
#define DSI_VVBPCCR_VBP4               ((uint32_t)0x00000010U)
#define DSI_VVBPCCR_VBP5               ((uint32_t)0x00000020U)
#define DSI_VVBPCCR_VBP6               ((uint32_t)0x00000040U)
#define DSI_VVBPCCR_VBP7               ((uint32_t)0x00000080U)
#define DSI_VVBPCCR_VBP8               ((uint32_t)0x00000100U)
#define DSI_VVBPCCR_VBP9               ((uint32_t)0x00000200U)

/*******************  Bit definition for DSI_VVFPCCR register  ************/
#define DSI_VVFPCCR_VFP                ((uint32_t)0x000003FFU)               /*!< Vertical Front-Porch duration */
#define DSI_VVFPCCR_VFP0               ((uint32_t)0x00000001U)
#define DSI_VVFPCCR_VFP1               ((uint32_t)0x00000002U)
#define DSI_VVFPCCR_VFP2               ((uint32_t)0x00000004U)
#define DSI_VVFPCCR_VFP3               ((uint32_t)0x00000008U)
#define DSI_VVFPCCR_VFP4               ((uint32_t)0x00000010U)
#define DSI_VVFPCCR_VFP5               ((uint32_t)0x00000020U)
#define DSI_VVFPCCR_VFP6               ((uint32_t)0x00000040U)
#define DSI_VVFPCCR_VFP7               ((uint32_t)0x00000080U)
#define DSI_VVFPCCR_VFP8               ((uint32_t)0x00000100U)
#define DSI_VVFPCCR_VFP9               ((uint32_t)0x00000200U)

/*******************  Bit definition for DSI_VVACCR register  *************/
#define DSI_VVACCR_VA                  ((uint32_t)0x00003FFFU)               /*!< Vertical Active duration */
#define DSI_VVACCR_VA0                 ((uint32_t)0x00000001U)
#define DSI_VVACCR_VA1                 ((uint32_t)0x00000002U)
#define DSI_VVACCR_VA2                 ((uint32_t)0x00000004U)
#define DSI_VVACCR_VA3                 ((uint32_t)0x00000008U)
#define DSI_VVACCR_VA4                 ((uint32_t)0x00000010U)
#define DSI_VVACCR_VA5                 ((uint32_t)0x00000020U)
#define DSI_VVACCR_VA6                 ((uint32_t)0x00000040U)
#define DSI_VVACCR_VA7                 ((uint32_t)0x00000080U)
#define DSI_VVACCR_VA8                 ((uint32_t)0x00000100U)
#define DSI_VVACCR_VA9                 ((uint32_t)0x00000200U)
#define DSI_VVACCR_VA10                ((uint32_t)0x00000400U)
#define DSI_VVACCR_VA11                ((uint32_t)0x00000800U)
#define DSI_VVACCR_VA12                ((uint32_t)0x00001000U)
#define DSI_VVACCR_VA13                ((uint32_t)0x00002000U)

/*******************  Bit definition for DSI_TDCCR register  **************/
#define DSI_TDCCR_3DM                  ((uint32_t)0x00000003U)               /*!< 3D Mode */
#define DSI_TDCCR_3DM0                 ((uint32_t)0x00000001U)
#define DSI_TDCCR_3DM1                 ((uint32_t)0x00000002U)

#define DSI_TDCCR_3DF                  ((uint32_t)0x0000000CU)               /*!< 3D Format */
#define DSI_TDCCR_3DF0                 ((uint32_t)0x00000004U)
#define DSI_TDCCR_3DF1                 ((uint32_t)0x00000008U)

#define DSI_TDCCR_SVS                  ((uint32_t)0x00000010U)               /*!< Second VSYNC */
#define DSI_TDCCR_RF                   ((uint32_t)0x00000020U)               /*!< Right First */
#define DSI_TDCCR_S3DC                 ((uint32_t)0x00010000U)               /*!< Send 3D Control */

/*******************  Bit definition for DSI_WCFGR register  ***************/
#define DSI_WCFGR_DSIM                 ((uint32_t)0x00000001U)               /*!< DSI Mode */

#define DSI_WCFGR_COLMUX               ((uint32_t)0x0000000EU)               /*!< Color Multiplexing */
#define DSI_WCFGR_COLMUX0              ((uint32_t)0x00000002U)
#define DSI_WCFGR_COLMUX1              ((uint32_t)0x00000004U)
#define DSI_WCFGR_COLMUX2              ((uint32_t)0x00000008U)

#define DSI_WCFGR_TESRC                ((uint32_t)0x00000010U)               /*!< Tearing Effect Source */
#define DSI_WCFGR_TEPOL                ((uint32_t)0x00000020U)               /*!< Tearing Effect Polarity */
#define DSI_WCFGR_AR                   ((uint32_t)0x00000040U)               /*!< Automatic Refresh */
#define DSI_WCFGR_VSPOL                ((uint32_t)0x00000080U)               /*!< VSync Polarity */

/*******************  Bit definition for DSI_WCR register  *****************/
#define DSI_WCR_COLM                   ((uint32_t)0x00000001U)               /*!< Color Mode */
#define DSI_WCR_SHTDN                  ((uint32_t)0x00000002U)               /*!< Shutdown */
#define DSI_WCR_LTDCEN                 ((uint32_t)0x00000004U)               /*!< LTDC Enable */
#define DSI_WCR_DSIEN                  ((uint32_t)0x00000008U)               /*!< DSI Enable */

/*******************  Bit definition for DSI_WIER register  ****************/
#define DSI_WIER_TEIE                  ((uint32_t)0x00000001U)               /*!< Tearing Effect Interrupt Enable */
#define DSI_WIER_ERIE                  ((uint32_t)0x00000002U)               /*!< End of Refresh Interrupt Enable */
#define DSI_WIER_PLLLIE                ((uint32_t)0x00000200U)               /*!< PLL Lock Interrupt Enable */
#define DSI_WIER_PLLUIE                ((uint32_t)0x00000400U)               /*!< PLL Unlock Interrupt Enable */
#define DSI_WIER_RRIE                  ((uint32_t)0x00002000U)               /*!< Regulator Ready Interrupt Enable */

/*******************  Bit definition for DSI_WISR register  ****************/
#define DSI_WISR_TEIF                  ((uint32_t)0x00000001U)               /*!< Tearing Effect Interrupt Flag */
#define DSI_WISR_ERIF                  ((uint32_t)0x00000002U)               /*!< End of Refresh Interrupt Flag */
#define DSI_WISR_BUSY                  ((uint32_t)0x00000004U)               /*!< Busy Flag */
#define DSI_WISR_PLLLS                 ((uint32_t)0x00000100U)               /*!< PLL Lock Status */
#define DSI_WISR_PLLLIF                ((uint32_t)0x00000200U)               /*!< PLL Lock Interrupt Flag */
#define DSI_WISR_PLLUIF                ((uint32_t)0x00000400U)               /*!< PLL Unlock Interrupt Flag */
#define DSI_WISR_RRS                   ((uint32_t)0x00001000U)               /*!< Regulator Ready Flag */
#define DSI_WISR_RRIF                  ((uint32_t)0x00002000U)               /*!< Regulator Ready Interrupt Flag */

/*******************  Bit definition for DSI_WIFCR register  ***************/
#define DSI_WIFCR_CTEIF                ((uint32_t)0x00000001U)               /*!< Clear Tearing Effect Interrupt Flag */
#define DSI_WIFCR_CERIF                ((uint32_t)0x00000002U)               /*!< Clear End of Refresh Interrupt Flag */
#define DSI_WIFCR_CPLLLIF              ((uint32_t)0x00000200U)               /*!< Clear PLL Lock Interrupt Flag */
#define DSI_WIFCR_CPLLUIF              ((uint32_t)0x00000400U)               /*!< Clear PLL Unlock Interrupt Flag */
#define DSI_WIFCR_CRRIF                ((uint32_t)0x00002000U)               /*!< Clear Regulator Ready Interrupt Flag */

/*******************  Bit definition for DSI_WPCR0 register  ***************/
#define DSI_WPCR0_UIX4                 ((uint32_t)0x0000003FU)               /*!< Unit Interval multiplied by 4 */
#define DSI_WPCR0_UIX4_0               ((uint32_t)0x00000001U)
#define DSI_WPCR0_UIX4_1               ((uint32_t)0x00000002U)
#define DSI_WPCR0_UIX4_2               ((uint32_t)0x00000004U)
#define DSI_WPCR0_UIX4_3               ((uint32_t)0x00000008U)
#define DSI_WPCR0_UIX4_4               ((uint32_t)0x00000010U)
#define DSI_WPCR0_UIX4_5               ((uint32_t)0x00000020U)

#define DSI_WPCR0_SWCL                 ((uint32_t)0x00000040U)               /*!< Swap pins on clock lane */
#define DSI_WPCR0_SWDL0                ((uint32_t)0x00000080U)               /*!< Swap pins on data lane 1 */
#define DSI_WPCR0_SWDL1                ((uint32_t)0x00000100U)               /*!< Swap pins on data lane 2 */
#define DSI_WPCR0_HSICL                ((uint32_t)0x00000200U)               /*!< Invert the high-speed data signal on clock lane */
#define DSI_WPCR0_HSIDL0               ((uint32_t)0x00000400U)               /*!< Invert the high-speed data signal on lane 1 */
#define DSI_WPCR0_HSIDL1               ((uint32_t)0x00000800U)               /*!< Invert the high-speed data signal on lane 2 */
#define DSI_WPCR0_FTXSMCL              ((uint32_t)0x00001000U)               /*!< Force clock lane in TX stop mode */
#define DSI_WPCR0_FTXSMDL              ((uint32_t)0x00002000U)               /*!< Force data lanes in TX stop mode */
#define DSI_WPCR0_CDOFFDL              ((uint32_t)0x00004000U)               /*!< Contention detection OFF */
#define DSI_WPCR0_TDDL                 ((uint32_t)0x00010000U)               /*!< Turn Disable Data Lanes */

/*******************  Bit definition for DSI_WPCR1 register  ***************/
#define DSI_WPCR1_SKEWCL               ((uint32_t)0x00000003U)               /*!< Skew on Clock Lanes */
#define DSI_WPCR1_SKEWCL0              ((uint32_t)0x00000001U)
#define DSI_WPCR1_SKEWCL1              ((uint32_t)0x00000002U)

#define DSI_WPCR1_SKEWDL               ((uint32_t)0x0000000CU)               /*!< Skew on Data Lanes */
#define DSI_WPCR1_SKEWDL0              ((uint32_t)0x00000004U)
#define DSI_WPCR1_SKEWDL1              ((uint32_t)0x00000008U)

#define DSI_WPCR1_LPTXSRCL             ((uint32_t)0x000000C0U)               /*!< Low-Power TX Slew Rate on Clock Lanes */
#define DSI_WPCR1_LPTXSRCL0            ((uint32_t)0x00000040U)
#define DSI_WPCR1_LPTXSRCL1            ((uint32_t)0x00000080U)

#define DSI_WPCR1_LPTXSRDL             ((uint32_t)0x00000300U)               /*!< Low-Power TX Slew Rate on Data Lanes */
#define DSI_WPCR1_LPTXSRDL0            ((uint32_t)0x00000100U)
#define DSI_WPCR1_LPTXSRDL1            ((uint32_t)0x00000200U)

#define DSI_WPCR1_SDDCCL               ((uint32_t)0x00001000U)               /*!< SDD Control Clock Lane */
#define DSI_WPCR1_SDDCDL               ((uint32_t)0x00002000U)               /*!< SDD Control Data Lanes */
#define DSI_WPCR1_HSTXSRUCL            ((uint32_t)0x00010000U)               /*!< High-Speed TX Slew-Rate Up Clock Lane */
#define DSI_WPCR1_HSTXSRDCL            ((uint32_t)0x00020000U)               /*!< High-Speed TX Slew-Rate Down Clock Lane */
#define DSI_WPCR1_HSTXSRUDL            ((uint32_t)0x00040000U)               /*!< High-Speed TX Slew-Rate Up Data Lane */
#define DSI_WPCR1_HSTXSRDDL            ((uint32_t)0x00080000U)               /*!< High-Speed TX Slew-Rate Down Data Lane */

/*******************  Bit definition for DSI_WRPCR register  ***************/
#define DSI_WRPCR_PLLEN                ((uint32_t)0x00000001U)               /*!< PLL Enable */

#define DSI_WRPCR_PLL_NDIV             ((uint32_t)0x000001FCU)               /*!< PLL Loop Division Factor */
#define DSI_WRPCR_PLL_NDIV0            ((uint32_t)0x00000004U)
#define DSI_WRPCR_PLL_NDIV1            ((uint32_t)0x00000008U)
#define DSI_WRPCR_PLL_NDIV2            ((uint32_t)0x00000010U)
#define DSI_WRPCR_PLL_NDIV3            ((uint32_t)0x00000020U)
#define DSI_WRPCR_PLL_NDIV4            ((uint32_t)0x00000040U)
#define DSI_WRPCR_PLL_NDIV5            ((uint32_t)0x00000080U)
#define DSI_WRPCR_PLL_NDIV6            ((uint32_t)0x00000100U)

#define DSI_WRPCR_PLL_IDF              ((uint32_t)0x00007800U)               /*!< PLL Input Division Factor */
#define DSI_WRPCR_PLL_IDF0             ((uint32_t)0x00000800U)
#define DSI_WRPCR_PLL_IDF1             ((uint32_t)0x00001000U)
#define DSI_WRPCR_PLL_IDF2             ((uint32_t)0x00002000U)
#define DSI_WRPCR_PLL_IDF3             ((uint32_t)0x00004000U)

#define DSI_WRPCR_PLL_ODF              ((uint32_t)0x00030000U)               /*!< PLL Output Division Factor */
#define DSI_WRPCR_PLL_ODF0             ((uint32_t)0x00010000U)
#define DSI_WRPCR_PLL_ODF1             ((uint32_t)0x00020000U)

#define DSI_WRPCR_REGEN                ((uint32_t)0x01000000U)               /*!< Regulator Enable */

#define DSI_WRPCR_BGREN                ((uint32_t)0x10000000U)               /*!< Bandgap Enable */

/******************************************************************************/
/*                                                                            */
/*                    External Interrupt/Event Controller                     */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for EXTI_IMR1 register  *******************/
#define EXTI_IMR1_IM0_Pos          (0U)
#define EXTI_IMR1_IM0_Msk          (0x1U << EXTI_IMR1_IM0_Pos)                 /*!< 0x00000001 */
#define EXTI_IMR1_IM0              EXTI_IMR1_IM0_Msk                           /*!< Interrupt Mask on line 0 */
#define EXTI_IMR1_IM1_Pos          (1U)
#define EXTI_IMR1_IM1_Msk          (0x1U << EXTI_IMR1_IM1_Pos)                 /*!< 0x00000002 */
#define EXTI_IMR1_IM1              EXTI_IMR1_IM1_Msk                           /*!< Interrupt Mask on line 1 */
#define EXTI_IMR1_IM2_Pos          (2U)
#define EXTI_IMR1_IM2_Msk          (0x1U << EXTI_IMR1_IM2_Pos)                 /*!< 0x00000004 */
#define EXTI_IMR1_IM2              EXTI_IMR1_IM2_Msk                           /*!< Interrupt Mask on line 2 */
#define EXTI_IMR1_IM3_Pos          (3U)
#define EXTI_IMR1_IM3_Msk          (0x1U << EXTI_IMR1_IM3_Pos)                 /*!< 0x00000008 */
#define EXTI_IMR1_IM3              EXTI_IMR1_IM3_Msk                           /*!< Interrupt Mask on line 3 */
#define EXTI_IMR1_IM4_Pos          (4U)
#define EXTI_IMR1_IM4_Msk          (0x1U << EXTI_IMR1_IM4_Pos)                 /*!< 0x00000010 */
#define EXTI_IMR1_IM4              EXTI_IMR1_IM4_Msk                           /*!< Interrupt Mask on line 4 */
#define EXTI_IMR1_IM5_Pos          (5U)
#define EXTI_IMR1_IM5_Msk          (0x1U << EXTI_IMR1_IM5_Pos)                 /*!< 0x00000020 */
#define EXTI_IMR1_IM5              EXTI_IMR1_IM5_Msk                           /*!< Interrupt Mask on line 5 */
#define EXTI_IMR1_IM6_Pos          (6U)
#define EXTI_IMR1_IM6_Msk          (0x1U << EXTI_IMR1_IM6_Pos)                 /*!< 0x00000040 */
#define EXTI_IMR1_IM6              EXTI_IMR1_IM6_Msk                           /*!< Interrupt Mask on line 6 */
#define EXTI_IMR1_IM7_Pos          (7U)
#define EXTI_IMR1_IM7_Msk          (0x1U << EXTI_IMR1_IM7_Pos)                 /*!< 0x00000080 */
#define EXTI_IMR1_IM7              EXTI_IMR1_IM7_Msk                           /*!< Interrupt Mask on line 7 */
#define EXTI_IMR1_IM8_Pos          (8U)
#define EXTI_IMR1_IM8_Msk          (0x1U << EXTI_IMR1_IM8_Pos)                 /*!< 0x00000100 */
#define EXTI_IMR1_IM8              EXTI_IMR1_IM8_Msk                           /*!< Interrupt Mask on line 8 */
#define EXTI_IMR1_IM9_Pos          (9U)
#define EXTI_IMR1_IM9_Msk          (0x1U << EXTI_IMR1_IM9_Pos)                 /*!< 0x00000200 */
#define EXTI_IMR1_IM9              EXTI_IMR1_IM9_Msk                           /*!< Interrupt Mask on line 9 */
#define EXTI_IMR1_IM10_Pos         (10U)
#define EXTI_IMR1_IM10_Msk         (0x1U << EXTI_IMR1_IM10_Pos)                /*!< 0x00000400 */
#define EXTI_IMR1_IM10             EXTI_IMR1_IM10_Msk                          /*!< Interrupt Mask on line 10 */
#define EXTI_IMR1_IM11_Pos         (11U)
#define EXTI_IMR1_IM11_Msk         (0x1U << EXTI_IMR1_IM11_Pos)                /*!< 0x00000800 */
#define EXTI_IMR1_IM11             EXTI_IMR1_IM11_Msk                          /*!< Interrupt Mask on line 11 */
#define EXTI_IMR1_IM12_Pos         (12U)
#define EXTI_IMR1_IM12_Msk         (0x1U << EXTI_IMR1_IM12_Pos)                /*!< 0x00001000 */
#define EXTI_IMR1_IM12             EXTI_IMR1_IM12_Msk                          /*!< Interrupt Mask on line 12 */
#define EXTI_IMR1_IM13_Pos         (13U)
#define EXTI_IMR1_IM13_Msk         (0x1U << EXTI_IMR1_IM13_Pos)                /*!< 0x00002000 */
#define EXTI_IMR1_IM13             EXTI_IMR1_IM13_Msk                          /*!< Interrupt Mask on line 13 */
#define EXTI_IMR1_IM14_Pos         (14U)
#define EXTI_IMR1_IM14_Msk         (0x1U << EXTI_IMR1_IM14_Pos)                /*!< 0x00004000 */
#define EXTI_IMR1_IM14             EXTI_IMR1_IM14_Msk                          /*!< Interrupt Mask on line 14 */
#define EXTI_IMR1_IM15_Pos         (15U)
#define EXTI_IMR1_IM15_Msk         (0x1U << EXTI_IMR1_IM15_Pos)                /*!< 0x00008000 */
#define EXTI_IMR1_IM15             EXTI_IMR1_IM15_Msk                          /*!< Interrupt Mask on line 15 */
#define EXTI_IMR1_IM16_Pos         (16U)
#define EXTI_IMR1_IM16_Msk         (0x1U << EXTI_IMR1_IM16_Pos)                /*!< 0x00010000 */
#define EXTI_IMR1_IM16             EXTI_IMR1_IM16_Msk                          /*!< Interrupt Mask on line 16 */
#define EXTI_IMR1_IM17_Pos         (17U)
#define EXTI_IMR1_IM17_Msk         (0x1U << EXTI_IMR1_IM17_Pos)                /*!< 0x00020000 */
#define EXTI_IMR1_IM17             EXTI_IMR1_IM17_Msk                          /*!< Interrupt Mask on line 17 */
#define EXTI_IMR1_IM18_Pos         (18U)
#define EXTI_IMR1_IM18_Msk         (0x1U << EXTI_IMR1_IM18_Pos)                /*!< 0x00040000 */
#define EXTI_IMR1_IM18             EXTI_IMR1_IM18_Msk                          /*!< Interrupt Mask on line 18 */
#define EXTI_IMR1_IM19_Pos         (19U)
#define EXTI_IMR1_IM19_Msk         (0x1U << EXTI_IMR1_IM19_Pos)                /*!< 0x00080000 */
#define EXTI_IMR1_IM19             EXTI_IMR1_IM19_Msk                          /*!< Interrupt Mask on line 19 */
#define EXTI_IMR1_IM20_Pos         (20U)
#define EXTI_IMR1_IM20_Msk         (0x1U << EXTI_IMR1_IM20_Pos)                /*!< 0x00100000 */
#define EXTI_IMR1_IM20             EXTI_IMR1_IM20_Msk                          /*!< Interrupt Mask on line 20 */
#define EXTI_IMR1_IM21_Pos         (21U)
#define EXTI_IMR1_IM21_Msk         (0x1U << EXTI_IMR1_IM21_Pos)                /*!< 0x00200000 */
#define EXTI_IMR1_IM21             EXTI_IMR1_IM21_Msk                          /*!< Interrupt Mask on line 21 */
#define EXTI_IMR1_IM22_Pos         (22U)
#define EXTI_IMR1_IM22_Msk         (0x1U << EXTI_IMR1_IM22_Pos)                /*!< 0x00400000 */
#define EXTI_IMR1_IM22             EXTI_IMR1_IM22_Msk                          /*!< Interrupt Mask on line 22 */
#define EXTI_IMR1_IM23_Pos         (23U)
#define EXTI_IMR1_IM23_Msk         (0x1U << EXTI_IMR1_IM23_Pos)                /*!< 0x00800000 */
#define EXTI_IMR1_IM23             EXTI_IMR1_IM23_Msk                          /*!< Interrupt Mask on line 23 */
#define EXTI_IMR1_IM24_Pos         (24U)
#define EXTI_IMR1_IM24_Msk         (0x1U << EXTI_IMR1_IM24_Pos)                /*!< 0x01000000 */
#define EXTI_IMR1_IM24             EXTI_IMR1_IM24_Msk                          /*!< Interrupt Mask on line 24 */
#define EXTI_IMR1_IM25_Pos         (25U)
#define EXTI_IMR1_IM25_Msk         (0x1U << EXTI_IMR1_IM25_Pos)                /*!< 0x02000000 */
#define EXTI_IMR1_IM25             EXTI_IMR1_IM25_Msk                          /*!< Interrupt Mask on line 25 */
#define EXTI_IMR1_IM26_Pos         (26U)
#define EXTI_IMR1_IM26_Msk         (0x1U << EXTI_IMR1_IM26_Pos)                /*!< 0x04000000 */
#define EXTI_IMR1_IM26             EXTI_IMR1_IM26_Msk                          /*!< Interrupt Mask on line 26 */
#define EXTI_IMR1_IM27_Pos         (27U)
#define EXTI_IMR1_IM27_Msk         (0x1U << EXTI_IMR1_IM27_Pos)                /*!< 0x08000000 */
#define EXTI_IMR1_IM27             EXTI_IMR1_IM27_Msk                          /*!< Interrupt Mask on line 27 */
#define EXTI_IMR1_IM28_Pos         (28U)
#define EXTI_IMR1_IM28_Msk         (0x1U << EXTI_IMR1_IM28_Pos)                /*!< 0x10000000 */
#define EXTI_IMR1_IM28             EXTI_IMR1_IM28_Msk                          /*!< Interrupt Mask on line 28 */
#define EXTI_IMR1_IM29_Pos         (29U)
#define EXTI_IMR1_IM29_Msk         (0x1U << EXTI_IMR1_IM29_Pos)                /*!< 0x20000000 */
#define EXTI_IMR1_IM29             EXTI_IMR1_IM29_Msk                          /*!< Interrupt Mask on line 29 */
#define EXTI_IMR1_IM30_Pos         (30U)
#define EXTI_IMR1_IM30_Msk         (0x1U << EXTI_IMR1_IM30_Pos)                /*!< 0x40000000 */
#define EXTI_IMR1_IM30             EXTI_IMR1_IM30_Msk                          /*!< Interrupt Mask on line 30 */
#define EXTI_IMR1_IM31_Pos         (31U)
#define EXTI_IMR1_IM31_Msk         (0x1U << EXTI_IMR1_IM31_Pos)                /*!< 0x80000000 */
#define EXTI_IMR1_IM31             EXTI_IMR1_IM31_Msk                          /*!< Interrupt Mask on line 31 */
/*******************  Bit definition for EXTI_IMR2 register  *******************/
#define EXTI_IMR2_IM32_Pos         (0U)
#define EXTI_IMR2_IM32_Msk         (0x1U << EXTI_IMR2_IM32_Pos)                /*!< 0x00000001 */
#define EXTI_IMR2_IM32             EXTI_IMR2_IM32_Msk                          /*!< Interrupt Mask on line 32 */
#define EXTI_IMR2_IM33_Pos         (1U)
#define EXTI_IMR2_IM33_Msk         (0x1U << EXTI_IMR2_IM33_Pos)                /*!< 0x00000002 */
#define EXTI_IMR2_IM33             EXTI_IMR2_IM33_Msk                          /*!< Interrupt Mask on line 33 */
#define EXTI_IMR2_IM34_Pos         (2U)
#define EXTI_IMR2_IM34_Msk         (0x1U << EXTI_IMR2_IM34_Pos)                /*!< 0x00000004 */
#define EXTI_IMR2_IM34             EXTI_IMR2_IM34_Msk                          /*!< Interrupt Mask on line 34 */
#define EXTI_IMR2_IM35_Pos         (3U)
#define EXTI_IMR2_IM35_Msk         (0x1U << EXTI_IMR2_IM35_Pos)                /*!< 0x00000008 */
#define EXTI_IMR2_IM35             EXTI_IMR2_IM35_Msk                          /*!< Interrupt Mask on line 35 */
#define EXTI_IMR2_IM36_Pos         (4U)
#define EXTI_IMR2_IM36_Msk         (0x1U << EXTI_IMR2_IM36_Pos)                /*!< 0x00000010 */
#define EXTI_IMR2_IM36             EXTI_IMR2_IM36_Msk                          /*!< Interrupt Mask on line 36 */
#define EXTI_IMR2_IM37_Pos         (5U)
#define EXTI_IMR2_IM37_Msk         (0x1U << EXTI_IMR2_IM37_Pos)                /*!< 0x00000020 */
#define EXTI_IMR2_IM37             EXTI_IMR2_IM37_Msk                          /*!< Interrupt Mask on line 37 */
#define EXTI_IMR2_IM38_Pos         (6U)
#define EXTI_IMR2_IM38_Msk         (0x1U << EXTI_IMR2_IM38_Pos)                /*!< 0x00000040 */
#define EXTI_IMR2_IM38             EXTI_IMR2_IM38_Msk                          /*!< Interrupt Mask on line 38 */
#define EXTI_IMR2_IM39_Pos         (7U)
#define EXTI_IMR2_IM39_Msk         (0x1U << EXTI_IMR2_IM39_Pos)                /*!< 0x00000080 */
#define EXTI_IMR2_IM39             EXTI_IMR2_IM39_Msk                          /*!< Interrupt Mask on line 39 */
#define EXTI_IMR2_IM40_Pos         (8U)
#define EXTI_IMR2_IM40_Msk         (0x1U << EXTI_IMR2_IM40_Pos)                /*!< 0x00000100 */
#define EXTI_IMR2_IM40             EXTI_IMR2_IM40_Msk                          /*!< Interrupt Mask on line 40 */
#define EXTI_IMR2_IM41_Pos         (9U)
#define EXTI_IMR2_IM41_Msk         (0x1U << EXTI_IMR2_IM41_Pos)                /*!< 0x00000200 */
#define EXTI_IMR2_IM41             EXTI_IMR2_IM41_Msk                          /*!< Interrupt Mask on line 41 */
#define EXTI_IMR2_IM42_Pos         (10U)
#define EXTI_IMR2_IM42_Msk         (0x1U << EXTI_IMR2_IM42_Pos)                /*!< 0x00000400 */
#define EXTI_IMR2_IM42             EXTI_IMR2_IM42_Msk                          /*!< Interrupt Mask on line 42 */
#define EXTI_IMR2_IM43_Pos         (11U)
#define EXTI_IMR2_IM43_Msk         (0x1U << EXTI_IMR2_IM43_Pos)                /*!< 0x00000800 */
#define EXTI_IMR2_IM43             EXTI_IMR2_IM43_Msk                          /*!< Interrupt Mask on line 43 */
#define EXTI_IMR2_IM44_Pos         (12U)
#define EXTI_IMR2_IM44_Msk         (0x1U << EXTI_IMR2_IM44_Pos)                /*!< 0x00001000 */
#define EXTI_IMR2_IM44             EXTI_IMR2_IM44_Msk                          /*!< Interrupt Mask on line 44 */
#define EXTI_IMR2_IM45_Pos         (13U)
#define EXTI_IMR2_IM45_Msk         (0x1U << EXTI_IMR2_IM45_Pos)                /*!< 0x00002000 */
#define EXTI_IMR2_IM45             EXTI_IMR2_IM45_Msk                          /*!< Interrupt Mask on line 45 */
#define EXTI_IMR2_IM46_Pos         (14U)
#define EXTI_IMR2_IM46_Msk         (0x1U << EXTI_IMR2_IM46_Pos)                /*!< 0x00004000 */
#define EXTI_IMR2_IM46             EXTI_IMR2_IM46_Msk                          /*!< Interrupt Mask on line 46 */
#define EXTI_IMR2_IM47_Pos         (15U)
#define EXTI_IMR2_IM47_Msk         (0x1U << EXTI_IMR2_IM47_Pos)                /*!< 0x00008000 */
#define EXTI_IMR2_IM47             EXTI_IMR2_IM47_Msk                          /*!< Interrupt Mask on line 47 */
#define EXTI_IMR2_IM48_Pos         (16U)
#define EXTI_IMR2_IM48_Msk         (0x1U << EXTI_IMR2_IM48_Pos)                /*!< 0x00010000 */
#define EXTI_IMR2_IM48             EXTI_IMR2_IM48_Msk                          /*!< Interrupt Mask on line 48 */
#define EXTI_IMR2_IM49_Pos         (17U)
#define EXTI_IMR2_IM49_Msk         (0x1U << EXTI_IMR2_IM49_Pos)                /*!< 0x00020000 */
#define EXTI_IMR2_IM49             EXTI_IMR2_IM49_Msk                          /*!< Interrupt Mask on line 49 */
#define EXTI_IMR2_IM50_Pos         (18U)
#define EXTI_IMR2_IM50_Msk         (0x1U << EXTI_IMR2_IM50_Pos)                /*!< 0x00040000 */
#define EXTI_IMR2_IM50             EXTI_IMR2_IM50_Msk                          /*!< Interrupt Mask on line 50 */
#define EXTI_IMR2_IM51_Pos         (19U)
#define EXTI_IMR2_IM51_Msk         (0x1U << EXTI_IMR2_IM51_Pos)                /*!< 0x00080000 */
#define EXTI_IMR2_IM51             EXTI_IMR2_IM51_Msk                          /*!< Interrupt Mask on line 51 */
#define EXTI_IMR2_IM52_Pos         (20U)
#define EXTI_IMR2_IM52_Msk         (0x1U << EXTI_IMR2_IM52_Pos)                /*!< 0x00100000 */
#define EXTI_IMR2_IM52             EXTI_IMR2_IM52_Msk                          /*!< Interrupt Mask on line 52 */
#define EXTI_IMR2_IM53_Pos         (21U)
#define EXTI_IMR2_IM53_Msk         (0x1U << EXTI_IMR2_IM53_Pos)                /*!< 0x00200000 */
#define EXTI_IMR2_IM53             EXTI_IMR2_IM53_Msk                          /*!< Interrupt Mask on line 53 */
#define EXTI_IMR2_IM54_Pos         (22U)
#define EXTI_IMR2_IM54_Msk         (0x1U << EXTI_IMR2_IM54_Pos)                /*!< 0x00400000 */
#define EXTI_IMR2_IM54             EXTI_IMR2_IM54_Msk                          /*!< Interrupt Mask on line 54 */
#define EXTI_IMR2_IM55_Pos         (23U)
#define EXTI_IMR2_IM55_Msk         (0x1U << EXTI_IMR2_IM55_Pos)                /*!< 0x00800000 */
#define EXTI_IMR2_IM55             EXTI_IMR2_IM55_Msk                          /*!< Interrupt Mask on line 55 */
#define EXTI_IMR2_IM56_Pos         (24U)
#define EXTI_IMR2_IM56_Msk         (0x1U << EXTI_IMR2_IM56_Pos)                /*!< 0x01000000 */
#define EXTI_IMR2_IM56             EXTI_IMR2_IM56_Msk                          /*!< Interrupt Mask on line 56 */
#define EXTI_IMR2_IM57_Pos         (25U)
#define EXTI_IMR2_IM57_Msk         (0x1U << EXTI_IMR2_IM57_Pos)                /*!< 0x02000000 */
#define EXTI_IMR2_IM57             EXTI_IMR2_IM57_Msk                          /*!< Interrupt Mask on line 57 */
#define EXTI_IMR2_IM58_Pos         (26U)
#define EXTI_IMR2_IM58_Msk         (0x1U << EXTI_IMR2_IM58_Pos)                /*!< 0x04000000 */
#define EXTI_IMR2_IM58             EXTI_IMR2_IM58_Msk                          /*!< Interrupt Mask on line 58 */
#define EXTI_IMR2_IM59_Pos         (27U)
#define EXTI_IMR2_IM59_Msk         (0x1U << EXTI_IMR2_IM59_Pos)                /*!< 0x08000000 */
#define EXTI_IMR2_IM59             EXTI_IMR2_IM59_Msk                          /*!< Interrupt Mask on line 59 */
#define EXTI_IMR2_IM60_Pos         (28U)
#define EXTI_IMR2_IM60_Msk         (0x1U << EXTI_IMR2_IM60_Pos)                /*!< 0x10000000 */
#define EXTI_IMR2_IM60             EXTI_IMR2_IM60_Msk                          /*!< Interrupt Mask on line 60 */
#define EXTI_IMR2_IM61_Pos         (29U)
#define EXTI_IMR2_IM61_Msk         (0x1U << EXTI_IMR2_IM61_Pos)                /*!< 0x20000000 */
#define EXTI_IMR2_IM61             EXTI_IMR2_IM61_Msk                          /*!< Interrupt Mask on line 61 */
#define EXTI_IMR2_IM62_Pos         (30U)
#define EXTI_IMR2_IM62_Msk         (0x1U << EXTI_IMR2_IM62_Pos)                /*!< 0x40000000 */
#define EXTI_IMR2_IM62             EXTI_IMR2_IM62_Msk                          /*!< Interrupt Mask on line 62 */
#define EXTI_IMR2_IM63_Pos         (31U)
#define EXTI_IMR2_IM63_Msk         (0x1U << EXTI_IMR2_IM63_Pos)                /*!< 0x80000000 */
#define EXTI_IMR2_IM63             EXTI_IMR2_IM63_Msk                          /*!< Interrupt Mask on line 63 */
/*******************  Bit definition for EXTI_IMR3 register  *******************/
#define EXTI_IMR3_IM64_Pos         (0U)
#define EXTI_IMR3_IM64_Msk         (0x1U << EXTI_IMR3_IM64_Pos)                /*!< 0x00000001 */
#define EXTI_IMR3_IM64             EXTI_IMR3_IM64_Msk                          /*!< Interrupt Mask on line 64 */
#define EXTI_IMR3_IM65_Pos         (1U)
#define EXTI_IMR3_IM65_Msk         (0x1U << EXTI_IMR3_IM65_Pos)                /*!< 0x00000002 */
#define EXTI_IMR3_IM65             EXTI_IMR3_IM65_Msk                          /*!< Interrupt Mask on line 65 */
#define EXTI_IMR3_IM66_Pos         (2U)
#define EXTI_IMR3_IM66_Msk         (0x1U << EXTI_IMR3_IM66_Pos)                /*!< 0x00000004 */
#define EXTI_IMR3_IM66             EXTI_IMR3_IM66_Msk                          /*!< Interrupt Mask on line 66 */
#define EXTI_IMR3_IM67_Pos         (3U)
#define EXTI_IMR3_IM67_Msk         (0x1U << EXTI_IMR3_IM67_Pos)                /*!< 0x00000008 */
#define EXTI_IMR3_IM67             EXTI_IMR3_IM67_Msk                          /*!< Interrupt Mask on line 67 */
#define EXTI_IMR3_IM68_Pos         (4U)
#define EXTI_IMR3_IM68_Msk         (0x1U << EXTI_IMR3_IM68_Pos)                /*!< 0x00000010 */
#define EXTI_IMR3_IM68             EXTI_IMR3_IM68_Msk                          /*!< Interrupt Mask on line 68 */
#define EXTI_IMR3_IM69_Pos         (5U)
#define EXTI_IMR3_IM69_Msk         (0x1U << EXTI_IMR3_IM69_Pos)                /*!< 0x00000020 */
#define EXTI_IMR3_IM69             EXTI_IMR3_IM69_Msk                          /*!< Interrupt Mask on line 69 */
#define EXTI_IMR3_IM70_Pos         (6U)
#define EXTI_IMR3_IM70_Msk         (0x1U << EXTI_IMR3_IM70_Pos)                /*!< 0x00000040 */
#define EXTI_IMR3_IM70             EXTI_IMR3_IM70_Msk                          /*!< Interrupt Mask on line 70 */
#define EXTI_IMR3_IM71_Pos         (7U)
#define EXTI_IMR3_IM71_Msk         (0x1U << EXTI_IMR3_IM71_Pos)                /*!< 0x00000080 */
#define EXTI_IMR3_IM71             EXTI_IMR3_IM71_Msk                          /*!< Interrupt Mask on line 71 */
#define EXTI_IMR3_IM72_Pos         (8U)
#define EXTI_IMR3_IM72_Msk         (0x1U << EXTI_IMR3_IM72_Pos)                /*!< 0x00000100 */
#define EXTI_IMR3_IM72             EXTI_IMR3_IM72_Msk                          /*!< Interrupt Mask on line 72 */
#define EXTI_IMR3_IM73_Pos         (9U)
#define EXTI_IMR3_IM73_Msk         (0x1U << EXTI_IMR3_IM73_Pos)                /*!< 0x00000200 */
#define EXTI_IMR3_IM73             EXTI_IMR3_IM73_Msk                          /*!< Interrupt Mask on line 73 */
#define EXTI_IMR3_IM74_Pos         (10U)
#define EXTI_IMR3_IM74_Msk         (0x1U << EXTI_IMR3_IM74_Pos)                /*!< 0x00000400 */
#define EXTI_IMR3_IM74             EXTI_IMR3_IM74_Msk                          /*!< Interrupt Mask on line 74 */
#define EXTI_IMR3_IM75_Pos         (11U)
#define EXTI_IMR3_IM75_Msk         (0x1U << EXTI_IMR3_IM75_Pos)                /*!< 0x00000800 */
#define EXTI_IMR3_IM75             EXTI_IMR3_IM75_Msk                          /*!< Interrupt Mask on line 75 */
#define EXTI_IMR3_IM76_Pos         (12U)
#define EXTI_IMR3_IM76_Msk         (0x1U << EXTI_IMR3_IM76_Pos)                /*!< 0x00001000 */
#define EXTI_IMR3_IM76             EXTI_IMR3_IM76_Msk                          /*!< Interrupt Mask on line 76 */
#define EXTI_IMR3_IM77_Pos         (13U)
#define EXTI_IMR3_IM77_Msk         (0x1U << EXTI_IMR3_IM77_Pos)                /*!< 0x00002000 */
#define EXTI_IMR3_IM77             EXTI_IMR3_IM77_Msk                          /*!< Interrupt Mask on line 77 */
#define EXTI_IMR3_IM78_Pos         (14U)
#define EXTI_IMR3_IM78_Msk         (0x1U << EXTI_IMR3_IM78_Pos)                /*!< 0x00004000 */
#define EXTI_IMR3_IM78             EXTI_IMR3_IM78_Msk                          /*!< Interrupt Mask on line 78 */
#define EXTI_IMR3_IM79_Pos         (15U)
#define EXTI_IMR3_IM79_Msk         (0x1U << EXTI_IMR3_IM79_Pos)                /*!< 0x00008000 */
#define EXTI_IMR3_IM79             EXTI_IMR3_IM79_Msk                          /*!< Interrupt Mask on line 79 */
#define EXTI_IMR3_IM80_Pos         (16U)
#define EXTI_IMR3_IM80_Msk         (0x1U << EXTI_IMR3_IM80_Pos)                /*!< 0x00010000 */
#define EXTI_IMR3_IM80             EXTI_IMR3_IM80_Msk                          /*!< Interrupt Mask on line 80 */
#define EXTI_IMR3_IM81_Pos         (17U)
#define EXTI_IMR3_IM81_Msk         (0x1U << EXTI_IMR3_IM81_Pos)                /*!< 0x00020000 */
#define EXTI_IMR3_IM81             EXTI_IMR3_IM81_Msk                          /*!< Interrupt Mask on line 81 */
#define EXTI_IMR3_IM82_Pos         (18U)
#define EXTI_IMR3_IM82_Msk         (0x1U << EXTI_IMR3_IM82_Pos)                /*!< 0x00040000 */
#define EXTI_IMR3_IM82             EXTI_IMR3_IM82_Msk                          /*!< Interrupt Mask on line 82 */
#define EXTI_IMR3_IM84_Pos         (20U)
#define EXTI_IMR3_IM84_Msk         (0x1U << EXTI_IMR3_IM84_Pos)                /*!< 0x00100000 */
#define EXTI_IMR3_IM84             EXTI_IMR3_IM84_Msk                          /*!< Interrupt Mask on line 84 */
#define EXTI_IMR3_IM85_Pos         (21U)
#define EXTI_IMR3_IM85_Msk         (0x1U << EXTI_IMR3_IM85_Pos)                /*!< 0x00200000 */
#define EXTI_IMR3_IM85             EXTI_IMR3_IM85_Msk                          /*!< Interrupt Mask on line 85 */
#define EXTI_IMR3_IM86_Pos         (22U)
#define EXTI_IMR3_IM86_Msk         (0x1U << EXTI_IMR3_IM86_Pos)                /*!< 0x00400000 */
#define EXTI_IMR3_IM86             EXTI_IMR3_IM86_Msk                          /*!< Interrupt Mask on line 86 */
#define EXTI_IMR3_IM87_Pos         (23U)
#define EXTI_IMR3_IM87_Msk         (0x1U << EXTI_IMR3_IM87_Pos)                /*!< 0x00800000 */
#define EXTI_IMR3_IM87             EXTI_IMR3_IM87_Msk                          /*!< Interrupt Mask on line 87 */
#define EXTI_IMR3_IM88_Pos         (24U)
#define EXTI_IMR3_IM88_Msk         (0x1U << EXTI_IMR3_IM88_Pos)                /*!< 0x01000000 */
#define EXTI_IMR3_IM88             EXTI_IMR3_IM88_Msk                          /*!< Interrupt Mask on line 88 */

/*******************  Bit definition for EXTI_EMR1 register  *******************/
#define EXTI_EMR1_EM0_Pos          (0U)
#define EXTI_EMR1_EM0_Msk          (0x1U << EXTI_EMR1_EM0_Pos)                 /*!< 0x00000001 */
#define EXTI_EMR1_EM0              EXTI_EMR1_EM0_Msk                           /*!< Event Mask on line 0 */
#define EXTI_EMR1_EM1_Pos          (1U)
#define EXTI_EMR1_EM1_Msk          (0x1U << EXTI_EMR1_EM1_Pos)                 /*!< 0x00000002 */
#define EXTI_EMR1_EM1              EXTI_EMR1_EM1_Msk                           /*!< Event Mask on line 1 */
#define EXTI_EMR1_EM2_Pos          (2U)
#define EXTI_EMR1_EM2_Msk          (0x1U << EXTI_EMR1_EM2_Pos)                 /*!< 0x00000004 */
#define EXTI_EMR1_EM2              EXTI_EMR1_EM2_Msk                           /*!< Event Mask on line 2 */
#define EXTI_EMR1_EM3_Pos          (3U)
#define EXTI_EMR1_EM3_Msk          (0x1U << EXTI_EMR1_EM3_Pos)                 /*!< 0x00000008 */
#define EXTI_EMR1_EM3              EXTI_EMR1_EM3_Msk                           /*!< Event Mask on line 3 */
#define EXTI_EMR1_EM4_Pos          (4U)
#define EXTI_EMR1_EM4_Msk          (0x1U << EXTI_EMR1_EM4_Pos)                 /*!< 0x00000010 */
#define EXTI_EMR1_EM4              EXTI_EMR1_EM4_Msk                           /*!< Event Mask on line 4 */
#define EXTI_EMR1_EM5_Pos          (5U)
#define EXTI_EMR1_EM5_Msk          (0x1U << EXTI_EMR1_EM5_Pos)                 /*!< 0x00000020 */
#define EXTI_EMR1_EM5              EXTI_EMR1_EM5_Msk                           /*!< Event Mask on line 5 */
#define EXTI_EMR1_EM6_Pos          (6U)
#define EXTI_EMR1_EM6_Msk          (0x1U << EXTI_EMR1_EM6_Pos)                 /*!< 0x00000040 */
#define EXTI_EMR1_EM6              EXTI_EMR1_EM6_Msk                           /*!< Event Mask on line 6 */
#define EXTI_EMR1_EM7_Pos          (7U)
#define EXTI_EMR1_EM7_Msk          (0x1U << EXTI_EMR1_EM7_Pos)                 /*!< 0x00000080 */
#define EXTI_EMR1_EM7              EXTI_EMR1_EM7_Msk                           /*!< Event Mask on line 7 */
#define EXTI_EMR1_EM8_Pos          (8U)
#define EXTI_EMR1_EM8_Msk          (0x1U << EXTI_EMR1_EM8_Pos)                 /*!< 0x00000100 */
#define EXTI_EMR1_EM8              EXTI_EMR1_EM8_Msk                           /*!< Event Mask on line 8 */
#define EXTI_EMR1_EM9_Pos          (9U)
#define EXTI_EMR1_EM9_Msk          (0x1U << EXTI_EMR1_EM9_Pos)                 /*!< 0x00000200 */
#define EXTI_EMR1_EM9              EXTI_EMR1_EM9_Msk                           /*!< Event Mask on line 9 */
#define EXTI_EMR1_EM10_Pos         (10U)
#define EXTI_EMR1_EM10_Msk         (0x1U << EXTI_EMR1_EM10_Pos)                /*!< 0x00000400 */
#define EXTI_EMR1_EM10             EXTI_EMR1_EM10_Msk                          /*!< Event Mask on line 10 */
#define EXTI_EMR1_EM11_Pos         (11U)
#define EXTI_EMR1_EM11_Msk         (0x1U << EXTI_EMR1_EM11_Pos)                /*!< 0x00000800 */
#define EXTI_EMR1_EM11             EXTI_EMR1_EM11_Msk                          /*!< Event Mask on line 11 */
#define EXTI_EMR1_EM12_Pos         (12U)
#define EXTI_EMR1_EM12_Msk         (0x1U << EXTI_EMR1_EM12_Pos)                /*!< 0x00001000 */
#define EXTI_EMR1_EM12             EXTI_EMR1_EM12_Msk                          /*!< Event Mask on line 12 */
#define EXTI_EMR1_EM13_Pos         (13U)
#define EXTI_EMR1_EM13_Msk         (0x1U << EXTI_EMR1_EM13_Pos)                /*!< 0x00002000 */
#define EXTI_EMR1_EM13             EXTI_EMR1_EM13_Msk                          /*!< Event Mask on line 13 */
#define EXTI_EMR1_EM14_Pos         (14U)
#define EXTI_EMR1_EM14_Msk         (0x1U << EXTI_EMR1_EM14_Pos)                /*!< 0x00004000 */
#define EXTI_EMR1_EM14             EXTI_EMR1_EM14_Msk                          /*!< Event Mask on line 14 */
#define EXTI_EMR1_EM15_Pos         (15U)
#define EXTI_EMR1_EM15_Msk         (0x1U << EXTI_EMR1_EM15_Pos)                /*!< 0x00008000 */
#define EXTI_EMR1_EM15             EXTI_EMR1_EM15_Msk                          /*!< Event Mask on line 15 */
#define EXTI_EMR1_EM16_Pos         (16U)
#define EXTI_EMR1_EM16_Msk         (0x1U << EXTI_EMR1_EM16_Pos)                /*!< 0x00010000 */
#define EXTI_EMR1_EM16             EXTI_EMR1_EM16_Msk                          /*!< Event Mask on line 16 */
#define EXTI_EMR1_EM17_Pos         (17U)
#define EXTI_EMR1_EM17_Msk         (0x1U << EXTI_EMR1_EM17_Pos)                /*!< 0x00020000 */
#define EXTI_EMR1_EM17             EXTI_EMR1_EM17_Msk                          /*!< Event Mask on line 17 */
#define EXTI_EMR1_EM18_Pos         (18U)
#define EXTI_EMR1_EM18_Msk         (0x1U << EXTI_EMR1_EM18_Pos)                /*!< 0x00040000 */
#define EXTI_EMR1_EM18             EXTI_EMR1_EM18_Msk                          /*!< Event Mask on line 18 */
#define EXTI_EMR1_EM20_Pos         (20U)
#define EXTI_EMR1_EM20_Msk         (0x1U << EXTI_EMR1_EM20_Pos)                /*!< 0x00100000 */
#define EXTI_EMR1_EM20             EXTI_EMR1_EM20_Msk                          /*!< Event Mask on line 20 */
#define EXTI_EMR1_EM21_Pos         (21U)
#define EXTI_EMR1_EM21_Msk         (0x1U << EXTI_EMR1_EM21_Pos)                /*!< 0x00200000 */
#define EXTI_EMR1_EM21             EXTI_EMR1_EM21_Msk                          /*!< Event Mask on line 21 */
#define EXTI_EMR1_EM22_Pos         (22U)
#define EXTI_EMR1_EM22_Msk         (0x1U << EXTI_EMR1_EM22_Pos)                /*!< 0x00400000 */
#define EXTI_EMR1_EM22             EXTI_EMR1_EM22_Msk                          /*!< Event Mask on line 22 */
#define EXTI_EMR1_EM23_Pos         (23U)
#define EXTI_EMR1_EM23_Msk         (0x1U << EXTI_EMR1_EM23_Pos)                /*!< 0x00800000 */
#define EXTI_EMR1_EM23             EXTI_EMR1_EM23_Msk                          /*!< Event Mask on line 23 */
#define EXTI_EMR1_EM24_Pos         (24U)
#define EXTI_EMR1_EM24_Msk         (0x1U << EXTI_EMR1_EM24_Pos)                /*!< 0x01000000 */
#define EXTI_EMR1_EM24             EXTI_EMR1_EM24_Msk                          /*!< Event Mask on line 24 */
#define EXTI_EMR1_EM25_Pos         (25U)
#define EXTI_EMR1_EM25_Msk         (0x1U << EXTI_EMR1_EM25_Pos)                /*!< 0x02000000 */
#define EXTI_EMR1_EM25             EXTI_EMR1_EM25_Msk                          /*!< Event Mask on line 25 */
#define EXTI_EMR1_EM26_Pos         (26U)
#define EXTI_EMR1_EM26_Msk         (0x1U << EXTI_EMR1_EM26_Pos)                /*!< 0x04000000 */
#define EXTI_EMR1_EM26             EXTI_EMR1_EM26_Msk                          /*!< Event Mask on line 26 */
#define EXTI_EMR1_EM27_Pos         (27U)
#define EXTI_EMR1_EM27_Msk         (0x1U << EXTI_EMR1_EM27_Pos)                /*!< 0x08000000 */
#define EXTI_EMR1_EM27             EXTI_EMR1_EM27_Msk                          /*!< Event Mask on line 27 */
#define EXTI_EMR1_EM28_Pos         (28U)
#define EXTI_EMR1_EM28_Msk         (0x1U << EXTI_EMR1_EM28_Pos)                /*!< 0x10000000 */
#define EXTI_EMR1_EM28             EXTI_EMR1_EM28_Msk                          /*!< Event Mask on line 28 */
#define EXTI_EMR1_EM29_Pos         (29U)
#define EXTI_EMR1_EM29_Msk         (0x1U << EXTI_EMR1_EM29_Pos)                /*!< 0x20000000 */
#define EXTI_EMR1_EM29             EXTI_EMR1_EM29_Msk                          /*!< Event Mask on line 29 */
#define EXTI_EMR1_EM30_Pos         (30U)
#define EXTI_EMR1_EM30_Msk         (0x1U << EXTI_EMR1_EM30_Pos)                /*!< 0x40000000 */
#define EXTI_EMR1_EM30             EXTI_EMR1_EM30_Msk                          /*!< Event Mask on line 30 */
#define EXTI_EMR1_EM31_Pos         (31U)
#define EXTI_EMR1_EM31_Msk         (0x1U << EXTI_EMR1_EM31_Pos)                /*!< 0x80000000 */
#define EXTI_EMR1_EM31             EXTI_EMR1_EM31_Msk                          /*!< Event Mask on line 31 */
/*******************  Bit definition for EXTI_EMR2 register  *******************/
#define EXTI_EMR2_EM32_Pos         (0U)
#define EXTI_EMR2_EM32_Msk         (0x1U << EXTI_EMR2_EM32_Pos)                /*!< 0x00000001 */
#define EXTI_EMR2_EM32             EXTI_EMR2_EM32_Msk                          /*!< Event Mask on line 32*/
#define EXTI_EMR2_EM33_Pos         (1U)
#define EXTI_EMR2_EM33_Msk         (0x1U << EXTI_EMR2_EM33_Pos)                /*!< 0x00000002 */
#define EXTI_EMR2_EM33             EXTI_EMR2_EM33_Msk                          /*!< Event Mask on line 33*/
#define EXTI_EMR2_EM34_Pos         (2U)
#define EXTI_EMR2_EM34_Msk         (0x1U << EXTI_EMR2_EM34_Pos)                /*!< 0x00000004 */
#define EXTI_EMR2_EM34             EXTI_EMR2_EM34_Msk                          /*!< Event Mask on line 34*/
#define EXTI_EMR2_EM35_Pos         (3U)
#define EXTI_EMR2_EM35_Msk         (0x1U << EXTI_EMR2_EM35_Pos)                /*!< 0x00000008 */
#define EXTI_EMR2_EM35             EXTI_EMR2_EM35_Msk                          /*!< Event Mask on line 35*/
#define EXTI_EMR2_EM36_Pos         (4U)
#define EXTI_EMR2_EM36_Msk         (0x1U << EXTI_EMR2_EM36_Pos)                /*!< 0x00000010 */
#define EXTI_EMR2_EM36             EXTI_EMR2_EM36_Msk                          /*!< Event Mask on line 36*/
#define EXTI_EMR2_EM37_Pos         (5U)
#define EXTI_EMR2_EM37_Msk         (0x1U << EXTI_EMR2_EM37_Pos)                /*!< 0x00000020 */
#define EXTI_EMR2_EM37             EXTI_EMR2_EM37_Msk                          /*!< Event Mask on line 37*/
#define EXTI_EMR2_EM38_Pos         (6U)
#define EXTI_EMR2_EM38_Msk         (0x1U << EXTI_EMR2_EM38_Pos)                /*!< 0x00000040 */
#define EXTI_EMR2_EM38             EXTI_EMR2_EM38_Msk                          /*!< Event Mask on line 38*/
#define EXTI_EMR2_EM39_Pos         (7U)
#define EXTI_EMR2_EM39_Msk         (0x1U << EXTI_EMR2_EM39_Pos)                /*!< 0x00000080 */
#define EXTI_EMR2_EM39             EXTI_EMR2_EM39_Msk                          /*!< Event Mask on line 39*/
#define EXTI_EMR2_EM40_Pos         (8U)
#define EXTI_EMR2_EM40_Msk         (0x1U << EXTI_EMR2_EM40_Pos)                /*!< 0x00000100 */
#define EXTI_EMR2_EM40             EXTI_EMR2_EM40_Msk                          /*!< Event Mask on line 40*/
#define EXTI_EMR2_EM41_Pos         (9U)
#define EXTI_EMR2_EM41_Msk         (0x1U << EXTI_EMR2_EM41_Pos)                /*!< 0x00000200 */
#define EXTI_EMR2_EM41             EXTI_EMR2_EM41_Msk                          /*!< Event Mask on line 41*/
#define EXTI_EMR2_EM42_Pos         (10U)
#define EXTI_EMR2_EM42_Msk         (0x1U << EXTI_EMR2_EM42_Pos)                /*!< 0x00000400 */
#define EXTI_EMR2_EM42             EXTI_EMR2_EM42_Msk                          /*!< Event Mask on line 42 */
#define EXTI_EMR2_EM43_Pos         (11U)
#define EXTI_EMR2_EM43_Msk         (0x1U << EXTI_EMR2_EM43_Pos)                /*!< 0x00000800 */
#define EXTI_EMR2_EM43             EXTI_EMR2_EM43_Msk                          /*!< Event Mask on line 43 */
#define EXTI_EMR2_EM44_Pos         (12U)
#define EXTI_EMR2_EM44_Msk         (0x1U << EXTI_EMR2_EM44_Pos)                /*!< 0x00001000 */
#define EXTI_EMR2_EM44             EXTI_EMR2_EM44_Msk                          /*!< Event Mask on line 44 */
#define EXTI_EMR2_EM45_Pos         (13U)
#define EXTI_EMR2_EM45_Msk         (0x1U << EXTI_EMR2_EM45_Pos)                /*!< 0x00002000 */
#define EXTI_EMR2_EM45             EXTI_EMR2_EM45_Msk                          /*!< Event Mask on line 45 */
#define EXTI_EMR2_EM46_Pos         (14U)
#define EXTI_EMR2_EM46_Msk         (0x1U << EXTI_EMR2_EM46_Pos)                /*!< 0x00004000 */
#define EXTI_EMR2_EM46             EXTI_EMR2_EM46_Msk                          /*!< Event Mask on line 46 */
#define EXTI_EMR2_EM47_Pos         (15U)
#define EXTI_EMR2_EM47_Msk         (0x1U << EXTI_EMR2_EM47_Pos)                /*!< 0x00008000 */
#define EXTI_EMR2_EM47             EXTI_EMR2_EM47_Msk                          /*!< Event Mask on line 47 */
#define EXTI_EMR2_EM48_Pos         (16U)
#define EXTI_EMR2_EM48_Msk         (0x1U << EXTI_EMR2_EM48_Pos)                /*!< 0x00010000 */
#define EXTI_EMR2_EM48             EXTI_EMR2_EM48_Msk                          /*!< Event Mask on line 48 */
#define EXTI_EMR2_EM49_Pos         (17U)
#define EXTI_EMR2_EM49_Msk         (0x1U << EXTI_EMR2_EM49_Pos)                /*!< 0x00020000 */
#define EXTI_EMR2_EM49             EXTI_EMR2_EM49_Msk                          /*!< Event Mask on line 49 */
#define EXTI_EMR2_EM50_Pos         (18U)
#define EXTI_EMR2_EM50_Msk         (0x1U << EXTI_EMR2_EM50_Pos)                /*!< 0x00040000 */
#define EXTI_EMR2_EM50             EXTI_EMR2_EM50_Msk                          /*!< Event Mask on line 50 */
#define EXTI_EMR2_EM51_Pos         (19U)
#define EXTI_EMR2_EM51_Msk         (0x1U << EXTI_EMR2_EM51_Pos)                /*!< 0x00080000 */
#define EXTI_EMR2_EM51             EXTI_EMR2_EM51_Msk                          /*!< Event Mask on line 51 */
#define EXTI_EMR2_EM52_Pos         (20U)
#define EXTI_EMR2_EM52_Msk         (0x1U << EXTI_EMR2_EM52_Pos)                /*!< 0x00100000 */
#define EXTI_EMR2_EM52             EXTI_EMR2_EM52_Msk                          /*!< Event Mask on line 52 */
#define EXTI_EMR2_EM53_Pos         (21U)
#define EXTI_EMR2_EM53_Msk         (0x1U << EXTI_EMR2_EM53_Pos)                /*!< 0x00200000 */
#define EXTI_EMR2_EM53             EXTI_EMR2_EM53_Msk                          /*!< Event Mask on line 53 */
#define EXTI_EMR2_EM54_Pos         (22U)
#define EXTI_EMR2_EM54_Msk         (0x1U << EXTI_EMR2_EM54_Pos)                /*!< 0x00400000 */
#define EXTI_EMR2_EM54             EXTI_EMR2_EM54_Msk                          /*!< Event Mask on line 54 */
#define EXTI_EMR2_EM55_Pos         (23U)
#define EXTI_EMR2_EM55_Msk         (0x1U << EXTI_EMR2_EM55_Pos)                /*!< 0x00800000 */
#define EXTI_EMR2_EM55             EXTI_EMR2_EM55_Msk                          /*!< Event Mask on line 55 */
#define EXTI_EMR2_EM56_Pos         (24U)
#define EXTI_EMR2_EM56_Msk         (0x1U << EXTI_EMR2_EM56_Pos)                /*!< 0x01000000 */
#define EXTI_EMR2_EM56             EXTI_EMR2_EM56_Msk                          /*!< Event Mask on line 56 */
#define EXTI_EMR2_EM57_Pos         (25U)
#define EXTI_EMR2_EM57_Msk         (0x1U << EXTI_EMR2_EM57_Pos)                /*!< 0x02000000 */
#define EXTI_EMR2_EM57             EXTI_EMR2_EM57_Msk                          /*!< Event Mask on line 57 */
#define EXTI_EMR2_EM58_Pos         (26U)
#define EXTI_EMR2_EM58_Msk         (0x1U << EXTI_EMR2_EM58_Pos)                /*!< 0x04000000 */
#define EXTI_EMR2_EM58             EXTI_EMR2_EM58_Msk                          /*!< Event Mask on line 58 */
#define EXTI_EMR2_EM59_Pos         (27U)
#define EXTI_EMR2_EM59_Msk         (0x1U << EXTI_EMR2_EM59_Pos)                /*!< 0x08000000 */
#define EXTI_EMR2_EM59             EXTI_EMR2_EM59_Msk                          /*!< Event Mask on line 59 */
#define EXTI_EMR2_EM60_Pos         (28U)
#define EXTI_EMR2_EM60_Msk         (0x1U << EXTI_EMR2_EM60_Pos)                /*!< 0x10000000 */
#define EXTI_EMR2_EM60             EXTI_EMR2_EM60_Msk                          /*!< Event Mask on line 60 */
#define EXTI_EMR2_EM61_Pos         (29U)
#define EXTI_EMR2_EM61_Msk         (0x1U << EXTI_EMR2_EM61_Pos)                /*!< 0x20000000 */
#define EXTI_EMR2_EM61             EXTI_EMR2_EM61_Msk                          /*!< Event Mask on line 61 */
#define EXTI_EMR2_EM62_Pos         (30U)
#define EXTI_EMR2_EM62_Msk         (0x1U << EXTI_EMR2_EM62_Pos)                /*!< 0x40000000 */
#define EXTI_EMR2_EM62             EXTI_EMR2_EM62_Msk                          /*!< Event Mask on line 62 */
#define EXTI_EMR2_EM63_Pos         (31U)
#define EXTI_EMR2_EM63_Msk         (0x1U << EXTI_EMR2_EM63_Pos)                /*!< 0x80000000 */
#define EXTI_EMR2_EM63             EXTI_EMR2_EM63_Msk                          /*!< Event Mask on line 63 */
/*******************  Bit definition for EXTI_EMR3 register  *******************/
#define EXTI_EMR3_EM64_Pos         (0U)
#define EXTI_EMR3_EM64_Msk         (0x1U << EXTI_EMR3_EM64_Pos)                /*!< 0x00000001 */
#define EXTI_EMR3_EM64             EXTI_EMR3_EM64_Msk                          /*!< Event Mask on line 64*/
#define EXTI_EMR3_EM65_Pos         (1U)
#define EXTI_EMR3_EM65_Msk         (0x1U << EXTI_EMR3_EM65_Pos)                /*!< 0x00000002 */
#define EXTI_EMR3_EM65             EXTI_EMR3_EM65_Msk                          /*!< Event Mask on line 65*/
#define EXTI_EMR3_EM66_Pos         (2U)
#define EXTI_EMR3_EM66_Msk         (0x1U << EXTI_EMR3_EM66_Pos)                /*!< 0x00000004 */
#define EXTI_EMR3_EM66             EXTI_EMR3_EM66_Msk                          /*!< Event Mask on line 66*/
#define EXTI_EMR3_EM67_Pos         (3U)
#define EXTI_EMR3_EM67_Msk         (0x1U << EXTI_EMR3_EM67_Pos)                /*!< 0x00000008 */
#define EXTI_EMR3_EM67             EXTI_EMR3_EM67_Msk                          /*!< Event Mask on line 67*/
#define EXTI_EMR3_EM68_Pos         (4U)
#define EXTI_EMR3_EM68_Msk         (0x1U << EXTI_EMR3_EM68_Pos)                /*!< 0x00000010 */
#define EXTI_EMR3_EM68             EXTI_EMR3_EM68_Msk                          /*!< Event Mask on line 68*/
#define EXTI_EMR3_EM69_Pos         (5U)
#define EXTI_EMR3_EM69_Msk         (0x1U << EXTI_EMR3_EM69_Pos)                /*!< 0x00000020 */
#define EXTI_EMR3_EM69             EXTI_EMR3_EM69_Msk                          /*!< Event Mask on line 69*/
#define EXTI_EMR3_EM70_Pos         (6U)
#define EXTI_EMR3_EM70_Msk         (0x1U << EXTI_EMR3_EM70_Pos)                /*!< 0x00000040 */
#define EXTI_EMR3_EM70             EXTI_EMR3_EM70_Msk                          /*!< Event Mask on line 70*/
#define EXTI_EMR3_EM71_Pos         (7U)
#define EXTI_EMR3_EM71_Msk         (0x1U << EXTI_EMR3_EM71_Pos)                /*!< 0x00000080 */
#define EXTI_EMR3_EM71             EXTI_EMR3_EM71_Msk                          /*!< Event Mask on line 71*/
#define EXTI_EMR3_EM72_Pos         (8U)
#define EXTI_EMR3_EM72_Msk         (0x1U << EXTI_EMR3_EM72_Pos)                /*!< 0x00000100 */
#define EXTI_EMR3_EM72             EXTI_EMR3_EM72_Msk                          /*!< Event Mask on line 72*/
#define EXTI_EMR3_EM73_Pos         (9U)
#define EXTI_EMR3_EM73_Msk         (0x1U << EXTI_EMR3_EM73_Pos)                /*!< 0x00000200 */
#define EXTI_EMR3_EM73             EXTI_EMR3_EM73_Msk                          /*!< Event Mask on line 73*/
#define EXTI_EMR3_EM74_Pos         (10U)
#define EXTI_EMR3_EM74_Msk         (0x1U << EXTI_EMR3_EM74_Pos)                /*!< 0x00000400 */
#define EXTI_EMR3_EM74             EXTI_EMR3_EM74_Msk                          /*!< Event Mask on line 74 */
#define EXTI_EMR3_EM75_Pos         (11U)
#define EXTI_EMR3_EM75_Msk         (0x1U << EXTI_EMR3_EM75_Pos)                /*!< 0x00000800 */
#define EXTI_EMR3_EM75             EXTI_EMR3_EM75_Msk                          /*!< Event Mask on line 75 */
#define EXTI_EMR3_EM76_Pos         (12U)
#define EXTI_EMR3_EM76_Msk         (0x1U << EXTI_EMR3_EM76_Pos)                /*!< 0x00001000 */
#define EXTI_EMR3_EM76             EXTI_EMR3_EM76_Msk                          /*!< Event Mask on line 76 */
#define EXTI_EMR3_EM77_Pos         (13U)
#define EXTI_EMR3_EM77_Msk         (0x1U << EXTI_EMR3_EM77_Pos)                /*!< 0x00002000 */
#define EXTI_EMR3_EM77             EXTI_EMR3_EM77_Msk                          /*!< Event Mask on line 77 */
#define EXTI_EMR3_EM78_Pos         (14U)
#define EXTI_EMR3_EM78_Msk         (0x1U << EXTI_EMR3_EM78_Pos)                /*!< 0x00004000 */
#define EXTI_EMR3_EM78             EXTI_EMR3_EM78_Msk                          /*!< Event Mask on line 78 */
#define EXTI_EMR3_EM79_Pos         (15U)
#define EXTI_EMR3_EM79_Msk         (0x1U << EXTI_EMR3_EM79_Pos)                /*!< 0x00008000 */
#define EXTI_EMR3_EM79             EXTI_EMR3_EM79_Msk                          /*!< Event Mask on line 79 */
#define EXTI_EMR3_EM80_Pos         (16U)
#define EXTI_EMR3_EM80_Msk         (0x1U << EXTI_EMR3_EM80_Pos)                /*!< 0x00010000 */
#define EXTI_EMR3_EM80             EXTI_EMR3_EM80_Msk                          /*!< Event Mask on line 80 */
#define EXTI_EMR3_EM81_Pos         (17U)
#define EXTI_EMR3_EM81_Msk         (0x1U << EXTI_EMR3_EM81_Pos)                /*!< 0x00020000 */
#define EXTI_EMR3_EM81             EXTI_EMR3_EM81_Msk                          /*!< Event Mask on line 81 */
#define EXTI_EMR3_EM82_Pos         (18U)
#define EXTI_EMR3_EM82_Msk         (0x1U << EXTI_EMR3_EM82_Pos)                /*!< 0x00040000 */
#define EXTI_EMR3_EM82             EXTI_EMR3_EM82_Msk                          /*!< Event Mask on line 82 */
#define EXTI_EMR3_EM84_Pos         (20U)
#define EXTI_EMR3_EM84_Msk         (0x1U << EXTI_EMR3_EM84_Pos)                /*!< 0x00100000 */
#define EXTI_EMR3_EM84             EXTI_EMR3_EM84_Msk                          /*!< Event Mask on line 84 */
#define EXTI_EMR3_EM85_Pos         (21U)
#define EXTI_EMR3_EM85_Msk         (0x1U << EXTI_EMR3_EM85_Pos)                /*!< 0x00200000 */
#define EXTI_EMR3_EM85             EXTI_EMR3_EM85_Msk                          /*!< Event Mask on line 85 */
#define EXTI_EMR3_EM86_Pos         (22U)
#define EXTI_EMR3_EM86_Msk         (0x1U << EXTI_EMR3_EM86_Pos)                /*!< 0x00400000 */
#define EXTI_EMR3_EM86             EXTI_EMR3_EM86_Msk                          /*!< Event Mask on line 86 */
#define EXTI_EMR3_EM87_Pos         (23U)
#define EXTI_EMR3_EM87_Msk         (0x1U << EXTI_EMR3_EM87_Pos)                /*!< 0x00800000 */
#define EXTI_EMR3_EM87             EXTI_EMR3_EM87_Msk                          /*!< Event Mask on line 87 */
#define EXTI_EMR3_EM88_Pos         (24U)
#define EXTI_EMR3_EM88_Msk         (0x1U << EXTI_EMR3_EM88_Pos)                /*!< 0x01000000 */
#define EXTI_EMR3_EM88             EXTI_EMR3_EM88_Msk                          /*!< Event Mask on line 88 */

/******************  Bit definition for EXTI_RTSR1 register  *******************/
#define EXTI_RTSR1_TR0_Pos         (0U)
#define EXTI_RTSR1_TR0_Msk         (0x1U << EXTI_RTSR1_TR0_Pos)                /*!< 0x00000001 */
#define EXTI_RTSR1_TR0             EXTI_RTSR1_TR0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI_RTSR1_TR1_Pos         (1U)
#define EXTI_RTSR1_TR1_Msk         (0x1U << EXTI_RTSR1_TR1_Pos)                /*!< 0x00000002 */
#define EXTI_RTSR1_TR1             EXTI_RTSR1_TR1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI_RTSR1_TR2_Pos         (2U)
#define EXTI_RTSR1_TR2_Msk         (0x1U << EXTI_RTSR1_TR2_Pos)                /*!< 0x00000004 */
#define EXTI_RTSR1_TR2             EXTI_RTSR1_TR2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI_RTSR1_TR3_Pos         (3U)
#define EXTI_RTSR1_TR3_Msk         (0x1U << EXTI_RTSR1_TR3_Pos)                /*!< 0x00000008 */
#define EXTI_RTSR1_TR3             EXTI_RTSR1_TR3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI_RTSR1_TR4_Pos         (4U)
#define EXTI_RTSR1_TR4_Msk         (0x1U << EXTI_RTSR1_TR4_Pos)                /*!< 0x00000010 */
#define EXTI_RTSR1_TR4             EXTI_RTSR1_TR4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI_RTSR1_TR5_Pos         (5U)
#define EXTI_RTSR1_TR5_Msk         (0x1U << EXTI_RTSR1_TR5_Pos)                /*!< 0x00000020 */
#define EXTI_RTSR1_TR5             EXTI_RTSR1_TR5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI_RTSR1_TR6_Pos         (6U)
#define EXTI_RTSR1_TR6_Msk         (0x1U << EXTI_RTSR1_TR6_Pos)                /*!< 0x00000040 */
#define EXTI_RTSR1_TR6             EXTI_RTSR1_TR6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI_RTSR1_TR7_Pos         (7U)
#define EXTI_RTSR1_TR7_Msk         (0x1U << EXTI_RTSR1_TR7_Pos)                /*!< 0x00000080 */
#define EXTI_RTSR1_TR7             EXTI_RTSR1_TR7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI_RTSR1_TR8_Pos         (8U)
#define EXTI_RTSR1_TR8_Msk         (0x1U << EXTI_RTSR1_TR8_Pos)                /*!< 0x00000100 */
#define EXTI_RTSR1_TR8             EXTI_RTSR1_TR8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI_RTSR1_TR9_Pos         (9U)
#define EXTI_RTSR1_TR9_Msk         (0x1U << EXTI_RTSR1_TR9_Pos)                /*!< 0x00000200 */
#define EXTI_RTSR1_TR9             EXTI_RTSR1_TR9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI_RTSR1_TR10_Pos        (10U)
#define EXTI_RTSR1_TR10_Msk        (0x1U << EXTI_RTSR1_TR10_Pos)               /*!< 0x00000400 */
#define EXTI_RTSR1_TR10            EXTI_RTSR1_TR10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI_RTSR1_TR11_Pos        (11U)
#define EXTI_RTSR1_TR11_Msk        (0x1U << EXTI_RTSR1_TR11_Pos)               /*!< 0x00000800 */
#define EXTI_RTSR1_TR11            EXTI_RTSR1_TR11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI_RTSR1_TR12_Pos        (12U)
#define EXTI_RTSR1_TR12_Msk        (0x1U << EXTI_RTSR1_TR12_Pos)               /*!< 0x00001000 */
#define EXTI_RTSR1_TR12            EXTI_RTSR1_TR12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI_RTSR1_TR13_Pos        (13U)
#define EXTI_RTSR1_TR13_Msk        (0x1U << EXTI_RTSR1_TR13_Pos)               /*!< 0x00002000 */
#define EXTI_RTSR1_TR13            EXTI_RTSR1_TR13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI_RTSR1_TR14_Pos        (14U)
#define EXTI_RTSR1_TR14_Msk        (0x1U << EXTI_RTSR1_TR14_Pos)               /*!< 0x00004000 */
#define EXTI_RTSR1_TR14            EXTI_RTSR1_TR14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI_RTSR1_TR15_Pos        (15U)
#define EXTI_RTSR1_TR15_Msk        (0x1U << EXTI_RTSR1_TR15_Pos)               /*!< 0x00008000 */
#define EXTI_RTSR1_TR15            EXTI_RTSR1_TR15_Msk                         /*!< Rising trigger event configuration bit of line 15 */
#define EXTI_RTSR1_TR16_Pos        (16U)
#define EXTI_RTSR1_TR16_Msk        (0x1U << EXTI_RTSR1_TR16_Pos)               /*!< 0x00010000 */
#define EXTI_RTSR1_TR16            EXTI_RTSR1_TR16_Msk                         /*!< Rising trigger event configuration bit of line 16 */
#define EXTI_RTSR1_TR17_Pos        (17U)
#define EXTI_RTSR1_TR17_Msk        (0x1U << EXTI_RTSR1_TR17_Pos)               /*!< 0x00020000 */
#define EXTI_RTSR1_TR17            EXTI_RTSR1_TR17_Msk                         /*!< Rising trigger event configuration bit of line 17 */
#define EXTI_RTSR1_TR18_Pos        (18U)
#define EXTI_RTSR1_TR18_Msk        (0x1U << EXTI_RTSR1_TR18_Pos)               /*!< 0x00040000 */
#define EXTI_RTSR1_TR18            EXTI_RTSR1_TR18_Msk                         /*!< Rising trigger event configuration bit of line 18 */
#define EXTI_RTSR1_TR19_Pos        (19U)
#define EXTI_RTSR1_TR19_Msk        (0x1U << EXTI_RTSR1_TR19_Pos)               /*!< 0x00080000 */
#define EXTI_RTSR1_TR19            EXTI_RTSR1_TR19_Msk                         /*!< Rising trigger event configuration bit of line 19 */
#define EXTI_RTSR1_TR20_Pos        (20U)
#define EXTI_RTSR1_TR20_Msk        (0x1U << EXTI_RTSR1_TR20_Pos)               /*!< 0x00100000 */
#define EXTI_RTSR1_TR20            EXTI_RTSR1_TR20_Msk                         /*!< Rising trigger event configuration bit of line 20 */
#define EXTI_RTSR1_TR21_Pos        (21U)
#define EXTI_RTSR1_TR21_Msk        (0x1U << EXTI_RTSR1_TR21_Pos)               /*!< 0x00200000 */
#define EXTI_RTSR1_TR21            EXTI_RTSR1_TR21_Msk                         /*!< Rising trigger event configuration bit of line 21 */
/******************  Bit definition for EXTI_RTSR2 register  *******************/
#define EXTI_RTSR2_TR49_Pos        (17U)
#define EXTI_RTSR2_TR49_Msk        (0x1U << EXTI_RTSR2_TR49_Pos)               /*!< 0x00020000 */
#define EXTI_RTSR2_TR49            EXTI_RTSR2_TR49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI_RTSR2_TR51_Pos        (19U)
#define EXTI_RTSR2_TR51_Msk        (0x1U << EXTI_RTSR2_TR51_Pos)               /*!< 0x00080000 */
#define EXTI_RTSR2_TR51            EXTI_RTSR2_TR51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
/******************  Bit definition for EXTI_RTSR3 register  *******************/
#define EXTI_RTSR3_TR85_Pos        (21U)
#define EXTI_RTSR3_TR85_Msk        (0x1U << EXTI_RTSR3_TR85_Pos)               /*!< 0x00200000 */
#define EXTI_RTSR3_TR85            EXTI_RTSR3_TR85_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI_RTSR3_TR86_Pos        (22U)
#define EXTI_RTSR3_TR86_Msk        (0x1U << EXTI_RTSR3_TR86_Pos)               /*!< 0x00400000 */
#define EXTI_RTSR3_TR86            EXTI_RTSR3_TR86_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI_FTSR1 register  *******************/
#define EXTI_FTSR1_TR0_Pos         (0U)
#define EXTI_FTSR1_TR0_Msk         (0x1U << EXTI_FTSR1_TR0_Pos)                /*!< 0x00000001 */
#define EXTI_FTSR1_TR0             EXTI_FTSR1_TR0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI_FTSR1_TR1_Pos         (1U)
#define EXTI_FTSR1_TR1_Msk         (0x1U << EXTI_FTSR1_TR1_Pos)                /*!< 0x00000002 */
#define EXTI_FTSR1_TR1             EXTI_FTSR1_TR1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI_FTSR1_TR2_Pos         (2U)
#define EXTI_FTSR1_TR2_Msk         (0x1U << EXTI_FTSR1_TR2_Pos)                /*!< 0x00000004 */
#define EXTI_FTSR1_TR2             EXTI_FTSR1_TR2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI_FTSR1_TR3_Pos         (3U)
#define EXTI_FTSR1_TR3_Msk         (0x1U << EXTI_FTSR1_TR3_Pos)                /*!< 0x00000008 */
#define EXTI_FTSR1_TR3             EXTI_FTSR1_TR3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI_FTSR1_TR4_Pos         (4U)
#define EXTI_FTSR1_TR4_Msk         (0x1U << EXTI_FTSR1_TR4_Pos)                /*!< 0x00000010 */
#define EXTI_FTSR1_TR4             EXTI_FTSR1_TR4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI_FTSR1_TR5_Pos         (5U)
#define EXTI_FTSR1_TR5_Msk         (0x1U << EXTI_FTSR1_TR5_Pos)                /*!< 0x00000020 */
#define EXTI_FTSR1_TR5             EXTI_FTSR1_TR5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI_FTSR1_TR6_Pos         (6U)
#define EXTI_FTSR1_TR6_Msk         (0x1U << EXTI_FTSR1_TR6_Pos)                /*!< 0x00000040 */
#define EXTI_FTSR1_TR6             EXTI_FTSR1_TR6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI_FTSR1_TR7_Pos         (7U)
#define EXTI_FTSR1_TR7_Msk         (0x1U << EXTI_FTSR1_TR7_Pos)                /*!< 0x00000080 */
#define EXTI_FTSR1_TR7             EXTI_FTSR1_TR7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI_FTSR1_TR8_Pos         (8U)
#define EXTI_FTSR1_TR8_Msk         (0x1U << EXTI_FTSR1_TR8_Pos)                /*!< 0x00000100 */
#define EXTI_FTSR1_TR8             EXTI_FTSR1_TR8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI_FTSR1_TR9_Pos         (9U)
#define EXTI_FTSR1_TR9_Msk         (0x1U << EXTI_FTSR1_TR9_Pos)                /*!< 0x00000200 */
#define EXTI_FTSR1_TR9             EXTI_FTSR1_TR9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI_FTSR1_TR10_Pos        (10U)
#define EXTI_FTSR1_TR10_Msk        (0x1U << EXTI_FTSR1_TR10_Pos)               /*!< 0x00000400 */
#define EXTI_FTSR1_TR10            EXTI_FTSR1_TR10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI_FTSR1_TR11_Pos        (11U)
#define EXTI_FTSR1_TR11_Msk        (0x1U << EXTI_FTSR1_TR11_Pos)               /*!< 0x00000800 */
#define EXTI_FTSR1_TR11            EXTI_FTSR1_TR11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI_FTSR1_TR12_Pos        (12U)
#define EXTI_FTSR1_TR12_Msk        (0x1U << EXTI_FTSR1_TR12_Pos)               /*!< 0x00001000 */
#define EXTI_FTSR1_TR12            EXTI_FTSR1_TR12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI_FTSR1_TR13_Pos        (13U)
#define EXTI_FTSR1_TR13_Msk        (0x1U << EXTI_FTSR1_TR13_Pos)               /*!< 0x00002000 */
#define EXTI_FTSR1_TR13            EXTI_FTSR1_TR13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI_FTSR1_TR14_Pos        (14U)
#define EXTI_FTSR1_TR14_Msk        (0x1U << EXTI_FTSR1_TR14_Pos)               /*!< 0x00004000 */
#define EXTI_FTSR1_TR14            EXTI_FTSR1_TR14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI_FTSR1_TR15_Pos        (15U)
#define EXTI_FTSR1_TR15_Msk        (0x1U << EXTI_FTSR1_TR15_Pos)               /*!< 0x00008000 */
#define EXTI_FTSR1_TR15            EXTI_FTSR1_TR15_Msk                         /*!< Falling trigger event configuration bit of line 15 */
#define EXTI_FTSR1_TR16_Pos        (16U)
#define EXTI_FTSR1_TR16_Msk        (0x1U << EXTI_FTSR1_TR16_Pos)               /*!< 0x00010000 */
#define EXTI_FTSR1_TR16            EXTI_FTSR1_TR16_Msk                         /*!< Falling trigger event configuration bit of line 16 */
#define EXTI_FTSR1_TR17_Pos        (17U)
#define EXTI_FTSR1_TR17_Msk        (0x1U << EXTI_FTSR1_TR17_Pos)               /*!< 0x00020000 */
#define EXTI_FTSR1_TR17            EXTI_FTSR1_TR17_Msk                         /*!< Falling trigger event configuration bit of line 17 */
#define EXTI_FTSR1_TR18_Pos        (18U)
#define EXTI_FTSR1_TR18_Msk        (0x1U << EXTI_FTSR1_TR18_Pos)               /*!< 0x00040000 */
#define EXTI_FTSR1_TR18            EXTI_FTSR1_TR18_Msk                         /*!< Falling trigger event configuration bit of line 18 */
#define EXTI_FTSR1_TR19_Pos        (19U)
#define EXTI_FTSR1_TR19_Msk        (0x1U << EXTI_FTSR1_TR19_Pos)               /*!< 0x00080000 */
#define EXTI_FTSR1_TR19            EXTI_FTSR1_TR19_Msk                         /*!< Falling trigger event configuration bit of line 19 */
#define EXTI_FTSR1_TR20_Pos        (20U)
#define EXTI_FTSR1_TR20_Msk        (0x1U << EXTI_FTSR1_TR20_Pos)               /*!< 0x00100000 */
#define EXTI_FTSR1_TR20            EXTI_FTSR1_TR20_Msk                         /*!< Falling trigger event configuration bit of line 20 */
#define EXTI_FTSR1_TR21_Pos        (21U)
#define EXTI_FTSR1_TR21_Msk        (0x1U << EXTI_FTSR1_TR21_Pos)               /*!< 0x00200000 */
#define EXTI_FTSR1_TR21            EXTI_FTSR1_TR21_Msk                         /*!< Falling trigger event configuration bit of line 21 */
/******************  Bit definition for EXTI_FTSR2 register  *******************/
#define EXTI_FTSR2_TR49_Pos        (17U)
#define EXTI_FTSR2_TR49_Msk        (0x1U << EXTI_FTSR2_TR49_Pos)               /*!< 0x00020000 */
#define EXTI_FTSR2_TR49            EXTI_FTSR2_TR49_Msk                         /*!< Falling trigger event configuration bit of line 49 */
#define EXTI_FTSR2_TR51_Pos        (19U)
#define EXTI_FTSR2_TR51_Msk        (0x1U << EXTI_FTSR2_TR51_Pos)               /*!< 0x00080000 */
#define EXTI_FTSR2_TR51            EXTI_FTSR2_TR51_Msk                         /*!< Falling trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI_FTSR3 register  *******************/
#define EXTI_FTSR3_TR85_Pos        (21U)
#define EXTI_FTSR3_TR85_Msk        (0x1U << EXTI_FTSR3_TR85_Pos)               /*!< 0x00200000 */
#define EXTI_FTSR3_TR85            EXTI_FTSR3_TR85_Msk                         /*!< Falling trigger event configuration bit of line 85 */
#define EXTI_FTSR3_TR86_Pos        (22U)
#define EXTI_FTSR3_TR86_Msk        (0x1U << EXTI_FTSR3_TR86_Pos)               /*!< 0x00400000 */
#define EXTI_FTSR3_TR86            EXTI_FTSR3_TR86_Msk                         /*!< Falling trigger event configuration bit of line 86 */
/******************  Bit definition for EXTI_SWIER1 register  ******************/
#define EXTI_SWIER1_SWIER0_Pos     (0U)
#define EXTI_SWIER1_SWIER0_Msk     (0x1U << EXTI_SWIER1_SWIER0_Pos)            /*!< 0x00000001 */
#define EXTI_SWIER1_SWIER0         EXTI_SWIER1_SWIER0_Msk                      /*!< Software Interrupt on line 0 */
#define EXTI_SWIER1_SWIER1_Pos     (1U)
#define EXTI_SWIER1_SWIER1_Msk     (0x1U << EXTI_SWIER1_SWIER1_Pos)            /*!< 0x00000002 */
#define EXTI_SWIER1_SWIER1         EXTI_SWIER1_SWIER1_Msk                      /*!< Software Interrupt on line 1 */
#define EXTI_SWIER1_SWIER2_Pos     (2U)
#define EXTI_SWIER1_SWIER2_Msk     (0x1U << EXTI_SWIER1_SWIER2_Pos)            /*!< 0x00000004 */
#define EXTI_SWIER1_SWIER2         EXTI_SWIER1_SWIER2_Msk                      /*!< Software Interrupt on line 2 */
#define EXTI_SWIER1_SWIER3_Pos     (3U)
#define EXTI_SWIER1_SWIER3_Msk     (0x1U << EXTI_SWIER1_SWIER3_Pos)            /*!< 0x00000008 */
#define EXTI_SWIER1_SWIER3         EXTI_SWIER1_SWIER3_Msk                      /*!< Software Interrupt on line 3 */
#define EXTI_SWIER1_SWIER4_Pos     (4U)
#define EXTI_SWIER1_SWIER4_Msk     (0x1U << EXTI_SWIER1_SWIER4_Pos)            /*!< 0x00000010 */
#define EXTI_SWIER1_SWIER4         EXTI_SWIER1_SWIER4_Msk                      /*!< Software Interrupt on line 4 */
#define EXTI_SWIER1_SWIER5_Pos     (5U)
#define EXTI_SWIER1_SWIER5_Msk     (0x1U << EXTI_SWIER1_SWIER5_Pos)            /*!< 0x00000020 */
#define EXTI_SWIER1_SWIER5         EXTI_SWIER1_SWIER5_Msk                      /*!< Software Interrupt on line 5 */
#define EXTI_SWIER1_SWIER6_Pos     (6U)
#define EXTI_SWIER1_SWIER6_Msk     (0x1U << EXTI_SWIER1_SWIER6_Pos)            /*!< 0x00000040 */
#define EXTI_SWIER1_SWIER6         EXTI_SWIER1_SWIER6_Msk                      /*!< Software Interrupt on line 6 */
#define EXTI_SWIER1_SWIER7_Pos     (7U)
#define EXTI_SWIER1_SWIER7_Msk     (0x1U << EXTI_SWIER1_SWIER7_Pos)            /*!< 0x00000080 */
#define EXTI_SWIER1_SWIER7         EXTI_SWIER1_SWIER7_Msk                      /*!< Software Interrupt on line 7 */
#define EXTI_SWIER1_SWIER8_Pos     (8U)
#define EXTI_SWIER1_SWIER8_Msk     (0x1U << EXTI_SWIER1_SWIER8_Pos)            /*!< 0x00000100 */
#define EXTI_SWIER1_SWIER8         EXTI_SWIER1_SWIER8_Msk                      /*!< Software Interrupt on line 8 */
#define EXTI_SWIER1_SWIER9_Pos     (9U)
#define EXTI_SWIER1_SWIER9_Msk     (0x1U << EXTI_SWIER1_SWIER9_Pos)            /*!< 0x00000200 */
#define EXTI_SWIER1_SWIER9         EXTI_SWIER1_SWIER9_Msk                      /*!< Software Interrupt on line 9 */
#define EXTI_SWIER1_SWIER10_Pos    (10U)
#define EXTI_SWIER1_SWIER10_Msk    (0x1U << EXTI_SWIER1_SWIER10_Pos)           /*!< 0x00000400 */
#define EXTI_SWIER1_SWIER10        EXTI_SWIER1_SWIER10_Msk                     /*!< Software Interrupt on line 10 */
#define EXTI_SWIER1_SWIER11_Pos    (11U)
#define EXTI_SWIER1_SWIER11_Msk    (0x1U << EXTI_SWIER1_SWIER11_Pos)           /*!< 0x00000800 */
#define EXTI_SWIER1_SWIER11        EXTI_SWIER1_SWIER11_Msk                     /*!< Software Interrupt on line 11 */
#define EXTI_SWIER1_SWIER12_Pos    (12U)
#define EXTI_SWIER1_SWIER12_Msk    (0x1U << EXTI_SWIER1_SWIER12_Pos)           /*!< 0x00001000 */
#define EXTI_SWIER1_SWIER12        EXTI_SWIER1_SWIER12_Msk                     /*!< Software Interrupt on line 12 */
#define EXTI_SWIER1_SWIER13_Pos    (13U)
#define EXTI_SWIER1_SWIER13_Msk    (0x1U << EXTI_SWIER1_SWIER13_Pos)           /*!< 0x00002000 */
#define EXTI_SWIER1_SWIER13        EXTI_SWIER1_SWIER13_Msk                     /*!< Software Interrupt on line 13 */
#define EXTI_SWIER1_SWIER14_Pos    (14U)
#define EXTI_SWIER1_SWIER14_Msk    (0x1U << EXTI_SWIER1_SWIER14_Pos)           /*!< 0x00004000 */
#define EXTI_SWIER1_SWIER14        EXTI_SWIER1_SWIER14_Msk                     /*!< Software Interrupt on line 14 */
#define EXTI_SWIER1_SWIER15_Pos    (15U)
#define EXTI_SWIER1_SWIER15_Msk    (0x1U << EXTI_SWIER1_SWIER15_Pos)           /*!< 0x00008000 */
#define EXTI_SWIER1_SWIER15        EXTI_SWIER1_SWIER15_Msk                     /*!< Software Interrupt on line 15 */
#define EXTI_SWIER1_SWIER16_Pos    (16U)
#define EXTI_SWIER1_SWIER16_Msk    (0x1U << EXTI_SWIER1_SWIER16_Pos)           /*!< 0x00010000 */
#define EXTI_SWIER1_SWIER16        EXTI_SWIER1_SWIER16_Msk                     /*!< Software Interrupt on line 16 */
#define EXTI_SWIER1_SWIER17_Pos    (17U)
#define EXTI_SWIER1_SWIER17_Msk    (0x1U << EXTI_SWIER1_SWIER17_Pos)           /*!< 0x00020000 */
#define EXTI_SWIER1_SWIER17        EXTI_SWIER1_SWIER17_Msk                     /*!< Software Interrupt on line 17 */
#define EXTI_SWIER1_SWIER18_Pos    (18U)
#define EXTI_SWIER1_SWIER18_Msk    (0x1U << EXTI_SWIER1_SWIER18_Pos)           /*!< 0x00040000 */
#define EXTI_SWIER1_SWIER18        EXTI_SWIER1_SWIER18_Msk                     /*!< Software Interrupt on line 18 */
#define EXTI_SWIER1_SWIER19_Pos    (19U)
#define EXTI_SWIER1_SWIER19_Msk    (0x1U << EXTI_SWIER1_SWIER19_Pos)           /*!< 0x00080000 */
#define EXTI_SWIER1_SWIER19        EXTI_SWIER1_SWIER19_Msk                     /*!< Software Interrupt on line 19 */
#define EXTI_SWIER1_SWIER20_Pos    (20U)
#define EXTI_SWIER1_SWIER20_Msk    (0x1U << EXTI_SWIER1_SWIER20_Pos)           /*!< 0x00100000 */
#define EXTI_SWIER1_SWIER20        EXTI_SWIER1_SWIER20_Msk                     /*!< Software Interrupt on line 20 */
#define EXTI_SWIER1_SWIER21_Pos    (21U)
#define EXTI_SWIER1_SWIER21_Msk    (0x1U << EXTI_SWIER1_SWIER21_Pos)           /*!< 0x00200000 */
#define EXTI_SWIER1_SWIER21        EXTI_SWIER1_SWIER21_Msk                     /*!< Software Interrupt on line 21 */

/******************  Bit definition for EXTI_SWIER2 register  ******************/
#define EXTI_SWIER2_SWIER49_Pos    (17U)
#define EXTI_SWIER2_SWIER49_Msk    (0x1U << EXTI_SWIER2_SWIER49_Pos)           /*!< 0x00020000 */
#define EXTI_SWIER2_SWIER49        EXTI_SWIER2_SWIER49_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI_SWIER2_SWIER51_Pos    (19U)
#define EXTI_SWIER2_SWIER51_Msk    (0x1U << EXTI_SWIER2_SWIER51_Pos)           /*!< 0x00080000 */
#define EXTI_SWIER2_SWIER51        EXTI_SWIER2_SWIER51_Msk                     /*!< Software Interrupt on line 51 */

/******************  Bit definition for EXTI_SWIER3 register  ******************/
#define EXTI_SWIER3_SWIER85_Pos    (21U)
#define EXTI_SWIER3_SWIER85_Msk    (0x1U << EXTI_SWIER3_SWIER85_Pos)           /*!< 0x00200000 */
#define EXTI_SWIER3_SWIER85        EXTI_SWIER3_SWIER85_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI_SWIER3_SWIER86_Pos    (22U)
#define EXTI_SWIER3_SWIER86_Msk    (0x1U << EXTI_SWIER3_SWIER86_Pos)           /*!< 0x00400000 */
#define EXTI_SWIER3_SWIER86        EXTI_SWIER3_SWIER86_Msk                     /*!< Software Interrupt on line 86 */

/*******************  Bit definition for EXTI_PR1 register  ********************/
#define EXTI_PR1_PR0_Pos           (0U)
#define EXTI_PR1_PR0_Msk           (0x1U << EXTI_PR1_PR0_Pos)                  /*!< 0x00000001 */
#define EXTI_PR1_PR0               EXTI_PR1_PR0_Msk                            /*!< Pending bit for line 0 */
#define EXTI_PR1_PR1_Pos           (1U)
#define EXTI_PR1_PR1_Msk           (0x1U << EXTI_PR1_PR1_Pos)                  /*!< 0x00000002 */
#define EXTI_PR1_PR1               EXTI_PR1_PR1_Msk                            /*!< Pending bit for line 1 */
#define EXTI_PR1_PR2_Pos           (2U)
#define EXTI_PR1_PR2_Msk           (0x1U << EXTI_PR1_PR2_Pos)                  /*!< 0x00000004 */
#define EXTI_PR1_PR2               EXTI_PR1_PR2_Msk                            /*!< Pending bit for line 2 */
#define EXTI_PR1_PR3_Pos           (3U)
#define EXTI_PR1_PR3_Msk           (0x1U << EXTI_PR1_PR3_Pos)                  /*!< 0x00000008 */
#define EXTI_PR1_PR3               EXTI_PR1_PR3_Msk                            /*!< Pending bit for line 3 */
#define EXTI_PR1_PR4_Pos           (4U)
#define EXTI_PR1_PR4_Msk           (0x1U << EXTI_PR1_PR4_Pos)                  /*!< 0x00000010 */
#define EXTI_PR1_PR4               EXTI_PR1_PR4_Msk                            /*!< Pending bit for line 4 */
#define EXTI_PR1_PR5_Pos           (5U)
#define EXTI_PR1_PR5_Msk           (0x1U << EXTI_PR1_PR5_Pos)                  /*!< 0x00000020 */
#define EXTI_PR1_PR5               EXTI_PR1_PR5_Msk                            /*!< Pending bit for line 5 */
#define EXTI_PR1_PR6_Pos           (6U)
#define EXTI_PR1_PR6_Msk           (0x1U << EXTI_PR1_PR6_Pos)                  /*!< 0x00000040 */
#define EXTI_PR1_PR6               EXTI_PR1_PR6_Msk                            /*!< Pending bit for line 6 */
#define EXTI_PR1_PR7_Pos           (7U)
#define EXTI_PR1_PR7_Msk           (0x1U << EXTI_PR1_PR7_Pos)                  /*!< 0x00000080 */
#define EXTI_PR1_PR7               EXTI_PR1_PR7_Msk                            /*!< Pending bit for line 7 */
#define EXTI_PR1_PR8_Pos           (8U)
#define EXTI_PR1_PR8_Msk           (0x1U << EXTI_PR1_PR8_Pos)                  /*!< 0x00000100 */
#define EXTI_PR1_PR8               EXTI_PR1_PR8_Msk                            /*!< Pending bit for line 8 */
#define EXTI_PR1_PR9_Pos           (9U)
#define EXTI_PR1_PR9_Msk           (0x1U << EXTI_PR1_PR9_Pos)                  /*!< 0x00000200 */
#define EXTI_PR1_PR9               EXTI_PR1_PR9_Msk                            /*!< Pending bit for line 9 */
#define EXTI_PR1_PR10_Pos          (10U)
#define EXTI_PR1_PR10_Msk          (0x1U << EXTI_PR1_PR10_Pos)                 /*!< 0x00000400 */
#define EXTI_PR1_PR10              EXTI_PR1_PR10_Msk                           /*!< Pending bit for line 10 */
#define EXTI_PR1_PR11_Pos          (11U)
#define EXTI_PR1_PR11_Msk          (0x1U << EXTI_PR1_PR11_Pos)                 /*!< 0x00000800 */
#define EXTI_PR1_PR11              EXTI_PR1_PR11_Msk                           /*!< Pending bit for line 11 */
#define EXTI_PR1_PR12_Pos          (12U)
#define EXTI_PR1_PR12_Msk          (0x1U << EXTI_PR1_PR12_Pos)                 /*!< 0x00001000 */
#define EXTI_PR1_PR12              EXTI_PR1_PR12_Msk                           /*!< Pending bit for line 12 */
#define EXTI_PR1_PR13_Pos          (13U)
#define EXTI_PR1_PR13_Msk          (0x1U << EXTI_PR1_PR13_Pos)                 /*!< 0x00002000 */
#define EXTI_PR1_PR13              EXTI_PR1_PR13_Msk                           /*!< Pending bit for line 13 */
#define EXTI_PR1_PR14_Pos          (14U)
#define EXTI_PR1_PR14_Msk          (0x1U << EXTI_PR1_PR14_Pos)                 /*!< 0x00004000 */
#define EXTI_PR1_PR14              EXTI_PR1_PR14_Msk                           /*!< Pending bit for line 14 */
#define EXTI_PR1_PR15_Pos          (15U)
#define EXTI_PR1_PR15_Msk          (0x1U << EXTI_PR1_PR15_Pos)                 /*!< 0x00008000 */
#define EXTI_PR1_PR15              EXTI_PR1_PR15_Msk                           /*!< Pending bit for line 15 */
#define EXTI_PR1_PR16_Pos          (16U)
#define EXTI_PR1_PR16_Msk          (0x1U << EXTI_PR1_PR16_Pos)                 /*!< 0x00010000 */
#define EXTI_PR1_PR16              EXTI_PR1_PR16_Msk                           /*!< Pending bit for line 16 */

/*******************  Bit definition for EXTI_PR3 register  ********************/
#define EXTI_PR3_PR65_Pos          (1U)
#define EXTI_PR3_PR65_Msk          (0x1U << EXTI_PR3_PR65_Pos)                 /*!< 0x00000002 */
#define EXTI_PR3_PR65              EXTI_PR3_PR65_Msk                           /*!< Pending bit for line 65 */
#define EXTI_PR3_PR66_Pos          (2U)
#define EXTI_PR3_PR66_Msk          (0x1U << EXTI_PR3_PR66_Pos)                 /*!< 0x00000004 */
#define EXTI_PR3_PR66              EXTI_PR3_PR66_Msk                           /*!< Pending bit for line 66 */
#define EXTI_PR3_PR68_Pos          (4U)
#define EXTI_PR3_PR68_Msk          (0x1U << EXTI_PR3_PR68_Pos)                 /*!< 0x00000010 */
#define EXTI_PR3_PR68              EXTI_PR3_PR68_Msk                           /*!< Pending bit for line 68 */
#define EXTI_PR3_PR73_Pos          (9U)
#define EXTI_PR3_PR73_Msk          (0x1U << EXTI_PR3_PR73_Pos)                 /*!< 0x00000200 */
#define EXTI_PR3_PR73              EXTI_PR3_PR73_Msk                           /*!< Pending bit for line 73 */
#define EXTI_PR3_PR74_Pos          (10U)
#define EXTI_PR3_PR74_Msk          (0x1U << EXTI_PR3_PR74_Pos)                 /*!< 0x00000400 */
#define EXTI_PR3_PR74              EXTI_PR3_PR74_Msk                           /*!< Pending bit for line 74 */

/*****************  Bit definition for EXTI_EXTICR1 register  ***************/
#define EXTI_EXTICR1_EXTI0_Pos        (0U)
#define EXTI_EXTICR1_EXTI0_Msk        (0xFFU << EXTI_EXTICR1_EXTI0_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR1_EXTI0            EXTI_EXTICR1_EXTI0_Msk                   /*!<EXTI 0 configuration */
#define EXTI_EXTICR1_EXTI1_Pos        (8U)
#define EXTI_EXTICR1_EXTI1_Msk        (0xFFU << EXTI_EXTICR1_EXTI1_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR1_EXTI1            EXTI_EXTICR1_EXTI1_Msk                   /*!<EXTI 1 configuration */
#define EXTI_EXTICR1_EXTI2_Pos        (16U)
#define EXTI_EXTICR1_EXTI2_Msk        (0xFFU << EXTI_EXTICR1_EXTI2_Pos)        /*!< 0x00FF0000 */
#define EXTI_EXTICR1_EXTI2            EXTI_EXTICR1_EXTI2_Msk                   /*!<EXTI 2 configuration */
#define EXTI_EXTICR1_EXTI3_Pos        (24U)
#define EXTI_EXTICR1_EXTI3_Msk        (0xFFU << EXTI_EXTICR1_EXTI3_Pos)        /*!< 0xFF000000 */
#define EXTI_EXTICR1_EXTI3            EXTI_EXTICR1_EXTI3_Msk                   /*!<EXTI 3 configuration */
/**
  * @brief   EXTI0 configuration
  */
#define EXTI_EXTICR1_EXTI0_PA         ((uint32_t)0x00000000)                   /*!<PA[0] pin */
#define EXTI_EXTICR1_EXTI0_PB_Pos     (0U)
#define EXTI_EXTICR1_EXTI0_PB_Msk     (0x1U << EXTI_EXTICR1_EXTI0_PB_Pos)      /*!< 0x00000001 */
#define EXTI_EXTICR1_EXTI0_PB         EXTI_EXTICR1_EXTI0_PB_Msk                /*!<PB[0] pin */
#define EXTI_EXTICR1_EXTI0_PC_Pos     (1U)
#define EXTI_EXTICR1_EXTI0_PC_Msk     (0x1U << EXTI_EXTICR1_EXTI0_PC_Pos)      /*!< 0x00000002 */
#define EXTI_EXTICR1_EXTI0_PC         EXTI_EXTICR1_EXTI0_PC_Msk                /*!<PC[0] pin */
#define EXTI_EXTICR1_EXTI0_PD_Pos     (0U)
#define EXTI_EXTICR1_EXTI0_PD_Msk     (0x3U << EXTI_EXTICR1_EXTI0_PD_Pos)      /*!< 0x00000003 */
#define EXTI_EXTICR1_EXTI0_PD         EXTI_EXTICR1_EXTI0_PD_Msk                /*!<PD[0] pin */
#define EXTI_EXTICR1_EXTI0_PE_Pos     (2U)
#define EXTI_EXTICR1_EXTI0_PE_Msk     (0x1U << EXTI_EXTICR1_EXTI0_PE_Pos)      /*!< 0x00000004 */
#define EXTI_EXTICR1_EXTI0_PE         EXTI_EXTICR1_EXTI0_PE_Msk                /*!<PE[0] pin */
#define EXTI_EXTICR1_EXTI0_PF_Pos     (0U)
#define EXTI_EXTICR1_EXTI0_PF_Msk     (0x5U << EXTI_EXTICR1_EXTI0_PF_Pos)      /*!< 0x00000005 */
#define EXTI_EXTICR1_EXTI0_PF         EXTI_EXTICR1_EXTI0_PF_Msk                /*!<PF[0] pin */
#define EXTI_EXTICR1_EXTI0_PG_Pos     (1U)
#define EXTI_EXTICR1_EXTI0_PG_Msk     (0x3U << EXTI_EXTICR1_EXTI0_PG_Pos)      /*!< 0x00000006 */
#define EXTI_EXTICR1_EXTI0_PG         EXTI_EXTICR1_EXTI0_PG_Msk                /*!<PG[0] pin */
#define EXTI_EXTICR1_EXTI0_PH_Pos     (0U)
#define EXTI_EXTICR1_EXTI0_PH_Msk     (0x7U << EXTI_EXTICR1_EXTI0_PH_Pos)      /*!< 0x00000007 */
#define EXTI_EXTICR1_EXTI0_PH         EXTI_EXTICR1_EXTI0_PH_Msk                /*!<PH[0] pin */
#define EXTI_EXTICR1_EXTI0_PI_Pos     (3U)
#define EXTI_EXTICR1_EXTI0_PI_Msk     (0x1U << EXTI_EXTICR1_EXTI0_PI_Pos)      /*!< 0x00000008 */
#define EXTI_EXTICR1_EXTI0_PI         EXTI_EXTICR1_EXTI0_PI_Msk                /*!<PI[0] pin */
#define EXTI_EXTICR1_EXTI0_PJ_Pos     (0U)
#define EXTI_EXTICR1_EXTI0_PJ_Msk     (0x9U << EXTI_EXTICR1_EXTI0_PJ_Pos)      /*!< 0x00000009 */
#define EXTI_EXTICR1_EXTI0_PJ         EXTI_EXTICR1_EXTI0_PJ_Msk                /*!<PJ[0] pin */
#define EXTI_EXTICR1_EXTI0_PK_Pos     (1U)
#define EXTI_EXTICR1_EXTI0_PK_Msk     (0x5U << EXTI_EXTICR1_EXTI0_PK_Pos)      /*!< 0x0000000A */
#define EXTI_EXTICR1_EXTI0_PK         EXTI_EXTICR1_EXTI0_PK_Msk                /*!<PK[0] pin */
#define EXTI_EXTICR1_EXTI0_PZ_Pos     (0U)
#define EXTI_EXTICR1_EXTI0_PZ_Msk     (0x19U << EXTI_EXTICR1_EXTI0_PZ_Pos)     /*!< 0x00000019 */
#define EXTI_EXTICR1_EXTI0_PZ         EXTI_EXTICR1_EXTI0_PZ_Msk                /*!<PZ[0] pin */

/**
  * @brief   EXTI1 configuration
  */
#define EXTI_EXTICR1_EXTI1_PA         ((uint32_t)0x00000000)                   /*!<PA[1] pin */
#define EXTI_EXTICR1_EXTI1_PB_Pos     (8U)
#define EXTI_EXTICR1_EXTI1_PB_Msk     (0x1U << EXTI_EXTICR1_EXTI1_PB_Pos)      /*!< 0x00000100 */
#define EXTI_EXTICR1_EXTI1_PB         EXTI_EXTICR1_EXTI1_PB_Msk                /*!<PB[1] pin */
#define EXTI_EXTICR1_EXTI1_PC_Pos     (9U)
#define EXTI_EXTICR1_EXTI1_PC_Msk     (0x1U << EXTI_EXTICR1_EXTI1_PC_Pos)      /*!< 0x00000200 */
#define EXTI_EXTICR1_EXTI1_PC         EXTI_EXTICR1_EXTI1_PC_Msk                /*!<PC[1] pin */
#define EXTI_EXTICR1_EXTI1_PD_Pos     (8U)
#define EXTI_EXTICR1_EXTI1_PD_Msk     (0x3U << EXTI_EXTICR1_EXTI1_PD_Pos)      /*!< 0x00000300 */
#define EXTI_EXTICR1_EXTI1_PD         EXTI_EXTICR1_EXTI1_PD_Msk                /*!<PD[1] pin */
#define EXTI_EXTICR1_EXTI1_PE_Pos     (10U)
#define EXTI_EXTICR1_EXTI1_PE_Msk     (0x1U << EXTI_EXTICR1_EXTI1_PE_Pos)      /*!< 0x00000400 */
#define EXTI_EXTICR1_EXTI1_PE         EXTI_EXTICR1_EXTI1_PE_Msk                /*!<PE[1] pin */
#define EXTI_EXTICR1_EXTI1_PF_Pos     (8U)
#define EXTI_EXTICR1_EXTI1_PF_Msk     (0x5U << EXTI_EXTICR1_EXTI1_PF_Pos)      /*!< 0x00000500 */
#define EXTI_EXTICR1_EXTI1_PF         EXTI_EXTICR1_EXTI1_PF_Msk                /*!<PF[1] pin */
#define EXTI_EXTICR1_EXTI1_PG_Pos     (9U)
#define EXTI_EXTICR1_EXTI1_PG_Msk     (0x3U << EXTI_EXTICR1_EXTI1_PG_Pos)      /*!< 0x00000600 */
#define EXTI_EXTICR1_EXTI1_PG         EXTI_EXTICR1_EXTI1_PG_Msk                /*!<PG[1] pin */
#define EXTI_EXTICR1_EXTI1_PH_Pos     (8U)
#define EXTI_EXTICR1_EXTI1_PH_Msk     (0x7U << EXTI_EXTICR1_EXTI1_PH_Pos)      /*!< 0x00000700 */
#define EXTI_EXTICR1_EXTI1_PH         EXTI_EXTICR1_EXTI1_PH_Msk                /*!<PH[1] pin */
#define EXTI_EXTICR1_EXTI1_PI_Pos     (11U)
#define EXTI_EXTICR1_EXTI1_PI_Msk     (0x1U << EXTI_EXTICR1_EXTI1_PI_Pos)      /*!< 0x00000800 */
#define EXTI_EXTICR1_EXTI1_PI         EXTI_EXTICR1_EXTI1_PI_Msk                /*!<PI[1] pin */
#define EXTI_EXTICR1_EXTI1_PJ_Pos     (8U)
#define EXTI_EXTICR1_EXTI1_PJ_Msk     (0x9U << EXTI_EXTICR1_EXTI1_PJ_Pos)      /*!< 0x00000900 */
#define EXTI_EXTICR1_EXTI1_PJ         EXTI_EXTICR1_EXTI1_PJ_Msk                /*!<PJ[1] pin */
#define EXTI_EXTICR1_EXTI1_PK_Pos     (9U)
#define EXTI_EXTICR1_EXTI1_PK_Msk     (0x5U << EXTI_EXTICR1_EXTI1_PK_Pos)      /*!< 0x00000A00 */
#define EXTI_EXTICR1_EXTI1_PK         EXTI_EXTICR1_EXTI1_PK_Msk                /*!<PK[1] pin */
#define EXTI_EXTICR1_EXTI1_PZ_Pos     (8U)
#define EXTI_EXTICR1_EXTI1_PZ_Msk     (0x19U << EXTI_EXTICR1_EXTI1_PZ_Pos)     /*!< 0x00001900 */
#define EXTI_EXTICR1_EXTI1_PZ         EXTI_EXTICR1_EXTI1_PZ_Msk                /*!<PZ[1] pin */

/**
  * @brief   EXTI2 configuration
  */
#define EXTI_EXTICR1_EXTI2_PA         ((uint32_t)0x00000000)                   /*!<PA[2] pin */
#define EXTI_EXTICR1_EXTI2_PB_Pos     (16U)
#define EXTI_EXTICR1_EXTI2_PB_Msk     (0x1U << EXTI_EXTICR1_EXTI2_PB_Pos)      /*!< 0x00010000 */
#define EXTI_EXTICR1_EXTI2_PB         EXTI_EXTICR1_EXTI2_PB_Msk                /*!<PB[2] pin */
#define EXTI_EXTICR1_EXTI2_PC_Pos     (17U)
#define EXTI_EXTICR1_EXTI2_PC_Msk     (0x1U << EXTI_EXTICR1_EXTI2_PC_Pos)      /*!< 0x00020000 */
#define EXTI_EXTICR1_EXTI2_PC         EXTI_EXTICR1_EXTI2_PC_Msk                /*!<PC[2] pin */
#define EXTI_EXTICR1_EXTI2_PD_Pos     (16U)
#define EXTI_EXTICR1_EXTI2_PD_Msk     (0x3U << EXTI_EXTICR1_EXTI2_PD_Pos)      /*!< 0x00030000 */
#define EXTI_EXTICR1_EXTI2_PD         EXTI_EXTICR1_EXTI2_PD_Msk                /*!<PD[2] pin */
#define EXTI_EXTICR1_EXTI2_PE_Pos     (18U)
#define EXTI_EXTICR1_EXTI2_PE_Msk     (0x1U << EXTI_EXTICR1_EXTI2_PE_Pos)      /*!< 0x00040000 */
#define EXTI_EXTICR1_EXTI2_PE         EXTI_EXTICR1_EXTI2_PE_Msk                /*!<PE[2] pin */
#define EXTI_EXTICR1_EXTI2_PF_Pos     (16U)
#define EXTI_EXTICR1_EXTI2_PF_Msk     (0x5U << EXTI_EXTICR1_EXTI2_PF_Pos)      /*!< 0x00050000 */
#define EXTI_EXTICR1_EXTI2_PF         EXTI_EXTICR1_EXTI2_PF_Msk                /*!<PF[2] pin */
#define EXTI_EXTICR1_EXTI2_PG_Pos     (17U)
#define EXTI_EXTICR1_EXTI2_PG_Msk     (0x3U << EXTI_EXTICR1_EXTI2_PG_Pos)      /*!< 0x00060000 */
#define EXTI_EXTICR1_EXTI2_PG         EXTI_EXTICR1_EXTI2_PG_Msk                /*!<PG[2] pin */
#define EXTI_EXTICR1_EXTI2_PH_Pos     (16U)
#define EXTI_EXTICR1_EXTI2_PH_Msk     (0x7U << EXTI_EXTICR1_EXTI2_PH_Pos)      /*!< 0x00070000 */
#define EXTI_EXTICR1_EXTI2_PH         EXTI_EXTICR1_EXTI2_PH_Msk                /*!<PH[2] pin */
#define EXTI_EXTICR1_EXTI2_PI_Pos     (19U)
#define EXTI_EXTICR1_EXTI2_PI_Msk     (0x1U << EXTI_EXTICR1_EXTI2_PI_Pos)      /*!< 0x00080000 */
#define EXTI_EXTICR1_EXTI2_PI         EXTI_EXTICR1_EXTI2_PI_Msk                /*!<PI[2] pin */
#define EXTI_EXTICR1_EXTI2_PJ_Pos     (16U)
#define EXTI_EXTICR1_EXTI2_PJ_Msk     (0x9U << EXTI_EXTICR1_EXTI2_PJ_Pos)      /*!< 0x00090000 */
#define EXTI_EXTICR1_EXTI2_PJ         EXTI_EXTICR1_EXTI2_PJ_Msk                /*!<PJ[2] pin */
#define EXTI_EXTICR1_EXTI2_PK_Pos     (17U)
#define EXTI_EXTICR1_EXTI2_PK_Msk     (0x5U << EXTI_EXTICR1_EXTI2_PK_Pos)      /*!< 0x000A0000 */
#define EXTI_EXTICR1_EXTI2_PK         EXTI_EXTICR1_EXTI2_PK_Msk                /*!<PK[2] pin */
#define EXTI_EXTICR1_EXTI2_PZ_Pos     (16U)
#define EXTI_EXTICR1_EXTI2_PZ_Msk     (0x19U << EXTI_EXTICR1_EXTI2_PZ_Pos)     /*!< 0x00190000 */
#define EXTI_EXTICR1_EXTI2_PZ         EXTI_EXTICR1_EXTI2_PZ_Msk                /*!<PZ[2] pin */

/**
  * @brief   EXTI3 configuration
  */
#define EXTI_EXTICR1_EXTI3_PA         ((uint32_t)0x00000000)                   /*!<PA[3] pin */
#define EXTI_EXTICR1_EXTI3_PB_Pos     (24U)
#define EXTI_EXTICR1_EXTI3_PB_Msk     (0x1U << EXTI_EXTICR1_EXTI3_PB_Pos)      /*!< 0x01000000 */
#define EXTI_EXTICR1_EXTI3_PB         EXTI_EXTICR1_EXTI3_PB_Msk                /*!<PB[3] pin */
#define EXTI_EXTICR1_EXTI3_PC_Pos     (25U)
#define EXTI_EXTICR1_EXTI3_PC_Msk     (0x1U << EXTI_EXTICR1_EXTI3_PC_Pos)      /*!< 0x02000000 */
#define EXTI_EXTICR1_EXTI3_PC         EXTI_EXTICR1_EXTI3_PC_Msk                /*!<PC[3] pin */
#define EXTI_EXTICR1_EXTI3_PD_Pos     (24U)
#define EXTI_EXTICR1_EXTI3_PD_Msk     (0x3U << EXTI_EXTICR1_EXTI3_PD_Pos)      /*!< 0x03000000 */
#define EXTI_EXTICR1_EXTI3_PD         EXTI_EXTICR1_EXTI3_PD_Msk                /*!<PD[3] pin */
#define EXTI_EXTICR1_EXTI3_PE_Pos     (26U)
#define EXTI_EXTICR1_EXTI3_PE_Msk     (0x1U << EXTI_EXTICR1_EXTI3_PE_Pos)      /*!< 0x04000000 */
#define EXTI_EXTICR1_EXTI3_PE         EXTI_EXTICR1_EXTI3_PE_Msk                /*!<PE[3] pin */
#define EXTI_EXTICR1_EXTI3_PF_Pos     (24U)
#define EXTI_EXTICR1_EXTI3_PF_Msk     (0x5U << EXTI_EXTICR1_EXTI3_PF_Pos)      /*!< 0x05000000 */
#define EXTI_EXTICR1_EXTI3_PF         EXTI_EXTICR1_EXTI3_PF_Msk                /*!<PF[3] pin */
#define EXTI_EXTICR1_EXTI3_PG_Pos     (25U)
#define EXTI_EXTICR1_EXTI3_PG_Msk     (0x3U << EXTI_EXTICR1_EXTI3_PG_Pos)      /*!< 0x06000000 */
#define EXTI_EXTICR1_EXTI3_PG         EXTI_EXTICR1_EXTI3_PG_Msk                /*!<PG[3] pin */
#define EXTI_EXTICR1_EXTI3_PH_Pos     (24U)
#define EXTI_EXTICR1_EXTI3_PH_Msk     (0x7U << EXTI_EXTICR1_EXTI3_PH_Pos)      /*!< 0x07000000 */
#define EXTI_EXTICR1_EXTI3_PH         EXTI_EXTICR1_EXTI3_PH_Msk                /*!<PH[3] pin */
#define EXTI_EXTICR1_EXTI3_PI_Pos     (27U)
#define EXTI_EXTICR1_EXTI3_PI_Msk     (0x1U << EXTI_EXTICR1_EXTI3_PI_Pos)      /*!< 0x08000000 */
#define EXTI_EXTICR1_EXTI3_PI         EXTI_EXTICR1_EXTI3_PI_Msk                /*!<PI[3] pin */
#define EXTI_EXTICR1_EXTI3_PJ_Pos     (24U)
#define EXTI_EXTICR1_EXTI3_PJ_Msk     (0x9U << EXTI_EXTICR1_EXTI3_PJ_Pos)      /*!< 0x09000000 */
#define EXTI_EXTICR1_EXTI3_PJ         EXTI_EXTICR1_EXTI3_PJ_Msk                /*!<PJ[3] pin */
#define EXTI_EXTICR1_EXTI3_PK_Pos     (25U)
#define EXTI_EXTICR1_EXTI3_PK_Msk     (0x5U << EXTI_EXTICR1_EXTI3_PK_Pos)      /*!< 0x0A000000 */
#define EXTI_EXTICR1_EXTI3_PK         EXTI_EXTICR1_EXTI3_PK_Msk                /*!<PK[3] pin */
#define EXTI_EXTICR1_EXTI3_PZ_Pos     (24U)
#define EXTI_EXTICR1_EXTI3_PZ_Msk     (0x19U << EXTI_EXTICR1_EXTI3_PZ_Pos)     /*!< 0x19000000 */
#define EXTI_EXTICR1_EXTI3_PZ         EXTI_EXTICR1_EXTI3_PZ_Msk                /*!<PZ[3] pin */

/*****************  Bit definition for EXTI_EXTICR2 register  ***************/
#define EXTI_EXTICR2_EXTI4_Pos        (0U)
#define EXTI_EXTICR2_EXTI4_Msk        (0xFFU << EXTI_EXTICR2_EXTI4_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR2_EXTI4            EXTI_EXTICR2_EXTI4_Msk                   /*!<EXTI 4 configuration */
#define EXTI_EXTICR2_EXTI5_Pos        (8U)
#define EXTI_EXTICR2_EXTI5_Msk        (0xFFU << EXTI_EXTICR2_EXTI5_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR2_EXTI5            EXTI_EXTICR2_EXTI5_Msk                   /*!<EXTI 5 configuration */
#define EXTI_EXTICR2_EXTI6_Pos        (16U)
#define EXTI_EXTICR2_EXTI6_Msk        (0xFFU << EXTI_EXTICR2_EXTI6_Pos)        /*!< 0x00FF0000 */
#define EXTI_EXTICR2_EXTI6            EXTI_EXTICR2_EXTI6_Msk                   /*!<EXTI 6 configuration */
#define EXTI_EXTICR2_EXTI7_Pos        (24U)
#define EXTI_EXTICR2_EXTI7_Msk        (0xFFU << EXTI_EXTICR2_EXTI7_Pos)        /*!< 0xFF000000 */
#define EXTI_EXTICR2_EXTI7            EXTI_EXTICR2_EXTI7_Msk                   /*!<EXTI 7 configuration */

/**
  * @brief   EXTI4 configuration
  */
#define EXTI_EXTICR2_EXTI4_PA         ((uint32_t)0x00000000)                   /*!<PA[4] pin */
#define EXTI_EXTICR2_EXTI4_PB_Pos     (0U)
#define EXTI_EXTICR2_EXTI4_PB_Msk     (0x1U << EXTI_EXTICR2_EXTI4_PB_Pos)      /*!< 0x00000001 */
#define EXTI_EXTICR2_EXTI4_PB         EXTI_EXTICR2_EXTI4_PB_Msk                /*!<PB[4] pin */
#define EXTI_EXTICR2_EXTI4_PC_Pos     (1U)
#define EXTI_EXTICR2_EXTI4_PC_Msk     (0x1U << EXTI_EXTICR2_EXTI4_PC_Pos)      /*!< 0x00000002 */
#define EXTI_EXTICR2_EXTI4_PC         EXTI_EXTICR2_EXTI4_PC_Msk                /*!<PC[4] pin */
#define EXTI_EXTICR2_EXTI4_PD_Pos     (0U)
#define EXTI_EXTICR2_EXTI4_PD_Msk     (0x3U << EXTI_EXTICR2_EXTI4_PD_Pos)      /*!< 0x00000003 */
#define EXTI_EXTICR2_EXTI4_PD         EXTI_EXTICR2_EXTI4_PD_Msk                /*!<PD[4] pin */
#define EXTI_EXTICR2_EXTI4_PE_Pos     (2U)
#define EXTI_EXTICR2_EXTI4_PE_Msk     (0x1U << EXTI_EXTICR2_EXTI4_PE_Pos)      /*!< 0x00000004 */
#define EXTI_EXTICR2_EXTI4_PE         EXTI_EXTICR2_EXTI4_PE_Msk                /*!<PE[4] pin */
#define EXTI_EXTICR2_EXTI4_PF_Pos     (0U)
#define EXTI_EXTICR2_EXTI4_PF_Msk     (0x5U << EXTI_EXTICR2_EXTI4_PF_Pos)      /*!< 0x00000005 */
#define EXTI_EXTICR2_EXTI4_PF         EXTI_EXTICR2_EXTI4_PF_Msk                /*!<PF[4] pin */
#define EXTI_EXTICR2_EXTI4_PG_Pos     (1U)
#define EXTI_EXTICR2_EXTI4_PG_Msk     (0x3U << EXTI_EXTICR2_EXTI4_PG_Pos)      /*!< 0x00000006 */
#define EXTI_EXTICR2_EXTI4_PG         EXTI_EXTICR2_EXTI4_PG_Msk                /*!<PG[4] pin */
#define EXTI_EXTICR2_EXTI4_PH_Pos     (0U)
#define EXTI_EXTICR2_EXTI4_PH_Msk     (0x7U << EXTI_EXTICR2_EXTI4_PH_Pos)      /*!< 0x00000007 */
#define EXTI_EXTICR2_EXTI4_PH         EXTI_EXTICR2_EXTI4_PH_Msk                /*!<PH[4] pin */
#define EXTI_EXTICR2_EXTI4_PI_Pos     (3U)
#define EXTI_EXTICR2_EXTI4_PI_Msk     (0x1U << EXTI_EXTICR2_EXTI4_PI_Pos)      /*!< 0x00000008 */
#define EXTI_EXTICR2_EXTI4_PI         EXTI_EXTICR2_EXTI4_PI_Msk                /*!<PI[4] pin */
#define EXTI_EXTICR2_EXTI4_PJ_Pos     (0U)
#define EXTI_EXTICR2_EXTI4_PJ_Msk     (0x9U << EXTI_EXTICR2_EXTI4_PJ_Pos)      /*!< 0x00000009 */
#define EXTI_EXTICR2_EXTI4_PJ         EXTI_EXTICR2_EXTI4_PJ_Msk                /*!<PJ[4] pin */
#define EXTI_EXTICR2_EXTI4_PK_Pos     (1U)
#define EXTI_EXTICR2_EXTI4_PK_Msk     (0x5U << EXTI_EXTICR2_EXTI4_PK_Pos)      /*!< 0x0000000A */
#define EXTI_EXTICR2_EXTI4_PK         EXTI_EXTICR2_EXTI4_PK_Msk                /*!<PK[4] pin */
#define EXTI_EXTICR2_EXTI4_PZ_Pos     (0U)
#define EXTI_EXTICR2_EXTI4_PZ_Msk     (0x19U << EXTI_EXTICR2_EXTI4_PZ_Pos)     /*!< 0x00000019 */
#define EXTI_EXTICR2_EXTI4_PZ         EXTI_EXTICR2_EXTI4_PZ_Msk                /*!<PZ[4] pin */

/**
  * @brief   EXTI5 configuration
  */
#define EXTI_EXTICR2_EXTI5_PA         ((uint32_t)0x00000000)                   /*!<PA[5] pin */
#define EXTI_EXTICR2_EXTI5_PB_Pos     (8U)
#define EXTI_EXTICR2_EXTI5_PB_Msk     (0x1U << EXTI_EXTICR2_EXTI5_PB_Pos)      /*!< 0x00000100 */
#define EXTI_EXTICR2_EXTI5_PB         EXTI_EXTICR2_EXTI5_PB_Msk                /*!<PB[5] pin */
#define EXTI_EXTICR2_EXTI5_PC_Pos     (9U)
#define EXTI_EXTICR2_EXTI5_PC_Msk     (0x1U << EXTI_EXTICR2_EXTI5_PC_Pos)      /*!< 0x00000200 */
#define EXTI_EXTICR2_EXTI5_PC         EXTI_EXTICR2_EXTI5_PC_Msk                /*!<PC[5] pin */
#define EXTI_EXTICR2_EXTI5_PD_Pos     (8U)
#define EXTI_EXTICR2_EXTI5_PD_Msk     (0x3U << EXTI_EXTICR2_EXTI5_PD_Pos)      /*!< 0x00000300 */
#define EXTI_EXTICR2_EXTI5_PD         EXTI_EXTICR2_EXTI5_PD_Msk                /*!<PD[5] pin */
#define EXTI_EXTICR2_EXTI5_PE_Pos     (10U)
#define EXTI_EXTICR2_EXTI5_PE_Msk     (0x1U << EXTI_EXTICR2_EXTI5_PE_Pos)      /*!< 0x00000400 */
#define EXTI_EXTICR2_EXTI5_PE         EXTI_EXTICR2_EXTI5_PE_Msk                /*!<PE[5] pin */
#define EXTI_EXTICR2_EXTI5_PF_Pos     (8U)
#define EXTI_EXTICR2_EXTI5_PF_Msk     (0x5U << EXTI_EXTICR2_EXTI5_PF_Pos)      /*!< 0x00000500 */
#define EXTI_EXTICR2_EXTI5_PF         EXTI_EXTICR2_EXTI5_PF_Msk                /*!<PF[5] pin */
#define EXTI_EXTICR2_EXTI5_PG_Pos     (9U)
#define EXTI_EXTICR2_EXTI5_PG_Msk     (0x3U << EXTI_EXTICR2_EXTI5_PG_Pos)      /*!< 0x00000600 */
#define EXTI_EXTICR2_EXTI5_PG         EXTI_EXTICR2_EXTI5_PG_Msk                /*!<PG[5] pin */
#define EXTI_EXTICR2_EXTI5_PH_Pos     (8U)
#define EXTI_EXTICR2_EXTI5_PH_Msk     (0x7U << EXTI_EXTICR2_EXTI5_PH_Pos)      /*!< 0x00000700 */
#define EXTI_EXTICR2_EXTI5_PH         EXTI_EXTICR2_EXTI5_PH_Msk                /*!<PH[5] pin */
#define EXTI_EXTICR2_EXTI5_PI_Pos     (11U)
#define EXTI_EXTICR2_EXTI5_PI_Msk     (0x1U << EXTI_EXTICR2_EXTI5_PI_Pos)      /*!< 0x00000800 */
#define EXTI_EXTICR2_EXTI5_PI         EXTI_EXTICR2_EXTI5_PI_Msk                /*!<PI[5] pin */
#define EXTI_EXTICR2_EXTI5_PJ_Pos     (8U)
#define EXTI_EXTICR2_EXTI5_PJ_Msk     (0x9U << EXTI_EXTICR2_EXTI5_PJ_Pos)      /*!< 0x00000900 */
#define EXTI_EXTICR2_EXTI5_PJ         EXTI_EXTICR2_EXTI5_PJ_Msk                /*!<PJ[5] pin */
#define EXTI_EXTICR2_EXTI5_PK_Pos     (9U)
#define EXTI_EXTICR2_EXTI5_PK_Msk     (0x5U << EXTI_EXTICR2_EXTI5_PK_Pos)      /*!< 0x00000A00 */
#define EXTI_EXTICR2_EXTI5_PK         EXTI_EXTICR2_EXTI5_PK_Msk                /*!<PK[5] pin */
#define EXTI_EXTICR2_EXTI5_PZ_Pos     (8U)
#define EXTI_EXTICR2_EXTI5_PZ_Msk     (0x19U << EXTI_EXTICR2_EXTI5_PZ_Pos)     /*!< 0x00001900 */
#define EXTI_EXTICR2_EXTI5_PZ         EXTI_EXTICR2_EXTI5_PZ_Msk                /*!<PZ[5] pin */

/**
  * @brief   EXTI6 configuration
  */
#define EXTI_EXTICR2_EXTI6_PA         ((uint32_t)0x00000000)                   /*!<PA[6] pin */
#define EXTI_EXTICR2_EXTI6_PB_Pos     (16U)
#define EXTI_EXTICR2_EXTI6_PB_Msk     (0x1U << EXTI_EXTICR2_EXTI6_PB_Pos)      /*!< 0x00010000 */
#define EXTI_EXTICR2_EXTI6_PB         EXTI_EXTICR2_EXTI6_PB_Msk                /*!<PB[6] pin */
#define EXTI_EXTICR2_EXTI6_PC_Pos     (17U)
#define EXTI_EXTICR2_EXTI6_PC_Msk     (0x1U << EXTI_EXTICR2_EXTI6_PC_Pos)      /*!< 0x00020000 */
#define EXTI_EXTICR2_EXTI6_PC         EXTI_EXTICR2_EXTI6_PC_Msk                /*!<PC[6] pin */
#define EXTI_EXTICR2_EXTI6_PD_Pos     (16U)
#define EXTI_EXTICR2_EXTI6_PD_Msk     (0x3U << EXTI_EXTICR2_EXTI6_PD_Pos)      /*!< 0x00030000 */
#define EXTI_EXTICR2_EXTI6_PD         EXTI_EXTICR2_EXTI6_PD_Msk                /*!<PD[6] pin */
#define EXTI_EXTICR2_EXTI6_PE_Pos     (18U)
#define EXTI_EXTICR2_EXTI6_PE_Msk     (0x1U << EXTI_EXTICR2_EXTI6_PE_Pos)      /*!< 0x00040000 */
#define EXTI_EXTICR2_EXTI6_PE         EXTI_EXTICR2_EXTI6_PE_Msk                /*!<PE[6] pin */
#define EXTI_EXTICR2_EXTI6_PF_Pos     (16U)
#define EXTI_EXTICR2_EXTI6_PF_Msk     (0x5U << EXTI_EXTICR2_EXTI6_PF_Pos)      /*!< 0x00050000 */
#define EXTI_EXTICR2_EXTI6_PF         EXTI_EXTICR2_EXTI6_PF_Msk                /*!<PF[6] pin */
#define EXTI_EXTICR2_EXTI6_PG_Pos     (17U)
#define EXTI_EXTICR2_EXTI6_PG_Msk     (0x3U << EXTI_EXTICR2_EXTI6_PG_Pos)      /*!< 0x00060000 */
#define EXTI_EXTICR2_EXTI6_PG         EXTI_EXTICR2_EXTI6_PG_Msk                /*!<PG[6] pin */
#define EXTI_EXTICR2_EXTI6_PH_Pos     (16U)
#define EXTI_EXTICR2_EXTI6_PH_Msk     (0x7U << EXTI_EXTICR2_EXTI6_PH_Pos)      /*!< 0x00070000 */
#define EXTI_EXTICR2_EXTI6_PH         EXTI_EXTICR2_EXTI6_PH_Msk                /*!<PH[6] pin */
#define EXTI_EXTICR2_EXTI6_PI_Pos     (19U)
#define EXTI_EXTICR2_EXTI6_PI_Msk     (0x1U << EXTI_EXTICR2_EXTI6_PI_Pos)      /*!< 0x00080000 */
#define EXTI_EXTICR2_EXTI6_PI         EXTI_EXTICR2_EXTI6_PI_Msk                /*!<PI[6] pin */
#define EXTI_EXTICR2_EXTI6_PJ_Pos     (16U)
#define EXTI_EXTICR2_EXTI6_PJ_Msk     (0x9U << EXTI_EXTICR2_EXTI6_PJ_Pos)      /*!< 0x00090000 */
#define EXTI_EXTICR2_EXTI6_PJ         EXTI_EXTICR2_EXTI6_PJ_Msk                /*!<PJ[6] pin */
#define EXTI_EXTICR2_EXTI6_PK_Pos     (17U)
#define EXTI_EXTICR2_EXTI6_PK_Msk     (0x5U << EXTI_EXTICR2_EXTI6_PK_Pos)      /*!< 0x000A0000 */
#define EXTI_EXTICR2_EXTI6_PK         EXTI_EXTICR2_EXTI6_PK_Msk                /*!<PK[6] pin */
#define EXTI_EXTICR2_EXTI6_PZ_Pos     (16U)
#define EXTI_EXTICR2_EXTI6_PZ_Msk     (0x19U << EXTI_EXTICR2_EXTI6_PZ_Pos)     /*!< 0x00190000 */
#define EXTI_EXTICR2_EXTI6_PZ         EXTI_EXTICR2_EXTI6_PZ_Msk                /*!<PZ[6] pin */

/**
  * @brief   EXTI7 configuration
  */
#define EXTI_EXTICR2_EXTI7_PA         ((uint32_t)0x00000000)                   /*!<PA[7] pin */
#define EXTI_EXTICR2_EXTI7_PB_Pos     (24U)
#define EXTI_EXTICR2_EXTI7_PB_Msk     (0x1U << EXTI_EXTICR2_EXTI7_PB_Pos)      /*!< 0x01000000 */
#define EXTI_EXTICR2_EXTI7_PB         EXTI_EXTICR2_EXTI7_PB_Msk                /*!<PB[7] pin */
#define EXTI_EXTICR2_EXTI7_PC_Pos     (25U)
#define EXTI_EXTICR2_EXTI7_PC_Msk     (0x1U << EXTI_EXTICR2_EXTI7_PC_Pos)      /*!< 0x02000000 */
#define EXTI_EXTICR2_EXTI7_PC         EXTI_EXTICR2_EXTI7_PC_Msk                /*!<PC[7] pin */
#define EXTI_EXTICR2_EXTI7_PD_Pos     (24U)
#define EXTI_EXTICR2_EXTI7_PD_Msk     (0x3U << EXTI_EXTICR2_EXTI7_PD_Pos)      /*!< 0x03000000 */
#define EXTI_EXTICR2_EXTI7_PD         EXTI_EXTICR2_EXTI7_PD_Msk                /*!<PD[7] pin */
#define EXTI_EXTICR2_EXTI7_PE_Pos     (26U)
#define EXTI_EXTICR2_EXTI7_PE_Msk     (0x1U << EXTI_EXTICR2_EXTI7_PE_Pos)      /*!< 0x04000000 */
#define EXTI_EXTICR2_EXTI7_PE         EXTI_EXTICR2_EXTI7_PE_Msk                /*!<PE[7] pin */
#define EXTI_EXTICR2_EXTI7_PF_Pos     (24U)
#define EXTI_EXTICR2_EXTI7_PF_Msk     (0x5U << EXTI_EXTICR2_EXTI7_PF_Pos)      /*!< 0x05000000 */
#define EXTI_EXTICR2_EXTI7_PF         EXTI_EXTICR2_EXTI7_PF_Msk                /*!<PF[7] pin */
#define EXTI_EXTICR2_EXTI7_PG_Pos     (25U)
#define EXTI_EXTICR2_EXTI7_PG_Msk     (0x3U << EXTI_EXTICR2_EXTI7_PG_Pos)      /*!< 0x06000000 */
#define EXTI_EXTICR2_EXTI7_PG         EXTI_EXTICR2_EXTI7_PG_Msk                /*!<PG[7] pin */
#define EXTI_EXTICR2_EXTI7_PH_Pos     (24U)
#define EXTI_EXTICR2_EXTI7_PH_Msk     (0x7U << EXTI_EXTICR2_EXTI7_PH_Pos)      /*!< 0x07000000 */
#define EXTI_EXTICR2_EXTI7_PH         EXTI_EXTICR2_EXTI7_PH_Msk                /*!<PH[7] pin */
#define EXTI_EXTICR2_EXTI7_PI_Pos     (27U)
#define EXTI_EXTICR2_EXTI7_PI_Msk     (0x1U << EXTI_EXTICR2_EXTI7_PI_Pos)      /*!< 0x08000000 */
#define EXTI_EXTICR2_EXTI7_PI         EXTI_EXTICR2_EXTI7_PI_Msk                /*!<PI[7] pin */
#define EXTI_EXTICR2_EXTI7_PJ_Pos     (24U)
#define EXTI_EXTICR2_EXTI7_PJ_Msk     (0x9U << EXTI_EXTICR2_EXTI7_PJ_Pos)      /*!< 0x09000000 */
#define EXTI_EXTICR2_EXTI7_PJ         EXTI_EXTICR2_EXTI7_PJ_Msk                /*!<PJ[7] pin */
#define EXTI_EXTICR2_EXTI7_PK_Pos     (25U)
#define EXTI_EXTICR2_EXTI7_PK_Msk     (0x5U << EXTI_EXTICR2_EXTI7_PK_Pos)      /*!< 0x0A000000 */
#define EXTI_EXTICR2_EXTI7_PK         EXTI_EXTICR2_EXTI7_PK_Msk                /*!<PK[7] pin */
#define EXTI_EXTICR2_EXTI7_PZ_Pos     (24U)
#define EXTI_EXTICR2_EXTI7_PZ_Msk     (0x19U << EXTI_EXTICR2_EXTI7_PZ_Pos)     /*!< 0x19000000 */
#define EXTI_EXTICR2_EXTI7_PZ         EXTI_EXTICR2_EXTI7_PZ_Msk                /*!<PZ[7] pin */

/*****************  Bit definition for EXTI_EXTICR3 register  ***************/
#define EXTI_EXTICR3_EXTI8_Pos        (0U)
#define EXTI_EXTICR3_EXTI8_Msk        (0xFFU << EXTI_EXTICR3_EXTI8_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR3_EXTI8            EXTI_EXTICR3_EXTI8_Msk                   /*!<EXTI 8 configuration */
#define EXTI_EXTICR3_EXTI9_Pos        (8U)
#define EXTI_EXTICR3_EXTI9_Msk        (0xFFU << EXTI_EXTICR3_EXTI9_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR3_EXTI9            EXTI_EXTICR3_EXTI9_Msk                   /*!<EXTI 9 configuration */
#define EXTI_EXTICR3_EXTI10_Pos       (16U)
#define EXTI_EXTICR3_EXTI10_Msk       (0xFFU << EXTI_EXTICR3_EXTI10_Pos)       /*!< 0x00FF0000 */
#define EXTI_EXTICR3_EXTI10           EXTI_EXTICR3_EXTI10_Msk                  /*!<EXTI 10 configuration */
#define EXTI_EXTICR3_EXTI11_Pos       (24U)
#define EXTI_EXTICR3_EXTI11_Msk       (0xFFU << EXTI_EXTICR3_EXTI11_Pos)       /*!< 0xFF000000 */
#define EXTI_EXTICR3_EXTI11           EXTI_EXTICR3_EXTI11_Msk                  /*!<EXTI 11 configuration */

/**
  * @brief   EXTI8 configuration
  */
#define EXTI_EXTICR3_EXTI8_PA         ((uint32_t)0x00000000)                   /*!<PA[8] pin */
#define EXTI_EXTICR3_EXTI8_PB_Pos     (0U)
#define EXTI_EXTICR3_EXTI8_PB_Msk     (0x1U << EXTI_EXTICR3_EXTI8_PB_Pos)      /*!< 0x00000001 */
#define EXTI_EXTICR3_EXTI8_PB         EXTI_EXTICR3_EXTI8_PB_Msk                /*!<PB[8] pin */
#define EXTI_EXTICR3_EXTI8_PC_Pos     (1U)
#define EXTI_EXTICR3_EXTI8_PC_Msk     (0x1U << EXTI_EXTICR3_EXTI8_PC_Pos)      /*!< 0x00000002 */
#define EXTI_EXTICR3_EXTI8_PC         EXTI_EXTICR3_EXTI8_PC_Msk                /*!<PC[8] pin */
#define EXTI_EXTICR3_EXTI8_PD_Pos     (0U)
#define EXTI_EXTICR3_EXTI8_PD_Msk     (0x3U << EXTI_EXTICR3_EXTI8_PD_Pos)      /*!< 0x00000003 */
#define EXTI_EXTICR3_EXTI8_PD         EXTI_EXTICR3_EXTI8_PD_Msk                /*!<PD[8] pin */
#define EXTI_EXTICR3_EXTI8_PE_Pos     (2U)
#define EXTI_EXTICR3_EXTI8_PE_Msk     (0x1U << EXTI_EXTICR3_EXTI8_PE_Pos)      /*!< 0x00000004 */
#define EXTI_EXTICR3_EXTI8_PE         EXTI_EXTICR3_EXTI8_PE_Msk                /*!<PE[8] pin */
#define EXTI_EXTICR3_EXTI8_PF_Pos     (0U)
#define EXTI_EXTICR3_EXTI8_PF_Msk     (0x5U << EXTI_EXTICR3_EXTI8_PF_Pos)      /*!< 0x00000005 */
#define EXTI_EXTICR3_EXTI8_PF         EXTI_EXTICR3_EXTI8_PF_Msk                /*!<PF[8] pin */
#define EXTI_EXTICR3_EXTI8_PG_Pos     (1U)
#define EXTI_EXTICR3_EXTI8_PG_Msk     (0x3U << EXTI_EXTICR3_EXTI8_PG_Pos)      /*!< 0x00000006 */
#define EXTI_EXTICR3_EXTI8_PG         EXTI_EXTICR3_EXTI8_PG_Msk                /*!<PG[8] pin */
#define EXTI_EXTICR3_EXTI8_PH_Pos     (0U)
#define EXTI_EXTICR3_EXTI8_PH_Msk     (0x7U << EXTI_EXTICR3_EXTI8_PH_Pos)      /*!< 0x00000007 */
#define EXTI_EXTICR3_EXTI8_PH         EXTI_EXTICR3_EXTI8_PH_Msk                /*!<PH[8] pin */
#define EXTI_EXTICR3_EXTI8_PI_Pos     (3U)
#define EXTI_EXTICR3_EXTI8_PI_Msk     (0x1U << EXTI_EXTICR3_EXTI8_PI_Pos)      /*!< 0x00000008 */
#define EXTI_EXTICR3_EXTI8_PI         EXTI_EXTICR3_EXTI8_PI_Msk                /*!<PI[8] pin */
#define EXTI_EXTICR3_EXTI8_PJ_Pos     (0U)
#define EXTI_EXTICR3_EXTI8_PJ_Msk     (0x9U << EXTI_EXTICR3_EXTI8_PJ_Pos)      /*!< 0x00000009 */
#define EXTI_EXTICR3_EXTI8_PJ         EXTI_EXTICR3_EXTI8_PJ_Msk                /*!<PJ[8] pin */

/**
  * @brief   EXTI9 configuration
  */
#define EXTI_EXTICR3_EXTI9_PA         ((uint32_t)0x00000000)                   /*!<PA[9] pin */
#define EXTI_EXTICR3_EXTI9_PB_Pos     (8U)
#define EXTI_EXTICR3_EXTI9_PB_Msk     (0x1U << EXTI_EXTICR3_EXTI9_PB_Pos)      /*!< 0x00000100 */
#define EXTI_EXTICR3_EXTI9_PB         EXTI_EXTICR3_EXTI9_PB_Msk                /*!<PB[9] pin */
#define EXTI_EXTICR3_EXTI9_PC_Pos     (9U)
#define EXTI_EXTICR3_EXTI9_PC_Msk     (0x1U << EXTI_EXTICR3_EXTI9_PC_Pos)      /*!< 0x00000200 */
#define EXTI_EXTICR3_EXTI9_PC         EXTI_EXTICR3_EXTI9_PC_Msk                /*!<PC[9] pin */
#define EXTI_EXTICR3_EXTI9_PD_Pos     (8U)
#define EXTI_EXTICR3_EXTI9_PD_Msk     (0x3U << EXTI_EXTICR3_EXTI9_PD_Pos)      /*!< 0x00000300 */
#define EXTI_EXTICR3_EXTI9_PD         EXTI_EXTICR3_EXTI9_PD_Msk                /*!<PD[9] pin */
#define EXTI_EXTICR3_EXTI9_PE_Pos     (10U)
#define EXTI_EXTICR3_EXTI9_PE_Msk     (0x1U << EXTI_EXTICR3_EXTI9_PE_Pos)      /*!< 0x00000400 */
#define EXTI_EXTICR3_EXTI9_PE         EXTI_EXTICR3_EXTI9_PE_Msk                /*!<PE[9] pin */
#define EXTI_EXTICR3_EXTI9_PF_Pos     (8U)
#define EXTI_EXTICR3_EXTI9_PF_Msk     (0x5U << EXTI_EXTICR3_EXTI9_PF_Pos)      /*!< 0x00000500 */
#define EXTI_EXTICR3_EXTI9_PF         EXTI_EXTICR3_EXTI9_PF_Msk                /*!<PF[9] pin */
#define EXTI_EXTICR3_EXTI9_PG_Pos     (9U)
#define EXTI_EXTICR3_EXTI9_PG_Msk     (0x3U << EXTI_EXTICR3_EXTI9_PG_Pos)      /*!< 0x00000600 */
#define EXTI_EXTICR3_EXTI9_PG         EXTI_EXTICR3_EXTI9_PG_Msk                /*!<PG[9] pin */
#define EXTI_EXTICR3_EXTI9_PH_Pos     (8U)
#define EXTI_EXTICR3_EXTI9_PH_Msk     (0x7U << EXTI_EXTICR3_EXTI9_PH_Pos)      /*!< 0x00000700 */
#define EXTI_EXTICR3_EXTI9_PH         EXTI_EXTICR3_EXTI9_PH_Msk                /*!<PH[9] pin */
#define EXTI_EXTICR3_EXTI9_PI_Pos     (11U)
#define EXTI_EXTICR3_EXTI9_PI_Msk     (0x1U << EXTI_EXTICR3_EXTI9_PI_Pos)      /*!< 0x00000800 */
#define EXTI_EXTICR3_EXTI9_PI         EXTI_EXTICR3_EXTI9_PI_Msk                /*!<PI[9] pin */
#define EXTI_EXTICR3_EXTI9_PJ_Pos     (8U)
#define EXTI_EXTICR3_EXTI9_PJ_Msk     (0x9U << EXTI_EXTICR3_EXTI9_PJ_Pos)      /*!< 0x00000900 */
#define EXTI_EXTICR3_EXTI9_PJ         EXTI_EXTICR3_EXTI9_PJ_Msk                /*!<PJ[9] pin */

/**
  * @brief   EXTI10 configuration
  */
#define EXTI_EXTICR3_EXTI10_PA        ((uint32_t)0x00000000)                   /*!<PA[10] pin */
#define EXTI_EXTICR3_EXTI10_PB_Pos    (16U)
#define EXTI_EXTICR3_EXTI10_PB_Msk    (0x1U << EXTI_EXTICR3_EXTI10_PB_Pos)     /*!< 0x00010000 */
#define EXTI_EXTICR3_EXTI10_PB        EXTI_EXTICR3_EXTI10_PB_Msk               /*!<PB[10] pin */
#define EXTI_EXTICR3_EXTI10_PC_Pos    (17U)
#define EXTI_EXTICR3_EXTI10_PC_Msk    (0x1U << EXTI_EXTICR3_EXTI10_PC_Pos)     /*!< 0x00020000 */
#define EXTI_EXTICR3_EXTI10_PC        EXTI_EXTICR3_EXTI10_PC_Msk               /*!<PC[10] pin */
#define EXTI_EXTICR3_EXTI10_PD_Pos    (16U)
#define EXTI_EXTICR3_EXTI10_PD_Msk    (0x3U << EXTI_EXTICR3_EXTI10_PD_Pos)     /*!< 0x00030000 */
#define EXTI_EXTICR3_EXTI10_PD        EXTI_EXTICR3_EXTI10_PD_Msk               /*!<PD[10] pin */
#define EXTI_EXTICR3_EXTI10_PE_Pos    (18U)
#define EXTI_EXTICR3_EXTI10_PE_Msk    (0x1U << EXTI_EXTICR3_EXTI10_PE_Pos)     /*!< 0x00040000 */
#define EXTI_EXTICR3_EXTI10_PE        EXTI_EXTICR3_EXTI10_PE_Msk               /*!<PE[10] pin */
#define EXTI_EXTICR3_EXTI10_PF_Pos    (16U)
#define EXTI_EXTICR3_EXTI10_PF_Msk    (0x5U << EXTI_EXTICR3_EXTI10_PF_Pos)     /*!< 0x00050000 */
#define EXTI_EXTICR3_EXTI10_PF        EXTI_EXTICR3_EXTI10_PF_Msk               /*!<PF[10] pin */
#define EXTI_EXTICR3_EXTI10_PG_Pos    (17U)
#define EXTI_EXTICR3_EXTI10_PG_Msk    (0x3U << EXTI_EXTICR3_EXTI10_PG_Pos)     /*!< 0x00060000 */
#define EXTI_EXTICR3_EXTI10_PG        EXTI_EXTICR3_EXTI10_PG_Msk               /*!<PG[10] pin */
#define EXTI_EXTICR3_EXTI10_PH_Pos    (16U)
#define EXTI_EXTICR3_EXTI10_PH_Msk    (0x7U << EXTI_EXTICR3_EXTI10_PH_Pos)     /*!< 0x00070000 */
#define EXTI_EXTICR3_EXTI10_PH        EXTI_EXTICR3_EXTI10_PH_Msk               /*!<PH[10] pin */
#define EXTI_EXTICR3_EXTI10_PI_Pos    (19U)
#define EXTI_EXTICR3_EXTI10_PI_Msk    (0x1U << EXTI_EXTICR3_EXTI10_PI_Pos)     /*!< 0x00080000 */
#define EXTI_EXTICR3_EXTI10_PI        EXTI_EXTICR3_EXTI10_PI_Msk               /*!<PI[10] pin */
#define EXTI_EXTICR3_EXTI10_PJ_Pos    (16U)
#define EXTI_EXTICR3_EXTI10_PJ_Msk    (0x9U << EXTI_EXTICR3_EXTI10_PJ_Pos)     /*!< 0x00090000 */
#define EXTI_EXTICR3_EXTI10_PJ        EXTI_EXTICR3_EXTI10_PJ_Msk               /*!<PJ[10] pin */

/**
  * @brief   EXTI11 configuration
  */
#define EXTI_EXTICR3_EXTI11_PA        ((uint32_t)0x00000000)                   /*!<PA[11] pin */
#define EXTI_EXTICR3_EXTI11_PB_Pos    (24U)
#define EXTI_EXTICR3_EXTI11_PB_Msk    (0x1U << EXTI_EXTICR3_EXTI11_PB_Pos)     /*!< 0x01000000 */
#define EXTI_EXTICR3_EXTI11_PB        EXTI_EXTICR3_EXTI11_PB_Msk               /*!<PB[11] pin */
#define EXTI_EXTICR3_EXTI11_PC_Pos    (25U)
#define EXTI_EXTICR3_EXTI11_PC_Msk    (0x1U << EXTI_EXTICR3_EXTI11_PC_Pos)     /*!< 0x02000000 */
#define EXTI_EXTICR3_EXTI11_PC        EXTI_EXTICR3_EXTI11_PC_Msk               /*!<PC[11] pin */
#define EXTI_EXTICR3_EXTI11_PD_Pos    (24U)
#define EXTI_EXTICR3_EXTI11_PD_Msk    (0x3U << EXTI_EXTICR3_EXTI11_PD_Pos)     /*!< 0x03000000 */
#define EXTI_EXTICR3_EXTI11_PD        EXTI_EXTICR3_EXTI11_PD_Msk               /*!<PD[11] pin */
#define EXTI_EXTICR3_EXTI11_PE_Pos    (26U)
#define EXTI_EXTICR3_EXTI11_PE_Msk    (0x1U << EXTI_EXTICR3_EXTI11_PE_Pos)     /*!< 0x04000000 */
#define EXTI_EXTICR3_EXTI11_PE        EXTI_EXTICR3_EXTI11_PE_Msk               /*!<PE[11] pin */
#define EXTI_EXTICR3_EXTI11_PF_Pos    (24U)
#define EXTI_EXTICR3_EXTI11_PF_Msk    (0x5U << EXTI_EXTICR3_EXTI11_PF_Pos)     /*!< 0x05000000 */
#define EXTI_EXTICR3_EXTI11_PF        EXTI_EXTICR3_EXTI11_PF_Msk               /*!<PF[11] pin */
#define EXTI_EXTICR3_EXTI11_PG_Pos    (25U)
#define EXTI_EXTICR3_EXTI11_PG_Msk    (0x3U << EXTI_EXTICR3_EXTI11_PG_Pos)     /*!< 0x06000000 */
#define EXTI_EXTICR3_EXTI11_PG        EXTI_EXTICR3_EXTI11_PG_Msk               /*!<PG[11] pin */
#define EXTI_EXTICR3_EXTI11_PH_Pos    (24U)
#define EXTI_EXTICR3_EXTI11_PH_Msk    (0x7U << EXTI_EXTICR3_EXTI11_PH_Pos)     /*!< 0x07000000 */
#define EXTI_EXTICR3_EXTI11_PH        EXTI_EXTICR3_EXTI11_PH_Msk               /*!<PH[11] pin */
#define EXTI_EXTICR3_EXTI11_PI_Pos    (27U)
#define EXTI_EXTICR3_EXTI11_PI_Msk    (0x1U << EXTI_EXTICR3_EXTI11_PI_Pos)     /*!< 0x08000000 */
#define EXTI_EXTICR3_EXTI11_PI        EXTI_EXTICR3_EXTI11_PI_Msk               /*!<PI[11] pin */
#define EXTI_EXTICR3_EXTI11_PJ_Pos    (24U)
#define EXTI_EXTICR3_EXTI11_PJ_Msk    (0x9U << EXTI_EXTICR3_EXTI11_PJ_Pos)     /*!< 0x09000000 */
#define EXTI_EXTICR3_EXTI11_PJ        EXTI_EXTICR3_EXTI11_PJ_Msk               /*!<PJ[11] pin */

/*****************  Bit definition for EXTI_EXTICR4 register  ***************/
#define EXTI_EXTICR4_EXTI12_Pos       (0U)
#define EXTI_EXTICR4_EXTI12_Msk       (0xFFU << EXTI_EXTICR4_EXTI12_Pos)       /*!< 0x000000FF */
#define EXTI_EXTICR4_EXTI12           EXTI_EXTICR4_EXTI12_Msk                  /*!<EXTI 12 configuration */
#define EXTI_EXTICR4_EXTI13_Pos       (8U)
#define EXTI_EXTICR4_EXTI13_Msk       (0xFFU << EXTI_EXTICR4_EXTI13_Pos)       /*!< 0x0000FF00 */
#define EXTI_EXTICR4_EXTI13           EXTI_EXTICR4_EXTI13_Msk                  /*!<EXTI 13 configuration */
#define EXTI_EXTICR4_EXTI14_Pos       (16U)
#define EXTI_EXTICR4_EXTI14_Msk       (0xFFU << EXTI_EXTICR4_EXTI14_Pos)       /*!< 0x00FF0000 */
#define EXTI_EXTICR4_EXTI14           EXTI_EXTICR4_EXTI14_Msk                  /*!<EXTI 14 configuration */
#define EXTI_EXTICR4_EXTI15_Pos       (24U)
#define EXTI_EXTICR4_EXTI15_Msk       (0xFFU << EXTI_EXTICR4_EXTI15_Pos)       /*!< 0xFF000000 */
#define EXTI_EXTICR4_EXTI15           EXTI_EXTICR4_EXTI15_Msk                  /*!<EXTI 15 configuration */

/**
  * @brief   EXTI12 configuration
  */
#define EXTI_EXTICR4_EXTI12_PA        ((uint32_t)0x00000000)                   /*!<PA[12] pin */
#define EXTI_EXTICR4_EXTI12_PB_Pos    (0U)
#define EXTI_EXTICR4_EXTI12_PB_Msk    (0x1U << EXTI_EXTICR4_EXTI12_PB_Pos)     /*!< 0x00000001 */
#define EXTI_EXTICR4_EXTI12_PB        EXTI_EXTICR4_EXTI12_PB_Msk               /*!<PB[12] pin */
#define EXTI_EXTICR4_EXTI12_PC_Pos    (1U)
#define EXTI_EXTICR4_EXTI12_PC_Msk    (0x1U << EXTI_EXTICR4_EXTI12_PC_Pos)     /*!< 0x00000002 */
#define EXTI_EXTICR4_EXTI12_PC        EXTI_EXTICR4_EXTI12_PC_Msk               /*!<PC[12] pin */
#define EXTI_EXTICR4_EXTI12_PD_Pos    (0U)
#define EXTI_EXTICR4_EXTI12_PD_Msk    (0x3U << EXTI_EXTICR4_EXTI12_PD_Pos)     /*!< 0x00000003 */
#define EXTI_EXTICR4_EXTI12_PD        EXTI_EXTICR4_EXTI12_PD_Msk               /*!<PD[12] pin */
#define EXTI_EXTICR4_EXTI12_PE_Pos    (2U)
#define EXTI_EXTICR4_EXTI12_PE_Msk    (0x1U << EXTI_EXTICR4_EXTI12_PE_Pos)     /*!< 0x00000004 */
#define EXTI_EXTICR4_EXTI12_PE        EXTI_EXTICR4_EXTI12_PE_Msk               /*!<PE[12] pin */
#define EXTI_EXTICR4_EXTI12_PF_Pos    (0U)
#define EXTI_EXTICR4_EXTI12_PF_Msk    (0x5U << EXTI_EXTICR4_EXTI12_PF_Pos)     /*!< 0x00000005 */
#define EXTI_EXTICR4_EXTI12_PF        EXTI_EXTICR4_EXTI12_PF_Msk               /*!<PF[12] pin */
#define EXTI_EXTICR4_EXTI12_PG_Pos    (1U)
#define EXTI_EXTICR4_EXTI12_PG_Msk    (0x3U << EXTI_EXTICR4_EXTI12_PG_Pos)     /*!< 0x00000006 */
#define EXTI_EXTICR4_EXTI12_PG        EXTI_EXTICR4_EXTI12_PG_Msk               /*!<PG[12] pin */
#define EXTI_EXTICR4_EXTI12_PH_Pos    (0U)
#define EXTI_EXTICR4_EXTI12_PH_Msk    (0x7U << EXTI_EXTICR4_EXTI12_PH_Pos)     /*!< 0x00000007 */
#define EXTI_EXTICR4_EXTI12_PH        EXTI_EXTICR4_EXTI12_PH_Msk               /*!<PH[12] pin */
#define EXTI_EXTICR4_EXTI12_PI_Pos    (3U)
#define EXTI_EXTICR4_EXTI12_PI_Msk    (0x1U << EXTI_EXTICR4_EXTI12_PI_Pos)     /*!< 0x00000008 */
#define EXTI_EXTICR4_EXTI12_PI        EXTI_EXTICR4_EXTI12_PI_Msk               /*!<PI[12] pin */
#define EXTI_EXTICR4_EXTI12_PJ_Pos    (0U)
#define EXTI_EXTICR4_EXTI12_PJ_Msk    (0x9U << EXTI_EXTICR4_EXTI12_PJ_Pos)     /*!< 0x00000009 */
#define EXTI_EXTICR4_EXTI12_PJ        EXTI_EXTICR4_EXTI12_PJ_Msk               /*!<PJ[12] pin */

/**
  * @brief   EXTI13 configuration
  */
#define EXTI_EXTICR4_EXTI13_PA        ((uint32_t)0x00000000)                   /*!<PA[13] pin */
#define EXTI_EXTICR4_EXTI13_PB_Pos    (8U)
#define EXTI_EXTICR4_EXTI13_PB_Msk    (0x1U << EXTI_EXTICR4_EXTI13_PB_Pos)     /*!< 0x00000100 */
#define EXTI_EXTICR4_EXTI13_PB        EXTI_EXTICR4_EXTI13_PB_Msk               /*!<PB[13] pin */
#define EXTI_EXTICR4_EXTI13_PC_Pos    (9U)
#define EXTI_EXTICR4_EXTI13_PC_Msk    (0x1U << EXTI_EXTICR4_EXTI13_PC_Pos)     /*!< 0x00000200 */
#define EXTI_EXTICR4_EXTI13_PC        EXTI_EXTICR4_EXTI13_PC_Msk               /*!<PC[13] pin */
#define EXTI_EXTICR4_EXTI13_PD_Pos    (8U)
#define EXTI_EXTICR4_EXTI13_PD_Msk    (0x3U << EXTI_EXTICR4_EXTI13_PD_Pos)     /*!< 0x00000300 */
#define EXTI_EXTICR4_EXTI13_PD        EXTI_EXTICR4_EXTI13_PD_Msk               /*!<PD[13] pin */
#define EXTI_EXTICR4_EXTI13_PE_Pos    (10U)
#define EXTI_EXTICR4_EXTI13_PE_Msk    (0x1U << EXTI_EXTICR4_EXTI13_PE_Pos)     /*!< 0x00000400 */
#define EXTI_EXTICR4_EXTI13_PE        EXTI_EXTICR4_EXTI13_PE_Msk               /*!<PE[13] pin */
#define EXTI_EXTICR4_EXTI13_PF_Pos    (8U)
#define EXTI_EXTICR4_EXTI13_PF_Msk    (0x5U << EXTI_EXTICR4_EXTI13_PF_Pos)     /*!< 0x00000500 */
#define EXTI_EXTICR4_EXTI13_PF        EXTI_EXTICR4_EXTI13_PF_Msk               /*!<PF[13] pin */
#define EXTI_EXTICR4_EXTI13_PG_Pos    (9U)
#define EXTI_EXTICR4_EXTI13_PG_Msk    (0x3U << EXTI_EXTICR4_EXTI13_PG_Pos)     /*!< 0x00000600 */
#define EXTI_EXTICR4_EXTI13_PG        EXTI_EXTICR4_EXTI13_PG_Msk               /*!<PG[13] pin */
#define EXTI_EXTICR4_EXTI13_PH_Pos    (8U)
#define EXTI_EXTICR4_EXTI13_PH_Msk    (0x7U << EXTI_EXTICR4_EXTI13_PH_Pos)     /*!< 0x00000700 */
#define EXTI_EXTICR4_EXTI13_PH        EXTI_EXTICR4_EXTI13_PH_Msk               /*!<PH[13] pin */
#define EXTI_EXTICR4_EXTI13_PI_Pos    (11U)
#define EXTI_EXTICR4_EXTI13_PI_Msk    (0x1U << EXTI_EXTICR4_EXTI13_PI_Pos)     /*!< 0x00000800 */
#define EXTI_EXTICR4_EXTI13_PI        EXTI_EXTICR4_EXTI13_PI_Msk               /*!<PI[13] pin */
#define EXTI_EXTICR4_EXTI13_PJ_Pos    (8U)
#define EXTI_EXTICR4_EXTI13_PJ_Msk    (0x9U << EXTI_EXTICR4_EXTI13_PJ_Pos)     /*!< 0x00000900 */
#define EXTI_EXTICR4_EXTI13_PJ        EXTI_EXTICR4_EXTI13_PJ_Msk               /*!<PJ[13] pin */

/**
  * @brief   EXTI14 configuration
  */
#define EXTI_EXTICR4_EXTI14_PA        ((uint32_t)0x00000000)                   /*!<PA[14] pin */
#define EXTI_EXTICR4_EXTI14_PB_Pos    (16U)
#define EXTI_EXTICR4_EXTI14_PB_Msk    (0x1U << EXTI_EXTICR4_EXTI14_PB_Pos)     /*!< 0x00010000 */
#define EXTI_EXTICR4_EXTI14_PB        EXTI_EXTICR4_EXTI14_PB_Msk               /*!<PB[14] pin */
#define EXTI_EXTICR4_EXTI14_PC_Pos    (17U)
#define EXTI_EXTICR4_EXTI14_PC_Msk    (0x1U << EXTI_EXTICR4_EXTI14_PC_Pos)     /*!< 0x00020000 */
#define EXTI_EXTICR4_EXTI14_PC        EXTI_EXTICR4_EXTI14_PC_Msk               /*!<PC[14] pin */
#define EXTI_EXTICR4_EXTI14_PD_Pos    (16U)
#define EXTI_EXTICR4_EXTI14_PD_Msk    (0x3U << EXTI_EXTICR4_EXTI14_PD_Pos)     /*!< 0x00030000 */
#define EXTI_EXTICR4_EXTI14_PD        EXTI_EXTICR4_EXTI14_PD_Msk               /*!<PD[14] pin */
#define EXTI_EXTICR4_EXTI14_PE_Pos    (18U)
#define EXTI_EXTICR4_EXTI14_PE_Msk    (0x1U << EXTI_EXTICR4_EXTI14_PE_Pos)     /*!< 0x00040000 */
#define EXTI_EXTICR4_EXTI14_PE        EXTI_EXTICR4_EXTI14_PE_Msk               /*!<PE[14] pin */
#define EXTI_EXTICR4_EXTI14_PF_Pos    (16U)
#define EXTI_EXTICR4_EXTI14_PF_Msk    (0x5U << EXTI_EXTICR4_EXTI14_PF_Pos)     /*!< 0x00050000 */
#define EXTI_EXTICR4_EXTI14_PF        EXTI_EXTICR4_EXTI14_PF_Msk               /*!<PF[14] pin */
#define EXTI_EXTICR4_EXTI14_PG_Pos    (17U)
#define EXTI_EXTICR4_EXTI14_PG_Msk    (0x3U << EXTI_EXTICR4_EXTI14_PG_Pos)     /*!< 0x00060000 */
#define EXTI_EXTICR4_EXTI14_PG        EXTI_EXTICR4_EXTI14_PG_Msk               /*!<PG[14] pin */
#define EXTI_EXTICR4_EXTI14_PH_Pos    (16U)
#define EXTI_EXTICR4_EXTI14_PH_Msk    (0x7U << EXTI_EXTICR4_EXTI14_PH_Pos)     /*!< 0x00070000 */
#define EXTI_EXTICR4_EXTI14_PH        EXTI_EXTICR4_EXTI14_PH_Msk               /*!<PH[14] pin */
#define EXTI_EXTICR4_EXTI14_PI_Pos    (19U)
#define EXTI_EXTICR4_EXTI14_PI_Msk    (0x1U << EXTI_EXTICR4_EXTI14_PI_Pos)     /*!< 0x00080000 */
#define EXTI_EXTICR4_EXTI14_PI        EXTI_EXTICR4_EXTI14_PI_Msk               /*!<PI[14] pin */
#define EXTI_EXTICR4_EXTI14_PJ_Pos    (16U)
#define EXTI_EXTICR4_EXTI14_PJ_Msk    (0x9U << EXTI_EXTICR4_EXTI14_PJ_Pos)     /*!< 0x00090000 */
#define EXTI_EXTICR4_EXTI14_PJ        EXTI_EXTICR4_EXTI14_PJ_Msk               /*!<PJ[14] pin */

/**
  * @brief   EXTI15 configuration
  */
#define EXTI_EXTICR4_EXTI15_PA        ((uint32_t)0x00000000)                   /*!<PA[15] pin */
#define EXTI_EXTICR4_EXTI15_PB_Pos    (24U)
#define EXTI_EXTICR4_EXTI15_PB_Msk    (0x1U << EXTI_EXTICR4_EXTI15_PB_Pos)     /*!< 0x01000000 */
#define EXTI_EXTICR4_EXTI15_PB        EXTI_EXTICR4_EXTI15_PB_Msk               /*!<PB[15] pin */
#define EXTI_EXTICR4_EXTI15_PC_Pos    (25U)
#define EXTI_EXTICR4_EXTI15_PC_Msk    (0x1U << EXTI_EXTICR4_EXTI15_PC_Pos)     /*!< 0x02000000 */
#define EXTI_EXTICR4_EXTI15_PC        EXTI_EXTICR4_EXTI15_PC_Msk               /*!<PC[15] pin */
#define EXTI_EXTICR4_EXTI15_PD_Pos    (24U)
#define EXTI_EXTICR4_EXTI15_PD_Msk    (0x3U << EXTI_EXTICR4_EXTI15_PD_Pos)     /*!< 0x03000000 */
#define EXTI_EXTICR4_EXTI15_PD        EXTI_EXTICR4_EXTI15_PD_Msk               /*!<PD[15] pin */
#define EXTI_EXTICR4_EXTI15_PE_Pos    (26U)
#define EXTI_EXTICR4_EXTI15_PE_Msk    (0x1U << EXTI_EXTICR4_EXTI15_PE_Pos)     /*!< 0x04000000 */
#define EXTI_EXTICR4_EXTI15_PE        EXTI_EXTICR4_EXTI15_PE_Msk               /*!<PE[15] pin */
#define EXTI_EXTICR4_EXTI15_PF_Pos    (24U)
#define EXTI_EXTICR4_EXTI15_PF_Msk    (0x5U << EXTI_EXTICR4_EXTI15_PF_Pos)     /*!< 0x05000000 */
#define EXTI_EXTICR4_EXTI15_PF        EXTI_EXTICR4_EXTI15_PF_Msk               /*!<PF[15] pin */
#define EXTI_EXTICR4_EXTI15_PG_Pos    (25U)
#define EXTI_EXTICR4_EXTI15_PG_Msk    (0x3U << EXTI_EXTICR4_EXTI15_PG_Pos)     /*!< 0x06000000 */
#define EXTI_EXTICR4_EXTI15_PG        EXTI_EXTICR4_EXTI15_PG_Msk               /*!<PG[15] pin */
#define EXTI_EXTICR4_EXTI15_PH_Pos    (24U)
#define EXTI_EXTICR4_EXTI15_PH_Msk    (0x7U << EXTI_EXTICR4_EXTI15_PH_Pos)     /*!< 0x07000000 */
#define EXTI_EXTICR4_EXTI15_PH        EXTI_EXTICR4_EXTI15_PH_Msk               /*!<PH[15] pin */
#define EXTI_EXTICR4_EXTI15_PI_Pos    (27U)
#define EXTI_EXTICR4_EXTI15_PI_Msk    (0x1U << EXTI_EXTICR4_EXTI15_PI_Pos)     /*!< 0x08000000 */
#define EXTI_EXTICR4_EXTI15_PI        EXTI_EXTICR4_EXTI15_PI_Msk               /*!<PI[15] pin */
#define EXTI_EXTICR4_EXTI15_PJ_Pos    (24U)
#define EXTI_EXTICR4_EXTI15_PJ_Msk    (0x9U << EXTI_EXTICR4_EXTI15_PJ_Pos)     /*!< 0x09000000 */
#define EXTI_EXTICR4_EXTI15_PJ        EXTI_EXTICR4_EXTI15_PJ_Msk               /*!<PJ[15] pin */

/******************************************************************************/
/*                                                                            */
/*                            General Purpose I/O                             */
/*                          c7amba_ioport4 Rev 1.0.2                          */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for GPIO_MODER register  ******************/
#define GPIO_MODER_MODE0_Pos           (0U)
#define GPIO_MODER_MODE0_Msk           (0x3U << GPIO_MODER_MODE0_Pos)           /*!< 0x00000003 */
#define GPIO_MODER_MODE0               GPIO_MODER_MODE0_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE1_Pos           (2U)
#define GPIO_MODER_MODE1_Msk           (0x3U << GPIO_MODER_MODE1_Pos)           /*!< 0x0000000C */
#define GPIO_MODER_MODE1               GPIO_MODER_MODE1_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE2_Pos           (4U)
#define GPIO_MODER_MODE2_Msk           (0x3U << GPIO_MODER_MODE2_Pos)           /*!< 0x00000030 */
#define GPIO_MODER_MODE2               GPIO_MODER_MODE2_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE3_Pos           (6U)
#define GPIO_MODER_MODE3_Msk           (0x3U << GPIO_MODER_MODE3_Pos)           /*!< 0x000000C0 */
#define GPIO_MODER_MODE3               GPIO_MODER_MODE3_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE4_Pos           (8U)
#define GPIO_MODER_MODE4_Msk           (0x3U << GPIO_MODER_MODE4_Pos)           /*!< 0x00000300 */
#define GPIO_MODER_MODE4               GPIO_MODER_MODE4_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE5_Pos           (10U)
#define GPIO_MODER_MODE5_Msk           (0x3U << GPIO_MODER_MODE5_Pos)           /*!< 0x00000C00 */
#define GPIO_MODER_MODE5               GPIO_MODER_MODE5_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE6_Pos           (12U)
#define GPIO_MODER_MODE6_Msk           (0x3U << GPIO_MODER_MODE6_Pos)           /*!< 0x00003000 */
#define GPIO_MODER_MODE6               GPIO_MODER_MODE6_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE7_Pos           (14U)
#define GPIO_MODER_MODE7_Msk           (0x3U << GPIO_MODER_MODE7_Pos)           /*!< 0x0000C000 */
#define GPIO_MODER_MODE7               GPIO_MODER_MODE7_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE8_Pos           (16U)
#define GPIO_MODER_MODE8_Msk           (0x3U << GPIO_MODER_MODE8_Pos)           /*!< 0x00030000 */
#define GPIO_MODER_MODE8               GPIO_MODER_MODE8_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE9_Pos           (18U)
#define GPIO_MODER_MODE9_Msk           (0x3U << GPIO_MODER_MODE9_Pos)           /*!< 0x000C0000 */
#define GPIO_MODER_MODE9               GPIO_MODER_MODE9_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE10_Pos          (20U)
#define GPIO_MODER_MODE10_Msk          (0x3U << GPIO_MODER_MODE10_Pos)          /*!< 0x00300000 */
#define GPIO_MODER_MODE10              GPIO_MODER_MODE10_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE11_Pos          (22U)
#define GPIO_MODER_MODE11_Msk          (0x3U << GPIO_MODER_MODE11_Pos)          /*!< 0x00C00000 */
#define GPIO_MODER_MODE11              GPIO_MODER_MODE11_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE12_Pos          (24U)
#define GPIO_MODER_MODE12_Msk          (0x3U << GPIO_MODER_MODE12_Pos)          /*!< 0x03000000 */
#define GPIO_MODER_MODE12              GPIO_MODER_MODE12_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE13_Pos          (26U)
#define GPIO_MODER_MODE13_Msk          (0x3U << GPIO_MODER_MODE13_Pos)          /*!< 0x0C000000 */
#define GPIO_MODER_MODE13              GPIO_MODER_MODE13_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE14_Pos          (28U)
#define GPIO_MODER_MODE14_Msk          (0x3U << GPIO_MODER_MODE14_Pos)          /*!< 0x30000000 */
#define GPIO_MODER_MODE14              GPIO_MODER_MODE14_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE15_Pos          (30U)
#define GPIO_MODER_MODE15_Msk          (0x3U << GPIO_MODER_MODE15_Pos)          /*!< 0xC0000000 */
#define GPIO_MODER_MODE15              GPIO_MODER_MODE15_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_OTYPER register  ******************/
#define GPIO_OTYPER_OT0_Pos            (0U)
#define GPIO_OTYPER_OT0_Msk            (0x1U << GPIO_OTYPER_OT0_Pos)            /*!< 0x00000001 */
#define GPIO_OTYPER_OT0                GPIO_OTYPER_OT0_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT1_Pos            (1U)
#define GPIO_OTYPER_OT1_Msk            (0x1U << GPIO_OTYPER_OT1_Pos)            /*!< 0x00000002 */
#define GPIO_OTYPER_OT1                GPIO_OTYPER_OT1_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT2_Pos            (2U)
#define GPIO_OTYPER_OT2_Msk            (0x1U << GPIO_OTYPER_OT2_Pos)            /*!< 0x00000004 */
#define GPIO_OTYPER_OT2                GPIO_OTYPER_OT2_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT3_Pos            (3U)
#define GPIO_OTYPER_OT3_Msk            (0x1U << GPIO_OTYPER_OT3_Pos)            /*!< 0x00000008 */
#define GPIO_OTYPER_OT3                GPIO_OTYPER_OT3_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT4_Pos            (4U)
#define GPIO_OTYPER_OT4_Msk            (0x1U << GPIO_OTYPER_OT4_Pos)            /*!< 0x00000010 */
#define GPIO_OTYPER_OT4                GPIO_OTYPER_OT4_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT5_Pos            (5U)
#define GPIO_OTYPER_OT5_Msk            (0x1U << GPIO_OTYPER_OT5_Pos)            /*!< 0x00000020 */
#define GPIO_OTYPER_OT5                GPIO_OTYPER_OT5_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT6_Pos            (6U)
#define GPIO_OTYPER_OT6_Msk            (0x1U << GPIO_OTYPER_OT6_Pos)            /*!< 0x00000040 */
#define GPIO_OTYPER_OT6                GPIO_OTYPER_OT6_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT7_Pos            (7U)
#define GPIO_OTYPER_OT7_Msk            (0x1U << GPIO_OTYPER_OT7_Pos)            /*!< 0x00000080 */
#define GPIO_OTYPER_OT7                GPIO_OTYPER_OT7_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT8_Pos            (8U)
#define GPIO_OTYPER_OT8_Msk            (0x1U << GPIO_OTYPER_OT8_Pos)            /*!< 0x00000100 */
#define GPIO_OTYPER_OT8                GPIO_OTYPER_OT8_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT9_Pos            (9U)
#define GPIO_OTYPER_OT9_Msk            (0x1U << GPIO_OTYPER_OT9_Pos)            /*!< 0x00000200 */
#define GPIO_OTYPER_OT9                GPIO_OTYPER_OT9_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT10_Pos           (10U)
#define GPIO_OTYPER_OT10_Msk           (0x1U << GPIO_OTYPER_OT10_Pos)           /*!< 0x00000400 */
#define GPIO_OTYPER_OT10               GPIO_OTYPER_OT10_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT11_Pos           (11U)
#define GPIO_OTYPER_OT11_Msk           (0x1U << GPIO_OTYPER_OT11_Pos)           /*!< 0x00000800 */
#define GPIO_OTYPER_OT11               GPIO_OTYPER_OT11_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT12_Pos           (12U)
#define GPIO_OTYPER_OT12_Msk           (0x1U << GPIO_OTYPER_OT12_Pos)           /*!< 0x00001000 */
#define GPIO_OTYPER_OT12               GPIO_OTYPER_OT12_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT13_Pos           (13U)
#define GPIO_OTYPER_OT13_Msk           (0x1U << GPIO_OTYPER_OT13_Pos)           /*!< 0x00002000 */
#define GPIO_OTYPER_OT13               GPIO_OTYPER_OT13_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT14_Pos           (14U)
#define GPIO_OTYPER_OT14_Msk           (0x1U << GPIO_OTYPER_OT14_Pos)           /*!< 0x00004000 */
#define GPIO_OTYPER_OT14               GPIO_OTYPER_OT14_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT15_Pos           (15U)
#define GPIO_OTYPER_OT15_Msk           (0x1U << GPIO_OTYPER_OT15_Pos)           /*!< 0x00008000 */
#define GPIO_OTYPER_OT15               GPIO_OTYPER_OT15_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_OSPEEDR register  *****************/
#define GPIO_OSPEEDR_OSPEED0_Pos       (0U)
#define GPIO_OSPEEDR_OSPEED0_Msk       (0x3U << GPIO_OSPEEDR_OSPEED0_Pos)       /*!< 0x00000003 */
#define GPIO_OSPEEDR_OSPEED0           GPIO_OSPEEDR_OSPEED0_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED1_Pos       (2U)
#define GPIO_OSPEEDR_OSPEED1_Msk       (0x3U << GPIO_OSPEEDR_OSPEED1_Pos)       /*!< 0x0000000C */
#define GPIO_OSPEEDR_OSPEED1           GPIO_OSPEEDR_OSPEED1_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED2_Pos       (4U)
#define GPIO_OSPEEDR_OSPEED2_Msk       (0x3U << GPIO_OSPEEDR_OSPEED2_Pos)       /*!< 0x00000030 */
#define GPIO_OSPEEDR_OSPEED2           GPIO_OSPEEDR_OSPEED2_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED3_Pos       (6U)
#define GPIO_OSPEEDR_OSPEED3_Msk       (0x3U << GPIO_OSPEEDR_OSPEED3_Pos)       /*!< 0x000000C0 */
#define GPIO_OSPEEDR_OSPEED3           GPIO_OSPEEDR_OSPEED3_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED4_Pos       (8U)
#define GPIO_OSPEEDR_OSPEED4_Msk       (0x3U << GPIO_OSPEEDR_OSPEED4_Pos)       /*!< 0x00000300 */
#define GPIO_OSPEEDR_OSPEED4           GPIO_OSPEEDR_OSPEED4_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED5_Pos       (10U)
#define GPIO_OSPEEDR_OSPEED5_Msk       (0x3U << GPIO_OSPEEDR_OSPEED5_Pos)       /*!< 0x00000C00 */
#define GPIO_OSPEEDR_OSPEED5           GPIO_OSPEEDR_OSPEED5_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED6_Pos       (12U)
#define GPIO_OSPEEDR_OSPEED6_Msk       (0x3U << GPIO_OSPEEDR_OSPEED6_Pos)       /*!< 0x00003000 */
#define GPIO_OSPEEDR_OSPEED6           GPIO_OSPEEDR_OSPEED6_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED7_Pos       (14U)
#define GPIO_OSPEEDR_OSPEED7_Msk       (0x3U << GPIO_OSPEEDR_OSPEED7_Pos)       /*!< 0x0000C000 */
#define GPIO_OSPEEDR_OSPEED7           GPIO_OSPEEDR_OSPEED7_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED8_Pos       (16U)
#define GPIO_OSPEEDR_OSPEED8_Msk       (0x3U << GPIO_OSPEEDR_OSPEED8_Pos)       /*!< 0x00030000 */
#define GPIO_OSPEEDR_OSPEED8           GPIO_OSPEEDR_OSPEED8_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED9_Pos       (18U)
#define GPIO_OSPEEDR_OSPEED9_Msk       (0x3U << GPIO_OSPEEDR_OSPEED9_Pos)       /*!< 0x000C0000 */
#define GPIO_OSPEEDR_OSPEED9           GPIO_OSPEEDR_OSPEED9_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED10_Pos      (20U)
#define GPIO_OSPEEDR_OSPEED10_Msk      (0x3U << GPIO_OSPEEDR_OSPEED10_Pos)      /*!< 0x00300000 */
#define GPIO_OSPEEDR_OSPEED10          GPIO_OSPEEDR_OSPEED10_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED11_Pos      (22U)
#define GPIO_OSPEEDR_OSPEED11_Msk      (0x3U << GPIO_OSPEEDR_OSPEED11_Pos)      /*!< 0x00C00000 */
#define GPIO_OSPEEDR_OSPEED11          GPIO_OSPEEDR_OSPEED11_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED12_Pos      (24U)
#define GPIO_OSPEEDR_OSPEED12_Msk      (0x3U << GPIO_OSPEEDR_OSPEED12_Pos)      /*!< 0x03000000 */
#define GPIO_OSPEEDR_OSPEED12          GPIO_OSPEEDR_OSPEED12_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED13_Pos      (26U)
#define GPIO_OSPEEDR_OSPEED13_Msk      (0x3U << GPIO_OSPEEDR_OSPEED13_Pos)      /*!< 0x0C000000 */
#define GPIO_OSPEEDR_OSPEED13          GPIO_OSPEEDR_OSPEED13_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED14_Pos      (28U)
#define GPIO_OSPEEDR_OSPEED14_Msk      (0x3U << GPIO_OSPEEDR_OSPEED14_Pos)      /*!< 0x30000000 */
#define GPIO_OSPEEDR_OSPEED14          GPIO_OSPEEDR_OSPEED14_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED15_Pos      (30U)
#define GPIO_OSPEEDR_OSPEED15_Msk      (0x3U << GPIO_OSPEEDR_OSPEED15_Pos)      /*!< 0xC0000000 */
#define GPIO_OSPEEDR_OSPEED15          GPIO_OSPEEDR_OSPEED15_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_PUPDR register  ******************/
#define GPIO_PUPDR_PUPD0_Pos           (0U)
#define GPIO_PUPDR_PUPD0_Msk           (0x3U << GPIO_PUPDR_PUPD0_Pos)           /*!< 0x00000003 */
#define GPIO_PUPDR_PUPD0               GPIO_PUPDR_PUPD0_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD1_Pos           (2U)
#define GPIO_PUPDR_PUPD1_Msk           (0x3U << GPIO_PUPDR_PUPD1_Pos)           /*!< 0x0000000C */
#define GPIO_PUPDR_PUPD1               GPIO_PUPDR_PUPD1_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD2_Pos           (4U)
#define GPIO_PUPDR_PUPD2_Msk           (0x3U << GPIO_PUPDR_PUPD2_Pos)           /*!< 0x00000030 */
#define GPIO_PUPDR_PUPD2               GPIO_PUPDR_PUPD2_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD3_Pos           (6U)
#define GPIO_PUPDR_PUPD3_Msk           (0x3U << GPIO_PUPDR_PUPD3_Pos)           /*!< 0x000000C0 */
#define GPIO_PUPDR_PUPD3               GPIO_PUPDR_PUPD3_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD4_Pos           (8U)
#define GPIO_PUPDR_PUPD4_Msk           (0x3U << GPIO_PUPDR_PUPD4_Pos)           /*!< 0x00000300 */
#define GPIO_PUPDR_PUPD4               GPIO_PUPDR_PUPD4_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD5_Pos           (10U)
#define GPIO_PUPDR_PUPD5_Msk           (0x3U << GPIO_PUPDR_PUPD5_Pos)           /*!< 0x00000C00 */
#define GPIO_PUPDR_PUPD5               GPIO_PUPDR_PUPD5_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD6_Pos           (12U)
#define GPIO_PUPDR_PUPD6_Msk           (0x3U << GPIO_PUPDR_PUPD6_Pos)           /*!< 0x00003000 */
#define GPIO_PUPDR_PUPD6               GPIO_PUPDR_PUPD6_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD7_Pos           (14U)
#define GPIO_PUPDR_PUPD7_Msk           (0x3U << GPIO_PUPDR_PUPD7_Pos)           /*!< 0x0000C000 */
#define GPIO_PUPDR_PUPD7               GPIO_PUPDR_PUPD7_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD8_Pos           (16U)
#define GPIO_PUPDR_PUPD8_Msk           (0x3U << GPIO_PUPDR_PUPD8_Pos)           /*!< 0x00030000 */
#define GPIO_PUPDR_PUPD8               GPIO_PUPDR_PUPD8_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD9_Pos           (18U)
#define GPIO_PUPDR_PUPD9_Msk           (0x3U << GPIO_PUPDR_PUPD9_Pos)           /*!< 0x000C0000 */
#define GPIO_PUPDR_PUPD9               GPIO_PUPDR_PUPD9_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD10_Pos          (20U)
#define GPIO_PUPDR_PUPD10_Msk          (0x3U << GPIO_PUPDR_PUPD10_Pos)          /*!< 0x00300000 */
#define GPIO_PUPDR_PUPD10              GPIO_PUPDR_PUPD10_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD11_Pos          (22U)
#define GPIO_PUPDR_PUPD11_Msk          (0x3U << GPIO_PUPDR_PUPD11_Pos)          /*!< 0x00C00000 */
#define GPIO_PUPDR_PUPD11              GPIO_PUPDR_PUPD11_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD12_Pos          (24U)
#define GPIO_PUPDR_PUPD12_Msk          (0x3U << GPIO_PUPDR_PUPD12_Pos)          /*!< 0x03000000 */
#define GPIO_PUPDR_PUPD12              GPIO_PUPDR_PUPD12_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD13_Pos          (26U)
#define GPIO_PUPDR_PUPD13_Msk          (0x3U << GPIO_PUPDR_PUPD13_Pos)          /*!< 0x0C000000 */
#define GPIO_PUPDR_PUPD13              GPIO_PUPDR_PUPD13_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD14_Pos          (28U)
#define GPIO_PUPDR_PUPD14_Msk          (0x3U << GPIO_PUPDR_PUPD14_Pos)          /*!< 0x30000000 */
#define GPIO_PUPDR_PUPD14              GPIO_PUPDR_PUPD14_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD15_Pos          (30U)
#define GPIO_PUPDR_PUPD15_Msk          (0x3U << GPIO_PUPDR_PUPD15_Pos)          /*!< 0xC0000000 */
#define GPIO_PUPDR_PUPD15              GPIO_PUPDR_PUPD15_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*******************  Bit definition for GPIO_IDR register  *******************/
#define GPIO_IDR_ID0_Pos               (0U)
#define GPIO_IDR_ID0_Msk               (0x1U << GPIO_IDR_ID0_Pos)               /*!< 0x00000001 */
#define GPIO_IDR_ID0                   GPIO_IDR_ID0_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID1_Pos               (1U)
#define GPIO_IDR_ID1_Msk               (0x1U << GPIO_IDR_ID1_Pos)               /*!< 0x00000002 */
#define GPIO_IDR_ID1                   GPIO_IDR_ID1_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID2_Pos               (2U)
#define GPIO_IDR_ID2_Msk               (0x1U << GPIO_IDR_ID2_Pos)               /*!< 0x00000004 */
#define GPIO_IDR_ID2                   GPIO_IDR_ID2_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID3_Pos               (3U)
#define GPIO_IDR_ID3_Msk               (0x1U << GPIO_IDR_ID3_Pos)               /*!< 0x00000008 */
#define GPIO_IDR_ID3                   GPIO_IDR_ID3_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID4_Pos               (4U)
#define GPIO_IDR_ID4_Msk               (0x1U << GPIO_IDR_ID4_Pos)               /*!< 0x00000010 */
#define GPIO_IDR_ID4                   GPIO_IDR_ID4_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID5_Pos               (5U)
#define GPIO_IDR_ID5_Msk               (0x1U << GPIO_IDR_ID5_Pos)               /*!< 0x00000020 */
#define GPIO_IDR_ID5                   GPIO_IDR_ID5_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID6_Pos               (6U)
#define GPIO_IDR_ID6_Msk               (0x1U << GPIO_IDR_ID6_Pos)               /*!< 0x00000040 */
#define GPIO_IDR_ID6                   GPIO_IDR_ID6_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID7_Pos               (7U)
#define GPIO_IDR_ID7_Msk               (0x1U << GPIO_IDR_ID7_Pos)               /*!< 0x00000080 */
#define GPIO_IDR_ID7                   GPIO_IDR_ID7_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID8_Pos               (8U)
#define GPIO_IDR_ID8_Msk               (0x1U << GPIO_IDR_ID8_Pos)               /*!< 0x00000100 */
#define GPIO_IDR_ID8                   GPIO_IDR_ID8_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID9_Pos               (9U)
#define GPIO_IDR_ID9_Msk               (0x1U << GPIO_IDR_ID9_Pos)               /*!< 0x00000200 */
#define GPIO_IDR_ID9                   GPIO_IDR_ID9_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID10_Pos              (10U)
#define GPIO_IDR_ID10_Msk              (0x1U << GPIO_IDR_ID10_Pos)              /*!< 0x00000400 */
#define GPIO_IDR_ID10                  GPIO_IDR_ID10_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID11_Pos              (11U)
#define GPIO_IDR_ID11_Msk              (0x1U << GPIO_IDR_ID11_Pos)              /*!< 0x00000800 */
#define GPIO_IDR_ID11                  GPIO_IDR_ID11_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID12_Pos              (12U)
#define GPIO_IDR_ID12_Msk              (0x1U << GPIO_IDR_ID12_Pos)              /*!< 0x00001000 */
#define GPIO_IDR_ID12                  GPIO_IDR_ID12_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID13_Pos              (13U)
#define GPIO_IDR_ID13_Msk              (0x1U << GPIO_IDR_ID13_Pos)              /*!< 0x00002000 */
#define GPIO_IDR_ID13                  GPIO_IDR_ID13_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID14_Pos              (14U)
#define GPIO_IDR_ID14_Msk              (0x1U << GPIO_IDR_ID14_Pos)              /*!< 0x00004000 */
#define GPIO_IDR_ID14                  GPIO_IDR_ID14_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID15_Pos              (15U)
#define GPIO_IDR_ID15_Msk              (0x1U << GPIO_IDR_ID15_Pos)              /*!< 0x00008000 */
#define GPIO_IDR_ID15                  GPIO_IDR_ID15_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */

/*******************  Bit definition for GPIO_ODR register  *******************/
#define GPIO_ODR_OD0_Pos               (0U)
#define GPIO_ODR_OD0_Msk               (0x1U << GPIO_ODR_OD0_Pos)               /*!< 0x00000001 */
#define GPIO_ODR_OD0                   GPIO_ODR_OD0_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD1_Pos               (1U)
#define GPIO_ODR_OD1_Msk               (0x1U << GPIO_ODR_OD1_Pos)               /*!< 0x00000002 */
#define GPIO_ODR_OD1                   GPIO_ODR_OD1_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD2_Pos               (2U)
#define GPIO_ODR_OD2_Msk               (0x1U << GPIO_ODR_OD2_Pos)               /*!< 0x00000004 */
#define GPIO_ODR_OD2                   GPIO_ODR_OD2_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD3_Pos               (3U)
#define GPIO_ODR_OD3_Msk               (0x1U << GPIO_ODR_OD3_Pos)               /*!< 0x00000008 */
#define GPIO_ODR_OD3                   GPIO_ODR_OD3_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD4_Pos               (4U)
#define GPIO_ODR_OD4_Msk               (0x1U << GPIO_ODR_OD4_Pos)               /*!< 0x00000010 */
#define GPIO_ODR_OD4                   GPIO_ODR_OD4_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD5_Pos               (5U)
#define GPIO_ODR_OD5_Msk               (0x1U << GPIO_ODR_OD5_Pos)               /*!< 0x00000020 */
#define GPIO_ODR_OD5                   GPIO_ODR_OD5_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD6_Pos               (6U)
#define GPIO_ODR_OD6_Msk               (0x1U << GPIO_ODR_OD6_Pos)               /*!< 0x00000040 */
#define GPIO_ODR_OD6                   GPIO_ODR_OD6_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD7_Pos               (7U)
#define GPIO_ODR_OD7_Msk               (0x1U << GPIO_ODR_OD7_Pos)               /*!< 0x00000080 */
#define GPIO_ODR_OD7                   GPIO_ODR_OD7_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD8_Pos               (8U)
#define GPIO_ODR_OD8_Msk               (0x1U << GPIO_ODR_OD8_Pos)               /*!< 0x00000100 */
#define GPIO_ODR_OD8                   GPIO_ODR_OD8_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD9_Pos               (9U)
#define GPIO_ODR_OD9_Msk               (0x1U << GPIO_ODR_OD9_Pos)               /*!< 0x00000200 */
#define GPIO_ODR_OD9                   GPIO_ODR_OD9_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD10_Pos              (10U)
#define GPIO_ODR_OD10_Msk              (0x1U << GPIO_ODR_OD10_Pos)              /*!< 0x00000400 */
#define GPIO_ODR_OD10                  GPIO_ODR_OD10_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD11_Pos              (11U)
#define GPIO_ODR_OD11_Msk              (0x1U << GPIO_ODR_OD11_Pos)              /*!< 0x00000800 */
#define GPIO_ODR_OD11                  GPIO_ODR_OD11_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD12_Pos              (12U)
#define GPIO_ODR_OD12_Msk              (0x1U << GPIO_ODR_OD12_Pos)              /*!< 0x00001000 */
#define GPIO_ODR_OD12                  GPIO_ODR_OD12_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD13_Pos              (13U)
#define GPIO_ODR_OD13_Msk              (0x1U << GPIO_ODR_OD13_Pos)              /*!< 0x00002000 */
#define GPIO_ODR_OD13                  GPIO_ODR_OD13_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD14_Pos              (14U)
#define GPIO_ODR_OD14_Msk              (0x1U << GPIO_ODR_OD14_Pos)              /*!< 0x00004000 */
#define GPIO_ODR_OD14                  GPIO_ODR_OD14_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD15_Pos              (15U)
#define GPIO_ODR_OD15_Msk              (0x1U << GPIO_ODR_OD15_Pos)              /*!< 0x00008000 */
#define GPIO_ODR_OD15                  GPIO_ODR_OD15_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_BSRR register  *******************/
#define GPIO_BSRR_BS0_Pos              (0U)
#define GPIO_BSRR_BS0_Msk              (0x1U << GPIO_BSRR_BS0_Pos)              /*!< 0x00000001 */
#define GPIO_BSRR_BS0                  GPIO_BSRR_BS0_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS1_Pos              (1U)
#define GPIO_BSRR_BS1_Msk              (0x1U << GPIO_BSRR_BS1_Pos)              /*!< 0x00000002 */
#define GPIO_BSRR_BS1                  GPIO_BSRR_BS1_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS2_Pos              (2U)
#define GPIO_BSRR_BS2_Msk              (0x1U << GPIO_BSRR_BS2_Pos)              /*!< 0x00000004 */
#define GPIO_BSRR_BS2                  GPIO_BSRR_BS2_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS3_Pos              (3U)
#define GPIO_BSRR_BS3_Msk              (0x1U << GPIO_BSRR_BS3_Pos)              /*!< 0x00000008 */
#define GPIO_BSRR_BS3                  GPIO_BSRR_BS3_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS4_Pos              (4U)
#define GPIO_BSRR_BS4_Msk              (0x1U << GPIO_BSRR_BS4_Pos)              /*!< 0x00000010 */
#define GPIO_BSRR_BS4                  GPIO_BSRR_BS4_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS5_Pos              (5U)
#define GPIO_BSRR_BS5_Msk              (0x1U << GPIO_BSRR_BS5_Pos)              /*!< 0x00000020 */
#define GPIO_BSRR_BS5                  GPIO_BSRR_BS5_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS6_Pos              (6U)
#define GPIO_BSRR_BS6_Msk              (0x1U << GPIO_BSRR_BS6_Pos)              /*!< 0x00000040 */
#define GPIO_BSRR_BS6                  GPIO_BSRR_BS6_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS7_Pos              (7U)
#define GPIO_BSRR_BS7_Msk              (0x1U << GPIO_BSRR_BS7_Pos)              /*!< 0x00000080 */
#define GPIO_BSRR_BS7                  GPIO_BSRR_BS7_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS8_Pos              (8U)
#define GPIO_BSRR_BS8_Msk              (0x1U << GPIO_BSRR_BS8_Pos)              /*!< 0x00000100 */
#define GPIO_BSRR_BS8                  GPIO_BSRR_BS8_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS9_Pos              (9U)
#define GPIO_BSRR_BS9_Msk              (0x1U << GPIO_BSRR_BS9_Pos)              /*!< 0x00000200 */
#define GPIO_BSRR_BS9                  GPIO_BSRR_BS9_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS10_Pos             (10U)
#define GPIO_BSRR_BS10_Msk             (0x1U << GPIO_BSRR_BS10_Pos)             /*!< 0x00000400 */
#define GPIO_BSRR_BS10                 GPIO_BSRR_BS10_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS11_Pos             (11U)
#define GPIO_BSRR_BS11_Msk             (0x1U << GPIO_BSRR_BS11_Pos)             /*!< 0x00000800 */
#define GPIO_BSRR_BS11                 GPIO_BSRR_BS11_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS12_Pos             (12U)
#define GPIO_BSRR_BS12_Msk             (0x1U << GPIO_BSRR_BS12_Pos)             /*!< 0x00001000 */
#define GPIO_BSRR_BS12                 GPIO_BSRR_BS12_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS13_Pos             (13U)
#define GPIO_BSRR_BS13_Msk             (0x1U << GPIO_BSRR_BS13_Pos)             /*!< 0x00002000 */
#define GPIO_BSRR_BS13                 GPIO_BSRR_BS13_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS14_Pos             (14U)
#define GPIO_BSRR_BS14_Msk             (0x1U << GPIO_BSRR_BS14_Pos)             /*!< 0x00004000 */
#define GPIO_BSRR_BS14                 GPIO_BSRR_BS14_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS15_Pos             (15U)
#define GPIO_BSRR_BS15_Msk             (0x1U << GPIO_BSRR_BS15_Pos)             /*!< 0x00008000 */
#define GPIO_BSRR_BS15                 GPIO_BSRR_BS15_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR0_Pos              (16U)
#define GPIO_BSRR_BR0_Msk              (0x1U << GPIO_BSRR_BR0_Pos)              /*!< 0x00010000 */
#define GPIO_BSRR_BR0                  GPIO_BSRR_BR0_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR1_Pos              (17U)
#define GPIO_BSRR_BR1_Msk              (0x1U << GPIO_BSRR_BR1_Pos)              /*!< 0x00020000 */
#define GPIO_BSRR_BR1                  GPIO_BSRR_BR1_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR2_Pos              (18U)
#define GPIO_BSRR_BR2_Msk              (0x1U << GPIO_BSRR_BR2_Pos)              /*!< 0x00040000 */
#define GPIO_BSRR_BR2                  GPIO_BSRR_BR2_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR3_Pos              (19U)
#define GPIO_BSRR_BR3_Msk              (0x1U << GPIO_BSRR_BR3_Pos)              /*!< 0x00080000 */
#define GPIO_BSRR_BR3                  GPIO_BSRR_BR3_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR4_Pos              (20U)
#define GPIO_BSRR_BR4_Msk              (0x1U << GPIO_BSRR_BR4_Pos)              /*!< 0x00100000 */
#define GPIO_BSRR_BR4                  GPIO_BSRR_BR4_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR5_Pos              (21U)
#define GPIO_BSRR_BR5_Msk              (0x1U << GPIO_BSRR_BR5_Pos)              /*!< 0x00200000 */
#define GPIO_BSRR_BR5                  GPIO_BSRR_BR5_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR6_Pos              (22U)
#define GPIO_BSRR_BR6_Msk              (0x1U << GPIO_BSRR_BR6_Pos)              /*!< 0x00400000 */
#define GPIO_BSRR_BR6                  GPIO_BSRR_BR6_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR7_Pos              (23U)
#define GPIO_BSRR_BR7_Msk              (0x1U << GPIO_BSRR_BR7_Pos)              /*!< 0x00800000 */
#define GPIO_BSRR_BR7                  GPIO_BSRR_BR7_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR8_Pos              (24U)
#define GPIO_BSRR_BR8_Msk              (0x1U << GPIO_BSRR_BR8_Pos)              /*!< 0x01000000 */
#define GPIO_BSRR_BR8                  GPIO_BSRR_BR8_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR9_Pos              (25U)
#define GPIO_BSRR_BR9_Msk              (0x1U << GPIO_BSRR_BR9_Pos)              /*!< 0x02000000 */
#define GPIO_BSRR_BR9                  GPIO_BSRR_BR9_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR10_Pos             (26U)
#define GPIO_BSRR_BR10_Msk             (0x1U << GPIO_BSRR_BR10_Pos)             /*!< 0x04000000 */
#define GPIO_BSRR_BR10                 GPIO_BSRR_BR10_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR11_Pos             (27U)
#define GPIO_BSRR_BR11_Msk             (0x1U << GPIO_BSRR_BR11_Pos)             /*!< 0x08000000 */
#define GPIO_BSRR_BR11                 GPIO_BSRR_BR11_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR12_Pos             (28U)
#define GPIO_BSRR_BR12_Msk             (0x1U << GPIO_BSRR_BR12_Pos)             /*!< 0x10000000 */
#define GPIO_BSRR_BR12                 GPIO_BSRR_BR12_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR13_Pos             (29U)
#define GPIO_BSRR_BR13_Msk             (0x1U << GPIO_BSRR_BR13_Pos)             /*!< 0x20000000 */
#define GPIO_BSRR_BR13                 GPIO_BSRR_BR13_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR14_Pos             (30U)
#define GPIO_BSRR_BR14_Msk             (0x1U << GPIO_BSRR_BR14_Pos)             /*!< 0x40000000 */
#define GPIO_BSRR_BR14                 GPIO_BSRR_BR14_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR15_Pos             (31U)
#define GPIO_BSRR_BR15_Msk             (0x1U << GPIO_BSRR_BR15_Pos)             /*!< 0x80000000 */
#define GPIO_BSRR_BR15                 GPIO_BSRR_BR15_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */

/******************  Bit definition for GPIO_LCKR register  *******************/
#define GPIO_LCKR_LCK0_Pos             (0U)
#define GPIO_LCKR_LCK0_Msk             (0x1U << GPIO_LCKR_LCK0_Pos)             /*!< 0x00000001 */
#define GPIO_LCKR_LCK0                 GPIO_LCKR_LCK0_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK1_Pos             (1U)
#define GPIO_LCKR_LCK1_Msk             (0x1U << GPIO_LCKR_LCK1_Pos)             /*!< 0x00000002 */
#define GPIO_LCKR_LCK1                 GPIO_LCKR_LCK1_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK2_Pos             (2U)
#define GPIO_LCKR_LCK2_Msk             (0x1U << GPIO_LCKR_LCK2_Pos)             /*!< 0x00000004 */
#define GPIO_LCKR_LCK2                 GPIO_LCKR_LCK2_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK3_Pos             (3U)
#define GPIO_LCKR_LCK3_Msk             (0x1U << GPIO_LCKR_LCK3_Pos)             /*!< 0x00000008 */
#define GPIO_LCKR_LCK3                 GPIO_LCKR_LCK3_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK4_Pos             (4U)
#define GPIO_LCKR_LCK4_Msk             (0x1U << GPIO_LCKR_LCK4_Pos)             /*!< 0x00000010 */
#define GPIO_LCKR_LCK4                 GPIO_LCKR_LCK4_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK5_Pos             (5U)
#define GPIO_LCKR_LCK5_Msk             (0x1U << GPIO_LCKR_LCK5_Pos)             /*!< 0x00000020 */
#define GPIO_LCKR_LCK5                 GPIO_LCKR_LCK5_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK6_Pos             (6U)
#define GPIO_LCKR_LCK6_Msk             (0x1U << GPIO_LCKR_LCK6_Pos)             /*!< 0x00000040 */
#define GPIO_LCKR_LCK6                 GPIO_LCKR_LCK6_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK7_Pos             (7U)
#define GPIO_LCKR_LCK7_Msk             (0x1U << GPIO_LCKR_LCK7_Pos)             /*!< 0x00000080 */
#define GPIO_LCKR_LCK7                 GPIO_LCKR_LCK7_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK8_Pos             (8U)
#define GPIO_LCKR_LCK8_Msk             (0x1U << GPIO_LCKR_LCK8_Pos)             /*!< 0x00000100 */
#define GPIO_LCKR_LCK8                 GPIO_LCKR_LCK8_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK9_Pos             (9U)
#define GPIO_LCKR_LCK9_Msk             (0x1U << GPIO_LCKR_LCK9_Pos)             /*!< 0x00000200 */
#define GPIO_LCKR_LCK9                 GPIO_LCKR_LCK9_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK10_Pos            (10U)
#define GPIO_LCKR_LCK10_Msk            (0x1U << GPIO_LCKR_LCK10_Pos)            /*!< 0x00000400 */
#define GPIO_LCKR_LCK10                GPIO_LCKR_LCK10_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK11_Pos            (11U)
#define GPIO_LCKR_LCK11_Msk            (0x1U << GPIO_LCKR_LCK11_Pos)            /*!< 0x00000800 */
#define GPIO_LCKR_LCK11                GPIO_LCKR_LCK11_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK12_Pos            (12U)
#define GPIO_LCKR_LCK12_Msk            (0x1U << GPIO_LCKR_LCK12_Pos)            /*!< 0x00001000 */
#define GPIO_LCKR_LCK12                GPIO_LCKR_LCK12_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK13_Pos            (13U)
#define GPIO_LCKR_LCK13_Msk            (0x1U << GPIO_LCKR_LCK13_Pos)            /*!< 0x00002000 */
#define GPIO_LCKR_LCK13                GPIO_LCKR_LCK13_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK14_Pos            (14U)
#define GPIO_LCKR_LCK14_Msk            (0x1U << GPIO_LCKR_LCK14_Pos)            /*!< 0x00004000 */
#define GPIO_LCKR_LCK14                GPIO_LCKR_LCK14_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK15_Pos            (15U)
#define GPIO_LCKR_LCK15_Msk            (0x1U << GPIO_LCKR_LCK15_Pos)            /*!< 0x00008000 */
#define GPIO_LCKR_LCK15                GPIO_LCKR_LCK15_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCKK_Pos             (16U)
#define GPIO_LCKR_LCKK_Msk             (0x1U << GPIO_LCKR_LCKK_Pos)             /*!< 0x00010000 */
#define GPIO_LCKR_LCKK                 GPIO_LCKR_LCKK_Msk                       /*!< Lock key */

/******************  Bit definition for GPIO_AFRL register  *******************/
#define GPIO_AFRL_AFSEL0_Pos           (0U)
#define GPIO_AFRL_AFSEL0_Msk           (0xFU << GPIO_AFRL_AFSEL0_Pos)           /*!< 0x0000000F */
#define GPIO_AFRL_AFSEL0               GPIO_AFRL_AFSEL0_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL1_Pos           (4U)
#define GPIO_AFRL_AFSEL1_Msk           (0xFU << GPIO_AFRL_AFSEL1_Pos)           /*!< 0x000000F0 */
#define GPIO_AFRL_AFSEL1               GPIO_AFRL_AFSEL1_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL2_Pos           (8U)
#define GPIO_AFRL_AFSEL2_Msk           (0xFU << GPIO_AFRL_AFSEL2_Pos)           /*!< 0x00000F00 */
#define GPIO_AFRL_AFSEL2               GPIO_AFRL_AFSEL2_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL3_Pos           (12U)
#define GPIO_AFRL_AFSEL3_Msk           (0xFU << GPIO_AFRL_AFSEL3_Pos)           /*!< 0x0000F000 */
#define GPIO_AFRL_AFSEL3               GPIO_AFRL_AFSEL3_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL4_Pos           (16U)
#define GPIO_AFRL_AFSEL4_Msk           (0xFU << GPIO_AFRL_AFSEL4_Pos)           /*!< 0x000F0000 */
#define GPIO_AFRL_AFSEL4               GPIO_AFRL_AFSEL4_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL5_Pos           (20U)
#define GPIO_AFRL_AFSEL5_Msk           (0xFU << GPIO_AFRL_AFSEL5_Pos)           /*!< 0x00F00000 */
#define GPIO_AFRL_AFSEL5               GPIO_AFRL_AFSEL5_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL6_Pos           (24U)
#define GPIO_AFRL_AFSEL6_Msk           (0xFU << GPIO_AFRL_AFSEL6_Pos)           /*!< 0x0F000000 */
#define GPIO_AFRL_AFSEL6               GPIO_AFRL_AFSEL6_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL7_Pos           (28U)
#define GPIO_AFRL_AFSEL7_Msk           (0xFU << GPIO_AFRL_AFSEL7_Pos)           /*!< 0xF0000000 */
#define GPIO_AFRL_AFSEL7               GPIO_AFRL_AFSEL7_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_AFRH register  *******************/
#define GPIO_AFRH_AFSEL8_Pos           (0U)
#define GPIO_AFRH_AFSEL8_Msk           (0xFU << GPIO_AFRH_AFSEL8_Pos)           /*!< 0x0000000F */
#define GPIO_AFRH_AFSEL8               GPIO_AFRH_AFSEL8_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL9_Pos           (4U)
#define GPIO_AFRH_AFSEL9_Msk           (0xFU << GPIO_AFRH_AFSEL9_Pos)           /*!< 0x000000F0 */
#define GPIO_AFRH_AFSEL9               GPIO_AFRH_AFSEL9_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL10_Pos          (8U)
#define GPIO_AFRH_AFSEL10_Msk          (0xFU << GPIO_AFRH_AFSEL10_Pos)          /*!< 0x00000F00 */
#define GPIO_AFRH_AFSEL10              GPIO_AFRH_AFSEL10_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL11_Pos          (12U)
#define GPIO_AFRH_AFSEL11_Msk          (0xFU << GPIO_AFRH_AFSEL11_Pos)          /*!< 0x0000F000 */
#define GPIO_AFRH_AFSEL11              GPIO_AFRH_AFSEL11_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL12_Pos          (16U)
#define GPIO_AFRH_AFSEL12_Msk          (0xFU << GPIO_AFRH_AFSEL12_Pos)          /*!< 0x000F0000 */
#define GPIO_AFRH_AFSEL12              GPIO_AFRH_AFSEL12_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL13_Pos          (20U)
#define GPIO_AFRH_AFSEL13_Msk          (0xFU << GPIO_AFRH_AFSEL13_Pos)          /*!< 0x00F00000 */
#define GPIO_AFRH_AFSEL13              GPIO_AFRH_AFSEL13_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL14_Pos          (24U)
#define GPIO_AFRH_AFSEL14_Msk          (0xFU << GPIO_AFRH_AFSEL14_Pos)          /*!< 0x0F000000 */
#define GPIO_AFRH_AFSEL14              GPIO_AFRH_AFSEL14_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL15_Pos          (28U)
#define GPIO_AFRH_AFSEL15_Msk          (0xFU << GPIO_AFRH_AFSEL15_Pos)          /*!< 0xF0000000 */
#define GPIO_AFRH_AFSEL15              GPIO_AFRH_AFSEL15_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*******************  Bit definition for GPIO_BRR register  *******************/
#define GPIO_BRR_BR0_Pos               (0U)
#define GPIO_BRR_BR0_Msk               (0x1U << GPIO_BRR_BR0_Pos)               /*!< 0x00000001 */
#define GPIO_BRR_BR0                   GPIO_BRR_BR0_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR1_Pos               (1U)
#define GPIO_BRR_BR1_Msk               (0x1U << GPIO_BRR_BR1_Pos)               /*!< 0x00000002 */
#define GPIO_BRR_BR1                   GPIO_BRR_BR1_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR2_Pos               (2U)
#define GPIO_BRR_BR2_Msk               (0x1U << GPIO_BRR_BR2_Pos)               /*!< 0x00000004 */
#define GPIO_BRR_BR2                   GPIO_BRR_BR2_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR3_Pos               (3U)
#define GPIO_BRR_BR3_Msk               (0x1U << GPIO_BRR_BR3_Pos)               /*!< 0x00000008 */
#define GPIO_BRR_BR3                   GPIO_BRR_BR3_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR4_Pos               (4U)
#define GPIO_BRR_BR4_Msk               (0x1U << GPIO_BRR_BR4_Pos)               /*!< 0x00000010 */
#define GPIO_BRR_BR4                   GPIO_BRR_BR4_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR5_Pos               (5U)
#define GPIO_BRR_BR5_Msk               (0x1U << GPIO_BRR_BR5_Pos)               /*!< 0x00000020 */
#define GPIO_BRR_BR5                   GPIO_BRR_BR5_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR6_Pos               (6U)
#define GPIO_BRR_BR6_Msk               (0x1U << GPIO_BRR_BR6_Pos)               /*!< 0x00000040 */
#define GPIO_BRR_BR6                   GPIO_BRR_BR6_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR7_Pos               (7U)
#define GPIO_BRR_BR7_Msk               (0x1U << GPIO_BRR_BR7_Pos)               /*!< 0x00000080 */
#define GPIO_BRR_BR7                   GPIO_BRR_BR7_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR8_Pos               (8U)
#define GPIO_BRR_BR8_Msk               (0x1U << GPIO_BRR_BR8_Pos)               /*!< 0x00000100 */
#define GPIO_BRR_BR8                   GPIO_BRR_BR8_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR9_Pos               (9U)
#define GPIO_BRR_BR9_Msk               (0x1U << GPIO_BRR_BR9_Pos)               /*!< 0x00000200 */
#define GPIO_BRR_BR9                   GPIO_BRR_BR9_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR10_Pos              (10U)
#define GPIO_BRR_BR10_Msk              (0x1U << GPIO_BRR_BR10_Pos)              /*!< 0x00000400 */
#define GPIO_BRR_BR10                  GPIO_BRR_BR10_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR11_Pos              (11U)
#define GPIO_BRR_BR11_Msk              (0x1U << GPIO_BRR_BR11_Pos)              /*!< 0x00000800 */
#define GPIO_BRR_BR11                  GPIO_BRR_BR11_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR12_Pos              (12U)
#define GPIO_BRR_BR12_Msk              (0x1U << GPIO_BRR_BR12_Pos)              /*!< 0x00001000 */
#define GPIO_BRR_BR12                  GPIO_BRR_BR12_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR13_Pos              (13U)
#define GPIO_BRR_BR13_Msk              (0x1U << GPIO_BRR_BR13_Pos)              /*!< 0x00002000 */
#define GPIO_BRR_BR13                  GPIO_BRR_BR13_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR14_Pos              (14U)
#define GPIO_BRR_BR14_Msk              (0x1U << GPIO_BRR_BR14_Pos)              /*!< 0x00004000 */
#define GPIO_BRR_BR14                  GPIO_BRR_BR14_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR15_Pos              (15U)
#define GPIO_BRR_BR15_Msk              (0x1U << GPIO_BRR_BR15_Pos)              /*!< 0x00008000 */
#define GPIO_BRR_BR15                  GPIO_BRR_BR15_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */

/*******************  Bit definition for GPIO_OR register  ********************/

/*****************  Bit definition for GPIO_SECCFGR register  *****************/
#define GPIO_SECCFGR_SEC0_Pos          (0U)
#define GPIO_SECCFGR_SEC0_Msk          (0x1U << GPIO_SECCFGR_SEC0_Pos)          /*!< 0x00000001 */
#define GPIO_SECCFGR_SEC0              GPIO_SECCFGR_SEC0_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC1_Pos          (1U)
#define GPIO_SECCFGR_SEC1_Msk          (0x1U << GPIO_SECCFGR_SEC1_Pos)          /*!< 0x00000002 */
#define GPIO_SECCFGR_SEC1              GPIO_SECCFGR_SEC1_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC2_Pos          (2U)
#define GPIO_SECCFGR_SEC2_Msk          (0x1U << GPIO_SECCFGR_SEC2_Pos)          /*!< 0x00000004 */
#define GPIO_SECCFGR_SEC2              GPIO_SECCFGR_SEC2_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC3_Pos          (3U)
#define GPIO_SECCFGR_SEC3_Msk          (0x1U << GPIO_SECCFGR_SEC3_Pos)          /*!< 0x00000008 */
#define GPIO_SECCFGR_SEC3              GPIO_SECCFGR_SEC3_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC4_Pos          (4U)
#define GPIO_SECCFGR_SEC4_Msk          (0x1U << GPIO_SECCFGR_SEC4_Pos)          /*!< 0x00000010 */
#define GPIO_SECCFGR_SEC4              GPIO_SECCFGR_SEC4_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC5_Pos          (5U)
#define GPIO_SECCFGR_SEC5_Msk          (0x1U << GPIO_SECCFGR_SEC5_Pos)          /*!< 0x00000020 */
#define GPIO_SECCFGR_SEC5              GPIO_SECCFGR_SEC5_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC6_Pos          (6U)
#define GPIO_SECCFGR_SEC6_Msk          (0x1U << GPIO_SECCFGR_SEC6_Pos)          /*!< 0x00000040 */
#define GPIO_SECCFGR_SEC6              GPIO_SECCFGR_SEC6_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC7_Pos          (7U)
#define GPIO_SECCFGR_SEC7_Msk          (0x1U << GPIO_SECCFGR_SEC7_Pos)          /*!< 0x00000080 */
#define GPIO_SECCFGR_SEC7              GPIO_SECCFGR_SEC7_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC8_Pos          (8U)
#define GPIO_SECCFGR_SEC8_Msk          (0x1U << GPIO_SECCFGR_SEC8_Pos)          /*!< 0x00000100 */
#define GPIO_SECCFGR_SEC8              GPIO_SECCFGR_SEC8_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC9_Pos          (9U)
#define GPIO_SECCFGR_SEC9_Msk          (0x1U << GPIO_SECCFGR_SEC9_Pos)          /*!< 0x00000200 */
#define GPIO_SECCFGR_SEC9              GPIO_SECCFGR_SEC9_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC10_Pos         (10U)
#define GPIO_SECCFGR_SEC10_Msk         (0x1U << GPIO_SECCFGR_SEC10_Pos)         /*!< 0x00000400 */
#define GPIO_SECCFGR_SEC10             GPIO_SECCFGR_SEC10_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC11_Pos         (11U)
#define GPIO_SECCFGR_SEC11_Msk         (0x1U << GPIO_SECCFGR_SEC11_Pos)         /*!< 0x00000800 */
#define GPIO_SECCFGR_SEC11             GPIO_SECCFGR_SEC11_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC12_Pos         (12U)
#define GPIO_SECCFGR_SEC12_Msk         (0x1U << GPIO_SECCFGR_SEC12_Pos)         /*!< 0x00001000 */
#define GPIO_SECCFGR_SEC12             GPIO_SECCFGR_SEC12_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC13_Pos         (13U)
#define GPIO_SECCFGR_SEC13_Msk         (0x1U << GPIO_SECCFGR_SEC13_Pos)         /*!< 0x00002000 */
#define GPIO_SECCFGR_SEC13             GPIO_SECCFGR_SEC13_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC14_Pos         (14U)
#define GPIO_SECCFGR_SEC14_Msk         (0x1U << GPIO_SECCFGR_SEC14_Pos)         /*!< 0x00004000 */
#define GPIO_SECCFGR_SEC14             GPIO_SECCFGR_SEC14_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC15_Pos         (15U)
#define GPIO_SECCFGR_SEC15_Msk         (0x1U << GPIO_SECCFGR_SEC15_Pos)         /*!< 0x00008000 */
#define GPIO_SECCFGR_SEC15             GPIO_SECCFGR_SEC15_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */

/****************  Bit definition for GPIO_PRIVCFGR register  *****************/
#define GPIO_PRIVCFGR_PRIV0_Pos        (0U)
#define GPIO_PRIVCFGR_PRIV0_Msk        (0x1U << GPIO_PRIVCFGR_PRIV0_Pos)        /*!< 0x00000001 */
#define GPIO_PRIVCFGR_PRIV0            GPIO_PRIVCFGR_PRIV0_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV1_Pos        (1U)
#define GPIO_PRIVCFGR_PRIV1_Msk        (0x1U << GPIO_PRIVCFGR_PRIV1_Pos)        /*!< 0x00000002 */
#define GPIO_PRIVCFGR_PRIV1            GPIO_PRIVCFGR_PRIV1_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV2_Pos        (2U)
#define GPIO_PRIVCFGR_PRIV2_Msk        (0x1U << GPIO_PRIVCFGR_PRIV2_Pos)        /*!< 0x00000004 */
#define GPIO_PRIVCFGR_PRIV2            GPIO_PRIVCFGR_PRIV2_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV3_Pos        (3U)
#define GPIO_PRIVCFGR_PRIV3_Msk        (0x1U << GPIO_PRIVCFGR_PRIV3_Pos)        /*!< 0x00000008 */
#define GPIO_PRIVCFGR_PRIV3            GPIO_PRIVCFGR_PRIV3_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV4_Pos        (4U)
#define GPIO_PRIVCFGR_PRIV4_Msk        (0x1U << GPIO_PRIVCFGR_PRIV4_Pos)        /*!< 0x00000010 */
#define GPIO_PRIVCFGR_PRIV4            GPIO_PRIVCFGR_PRIV4_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV5_Pos        (5U)
#define GPIO_PRIVCFGR_PRIV5_Msk        (0x1U << GPIO_PRIVCFGR_PRIV5_Pos)        /*!< 0x00000020 */
#define GPIO_PRIVCFGR_PRIV5            GPIO_PRIVCFGR_PRIV5_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV6_Pos        (6U)
#define GPIO_PRIVCFGR_PRIV6_Msk        (0x1U << GPIO_PRIVCFGR_PRIV6_Pos)        /*!< 0x00000040 */
#define GPIO_PRIVCFGR_PRIV6            GPIO_PRIVCFGR_PRIV6_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV7_Pos        (7U)
#define GPIO_PRIVCFGR_PRIV7_Msk        (0x1U << GPIO_PRIVCFGR_PRIV7_Pos)        /*!< 0x00000080 */
#define GPIO_PRIVCFGR_PRIV7            GPIO_PRIVCFGR_PRIV7_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV8_Pos        (8U)
#define GPIO_PRIVCFGR_PRIV8_Msk        (0x1U << GPIO_PRIVCFGR_PRIV8_Pos)        /*!< 0x00000100 */
#define GPIO_PRIVCFGR_PRIV8            GPIO_PRIVCFGR_PRIV8_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV9_Pos        (9U)
#define GPIO_PRIVCFGR_PRIV9_Msk        (0x1U << GPIO_PRIVCFGR_PRIV9_Pos)        /*!< 0x00000200 */
#define GPIO_PRIVCFGR_PRIV9            GPIO_PRIVCFGR_PRIV9_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV10_Pos       (10U)
#define GPIO_PRIVCFGR_PRIV10_Msk       (0x1U << GPIO_PRIVCFGR_PRIV10_Pos)       /*!< 0x00000400 */
#define GPIO_PRIVCFGR_PRIV10           GPIO_PRIVCFGR_PRIV10_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV11_Pos       (11U)
#define GPIO_PRIVCFGR_PRIV11_Msk       (0x1U << GPIO_PRIVCFGR_PRIV11_Pos)       /*!< 0x00000800 */
#define GPIO_PRIVCFGR_PRIV11           GPIO_PRIVCFGR_PRIV11_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV12_Pos       (12U)
#define GPIO_PRIVCFGR_PRIV12_Msk       (0x1U << GPIO_PRIVCFGR_PRIV12_Pos)       /*!< 0x00001000 */
#define GPIO_PRIVCFGR_PRIV12           GPIO_PRIVCFGR_PRIV12_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV13_Pos       (13U)
#define GPIO_PRIVCFGR_PRIV13_Msk       (0x1U << GPIO_PRIVCFGR_PRIV13_Pos)       /*!< 0x00002000 */
#define GPIO_PRIVCFGR_PRIV13           GPIO_PRIVCFGR_PRIV13_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV14_Pos       (14U)
#define GPIO_PRIVCFGR_PRIV14_Msk       (0x1U << GPIO_PRIVCFGR_PRIV14_Pos)       /*!< 0x00004000 */
#define GPIO_PRIVCFGR_PRIV14           GPIO_PRIVCFGR_PRIV14_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV15_Pos       (15U)
#define GPIO_PRIVCFGR_PRIV15_Msk       (0x1U << GPIO_PRIVCFGR_PRIV15_Pos)       /*!< 0x00008000 */
#define GPIO_PRIVCFGR_PRIV15           GPIO_PRIVCFGR_PRIV15_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */

/****************  Bit definition for GPIO_SPCFGLOCK register  ****************/
#define GPIO_SPCFGLOCK_SPLCK0_Pos      (0U)
#define GPIO_SPCFGLOCK_SPLCK0_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK0_Pos)      /*!< 0x00000001 */
#define GPIO_SPCFGLOCK_SPLCK0          GPIO_SPCFGLOCK_SPLCK0_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK1_Pos      (1U)
#define GPIO_SPCFGLOCK_SPLCK1_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK1_Pos)      /*!< 0x00000002 */
#define GPIO_SPCFGLOCK_SPLCK1          GPIO_SPCFGLOCK_SPLCK1_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK2_Pos      (2U)
#define GPIO_SPCFGLOCK_SPLCK2_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK2_Pos)      /*!< 0x00000004 */
#define GPIO_SPCFGLOCK_SPLCK2          GPIO_SPCFGLOCK_SPLCK2_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK3_Pos      (3U)
#define GPIO_SPCFGLOCK_SPLCK3_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK3_Pos)      /*!< 0x00000008 */
#define GPIO_SPCFGLOCK_SPLCK3          GPIO_SPCFGLOCK_SPLCK3_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK4_Pos      (4U)
#define GPIO_SPCFGLOCK_SPLCK4_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK4_Pos)      /*!< 0x00000010 */
#define GPIO_SPCFGLOCK_SPLCK4          GPIO_SPCFGLOCK_SPLCK4_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK5_Pos      (5U)
#define GPIO_SPCFGLOCK_SPLCK5_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK5_Pos)      /*!< 0x00000020 */
#define GPIO_SPCFGLOCK_SPLCK5          GPIO_SPCFGLOCK_SPLCK5_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK6_Pos      (6U)
#define GPIO_SPCFGLOCK_SPLCK6_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK6_Pos)      /*!< 0x00000040 */
#define GPIO_SPCFGLOCK_SPLCK6          GPIO_SPCFGLOCK_SPLCK6_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK7_Pos      (7U)
#define GPIO_SPCFGLOCK_SPLCK7_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK7_Pos)      /*!< 0x00000080 */
#define GPIO_SPCFGLOCK_SPLCK7          GPIO_SPCFGLOCK_SPLCK7_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK8_Pos      (8U)
#define GPIO_SPCFGLOCK_SPLCK8_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK8_Pos)      /*!< 0x00000100 */
#define GPIO_SPCFGLOCK_SPLCK8          GPIO_SPCFGLOCK_SPLCK8_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK9_Pos      (9U)
#define GPIO_SPCFGLOCK_SPLCK9_Msk      (0x1U << GPIO_SPCFGLOCK_SPLCK9_Pos)      /*!< 0x00000200 */
#define GPIO_SPCFGLOCK_SPLCK9          GPIO_SPCFGLOCK_SPLCK9_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK10_Pos     (10U)
#define GPIO_SPCFGLOCK_SPLCK10_Msk     (0x1U << GPIO_SPCFGLOCK_SPLCK10_Pos)     /*!< 0x00000400 */
#define GPIO_SPCFGLOCK_SPLCK10         GPIO_SPCFGLOCK_SPLCK10_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK11_Pos     (11U)
#define GPIO_SPCFGLOCK_SPLCK11_Msk     (0x1U << GPIO_SPCFGLOCK_SPLCK11_Pos)     /*!< 0x00000800 */
#define GPIO_SPCFGLOCK_SPLCK11         GPIO_SPCFGLOCK_SPLCK11_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK12_Pos     (12U)
#define GPIO_SPCFGLOCK_SPLCK12_Msk     (0x1U << GPIO_SPCFGLOCK_SPLCK12_Pos)     /*!< 0x00001000 */
#define GPIO_SPCFGLOCK_SPLCK12         GPIO_SPCFGLOCK_SPLCK12_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK13_Pos     (13U)
#define GPIO_SPCFGLOCK_SPLCK13_Msk     (0x1U << GPIO_SPCFGLOCK_SPLCK13_Pos)     /*!< 0x00002000 */
#define GPIO_SPCFGLOCK_SPLCK13         GPIO_SPCFGLOCK_SPLCK13_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK14_Pos     (14U)
#define GPIO_SPCFGLOCK_SPLCK14_Msk     (0x1U << GPIO_SPCFGLOCK_SPLCK14_Pos)     /*!< 0x00004000 */
#define GPIO_SPCFGLOCK_SPLCK14         GPIO_SPCFGLOCK_SPLCK14_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SPCFGLOCK_SPLCK15_Pos     (15U)
#define GPIO_SPCFGLOCK_SPLCK15_Msk     (0x1U << GPIO_SPCFGLOCK_SPLCK15_Pos)     /*!< 0x00008000 */
#define GPIO_SPCFGLOCK_SPLCK15         GPIO_SPCFGLOCK_SPLCK15_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */

/*******************  Bit definition for GPIO_LKR register  *******************/
#define GPIO_LKR_LK0_Pos               (0U)
#define GPIO_LKR_LK0_Msk               (0x1U << GPIO_LKR_LK0_Pos)               /*!< 0x00000001 */
#define GPIO_LKR_LK0                   GPIO_LKR_LK0_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK1_Pos               (1U)
#define GPIO_LKR_LK1_Msk               (0x1U << GPIO_LKR_LK1_Pos)               /*!< 0x00000002 */
#define GPIO_LKR_LK1                   GPIO_LKR_LK1_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK2_Pos               (2U)
#define GPIO_LKR_LK2_Msk               (0x1U << GPIO_LKR_LK2_Pos)               /*!< 0x00000004 */
#define GPIO_LKR_LK2                   GPIO_LKR_LK2_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK3_Pos               (3U)
#define GPIO_LKR_LK3_Msk               (0x1U << GPIO_LKR_LK3_Pos)               /*!< 0x00000008 */
#define GPIO_LKR_LK3                   GPIO_LKR_LK3_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK4_Pos               (4U)
#define GPIO_LKR_LK4_Msk               (0x1U << GPIO_LKR_LK4_Pos)               /*!< 0x00000010 */
#define GPIO_LKR_LK4                   GPIO_LKR_LK4_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK5_Pos               (5U)
#define GPIO_LKR_LK5_Msk               (0x1U << GPIO_LKR_LK5_Pos)               /*!< 0x00000020 */
#define GPIO_LKR_LK5                   GPIO_LKR_LK5_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK6_Pos               (6U)
#define GPIO_LKR_LK6_Msk               (0x1U << GPIO_LKR_LK6_Pos)               /*!< 0x00000040 */
#define GPIO_LKR_LK6                   GPIO_LKR_LK6_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK7_Pos               (7U)
#define GPIO_LKR_LK7_Msk               (0x1U << GPIO_LKR_LK7_Pos)               /*!< 0x00000080 */
#define GPIO_LKR_LK7                   GPIO_LKR_LK7_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK8_Pos               (8U)
#define GPIO_LKR_LK8_Msk               (0x1U << GPIO_LKR_LK8_Pos)               /*!< 0x00000100 */
#define GPIO_LKR_LK8                   GPIO_LKR_LK8_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK9_Pos               (9U)
#define GPIO_LKR_LK9_Msk               (0x1U << GPIO_LKR_LK9_Pos)               /*!< 0x00000200 */
#define GPIO_LKR_LK9                   GPIO_LKR_LK9_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK10_Pos              (10U)
#define GPIO_LKR_LK10_Msk              (0x1U << GPIO_LKR_LK10_Pos)              /*!< 0x00000400 */
#define GPIO_LKR_LK10                  GPIO_LKR_LK10_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK11_Pos              (11U)
#define GPIO_LKR_LK11_Msk              (0x1U << GPIO_LKR_LK11_Pos)              /*!< 0x00000800 */
#define GPIO_LKR_LK11                  GPIO_LKR_LK11_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK12_Pos              (12U)
#define GPIO_LKR_LK12_Msk              (0x1U << GPIO_LKR_LK12_Pos)              /*!< 0x00001000 */
#define GPIO_LKR_LK12                  GPIO_LKR_LK12_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK13_Pos              (13U)
#define GPIO_LKR_LK13_Msk              (0x1U << GPIO_LKR_LK13_Pos)              /*!< 0x00002000 */
#define GPIO_LKR_LK13                  GPIO_LKR_LK13_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK14_Pos              (14U)
#define GPIO_LKR_LK14_Msk              (0x1U << GPIO_LKR_LK14_Pos)              /*!< 0x00004000 */
#define GPIO_LKR_LK14                  GPIO_LKR_LK14_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK15_Pos              (15U)
#define GPIO_LKR_LK15_Msk              (0x1U << GPIO_LKR_LK15_Pos)              /*!< 0x00008000 */
#define GPIO_LKR_LK15                  GPIO_LKR_LK15_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_DELAYRL register  *****************/
#define GPIO_DELAYRL_DELAY0_Pos        (0U)
#define GPIO_DELAYRL_DELAY0_Msk        (0xFU << GPIO_DELAYRL_DELAY0_Pos)        /*!< 0x0000000F */
#define GPIO_DELAYRL_DELAY0            GPIO_DELAYRL_DELAY0_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DELAY1_Pos        (4U)
#define GPIO_DELAYRL_DELAY1_Msk        (0xFU << GPIO_DELAYRL_DELAY1_Pos)        /*!< 0x000000F0 */
#define GPIO_DELAYRL_DELAY1            GPIO_DELAYRL_DELAY1_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DELAY2_Pos        (8U)
#define GPIO_DELAYRL_DELAY2_Msk        (0xFU << GPIO_DELAYRL_DELAY2_Pos)        /*!< 0x00000F00 */
#define GPIO_DELAYRL_DELAY2            GPIO_DELAYRL_DELAY2_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DELAY3_Pos        (12U)
#define GPIO_DELAYRL_DELAY3_Msk        (0xFU << GPIO_DELAYRL_DELAY3_Pos)        /*!< 0x0000F000 */
#define GPIO_DELAYRL_DELAY3            GPIO_DELAYRL_DELAY3_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DELAY4_Pos        (16U)
#define GPIO_DELAYRL_DELAY4_Msk        (0xFU << GPIO_DELAYRL_DELAY4_Pos)        /*!< 0x000F0000 */
#define GPIO_DELAYRL_DELAY4            GPIO_DELAYRL_DELAY4_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DELAY5_Pos        (20U)
#define GPIO_DELAYRL_DELAY5_Msk        (0xFU << GPIO_DELAYRL_DELAY5_Pos)        /*!< 0x00F00000 */
#define GPIO_DELAYRL_DELAY5            GPIO_DELAYRL_DELAY5_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DELAY6_Pos        (24U)
#define GPIO_DELAYRL_DELAY6_Msk        (0xFU << GPIO_DELAYRL_DELAY6_Pos)        /*!< 0x0F000000 */
#define GPIO_DELAYRL_DELAY6            GPIO_DELAYRL_DELAY6_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DELAY7_Pos        (28U)
#define GPIO_DELAYRL_DELAY7_Msk        (0xFU << GPIO_DELAYRL_DELAY7_Pos)        /*!< 0xF0000000 */
#define GPIO_DELAYRL_DELAY7            GPIO_DELAYRL_DELAY7_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_DELAYRH register  *****************/
#define GPIO_DELAYRH_DELAY8_Pos        (0U)
#define GPIO_DELAYRH_DELAY8_Msk        (0xFU << GPIO_DELAYRH_DELAY8_Pos)        /*!< 0x0000000F */
#define GPIO_DELAYRH_DELAY8            GPIO_DELAYRH_DELAY8_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DELAY9_Pos        (4U)
#define GPIO_DELAYRH_DELAY9_Msk        (0xFU << GPIO_DELAYRH_DELAY9_Pos)        /*!< 0x000000F0 */
#define GPIO_DELAYRH_DELAY9            GPIO_DELAYRH_DELAY9_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DELAY10_Pos       (8U)
#define GPIO_DELAYRH_DELAY10_Msk       (0xFU << GPIO_DELAYRH_DELAY10_Pos)       /*!< 0x00000F00 */
#define GPIO_DELAYRH_DELAY10           GPIO_DELAYRH_DELAY10_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DELAY11_Pos       (12U)
#define GPIO_DELAYRH_DELAY11_Msk       (0xFU << GPIO_DELAYRH_DELAY11_Pos)       /*!< 0x0000F000 */
#define GPIO_DELAYRH_DELAY11           GPIO_DELAYRH_DELAY11_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DELAY12_Pos       (16U)
#define GPIO_DELAYRH_DELAY12_Msk       (0xFU << GPIO_DELAYRH_DELAY12_Pos)       /*!< 0x000F0000 */
#define GPIO_DELAYRH_DELAY12           GPIO_DELAYRH_DELAY12_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DELAY13_Pos       (20U)
#define GPIO_DELAYRH_DELAY13_Msk       (0xFU << GPIO_DELAYRH_DELAY13_Pos)       /*!< 0x00F00000 */
#define GPIO_DELAYRH_DELAY13           GPIO_DELAYRH_DELAY13_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DELAY14_Pos       (24U)
#define GPIO_DELAYRH_DELAY14_Msk       (0xFU << GPIO_DELAYRH_DELAY14_Pos)       /*!< 0x0F000000 */
#define GPIO_DELAYRH_DELAY14           GPIO_DELAYRH_DELAY14_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DELAY15_Pos       (28U)
#define GPIO_DELAYRH_DELAY15_Msk       (0xFU << GPIO_DELAYRH_DELAY15_Pos)       /*!< 0xF0000000 */
#define GPIO_DELAYRH_DELAY15           GPIO_DELAYRH_DELAY15_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/****************  Bit definition for GPIO_PIOCFGRL register  *****************/
#define GPIO_PIOCFGRL_PIOCFG0_Pos      (0U)
#define GPIO_PIOCFGRL_PIOCFG0_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG0_Pos)      /*!< 0x0000000F */
#define GPIO_PIOCFGRL_PIOCFG0          GPIO_PIOCFGRL_PIOCFG0_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRL_PIOCFG1_Pos      (4U)
#define GPIO_PIOCFGRL_PIOCFG1_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG1_Pos)      /*!< 0x000000F0 */
#define GPIO_PIOCFGRL_PIOCFG1          GPIO_PIOCFGRL_PIOCFG1_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRL_PIOCFG2_Pos      (8U)
#define GPIO_PIOCFGRL_PIOCFG2_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG2_Pos)      /*!< 0x00000F00 */
#define GPIO_PIOCFGRL_PIOCFG2          GPIO_PIOCFGRL_PIOCFG2_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRL_PIOCFG3_Pos      (12U)
#define GPIO_PIOCFGRL_PIOCFG3_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG3_Pos)      /*!< 0x0000F000 */
#define GPIO_PIOCFGRL_PIOCFG3          GPIO_PIOCFGRL_PIOCFG3_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRL_PIOCFG4_Pos      (16U)
#define GPIO_PIOCFGRL_PIOCFG4_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG4_Pos)      /*!< 0x000F0000 */
#define GPIO_PIOCFGRL_PIOCFG4          GPIO_PIOCFGRL_PIOCFG4_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRL_PIOCFG5_Pos      (20U)
#define GPIO_PIOCFGRL_PIOCFG5_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG5_Pos)      /*!< 0x00F00000 */
#define GPIO_PIOCFGRL_PIOCFG5          GPIO_PIOCFGRL_PIOCFG5_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRL_PIOCFG6_Pos      (24U)
#define GPIO_PIOCFGRL_PIOCFG6_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG6_Pos)      /*!< 0x0F000000 */
#define GPIO_PIOCFGRL_PIOCFG6          GPIO_PIOCFGRL_PIOCFG6_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRL_PIOCFG7_Pos      (28U)
#define GPIO_PIOCFGRL_PIOCFG7_Msk      (0xFU << GPIO_PIOCFGRL_PIOCFG7_Pos)      /*!< 0xF0000000 */
#define GPIO_PIOCFGRL_PIOCFG7          GPIO_PIOCFGRL_PIOCFG7_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/****************  Bit definition for GPIO_PIOCFGRH register  *****************/
#define GPIO_PIOCFGRH_PIOCFG8_Pos      (0U)
#define GPIO_PIOCFGRH_PIOCFG8_Msk      (0xFU << GPIO_PIOCFGRH_PIOCFG8_Pos)      /*!< 0x0000000F */
#define GPIO_PIOCFGRH_PIOCFG8          GPIO_PIOCFGRH_PIOCFG8_Msk                /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRH_PIOCFG9_Pos      (4U)
#define GPIO_PIOCFGRH_PIOCFG9_Msk      (0xFU << GPIO_PIOCFGRH_PIOCFG9_Pos)      /*!< 0x000000F0 */
#define GPIO_PIOCFGRH_PIOCFG9          GPIO_PIOCFGRH_PIOCFG9_Msk                /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRH_PIOCFG10_Pos     (8U)
#define GPIO_PIOCFGRH_PIOCFG10_Msk     (0xFU << GPIO_PIOCFGRH_PIOCFG10_Pos)     /*!< 0x00000F00 */
#define GPIO_PIOCFGRH_PIOCFG10         GPIO_PIOCFGRH_PIOCFG10_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRH_PIOCFG11_Pos     (12U)
#define GPIO_PIOCFGRH_PIOCFG11_Msk     (0xFU << GPIO_PIOCFGRH_PIOCFG11_Pos)     /*!< 0x0000F000 */
#define GPIO_PIOCFGRH_PIOCFG11         GPIO_PIOCFGRH_PIOCFG11_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRH_PIOCFG12_Pos     (16U)
#define GPIO_PIOCFGRH_PIOCFG12_Msk     (0xFU << GPIO_PIOCFGRH_PIOCFG12_Pos)     /*!< 0x000F0000 */
#define GPIO_PIOCFGRH_PIOCFG12         GPIO_PIOCFGRH_PIOCFG12_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRH_PIOCFG13_Pos     (20U)
#define GPIO_PIOCFGRH_PIOCFG13_Msk     (0xFU << GPIO_PIOCFGRH_PIOCFG13_Pos)     /*!< 0x00F00000 */
#define GPIO_PIOCFGRH_PIOCFG13         GPIO_PIOCFGRH_PIOCFG13_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRH_PIOCFG14_Pos     (24U)
#define GPIO_PIOCFGRH_PIOCFG14_Msk     (0xFU << GPIO_PIOCFGRH_PIOCFG14_Pos)     /*!< 0x0F000000 */
#define GPIO_PIOCFGRH_PIOCFG14         GPIO_PIOCFGRH_PIOCFG14_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PIOCFGRH_PIOCFG15_Pos     (28U)
#define GPIO_PIOCFGRH_PIOCFG15_Msk     (0xFU << GPIO_PIOCFGRH_PIOCFG15_Pos)     /*!< 0xF0000000 */
#define GPIO_PIOCFGRH_PIOCFG15         GPIO_PIOCFGRH_PIOCFG15_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/****************  Bit definition for GPIO_CIDCFGR0 register  *****************/
#define GPIO_CIDCFGR0_CFEN_Pos         (0U)
#define GPIO_CIDCFGR0_CFEN_Msk         (0x1U << GPIO_CIDCFGR0_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR0_CFEN             GPIO_CIDCFGR0_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR0_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR0_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR0_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR0_SEM_EN           GPIO_CIDCFGR0_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR0_SCID_Pos         (4U)
#define GPIO_CIDCFGR0_SCID_Msk         (0x3U << GPIO_CIDCFGR0_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR0_SCID             GPIO_CIDCFGR0_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR0_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR0_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR0_SEMWLC0          GPIO_CIDCFGR0_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR0_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR0_SEMWLC1          GPIO_CIDCFGR0_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR0_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR0_SEMWLC2          GPIO_CIDCFGR0_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR0_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR0_SEMWLC3          GPIO_CIDCFGR0_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR0 register  ******************/
#define GPIO_SEMCR0_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR0_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR0_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR0_SEM_MUTEX          GPIO_SEMCR0_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR0_SEMCID_Pos         (4U)
#define GPIO_SEMCR0_SEMCID_Msk         (0x3U << GPIO_SEMCR0_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR0_SEMCID             GPIO_SEMCR0_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR1 register  *****************/
#define GPIO_CIDCFGR1_CFEN_Pos         (0U)
#define GPIO_CIDCFGR1_CFEN_Msk         (0x1U << GPIO_CIDCFGR1_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR1_CFEN             GPIO_CIDCFGR1_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR1_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR1_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR1_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR1_SEM_EN           GPIO_CIDCFGR1_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR1_SCID_Pos         (4U)
#define GPIO_CIDCFGR1_SCID_Msk         (0x3U << GPIO_CIDCFGR1_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR1_SCID             GPIO_CIDCFGR1_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR1_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR1_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR1_SEMWLC0          GPIO_CIDCFGR1_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR1_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR1_SEMWLC1          GPIO_CIDCFGR1_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR1_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR1_SEMWLC2          GPIO_CIDCFGR1_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR1_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR1_SEMWLC3          GPIO_CIDCFGR1_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR1 register  ******************/
#define GPIO_SEMCR1_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR1_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR1_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR1_SEM_MUTEX          GPIO_SEMCR1_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR1_SEMCID_Pos         (4U)
#define GPIO_SEMCR1_SEMCID_Msk         (0x3U << GPIO_SEMCR1_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR1_SEMCID             GPIO_SEMCR1_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR2 register  *****************/
#define GPIO_CIDCFGR2_CFEN_Pos         (0U)
#define GPIO_CIDCFGR2_CFEN_Msk         (0x1U << GPIO_CIDCFGR2_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR2_CFEN             GPIO_CIDCFGR2_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR2_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR2_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR2_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR2_SEM_EN           GPIO_CIDCFGR2_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR2_SCID_Pos         (4U)
#define GPIO_CIDCFGR2_SCID_Msk         (0x3U << GPIO_CIDCFGR2_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR2_SCID             GPIO_CIDCFGR2_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR2_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR2_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR2_SEMWLC0          GPIO_CIDCFGR2_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR2_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR2_SEMWLC1          GPIO_CIDCFGR2_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR2_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR2_SEMWLC2          GPIO_CIDCFGR2_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR2_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR2_SEMWLC3          GPIO_CIDCFGR2_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR2 register  ******************/
#define GPIO_SEMCR2_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR2_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR2_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR2_SEM_MUTEX          GPIO_SEMCR2_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR2_SEMCID_Pos         (4U)
#define GPIO_SEMCR2_SEMCID_Msk         (0x3U << GPIO_SEMCR2_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR2_SEMCID             GPIO_SEMCR2_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR3 register  *****************/
#define GPIO_CIDCFGR3_CFEN_Pos         (0U)
#define GPIO_CIDCFGR3_CFEN_Msk         (0x1U << GPIO_CIDCFGR3_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR3_CFEN             GPIO_CIDCFGR3_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR3_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR3_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR3_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR3_SEM_EN           GPIO_CIDCFGR3_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR3_SCID_Pos         (4U)
#define GPIO_CIDCFGR3_SCID_Msk         (0x3U << GPIO_CIDCFGR3_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR3_SCID             GPIO_CIDCFGR3_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR3_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR3_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR3_SEMWLC0          GPIO_CIDCFGR3_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR3_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR3_SEMWLC1          GPIO_CIDCFGR3_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR3_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR3_SEMWLC2          GPIO_CIDCFGR3_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR3_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR3_SEMWLC3          GPIO_CIDCFGR3_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR3 register  ******************/
#define GPIO_SEMCR3_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR3_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR3_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR3_SEM_MUTEX          GPIO_SEMCR3_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR3_SEMCID_Pos         (4U)
#define GPIO_SEMCR3_SEMCID_Msk         (0x3U << GPIO_SEMCR3_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR3_SEMCID             GPIO_SEMCR3_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR4 register  *****************/
#define GPIO_CIDCFGR4_CFEN_Pos         (0U)
#define GPIO_CIDCFGR4_CFEN_Msk         (0x1U << GPIO_CIDCFGR4_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR4_CFEN             GPIO_CIDCFGR4_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR4_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR4_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR4_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR4_SEM_EN           GPIO_CIDCFGR4_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR4_SCID_Pos         (4U)
#define GPIO_CIDCFGR4_SCID_Msk         (0x3U << GPIO_CIDCFGR4_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR4_SCID             GPIO_CIDCFGR4_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR4_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR4_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR4_SEMWLC0          GPIO_CIDCFGR4_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR4_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR4_SEMWLC1          GPIO_CIDCFGR4_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR4_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR4_SEMWLC2          GPIO_CIDCFGR4_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR4_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR4_SEMWLC3          GPIO_CIDCFGR4_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR4 register  ******************/
#define GPIO_SEMCR4_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR4_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR4_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR4_SEM_MUTEX          GPIO_SEMCR4_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR4_SEMCID_Pos         (4U)
#define GPIO_SEMCR4_SEMCID_Msk         (0x3U << GPIO_SEMCR4_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR4_SEMCID             GPIO_SEMCR4_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR5 register  *****************/
#define GPIO_CIDCFGR5_CFEN_Pos         (0U)
#define GPIO_CIDCFGR5_CFEN_Msk         (0x1U << GPIO_CIDCFGR5_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR5_CFEN             GPIO_CIDCFGR5_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR5_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR5_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR5_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR5_SEM_EN           GPIO_CIDCFGR5_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR5_SCID_Pos         (4U)
#define GPIO_CIDCFGR5_SCID_Msk         (0x3U << GPIO_CIDCFGR5_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR5_SCID             GPIO_CIDCFGR5_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR5_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR5_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR5_SEMWLC0          GPIO_CIDCFGR5_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR5_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR5_SEMWLC1          GPIO_CIDCFGR5_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR5_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR5_SEMWLC2          GPIO_CIDCFGR5_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR5_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR5_SEMWLC3          GPIO_CIDCFGR5_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR5 register  ******************/
#define GPIO_SEMCR5_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR5_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR5_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR5_SEM_MUTEX          GPIO_SEMCR5_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR5_SEMCID_Pos         (4U)
#define GPIO_SEMCR5_SEMCID_Msk         (0x3U << GPIO_SEMCR5_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR5_SEMCID             GPIO_SEMCR5_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR6 register  *****************/
#define GPIO_CIDCFGR6_CFEN_Pos         (0U)
#define GPIO_CIDCFGR6_CFEN_Msk         (0x1U << GPIO_CIDCFGR6_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR6_CFEN             GPIO_CIDCFGR6_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR6_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR6_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR6_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR6_SEM_EN           GPIO_CIDCFGR6_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR6_SCID_Pos         (4U)
#define GPIO_CIDCFGR6_SCID_Msk         (0x3U << GPIO_CIDCFGR6_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR6_SCID             GPIO_CIDCFGR6_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR6_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR6_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR6_SEMWLC0          GPIO_CIDCFGR6_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR6_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR6_SEMWLC1          GPIO_CIDCFGR6_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR6_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR6_SEMWLC2          GPIO_CIDCFGR6_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR6_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR6_SEMWLC3          GPIO_CIDCFGR6_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR6 register  ******************/
#define GPIO_SEMCR6_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR6_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR6_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR6_SEM_MUTEX          GPIO_SEMCR6_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR6_SEMCID_Pos         (4U)
#define GPIO_SEMCR6_SEMCID_Msk         (0x3U << GPIO_SEMCR6_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR6_SEMCID             GPIO_SEMCR6_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR7 register  *****************/
#define GPIO_CIDCFGR7_CFEN_Pos         (0U)
#define GPIO_CIDCFGR7_CFEN_Msk         (0x1U << GPIO_CIDCFGR7_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR7_CFEN             GPIO_CIDCFGR7_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR7_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR7_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR7_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR7_SEM_EN           GPIO_CIDCFGR7_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR7_SCID_Pos         (4U)
#define GPIO_CIDCFGR7_SCID_Msk         (0x3U << GPIO_CIDCFGR7_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR7_SCID             GPIO_CIDCFGR7_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR7_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR7_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR7_SEMWLC0          GPIO_CIDCFGR7_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR7_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR7_SEMWLC1          GPIO_CIDCFGR7_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR7_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR7_SEMWLC2          GPIO_CIDCFGR7_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR7_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR7_SEMWLC3          GPIO_CIDCFGR7_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR7 register  ******************/
#define GPIO_SEMCR7_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR7_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR7_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR7_SEM_MUTEX          GPIO_SEMCR7_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR7_SEMCID_Pos         (4U)
#define GPIO_SEMCR7_SEMCID_Msk         (0x3U << GPIO_SEMCR7_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR7_SEMCID             GPIO_SEMCR7_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR8 register  *****************/
#define GPIO_CIDCFGR8_CFEN_Pos         (0U)
#define GPIO_CIDCFGR8_CFEN_Msk         (0x1U << GPIO_CIDCFGR8_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR8_CFEN             GPIO_CIDCFGR8_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR8_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR8_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR8_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR8_SEM_EN           GPIO_CIDCFGR8_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR8_SCID_Pos         (4U)
#define GPIO_CIDCFGR8_SCID_Msk         (0x3U << GPIO_CIDCFGR8_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR8_SCID             GPIO_CIDCFGR8_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR8_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR8_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR8_SEMWLC0          GPIO_CIDCFGR8_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR8_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR8_SEMWLC1          GPIO_CIDCFGR8_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR8_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR8_SEMWLC2          GPIO_CIDCFGR8_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR8_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR8_SEMWLC3          GPIO_CIDCFGR8_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR8 register  ******************/
#define GPIO_SEMCR8_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR8_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR8_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR8_SEM_MUTEX          GPIO_SEMCR8_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR8_SEMCID_Pos         (4U)
#define GPIO_SEMCR8_SEMCID_Msk         (0x3U << GPIO_SEMCR8_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR8_SEMCID             GPIO_SEMCR8_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR9 register  *****************/
#define GPIO_CIDCFGR9_CFEN_Pos         (0U)
#define GPIO_CIDCFGR9_CFEN_Msk         (0x1U << GPIO_CIDCFGR9_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR9_CFEN             GPIO_CIDCFGR9_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR9_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR9_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR9_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR9_SEM_EN           GPIO_CIDCFGR9_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR9_SCID_Pos         (4U)
#define GPIO_CIDCFGR9_SCID_Msk         (0x3U << GPIO_CIDCFGR9_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR9_SCID             GPIO_CIDCFGR9_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR9_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR9_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR9_SEMWLC0          GPIO_CIDCFGR9_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR9_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR9_SEMWLC1          GPIO_CIDCFGR9_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR9_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR9_SEMWLC2          GPIO_CIDCFGR9_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR9_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR9_SEMWLC3          GPIO_CIDCFGR9_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR9 register  ******************/
#define GPIO_SEMCR9_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR9_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR9_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR9_SEM_MUTEX          GPIO_SEMCR9_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR9_SEMCID_Pos         (4U)
#define GPIO_SEMCR9_SEMCID_Msk         (0x3U << GPIO_SEMCR9_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR9_SEMCID             GPIO_SEMCR9_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR10 register  ****************/
#define GPIO_CIDCFGR10_CFEN_Pos        (0U)
#define GPIO_CIDCFGR10_CFEN_Msk        (0x1U << GPIO_CIDCFGR10_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR10_CFEN            GPIO_CIDCFGR10_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR10_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR10_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR10_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR10_SEM_EN          GPIO_CIDCFGR10_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR10_SCID_Pos        (4U)
#define GPIO_CIDCFGR10_SCID_Msk        (0x3U << GPIO_CIDCFGR10_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR10_SCID            GPIO_CIDCFGR10_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR10_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR10_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR10_SEMWLC0         GPIO_CIDCFGR10_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR10_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR10_SEMWLC1         GPIO_CIDCFGR10_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR10_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR10_SEMWLC2         GPIO_CIDCFGR10_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR10_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR10_SEMWLC3         GPIO_CIDCFGR10_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR10 register  *****************/
#define GPIO_SEMCR10_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR10_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR10_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR10_SEM_MUTEX         GPIO_SEMCR10_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR10_SEMCID_Pos        (4U)
#define GPIO_SEMCR10_SEMCID_Msk        (0x3U << GPIO_SEMCR10_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR10_SEMCID            GPIO_SEMCR10_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR11 register  ****************/
#define GPIO_CIDCFGR11_CFEN_Pos        (0U)
#define GPIO_CIDCFGR11_CFEN_Msk        (0x1U << GPIO_CIDCFGR11_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR11_CFEN            GPIO_CIDCFGR11_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR11_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR11_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR11_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR11_SEM_EN          GPIO_CIDCFGR11_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR11_SCID_Pos        (4U)
#define GPIO_CIDCFGR11_SCID_Msk        (0x3U << GPIO_CIDCFGR11_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR11_SCID            GPIO_CIDCFGR11_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR11_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR11_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR11_SEMWLC0         GPIO_CIDCFGR11_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR11_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR11_SEMWLC1         GPIO_CIDCFGR11_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR11_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR11_SEMWLC2         GPIO_CIDCFGR11_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR11_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR11_SEMWLC3         GPIO_CIDCFGR11_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR11 register  *****************/
#define GPIO_SEMCR11_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR11_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR11_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR11_SEM_MUTEX         GPIO_SEMCR11_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR11_SEMCID_Pos        (4U)
#define GPIO_SEMCR11_SEMCID_Msk        (0x3U << GPIO_SEMCR11_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR11_SEMCID            GPIO_SEMCR11_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR12 register  ****************/
#define GPIO_CIDCFGR12_CFEN_Pos        (0U)
#define GPIO_CIDCFGR12_CFEN_Msk        (0x1U << GPIO_CIDCFGR12_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR12_CFEN            GPIO_CIDCFGR12_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR12_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR12_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR12_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR12_SEM_EN          GPIO_CIDCFGR12_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR12_SCID_Pos        (4U)
#define GPIO_CIDCFGR12_SCID_Msk        (0x3U << GPIO_CIDCFGR12_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR12_SCID            GPIO_CIDCFGR12_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR12_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR12_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR12_SEMWLC0         GPIO_CIDCFGR12_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR12_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR12_SEMWLC1         GPIO_CIDCFGR12_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR12_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR12_SEMWLC2         GPIO_CIDCFGR12_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR12_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR12_SEMWLC3         GPIO_CIDCFGR12_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR12 register  *****************/
#define GPIO_SEMCR12_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR12_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR12_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR12_SEM_MUTEX         GPIO_SEMCR12_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR12_SEMCID_Pos        (4U)
#define GPIO_SEMCR12_SEMCID_Msk        (0x3U << GPIO_SEMCR12_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR12_SEMCID            GPIO_SEMCR12_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR13 register  ****************/
#define GPIO_CIDCFGR13_CFEN_Pos        (0U)
#define GPIO_CIDCFGR13_CFEN_Msk        (0x1U << GPIO_CIDCFGR13_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR13_CFEN            GPIO_CIDCFGR13_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR13_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR13_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR13_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR13_SEM_EN          GPIO_CIDCFGR13_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR13_SCID_Pos        (4U)
#define GPIO_CIDCFGR13_SCID_Msk        (0x3U << GPIO_CIDCFGR13_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR13_SCID            GPIO_CIDCFGR13_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR13_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR13_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR13_SEMWLC0         GPIO_CIDCFGR13_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR13_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR13_SEMWLC1         GPIO_CIDCFGR13_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR13_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR13_SEMWLC2         GPIO_CIDCFGR13_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR13_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR13_SEMWLC3         GPIO_CIDCFGR13_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR13 register  *****************/
#define GPIO_SEMCR13_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR13_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR13_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR13_SEM_MUTEX         GPIO_SEMCR13_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR13_SEMCID_Pos        (4U)
#define GPIO_SEMCR13_SEMCID_Msk        (0x3U << GPIO_SEMCR13_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR13_SEMCID            GPIO_SEMCR13_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR14 register  ****************/
#define GPIO_CIDCFGR14_CFEN_Pos        (0U)
#define GPIO_CIDCFGR14_CFEN_Msk        (0x1U << GPIO_CIDCFGR14_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR14_CFEN            GPIO_CIDCFGR14_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR14_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR14_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR14_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR14_SEM_EN          GPIO_CIDCFGR14_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR14_SCID_Pos        (4U)
#define GPIO_CIDCFGR14_SCID_Msk        (0x3U << GPIO_CIDCFGR14_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR14_SCID            GPIO_CIDCFGR14_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR14_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR14_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR14_SEMWLC0         GPIO_CIDCFGR14_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR14_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR14_SEMWLC1         GPIO_CIDCFGR14_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR14_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR14_SEMWLC2         GPIO_CIDCFGR14_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR14_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR14_SEMWLC3         GPIO_CIDCFGR14_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR14 register  *****************/
#define GPIO_SEMCR14_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR14_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR14_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR14_SEM_MUTEX         GPIO_SEMCR14_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR14_SEMCID_Pos        (4U)
#define GPIO_SEMCR14_SEMCID_Msk        (0x3U << GPIO_SEMCR14_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR14_SEMCID            GPIO_SEMCR14_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR15 register  ****************/
#define GPIO_CIDCFGR15_CFEN_Pos        (0U)
#define GPIO_CIDCFGR15_CFEN_Msk        (0x1U << GPIO_CIDCFGR15_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR15_CFEN            GPIO_CIDCFGR15_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR15_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR15_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR15_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR15_SEM_EN          GPIO_CIDCFGR15_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR15_SCID_Pos        (4U)
#define GPIO_CIDCFGR15_SCID_Msk        (0x3U << GPIO_CIDCFGR15_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR15_SCID            GPIO_CIDCFGR15_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR15_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR15_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR15_SEMWLC0         GPIO_CIDCFGR15_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR15_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR15_SEMWLC1         GPIO_CIDCFGR15_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR15_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR15_SEMWLC2         GPIO_CIDCFGR15_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR15_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR15_SEMWLC3         GPIO_CIDCFGR15_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR15 register  *****************/
#define GPIO_SEMCR15_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR15_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR15_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR15_SEM_MUTEX         GPIO_SEMCR15_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR15_SEMCID_Pos        (4U)
#define GPIO_SEMCR15_SEMCID_Msk        (0x3U << GPIO_SEMCR15_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR15_SEMCID            GPIO_SEMCR15_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_HWCFGR10 register  *****************/
#define GPIO_HWCFGR10_AHB_IOP_Pos      (0U)
#define GPIO_HWCFGR10_AHB_IOP_Msk      (0xFU << GPIO_HWCFGR10_AHB_IOP_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR10_AHB_IOP          GPIO_HWCFGR10_AHB_IOP_Msk                /*!< Bus interface configuration */
#define GPIO_HWCFGR10_AFSIZE_CFG_Pos   (4U)
#define GPIO_HWCFGR10_AFSIZE_CFG_Msk   (0xFU << GPIO_HWCFGR10_AFSIZE_CFG_Pos)   /*!< 0x000000F0 */
#define GPIO_HWCFGR10_AFSIZE_CFG       GPIO_HWCFGR10_AFSIZE_CFG_Msk             /*!< Number of AF available for each I/O */
#define GPIO_HWCFGR10_SPEED_CFG_Pos    (8U)
#define GPIO_HWCFGR10_SPEED_CFG_Msk    (0xFU << GPIO_HWCFGR10_SPEED_CFG_Pos)    /*!< 0x00000F00 */
#define GPIO_HWCFGR10_SPEED_CFG        GPIO_HWCFGR10_SPEED_CFG_Msk              /*!< Number of speed lines for each I/O */
#define GPIO_HWCFGR10_LOCK_CFG_Pos     (12U)
#define GPIO_HWCFGR10_LOCK_CFG_Msk     (0xFU << GPIO_HWCFGR10_LOCK_CFG_Pos)     /*!< 0x0000F000 */
#define GPIO_HWCFGR10_LOCK_CFG         GPIO_HWCFGR10_LOCK_CFG_Msk               /*!< Lock mechanism activation */
#define GPIO_HWCFGR10_SEC_CFG_Pos      (16U)
#define GPIO_HWCFGR10_SEC_CFG_Msk      (0xFU << GPIO_HWCFGR10_SEC_CFG_Pos)      /*!< 0x000F0000 */
#define GPIO_HWCFGR10_SEC_CFG          GPIO_HWCFGR10_SEC_CFG_Msk                /*!< Security activation */
#define GPIO_HWCFGR10_OR_CFG_Pos       (20U)
#define GPIO_HWCFGR10_OR_CFG_Msk       (0xFU << GPIO_HWCFGR10_OR_CFG_Pos)       /*!< 0x00F00000 */
#define GPIO_HWCFGR10_OR_CFG           GPIO_HWCFGR10_OR_CFG_Msk                 /*!< Option register configuration */

/*****************  Bit definition for GPIO_HWCFGR9 register  *****************/
#define GPIO_HWCFGR9_EN_IO_Pos         (0U)
#define GPIO_HWCFGR9_EN_IO_Msk         (0xFFFFU << GPIO_HWCFGR9_EN_IO_Pos)      /*!< 0x0000FFFF */
#define GPIO_HWCFGR9_EN_IO             GPIO_HWCFGR9_EN_IO_Msk                   /*!< Presence granularity, each bit indicate the presence of the IO */

/*****************  Bit definition for GPIO_HWCFGR8 register  *****************/
#define GPIO_HWCFGR8_AF_PRIO8_Pos      (0U)
#define GPIO_HWCFGR8_AF_PRIO8_Msk      (0xFU << GPIO_HWCFGR8_AF_PRIO8_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR8_AF_PRIO8          GPIO_HWCFGR8_AF_PRIO8_Msk                /*!< Indicate the priority AF for I/O8 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO9_Pos      (4U)
#define GPIO_HWCFGR8_AF_PRIO9_Msk      (0xFU << GPIO_HWCFGR8_AF_PRIO9_Pos)      /*!< 0x000000F0 */
#define GPIO_HWCFGR8_AF_PRIO9          GPIO_HWCFGR8_AF_PRIO9_Msk                /*!< Indicate the priority AF for I/O9 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO10_Pos     (8U)
#define GPIO_HWCFGR8_AF_PRIO10_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO10_Pos)     /*!< 0x00000F00 */
#define GPIO_HWCFGR8_AF_PRIO10         GPIO_HWCFGR8_AF_PRIO10_Msk               /*!< Indicate the priority AF for I/O10 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO11_Pos     (12U)
#define GPIO_HWCFGR8_AF_PRIO11_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO11_Pos)     /*!< 0x0000F000 */
#define GPIO_HWCFGR8_AF_PRIO11         GPIO_HWCFGR8_AF_PRIO11_Msk               /*!< Indicate the priority AF for I/O11 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO12_Pos     (16U)
#define GPIO_HWCFGR8_AF_PRIO12_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO12_Pos)     /*!< 0x000F0000 */
#define GPIO_HWCFGR8_AF_PRIO12         GPIO_HWCFGR8_AF_PRIO12_Msk               /*!< Indicate the priority AF for I/O12 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO13_Pos     (20U)
#define GPIO_HWCFGR8_AF_PRIO13_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO13_Pos)     /*!< 0x00F00000 */
#define GPIO_HWCFGR8_AF_PRIO13         GPIO_HWCFGR8_AF_PRIO13_Msk               /*!< Indicate the priority AF for I/O13 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO14_Pos     (24U)
#define GPIO_HWCFGR8_AF_PRIO14_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO14_Pos)     /*!< 0x0F000000 */
#define GPIO_HWCFGR8_AF_PRIO14         GPIO_HWCFGR8_AF_PRIO14_Msk               /*!< Indicate the priority AF for I/O14 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO15_Pos     (28U)
#define GPIO_HWCFGR8_AF_PRIO15_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO15_Pos)     /*!< 0xF0000000 */
#define GPIO_HWCFGR8_AF_PRIO15         GPIO_HWCFGR8_AF_PRIO15_Msk               /*!< Indicate the priority AF for I/O15 (0 to F) */

/*****************  Bit definition for GPIO_HWCFGR7 register  *****************/
#define GPIO_HWCFGR7_AF_PRIO0_Pos      (0U)
#define GPIO_HWCFGR7_AF_PRIO0_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO0_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR7_AF_PRIO0          GPIO_HWCFGR7_AF_PRIO0_Msk                /*!< Indicate the priority AF for I/O0 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO1_Pos      (4U)
#define GPIO_HWCFGR7_AF_PRIO1_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO1_Pos)      /*!< 0x000000F0 */
#define GPIO_HWCFGR7_AF_PRIO1          GPIO_HWCFGR7_AF_PRIO1_Msk                /*!< Indicate the priority AF for I/O1 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO2_Pos      (8U)
#define GPIO_HWCFGR7_AF_PRIO2_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO2_Pos)      /*!< 0x00000F00 */
#define GPIO_HWCFGR7_AF_PRIO2          GPIO_HWCFGR7_AF_PRIO2_Msk                /*!< Indicate the priority AF for I/O2 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO3_Pos      (12U)
#define GPIO_HWCFGR7_AF_PRIO3_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO3_Pos)      /*!< 0x0000F000 */
#define GPIO_HWCFGR7_AF_PRIO3          GPIO_HWCFGR7_AF_PRIO3_Msk                /*!< Indicate the priority AF for I/O3 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO4_Pos      (16U)
#define GPIO_HWCFGR7_AF_PRIO4_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO4_Pos)      /*!< 0x000F0000 */
#define GPIO_HWCFGR7_AF_PRIO4          GPIO_HWCFGR7_AF_PRIO4_Msk                /*!< Indicate the priority AF for I/O4 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO5_Pos      (20U)
#define GPIO_HWCFGR7_AF_PRIO5_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO5_Pos)      /*!< 0x00F00000 */
#define GPIO_HWCFGR7_AF_PRIO5          GPIO_HWCFGR7_AF_PRIO5_Msk                /*!< Indicate the priority AF for I/O5 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO6_Pos      (24U)
#define GPIO_HWCFGR7_AF_PRIO6_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO6_Pos)      /*!< 0x0F000000 */
#define GPIO_HWCFGR7_AF_PRIO6          GPIO_HWCFGR7_AF_PRIO6_Msk                /*!< Indicate the priority AF for I/O6 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO7_Pos      (28U)
#define GPIO_HWCFGR7_AF_PRIO7_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO7_Pos)      /*!< 0xF0000000 */
#define GPIO_HWCFGR7_AF_PRIO7          GPIO_HWCFGR7_AF_PRIO7_Msk                /*!< Indicate the priority AF for I/O7 (0 to F) */

/*****************  Bit definition for GPIO_HWCFGR6 register  *****************/
#define GPIO_HWCFGR6_MODER_RES_Pos     (0U)
#define GPIO_HWCFGR6_MODER_RES_Msk     (0xFFFFFFFFU << GPIO_HWCFGR6_MODER_RES_Pos)  /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR6_MODER_RES         GPIO_HWCFGR6_MODER_RES_Msk               /*!< MODER register reset value */

/*****************  Bit definition for GPIO_HWCFGR5 register  *****************/
#define GPIO_HWCFGR5_PUPDR_RES_Pos     (0U)
#define GPIO_HWCFGR5_PUPDR_RES_Msk     (0xFFFFFFFFU << GPIO_HWCFGR5_PUPDR_RES_Pos)  /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR5_PUPDR_RES         GPIO_HWCFGR5_PUPDR_RES_Msk               /*!< Pull-up / pull-down register reset value */

/*****************  Bit definition for GPIO_HWCFGR4 register  *****************/
#define GPIO_HWCFGR4_OSPEED_RES_Pos    (0U)
#define GPIO_HWCFGR4_OSPEED_RES_Msk    (0xFFFFFFFFU << GPIO_HWCFGR4_OSPEED_RES_Pos)   /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR4_OSPEED_RES        GPIO_HWCFGR4_OSPEED_RES_Msk              /*!< OSPEED register reset value */

/*****************  Bit definition for GPIO_HWCFGR3 register  *****************/
#define GPIO_HWCFGR3_ODR_RES_Pos       (0U)
#define GPIO_HWCFGR3_ODR_RES_Msk       (0xFFFFU << GPIO_HWCFGR3_ODR_RES_Pos)    /*!< 0x0000FFFF */
#define GPIO_HWCFGR3_ODR_RES           GPIO_HWCFGR3_ODR_RES_Msk                 /*!< Output data register reset value */
#define GPIO_HWCFGR3_OTYPER_RES_Pos    (16U)
#define GPIO_HWCFGR3_OTYPER_RES_Msk    (0xFFFFU << GPIO_HWCFGR3_OTYPER_RES_Pos) /*!< 0xFFFF0000 */
#define GPIO_HWCFGR3_OTYPER_RES        GPIO_HWCFGR3_OTYPER_RES_Msk              /*!< Output type register reset value */

/*****************  Bit definition for GPIO_HWCFGR2 register  *****************/
#define GPIO_HWCFGR2_AFRL_RES_Pos      (0U)
#define GPIO_HWCFGR2_AFRL_RES_Msk      (0xFFFFFFFFU << GPIO_HWCFGR2_AFRL_RES_Pos) /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR2_AFRL_RES          GPIO_HWCFGR2_AFRL_RES_Msk                /*!< AF register low reset value */

/*****************  Bit definition for GPIO_HWCFGR1 register  *****************/
#define GPIO_HWCFGR1_AFRH_RES_Pos      (0U)
#define GPIO_HWCFGR1_AFRH_RES_Msk      (0xFFFFFFFFU << GPIO_HWCFGR1_AFRH_RES_Pos) /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR1_AFRH_RES          GPIO_HWCFGR1_AFRH_RES_Msk                /*!< AF register high reset value */

/*****************  Bit definition for GPIO_HWCFGR0 register  *****************/
#define GPIO_HWCFGR0_OR_RES_Pos        (0U)
#define GPIO_HWCFGR0_OR_RES_Msk        (0xFFFFU << GPIO_HWCFGR0_OR_RES_Pos)     /*!< 0x0000FFFF */
#define GPIO_HWCFGR0_OR_RES            GPIO_HWCFGR0_OR_RES_Msk                  /*!< Option register reset value */

/******************  Bit definition for GPIO_VERR register  *******************/
#define GPIO_VERR_MINREV_Pos           (0U)
#define GPIO_VERR_MINREV_Msk           (0xFU << GPIO_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define GPIO_VERR_MINREV               GPIO_VERR_MINREV_Msk                     /*!< Minor revision */
#define GPIO_VERR_MAJREV_Pos           (4U)
#define GPIO_VERR_MAJREV_Msk           (0xFU << GPIO_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define GPIO_VERR_MAJREV               GPIO_VERR_MAJREV_Msk                     /*!< Major revision */

/******************  Bit definition for GPIO_IPIDR register  ******************/
#define GPIO_IPIDR_IPID_Pos            (0U)
#define GPIO_IPIDR_IPID_Msk            (0xFFFFFFFFU << GPIO_IPIDR_IPID_Pos)     /*!< 0xFFFFFFFF */
#define GPIO_IPIDR_IPID                GPIO_IPIDR_IPID_Msk                      /*!< IP identifier */

/******************  Bit definition for GPIO_SIDR register  *******************/
#define GPIO_SIDR_SID_Pos              (0U)
#define GPIO_SIDR_SID_Msk              (0xFFFFFFFFU << GPIO_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define GPIO_SIDR_SID                  GPIO_SIDR_SID_Msk                        /*!< Size identifier */

/******************************************************************************/
/*                                                                            */
/*                                    HASH                                    */
/*                                                                            */
/******************************************************************************/
/******************  c7amba_hash1@v3_0                     ********************/

/******************  Bits definition for HASH_CR register  ********************/
#define HASH_CR_INIT_Pos          (2U)
#define HASH_CR_INIT_Msk          (0x1U << HASH_CR_INIT_Pos)                   /*!< 0x00000004 */
#define HASH_CR_INIT              HASH_CR_INIT_Msk
#define HASH_CR_DMAE_Pos          (3U)
#define HASH_CR_DMAE_Msk          (0x1U << HASH_CR_DMAE_Pos)                   /*!< 0x00000008 */
#define HASH_CR_DMAE              HASH_CR_DMAE_Msk
#define HASH_CR_DATATYPE_Pos      (4U)
#define HASH_CR_DATATYPE_Msk      (0x3U << HASH_CR_DATATYPE_Pos)               /*!< 0x00000030 */
#define HASH_CR_DATATYPE          HASH_CR_DATATYPE_Msk
#define HASH_CR_DATATYPE_0        (0x1U << HASH_CR_DATATYPE_Pos)               /*!< 0x00000010 */
#define HASH_CR_DATATYPE_1        (0x2U << HASH_CR_DATATYPE_Pos)               /*!< 0x00000020 */
#define HASH_CR_MODE_Pos          (6U)
#define HASH_CR_MODE_Msk          (0x1U << HASH_CR_MODE_Pos)                   /*!< 0x00000040 */
#define HASH_CR_MODE              HASH_CR_MODE_Msk
#define HASH_CR_ALGO_Pos          (17U)
#define HASH_CR_ALGO_Msk          (0xFU << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO              HASH_CR_ALGO_Msk
#define HASH_CR_ALGO_0            (0x1U << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO_1            (0x2U << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO_2            (0x4U << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO_3            (0x8U << HASH_CR_ALGO_Pos)
#define HASH_CR_NBW_Pos           (8U)
#define HASH_CR_NBW_Msk           (0xFU << HASH_CR_NBW_Pos)                    /*!< 0x00000F00 */
#define HASH_CR_NBW               HASH_CR_NBW_Msk
#define HASH_CR_NBW_0             (0x1U << HASH_CR_NBW_Pos)                    /*!< 0x00000100 */
#define HASH_CR_NBW_1             (0x2U << HASH_CR_NBW_Pos)                    /*!< 0x00000200 */
#define HASH_CR_NBW_2             (0x4U << HASH_CR_NBW_Pos)                    /*!< 0x00000400 */
#define HASH_CR_NBW_3             (0x8U << HASH_CR_NBW_Pos)                    /*!< 0x00000800 */
#define HASH_CR_DINNE_Pos         (12U)
#define HASH_CR_DINNE_Msk         (0x1U << HASH_CR_DINNE_Pos)                  /*!< 0x00001000 */
#define HASH_CR_DINNE             HASH_CR_DINNE_Msk
#define HASH_CR_DMAA_Pos          (14U)
#define HASH_CR_DMAA_Msk          (0x1U << HASH_CR_DMAA_Pos)                   /*!< 0x00004000 */
#define HASH_CR_DMAA              HASH_CR_DMAA_Msk
#define HASH_CR_MDMAT_Pos         (13U)
#define HASH_CR_MDMAT_Msk         (0x1UL << HASH_CR_MDMAT_Pos)                 /*!< 0x00002000 */
#define HASH_CR_MDMAT             HASH_CR_MDMAT_Msk
#define HASH_CR_LKEY_Pos          (16U)
#define HASH_CR_LKEY_Msk          (0x1U << HASH_CR_LKEY_Pos)                   /*!< 0x00010000 */
#define HASH_CR_LKEY              HASH_CR_LKEY_Msk

/******************  Bits definition for HASH_STR register  *******************/
#define HASH_STR_NBLW_Pos         (0U)
#define HASH_STR_NBLW_Msk         (0x1FU << HASH_STR_NBLW_Pos)                 /*!< 0x0000001F */
#define HASH_STR_NBLW             HASH_STR_NBLW_Msk
#define HASH_STR_NBLW_0           (0x01U << HASH_STR_NBLW_Pos)                 /*!< 0x00000001 */
#define HASH_STR_NBLW_1           (0x02U << HASH_STR_NBLW_Pos)                 /*!< 0x00000002 */
#define HASH_STR_NBLW_2           (0x04U << HASH_STR_NBLW_Pos)                 /*!< 0x00000004 */
#define HASH_STR_NBLW_3           (0x08U << HASH_STR_NBLW_Pos)                 /*!< 0x00000008 */
#define HASH_STR_NBLW_4           (0x10U << HASH_STR_NBLW_Pos)                 /*!< 0x00000010 */
#define HASH_STR_DCAL_Pos         (8U)
#define HASH_STR_DCAL_Msk         (0x1U << HASH_STR_DCAL_Pos)                  /*!< 0x00000100 */
#define HASH_STR_DCAL             HASH_STR_DCAL_Msk

/******************  Bits definition for HASH_SHA3CFGR register  *******************/
#define HASH_SHA3CFGR_PADBYTE_Pos (0U)
#define HASH_SHA3CFGR_PADBYTE_Msk (0x7FU << HASH_SHA3CFGR_PADBYTE_Pos)
#define HASH_SHA3CFGR_PADBYTE      HASH_SHA3CFGR_PADBYTE_Msk
#define HASH_SHA3CFGR_PADCONF_Pos (8U)
#define HASH_SHA3CFGR_PADCONF_Msk (0x1U << HASH_SHA3CFGR_PADCONF_Pos)
#define HASH_SHA3CFGR_PADCONF      HASH_SHA3CFGR_PADCONF_Msk
#define HASH_SHA3CFGR_SRND_Pos     (9U)
#define HASH_SHA3CFGR_SRND_Msk     (0x1FU << HASH_SHA3CFGR_SRND_Pos)
#define HASH_SHA3CFGR_SRND         HASH_SHA3CFGR_SRND_Msk
#define HASH_SHA3CFGR_ERND_Pos     (14U)
#define HASH_SHA3CFGR_ERND_Msk     (0x3U << HASH_SHA3CFGR_ERND_Pos)
#define HASH_SHA3CFGR_ERND         HASH_SHA3CFGR_ERND_Msk
#define HASH_SHA3CFGR_INRATE_Pos   (19U)
#define HASH_SHA3CFGR_INRATE_Msk   (0x5U << HASH_SHA3CFGR_INRATE_Pos)
#define HASH_SHA3CFGR_INRATE       HASH_SHA3CFGR_INRATE_Msk

/******************  Bits definition for HASH_IMR register  *******************/
#define HASH_IMR_DINIE_Pos        (0U)
#define HASH_IMR_DINIE_Msk        (0x1U << HASH_IMR_DINIE_Pos)                 /*!< 0x00000001 */
#define HASH_IMR_DINIE            HASH_IMR_DINIE_Msk
#define HASH_IMR_DCIE_Pos         (1U)
#define HASH_IMR_DCIE_Msk         (0x1U << HASH_IMR_DCIE_Pos)                  /*!< 0x00000002 */
#define HASH_IMR_DCIE             HASH_IMR_DCIE_Msk

/******************  Bits definition for HASH_SR register  ********************/
#define HASH_SR_DINIS_Pos         (0U)
#define HASH_SR_DINIS_Msk         (0x1U << HASH_SR_DINIS_Pos)                  /*!< 0x00000001 */
#define HASH_SR_DINIS             HASH_SR_DINIS_Msk
#define HASH_SR_DCIS_Pos          (1U)
#define HASH_SR_DCIS_Msk          (0x1U << HASH_SR_DCIS_Pos)                   /*!< 0x00000002 */
#define HASH_SR_DCIS              HASH_SR_DCIS_Msk
#define HASH_SR_DMAS_Pos          (2U)
#define HASH_SR_DMAS_Msk          (0x1U << HASH_SR_DMAS_Pos)                   /*!< 0x00000004 */
#define HASH_SR_DMAS              HASH_SR_DMAS_Msk
#define HASH_SR_BUSY_Pos          (3U)
#define HASH_SR_BUSY_Msk          (0x1U << HASH_SR_BUSY_Pos)                   /*!< 0x00000008 */
#define HASH_SR_BUSY              HASH_SR_BUSY_Msk
#define HASH_SR_NBWP_Pos          (9U)
#define HASH_SR_NBWP_Msk          (0x3FU << HASH_SR_NBWP_Pos)
#define HASH_SR_NBWP              HASH_SR_NBWP_Msk
#define HASH_SR_DINNE_Pos          (15U)
#define HASH_SR_DINNE_Msk          (0x1U << HASH_SR_DINNE_Pos)
#define HASH_SR_DINNE              HASH_SR_DINNE_Msk
#define HASH_SR_NBWE_Pos          (16U)
#define HASH_SR_NBWE_Msk          (0x3FU << HASH_SR_NBWE_Pos)
#define HASH_SR_NBWE              HASH_SR_NB_WE_Msk

/******************************************************************************/
/*                                                                            */
/*                      Inter-integrated Circuit Interface (I2C)              */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for I2C_CR1 register  *******************/
#define I2C_CR1_PE_Pos               (0U)
#define I2C_CR1_PE_Msk               (0x1U << I2C_CR1_PE_Pos)                  /*!< 0x00000001 */
#define I2C_CR1_PE                   I2C_CR1_PE_Msk                            /*!< Peripheral enable */
#define I2C_CR1_TXIE_Pos             (1U)
#define I2C_CR1_TXIE_Msk             (0x1U << I2C_CR1_TXIE_Pos)                /*!< 0x00000002 */
#define I2C_CR1_TXIE                 I2C_CR1_TXIE_Msk                          /*!< TX interrupt enable */
#define I2C_CR1_RXIE_Pos             (2U)
#define I2C_CR1_RXIE_Msk             (0x1U << I2C_CR1_RXIE_Pos)                /*!< 0x00000004 */
#define I2C_CR1_RXIE                 I2C_CR1_RXIE_Msk                          /*!< RX interrupt enable */
#define I2C_CR1_ADDRIE_Pos           (3U)
#define I2C_CR1_ADDRIE_Msk           (0x1U << I2C_CR1_ADDRIE_Pos)              /*!< 0x00000008 */
#define I2C_CR1_ADDRIE               I2C_CR1_ADDRIE_Msk                        /*!< Address match interrupt enable */
#define I2C_CR1_NACKIE_Pos           (4U)
#define I2C_CR1_NACKIE_Msk           (0x1U << I2C_CR1_NACKIE_Pos)              /*!< 0x00000010 */
#define I2C_CR1_NACKIE               I2C_CR1_NACKIE_Msk                        /*!< NACK received interrupt enable */
#define I2C_CR1_STOPIE_Pos           (5U)
#define I2C_CR1_STOPIE_Msk           (0x1U << I2C_CR1_STOPIE_Pos)              /*!< 0x00000020 */
#define I2C_CR1_STOPIE               I2C_CR1_STOPIE_Msk                        /*!< STOP detection interrupt enable */
#define I2C_CR1_TCIE_Pos             (6U)
#define I2C_CR1_TCIE_Msk             (0x1U << I2C_CR1_TCIE_Pos)                /*!< 0x00000040 */
#define I2C_CR1_TCIE                 I2C_CR1_TCIE_Msk                          /*!< Transfer complete interrupt enable */
#define I2C_CR1_ERRIE_Pos            (7U)
#define I2C_CR1_ERRIE_Msk            (0x1U << I2C_CR1_ERRIE_Pos)               /*!< 0x00000080 */
#define I2C_CR1_ERRIE                I2C_CR1_ERRIE_Msk                         /*!< Errors interrupt enable */
#define I2C_CR1_DNF_Pos              (8U)
#define I2C_CR1_DNF_Msk              (0xFU << I2C_CR1_DNF_Pos)                 /*!< 0x00000F00 */
#define I2C_CR1_DNF                  I2C_CR1_DNF_Msk                           /*!< Digital noise filter */
#define I2C_CR1_ANFOFF_Pos           (12U)
#define I2C_CR1_ANFOFF_Msk           (0x1U << I2C_CR1_ANFOFF_Pos)              /*!< 0x00001000 */
#define I2C_CR1_ANFOFF               I2C_CR1_ANFOFF_Msk                        /*!< Analog noise filter OFF */
#define I2C_CR1_SWRST_Pos            (13U)
#define I2C_CR1_SWRST_Msk            (0x1U << I2C_CR1_SWRST_Pos)               /*!< 0x00002000 */
#define I2C_CR1_SWRST                I2C_CR1_SWRST_Msk                         /*!< Software reset */
#define I2C_CR1_TXDMAEN_Pos          (14U)
#define I2C_CR1_TXDMAEN_Msk          (0x1U << I2C_CR1_TXDMAEN_Pos)             /*!< 0x00004000 */
#define I2C_CR1_TXDMAEN              I2C_CR1_TXDMAEN_Msk                       /*!< DMA transmission requests enable */
#define I2C_CR1_RXDMAEN_Pos          (15U)
#define I2C_CR1_RXDMAEN_Msk          (0x1U << I2C_CR1_RXDMAEN_Pos)             /*!< 0x00008000 */
#define I2C_CR1_RXDMAEN              I2C_CR1_RXDMAEN_Msk                       /*!< DMA reception requests enable */
#define I2C_CR1_SBC_Pos              (16U)
#define I2C_CR1_SBC_Msk              (0x1U << I2C_CR1_SBC_Pos)                 /*!< 0x00010000 */
#define I2C_CR1_SBC                  I2C_CR1_SBC_Msk                           /*!< Slave byte control */
#define I2C_CR1_NOSTRETCH_Pos        (17U)
#define I2C_CR1_NOSTRETCH_Msk        (0x1U << I2C_CR1_NOSTRETCH_Pos)           /*!< 0x00020000 */
#define I2C_CR1_NOSTRETCH            I2C_CR1_NOSTRETCH_Msk                     /*!< Clock stretching disable */
#define I2C_CR1_WUPEN_Pos            (18U)
#define I2C_CR1_WUPEN_Msk            (0x1U << I2C_CR1_WUPEN_Pos)               /*!< 0x00040000 */
#define I2C_CR1_WUPEN                I2C_CR1_WUPEN_Msk                         /*!< Wakeup from STOP enable */
#define I2C_CR1_GCEN_Pos             (19U)
#define I2C_CR1_GCEN_Msk             (0x1U << I2C_CR1_GCEN_Pos)                /*!< 0x00080000 */
#define I2C_CR1_GCEN                 I2C_CR1_GCEN_Msk                          /*!< General call enable */
#define I2C_CR1_SMBHEN_Pos           (20U)
#define I2C_CR1_SMBHEN_Msk           (0x1U << I2C_CR1_SMBHEN_Pos)              /*!< 0x00100000 */
#define I2C_CR1_SMBHEN               I2C_CR1_SMBHEN_Msk                        /*!< SMBus host address enable */
#define I2C_CR1_SMBDEN_Pos           (21U)
#define I2C_CR1_SMBDEN_Msk           (0x1U << I2C_CR1_SMBDEN_Pos)              /*!< 0x00200000 */
#define I2C_CR1_SMBDEN               I2C_CR1_SMBDEN_Msk                        /*!< SMBus device default address enable */
#define I2C_CR1_ALERTEN_Pos          (22U)
#define I2C_CR1_ALERTEN_Msk          (0x1U << I2C_CR1_ALERTEN_Pos)             /*!< 0x00400000 */
#define I2C_CR1_ALERTEN              I2C_CR1_ALERTEN_Msk                       /*!< SMBus alert enable */
#define I2C_CR1_PECEN_Pos            (23U)
#define I2C_CR1_PECEN_Msk            (0x1U << I2C_CR1_PECEN_Pos)               /*!< 0x00800000 */
#define I2C_CR1_PECEN                I2C_CR1_PECEN_Msk                         /*!< PEC enable */
#define I2C_CR1_FMP_Pos              (24U)
#define I2C_CR1_FMP_Msk              (0x1U << I2C_CR1_FMP_Pos)                 /*!< 0x01000000 */
#define I2C_CR1_FMP                  I2C_CR1_FMP_Msk                           /*!< Fast-mode Plus 20mA drive enable */
#define I2C_CR1_ADDRACLR_Pos         (30U)
#define I2C_CR1_ADDRACLR_Msk         (0x1U << I2C_CR1_ADDRACLR_Pos)            /*!< 0x40000000 */
#define I2C_CR1_ADDRACLR             I2C_CR1_ADDRACLR_Msk                      /*!< Address match flag (ADDR) automatic clear */
#define I2C_CR1_STOPFACLR_Pos        (31U)
#define I2C_CR1_STOPFACLR_Msk        (0x1U << I2C_CR1_STOPFACLR_Pos)           /*!< 0x80000000 */
#define I2C_CR1_STOPFACLR            I2C_CR1_STOPFACLR_Msk                     /*!< STOP detection flag (STOPF) automatic clear */

/******************  Bit definition for I2C_CR2 register  ********************/
#define I2C_CR2_SADD_Pos             (0U)
#define I2C_CR2_SADD_Msk             (0x3FFU << I2C_CR2_SADD_Pos)              /*!< 0x000003FF */
#define I2C_CR2_SADD                 I2C_CR2_SADD_Msk                          /*!< Slave address (master mode) */
#define I2C_CR2_RD_WRN_Pos           (10U)
#define I2C_CR2_RD_WRN_Msk           (0x1U << I2C_CR2_RD_WRN_Pos)              /*!< 0x00000400 */
#define I2C_CR2_RD_WRN               I2C_CR2_RD_WRN_Msk                        /*!< Transfer direction (master mode) */
#define I2C_CR2_ADD10_Pos            (11U)
#define I2C_CR2_ADD10_Msk            (0x1U << I2C_CR2_ADD10_Pos)               /*!< 0x00000800 */
#define I2C_CR2_ADD10                I2C_CR2_ADD10_Msk                         /*!< 10-bit addressing mode (master mode) */
#define I2C_CR2_HEAD10R_Pos          (12U)
#define I2C_CR2_HEAD10R_Msk          (0x1U << I2C_CR2_HEAD10R_Pos)             /*!< 0x00001000 */
#define I2C_CR2_HEAD10R              I2C_CR2_HEAD10R_Msk                       /*!< 10-bit address header only read direction (master mode) */
#define I2C_CR2_START_Pos            (13U)
#define I2C_CR2_START_Msk            (0x1U << I2C_CR2_START_Pos)               /*!< 0x00002000 */
#define I2C_CR2_START                I2C_CR2_START_Msk                         /*!< START generation */
#define I2C_CR2_STOP_Pos             (14U)
#define I2C_CR2_STOP_Msk             (0x1U << I2C_CR2_STOP_Pos)                /*!< 0x00004000 */
#define I2C_CR2_STOP                 I2C_CR2_STOP_Msk                          /*!< STOP generation (master mode) */
#define I2C_CR2_NACK_Pos             (15U)
#define I2C_CR2_NACK_Msk             (0x1U << I2C_CR2_NACK_Pos)                /*!< 0x00008000 */
#define I2C_CR2_NACK                 I2C_CR2_NACK_Msk                          /*!< NACK generation (slave mode) */
#define I2C_CR2_NBYTES_Pos           (16U)
#define I2C_CR2_NBYTES_Msk           (0xFFU << I2C_CR2_NBYTES_Pos)             /*!< 0x00FF0000 */
#define I2C_CR2_NBYTES               I2C_CR2_NBYTES_Msk                        /*!< Number of bytes */
#define I2C_CR2_RELOAD_Pos           (24U)
#define I2C_CR2_RELOAD_Msk           (0x1U << I2C_CR2_RELOAD_Pos)              /*!< 0x01000000 */
#define I2C_CR2_RELOAD               I2C_CR2_RELOAD_Msk                        /*!< NBYTES reload mode */
#define I2C_CR2_AUTOEND_Pos          (25U)
#define I2C_CR2_AUTOEND_Msk          (0x1U << I2C_CR2_AUTOEND_Pos)             /*!< 0x02000000 */
#define I2C_CR2_AUTOEND              I2C_CR2_AUTOEND_Msk                       /*!< Automatic end mode (master mode) */
#define I2C_CR2_PECBYTE_Pos          (26U)
#define I2C_CR2_PECBYTE_Msk          (0x1U << I2C_CR2_PECBYTE_Pos)             /*!< 0x04000000 */
#define I2C_CR2_PECBYTE              I2C_CR2_PECBYTE_Msk                       /*!< Packet error checking byte */

/*******************  Bit definition for I2C_OAR1 register  ******************/
#define I2C_OAR1_OA1_Pos             (0U)
#define I2C_OAR1_OA1_Msk             (0x3FFU << I2C_OAR1_OA1_Pos)              /*!< 0x000003FF */
#define I2C_OAR1_OA1                 I2C_OAR1_OA1_Msk                          /*!< Interface own address 1 */
#define I2C_OAR1_OA1MODE_Pos         (10U)
#define I2C_OAR1_OA1MODE_Msk         (0x1U << I2C_OAR1_OA1MODE_Pos)            /*!< 0x00000400 */
#define I2C_OAR1_OA1MODE             I2C_OAR1_OA1MODE_Msk                      /*!< Own address 1 10-bit mode */
#define I2C_OAR1_OA1EN_Pos           (15U)
#define I2C_OAR1_OA1EN_Msk           (0x1U << I2C_OAR1_OA1EN_Pos)              /*!< 0x00008000 */
#define I2C_OAR1_OA1EN               I2C_OAR1_OA1EN_Msk                        /*!< Own address 1 enable */

/*******************  Bit definition for I2C_OAR2 register  ******************/
#define I2C_OAR2_OA2_Pos             (1U)
#define I2C_OAR2_OA2_Msk             (0x7FU << I2C_OAR2_OA2_Pos)               /*!< 0x000000FE */
#define I2C_OAR2_OA2                 I2C_OAR2_OA2_Msk                          /*!< Interface own address 2 */
#define I2C_OAR2_OA2MSK_Pos          (8U)
#define I2C_OAR2_OA2MSK_Msk          (0x7U << I2C_OAR2_OA2MSK_Pos)             /*!< 0x00000700 */
#define I2C_OAR2_OA2MSK              I2C_OAR2_OA2MSK_Msk                       /*!< Own address 2 masks */
#define I2C_OAR2_OA2NOMASK           0x00000000UL                              /*!< No mask */
#define I2C_OAR2_OA2MASK01_Msk       (0x1UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000100 */
#define I2C_OAR2_OA2MASK01           I2C_OAR2_OA2MASK01_Msk                    /*!< OA2[1] is masked, Only OA2[7:2] are compared */
#define I2C_OAR2_OA2MASK02_Msk       (0x2UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000200 */
#define I2C_OAR2_OA2MASK02           I2C_OAR2_OA2MASK02_Msk                    /*!< OA2[2:1] is masked, Only OA2[7:3] are compared */
#define I2C_OAR2_OA2MASK03_Msk       (0x3UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000300 */
#define I2C_OAR2_OA2MASK03           I2C_OAR2_OA2MASK03_Msk                    /*!< OA2[3:1] is masked, Only OA2[7:4] are compared */
#define I2C_OAR2_OA2MASK04_Msk       (0x4UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000400 */
#define I2C_OAR2_OA2MASK04           I2C_OAR2_OA2MASK04_Msk                    /*!< OA2[4:1] is masked, Only OA2[7:5] are compared */
#define I2C_OAR2_OA2MASK05_Msk       (0x5UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000500 */
#define I2C_OAR2_OA2MASK05           I2C_OAR2_OA2MASK05_Msk                    /*!< OA2[5:1] is masked, Only OA2[7:6] are compared */
#define I2C_OAR2_OA2MASK06_Msk       (0x6UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000600 */
#define I2C_OAR2_OA2MASK06           I2C_OAR2_OA2MASK06_Msk                    /*!< OA2[6:1] is masked, Only OA2[7] are compared */
#define I2C_OAR2_OA2MASK07_Msk       (0x7UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000700 */
#define I2C_OAR2_OA2MASK07           I2C_OAR2_OA2MASK07_Msk                    /*!< OA2[7:1] is masked, No comparison is done */
#define I2C_OAR2_OA2EN_Pos           (15U)
#define I2C_OAR2_OA2EN_Msk           (0x1U << I2C_OAR2_OA2EN_Pos)              /*!< 0x00008000 */
#define I2C_OAR2_OA2EN               I2C_OAR2_OA2EN_Msk                        /*!< Own address 2 enable */

/*******************  Bit definition for I2C_TIMINGR register *******************/
#define I2C_TIMINGR_SCLL_Pos         (0U)
#define I2C_TIMINGR_SCLL_Msk         (0xFFU << I2C_TIMINGR_SCLL_Pos)           /*!< 0x000000FF */
#define I2C_TIMINGR_SCLL             I2C_TIMINGR_SCLL_Msk                      /*!< SCL low period (master mode) */
#define I2C_TIMINGR_SCLH_Pos         (8U)
#define I2C_TIMINGR_SCLH_Msk         (0xFFU << I2C_TIMINGR_SCLH_Pos)           /*!< 0x0000FF00 */
#define I2C_TIMINGR_SCLH             I2C_TIMINGR_SCLH_Msk                      /*!< SCL high period (master mode) */
#define I2C_TIMINGR_SDADEL_Pos       (16U)
#define I2C_TIMINGR_SDADEL_Msk       (0xFU << I2C_TIMINGR_SDADEL_Pos)          /*!< 0x000F0000 */
#define I2C_TIMINGR_SDADEL           I2C_TIMINGR_SDADEL_Msk                    /*!< Data hold time */
#define I2C_TIMINGR_SCLDEL_Pos       (20U)
#define I2C_TIMINGR_SCLDEL_Msk       (0xFU << I2C_TIMINGR_SCLDEL_Pos)          /*!< 0x00F00000 */
#define I2C_TIMINGR_SCLDEL           I2C_TIMINGR_SCLDEL_Msk                    /*!< Data setup time */
#define I2C_TIMINGR_PRESC_Pos        (28U)
#define I2C_TIMINGR_PRESC_Msk        (0xFU << I2C_TIMINGR_PRESC_Pos)           /*!< 0xF0000000 */
#define I2C_TIMINGR_PRESC            I2C_TIMINGR_PRESC_Msk                     /*!< Timings prescaler */

/******************* Bit definition for I2C_TIMEOUTR register *******************/
#define I2C_TIMEOUTR_TIMEOUTA_Pos    (0U)
#define I2C_TIMEOUTR_TIMEOUTA_Msk    (0xFFFU << I2C_TIMEOUTR_TIMEOUTA_Pos)     /*!< 0x00000FFF */
#define I2C_TIMEOUTR_TIMEOUTA        I2C_TIMEOUTR_TIMEOUTA_Msk                 /*!< Bus timeout A */
#define I2C_TIMEOUTR_TIDLE_Pos       (12U)
#define I2C_TIMEOUTR_TIDLE_Msk       (0x1U << I2C_TIMEOUTR_TIDLE_Pos)          /*!< 0x00001000 */
#define I2C_TIMEOUTR_TIDLE           I2C_TIMEOUTR_TIDLE_Msk                    /*!< Idle clock timeout detection */
#define I2C_TIMEOUTR_TIMOUTEN_Pos    (15U)
#define I2C_TIMEOUTR_TIMOUTEN_Msk    (0x1U << I2C_TIMEOUTR_TIMOUTEN_Pos)       /*!< 0x00008000 */
#define I2C_TIMEOUTR_TIMOUTEN        I2C_TIMEOUTR_TIMOUTEN_Msk                 /*!< Clock timeout enable */
#define I2C_TIMEOUTR_TIMEOUTB_Pos    (16U)
#define I2C_TIMEOUTR_TIMEOUTB_Msk    (0xFFFU << I2C_TIMEOUTR_TIMEOUTB_Pos)     /*!< 0x0FFF0000 */
#define I2C_TIMEOUTR_TIMEOUTB        I2C_TIMEOUTR_TIMEOUTB_Msk                 /*!< Bus timeout B*/
#define I2C_TIMEOUTR_TEXTEN_Pos      (31U)
#define I2C_TIMEOUTR_TEXTEN_Msk      (0x1U << I2C_TIMEOUTR_TEXTEN_Pos)         /*!< 0x80000000 */
#define I2C_TIMEOUTR_TEXTEN          I2C_TIMEOUTR_TEXTEN_Msk                   /*!< Extended clock timeout enable */

/******************  Bit definition for I2C_ISR register  *********************/
#define I2C_ISR_TXE_Pos              (0U)
#define I2C_ISR_TXE_Msk              (0x1U << I2C_ISR_TXE_Pos)                 /*!< 0x00000001 */
#define I2C_ISR_TXE                  I2C_ISR_TXE_Msk                           /*!< Transmit data register empty */
#define I2C_ISR_TXIS_Pos             (1U)
#define I2C_ISR_TXIS_Msk             (0x1U << I2C_ISR_TXIS_Pos)                /*!< 0x00000002 */
#define I2C_ISR_TXIS                 I2C_ISR_TXIS_Msk                          /*!< Transmit interrupt status */
#define I2C_ISR_RXNE_Pos             (2U)
#define I2C_ISR_RXNE_Msk             (0x1U << I2C_ISR_RXNE_Pos)                /*!< 0x00000004 */
#define I2C_ISR_RXNE                 I2C_ISR_RXNE_Msk                          /*!< Receive data register not empty */
#define I2C_ISR_ADDR_Pos             (3U)
#define I2C_ISR_ADDR_Msk             (0x1U << I2C_ISR_ADDR_Pos)                /*!< 0x00000008 */
#define I2C_ISR_ADDR                 I2C_ISR_ADDR_Msk                          /*!< Address matched (slave mode)*/
#define I2C_ISR_NACKF_Pos            (4U)
#define I2C_ISR_NACKF_Msk            (0x1U << I2C_ISR_NACKF_Pos)               /*!< 0x00000010 */
#define I2C_ISR_NACKF                I2C_ISR_NACKF_Msk                         /*!< NACK received flag */
#define I2C_ISR_STOPF_Pos            (5U)
#define I2C_ISR_STOPF_Msk            (0x1U << I2C_ISR_STOPF_Pos)               /*!< 0x00000020 */
#define I2C_ISR_STOPF                I2C_ISR_STOPF_Msk                         /*!< STOP detection flag */
#define I2C_ISR_TC_Pos               (6U)
#define I2C_ISR_TC_Msk               (0x1U << I2C_ISR_TC_Pos)                  /*!< 0x00000040 */
#define I2C_ISR_TC                   I2C_ISR_TC_Msk                            /*!< Transfer complete (master mode) */
#define I2C_ISR_TCR_Pos              (7U)
#define I2C_ISR_TCR_Msk              (0x1U << I2C_ISR_TCR_Pos)                 /*!< 0x00000080 */
#define I2C_ISR_TCR                  I2C_ISR_TCR_Msk                           /*!< Transfer complete reload */
#define I2C_ISR_BERR_Pos             (8U)
#define I2C_ISR_BERR_Msk             (0x1U << I2C_ISR_BERR_Pos)                /*!< 0x00000100 */
#define I2C_ISR_BERR                 I2C_ISR_BERR_Msk                          /*!< Bus error */
#define I2C_ISR_ARLO_Pos             (9U)
#define I2C_ISR_ARLO_Msk             (0x1U << I2C_ISR_ARLO_Pos)                /*!< 0x00000200 */
#define I2C_ISR_ARLO                 I2C_ISR_ARLO_Msk                          /*!< Arbitration lost */
#define I2C_ISR_OVR_Pos              (10U)
#define I2C_ISR_OVR_Msk              (0x1U << I2C_ISR_OVR_Pos)                 /*!< 0x00000400 */
#define I2C_ISR_OVR                  I2C_ISR_OVR_Msk                           /*!< Overrun/Underrun */
#define I2C_ISR_PECERR_Pos           (11U)
#define I2C_ISR_PECERR_Msk           (0x1U << I2C_ISR_PECERR_Pos)              /*!< 0x00000800 */
#define I2C_ISR_PECERR               I2C_ISR_PECERR_Msk                        /*!< PEC error in reception */
#define I2C_ISR_TIMEOUT_Pos          (12U)
#define I2C_ISR_TIMEOUT_Msk          (0x1U << I2C_ISR_TIMEOUT_Pos)             /*!< 0x00001000 */
#define I2C_ISR_TIMEOUT              I2C_ISR_TIMEOUT_Msk                       /*!< Timeout or Tlow detection flag */
#define I2C_ISR_ALERT_Pos            (13U)
#define I2C_ISR_ALERT_Msk            (0x1U << I2C_ISR_ALERT_Pos)               /*!< 0x00002000 */
#define I2C_ISR_ALERT                I2C_ISR_ALERT_Msk                         /*!< SMBus alert */
#define I2C_ISR_BUSY_Pos             (15U)
#define I2C_ISR_BUSY_Msk             (0x1U << I2C_ISR_BUSY_Pos)                /*!< 0x00008000 */
#define I2C_ISR_BUSY                 I2C_ISR_BUSY_Msk                          /*!< Bus busy */
#define I2C_ISR_DIR_Pos              (16U)
#define I2C_ISR_DIR_Msk              (0x1U << I2C_ISR_DIR_Pos)                 /*!< 0x00010000 */
#define I2C_ISR_DIR                  I2C_ISR_DIR_Msk                           /*!< Transfer direction (slave mode) */
#define I2C_ISR_ADDCODE_Pos          (17U)
#define I2C_ISR_ADDCODE_Msk          (0x7FU << I2C_ISR_ADDCODE_Pos)            /*!< 0x00FE0000 */
#define I2C_ISR_ADDCODE              I2C_ISR_ADDCODE_Msk                       /*!< Address match code (slave mode) */

/******************  Bit definition for I2C_ICR register  *********************/
#define I2C_ICR_ADDRCF_Pos           (3U)
#define I2C_ICR_ADDRCF_Msk           (0x1U << I2C_ICR_ADDRCF_Pos)              /*!< 0x00000008 */
#define I2C_ICR_ADDRCF               I2C_ICR_ADDRCF_Msk                        /*!< Address matched clear flag */
#define I2C_ICR_NACKCF_Pos           (4U)
#define I2C_ICR_NACKCF_Msk           (0x1U << I2C_ICR_NACKCF_Pos)              /*!< 0x00000010 */
#define I2C_ICR_NACKCF               I2C_ICR_NACKCF_Msk                        /*!< NACK clear flag */
#define I2C_ICR_STOPCF_Pos           (5U)
#define I2C_ICR_STOPCF_Msk           (0x1U << I2C_ICR_STOPCF_Pos)              /*!< 0x00000020 */
#define I2C_ICR_STOPCF               I2C_ICR_STOPCF_Msk                        /*!< STOP detection clear flag */
#define I2C_ICR_BERRCF_Pos           (8U)
#define I2C_ICR_BERRCF_Msk           (0x1U << I2C_ICR_BERRCF_Pos)              /*!< 0x00000100 */
#define I2C_ICR_BERRCF               I2C_ICR_BERRCF_Msk                        /*!< Bus error clear flag */
#define I2C_ICR_ARLOCF_Pos           (9U)
#define I2C_ICR_ARLOCF_Msk           (0x1U << I2C_ICR_ARLOCF_Pos)              /*!< 0x00000200 */
#define I2C_ICR_ARLOCF               I2C_ICR_ARLOCF_Msk                        /*!< Arbitration lost clear flag */
#define I2C_ICR_OVRCF_Pos            (10U)
#define I2C_ICR_OVRCF_Msk            (0x1U << I2C_ICR_OVRCF_Pos)               /*!< 0x00000400 */
#define I2C_ICR_OVRCF                I2C_ICR_OVRCF_Msk                         /*!< Overrun/Underrun clear flag */
#define I2C_ICR_PECCF_Pos            (11U)
#define I2C_ICR_PECCF_Msk            (0x1U << I2C_ICR_PECCF_Pos)               /*!< 0x00000800 */
#define I2C_ICR_PECCF                I2C_ICR_PECCF_Msk                         /*!< PAC error clear flag */
#define I2C_ICR_TIMOUTCF_Pos         (12U)
#define I2C_ICR_TIMOUTCF_Msk         (0x1U << I2C_ICR_TIMOUTCF_Pos)            /*!< 0x00001000 */
#define I2C_ICR_TIMOUTCF             I2C_ICR_TIMOUTCF_Msk                      /*!< Timeout clear flag */
#define I2C_ICR_ALERTCF_Pos          (13U)
#define I2C_ICR_ALERTCF_Msk          (0x1U << I2C_ICR_ALERTCF_Pos)             /*!< 0x00002000 */
#define I2C_ICR_ALERTCF              I2C_ICR_ALERTCF_Msk                       /*!< Alert clear flag */

/******************  Bit definition for I2C_PECR register  *********************/
#define I2C_PECR_PEC_Pos             (0U)
#define I2C_PECR_PEC_Msk             (0xFFU << I2C_PECR_PEC_Pos)               /*!< 0x000000FF */
#define I2C_PECR_PEC                 I2C_PECR_PEC_Msk                          /*!< PEC register */

/******************  Bit definition for I2C_RXDR register  *********************/
#define I2C_RXDR_RXDATA_Pos          (0U)
#define I2C_RXDR_RXDATA_Msk          (0xFFU << I2C_RXDR_RXDATA_Pos)            /*!< 0x000000FF */
#define I2C_RXDR_RXDATA              I2C_RXDR_RXDATA_Msk                       /*!< 8-bit receive data */

/******************  Bit definition for I2C_TXDR register  *********************/
#define I2C_TXDR_TXDATA_Pos          (0U)
#define I2C_TXDR_TXDATA_Msk          (0xFFU << I2C_TXDR_TXDATA_Pos)            /*!< 0x000000FF */
#define I2C_TXDR_TXDATA              I2C_TXDR_TXDATA_Msk                       /*!< 8-bit transmit data */

/********************  Bit definition for I2C_VERR register***********************/
#define I2C_VERR_MINREV_Pos          (0U)
#define I2C_VERR_MINREV_Msk          (0xFU << I2C_VERR_MINREV_Pos)             /*!< 0x0000000F */
#define I2C_VERR_MINREV              I2C_VERR_MINREV_Msk                       /*!< Minor Revision of the IP */
#define I2C_VERR_MAJREV_Pos          (4U)
#define I2C_VERR_MAJREV_Msk          (0xFU << I2C_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define I2C_VERR_MAJREV              I2C_VERR_MAJREV_Msk                       /*!< Major Revision of the IP */

/********************  Bit definition for I2C_IPIDR register**********************/
#define I2C_IPIDR_ID_Pos             (0U)
#define I2C_IPIDR_ID_Msk             (0xFFFFFFFFU << I2C_IPIDR_ID_Pos)         /*!< 0xFFFFFFFF */
#define I2C_IPIDR_ID                 I2C_IPIDR_ID_Msk                          /*!< IP Identifier */

/********************  Bit definition for I2C_SIDR register**********************/
#define I2C_SIDR_SID_Pos             (0U)
#define I2C_SIDR_SID_Msk             (0xFFFFFFFFU << I2C_SIDR_SID_Pos)         /*!< 0xFFFFFFFF */
#define I2C_SIDR_SID                 I2C_SIDR_SID_Msk                          /*!< Size Identifier */

/******************************************************************************/
/*                                                                            */
/*                        Independent Watchdog (IWDG)                         */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for IWDG_KR register  ********************/
#define IWDG_KR_KEY_Pos             (0U)
#define IWDG_KR_KEY_Msk             (0xFFFFU << IWDG_KR_KEY_Pos)          /*!< 0x0000FFFF */
#define IWDG_KR_KEY                 IWDG_KR_KEY_Msk                       /*!< Key value (write only, read 0x0000) */

/*******************  Bit definition for IWDG_PR register  ********************/
#define IWDG_PR_PR_Pos              (0U)
#define IWDG_PR_PR_Msk              (0xFU << IWDG_PR_PR_Pos)              /*!< 0x0000000F */
#define IWDG_PR_PR                  IWDG_PR_PR_Msk                        /*!< Prescaler divider */
#define IWDG_PR_PR_0                (0x1U << IWDG_PR_PR_Pos)              /*!< 0x00000001 */
#define IWDG_PR_PR_1                (0x2U << IWDG_PR_PR_Pos)              /*!< 0x00000002 */
#define IWDG_PR_PR_2                (0x4U << IWDG_PR_PR_Pos)              /*!< 0x00000004 */
#define IWDG_PR_PR_3                (0x8U << IWDG_PR_PR_Pos)              /*!< 0x00000008 */

/*******************  Bit definition for IWDG_RLR register  *******************/
#define IWDG_RLR_RL_Pos             (0U)
#define IWDG_RLR_RL_Msk             (0xFFFU << IWDG_RLR_RL_Pos)           /*!< 0x00000FFF */
#define IWDG_RLR_RL                 IWDG_RLR_RL_Msk                       /*!< Watchdog counter reload value */

/*******************  Bit definition for IWDG_SR register  ********************/
#define IWDG_SR_PVU_Pos             (0U)
#define IWDG_SR_PVU_Msk             (0x1U << IWDG_SR_PVU_Pos)             /*!< 0x00000001 */
#define IWDG_SR_PVU                 IWDG_SR_PVU_Msk                       /*!< Watchdog prescaler value update */
#define IWDG_SR_RVU_Pos             (1U)
#define IWDG_SR_RVU_Msk             (0x1U << IWDG_SR_RVU_Pos)             /*!< 0x00000002 */
#define IWDG_SR_RVU                 IWDG_SR_RVU_Msk                       /*!< Watchdog counter reload value update */
#define IWDG_SR_WVU_Pos             (2U)
#define IWDG_SR_WVU_Msk             (0x1U << IWDG_SR_WVU_Pos)             /*!< 0x00000004 */
#define IWDG_SR_WVU                 IWDG_SR_WVU_Msk                       /*!< Watchdog counter window value update */
#define IWDG_SR_EWU_Pos             (3U)
#define IWDG_SR_EWU_Msk             (0x1U << IWDG_SR_EWU_Pos)             /*!< 0x00000008 */
#define IWDG_SR_EWU                 IWDG_SR_EWU_Msk                       /*!< Watchdog interrupt comparator value update */
#define IWDG_SR_ONF_Pos             (8U)
#define IWDG_SR_ONF_Msk             (0x1U << IWDG_SR_ONF_Pos)             /*!< 0x00000100 */
#define IWDG_SR_ONF                 IWDG_SR_ONF_Msk                       /*!< Watchdog Enable status bit */
#define IWDG_SR_EWIF_Pos            (15U)
#define IWDG_SR_EWIF_Msk            (0x1U << IWDG_SR_EWIF_Pos)            /*!< 0x00008000 */
#define IWDG_SR_EWIF                IWDG_SR_EWIF_Msk                      /*!< Watchdog Early Interrupt flag */

/******************  Bit definition for IWDG_WINR register  *******************/
#define IWDG_WINR_WIN_Pos           (0U)
#define IWDG_WINR_WIN_Msk           (0xFFFU << IWDG_WINR_WIN_Pos)         /*!< 0x00000FFF */
#define IWDG_WINR_WIN               IWDG_WINR_WIN_Msk                     /*!< Watchdog counter window value */

/******************  Bit definition for IWDG_EWCR register  *******************/
#define IWDG_EWCR_EWIT_Pos          (0U)
#define IWDG_EWCR_EWIT_Msk          (0xFFFU << IWDG_EWCR_EWIT_Pos)        /*!< 0x00000FFF */
#define IWDG_EWCR_EWIT              IWDG_EWCR_EWIT_Msk                    /*!< Watchdog counter window value */
#define IWDG_EWCR_EWIE_Pos          (15U)
#define IWDG_EWCR_EWIE_Msk          (0x1U << IWDG_EWCR_EWIE_Pos)          /*!< 0x00008000 */
#define IWDG_EWCR_EWIE              IWDG_EWCR_EWIE_Msk                    /*!< Watchdog early interrupt enable */

/*******************  Bit definition for IWDG_ICR register  *******************/
#define IWDG_ICR_EWIC_Pos           (15U)
#define IWDG_ICR_EWIC_Msk           (0x1U << IWDG_ICR_EWIC_Pos)           /*!< 0x00008000 */
#define IWDG_ICR_EWIC               IWDG_ICR_EWIC_Msk                     /*!< Watchdog early interrupt acknowledge */

/*****************  Bit definition for IWDG_HWCFGR register  ******************/
#define IWDG_HWCFGR_WINDOW_Pos      (0U)
#define IWDG_HWCFGR_WINDOW_Msk      (0xFU << IWDG_HWCFGR_WINDOW_Pos)      /*!< 0x0000000F */
#define IWDG_HWCFGR_WINDOW          IWDG_HWCFGR_WINDOW_Msk                /*!< Support of Window function */
#define IWDG_HWCFGR_PR_DEFAULT_Pos  (4U)
#define IWDG_HWCFGR_PR_DEFAULT_Msk  (0xFU << IWDG_HWCFGR_PR_DEFAULT_Pos)  /*!< 0x000000F0 */
#define IWDG_HWCFGR_PR_DEFAULT      IWDG_HWCFGR_PR_DEFAULT_Msk            /*!< Prescaler default value */

/******************  Bit definition for IWDG_VERR register  *******************/
#define IWDG_VERR_MINREV_Pos        (0U)
#define IWDG_VERR_MINREV_Msk        (0xFU << IWDG_VERR_MINREV_Pos)        /*!< 0x0000000F */
#define IWDG_VERR_MINREV            IWDG_VERR_MINREV_Msk                  /*!< Minor revision */
#define IWDG_VERR_MAJREV_Pos        (4U)
#define IWDG_VERR_MAJREV_Msk        (0xFU << IWDG_VERR_MAJREV_Pos)        /*!< 0x000000F0 */
#define IWDG_VERR_MAJREV            IWDG_VERR_MAJREV_Msk                  /*!< Major revision */

/*******************  Bit definition for IWDG_IDR register  *******************/
#define IWDG_IDR_ID_Pos             (0U)
#define IWDG_IDR_ID_Msk             (0xFFFFFFFFU << IWDG_IDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define IWDG_IDR_ID                 IWDG_IDR_ID_Msk                       /*!< IWDG identifier */

/******************  Bit definition for IWDG_SIDR register  *******************/
#define IWDG_SIDR_SID_Pos           (0U)
#define IWDG_SIDR_SID_Msk           (0xFFFFFFFFU << IWDG_SIDR_SID_Pos)    /*!< 0xFFFFFFFF */
#define IWDG_SIDR_SID               IWDG_SIDR_SID_Msk                     /*!< IWDG size identifier */

/******************************************************************************/
/*                                                                            */
/*                         Low Power Timer (LPTIM)                            */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for LPTIM_ISR register  *******************/
#define LPTIM_ISR_CC1IF_Pos         (0U)
#define LPTIM_ISR_CC1IF_Msk         (0x1UL << LPTIM_ISR_CC1IF_Pos              /*!< 0x00000001 */
#define LPTIM_ISR_CC1IF             LPTIM_ISR_CC1IF_Msk                        /*!< Capture/Compare 1 interrupt flag */
#define LPTIM_ISR_ARRM_Pos          (1U)
#define LPTIM_ISR_ARRM_Msk          (0x1UL << LPTIM_ISR_ARRM_Pos)              /*!< 0x00000002 */
#define LPTIM_ISR_ARRM              LPTIM_ISR_ARRM_Msk                         /*!< Autoreload match */
#define LPTIM_ISR_EXTTRIG_Pos       (2U)
#define LPTIM_ISR_EXTTRIG_Msk       (0x1UL << LPTIM_ISR_EXTTRIG_Pos)           /*!< 0x00000004 */
#define LPTIM_ISR_EXTTRIG           LPTIM_ISR_EXTTRIG_Msk                      /*!< External trigger edge event */
#define LPTIM_ISR_CMP1OK_Pos        (3U)
#define LPTIM_ISR_CMP1OK_Msk        (0x1UL << LPTIM_ISR_CMP1OK_Pos)            /*!< 0x00000008 */
#define LPTIM_ISR_CMP1OK            LPTIM_ISR_CMP1OK_Msk                       /*!< Compare register 1 update OK */
#define LPTIM_ISR_ARROK_Pos         (4U)
#define LPTIM_ISR_ARROK_Msk         (0x1UL << LPTIM_ISR_ARROK_Pos)             /*!< 0x00000010 */
#define LPTIM_ISR_ARROK             LPTIM_ISR_ARROK_Msk                        /*!< Autoreload register update OK */
#define LPTIM_ISR_UP_Pos            (5U)
#define LPTIM_ISR_UP_Msk            (0x1UL << LPTIM_ISR_UP_Pos)                /*!< 0x00000020 */
#define LPTIM_ISR_UP                LPTIM_ISR_UP_Msk                           /*!< Counter direction change down to up */
#define LPTIM_ISR_DOWN_Pos          (6U)
#define LPTIM_ISR_DOWN_Msk          (0x1UL << LPTIM_ISR_DOWN_Pos)              /*!< 0x00000040 */
#define LPTIM_ISR_DOWN              LPTIM_ISR_DOWN_Msk                         /*!< Counter direction change up to down */
#define LPTIM_ISR_UE_Pos            (7U)
#define LPTIM_ISR_UE_Msk            (0x1UL << LPTIM_ISR_UE_Pos)                /*!< 0x00000080 */
#define LPTIM_ISR_UE                LPTIM_ISR_UE_Msk                           /*!< Update event */
#define LPTIM_ISR_REPOK_Pos         (8U)
#define LPTIM_ISR_REPOK_Msk         (0x1UL << LPTIM_ISR_REPOK_Pos)             /*!< 0x00000100 */
#define LPTIM_ISR_REPOK             LPTIM_ISR_REPOK_Msk                        /*!< Repetition register update OK */
#define LPTIM_ISR_CC2IF_Pos         (9U)
#define LPTIM_ISR_CC2IF_Msk         (0x1UL << LPTIM_ISR_CC2IF_Pos)             /*!< 0x00000200 */
#define LPTIM_ISR_CC2IF             LPTIM_ISR_CC2IF_Msk                        /*!< Capture/Compare 2 interrupt flag */
#define LPTIM_ISR_CC1OF_Pos         (12U)
#define LPTIM_ISR_CC1OF_Msk         (0x1UL << LPTIM_ISR_CC1OF_Pos)             /*!< 0x00001000 */
#define LPTIM_ISR_CC1OF             LPTIM_ISR_CC1OF_Msk                        /*!< Capture/Compare 1 over-capture flag */
#define LPTIM_ISR_CC2OF_Pos         (13U)
#define LPTIM_ISR_CC2OF_Msk         (0x1UL << LPTIM_ISR_CC2OF_Pos)             /*!< 0x00002000 */
#define LPTIM_ISR_CC2OF             LPTIM_ISR_CC2OF_Msk                        /*!< Capture/Compare 2 over-capture flag */
#define LPTIM_ISR_CMP2OK_Pos        (19U)
#define LPTIM_ISR_CMP2OK_Msk        (0x1UL << LPTIM_ISR_CMP2OK_Pos)            /*!< 0x00080000 */
#define LPTIM_ISR_CMP2OK            LPTIM_ISR_CMP2OK_Msk                       /*!< Compare register 2 update OK */

/******************  Bit definition for LPTIM_ICR register  *******************/
#define LPTIM_ICR_CC1CF_Pos         (0U)
#define LPTIM_ICR_CC1CF_Msk         (0x1UL << LPTIM_ICR_CC1CF_Pos)             /*!< 0x00000001 */
#define LPTIM_ICR_CC1CF             LPTIM_ICR_CC1CF_Msk                        /*!< Capture/Compare 1 clear flag  */
#define LPTIM_ICR_ARRMCF_Pos        (1U)
#define LPTIM_ICR_ARRMCF_Msk        (0x1UL << LPTIM_ICR_ARRMCF_Pos)            /*!< 0x00000002 */
#define LPTIM_ICR_ARRMCF            LPTIM_ICR_ARRMCF_Msk                       /*!< Autoreload match clear flag */
#define LPTIM_ICR_EXTTRIGCF_Pos     (2U)
#define LPTIM_ICR_EXTTRIGCF_Msk     (0x1UL << LPTIM_ICR_EXTTRIGCF_Pos)         /*!< 0x00000004 */
#define LPTIM_ICR_EXTTRIGCF         LPTIM_ICR_EXTTRIGCF_Msk                    /*!< External trigger edge event clear flag */
#define LPTIM_ICR_CMP1OKCF_Pos      (3U)
#define LPTIM_ICR_CMP1OKCF_Msk      (0x1UL << LPTIM_ICR_CMP1OKCF_Pos)          /*!< 0x00000008 */
#define LPTIM_ICR_CMP1OKCF          LPTIM_ICR_CMP1OKCF_Msk                     /*!< Compare register 1 update OK clear flag */
#define LPTIM_ICR_ARROKCF_Pos       (4U)
#define LPTIM_ICR_ARROKCF_Msk       (0x1UL << LPTIM_ICR_ARROKCF_Pos)           /*!< 0x00000010 */
#define LPTIM_ICR_ARROKCF           LPTIM_ICR_ARROKCF_Msk                      /*!< Autoreload register update OK clear flag */
#define LPTIM_ICR_UPCF_Pos          (5U)
#define LPTIM_ICR_UPCF_Msk          (0x1UL << LPTIM_ICR_UPCF_Pos)              /*!< 0x00000020 */
#define LPTIM_ICR_UPCF              LPTIM_ICR_UPCF_Msk                         /*!< Counter direction change down to up clear flag */
#define LPTIM_ICR_DOWNCF_Pos        (6U)
#define LPTIM_ICR_DOWNCF_Msk        (0x1UL << LPTIM_ICR_DOWNCF_Pos)            /*!< 0x00000040 */
#define LPTIM_ICR_DOWNCF            LPTIM_ICR_DOWNCF_Msk                       /*!< Counter direction change up to down clear flag */
#define LPTIM_ICR_UECF_Pos          (7U)
#define LPTIM_ICR_UECF_Msk          (0x1UL << LPTIM_ICR_UECF_Pos)              /*!< 0x00000080 */
#define LPTIM_ICR_UECF              LPTIM_ICR_UECF_Msk                         /*!< Update event clear flag */
#define LPTIM_ICR_REPOKCF_Pos       (8U)
#define LPTIM_ICR_REPOKCF_Msk       (0x1UL << LPTIM_ICR_REPOKCF_Pos)           /*!< 0x00000100 */
#define LPTIM_ICR_REPOKCF           LPTIM_ICR_REPOKCF_Msk                      /*!< Repetition register update OK clear flag */
#define LPTIM_ICR_CC2CF_Pos         (9U)
#define LPTIM_ICR_CC2CF_Msk         (0x1UL << LPTIM_ICR_CC2CF_Pos)             /*!< 0x00000200 */
#define LPTIM_ICR_CC2CF             LPTIM_ICR_CC2CF_Msk                        /*!< Capture/Compare 2 clear flag  */
#define LPTIM_ICR_CC1OCF_Pos        (12U)
#define LPTIM_ICR_CC1OCF_Msk        (0x1UL << LPTIM_ICR_CC1OCF_Pos)            /*!< 0x00001000 */
#define LPTIM_ICR_CC1OCF            LPTIM_ICR_CC1OCF_Msk                       /*!< Capture/Compare 1 over-capture clear flag */
#define LPTIM_ICR_CC2OCF_Pos        (13U)
#define LPTIM_ICR_CC2OCF_Msk        (0x1UL << LPTIM_ICR_CC2OCF_Pos)            /*!< 0x00002000 */
#define LPTIM_ICR_CC2OFCF           LPTIM_ICR_CC2OCF_Msk                       /*!< Capture/Compare 2 over-capture clear flag */
#define LPTIM_ICR_CMP2OKCF_Pos      (19U)
#define LPTIM_ICR_CMP2OKCF_Msk      (0x1UL << LPTIM_ICR_CMP2OKCF_Pos)          /*!< 0x00080000 */
#define LPTIM_ICR_CMP2OKCF          LPTIM_ICR_CMP2OKCF_Msk                     /*!< Compare register 2 update OK clear flag */

/******************  Bit definition for LPTIM_DIER register *******************/
#define LPTIM_DIER_CC1IE_Pos         (0U)
#define LPTIM_DIER_CC1IE_Msk         (0x1UL << LPTIM_DIER_CC1IE_Pos)           /*!< 0x00000001 */
#define LPTIM_DIER_CC1IE             LPTIM_DIER_CC1IE_Msk                      /*!< Compare/Compare interrupt enable */
#define LPTIM_DIER_ARRMIE_Pos        (1U)
#define LPTIM_DIER_ARRMIE_Msk        (0x1UL << LPTIM_DIER_ARRMIE_Pos)          /*!< 0x00000002 */
#define LPTIM_DIER_ARRMIE            LPTIM_DIER_ARRMIE_Msk                     /*!< Autoreload match interrupt enable */
#define LPTIM_DIER_EXTTRIGIE_Pos     (2U)
#define LPTIM_DIER_EXTTRIGIE_Msk     (0x1UL << LPTIM_DIER_EXTTRIGIE_Pos)       /*!< 0x00000004 */
#define LPTIM_DIER_EXTTRIGIE         LPTIM_DIER_EXTTRIGIE_Msk                  /*!< External trigger edge event interrupt enable */
#define LPTIM_DIER_CMP1OKIE_Pos      (3U)
#define LPTIM_DIER_CMP1OKIE_Msk      (0x1UL << LPTIM_DIER_CMP1OKIE_Pos)         /*!< 0x00000008 */
#define LPTIM_DIER_CMP1OKIE          LPTIM_DIER_CMP1OKIE_Msk                    /*!< Compare register 1 update OK interrupt enable */
#define LPTIM_DIER_ARROKIE_Pos       (4U)
#define LPTIM_DIER_ARROKIE_Msk       (0x1UL << LPTIM_DIER_ARROKIE_Pos)         /*!< 0x00000010 */
#define LPTIM_DIER_ARROKIE           LPTIM_DIER_ARROKIE_Msk                    /*!< Autoreload register update OK interrupt enable */
#define LPTIM_DIER_UPIE_Pos          (5U)
#define LPTIM_DIER_UPIE_Msk          (0x1UL << LPTIM_DIER_UPIE_Pos)            /*!< 0x00000020 */
#define LPTIM_DIER_UPIE              LPTIM_DIER_UPIE_Msk                       /*!< Counter direction change down to up interrupt enable */
#define LPTIM_DIER_DOWNIE_Pos        (6U)
#define LPTIM_DIER_DOWNIE_Msk        (0x1UL << LPTIM_DIER_DOWNIE_Pos)          /*!< 0x00000040 */
#define LPTIM_DIER_DOWNIE            LPTIM_DIER_DOWNIE_Msk                     /*!< Counter direction change up to down interrupt enable */
#define LPTIM_DIER_UEIE_Pos          (7U)
#define LPTIM_DIER_UEIE_Msk          (0x1UL << LPTIM_DIER_UEIE_Pos)            /*!< 0x00000080 */
#define LPTIM_DIER_UEIE              LPTIM_DIER_UEIE_Msk                       /*!< Update event interrupt enable */
#define LPTIM_DIER_REPOKIE_Pos       (8U)
#define LPTIM_DIER_REPOKIE_Msk       (0x1UL << LPTIM_DIER_REPOKIE_Pos)         /*!< 0x00000100 */
#define LPTIM_DIER_REPOKIE           LPTIM_DIER_REPOKIE_Msk                    /*!< Repetition register update OK interrupt enable */
#define LPTIM_DIER_CC2IE_Pos         (9U)
#define LPTIM_DIER_CC2IE_Msk         (0x1UL << LPTIM_DIER_CC2IE_Pos)           /*!< 0x00000200 */
#define LPTIM_DIER_CC2IE             LPTIM_DIER_CC2IE_Msk                      /*!< Capture/Compare 2 interrupt interrupt enable */
#define LPTIM_DIER_CC1OIE_Pos        (12U)
#define LPTIM_DIER_CC1OIE_Msk        (0x1UL << LPTIM_DIER_CC1OIE_Pos)          /*!< 0x00001000 */
#define LPTIM_DIER_CC1OIE            LPTIM_DIER_CC1OIE_Msk                     /*!< Capture/Compare 1 over-capture interrupt enable */
#define LPTIM_DIER_CC2OIE_Pos        (13U)
#define LPTIM_DIER_CC2OIE_Msk        (0x1UL << LPTIM_DIER_CC2OIE_Pos)          /*!< 0x00002000 */
#define LPTIM_DIER_CC2OIE            LPTIM_DIER_CC2OIE_Msk                     /*!< Capture/Compare 2 over-capture interrupt enable */
#define LPTIM_DIER_CC1DE_Pos         (16U)
#define LPTIM_DIER_CC1DE_Msk         (0x1UL << LPTIM_DIER_CC1DE_Pos)           /*!< 0x00010000 */
#define LPTIM_DIER_CC1DE             LPTIM_DIER_CC1DE_Msk                      /*!< Capture/Compare 1 DMA request enable */
#define LPTIM_DIER_CMP2OKIE_Pos      (19U)
#define LPTIM_DIER_CMP2OKIE_Msk      (0x1UL << LPTIM_DIER_CMP2OKIE_Pos)        /*!< 0x00080000 */
#define LPTIM_DIER_CMP2OKIE          LPTIM_DIER_CMP2OKIE_Msk                   /*!< Compare register 2 update OK interrupt enable */
#define LPTIM_DIER_UEDE_Pos          (23U)
#define LPTIM_DIER_UEDE_Msk          (0x1UL << LPTIM_DIER_UEDE_Pos)            /*!< 0x00800000 */
#define LPTIM_DIER_UEDE              LPTIM_DIER_UEDE_Msk                       /*!< Update event DMA request enable */
#define LPTIM_DIER_CC2DE_Pos         (25U)
#define LPTIM_DIER_CC2DE_Msk         (0x1UL << LPTIM_DIER_CC2DE_Pos)           /*!< 0x02000000 */
#define LPTIM_DIER_CC2DE             LPTIM_DIER_CC2DE_Msk                      /*!< Capture/Compare 2 DMA request enable */

/******************  Bit definition for LPTIM_CFGR register *******************/
#define LPTIM_CFGR_CKSEL_Pos        (0U)
#define LPTIM_CFGR_CKSEL_Msk        (0x1UL << LPTIM_CFGR_CKSEL_Pos)            /*!< 0x00000001 */
#define LPTIM_CFGR_CKSEL            LPTIM_CFGR_CKSEL_Msk                       /*!< Clock selector */
#define LPTIM_CFGR_CKPOL_Pos        (1U)
#define LPTIM_CFGR_CKPOL_Msk        (0x3UL << LPTIM_CFGR_CKPOL_Pos)            /*!< 0x00000006 */
#define LPTIM_CFGR_CKPOL            LPTIM_CFGR_CKPOL_Msk                       /*!< CKPOL[1:0] bits (Clock polarity) */
#define LPTIM_CFGR_CKPOL_0          (0x1U << LPTIM_CFGR_CKPOL_Pos)             /*!< 0x00000002 */
#define LPTIM_CFGR_CKPOL_1          (0x2U << LPTIM_CFGR_CKPOL_Pos)             /*!< 0x00000004 */
#define LPTIM_CFGR_CKFLT_Pos        (3U)
#define LPTIM_CFGR_CKFLT_Msk        (0x3UL << LPTIM_CFGR_CKFLT_Pos)            /*!< 0x00000018 */
#define LPTIM_CFGR_CKFLT            LPTIM_CFGR_CKFLT_Msk                       /*!< CKFLT[1:0] bits (Configurable digital filter for external clock) */
#define LPTIM_CFGR_CKFLT_0          (0x1U << LPTIM_CFGR_CKFLT_Pos)             /*!< 0x00000008 */
#define LPTIM_CFGR_CKFLT_1          (0x2U << LPTIM_CFGR_CKFLT_Pos)             /*!< 0x00000010 */
#define LPTIM_CFGR_TRGFLT_Pos       (6U)
#define LPTIM_CFGR_TRGFLT_Msk       (0x3UL << LPTIM_CFGR_TRGFLT_Pos)           /*!< 0x000000C0 */
#define LPTIM_CFGR_TRGFLT           LPTIM_CFGR_TRGFLT_Msk                      /*!< TRGFLT[1:0] bits (Configurable digital filter for trigger) */
#define LPTIM_CFGR_TRGFLT_0         (0x1U << LPTIM_CFGR_TRGFLT_Pos)            /*!< 0x00000040 */
#define LPTIM_CFGR_TRGFLT_1         (0x2U << LPTIM_CFGR_TRGFLT_Pos)            /*!< 0x00000080 */
#define LPTIM_CFGR_PRESC_Pos        (9U)
#define LPTIM_CFGR_PRESC_Msk        (0x7UL << LPTIM_CFGR_PRESC_Pos)            /*!< 0x00000E00 */
#define LPTIM_CFGR_PRESC            LPTIM_CFGR_PRESC_Msk                       /*!< PRESC[2:0] bits (Clock prescaler) */
#define LPTIM_CFGR_PRESC_0          (0x1U << LPTIM_CFGR_PRESC_Pos)             /*!< 0x00000200 */
#define LPTIM_CFGR_PRESC_1          (0x2U << LPTIM_CFGR_PRESC_Pos)             /*!< 0x00000400 */
#define LPTIM_CFGR_PRESC_2          (0x4U << LPTIM_CFGR_PRESC_Pos)             /*!< 0x00000800 */
#define LPTIM_CFGR_TRIGSEL_Pos      (13U)
#define LPTIM_CFGR_TRIGSEL_Msk      (0x7UL << LPTIM_CFGR_TRIGSEL_Pos)          /*!< 0x0000E000 */
#define LPTIM_CFGR_TRIGSEL          LPTIM_CFGR_TRIGSEL_Msk                     /*!< TRIGSEL[2:0]] bits (Trigger selector) */
#define LPTIM_CFGR_TRIGSEL_0        (0x1U << LPTIM_CFGR_TRIGSEL_Pos)           /*!< 0x00002000 */
#define LPTIM_CFGR_TRIGSEL_1        (0x2U << LPTIM_CFGR_TRIGSEL_Pos)           /*!< 0x00004000 */
#define LPTIM_CFGR_TRIGSEL_2        (0x4U << LPTIM_CFGR_TRIGSEL_Pos)           /*!< 0x00008000 */
#define LPTIM_CFGR_TRIGEN_Pos       (17U)
#define LPTIM_CFGR_TRIGEN_Msk       (0x3UL << LPTIM_CFGR_TRIGEN_Pos)           /*!< 0x00060000 */
#define LPTIM_CFGR_TRIGEN           LPTIM_CFGR_TRIGEN_Msk                      /*!< TRIGEN[1:0] bits (Trigger enable and polarity) */
#define LPTIM_CFGR_TRIGEN_0         (0x1U << LPTIM_CFGR_TRIGEN_Pos)            /*!< 0x00020000 */
#define LPTIM_CFGR_TRIGEN_1         (0x2U << LPTIM_CFGR_TRIGEN_Pos)            /*!< 0x00040000 */
#define LPTIM_CFGR_TIMOUT_Pos       (19U)
#define LPTIM_CFGR_TIMOUT_Msk       (0x1UL << LPTIM_CFGR_TIMOUT_Pos)           /*!< 0x00080000 */
#define LPTIM_CFGR_TIMOUT           LPTIM_CFGR_TIMOUT_Msk                      /*!< Timout enable */
#define LPTIM_CFGR_WAVE_Pos         (20U)
#define LPTIM_CFGR_WAVE_Msk         (0x1UL << LPTIM_CFGR_WAVE_Pos)             /*!< 0x00100000 */
#define LPTIM_CFGR_WAVE             LPTIM_CFGR_WAVE_Msk                        /*!< Waveform shape */
#define LPTIM_CFGR_PRELOAD_Pos      (22U)
#define LPTIM_CFGR_PRELOAD_Msk      (0x1UL << LPTIM_CFGR_PRELOAD_Pos)          /*!< 0x00400000 */
#define LPTIM_CFGR_PRELOAD          LPTIM_CFGR_PRELOAD_Msk                     /*!< Reg update mode */
#define LPTIM_CFGR_COUNTMODE_Pos    (23U)
#define LPTIM_CFGR_COUNTMODE_Msk    (0x1UL << LPTIM_CFGR_COUNTMODE_Pos)        /*!< 0x00800000 */
#define LPTIM_CFGR_COUNTMODE        LPTIM_CFGR_COUNTMODE_Msk                   /*!< Counter mode enable */
#define LPTIM_CFGR_ENC_Pos          (24U)
#define LPTIM_CFGR_ENC_Msk          (0x1UL << LPTIM_CFGR_ENC_Pos)              /*!< 0x01000000 */
#define LPTIM_CFGR_ENC              LPTIM_CFGR_ENC_Msk                         /*!< Encoder mode enable */

/******************  Bit definition for LPTIM_CR register  ********************/
#define LPTIM_CR_ENABLE_Pos         (0U)
#define LPTIM_CR_ENABLE_Msk         (0x1UL << LPTIM_CR_ENABLE_Pos)             /*!< 0x00000001 */
#define LPTIM_CR_ENABLE             LPTIM_CR_ENABLE_Msk                        /*!< LPTIMer enable */
#define LPTIM_CR_SNGSTRT_Pos        (1U)
#define LPTIM_CR_SNGSTRT_Msk        (0x40001UL << LPTIM_CR_SNGSTRT_Pos)        /*!< 0x00080002 */
#define LPTIM_CR_SNGSTRT            LPTIM_CR_SNGSTRT_Msk                       /*!< Timer start in single mode */
#define LPTIM_CR_CNTSTRT_Pos        (2U)
#define LPTIM_CR_CNTSTRT_Msk        (0x1UL << LPTIM_CR_CNTSTRT_Pos)            /*!< 0x00000004 */
#define LPTIM_CR_CNTSTRT            LPTIM_CR_CNTSTRT_Msk                       /*!< Timer start in continuous mode */
#define LPTIM_CR_COUNTRST_Pos       (3U)
#define LPTIM_CR_COUNTRST_Msk       (0x1UL << LPTIM_CR_COUNTRST_Pos)           /*!< 0x00000008 */
#define LPTIM_CR_COUNTRST           LPTIM_CR_COUNTRST_Msk                      /*!< Timer Counter reset in synchronous mode*/
#define LPTIM_CR_RSTARE_Pos         (4U)
#define LPTIM_CR_RSTARE_Msk         (0x1UL << LPTIM_CR_RSTARE_Pos)             /*!< 0x00000010 */
#define LPTIM_CR_RSTARE             LPTIM_CR_RSTARE_Msk                        /*!< Timer Counter reset after read enable (asynchronously)*/

/******************  Bit definition for LPTIM_CCR1 register  ******************/
#define LPTIM_CCR1_CCR1_Pos         (0U)
#define LPTIM_CCR1_CCR1_Msk         (0xFFFFUL << LPTIM_CCR1_CCR1_Pos)          /*!< 0x0000FFFF */
#define LPTIM_CCR1_CCR1             LPTIM_CCR1_CCR1_Msk                        /*!< Compare register 1 */

/******************  Bit definition for LPTIM_ARR register  *******************/
#define LPTIM_ARR_ARR_Pos           (0U)
#define LPTIM_ARR_ARR_Msk           (0xFFFFUL << LPTIM_ARR_ARR_Pos)            /*!< 0x0000FFFF */
#define LPTIM_ARR_ARR               LPTIM_ARR_ARR_Msk                          /*!< Auto reload register */

/******************  Bit definition for LPTIM_CNT register  *******************/
#define LPTIM_CNT_CNT_Pos           (0U)
#define LPTIM_CNT_CNT_Msk           (0xFFFFUL << LPTIM_CNT_CNT_Pos)            /*!< 0x0000FFFF */
#define LPTIM_CNT_CNT               LPTIM_CNT_CNT_Msk                          /*!< Counter register */

/******************  Bit definition for LPTIM_CFGR2 register  *****************/
#define LPTIM_CFGR2_IN1SEL_Pos      (0U)
#define LPTIM_CFGR2_IN1SEL_Msk      (0x3UL << LPTIM_CFGR2_IN1SEL_Pos)          /*!< 0x00000003 */
#define LPTIM_CFGR2_IN1SEL          LPTIM_CFGR2_IN1SEL_Msk                     /*!< IN1SEL[1:0] bits (Remap selection) */
#define LPTIM_CFGR2_IN1SEL_0        (0x1U << LPTIM_CFGR2_IN1SEL_Pos)           /*!< 0x00000001 */
#define LPTIM_CFGR2_IN1SEL_1        (0x2U << LPTIM_CFGR2_IN1SEL_Pos)           /*!< 0x00000002 */
#define LPTIM_CFGR2_IN2SEL_Pos      (4U)
#define LPTIM_CFGR2_IN2SEL_Msk      (0x3UL << LPTIM_CFGR2_IN2SEL_Pos)          /*!< 0x00000030 */
#define LPTIM_CFGR2_IN2SEL          LPTIM_CFGR2_IN2SEL_Msk                     /*!< IN2SEL[5:4] bits (Remap selection) */
#define LPTIM_CFGR2_IN2SEL_0        (0x1U << LPTIM_CFGR2_IN2SEL_Pos)           /*!< 0x00000010 */
#define LPTIM_CFGR2_IN2SEL_1        (0x2U << LPTIM_CFGR2_IN2SEL_Pos)           /*!< 0x00000020 */
#define LPTIM_CFGR2_IC1SEL_Pos      (16U)
#define LPTIM_CFGR2_IC1SEL_Msk      (0x3UL << LPTIM_CFGR2_IC1SEL_Pos)          /*!< 0x00000003 */
#define LPTIM_CFGR2_IC1SEL          LPTIM_CFGR2_IC1SEL_Msk                     /*!< IC1SEL[17:16] bits */
#define LPTIM_CFGR2_IC1SEL_0        (0x1U << LPTIM_CFGR2_IC1SEL_Pos)           /*!< 0x00010000 */
#define LPTIM_CFGR2_IC1SEL_1        (0x2U << LPTIM_CFGR2_IC1SEL_Pos)           /*!< 0x00020000 */
#define LPTIM_CFGR2_IC2SEL_Pos      (20U)
#define LPTIM_CFGR2_IC2SEL_Msk      (0x3UL << LPTIM_CFGR2_IC2SEL_Pos)          /*!< 0x00000030 */
#define LPTIM_CFGR2_IC2SEL          LPTIM_CFGR2_IC2SEL_Msk                     /*!< IC2SEL[21:20] bits */
#define LPTIM_CFGR2_IC2SEL_0        (0x1U << LPTIM_CFGR2_IC2SEL_Pos)           /*!< 0x00100000 */
#define LPTIM_CFGR2_IC2SEL_1        (0x2U << LPTIM_CFGR2_IC2SEL_Pos)           /*!< 0x00200000 */

/******************  Bit definition for LPTIM_RCR register  *******************/
#define LPTIM_RCR_REP_Pos           (0U)
#define LPTIM_RCR_REP_Msk           (0xFFUL << LPTIM_RCR_REP_Pos)              /*!< 0x000000FF */
#define LPTIM_RCR_REP               LPTIM_RCR_REP_Msk                          /*!< Repetition register value */

/*****************  Bit definition for LPTIM_CCMR1 register  ******************/
#define LPTIM_CCMR1_CC1SEL_Pos      (0U)
#define LPTIM_CCMR1_CC1SEL_Msk      (0x1L << LPTIM_CCMR1_CC1SEL_Pos)           /*!< 0x00000001 */
#define LPTIM_CCMR1_CC1SEL          LPTIM_CCMR1_CC1SEL_Msk                     /*!< Capture/Compare 1 selection */
#define LPTIM_CCMR1_CC1E_Pos        (1U)
#define LPTIM_CCMR1_CC1E_Msk        (0x1L << LPTIM_CCMR1_CC1E_Pos)             /*!< 0x00000002 */
#define LPTIM_CCMR1_CC1E            LPTIM_CCMR1_CC1E_Msk                       /*!< Capture/Compare 1 output enable */
#define LPTIM_CCMR1_CC1P_Pos        (2U)
#define LPTIM_CCMR1_CC1P_Msk        (0x3L << LPTIM_CCMR1_CC1P_Pos)             /*!< 0x0000000C */
#define LPTIM_CCMR1_CC1P            LPTIM_CCMR1_CC1P_Msk                       /*!< Capture/Compare 1 output polarity */
#define LPTIM_CCMR1_CC1P_0          (0x1U << LPTIM_CCMR1_CC1P_Pos)             /*!< 0x00000004 */
#define LPTIM_CCMR1_CC1P_1          (0x2U << LPTIM_CCMR1_CC1P_Pos)             /*!< 0x00000008 */
#define LPTIM_CCMR1_CC1M_Pos        (4U)
#define LPTIM_CCMR1_CC1M_Msk        (0x1L << LPTIM_CCMR1_CC1M_Pos)             /*!< 0x00000002 */
#define LPTIM_CCMR1_CC1M            LPTIM_CCMR1_CC1M_Msk                       /*!< Output channel 1 mode */
#define LPTIM_CCMR1_IC1PSC_Pos      (8U)
#define LPTIM_CCMR1_IC1PSC_Msk      (0x3L << LPTIM_CCMR1_IC1PSC_Pos)           /*!< 0x00000300 */
#define LPTIM_CCMR1_IC1PSC          LPTIM_CCMR1_IC1PSC_Msk                     /*!< Input capture 1 prescaler */
#define LPTIM_CCMR1_IC1PSC_0        (0x1U << LPTIM_CCMR1_IC1PSC_Pos)           /*!< 0x00000100 */
#define LPTIM_CCMR1_IC1PSC_1        (0x2U << LPTIM_CCMR1_IC1PSC_Pos)           /*!< 0x00000200 */
#define LPTIM_CCMR1_IC1F_Pos        (12U)
#define LPTIM_CCMR1_IC1F_Msk        (0x3L << LPTIM_CCMR1_IC1F_Pos)             /*!< 0x00003000 */
#define LPTIM_CCMR1_IC1F            LPTIM_CCMR1_IC1F_Msk                       /*!< Input capture 1 filter */
#define LPTIM_CCMR1_IC1F_0          (0x1U << LPTIM_CCMR1_IC1F_Pos)             /*!< 0x00001000 */
#define LPTIM_CCMR1_IC1F_1          (0x2U << LPTIM_CCMR1_IC1F_Pos)             /*!< 0x00002000 */
#define LPTIM_CCMR1_CC2SEL_Pos      (16U)
#define LPTIM_CCMR1_CC2SEL_Msk      (0x1L << LPTIM_CCMR1_CC2SEL_Pos)           /*!< 0x00010000 */
#define LPTIM_CCMR1_CC2SEL          LPTIM_CCMR1_CC2SEL_Msk                     /*!< Capture/Compare 2 selection */
#define LPTIM_CCMR1_CC2E_Pos        (17U)
#define LPTIM_CCMR1_CC2E_Msk        (0x1L << LPTIM_CCMR1_CC2E_Pos)             /*!< 0x00020000 */
#define LPTIM_CCMR1_CC2E            LPTIM_CCMR1_CC2E_Msk                       /*!< Capture/Compare 2 output enable */
#define LPTIM_CCMR1_CC2P_Pos        (18U)
#define LPTIM_CCMR1_CC2P_Msk        (0x3L << LPTIM_CCMR1_CC2P_Pos)             /*!< 0x000C0000 */
#define LPTIM_CCMR1_CC2P            LPTIM_CCMR1_CC2P_Msk                       /*!< Capture/Compare 2 output polarity */
#define LPTIM_CCMR1_CC2P_0          (0x1U << LPTIM_CCMR1_CC2P_Pos)             /*!< 0x00040000 */
#define LPTIM_CCMR1_CC2P_1          (0x2U << LPTIM_CCMR1_CC2P_Pos)             /*!< 0x00080000 */
#define LPTIM_CCMR1_CC2M_Pos        (20U)
#define LPTIM_CCMR1_CC2M_Msk        (0x1L << LPTIM_CCMR2_CC1M_Pos)             /*!< 0x00000002 */
#define LPTIM_CCMR1_CC2M            LPTIM_CCMR1_CC2M_Msk                       /*!< Output channel 2 mode */
#define LPTIM_CCMR1_IC2PSC_Pos      (24U)
#define LPTIM_CCMR1_IC2PSC_Msk      (0x3L << LPTIM_CCMR1_IC2PSC_Pos)           /*!< 0x03000000 */
#define LPTIM_CCMR1_IC2PSC          LPTIM_CCMR1_IC2PSC_Msk                     /*!< Input capture 2 prescaler */
#define LPTIM_CCMR1_IC2PSC_0        (0x1U << LPTIM_CCMR1_IC2PSC_Pos)           /*!< 0x01000000 */
#define LPTIM_CCMR1_IC2PSC_1        (0x2U << LPTIM_CCMR1_IC2PSC_Pos)           /*!< 0x02000000 */
#define LPTIM_CCMR1_IC2F_Pos        (28U)
#define LPTIM_CCMR1_IC2F_Msk        (0x3L << LPTIM_CCMR1_IC2F_Pos)             /*!< 0x30000000 */
#define LPTIM_CCMR1_IC2F            LPTIM_CCMR1_IC2F_Msk                       /*!< Input capture 2 filter */
#define LPTIM_CCMR1_IC2F_0          (0x1U << LPTIM_CCMR1_IC2F_Pos)             /*!< 0x10000000 */
#define LPTIM_CCMR1_IC2F_1          (0x2U << LPTIM_CCMR1_IC2F_Pos)             /*!< 0x20000000 */

/******************  Bit definition for LPTIM_CCR2 register  ******************/
#define LPTIM_CCR2_CCR2_Pos         (0U)
#define LPTIM_CCR2_CCR2_Msk         (0xFFFFUL << LPTIM_CCR2_CCR2_Pos)          /*!< 0x0000FFFF */
#define LPTIM_CCR2_CCR2             LPTIM_CCR2_CCR2_Msk                        /*!< Compare register 2 */

/******************************************************************************/
/*                                                                            */
/*                      LCD-TFT Display Controller (LTDC)                     */
/*                                                                            */
/******************************************************************************/

/* Bit fields for LTDC_IDR register */
#define LTDC_IDR_REV_Pos                 (0U)
#define LTDC_IDR_REV_Msk                 (0xffU << LTDC_IDR_REV_Pos)
#define LTDC_IDR_REV                     LTDC_IDR_REV_Msk  /*!< revision */
#define LTDC_IDR_MINVER_Pos              (8U)
#define LTDC_IDR_MINVER_Msk              (0xffU << LTDC_IDR_MINVER_Pos)
#define LTDC_IDR_MINVER                  LTDC_IDR_MINVER_Msk  /*!< minor version */
#define LTDC_IDR_MAJVER_Pos              (16U)
#define LTDC_IDR_MAJVER_Msk              (0xffU << LTDC_IDR_MAJVER_Pos)
#define LTDC_IDR_MAJVER                  LTDC_IDR_MAJVER_Msk  /*!< major version */

/* Bit fields for LTDC_LCR register */
#define LTDC_LCR_LNBR_Pos                (0U)
#define LTDC_LCR_LNBR_Msk                (0xffU << LTDC_LCR_LNBR_Pos)
#define LTDC_LCR_LNBR                    LTDC_LCR_LNBR_Msk  /*!< number of layers */

/* Bit fields for LTDC_SSCR register */
#define LTDC_SSCR_VSH_Pos                (0U)
#define LTDC_SSCR_VSH_Msk                (0xffffU << LTDC_SSCR_VSH_Pos)
#define LTDC_SSCR_VSH                    LTDC_SSCR_VSH_Msk  /*!< vertical synchronization height (in units of horizontal scan line)These bits define the vertical Synchronization height minus 1. It represents the number of horizontal synchronization lines. */
#define LTDC_SSCR_HSW_Pos                (16U)
#define LTDC_SSCR_HSW_Msk                (0xffffU << LTDC_SSCR_HSW_Pos)
#define LTDC_SSCR_HSW                    LTDC_SSCR_HSW_Msk  /*!< horizontal synchronization width (in units of pixel clock period)These bits define the number of Horizontal Synchronization pixel minus 1. */

/* Bit fields for LTDC_BPCR register */
#define LTDC_BPCR_AVBP_Pos               (0U)
#define LTDC_BPCR_AVBP_Msk               (0xffffU << LTDC_BPCR_AVBP_Pos)
#define LTDC_BPCR_AVBP                   LTDC_BPCR_AVBP_Msk  /*!< accumulated Vertical back porch (in units of horizontal scan line)These bits define the accumulated vertical back porch width that includes the vertical synchronization and vertical back porch lines minus 1.The vertical back porch is the number of horizontal scan lines at a start of frame to the start of the first active scan line of the next frame. */
#define LTDC_BPCR_AHBP_Pos               (16U)
#define LTDC_BPCR_AHBP_Msk               (0xffffU << LTDC_BPCR_AHBP_Pos)
#define LTDC_BPCR_AHBP                   LTDC_BPCR_AHBP_Msk  /*!< accumulated horizontal back porch (in units of pixel clock period)These bits define the accumulated horizontal back porch width that includes the horizontal synchronization and horizontal back porch pixels minus 1.The horizontal back porch is the period between horizontal synchronization going inactive and the start of the active display part of the next scan line. */

/* Bit fields for LTDC_AWCR register */
#define LTDC_AWCR_AAH_Pos                (0U)
#define LTDC_AWCR_AAH_Msk                (0xffffU << LTDC_AWCR_AAH_Pos)
#define LTDC_AWCR_AAH                    LTDC_AWCR_AAH_Msk  /*!< accumulated active height (in units of horizontal scan line)These bits define the accumulated height which includes the vertical synchronization, vertical back porch and the active height lines minus 1. The active height is the number of active lines in the panel.Refer to device datasheet for maximum active height supported following maximum pixel clock. */
#define LTDC_AWCR_AAW_Pos                (16U)
#define LTDC_AWCR_AAW_Msk                (0xffffU << LTDC_AWCR_AAW_Pos)
#define LTDC_AWCR_AAW                    LTDC_AWCR_AAW_Msk  /*!< accumulated active width (in units of pixel clock period)These bits define the accumulated active width which includes the horizontal synchronization, horizontal back porch and active pixels minus 1.The active width is the number of pixels in active display area of the panel scan line.Refer to device datasheet for maximum active width supported following maximum pixel clock. */

/* Bit fields for LTDC_TWCR register */
#define LTDC_TWCR_TOTALH_Pos             (0U)
#define LTDC_TWCR_TOTALH_Msk             (0xffffU << LTDC_TWCR_TOTALH_Pos)
#define LTDC_TWCR_TOTALH                 LTDC_TWCR_TOTALH_Msk  /*!< total height (in units of horizontal scan line)These bits defines the accumulated height which includes the vertical synchronization, vertical back porch, the active height and vertical front porch height lines minus 1. */
#define LTDC_TWCR_TOTALW_Pos             (16U)
#define LTDC_TWCR_TOTALW_Msk             (0xffffU << LTDC_TWCR_TOTALW_Pos)
#define LTDC_TWCR_TOTALW                 LTDC_TWCR_TOTALW_Msk  /*!< total width (in units of pixel clock period)These bits defines the accumulated total width which includes the horizontal synchronization, horizontal back porch, active width and horizontal front porch pixels minus 1. */

/* Bit fields for LTDC_GCR register */
#define LTDC_GCR_LTDCEN_Pos              (0U)
#define LTDC_GCR_LTDCEN_Msk              (0x1U << LTDC_GCR_LTDCEN_Pos)
#define LTDC_GCR_LTDCEN                  LTDC_GCR_LTDCEN_Msk  /*!< LCD-TFT controller enableThis bit is set and cleared by software.- 0: LTDC disable- 1: LTDC enable */
#define LTDC_GCR_GAMEN_Pos               (1U)
#define LTDC_GCR_GAMEN_Msk               (0x1U << LTDC_GCR_GAMEN_Pos)
#define LTDC_GCR_GAMEN                   LTDC_GCR_GAMEN_Msk  /*!< LCD-TFT controller enableThis bit is set and cleared by software.- 0: GammaCorrection disable (pixels bypass the gamma operator)- 1: Gamma Correction enable */
#define LTDC_GCR_ROTEN_Pos               (2U)
#define LTDC_GCR_ROTEN_Msk               (0x1U << LTDC_GCR_ROTEN_Pos)
#define LTDC_GCR_ROTEN                   LTDC_GCR_ROTEN_Msk  /*!< LCD-TFT controller enableThis bit is set and cleared by software.- 0: Rotation disable- 1: Rotation enable (for a pure visual rotation, the mirroring has to be activated) */
#define LTDC_GCR_DBW_Pos                 (4U)
#define LTDC_GCR_DBW_Msk                 (0x7U << LTDC_GCR_DBW_Pos)
#define LTDC_GCR_DBW                     LTDC_GCR_DBW_Msk  /*!< dither blue widthThese bits return the dither blue bits. */
#define LTDC_GCR_DGW_Pos                 (8U)
#define LTDC_GCR_DGW_Msk                 (0x7U << LTDC_GCR_DGW_Pos)
#define LTDC_GCR_DGW                     LTDC_GCR_DGW_Msk  /*!< dither green widthThese bits return the dither green bits. */
#define LTDC_GCR_DRW_Pos                 (12U)
#define LTDC_GCR_DRW_Msk                 (0x7U << LTDC_GCR_DRW_Pos)
#define LTDC_GCR_DRW                     LTDC_GCR_DRW_Msk  /*!< dither red widthThese bits return the Dither Red Bits. */
#define LTDC_GCR_DEN_Pos                 (16U)
#define LTDC_GCR_DEN_Msk                 (0x1U << LTDC_GCR_DEN_Pos)
#define LTDC_GCR_DEN                     LTDC_GCR_DEN_Msk  /*!< dither enableThis bit is set and cleared by software.- 0: dither disable- 1: dither enable */
#define LTDC_GCR_BCKEN_Pos               (17U)
#define LTDC_GCR_BCKEN_Msk               (0x1U << LTDC_GCR_BCKEN_Pos)
#define LTDC_GCR_BCKEN                   LTDC_GCR_BCKEN_Msk  /*!< backgroundlayer enableThis bit is set and cleared by software.- 0: backgrounddisable- 1: background enable */
#define LTDC_GCR_CRCEN_Pos               (19U)
#define LTDC_GCR_CRCEN_Msk               (0x1U << LTDC_GCR_CRCEN_Pos)
#define LTDC_GCR_CRCEN                   LTDC_GCR_CRCEN_Msk  /*!< CRC enableThis bit is set and cleared by software.- 0: CRC disable- 1: CRC enable */
#define LTDC_GCR_SFEN_Pos                (24U)
#define LTDC_GCR_SFEN_Msk                (0x1U << LTDC_GCR_SFEN_Pos)
#define LTDC_GCR_SFEN                    LTDC_GCR_SFEN_Msk  /*!< single-frame mode: mode enableThis bit is set and cleared by software.- 0: single-frame disable:a trigger (on SFSW or External) will generate a continuous flow.- 1: single-frame enable: a trigger (on SFSW or External) will generate a single frame. */
#define LTDC_GCR_SFSWTR_Pos              (25U)
#define LTDC_GCR_SFSWTR_Msk              (0x1U << LTDC_GCR_SFSWTR_Pos)
#define LTDC_GCR_SFSWTR                  LTDC_GCR_SFSWTR_Msk  /*!< single-frame mode: software triggerThis bit is set by software and cleared by hardware.- 0: no action- 1: triggers one frame */
#define LTDC_GCR_SFEXEN_Pos              (26U)
#define LTDC_GCR_SFEXEN_Msk              (0x1U << LTDC_GCR_SFEXEN_Pos)
#define LTDC_GCR_SFEXEN                  LTDC_GCR_SFEXEN_Msk  /*!< single-frame mode: external trigger enableThis bit is set and cleared by software.- 0: external trigger disable- 1: external trigger enable: a trigger on the external trigger will generate one single frame. */
#define LTDC_GCR_PCPOL_Pos               (28U)
#define LTDC_GCR_PCPOL_Msk               (0x1U << LTDC_GCR_PCPOL_Pos)
#define LTDC_GCR_PCPOL                   LTDC_GCR_PCPOL_Msk  /*!< pixel clock polarityThis bit is set and cleared by software.- 0: pixel clock polarity is active low.- 1: pixel clock is active high. */
#define LTDC_GCR_DEPOL_Pos               (29U)
#define LTDC_GCR_DEPOL_Msk               (0x1U << LTDC_GCR_DEPOL_Pos)
#define LTDC_GCR_DEPOL                   LTDC_GCR_DEPOL_Msk  /*!< blanking (=no data/pixel) polarityThis bit is set and cleared by software.- 0: blanking (no data/pixel) polarity is active low.- 1: blanking (no data/pixel) polarity is active high. */
#define LTDC_GCR_VSPOL_Pos               (30U)
#define LTDC_GCR_VSPOL_Msk               (0x1U << LTDC_GCR_VSPOL_Pos)
#define LTDC_GCR_VSPOL                   LTDC_GCR_VSPOL_Msk  /*!< vertical synchronization polarityThis bit is set and cleared by software.- 0: vertical synchronization is active low.- 1: vertical synchronization is active high. */
#define LTDC_GCR_HSPOL_Pos               (31U)
#define LTDC_GCR_HSPOL_Msk               (0x1U << LTDC_GCR_HSPOL_Pos)
#define LTDC_GCR_HSPOL                   LTDC_GCR_HSPOL_Msk  /*!< horizontal synchronization polarityThis bit is set and cleared by software.- 0: horizontal synchronization polarity is active low.- 1: horizontal synchronization polarity is active high. */

/* Bit fields for LTDC_GC1R register */
#define LTDC_GC1R_WBCH_Pos               (0U)
#define LTDC_GC1R_WBCH_Msk               (0xfU << LTDC_GC1R_WBCH_Pos)
#define LTDC_GC1R_WBCH                   LTDC_GC1R_WBCH_Msk  /*!< width of blue channel output */
#define LTDC_GC1R_WGCH_Pos               (4U)
#define LTDC_GC1R_WGCH_Msk               (0xfU << LTDC_GC1R_WGCH_Pos)
#define LTDC_GC1R_WGCH                   LTDC_GC1R_WGCH_Msk  /*!< width of green channel output */
#define LTDC_GC1R_WRCH_Pos               (8U)
#define LTDC_GC1R_WRCH_Msk               (0xfU << LTDC_GC1R_WRCH_Pos)
#define LTDC_GC1R_WRCH                   LTDC_GC1R_WRCH_Msk  /*!< width of red channel output */
#define LTDC_GC1R_PRBA_Pos               (12U)
#define LTDC_GC1R_PRBA_Msk               (0x1U << LTDC_GC1R_PRBA_Pos)
#define LTDC_GC1R_PRBA                   LTDC_GC1R_PRBA_Msk  /*!< precise blending ability */
#define LTDC_GC1R_DT_Pos                 (14U)
#define LTDC_GC1R_DT_Msk                 (0x3U << LTDC_GC1R_DT_Pos)
#define LTDC_GC1R_DT                     LTDC_GC1R_DT_Msk  /*!< dithering technique implemented- 0: no dithering- 1: ordered 4x4 bayer- 2: ordered 4x4 custom- 3: pseudo-random LFSR */
#define LTDC_GC1R_GCT_Pos                (17U)
#define LTDC_GC1R_GCT_Msk                (0x7U << LTDC_GC1R_GCT_Pos)
#define LTDC_GC1R_GCT                    LTDC_GC1R_GCT_Msk  /*!< gamma correction technique implemented- 0: no gamma- 1: gamma with 256 samples- 2: gamma with 8 interpolated segments3..7: reserved */
#define LTDC_GC1R_SHRA_Pos               (21U)
#define LTDC_GC1R_SHRA_Msk               (0x1U << LTDC_GC1R_SHRA_Pos)
#define LTDC_GC1R_SHRA                   LTDC_GC1R_SHRA_Msk  /*!< shadow registers ability */
#define LTDC_GC1R_BCP_Pos                (22U)
#define LTDC_GC1R_BCP_Msk                (0x1U << LTDC_GC1R_BCP_Pos)
#define LTDC_GC1R_BCP                    LTDC_GC1R_BCP_Msk  /*!< background color programmability (unique color blended as background) */
#define LTDC_GC1R_BBA_Pos                (23U)
#define LTDC_GC1R_BBA_Msk                (0x1U << LTDC_GC1R_BBA_Pos)
#define LTDC_GC1R_BBA                    LTDC_GC1R_BBA_Msk  /*!< background blending ability */
#define LTDC_GC1R_LNIP_Pos               (24U)
#define LTDC_GC1R_LNIP_Msk               (0x1U << LTDC_GC1R_LNIP_Pos)
#define LTDC_GC1R_LNIP                   LTDC_GC1R_LNIP_Msk  /*!< line-IRQ: line position programmability */
#define LTDC_GC1R_TP_Pos                 (25U)
#define LTDC_GC1R_TP_Msk                 (0x1U << LTDC_GC1R_TP_Pos)
#define LTDC_GC1R_TP                     LTDC_GC1R_TP_Msk  /*!< timing programmability */
#define LTDC_GC1R_SPP_Pos                (27U)
#define LTDC_GC1R_SPP_Msk                (0x1U << LTDC_GC1R_SPP_Pos)
#define LTDC_GC1R_SPP                    LTDC_GC1R_SPP_Msk  /*!< sync polarity programmability */
#define LTDC_GC1R_DWP_Pos                (28U)
#define LTDC_GC1R_DWP_Msk                (0x1U << LTDC_GC1R_DWP_Pos)
#define LTDC_GC1R_DWP                    LTDC_GC1R_DWP_Msk  /*!< dither width programmability */
#define LTDC_GC1R_STRA_Pos               (29U)
#define LTDC_GC1R_STRA_Msk               (0x1U << LTDC_GC1R_STRA_Pos)
#define LTDC_GC1R_STRA                   LTDC_GC1R_STRA_Msk  /*!< status register ability */
#define LTDC_GC1R_CRMA_Pos               (30U)
#define LTDC_GC1R_CRMA_Msk               (0x1U << LTDC_GC1R_CRMA_Pos)
#define LTDC_GC1R_CRMA                   LTDC_GC1R_CRMA_Msk  /*!< configuration reading mode ability */
#define LTDC_GC1R_BMA_Pos                (31U)
#define LTDC_GC1R_BMA_Msk                (0x1U << LTDC_GC1R_BMA_Pos)
#define LTDC_GC1R_BMA                    LTDC_GC1R_BMA_Msk  /*!< blind mode ability */

/* Bit fields for LTDC_GC2R register */
#define LTDC_GC2R_BLA_Pos                (0U)
#define LTDC_GC2R_BLA_Msk                (0x1U << LTDC_GC2R_BLA_Pos)
#define LTDC_GC2R_BLA                    LTDC_GC2R_BLA_Msk  /*!< background layer ability (pixels of background layer would be read from memory) */
#define LTDC_GC2R_STSA_Pos               (1U)
#define LTDC_GC2R_STSA_Msk               (0x1U << LTDC_GC2R_STSA_Pos)
#define LTDC_GC2R_STSA                   LTDC_GC2R_STSA_Msk  /*!< slave timings synchronization ability */
#define LTDC_GC2R_DVA_Pos                (2U)
#define LTDC_GC2R_DVA_Msk                (0x1U << LTDC_GC2R_DVA_Pos)
#define LTDC_GC2R_DVA                    LTDC_GC2R_DVA_Msk  /*!< dual-view ability */
#define LTDC_GC2R_DPA_Pos                (3U)
#define LTDC_GC2R_DPA_Msk                (0x1U << LTDC_GC2R_DPA_Pos)
#define LTDC_GC2R_DPA                    LTDC_GC2R_DPA_Msk  /*!< secondary RGB output port ability */
#define LTDC_GC2R_BW_Pos                 (4U)
#define LTDC_GC2R_BW_Msk                 (0x7U << LTDC_GC2R_BW_Pos)
#define LTDC_GC2R_BW                     LTDC_GC2R_BW_Msk  /*!< bus width (log2 of number of bytes)- 2: 32bit bus- 3: 64bit bus- 4: 128bit bus */
#define LTDC_GC2R_EDCA_Pos               (7U)
#define LTDC_GC2R_EDCA_Msk               (0x1U << LTDC_GC2R_EDCA_Pos)
#define LTDC_GC2R_EDCA                   LTDC_GC2R_EDCA_Msk  /*!< external display control ability */
#define LTDC_GC2R_OCA_Pos                (8U)
#define LTDC_GC2R_OCA_Msk                (0x1U << LTDC_GC2R_OCA_Pos)
#define LTDC_GC2R_OCA                    LTDC_GC2R_OCA_Msk  /*!< output conversion ability (RGB to YCbCr) */
#define LTDC_GC2R_AXIIDA_Pos             (9U)
#define LTDC_GC2R_AXIIDA_Msk             (0x1U << LTDC_GC2R_AXIIDA_Pos)
#define LTDC_GC2R_AXIIDA                 LTDC_GC2R_AXIIDA_Msk  /*!< AXIID ability */
#define LTDC_GC2R_ROTA_Pos               (10U)
#define LTDC_GC2R_ROTA_Msk               (0x1U << LTDC_GC2R_ROTA_Pos)
#define LTDC_GC2R_ROTA                   LTDC_GC2R_ROTA_Msk  /*!< rotation support ability */
#define LTDC_GC2R_SISA_Pos               (11U)
#define LTDC_GC2R_SISA_Msk               (0x1U << LTDC_GC2R_SISA_Pos)
#define LTDC_GC2R_SISA                   LTDC_GC2R_SISA_Msk  /*!< second interrupt set ability- 0: second interrupt set not available- 1: second interrupt set available */
#define LTDC_GC2R_SFA_Pos                (12U)
#define LTDC_GC2R_SFA_Msk                (0x1U << LTDC_GC2R_SFA_Pos)
#define LTDC_GC2R_SFA                    LTDC_GC2R_SFA_Msk  /*!< single frame mode ability- 0: single frame not available.- 1: single frame available */
#define LTDC_GC2R_CRCA_Pos               (13U)
#define LTDC_GC2R_CRCA_Msk               (0x1U << LTDC_GC2R_CRCA_Pos)
#define LTDC_GC2R_CRCA                   LTDC_GC2R_CRCA_Msk  /*!< CRC ability- 0: CRC no computation available- 1: CRC computation available */
#define LTDC_GC2R_BOA_Pos                (15U)
#define LTDC_GC2R_BOA_Msk                (0x1U << LTDC_GC2R_BOA_Pos)
#define LTDC_GC2R_BOA                    LTDC_GC2R_BOA_Msk  /*!< blending order ability- 0: blending order fixed- 1: blending order configurable */

/* Bit fields for LTDC_SRCR register */
#define LTDC_SRCR_IMR_Pos                (0U)
#define LTDC_SRCR_IMR_Msk                (0x1U << LTDC_SRCR_IMR_Pos)
#define LTDC_SRCR_IMR                    LTDC_SRCR_IMR_Msk  /*!< immediate reload triggerThis bit is set by software and cleared only by hardware after reload.- 0: no effect- 1: The shadow registers are reloaded immediately. */
#define LTDC_SRCR_VBR_Pos                (1U)
#define LTDC_SRCR_VBR_Msk                (0x1U << LTDC_SRCR_VBR_Pos)
#define LTDC_SRCR_VBR                    LTDC_SRCR_VBR_Msk  /*!< vertical blanking reload requestThis bit is set by software and cleared only by hardware after reload (it cannot be cleared through register write once it is set).- 0: no effect- 1: The shadow registers are reloaded during the vertical blanking period (at the beginning of the first line after the active display area). */

/* Bit fields for LTDC_GCCR register */
#define LTDC_GCCR_ADDR_Pos               (0U)
#define LTDC_GCCR_ADDR_Msk               (0xffU << LTDC_GCCR_ADDR_Pos)
#define LTDC_GCCR_ADDR                   LTDC_GCCR_ADDR_Msk  /*!< address of the R,G,B table where the COMP component is written.When LTDC_GC1R.GCT=2, the gamma is implemented with 8 interpolated segment. In that case, the valid ADDR addresses are: 0, 32, 64, 96, 128, 160, 192, 224, 255.Note that for ADDR=255, the gamma interpolation hardware considers that the address is 256. */
#define LTDC_GCCR_COMP_Pos               (8U)
#define LTDC_GCCR_COMP_Msk               (0xffU << LTDC_GCCR_COMP_Pos)
#define LTDC_GCCR_COMP                   LTDC_GCCR_COMP_Msk  /*!< color component to be written, in either (or all) the R,G,B tables.. */
#define LTDC_GCCR_BEN_Pos                (16U)
#define LTDC_GCCR_BEN_Msk                (0x1U << LTDC_GCCR_BEN_Pos)
#define LTDC_GCCR_BEN                    LTDC_GCCR_BEN_Msk  /*!< write trigger to the blue table- 0: no action done- 1: COMP is written at ADDR in the Blue table. */
#define LTDC_GCCR_GEN_Pos                (17U)
#define LTDC_GCCR_GEN_Msk                (0x1U << LTDC_GCCR_GEN_Pos)
#define LTDC_GCCR_GEN                    LTDC_GCCR_GEN_Msk  /*!< write trigger to the green table- 0: no action done- 1: COMP is written at ADDR in the Green table. */
#define LTDC_GCCR_REN_Pos                (18U)
#define LTDC_GCCR_REN_Msk                (0x1U << LTDC_GCCR_REN_Pos)
#define LTDC_GCCR_REN                    LTDC_GCCR_REN_Msk  /*!< write trigger to the red table- 0: no action done- 1: COMP is written at ADDR in the Red table. */

/* Bit fields for LTDC_BCCR register */
#define LTDC_BCCR_BCBLUE_Pos             (0U)
#define LTDC_BCCR_BCBLUE_Msk             (0xffU << LTDC_BCCR_BCBLUE_Pos)
#define LTDC_BCCR_BCBLUE                 LTDC_BCCR_BCBLUE_Msk  /*!< background color blue valueThese bits configure the background blue value. */
#define LTDC_BCCR_BCGREEN_Pos            (8U)
#define LTDC_BCCR_BCGREEN_Msk            (0xffU << LTDC_BCCR_BCGREEN_Pos)
#define LTDC_BCCR_BCGREEN                LTDC_BCCR_BCGREEN_Msk  /*!< background color green valueThese bits configure the background green value. */
#define LTDC_BCCR_BCRED_Pos              (16U)
#define LTDC_BCCR_BCRED_Msk              (0xffU << LTDC_BCCR_BCRED_Pos)
#define LTDC_BCCR_BCRED                  LTDC_BCCR_BCRED_Msk  /*!< background color red valueThese bits configure the background red value. */

/* Bit fields for LTDC_IER register */
#define LTDC_IER_LIE_Pos                 (0U)
#define LTDC_IER_LIE_Msk                 (0x1U << LTDC_IER_LIE_Pos)
#define LTDC_IER_LIE                     LTDC_IER_LIE_Msk  /*!< line interrupt enableThis bit is set and cleared by software.- 0: line interrupt disable- 1: line interrupt enable */
#define LTDC_IER_FUWIE_Pos               (1U)
#define LTDC_IER_FUWIE_Msk               (0x1U << LTDC_IER_FUWIE_Pos)
#define LTDC_IER_FUWIE                   LTDC_IER_FUWIE_Msk  /*!< FIFO underrun warning interrupt enableThis bit is set and cleared by software.- 0: FIFO underrun interrupt disable- 1: FIFO underrun Interrupt enable */
#define LTDC_IER_TERRIE_Pos              (2U)
#define LTDC_IER_TERRIE_Msk              (0x1U << LTDC_IER_TERRIE_Pos)
#define LTDC_IER_TERRIE                  LTDC_IER_TERRIE_Msk  /*!< transfer error interrupt enableThis bit is set and cleared by software.- 0: transfer error interrupt disable- 1: transfer error interrupt enable */
#define LTDC_IER_RRIE_Pos                (3U)
#define LTDC_IER_RRIE_Msk                (0x1U << LTDC_IER_RRIE_Pos)
#define LTDC_IER_RRIE                    LTDC_IER_RRIE_Msk  /*!< register reload interrupt enableThis bit is set and cleared by software.- 0: register reload interrupt disable- 1: register reload interrupt enable */
#define LTDC_IER_FUKIE_Pos               (6U)
#define LTDC_IER_FUKIE_Msk               (0x1U << LTDC_IER_FUKIE_Pos)
#define LTDC_IER_FUKIE                   LTDC_IER_FUKIE_Msk  /*!< FIFO underrun killing interrupt enableThis bit is set and cleared by software.- 0: FIFO underrun killing interrupt disable- 1: FIFO underrun killing Interrupt enable */
#define LTDC_IER_CRCIE_Pos               (7U)
#define LTDC_IER_CRCIE_Msk               (0x1U << LTDC_IER_CRCIE_Pos)
#define LTDC_IER_CRCIE                   LTDC_IER_CRCIE_Msk  /*!< CRC error interrupt enableThis bit is set and cleared by software.- 0: crcerror disable- 1: crc error interrupt enable */
#define LTDC_IER_FURIE_Pos               (8U)
#define LTDC_IER_FURIE_Msk               (0x1U << LTDC_IER_FURIE_Pos)
#define LTDC_IER_FURIE                   LTDC_IER_FURIE_Msk  /*!< FIFOunderrun at rotation interrupt enableThis bit is set and cleared by software.- 0: FIFOunderrun at rotation interrupt disable- 1: FIFO underrunat rotation interrupt enable */

/* Bit fields for LTDC_ISR register */
#define LTDC_ISR_LIF_Pos                 (0U)
#define LTDC_ISR_LIF_Msk                 (0x1U << LTDC_ISR_LIF_Pos)
#define LTDC_ISR_LIF                     LTDC_ISR_LIF_Msk  /*!< line interrupt flag- 0: no line interrupt generated- 1: line interrupt generated when a programmed line is reached */
#define LTDC_ISR_FUWIF_Pos               (1U)
#define LTDC_ISR_FUWIF_Msk               (0x1U << LTDC_ISR_FUWIF_Pos)
#define LTDC_ISR_FUWIF                   LTDC_ISR_FUWIF_Msk  /*!< FIFO underrun warning interrupt flag- 0: no FIFO underrun warning interrupt generated.- 1: FIFO underrun warning interrupt generated, if one of the layer FIFOs is empty and pixel data is read from the FIFO */
#define LTDC_ISR_TERRIF_Pos              (2U)
#define LTDC_ISR_TERRIF_Msk              (0x1U << LTDC_ISR_TERRIF_Pos)
#define LTDC_ISR_TERRIF                  LTDC_ISR_TERRIF_Msk  /*!< transfer error interrupt flag- 0: no transfer error interrupt generated- 1: transfer error interrupt generated when a bus error occurs */
#define LTDC_ISR_RRIF_Pos                (3U)
#define LTDC_ISR_RRIF_Msk                (0x1U << LTDC_ISR_RRIF_Pos)
#define LTDC_ISR_RRIF                    LTDC_ISR_RRIF_Msk  /*!< register reload interrupt flag- 0: no register reload interrupt generated- 1: register reload interrupt generated when a vertical blanking reload occurs (and the first line after the active area is reached) */
#define LTDC_ISR_FUKIF_Pos               (6U)
#define LTDC_ISR_FUKIF_Msk               (0x1U << LTDC_ISR_FUKIF_Pos)
#define LTDC_ISR_FUKIF                   LTDC_ISR_FUKIF_Msk  /*!< FIFO underrun killing interrupt flag- 0: no FIFO underrun killing interrupt generated.- 1: FIFO underrun killing interrupt generated, if one of the layer FIFOs is empty and many pixel data is read from the FIFO */
#define LTDC_ISR_CRCIF_Pos               (7U)
#define LTDC_ISR_CRCIF_Msk               (0x1U << LTDC_ISR_CRCIF_Pos)
#define LTDC_ISR_CRCIF                   LTDC_ISR_CRCIF_Msk  /*!< transfer error interrupt flag- 0: no CRC error interrupt generated- 1: CRC error interrupt generated when the computed CRC is different from the expected CRC. */
#define LTDC_ISR_FURIF_Pos               (8U)
#define LTDC_ISR_FURIF_Msk               (0x1U << LTDC_ISR_FURIF_Pos)
#define LTDC_ISR_FURIF                   LTDC_ISR_FURIF_Msk  /*!< FIFO underrun at rotation interrupt flag- 0: no FIFO underrun at rotation interrupt generated- 1: FIFO underrun at rotation interrupt generated */

/* Bit fields for LTDC_ICR register */
#define LTDC_ICR_CLIF_Pos                (0U)
#define LTDC_ICR_CLIF_Msk                (0x1U << LTDC_ICR_CLIF_Pos)
#define LTDC_ICR_CLIF                    LTDC_ICR_CLIF_Msk  /*!< clears the line interrupt flag- 0: no effect- 1: clears the LIF flag in the LTDC_ISR register. */
#define LTDC_ICR_CFUWIF_Pos              (1U)
#define LTDC_ICR_CFUWIF_Msk              (0x1U << LTDC_ICR_CFUWIF_Pos)
#define LTDC_ICR_CFUWIF                  LTDC_ICR_CFUWIF_Msk  /*!< clears the FIFO underrun warning interrupt flag- 0: no effect- 1: clears the FUWIF flag in the LTDC_ISR register. */
#define LTDC_ICR_CTERRIF_Pos             (2U)
#define LTDC_ICR_CTERRIF_Msk             (0x1U << LTDC_ICR_CTERRIF_Pos)
#define LTDC_ICR_CTERRIF                 LTDC_ICR_CTERRIF_Msk  /*!< clears the transfer error interrupt flag- 0: no effect- 1: clears the TERRIF flag in the LTDC_ISR register. */
#define LTDC_ICR_CRRIF_Pos               (3U)
#define LTDC_ICR_CRRIF_Msk               (0x1U << LTDC_ICR_CRRIF_Pos)
#define LTDC_ICR_CRRIF                   LTDC_ICR_CRRIF_Msk  /*!< clears register reload interrupt flag- 0: no effect- 1: clears the RRIF flag in the LTDC_ISR register */
#define LTDC_ICR_CFUKIF_Pos              (6U)
#define LTDC_ICR_CFUKIF_Msk              (0x1U << LTDC_ICR_CFUKIF_Pos)
#define LTDC_ICR_CFUKIF                  LTDC_ICR_CFUKIF_Msk  /*!< clears the FIFO underrun warning interrupt flag- 0: no effect- 1: clears the FUKIF flag in the LTDC_ISR register. */
#define LTDC_ICR_CCRCIF_Pos              (7U)
#define LTDC_ICR_CCRCIF_Msk              (0x1U << LTDC_ICR_CCRCIF_Pos)
#define LTDC_ICR_CCRCIF                  LTDC_ICR_CCRCIF_Msk  /*!< clears the transfer error interrupt flag- 0: no effect- 1: clears the CRCIF flag in the LTDC_ISR register. */
#define LTDC_ICR_CFURIF_Pos              (8U)
#define LTDC_ICR_CFURIF_Msk              (0x1U << LTDC_ICR_CFURIF_Pos)
#define LTDC_ICR_CFURIF                  LTDC_ICR_CFURIF_Msk  /*!< clears register reload interrupt flag- 0: no effect- 1: clears the FURIF flag in the LTDC_ISR register */

/* Bit fields for LTDC_LIPCR register */
#define LTDC_LIPCR_LIPOS_Pos             (0U)
#define LTDC_LIPCR_LIPOS_Msk             (0xffffU << LTDC_LIPCR_LIPOS_Pos)
#define LTDC_LIPCR_LIPOS                 LTDC_LIPCR_LIPOS_Msk  /*!< line interrupt positionThese bits configure the line interrupt position. */

/* Bit fields for LTDC_CPSR register */
#define LTDC_CPSR_CYPOS_Pos              (0U)
#define LTDC_CPSR_CYPOS_Msk              (0xffffU << LTDC_CPSR_CYPOS_Pos)
#define LTDC_CPSR_CYPOS                  LTDC_CPSR_CYPOS_Msk  /*!< current Y positionThese bits return the current Y position. */
#define LTDC_CPSR_CXPOS_Pos              (16U)
#define LTDC_CPSR_CXPOS_Msk              (0xffffU << LTDC_CPSR_CXPOS_Pos)
#define LTDC_CPSR_CXPOS                  LTDC_CPSR_CXPOS_Msk  /*!< current X positionThese bits return the current X position. */

/* Bit fields for LTDC_CDSR register */
#define LTDC_CDSR_VDES_Pos               (0U)
#define LTDC_CDSR_VDES_Msk               (0x1U << LTDC_CDSR_VDES_Pos)
#define LTDC_CDSR_VDES                   LTDC_CDSR_VDES_Msk  /*!< vertical data enable display status- 0: active low- 1: active high */
#define LTDC_CDSR_HDES_Pos               (1U)
#define LTDC_CDSR_HDES_Msk               (0x1U << LTDC_CDSR_HDES_Pos)
#define LTDC_CDSR_HDES                   LTDC_CDSR_HDES_Msk  /*!< horizontal data enable display status- 0: active low- 1: active high */
#define LTDC_CDSR_VSYNCS_Pos             (2U)
#define LTDC_CDSR_VSYNCS_Msk             (0x1U << LTDC_CDSR_VSYNCS_Pos)
#define LTDC_CDSR_VSYNCS                 LTDC_CDSR_VSYNCS_Msk  /*!< vertical synchronization display status- 0: active low- 1: active high */
#define LTDC_CDSR_HSYNCS_Pos             (3U)
#define LTDC_CDSR_HSYNCS_Msk             (0x1U << LTDC_CDSR_HSYNCS_Pos)
#define LTDC_CDSR_HSYNCS                 LTDC_CDSR_HSYNCS_Msk  /*!< horizontal synchronization display status- 0: active low- 1: active high */

/* Bit fields for LTDC_EDCR register */
#define LTDC_EDCR_OCYEN_Pos              (25U)
#define LTDC_EDCR_OCYEN_Msk              (0x1U << LTDC_EDCR_OCYEN_Pos)
#define LTDC_EDCR_OCYEN                  LTDC_EDCR_OCYEN_Msk  /*!< output conversion to YCbCr 422: Enable- 0: conversion is disabled- 1: conversion is enabled */
#define LTDC_EDCR_OCYSEL_Pos             (26U)
#define LTDC_EDCR_OCYSEL_Msk             (0x1U << LTDC_EDCR_OCYSEL_Pos)
#define LTDC_EDCR_OCYSEL                 LTDC_EDCR_OCYSEL_Msk  /*!< output conversion to YCbCr 422: selection of the CCIR hard-wired coefficients:- 0: use CCIR-BT601 set (for typically SDTV analog-like displays)- 1: use CCIR-BT709 set (for typically HDTV digital-like displays) */
#define LTDC_EDCR_OCYCO_Pos              (27U)
#define LTDC_EDCR_OCYCO_Msk              (0x1U << LTDC_EDCR_OCYCO_Pos)
#define LTDC_EDCR_OCYCO                  LTDC_EDCR_OCYCO_Msk  /*!< output conversion to YCbCr 422: chrominance order.- 0: Cb is output first (so: Y0Cb, then Y1Cr, Y2Cb, etc .. ).- 1: Cr is output first (so: Y0Cr, then Y1Cb, Y2Cr, etc ..). */

/* Bit fields for LTDC_IER2 register */
#define LTDC_IER2_LIE_Pos                (0U)
#define LTDC_IER2_LIE_Msk                (0x1U << LTDC_IER2_LIE_Pos)
#define LTDC_IER2_LIE                    LTDC_IER2_LIE_Msk  /*!< line interrupt enableThis bit is set and cleared by software.- 0: line interrupt disable- 1: line interrupt enable */
#define LTDC_IER2_FUWIE_Pos              (1U)
#define LTDC_IER2_FUWIE_Msk              (0x1U << LTDC_IER2_FUWIE_Pos)
#define LTDC_IER2_FUWIE                  LTDC_IER2_FUWIE_Msk  /*!< FIFO underrun warning interrupt enableThis bit is set and cleared by software.- 0: FIFO underrun interrupt disable- 1: FIFO underrun Interrupt enable */
#define LTDC_IER2_TERRIE_Pos             (2U)
#define LTDC_IER2_TERRIE_Msk             (0x1U << LTDC_IER2_TERRIE_Pos)
#define LTDC_IER2_TERRIE                 LTDC_IER2_TERRIE_Msk  /*!< transfer error interrupt enableThis bit is set and cleared by software.- 0: transfer error interrupt disable- 1: transfer error interrupt enable */
#define LTDC_IER2_RRIE_Pos               (3U)
#define LTDC_IER2_RRIE_Msk               (0x1U << LTDC_IER2_RRIE_Pos)
#define LTDC_IER2_RRIE                   LTDC_IER2_RRIE_Msk  /*!< register reload interrupt enableThis bit is set and cleared by software.- 0: register reload interrupt disable- 1: register reload interrupt enable */
#define LTDC_IER2_FUKIE_Pos              (6U)
#define LTDC_IER2_FUKIE_Msk              (0x1U << LTDC_IER2_FUKIE_Pos)
#define LTDC_IER2_FUKIE                  LTDC_IER2_FUKIE_Msk  /*!< FIFO underrun killing interrupt enableThis bit is set and cleared by software.- 0: FIFO underrun killing interrupt disable- 1: FIFO underrun killing Interrupt enable */
#define LTDC_IER2_CRCIE_Pos              (7U)
#define LTDC_IER2_CRCIE_Msk              (0x1U << LTDC_IER2_CRCIE_Pos)
#define LTDC_IER2_CRCIE                  LTDC_IER2_CRCIE_Msk  /*!< CRC error interrupt enableThis bit is set and cleared by software.- 0: crcerror disable- 1: crc error interrupt enable */
#define LTDC_IER2_FURIE_Pos              (8U)
#define LTDC_IER2_FURIE_Msk              (0x1U << LTDC_IER2_FURIE_Pos)
#define LTDC_IER2_FURIE                  LTDC_IER2_FURIE_Msk  /*!< FIFOunderrun at rotation interrupt enableThis bit is set and cleared by software.- 0: FIFOunderrun at rotation interrupt disable- 1: FIFO underrunat rotation interrupt enable */

/* Bit fields for LTDC_ISR2 register */
#define LTDC_ISR2_LIF_Pos                (0U)
#define LTDC_ISR2_LIF_Msk                (0x1U << LTDC_ISR2_LIF_Pos)
#define LTDC_ISR2_LIF                    LTDC_ISR2_LIF_Msk  /*!< line interrupt flag- 0: no line interrupt generated- 1: line interrupt generated when a programmed line is reached */
#define LTDC_ISR2_FUWIF_Pos              (1U)
#define LTDC_ISR2_FUWIF_Msk              (0x1U << LTDC_ISR2_FUWIF_Pos)
#define LTDC_ISR2_FUWIF                  LTDC_ISR2_FUWIF_Msk  /*!< FIFO underrun warning interrupt flag- 0: no FIFO underrun warning interrupt generated.- 1: FIFO underrun warning interrupt generated, if one of the layer FIFOs is empty and pixel data is read from the FIFO */
#define LTDC_ISR2_TERRIF_Pos             (2U)
#define LTDC_ISR2_TERRIF_Msk             (0x1U << LTDC_ISR2_TERRIF_Pos)
#define LTDC_ISR2_TERRIF                 LTDC_ISR2_TERRIF_Msk  /*!< transfer error interrupt flag- 0: no transfer error interrupt generated- 1: transfer error interrupt generated when a bus error occurs */
#define LTDC_ISR2_RRIF_Pos               (3U)
#define LTDC_ISR2_RRIF_Msk               (0x1U << LTDC_ISR2_RRIF_Pos)
#define LTDC_ISR2_RRIF                   LTDC_ISR2_RRIF_Msk  /*!< register reload interrupt flag- 0: no register reload interrupt generated- 1: register reload interrupt generated when a vertical blanking reload occurs (and the first line after the active area is reached) */
#define LTDC_ISR2_FUKIF_Pos              (6U)
#define LTDC_ISR2_FUKIF_Msk              (0x1U << LTDC_ISR2_FUKIF_Pos)
#define LTDC_ISR2_FUKIF                  LTDC_ISR2_FUKIF_Msk  /*!< FIFO underrun killing interrupt flag- 0: no FIFO underrun killing interrupt generated.- 1: FIFO underrun killing interrupt generated, if one of the layer FIFOs is empty and many pixel data are read from the FIFO */
#define LTDC_ISR2_CRCIF_Pos              (7U)
#define LTDC_ISR2_CRCIF_Msk              (0x1U << LTDC_ISR2_CRCIF_Pos)
#define LTDC_ISR2_CRCIF                  LTDC_ISR2_CRCIF_Msk  /*!< transfer error interrupt flag- 0: no CRC error interrupt generated- 1: CRC error interrupt generated when a bus error occurs */
#define LTDC_ISR2_FURIF_Pos              (8U)
#define LTDC_ISR2_FURIF_Msk              (0x1U << LTDC_ISR2_FURIF_Pos)
#define LTDC_ISR2_FURIF                  LTDC_ISR2_FURIF_Msk  /*!< FIFO underrun at rotation interrupt flag- 0: no FIFO underrun at rotation interrupt generated- 1: FIFO underrun at rotation interrupt generated */

/* Bit fields for LTDC_ICR2 register */
#define LTDC_ICR2_CLIF_Pos               (0U)
#define LTDC_ICR2_CLIF_Msk               (0x1U << LTDC_ICR2_CLIF_Pos)
#define LTDC_ICR2_CLIF                   LTDC_ICR2_CLIF_Msk  /*!< clears the line interrupt flag- 0: no effect- 1: clears the LIF flag in the LTDC_ISR register. */
#define LTDC_ICR2_CFUWIF_Pos             (1U)
#define LTDC_ICR2_CFUWIF_Msk             (0x1U << LTDC_ICR2_CFUWIF_Pos)
#define LTDC_ICR2_CFUWIF                 LTDC_ICR2_CFUWIF_Msk  /*!< clears the FIFO underrun warning interrupt flag- 0: no effect- 1: clears the FUWIF flag in the LTDC_ISR register. */
#define LTDC_ICR2_CTERRIF_Pos            (2U)
#define LTDC_ICR2_CTERRIF_Msk            (0x1U << LTDC_ICR2_CTERRIF_Pos)
#define LTDC_ICR2_CTERRIF                LTDC_ICR2_CTERRIF_Msk  /*!< clears the transfer error interrupt flag- 0: no effect- 1: clears the TERRIF flag in the LTDC_ISR register. */
#define LTDC_ICR2_CRRIF_Pos              (3U)
#define LTDC_ICR2_CRRIF_Msk              (0x1U << LTDC_ICR2_CRRIF_Pos)
#define LTDC_ICR2_CRRIF                  LTDC_ICR2_CRRIF_Msk  /*!< clears register reload interrupt flag- 0: no effect- 1: clears the RRIF flag in the LTDC_ISR register */
#define LTDC_ICR2_CFUKIF_Pos             (6U)
#define LTDC_ICR2_CFUKIF_Msk             (0x1U << LTDC_ICR2_CFUKIF_Pos)
#define LTDC_ICR2_CFUKIF                 LTDC_ICR2_CFUKIF_Msk  /*!< clears the FIFO underrun warning interrupt flag- 0: no effect- 1: clears the FUKIF flag in the LTDC_ISR register. */
#define LTDC_ICR2_CCRCIF_Pos             (7U)
#define LTDC_ICR2_CCRCIF_Msk             (0x1U << LTDC_ICR2_CCRCIF_Pos)
#define LTDC_ICR2_CCRCIF                 LTDC_ICR2_CCRCIF_Msk  /*!< clears the transfer error interrupt flag- 0: no effect- 1: clears the CRCIF flag in the LTDC_ISR register. */
#define LTDC_ICR2_CFURIF_Pos             (8U)
#define LTDC_ICR2_CFURIF_Msk             (0x1U << LTDC_ICR2_CFURIF_Pos)
#define LTDC_ICR2_CFURIF                 LTDC_ICR2_CFURIF_Msk  /*!< clears register reload interrupt flag- 0: no effect- 1: clears the FURIF flag in the LTDC_ISR register */

/* Bit fields for LTDC_CPSR2 register */
#define LTDC_CPSR2_CYPOS_Pos             (0U)
#define LTDC_CPSR2_CYPOS_Msk             (0xffffU << LTDC_CPSR2_CYPOS_Pos)
#define LTDC_CPSR2_CYPOS                 LTDC_CPSR2_CYPOS_Msk  /*!< current Y positionThese bits return the current Y position. */
#define LTDC_CPSR2_CXPOS_Pos             (16U)
#define LTDC_CPSR2_CXPOS_Msk             (0xffffU << LTDC_CPSR2_CXPOS_Pos)
#define LTDC_CPSR2_CXPOS                 LTDC_CPSR2_CXPOS_Msk  /*!< current X positionThese bits return the current X position. */

/* Bit fields for LTDC_ECRCR register */
#define LTDC_ECRCR_ECRC_Pos              (0U)
#define LTDC_ECRCR_ECRC_Msk              (0xffffU << LTDC_ECRCR_ECRC_Pos)
#define LTDC_ECRCR_ECRC                  LTDC_ECRCR_ECRC_Msk  /*!< expected CRC of frame */

/* Bit fields for LTDC_CCRCR register */
#define LTDC_CCRCR_CCRC_Pos              (0U)
#define LTDC_CCRCR_CCRC_Msk              (0xffffU << LTDC_CCRCR_CCRC_Pos)
#define LTDC_CCRCR_CCRC                  LTDC_CCRCR_CCRC_Msk  /*!< expected CRC of frame */

/* Bit fields for LTDC_RB0AR register */
#define LTDC_RB0AR_ADDR_Pos              (0U)
#define LTDC_RB0AR_ADDR_Msk              (0xffffffffU << LTDC_RB0AR_ADDR_Pos)
#define LTDC_RB0AR_ADDR                  LTDC_RB0AR_ADDR_Msk  /*!< address of the rotation buffer 0. */

/* Bit fields for LTDC_RB1AR register */
#define LTDC_RB1AR_ADDR_Pos              (0U)
#define LTDC_RB1AR_ADDR_Msk              (0xffffffffU << LTDC_RB1AR_ADDR_Pos)
#define LTDC_RB1AR_ADDR                  LTDC_RB1AR_ADDR_Msk  /*!< address of the rotation buffer 1. */

/* Bit fields for LTDC_RBPR register */
#define LTDC_RBPR_PITCH_Pos              (0U)
#define LTDC_RBPR_PITCH_Msk              (0xffffU << LTDC_RBPR_PITCH_Pos)
#define LTDC_RBPR_PITCH                  LTDC_RBPR_PITCH_Msk  /*!< pitch of the rotation buffers 0 and 1 (the pitch is 64 bytes every 10 started pixels). */

/* Bit fields for LTDC_RIFCR register */
#define LTDC_RIFCR_RIFBLUE_Pos           (0U)
#define LTDC_RIFCR_RIFBLUE_Msk           (0xffU << LTDC_RIFCR_RIFBLUE_Pos)
#define LTDC_RIFCR_RIFBLUE               LTDC_RIFCR_RIFBLUE_Msk  /*!< blue component of the rotation intermediate frame */
#define LTDC_RIFCR_RIFGREEN_Pos          (8U)
#define LTDC_RIFCR_RIFGREEN_Msk          (0xffU << LTDC_RIFCR_RIFGREEN_Pos)
#define LTDC_RIFCR_RIFGREEN              LTDC_RIFCR_RIFGREEN_Msk  /*!< green component of the rotation intermediate frame */
#define LTDC_RIFCR_RIFRED_Pos            (16U)
#define LTDC_RIFCR_RIFRED_Msk            (0xffU << LTDC_RIFCR_RIFRED_Pos)
#define LTDC_RIFCR_RIFRED                LTDC_RIFCR_RIFRED_Msk  /*!< red component of the rotation intermediate frame */

/* Bit fields for LTDC_FUTR register */
#define LTDC_FUTR_THRE_Pos               (0U)
#define LTDC_FUTR_THRE_Msk               (0xffffU << LTDC_FUTR_THRE_Pos)
#define LTDC_FUTR_THRE                   LTDC_FUTR_THRE_Msk  /*!< threshold to trigger a FIFO underrun killing interrupt (unit is per fifo word, 64bit) */

/* Bit fields for LTDC_LxC0R register */
#define LTDC_LxC0R_CKTA_Pos              (0U)
#define LTDC_LxC0R_CKTA_Msk              (0x1U << LTDC_LxC0R_CKTA_Pos)
#define LTDC_LxC0R_CKTA                  LTDC_LxC0R_CKTA_Msk  /*!< color key transparency Ability */
#define LTDC_LxC0R_CFBDA_Pos             (1U)
#define LTDC_LxC0R_CFBDA_Msk             (0x1U << LTDC_LxC0R_CFBDA_Pos)
#define LTDC_LxC0R_CFBDA                 LTDC_LxC0R_CFBDA_Msk  /*!< color frame buffer duplication ability */
#define LTDC_LxC0R_CFBPA_Pos             (2U)
#define LTDC_LxC0R_CFBPA_Msk             (0x1U << LTDC_LxC0R_CFBPA_Pos)
#define LTDC_LxC0R_CFBPA                 LTDC_LxC0R_CFBPA_Msk  /*!< color frame buffer pitch ability */
#define LTDC_LxC0R_APA_Pos               (3U)
#define LTDC_LxC0R_APA_Msk               (0x1U << LTDC_LxC0R_APA_Pos)
#define LTDC_LxC0R_APA                   LTDC_LxC0R_APA_Msk  /*!< alpha plane ability */
#define LTDC_LxC0R_DCP_Pos               (4U)
#define LTDC_LxC0R_DCP_Msk               (0x1U << LTDC_LxC0R_DCP_Pos)
#define LTDC_LxC0R_DCP                   LTDC_LxC0R_DCP_Msk  /*!< default color programmability */
#define LTDC_LxC0R_WINA_Pos              (5U)
#define LTDC_LxC0R_WINA_Msk              (0x1U << LTDC_LxC0R_WINA_Pos)
#define LTDC_LxC0R_WINA                  LTDC_LxC0R_WINA_Msk  /*!< windowing ability */
#define LTDC_LxC0R_CLUTA_Pos             (6U)
#define LTDC_LxC0R_CLUTA_Msk             (0x1U << LTDC_LxC0R_CLUTA_Pos)
#define LTDC_LxC0R_CLUTA                 LTDC_LxC0R_CLUTA_Msk  /*!< CLUT ability */
#define LTDC_LxC0R_CKRA_Pos              (7U)
#define LTDC_LxC0R_CKRA_Msk              (0x1U << LTDC_LxC0R_CKRA_Pos)
#define LTDC_LxC0R_CKRA                  LTDC_LxC0R_CKRA_Msk  /*!< color key replace ability */
#define LTDC_LxC0R_F21_Pos               (8U)
#define LTDC_LxC0R_F21_Msk               (0x1U << LTDC_LxC0R_F21_Pos)
#define LTDC_LxC0R_F21                   LTDC_LxC0R_F21_Msk  /*!< blending factor 2, ability for: 1.0 */
#define LTDC_LxC0R_F20_Pos               (9U)
#define LTDC_LxC0R_F20_Msk               (0x1U << LTDC_LxC0R_F20_Pos)
#define LTDC_LxC0R_F20                   LTDC_LxC0R_F20_Msk  /*!< blending factor 2, ability for: 0.0 */
#define LTDC_LxC0R_F2P_Pos               (10U)
#define LTDC_LxC0R_F2P_Msk               (0x1U << LTDC_LxC0R_F2P_Pos)
#define LTDC_LxC0R_F2P                   LTDC_LxC0R_F2P_Msk  /*!< blending factor 2, ability for: pixel_alpha */
#define LTDC_LxC0R_F21P_Pos              (11U)
#define LTDC_LxC0R_F21P_Msk              (0x1U << LTDC_LxC0R_F21P_Pos)
#define LTDC_LxC0R_F21P                  LTDC_LxC0R_F21P_Msk  /*!< blending factor 2, ability for: 1.0 - pixel_alpha */
#define LTDC_LxC0R_F2C_Pos               (12U)
#define LTDC_LxC0R_F2C_Msk               (0x1U << LTDC_LxC0R_F2C_Pos)
#define LTDC_LxC0R_F2C                   LTDC_LxC0R_F2C_Msk  /*!< blending factor 2, ability for: constant_alpha */
#define LTDC_LxC0R_F21C_Pos              (13U)
#define LTDC_LxC0R_F21C_Msk              (0x1U << LTDC_LxC0R_F21C_Pos)
#define LTDC_LxC0R_F21C                  LTDC_LxC0R_F21C_Msk  /*!< blending factor 2, ability for: 1.0 - constant_alpha */
#define LTDC_LxC0R_F2PC_Pos              (14U)
#define LTDC_LxC0R_F2PC_Msk              (0x1U << LTDC_LxC0R_F2PC_Pos)
#define LTDC_LxC0R_F2PC                  LTDC_LxC0R_F2PC_Msk  /*!< blending factor 2, ability for: pixel_alpha * constant_alpha */
#define LTDC_LxC0R_F21PC_Pos             (15U)
#define LTDC_LxC0R_F21PC_Msk             (0x1U << LTDC_LxC0R_F21PC_Pos)
#define LTDC_LxC0R_F21PC                 LTDC_LxC0R_F21PC_Msk  /*!< blending factor 2, ability for: 1.0 - (pixel_alpha * constant_alpha) */
#define LTDC_LxC0R_F11_Pos               (16U)
#define LTDC_LxC0R_F11_Msk               (0x1U << LTDC_LxC0R_F11_Pos)
#define LTDC_LxC0R_F11                   LTDC_LxC0R_F11_Msk  /*!< blending factor 1, ability for: 1.0 */
#define LTDC_LxC0R_F10_Pos               (17U)
#define LTDC_LxC0R_F10_Msk               (0x1U << LTDC_LxC0R_F10_Pos)
#define LTDC_LxC0R_F10                   LTDC_LxC0R_F10_Msk  /*!< blending factor 1,ability for: 0.0 */
#define LTDC_LxC0R_F1P_Pos               (18U)
#define LTDC_LxC0R_F1P_Msk               (0x1U << LTDC_LxC0R_F1P_Pos)
#define LTDC_LxC0R_F1P                   LTDC_LxC0R_F1P_Msk  /*!< blending factor 1, ability for: pixel_alpha */
#define LTDC_LxC0R_F11P_Pos              (19U)
#define LTDC_LxC0R_F11P_Msk              (0x1U << LTDC_LxC0R_F11P_Pos)
#define LTDC_LxC0R_F11P                  LTDC_LxC0R_F11P_Msk  /*!< blending factor 1, ability for: 1.0 - pixel_alpha */
#define LTDC_LxC0R_F1C_Pos               (20U)
#define LTDC_LxC0R_F1C_Msk               (0x1U << LTDC_LxC0R_F1C_Pos)
#define LTDC_LxC0R_F1C                   LTDC_LxC0R_F1C_Msk  /*!< blending factor 1, ability for: constant_alpha */
#define LTDC_LxC0R_F11C_Pos              (21U)
#define LTDC_LxC0R_F11C_Msk              (0x1U << LTDC_LxC0R_F11C_Pos)
#define LTDC_LxC0R_F11C                  LTDC_LxC0R_F11C_Msk  /*!< blending factor 1, ability for: 1.0 - constant_alpha */
#define LTDC_LxC0R_F1PC_Pos              (22U)
#define LTDC_LxC0R_F1PC_Msk              (0x1U << LTDC_LxC0R_F1PC_Pos)
#define LTDC_LxC0R_F1PC                  LTDC_LxC0R_F1PC_Msk  /*!< blending factor 1, ability for: pixel_alpha * constant_alpha */
#define LTDC_LxC0R_F11PC_Pos             (23U)
#define LTDC_LxC0R_F11PC_Msk             (0x1U << LTDC_LxC0R_F11PC_Pos)
#define LTDC_LxC0R_F11PC                 LTDC_LxC0R_F11PC_Msk  /*!< blending factor 1, ability for: 1.0 - (pixel_alpha * constant_alpha) */
#define LTDC_LxC0R_P88_Pos               (24U)
#define LTDC_LxC0R_P88_Msk               (0x1U << LTDC_LxC0R_P88_Pos)
#define LTDC_LxC0R_P88                   LTDC_LxC0R_P88_Msk  /*!< pixel format, ability for: AL88. */
#define LTDC_LxC0R_P44_Pos               (25U)
#define LTDC_LxC0R_P44_Msk               (0x1U << LTDC_LxC0R_P44_Pos)
#define LTDC_LxC0R_P44                   LTDC_LxC0R_P44_Msk  /*!< pixel format, ability for: AL44. */
#define LTDC_LxC0R_P8_Pos                (26U)
#define LTDC_LxC0R_P8_Msk                (0x1U << LTDC_LxC0R_P8_Pos)
#define LTDC_LxC0R_P8                    LTDC_LxC0R_P8_Msk  /*!< pixel format, ability for: L8. */
#define LTDC_LxC0R_P4444_Pos             (27U)
#define LTDC_LxC0R_P4444_Msk             (0x1U << LTDC_LxC0R_P4444_Pos)
#define LTDC_LxC0R_P4444                 LTDC_LxC0R_P4444_Msk  /*!< pixel format, ability for: ARGB4444. */
#define LTDC_LxC0R_P1555_Pos             (28U)
#define LTDC_LxC0R_P1555_Msk             (0x1U << LTDC_LxC0R_P1555_Pos)
#define LTDC_LxC0R_P1555                 LTDC_LxC0R_P1555_Msk  /*!< pixel format, ability for: ARGB1555. */
#define LTDC_LxC0R_P565_Pos              (29U)
#define LTDC_LxC0R_P565_Msk              (0x1U << LTDC_LxC0R_P565_Pos)
#define LTDC_LxC0R_P565                  LTDC_LxC0R_P565_Msk  /*!< pixel format, ability for: RGB565. */
#define LTDC_LxC0R_P888_Pos              (30U)
#define LTDC_LxC0R_P888_Msk              (0x1U << LTDC_LxC0R_P888_Pos)
#define LTDC_LxC0R_P888                  LTDC_LxC0R_P888_Msk  /*!< pixel format, ability for: RGB888. */
#define LTDC_LxC0R_P8888_Pos             (31U)
#define LTDC_LxC0R_P8888_Msk             (0x1U << LTDC_LxC0R_P8888_Pos)
#define LTDC_LxC0R_P8888                 LTDC_LxC0R_P8888_Msk  /*!< pixel format, ability for: ARGB8888. */

/* Bit fields for LTDC_LxC1R register */
#define LTDC_LxC1R_YIA_Pos               (0U)
#define LTDC_LxC1R_YIA_Msk               (0x1U << LTDC_LxC1R_YIA_Pos)
#define LTDC_LxC1R_YIA                   LTDC_LxC1R_YIA_Msk  /*!< YCbCr 422 interleaved ability for that layer.- 0: interleaved not available- 1: interleaved available */
#define LTDC_LxC1R_YSPA_Pos              (1U)
#define LTDC_LxC1R_YSPA_Msk              (0x1U << LTDC_LxC1R_YSPA_Pos)
#define LTDC_LxC1R_YSPA                  LTDC_LxC1R_YSPA_Msk  /*!< YCbCr 420 semi-planar ability for that layer.- 0: semiplanar not available- 1: semi-planar available */
#define LTDC_LxC1R_YFPA_Pos              (2U)
#define LTDC_LxC1R_YFPA_Msk              (0x1U << LTDC_LxC1R_YFPA_Pos)
#define LTDC_LxC1R_YFPA                  LTDC_LxC1R_YFPA_Msk  /*!< YCbCr 420 full-planar ability for that layer.- 0: full planar not available- 1: full planar available */
#define LTDC_LxC1R_SCA_Pos               (31U)
#define LTDC_LxC1R_SCA_Msk               (0x1U << LTDC_LxC1R_SCA_Pos)
#define LTDC_LxC1R_SCA                   LTDC_LxC1R_SCA_Msk  /*!< scaling ability for that layer.- 0: scaling not available- 1: scaling available */

/* Bit fields for LTDC_LxRCR register */
#define LTDC_LxRCR_IMR_Pos               (0U)
#define LTDC_LxRCR_IMR_Msk               (0x1U << LTDC_LxRCR_IMR_Pos)
#define LTDC_LxRCR_IMR                   LTDC_LxRCR_IMR_Msk  /*!< immediate reload triggerThis bit is set by software and cleared only by hardware after reload.- 0: no effect- 1: The shadow registers are reloaded immediately. */
#define LTDC_LxRCR_VBR_Pos               (1U)
#define LTDC_LxRCR_VBR_Msk               (0x1U << LTDC_LxRCR_VBR_Pos)
#define LTDC_LxRCR_VBR                   LTDC_LxRCR_VBR_Msk  /*!< vertical blanking reload requestThis bit is set by software and cleared only by hardware after reload (it cannot be cleared through register write once it is set).- 0: no effect- 1: The shadow registers are reloaded during the vertical blanking period (at the beginning of the first line after the active display area). */
#define LTDC_LxRCR_GRMSK_Pos             (2U)
#define LTDC_LxRCR_GRMSK_Msk             (0x1U << LTDC_LxRCR_GRMSK_Pos)
#define LTDC_LxRCR_GRMSK                 LTDC_LxRCR_GRMSK_Msk  /*!< shadow reload control: global (centralized) reload maskedThis bit is set and cleared by software.- 0: global reload active (the control from the LTDC_SRCR are enabled)- 1: global reload is masked (the control from the LTDC_SRCR are disabled) */

/* Bit fields for LTDC_LxCR register */
#define LTDC_LxCR_LEN_Pos                (0U)
#define LTDC_LxCR_LEN_Msk                (0x1U << LTDC_LxCR_LEN_Pos)
#define LTDC_LxCR_LEN                    LTDC_LxCR_LEN_Msk  /*!< layer enable: the bit is used to enable/disable the presence of this whole layer.This bit is set and cleared by software.- 0: layer disabled- 1: layer enabled */
#define LTDC_LxCR_CKEN_Pos               (1U)
#define LTDC_LxCR_CKEN_Msk               (0x1U << LTDC_LxCR_CKEN_Pos)
#define LTDC_LxCR_CKEN                   LTDC_LxCR_CKEN_Msk  /*!< color keying enableThis bit is set and cleared by software.- 0: color keying disabled- 1: color keying enabled: if RGB matches, then the ARGB are set to 0. */
#define LTDC_LxCR_VPDEN_Pos              (2U)
#define LTDC_LxCR_VPDEN_Msk              (0x1U << LTDC_LxCR_VPDEN_Pos)
#define LTDC_LxCR_VPDEN                  LTDC_LxCR_VPDEN_Msk  /*!< vertical pixel duplication enableThis bit is set and cleared by software.- 0: duplication disabled- 1: duplication enabled */
#define LTDC_LxCR_HPDEN_Pos              (3U)
#define LTDC_LxCR_HPDEN_Msk              (0x1U << LTDC_LxCR_HPDEN_Pos)
#define LTDC_LxCR_HPDEN                  LTDC_LxCR_HPDEN_Msk  /*!< horizontal pixel duplication enableThis bit is set and cleared by software.- 0: duplication disabled- 1: duplication enabled */
#define LTDC_LxCR_CLUTEN_Pos             (4U)
#define LTDC_LxCR_CLUTEN_Msk             (0x1U << LTDC_LxCR_CLUTEN_Pos)
#define LTDC_LxCR_CLUTEN                 LTDC_LxCR_CLUTEN_Msk  /*!< color look-up table enableThis bit is set and cleared by software.- 0: color look-up table disabled- 1: color look-up table enabledThe CLUT is only meaningful for L8, AL44 and AL88 pixel format. Refer to Color look-up table (CLUT) */
#define LTDC_LxCR_HMEN_Pos               (8U)
#define LTDC_LxCR_HMEN_Msk               (0x1U << LTDC_LxCR_HMEN_Pos)
#define LTDC_LxCR_HMEN                   LTDC_LxCR_HMEN_Msk  /*!< horizontal mirroring enableThis bit is set and cleared by software.- 0: mirror disabled- 1: mirror enabled (if so, the color frame buffer start address has to be set to the last byte of the first line, so for instannce: if line is 100 pixels, 24bpp, then address is set to 299) */
#define LTDC_LxCR_DCBEN_Pos              (9U)
#define LTDC_LxCR_DCBEN_Msk              (0x1U << LTDC_LxCR_DCBEN_Pos)
#define LTDC_LxCR_DCBEN                  LTDC_LxCR_DCBEN_Msk  /*!< default color blending enableThis bit is set and cleared by software.- 0: blending disabled- 1: blending enabled */
#define LTDC_LxCR_SCEN_Pos               (10U)
#define LTDC_LxCR_SCEN_Msk               (0x1U << LTDC_LxCR_SCEN_Pos)
#define LTDC_LxCR_SCEN                   LTDC_LxCR_SCEN_Msk  /*!< scaler enableThis bit is set and cleared by software.- 0: scaler disabled- 1: scaler enabled */

/* Bit fields for LTDC_LxWHPCR register */
#define LTDC_LxWHPCR_WHSTPOS_Pos         (0U)
#define LTDC_LxWHPCR_WHSTPOS_Msk         (0xffffU << LTDC_LxWHPCR_WHSTPOS_Pos)
#define LTDC_LxWHPCR_WHSTPOS             LTDC_LxWHPCR_WHSTPOS_Msk  /*!< window horizontal start positionThese bits configure the first visible pixel of a line of the layer window.WHSTPOS[15:0] must be >= AAW[15:0] bits (programmed in LTDC_AWCR register). */
#define LTDC_LxWHPCR_WHSPPOS_Pos         (16U)
#define LTDC_LxWHPCR_WHSPPOS_Msk         (0xffffU << LTDC_LxWHPCR_WHSPPOS_Pos)
#define LTDC_LxWHPCR_WHSPPOS             LTDC_LxWHPCR_WHSPPOS_Msk  /*!< window horizontal stop positionThese bits configure the last visible pixel of a line of the layer window.WHSPPOS[15:0] must be <= AHBP[15:0] bits + 1 (programmed in LTDC_BPCR register). */

/* Bit fields for LTDC_LxWVPCR register */
#define LTDC_LxWVPCR_WVSTPOS_Pos         (0U)
#define LTDC_LxWVPCR_WVSTPOS_Msk         (0xffffU << LTDC_LxWVPCR_WVSTPOS_Pos)
#define LTDC_LxWVPCR_WVSTPOS             LTDC_LxWVPCR_WVSTPOS_Msk  /*!< window vertical start positionThese bits configure the first visible line of the layer window.WVSTPOS[15:0] must be >= AAH[15:0] bits (programmed in LTDC_AWCR register). */
#define LTDC_LxWVPCR_WVSPPOS_Pos         (16U)
#define LTDC_LxWVPCR_WVSPPOS_Msk         (0xffffU << LTDC_LxWVPCR_WVSPPOS_Pos)
#define LTDC_LxWVPCR_WVSPPOS             LTDC_LxWVPCR_WVSPPOS_Msk  /*!< window vertical stop positionThese bits configure the last visible line of the layer window.WVSPPOS[11:0] must be <= AVBP[15:0] bits + 1 (programmed in LTDC_BPCR register). */

/* Bit fields for LTDC_LxCKCR register */
#define LTDC_LxCKCR_CKBLUE_Pos           (0U)
#define LTDC_LxCKCR_CKBLUE_Msk           (0xffU << LTDC_LxCKCR_CKBLUE_Pos)
#define LTDC_LxCKCR_CKBLUE               LTDC_LxCKCR_CKBLUE_Msk  /*!< color key blue value */
#define LTDC_LxCKCR_CKGREEN_Pos          (8U)
#define LTDC_LxCKCR_CKGREEN_Msk          (0xffU << LTDC_LxCKCR_CKGREEN_Pos)
#define LTDC_LxCKCR_CKGREEN              LTDC_LxCKCR_CKGREEN_Msk  /*!< color key green value */
#define LTDC_LxCKCR_CKRED_Pos            (16U)
#define LTDC_LxCKCR_CKRED_Msk            (0xffU << LTDC_LxCKCR_CKRED_Pos)
#define LTDC_LxCKCR_CKRED                LTDC_LxCKCR_CKRED_Msk  /*!< color key red value */

/* Bit fields for LTDC_LxPFCR register */
#define LTDC_LxPFCR_PF_Pos               (0U)
#define LTDC_LxPFCR_PF_Msk               (0x7U << LTDC_LxPFCR_PF_Pos)
#define LTDC_LxPFCR_PF                   LTDC_LxPFCR_PF_Msk  /*!< pixel formatThese bits configure the pixel format- 000: ARGB8888- 001: RGB888- 010: RGB565- 011: ARGB1555- 100: ARGB4444- 101: L8 (8-bit luminance)- 110: AL44 (4-bit alpha, 4-bit luminance)- 111: AL88 (8-bit alpha, 8-bit luminance) */

/* Bit fields for LTDC_LxCACR register */
#define LTDC_LxCACR_CONSTA_Pos           (0U)
#define LTDC_LxCACR_CONSTA_Msk           (0xffU << LTDC_LxCACR_CONSTA_Pos)
#define LTDC_LxCACR_CONSTA               LTDC_LxCACR_CONSTA_Msk  /*!< constant alphaThese bits configure the constant alpha used for blending. The constant alpha is divided by 255 by hardware.Example: if the programmed constant alpha is 0xFF, the constant alpha value is 255 / 255 = 1. */

/* Bit fields for LTDC_LxDCCR register */
#define LTDC_LxDCCR_DCBLUE_Pos           (0U)
#define LTDC_LxDCCR_DCBLUE_Msk           (0xffU << LTDC_LxDCCR_DCBLUE_Pos)
#define LTDC_LxDCCR_DCBLUE               LTDC_LxDCCR_DCBLUE_Msk  /*!< default color blueThese bits configure the default blue value. */
#define LTDC_LxDCCR_DCGREEN_Pos          (8U)
#define LTDC_LxDCCR_DCGREEN_Msk          (0xffU << LTDC_LxDCCR_DCGREEN_Pos)
#define LTDC_LxDCCR_DCGREEN              LTDC_LxDCCR_DCGREEN_Msk  /*!< default color greenThese bits configure the default green value. */
#define LTDC_LxDCCR_DCRED_Pos            (16U)
#define LTDC_LxDCCR_DCRED_Msk            (0xffU << LTDC_LxDCCR_DCRED_Pos)
#define LTDC_LxDCCR_DCRED                LTDC_LxDCCR_DCRED_Msk  /*!< default color redThese bits configure the default red value. */
#define LTDC_LxDCCR_DCALPHA_Pos          (24U)
#define LTDC_LxDCCR_DCALPHA_Msk          (0xffU << LTDC_LxDCCR_DCALPHA_Pos)
#define LTDC_LxDCCR_DCALPHA              LTDC_LxDCCR_DCALPHA_Msk  /*!< default color alphaThese bits configure the default alpha value. */

/* Bit fields for LTDC_LxBFCR register */
#define LTDC_LxBFCR_BF2_Pos              (0U)
#define LTDC_LxBFCR_BF2_Msk              (0x7U << LTDC_LxBFCR_BF2_Pos)
#define LTDC_LxBFCR_BF2                  LTDC_LxBFCR_BF2_Msk  /*!< blending factor 2These bits select the blending factor F2- 000: reserved- 001: reserved- 010: reserved- 011: reserved- 100: reserved- 101: 1 - constant alpha- 110: reserved- 111: 1 - (pixel alpha x constant alpha) */
#define LTDC_LxBFCR_BF1_Pos              (8U)
#define LTDC_LxBFCR_BF1_Msk              (0x7U << LTDC_LxBFCR_BF1_Pos)
#define LTDC_LxBFCR_BF1                  LTDC_LxBFCR_BF1_Msk  /*!< blending factor 1These bits select the blending factor F1.- 000: reserved- 001: reserved- 010: reserved- 011: reserved- 100: constant alpha- 101: reserved- 110: pixel alpha x constant alpha- 111: reserved */
#define LTDC_LxBFCR_BOR_Pos              (16U)
#define LTDC_LxBFCR_BOR_Msk              (0xfU << LTDC_LxBFCR_BOR_Pos)
#define LTDC_LxBFCR_BOR                  LTDC_LxBFCR_BOR_Msk  /*!< blending orderThese bits select the blending orderBOR.BOR= 0000 is for the most background layer (usually hidden behind others)BOR= 1111 is for the most foreground layer (always visible, never hidden by any other).In case of inconsistency, like two layers at same order, the blending engine reverses to BOR[LayerID] = LayerID-1, so that Layer3 is in foreground and Layer1 is in background.Note: if the Layer3 is set as secure, to garantee it is on the foreground, it should be configured with BOR(Layer3)=1111. */

/* Bit fields for LTDC_LxBLCR register */
#define LTDC_LxBLCR_BL_Pos               (0U)
#define LTDC_LxBLCR_BL_Msk               (0xffU << LTDC_LxBLCR_BL_Pos)
#define LTDC_LxBLCR_BL                   LTDC_LxBLCR_BL_Msk  /*!< burst length- 0x00: maximum burst length (16 words 64bit, thus 128 Bytes)- 0x01: 1 word (of 64bit) per burst..- 0x10: 16 words (of 64bit) per burst- 0x11: reserved...- 0xFF: reserved. */

/* Bit fields for LTDC_LxPCR register */
#define LTDC_LxPCR_VPDEN_Pos             (1U)
#define LTDC_LxPCR_VPDEN_Msk             (0x1U << LTDC_LxPCR_VPDEN_Pos)
#define LTDC_LxPCR_VPDEN                 LTDC_LxPCR_VPDEN_Msk  /*!< Vertical Pixel Duplication EnableAllows to read a picture, and double its height by duplication of its pixels.- 0: vertical duplication disabled.- 1: vertical duplication enabled. */
#define LTDC_LxPCR_HPDEN_Pos             (2U)
#define LTDC_LxPCR_HPDEN_Msk             (0x1U << LTDC_LxPCR_HPDEN_Pos)
#define LTDC_LxPCR_HPDEN                 LTDC_LxPCR_HPDEN_Msk  /*!< Horizontal Pixel Duplication Enable.Allows to read a picture, and double its width by duplication of its pixels.- 0: horizontal duplication disabled.- 1: horizontal duplication enabled. */
#define LTDC_LxPCR_YCEN_Pos              (3U)
#define LTDC_LxPCR_YCEN_Msk              (0x1U << LTDC_LxPCR_YCEN_Pos)
#define LTDC_LxPCR_YCEN                  LTDC_LxPCR_YCEN_Msk  /*!< YCbCr-to-RGB Conversion Enable:- 0: conversion disabled.- 1: YCbCr conversion enabled, using the YCM setting above. */
#define LTDC_LxPCR_YCM_Pos               (4U)
#define LTDC_LxPCR_YCM_Msk               (0x3U << LTDC_LxPCR_YCM_Pos)
#define LTDC_LxPCR_YCM                   LTDC_LxPCR_YCM_Msk  /*!< YCbCr Conversion ModeDefined the type of input that is considered and converted to a YCbCr 444:- 00: interleaved 422 (Cb and Cr component are replicated horizontally for pixels P and P+1)- 01: semi-Planar 420: (Cb and Cr component are replicated horizontally and vertically. The layer main configuration defines the access to the Y buffer, and auxiliary registers define the access to the Cb and Cr buffers).- 10: full-Planar 420: (Cb and Cr component are replicated horizontally and vertically. The layer main configuration defines the access to the Y buffer, and auxiliary registers define the access to the Cb and Cr buffers).- 11: reserved. */
#define LTDC_LxPCR_YF_Pos                (6U)
#define LTDC_LxPCR_YF_Msk                (0x1U << LTDC_LxPCR_YF_Pos)
#define LTDC_LxPCR_YF                    LTDC_LxPCR_YF_Msk  /*!< Y Component FirstDefines if the byte 0 of a word (in LSB) contains the Y component.- 0: Y component disabled (thus Cr or Cb component is on byte 0)- 1: Y component enabled (thus Y component is on byte 0) */
#define LTDC_LxPCR_CBF_Pos               (7U)
#define LTDC_LxPCR_CBF_Msk               (0x1U << LTDC_LxPCR_CBF_Pos)
#define LTDC_LxPCR_CBF                   LTDC_LxPCR_CBF_Msk  /*!< Cb Component FirstDefines if the byte 0&amp;1 of a word (in LSB) contains the Cb component. The setting impacts only for TBD interleaved and semi-planar modes, as it has no meaning in full-planar mode)- 0: Cb disabled (thus Cr component is on byte 0&amp;1)- 1: Cb enabled (thus Cb component is on byte 0&amp;1) */
#define LTDC_LxPCR_OF_Pos                (8U)
#define LTDC_LxPCR_OF_Msk                (0x1U << LTDC_LxPCR_OF_Pos)
#define LTDC_LxPCR_OF                    LTDC_LxPCR_OF_Msk  /*!< Odd Pixel FirstDefines if the byte 0 of a word (in LSB) contains the Odd pixel.- 0: odd pixel disabled (thus even pixel on byte 0)- 1: odd pixel enabled (thus odd pixel on byte 0) */
#define LTDC_LxPCR_YREN_Pos              (9U)
#define LTDC_LxPCR_YREN_Msk              (0x1U << LTDC_LxPCR_YREN_Pos)
#define LTDC_LxPCR_YREN                  LTDC_LxPCR_YREN_Msk  /*!< Y Rescale EnableWhen enabled, incoming Y values in range 16..235 are re-scaled to range 0..255, as required e.g. for ITU-R BT.601 conversion: TBD for Y2R and Y2B values.- 0: rescaling disabled.- 1: rescaling enabled. */

/* Bit fields for LTDC_LxCFBAR register */
#define LTDC_LxCFBAR_CFBADD_Pos          (0U)
#define LTDC_LxCFBAR_CFBADD_Msk          (0xffffffffU << LTDC_LxCFBAR_CFBADD_Pos)
#define LTDC_LxCFBAR_CFBADD              LTDC_LxCFBAR_CFBADD_Msk  /*!< color frame buffer start addressThese bits define the color frame buffer start address. */

/* Bit fields for LTDC_LxCFBLR register */
#define LTDC_LxCFBLR_CFBLL_Pos           (0U)
#define LTDC_LxCFBLR_CFBLL_Msk           (0xffffU << LTDC_LxCFBLR_CFBLL_Pos)
#define LTDC_LxCFBLR_CFBLL               LTDC_LxCFBLR_CFBLL_Msk  /*!< color frame buffer line lengthThese bits define the length of one line of pixels in bytes + 7.The line length is computed as follows:active high width * number of bytes per pixel + 7. */
#define LTDC_LxCFBLR_CFBP_Pos            (16U)
#define LTDC_LxCFBLR_CFBP_Msk            (0xffffU << LTDC_LxCFBLR_CFBP_Pos)
#define LTDC_LxCFBLR_CFBP                LTDC_LxCFBLR_CFBP_Msk  /*!< color frame buffer pitch in bytesThese bits define the pitch that is the increment from the start of one line of pixels to the start of the next line in bytes.Negative values (with msb bit = 1) are allowed, to read the buffer from bottom to top, and thus to flip is vertically. When vertically flipped, as the address register must provide the address of the first line to be read, the address register must point to the start of the bottom line of the buffer. */

/* Bit fields for LTDC_LxCFBLNR register */
#define LTDC_LxCFBLNR_CFBLNBR_Pos        (0U)
#define LTDC_LxCFBLNR_CFBLNBR_Msk        (0xffffU << LTDC_LxCFBLNR_CFBLNBR_Pos)
#define LTDC_LxCFBLNR_CFBLNBR            LTDC_LxCFBLNR_CFBLNBR_Msk  /*!< frame buffer line numberThese bits define the number of lines in the frame buffer that corresponds to the active high width. */

/* Bit fields for LTDC_LxAFBA0R register */
#define LTDC_LxAFBA0R_AFBADD0_Pos        (0U)
#define LTDC_LxAFBA0R_AFBADD0_Msk        (0xffffffffU << LTDC_LxAFBA0R_AFBADD0_Pos)
#define LTDC_LxAFBA0R_AFBADD0            LTDC_LxAFBA0R_AFBADD0_Msk  /*!< color frame buffer start addressThese bits define the color frame buffer start address. */

/* Bit fields for LTDC_LxAFBA1R register */
#define LTDC_LxAFBA1R_AFBADD1_Pos        (0U)
#define LTDC_LxAFBA1R_AFBADD1_Msk        (0xffffffffU << LTDC_LxAFBA1R_AFBADD1_Pos)
#define LTDC_LxAFBA1R_AFBADD1            LTDC_LxAFBA1R_AFBADD1_Msk  /*!< color frame buffer start addressThese bits define the color frame buffer start address. */

/* Bit fields for LTDC_LxAFBLR register */
#define LTDC_LxAFBLR_AFBLL_Pos           (0U)
#define LTDC_LxAFBLR_AFBLL_Msk           (0xffffU << LTDC_LxAFBLR_AFBLL_Pos)
#define LTDC_LxAFBLR_AFBLL               LTDC_LxAFBLR_AFBLL_Msk  /*!< color frame buffer line lengthThese bits define the length of one line of pixels in bytes + 7.The line length is computed as follows:active high width * number of bytes per pixel + 7. */
#define LTDC_LxAFBLR_AFBP_Pos            (16U)
#define LTDC_LxAFBLR_AFBP_Msk            (0xffffU << LTDC_LxAFBLR_AFBP_Pos)
#define LTDC_LxAFBLR_AFBP                LTDC_LxAFBLR_AFBP_Msk  /*!< color frame buffer pitch in bytesThese bits define the pitch that is the increment from the start of one line of pixels to the start of the next line in bytes.Negative values (with msb bit = 1) are allowed, to read the buffer from bottom to top, and thus to flip is vertically. When vertically flipped, as the address register must provide the address of the first line to be read, the address register must point to the start of the bottom line of the buffer. */

/* Bit fields for LTDC_LxAFBLNR register */
#define LTDC_LxAFBLNR_AFBLNBR_Pos        (0U)
#define LTDC_LxAFBLNR_AFBLNBR_Msk        (0xffffU << LTDC_LxAFBLNR_AFBLNBR_Pos)
#define LTDC_LxAFBLNR_AFBLNBR            LTDC_LxAFBLNR_AFBLNBR_Msk  /*!< frame buffer line numberThese bits define the number of lines in the frame buffer that corresponds to the active high width. */

/* Bit fields for LTDC_LxCLUTWR register */
#define LTDC_LxCLUTWR_BLUE_Pos           (0U)
#define LTDC_LxCLUTWR_BLUE_Msk           (0xffU << LTDC_LxCLUTWR_BLUE_Pos)
#define LTDC_LxCLUTWR_BLUE               LTDC_LxCLUTWR_BLUE_Msk  /*!< blue valueThese bits configure the blue value. */
#define LTDC_LxCLUTWR_GREEN_Pos          (8U)
#define LTDC_LxCLUTWR_GREEN_Msk          (0xffU << LTDC_LxCLUTWR_GREEN_Pos)
#define LTDC_LxCLUTWR_GREEN              LTDC_LxCLUTWR_GREEN_Msk  /*!< green valueThese bits configure the green value. */
#define LTDC_LxCLUTWR_RED_Pos            (16U)
#define LTDC_LxCLUTWR_RED_Msk            (0xffU << LTDC_LxCLUTWR_RED_Pos)
#define LTDC_LxCLUTWR_RED                LTDC_LxCLUTWR_RED_Msk  /*!< red valueThese bits configure the red value. */
#define LTDC_LxCLUTWR_CLUTADD_Pos        (24U)
#define LTDC_LxCLUTWR_CLUTADD_Msk        (0xffU << LTDC_LxCLUTWR_CLUTADD_Pos)
#define LTDC_LxCLUTWR_CLUTADD            LTDC_LxCLUTWR_CLUTADD_Msk  /*!< CLUT addressThese bits configure the CLUT address (color position within the CLUT) of each RGB value. */

/* Bit fields for LTDC_LxSISR register */
#define LTDC_LxSISR_SIH_Pos              (0U)
#define LTDC_LxSISR_SIH_Msk              (0xfffU << LTDC_LxSISR_SIH_Pos)
#define LTDC_LxSISR_SIH                  LTDC_LxSISR_SIH_Msk  /*!< scaler horizontal input size (input width) */
#define LTDC_LxSISR_SIV_Pos              (16U)
#define LTDC_LxSISR_SIV_Msk              (0xfffU << LTDC_LxSISR_SIV_Pos)
#define LTDC_LxSISR_SIV                  LTDC_LxSISR_SIV_Msk  /*!< scaler vertical input size (input height) */

/* Bit fields for LTDC_LxSOSR register */
#define LTDC_LxSOSR_SOH_Pos              (0U)
#define LTDC_LxSOSR_SOH_Msk              (0xfffU << LTDC_LxSOSR_SOH_Pos)
#define LTDC_LxSOSR_SOH                  LTDC_LxSOSR_SOH_Msk  /*!< scaler horizontal output size (output width) */
#define LTDC_LxSOSR_SOV_Pos              (16U)
#define LTDC_LxSOSR_SOV_Msk              (0xfffU << LTDC_LxSOSR_SOV_Pos)
#define LTDC_LxSOSR_SOV                  LTDC_LxSOSR_SOV_Msk  /*!< scaler vertical output size (output height) */

/* Bit fields for LTDC_LxSVSFR register */
#define LTDC_LxSVSFR_SVF_Pos             (0U)
#define LTDC_LxSVSFR_SVF_Msk             (0xffffU << LTDC_LxSVSFR_SVF_Pos)
#define LTDC_LxSVSFR_SVF                 LTDC_LxSVSFR_SVF_Msk  /*!< scaler vertical scaling factor */

/* Bit fields for LTDC_LxSVSPR register */
#define LTDC_LxSVSPR_SVP_Pos             (0U)
#define LTDC_LxSVSPR_SVP_Msk             (0xffffU << LTDC_LxSVSPR_SVP_Pos)
#define LTDC_LxSVSPR_SVP                 LTDC_LxSVSPR_SVP_Msk  /*!< scaler vertical scaling factor */

/* Bit fields for LTDC_LxSHSFR register */
#define LTDC_LxSHSFR_SHF_Pos             (0U)
#define LTDC_LxSHSFR_SHF_Msk             (0xffffU << LTDC_LxSHSFR_SHF_Pos)
#define LTDC_LxSHSFR_SHF                 LTDC_LxSHSFR_SHF_Msk  /*!< scaler horizontal scaling factor */

/* Bit fields for LTDC_LxSHSPR register */
#define LTDC_LxSHSPR_SHP_Pos             (0U)
#define LTDC_LxSHSPR_SHP_Msk             (0xffffU << LTDC_LxSHSPR_SHP_Pos)
#define LTDC_LxSHSPR_SHP                 LTDC_LxSHSPR_SHP_Msk  /*!< scaler horizontal scaling phase */

/* Bit fields for LTDC_LxCYR0R register */
#define LTDC_LxCYR0R_CR2R_Pos            (0U)
#define LTDC_LxCYR0R_CR2R_Msk            (0x3ffU << LTDC_LxCYR0R_CR2R_Pos)
#define LTDC_LxCYR0R_CR2R                LTDC_LxCYR0R_CR2R_Msk  /*!< Cr-to-Red coefficient, with bits 9:8 as positive integer and 7:0 as decimals. */
#define LTDC_LxCYR0R_CB2B_Pos            (16U)
#define LTDC_LxCYR0R_CB2B_Msk            (0x3ffU << LTDC_LxCYR0R_CB2B_Pos)
#define LTDC_LxCYR0R_CB2B                LTDC_LxCYR0R_CB2B_Msk  /*!< Cb-to-Blue coefficient, with bits 9:8 as positive integer and 7:0 as decimals. */

/* Bit fields for LTDC_LxCYR1R register */
#define LTDC_LxCYR1R_CR2G_Pos            (0U)
#define LTDC_LxCYR1R_CR2G_Msk            (0x3ffU << LTDC_LxCYR1R_CR2G_Pos)
#define LTDC_LxCYR1R_CR2G                LTDC_LxCYR1R_CR2G_Msk  /*!< Cr-to-Green coefficient, with bits 9:8 as positive integer and 7:0 as decimals. */
#define LTDC_LxCYR1R_CB2G_Pos            (16U)
#define LTDC_LxCYR1R_CB2G_Msk            (0x3ffU << LTDC_LxCYR1R_CB2G_Pos)
#define LTDC_LxCYR1R_CB2G                LTDC_LxCYR1R_CB2G_Msk  /*!< Cb-to-Green coefficient, with bits 9:8 as positive integer and 7:0 as decimals. */

/******************************************************************************/
/*                                                                            */
/*                                    OCTOSPI                                 */
/*                                                                            */
/******************************************************************************/
/*****************  Bit definition for OCTOSPI_CR register  *******************/
#define OCTOSPI_CR_EN_Pos              (0U)
#define OCTOSPI_CR_EN_Msk              (0x1U << OCTOSPI_CR_EN_Pos)             /*!< 0x00000001 */
#define OCTOSPI_CR_EN                  OCTOSPI_CR_EN_Msk                       /*!< Enable */
#define OCTOSPI_CR_ABORT_Pos           (1U)
#define OCTOSPI_CR_ABORT_Msk           (0x1U << OCTOSPI_CR_ABORT_Pos)          /*!< 0x00000002 */
#define OCTOSPI_CR_ABORT               OCTOSPI_CR_ABORT_Msk                    /*!< Abort request */
#define OCTOSPI_CR_DMAEN_Pos           (2U)
#define OCTOSPI_CR_DMAEN_Msk           (0x1U << OCTOSPI_CR_DMAEN_Pos)          /*!< 0x00000004 */
#define OCTOSPI_CR_DMAEN               OCTOSPI_CR_DMAEN_Msk                    /*!< DMA Enable */
#define OCTOSPI_CR_TCEN_Pos            (3U)
#define OCTOSPI_CR_TCEN_Msk            (0x1U << OCTOSPI_CR_TCEN_Pos)           /*!< 0x00000008 */
#define OCTOSPI_CR_TCEN                OCTOSPI_CR_TCEN_Msk                     /*!< Timeout Counter Enable */
#define OCTOSPI_CR_DQM_Pos             (6U)
#define OCTOSPI_CR_DQM_Msk             (0x1U << OCTOSPI_CR_DQM_Pos)            /*!< 0x00000040 */
#define OCTOSPI_CR_DQM                 OCTOSPI_CR_DQM_Msk                      /*!< Dual-Quad Mode */
#define OCTOSPI_CR_FSEL_Pos            (7U)
#define OCTOSPI_CR_FSEL_Msk            (0x1U << OCTOSPI_CR_FSEL_Pos)           /*!< 0x00000080 */
#define OCTOSPI_CR_FSEL                OCTOSPI_CR_FSEL_Msk                     /*!< Flash Select */
#define OCTOSPI_CR_FTHRES_Pos          (8U)
#define OCTOSPI_CR_FTHRES_Msk          (0x1FU << OCTOSPI_CR_FTHRES_Pos)        /*!< 0x00001F00 */
#define OCTOSPI_CR_FTHRES              OCTOSPI_CR_FTHRES_Msk                   /*!< FIFO Threshold Level */
#define OCTOSPI_CR_TEIE_Pos            (16U)
#define OCTOSPI_CR_TEIE_Msk            (0x1U << OCTOSPI_CR_TEIE_Pos)           /*!< 0x00010000 */
#define OCTOSPI_CR_TEIE                OCTOSPI_CR_TEIE_Msk                     /*!< Transfer Error Interrupt Enable */
#define OCTOSPI_CR_TCIE_Pos            (17U)
#define OCTOSPI_CR_TCIE_Msk            (0x1U << OCTOSPI_CR_TCIE_Pos)           /*!< 0x00020000 */
#define OCTOSPI_CR_TCIE                OCTOSPI_CR_TCIE_Msk                     /*!< Transfer Complete Interrupt Enable */
#define OCTOSPI_CR_FTIE_Pos            (18U)
#define OCTOSPI_CR_FTIE_Msk            (0x1U << OCTOSPI_CR_FTIE_Pos)           /*!< 0x00040000 */
#define OCTOSPI_CR_FTIE                OCTOSPI_CR_FTIE_Msk                     /*!< FIFO Threshold Interrupt Enable */
#define OCTOSPI_CR_SMIE_Pos            (19U)
#define OCTOSPI_CR_SMIE_Msk            (0x1U << OCTOSPI_CR_SMIE_Pos)           /*!< 0x00080000 */
#define OCTOSPI_CR_SMIE                OCTOSPI_CR_SMIE_Msk                     /*!< Status Match Interrupt Enable */
#define OCTOSPI_CR_TOIE_Pos            (20U)
#define OCTOSPI_CR_TOIE_Msk            (0x1U << OCTOSPI_CR_TOIE_Pos)           /*!< 0x00100000 */
#define OCTOSPI_CR_TOIE                OCTOSPI_CR_TOIE_Msk                     /*!< TimeOut Interrupt Enable */
#define OCTOSPI_CR_APMS_Pos            (22U)
#define OCTOSPI_CR_APMS_Msk            (0x1U << OCTOSPI_CR_APMS_Pos)           /*!< 0x00400000 */
#define OCTOSPI_CR_APMS                OCTOSPI_CR_APMS_Msk                     /*!< Automatic Poll Mode Stop */
#define OCTOSPI_CR_PMM_Pos             (23U)
#define OCTOSPI_CR_PMM_Msk             (0x1U << OCTOSPI_CR_PMM_Pos)            /*!< 0x00800000 */
#define OCTOSPI_CR_PMM                 OCTOSPI_CR_PMM_Msk                      /*!< Polling Match Mode */
#define OCTOSPI_CR_FMODE_Pos           (28U)
#define OCTOSPI_CR_FMODE_Msk           (0x3U << OCTOSPI_CR_FMODE_Pos)          /*!< 0x30000000 */
#define OCTOSPI_CR_FMODE               OCTOSPI_CR_FMODE_Msk                    /*!< Functional Mode */
#define OCTOSPI_CR_FMODE_0             (0x1U << OCTOSPI_CR_FMODE_Pos)          /*!< 0x10000000 */
#define OCTOSPI_CR_FMODE_1             (0x2U << OCTOSPI_CR_FMODE_Pos)          /*!< 0x20000000 */

/****************  Bit definition for OCTOSPI_DCR1 register  ******************/
#define OCTOSPI_DCR1_CKMODE_Pos        (0U)
#define OCTOSPI_DCR1_CKMODE_Msk        (0x1U << OCTOSPI_DCR1_CKMODE_Pos)       /*!< 0x00000001 */
#define OCTOSPI_DCR1_CKMODE            OCTOSPI_DCR1_CKMODE_Msk                 /*!< Mode 0 / Mode 3 */
#define OCTOSPI_DCR1_FRCK_Pos          (1U)
#define OCTOSPI_DCR1_FRCK_Msk          (0x1U << OCTOSPI_DCR1_FRCK_Pos)         /*!< 0x00000002 */
#define OCTOSPI_DCR1_FRCK              OCTOSPI_DCR1_FRCK_Msk                   /*!< Free Running Clock */
#define OCTOSPI_DCR1_CKCSHT_Pos        (4U)
#define OCTOSPI_DCR1_CKCSHT_Msk        (0x7U << OCTOSPI_DCR1_CKCSHT_Pos)       /*!< 0x00000070 */
#define OCTOSPI_DCR1_CKCSHT            OCTOSPI_DCR1_CKCSHT_Msk                 /*!< Clocked Chip Select High Time */
#define OCTOSPI_DCR1_CSHT_Pos          (8U)
#define OCTOSPI_DCR1_CSHT_Msk          (0x7U << OCTOSPI_DCR1_CSHT_Pos)         /*!< 0x00000700 */
#define OCTOSPI_DCR1_CSHT              OCTOSPI_DCR1_CSHT_Msk                   /*!< Chip Select High Time */
#define OCTOSPI_DCR1_DEVSIZE_Pos       (16U)
#define OCTOSPI_DCR1_DEVSIZE_Msk       (0x1FU << OCTOSPI_DCR1_DEVSIZE_Pos)     /*!< 0x001F0000 */
#define OCTOSPI_DCR1_DEVSIZE           OCTOSPI_DCR1_DEVSIZE_Msk                /*!< Device Size */
#define OCTOSPI_DCR1_MTYP_Pos          (24U)
#define OCTOSPI_DCR1_MTYP_Msk          (0x7U << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x07000000 */
#define OCTOSPI_DCR1_MTYP              OCTOSPI_DCR1_MTYP_Msk                   /*!< Memory Type */
#define OCTOSPI_DCR1_MTYP_0            (0x1U << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x01000000 */
#define OCTOSPI_DCR1_MTYP_1            (0x2U << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x02000000 */
#define OCTOSPI_DCR1_MTYP_2            (0x4U << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x04000000 */

/****************  Bit definition for OCTOSPI_DCR2 register  ******************/
#define OCTOSPI_DCR2_PRESCALER_Pos     (0U)
#define OCTOSPI_DCR2_PRESCALER_Msk     (0xFFU << OCTOSPI_DCR2_PRESCALER_Pos)   /*!< 0x000000FF */
#define OCTOSPI_DCR2_PRESCALER         OCTOSPI_DCR2_PRESCALER_Msk              /*!< Clock prescaler */
#define OCTOSPI_DCR2_WRAPSIZE_Pos      (16U)
#define OCTOSPI_DCR2_WRAPSIZE_Msk      (0x7U << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00070000 */
#define OCTOSPI_DCR2_WRAPSIZE          OCTOSPI_DCR2_WRAPSIZE_Msk               /*!< Wrap Size */
#define OCTOSPI_DCR2_WRAPSIZE_0        (0x1U << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00010000 */
#define OCTOSPI_DCR2_WRAPSIZE_1        (0x2U << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00020000 */
#define OCTOSPI_DCR2_WRAPSIZE_2        (0x4U << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00040000 */

/****************  Bit definition for OCTOSPI_DCR3 register  ******************/
#define OCTOSPI_DCR3_CSBOUND_Pos       (16U)
#define OCTOSPI_DCR3_CSBOUND_Msk       (0x1FU << OCTOSPI_DCR3_CSBOUND_Pos)     /*!< 0x001F0000 */
#define OCTOSPI_DCR3_CSBOUND           OCTOSPI_DCR3_CSBOUND_Msk                /*!< Maximum transfer */
#define OCTOSPI_DCR3_MAXTRAN_Pos       (0U)
#define OCTOSPI_DCR3_MAXTRAN_Msk       (0xFFU << OCTOSPI_DCR3_MAXTRAN_Pos)     /*!< 0x000000FF */
#define OCTOSPI_DCR3_MAXTRAN           OCTOSPI_DCR3_MAXTRAN_Msk                /*!< Maximum transfer */

/****************  Bit definition for OCTOSPI_DCR4 register  ******************/
#define OCTOSPI_DCR4_REFRESH_Pos       (0U)
#define OCTOSPI_DCR4_REFRESH_Msk       (0xFFFFFFFFU << OCTOSPI_DCR4_REFRESH_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_DCR4_REFRESH           OCTOSPI_DCR4_REFRESH_Msk                /*!< Refresh rate */

/*****************  Bit definition for OCTOSPI_SR register  *******************/
#define OCTOSPI_SR_TEF_Pos             (0U)
#define OCTOSPI_SR_TEF_Msk             (0x1U << OCTOSPI_SR_TEF_Pos)            /*!< 0x00000001 */
#define OCTOSPI_SR_TEF                 OCTOSPI_SR_TEF_Msk                      /*!< Transfer Error Flag */
#define OCTOSPI_SR_TCF_Pos             (1U)
#define OCTOSPI_SR_TCF_Msk             (0x1U << OCTOSPI_SR_TCF_Pos)            /*!< 0x00000002 */
#define OCTOSPI_SR_TCF                 OCTOSPI_SR_TCF_Msk                      /*!< Transfer Complete Flag */
#define OCTOSPI_SR_FTF_Pos             (2U)
#define OCTOSPI_SR_FTF_Msk             (0x1U << OCTOSPI_SR_FTF_Pos)            /*!< 0x00000004 */
#define OCTOSPI_SR_FTF                 OCTOSPI_SR_FTF_Msk                      /*!< FIFO Threshold Flag */
#define OCTOSPI_SR_SMF_Pos             (3U)
#define OCTOSPI_SR_SMF_Msk             (0x1U << OCTOSPI_SR_SMF_Pos)            /*!< 0x00000008 */
#define OCTOSPI_SR_SMF                 OCTOSPI_SR_SMF_Msk                      /*!< Status Match Flag */
#define OCTOSPI_SR_TOF_Pos             (4U)
#define OCTOSPI_SR_TOF_Msk             (0x1U << OCTOSPI_SR_TOF_Pos)            /*!< 0x00000010 */
#define OCTOSPI_SR_TOF                 OCTOSPI_SR_TOF_Msk                      /*!< Timeout Flag */
#define OCTOSPI_SR_BUSY_Pos            (5U)
#define OCTOSPI_SR_BUSY_Msk            (0x1U << OCTOSPI_SR_BUSY_Pos)           /*!< 0x00000020 */
#define OCTOSPI_SR_BUSY                OCTOSPI_SR_BUSY_Msk                     /*!< Busy */
#define OCTOSPI_SR_FLEVEL_Pos          (8U)
#define OCTOSPI_SR_FLEVEL_Msk          (0x3FU << OCTOSPI_SR_FLEVEL_Pos)        /*!< 0x00003F00 */
#define OCTOSPI_SR_FLEVEL              OCTOSPI_SR_FLEVEL_Msk                   /*!< FIFO Level */

/****************  Bit definition for OCTOSPI_FCR register  *******************/
#define OCTOSPI_FCR_CTEF_Pos           (0U)
#define OCTOSPI_FCR_CTEF_Msk           (0x1U << OCTOSPI_FCR_CTEF_Pos)          /*!< 0x00000001 */
#define OCTOSPI_FCR_CTEF               OCTOSPI_FCR_CTEF_Msk                    /*!< Clear Transfer Error Flag */
#define OCTOSPI_FCR_CTCF_Pos           (1U)
#define OCTOSPI_FCR_CTCF_Msk           (0x1U << OCTOSPI_FCR_CTCF_Pos)          /*!< 0x00000002 */
#define OCTOSPI_FCR_CTCF               OCTOSPI_FCR_CTCF_Msk                    /*!< Clear Transfer Complete Flag */
#define OCTOSPI_FCR_CSMF_Pos           (3U)
#define OCTOSPI_FCR_CSMF_Msk           (0x1U << OCTOSPI_FCR_CSMF_Pos)          /*!< 0x00000008 */
#define OCTOSPI_FCR_CSMF               OCTOSPI_FCR_CSMF_Msk                    /*!< Clear Status Match Flag */
#define OCTOSPI_FCR_CTOF_Pos           (4U)
#define OCTOSPI_FCR_CTOF_Msk           (0x1U << OCTOSPI_FCR_CTOF_Pos)          /*!< 0x00000010 */
#define OCTOSPI_FCR_CTOF               OCTOSPI_FCR_CTOF_Msk                    /*!< Clear Timeout Flag */

/****************  Bit definition for OCTOSPI_DLR register  *******************/
#define OCTOSPI_DLR_DL_Pos             (0U)
#define OCTOSPI_DLR_DL_Msk             (0xFFFFFFFFU << OCTOSPI_DLR_DL_Pos)     /*!< 0xFFFFFFFF */
#define OCTOSPI_DLR_DL                 OCTOSPI_DLR_DL_Msk                      /*!< Data Length */

/*****************  Bit definition for OCTOSPI_AR register  *******************/
#define OCTOSPI_AR_ADDRESS_Pos         (0U)
#define OCTOSPI_AR_ADDRESS_Msk         (0xFFFFFFFFU << OCTOSPI_AR_ADDRESS_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_AR_ADDRESS             OCTOSPI_AR_ADDRESS_Msk                  /*!< Address */

/*****************  Bit definition for OCTOSPI_DR register  *******************/
#define OCTOSPI_DR_DATA_Pos            (0U)
#define OCTOSPI_DR_DATA_Msk            (0xFFFFFFFFU << OCTOSPI_DR_DATA_Pos)    /*!< 0xFFFFFFFF */
#define OCTOSPI_DR_DATA                OCTOSPI_DR_DATA_Msk                     /*!< Data */

/***************  Bit definition for OCTOSPI_PSMKR register  ******************/
#define OCTOSPI_PSMKR_MASK_Pos         (0U)
#define OCTOSPI_PSMKR_MASK_Msk         (0xFFFFFFFFU << OCTOSPI_PSMKR_MASK_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_PSMKR_MASK             OCTOSPI_PSMKR_MASK_Msk                  /*!< Status mask */

/***************  Bit definition for OCTOSPI_PSMAR register  ******************/
#define OCTOSPI_PSMAR_MATCH_Pos        (0U)
#define OCTOSPI_PSMAR_MATCH_Msk        (0xFFFFFFFFU << OCTOSPI_PSMAR_MATCH_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_PSMAR_MATCH            OCTOSPI_PSMAR_MATCH_Msk                 /*!< Status match */

/****************  Bit definition for OCTOSPI_PIR register  *******************/
#define OCTOSPI_PIR_INTERVAL_Pos       (0U)
#define OCTOSPI_PIR_INTERVAL_Msk       (0xFFFFU << OCTOSPI_PIR_INTERVAL_Pos)   /*!< 0x0000FFFF */
#define OCTOSPI_PIR_INTERVAL           OCTOSPI_PIR_INTERVAL_Msk                /*!< Polling Interval */

/****************  Bit definition for OCTOSPI_CCR register  *******************/
#define OCTOSPI_CCR_IMODE_Pos          (0U)
#define OCTOSPI_CCR_IMODE_Msk          (0x7U << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000007 */
#define OCTOSPI_CCR_IMODE              OCTOSPI_CCR_IMODE_Msk                   /*!< Instruction Mode */
#define OCTOSPI_CCR_IMODE_0            (0x1U << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000001 */
#define OCTOSPI_CCR_IMODE_1            (0x2U << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000002 */
#define OCTOSPI_CCR_IMODE_2            (0x4U << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000004 */
#define OCTOSPI_CCR_IDTR_Pos           (3U)
#define OCTOSPI_CCR_IDTR_Msk           (0x1U << OCTOSPI_CCR_IDTR_Pos)          /*!< 0x00000008 */
#define OCTOSPI_CCR_IDTR               OCTOSPI_CCR_IDTR_Msk                    /*!< Instruction Double Transfer Rate */
#define OCTOSPI_CCR_ISIZE_Pos          (4U)
#define OCTOSPI_CCR_ISIZE_Msk          (0x3U << OCTOSPI_CCR_ISIZE_Pos)         /*!< 0x00000030 */
#define OCTOSPI_CCR_ISIZE              OCTOSPI_CCR_ISIZE_Msk                   /*!< Instruction Size */
#define OCTOSPI_CCR_ISIZE_0            (0x1U << OCTOSPI_CCR_ISIZE_Pos)         /*!< 0x00000010 */
#define OCTOSPI_CCR_ISIZE_1            (0x2U << OCTOSPI_CCR_ISIZE_Pos)         /*!< 0x00000020 */
#define OCTOSPI_CCR_ADMODE_Pos         (8U)
#define OCTOSPI_CCR_ADMODE_Msk         (0x7U << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000700 */
#define OCTOSPI_CCR_ADMODE             OCTOSPI_CCR_ADMODE_Msk                  /*!< Address Mode */
#define OCTOSPI_CCR_ADMODE_0           (0x1U << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000100 */
#define OCTOSPI_CCR_ADMODE_1           (0x2U << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000200 */
#define OCTOSPI_CCR_ADMODE_2           (0x4U << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000400 */
#define OCTOSPI_CCR_ADDTR_Pos          (11U)
#define OCTOSPI_CCR_ADDTR_Msk          (0x1U << OCTOSPI_CCR_ADDTR_Pos)         /*!< 0x00000800 */
#define OCTOSPI_CCR_ADDTR              OCTOSPI_CCR_ADDTR_Msk                   /*!< Address Double Transfer Rate */
#define OCTOSPI_CCR_ADSIZE_Pos         (12U)
#define OCTOSPI_CCR_ADSIZE_Msk         (0x3U << OCTOSPI_CCR_ADSIZE_Pos)        /*!< 0x00003000 */
#define OCTOSPI_CCR_ADSIZE             OCTOSPI_CCR_ADSIZE_Msk                  /*!< Address Size */
#define OCTOSPI_CCR_ADSIZE_0           (0x1U << OCTOSPI_CCR_ADSIZE_Pos)        /*!< 0x00001000 */
#define OCTOSPI_CCR_ADSIZE_1           (0x2U << OCTOSPI_CCR_ADSIZE_Pos)        /*!< 0x00002000 */
#define OCTOSPI_CCR_ABMODE_Pos         (16U)
#define OCTOSPI_CCR_ABMODE_Msk         (0x7U << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00070000 */
#define OCTOSPI_CCR_ABMODE             OCTOSPI_CCR_ABMODE_Msk                  /*!< Alternate Bytes Mode */
#define OCTOSPI_CCR_ABMODE_0           (0x1U << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00010000 */
#define OCTOSPI_CCR_ABMODE_1           (0x2U << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00020000 */
#define OCTOSPI_CCR_ABMODE_2           (0x4U << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00040000 */
#define OCTOSPI_CCR_ABDTR_Pos          (19U)
#define OCTOSPI_CCR_ABDTR_Msk          (0x1U << OCTOSPI_CCR_ABDTR_Pos)         /*!< 0x00080000 */
#define OCTOSPI_CCR_ABDTR              OCTOSPI_CCR_ABDTR_Msk                   /*!< Alternate Bytes Double Transfer Rate */
#define OCTOSPI_CCR_ABSIZE_Pos         (20U)
#define OCTOSPI_CCR_ABSIZE_Msk         (0x3U << OCTOSPI_CCR_ABSIZE_Pos)        /*!< 0x00300000 */
#define OCTOSPI_CCR_ABSIZE             OCTOSPI_CCR_ABSIZE_Msk                  /*!< Alternate Bytes Size */
#define OCTOSPI_CCR_ABSIZE_0           (0x1U << OCTOSPI_CCR_ABSIZE_Pos)        /*!< 0x00100000 */
#define OCTOSPI_CCR_ABSIZE_1           (0x2U << OCTOSPI_CCR_ABSIZE_Pos)        /*!< 0x00200000 */
#define OCTOSPI_CCR_DMODE_Pos          (24U)
#define OCTOSPI_CCR_DMODE_Msk          (0x7U << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x07000000 */
#define OCTOSPI_CCR_DMODE              OCTOSPI_CCR_DMODE_Msk                   /*!< Data Mode */
#define OCTOSPI_CCR_DMODE_0            (0x1U << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x01000000 */
#define OCTOSPI_CCR_DMODE_1            (0x2U << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x02000000 */
#define OCTOSPI_CCR_DMODE_2            (0x4U << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x04000000 */
#define OCTOSPI_CCR_DDTR_Pos           (27U)
#define OCTOSPI_CCR_DDTR_Msk           (0x1U << OCTOSPI_CCR_DDTR_Pos)          /*!< 0x08000000 */
#define OCTOSPI_CCR_DDTR               OCTOSPI_CCR_DDTR_Msk                    /*!< Data Double Transfer Rate */
#define OCTOSPI_CCR_DQSE_Pos           (29U)
#define OCTOSPI_CCR_DQSE_Msk           (0x1U << OCTOSPI_CCR_DQSE_Pos)          /*!< 0x20000000 */
#define OCTOSPI_CCR_DQSE               OCTOSPI_CCR_DQSE_Msk                    /*!< DQS Enable */
#define OCTOSPI_CCR_SIOO_Pos           (31U)
#define OCTOSPI_CCR_SIOO_Msk           (0x1U << OCTOSPI_CCR_SIOO_Pos)          /*!< 0x80000000 */
#define OCTOSPI_CCR_SIOO               OCTOSPI_CCR_SIOO_Msk                    /*!< Send Instruction Only Once Mode */

/****************  Bit definition for OCTOSPI_TCR register  *******************/
#define OCTOSPI_TCR_DCYC_Pos           (0U)
#define OCTOSPI_TCR_DCYC_Msk           (0x1FU << OCTOSPI_TCR_DCYC_Pos)         /*!< 0x0000001F */
#define OCTOSPI_TCR_DCYC               OCTOSPI_TCR_DCYC_Msk                    /*!< Number of Dummy Cycles */
#define OCTOSPI_TCR_DHQC_Pos           (28U)
#define OCTOSPI_TCR_DHQC_Msk           (0x1U << OCTOSPI_TCR_DHQC_Pos)          /*!< 0x10000000 */
#define OCTOSPI_TCR_DHQC               OCTOSPI_TCR_DHQC_Msk                    /*!< Delay Hold Quarter Cycle */
#define OCTOSPI_TCR_SSHIFT_Pos         (30U)
#define OCTOSPI_TCR_SSHIFT_Msk         (0x1U << OCTOSPI_TCR_SSHIFT_Pos)        /*!< 0x40000000 */
#define OCTOSPI_TCR_SSHIFT             OCTOSPI_TCR_SSHIFT_Msk                  /*!< Sample Shift */

/*****************  Bit definition for OCTOSPI_IR register  *******************/
#define OCTOSPI_IR_INSTRUCTION_Pos     (0U)
#define OCTOSPI_IR_INSTRUCTION_Msk     (0xFFFFFFFFU << OCTOSPI_IR_INSTRUCTION_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_IR_INSTRUCTION         OCTOSPI_IR_INSTRUCTION_Msk              /*!< Instruction */

/****************  Bit definition for OCTOSPI_ABR register  *******************/
#define OCTOSPI_ABR_ALTERNATE_Pos      (0U)
#define OCTOSPI_ABR_ALTERNATE_Msk      (0xFFFFFFFFU << OCTOSPI_ABR_ALTERNATE_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_ABR_ALTERNATE          OCTOSPI_ABR_ALTERNATE_Msk               /*!< Alternate Bytes */

/****************  Bit definition for OCTOSPI_LPTR register  ******************/
#define OCTOSPI_LPTR_TIMEOUT_Pos       (0U)
#define OCTOSPI_LPTR_TIMEOUT_Msk       (0xFFFFU << OCTOSPI_LPTR_TIMEOUT_Pos)   /*!< 0x0000FFFF */
#define OCTOSPI_LPTR_TIMEOUT           OCTOSPI_LPTR_TIMEOUT_Msk                /*!< Timeout period */

/****************  Bit definition for OCTOSPI_WPCCR register  *******************/
#define OCTOSPI_WPCCR_IMODE_Pos        (0U)
#define OCTOSPI_WPCCR_IMODE_Msk        (0x7U << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000007 */
#define OCTOSPI_WPCCR_IMODE            OCTOSPI_WPCCR_IMODE_Msk                 /*!< Instruction Mode */
#define OCTOSPI_WPCCR_IMODE_0          (0x1U << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000001 */
#define OCTOSPI_WPCCR_IMODE_1          (0x2U << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000002 */
#define OCTOSPI_WPCCR_IMODE_2          (0x4U << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000004 */
#define OCTOSPI_WPCCR_IDTR_Pos         (3U)
#define OCTOSPI_WPCCR_IDTR_Msk         (0x1U << OCTOSPI_WPCCR_IDTR_Pos)        /*!< 0x00000008 */
#define OCTOSPI_WPCCR_IDTR             OCTOSPI_WPCCR_IDTR_Msk                  /*!< Instruction Double Transfer Rate */
#define OCTOSPI_WPCCR_ISIZE_Pos        (4U)
#define OCTOSPI_WPCCR_ISIZE_Msk        (0x3U << OCTOSPI_WPCCR_ISIZE_Pos)       /*!< 0x00000030 */
#define OCTOSPI_WPCCR_ISIZE            OCTOSPI_WPCCR_ISIZE_Msk                 /*!< Instruction Size */
#define OCTOSPI_WPCCR_ISIZE_0          (0x1U << OCTOSPI_WPCCR_ISIZE_Pos)       /*!< 0x00000010 */
#define OCTOSPI_WPCCR_ISIZE_1          (0x2U << OCTOSPI_WPCCR_ISIZE_Pos)       /*!< 0x00000020 */
#define OCTOSPI_WPCCR_ADMODE_Pos       (8U)
#define OCTOSPI_WPCCR_ADMODE_Msk       (0x7U << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000700 */
#define OCTOSPI_WPCCR_ADMODE           OCTOSPI_WPCCR_ADMODE_Msk                /*!< Address Mode */
#define OCTOSPI_WPCCR_ADMODE_0         (0x1U << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000100 */
#define OCTOSPI_WPCCR_ADMODE_1         (0x2U << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000200 */
#define OCTOSPI_WPCCR_ADMODE_2         (0x4U << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000400 */
#define OCTOSPI_WPCCR_ADDTR_Pos        (11U)
#define OCTOSPI_WPCCR_ADDTR_Msk        (0x1U << OCTOSPI_WPCCR_ADDTR_Pos)       /*!< 0x00000800 */
#define OCTOSPI_WPCCR_ADDTR            OCTOSPI_WPCCR_ADDTR_Msk                 /*!< Address Double Transfer Rate */
#define OCTOSPI_WPCCR_ADSIZE_Pos       (12U)
#define OCTOSPI_WPCCR_ADSIZE_Msk       (0x3U << OCTOSPI_WPCCR_ADSIZE_Pos)      /*!< 0x00003000 */
#define OCTOSPI_WPCCR_ADSIZE           OCTOSPI_WPCCR_ADSIZE_Msk                /*!< Address Size */
#define OCTOSPI_WPCCR_ADSIZE_0         (0x1U << OCTOSPI_WPCCR_ADSIZE_Pos)      /*!< 0x00001000 */
#define OCTOSPI_WPCCR_ADSIZE_1         (0x2U << OCTOSPI_WPCCR_ADSIZE_Pos)      /*!< 0x00002000 */
#define OCTOSPI_WPCCR_ABMODE_Pos       (16U)
#define OCTOSPI_WPCCR_ABMODE_Msk       (0x7U << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00070000 */
#define OCTOSPI_WPCCR_ABMODE           OCTOSPI_WPCCR_ABMODE_Msk                /*!< Alternate Bytes Mode */
#define OCTOSPI_WPCCR_ABMODE_0         (0x1U << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00010000 */
#define OCTOSPI_WPCCR_ABMODE_1         (0x2U << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00020000 */
#define OCTOSPI_WPCCR_ABMODE_2         (0x4U << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00040000 */
#define OCTOSPI_WPCCR_ABDTR_Pos        (19U)
#define OCTOSPI_WPCCR_ABDTR_Msk        (0x1U << OCTOSPI_WPCCR_ABDTR_Pos)       /*!< 0x00080000 */
#define OCTOSPI_WPCCR_ABDTR            OCTOSPI_WPCCR_ABDTR_Msk                 /*!< Alternate Bytes Double Transfer Rate */
#define OCTOSPI_WPCCR_ABSIZE_Pos       (20U)
#define OCTOSPI_WPCCR_ABSIZE_Msk       (0x3U << OCTOSPI_WPCCR_ABSIZE_Pos)      /*!< 0x00300000 */
#define OCTOSPI_WPCCR_ABSIZE           OCTOSPI_WPCCR_ABSIZE_Msk                /*!< Alternate Bytes Size */
#define OCTOSPI_WPCCR_ABSIZE_0         (0x1U << OCTOSPI_WPCCR_ABSIZE_Pos)      /*!< 0x00100000 */
#define OCTOSPI_WPCCR_ABSIZE_1         (0x2U << OCTOSPI_WPCCR_ABSIZE_Pos)      /*!< 0x00200000 */
#define OCTOSPI_WPCCR_DMODE_Pos        (24U)
#define OCTOSPI_WPCCR_DMODE_Msk        (0x7U << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x07000000 */
#define OCTOSPI_WPCCR_DMODE            OCTOSPI_WPCCR_DMODE_Msk                 /*!< Data Mode */
#define OCTOSPI_WPCCR_DMODE_0          (0x1U << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x01000000 */
#define OCTOSPI_WPCCR_DMODE_1          (0x2U << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x02000000 */
#define OCTOSPI_WPCCR_DMODE_2          (0x4U << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x04000000 */
#define OCTOSPI_WPCCR_DDTR_Pos         (27U)
#define OCTOSPI_WPCCR_DDTR_Msk         (0x1U << OCTOSPI_WPCCR_DDTR_Pos)        /*!< 0x08000000 */
#define OCTOSPI_WPCCR_DDTR             OCTOSPI_WPCCR_DDTR_Msk                  /*!< Data Double Transfer Rate */
#define OCTOSPI_WPCCR_DQSE_Pos         (29U)
#define OCTOSPI_WPCCR_DQSE_Msk         (0x1U << OCTOSPI_WPCCR_DQSE_Pos)        /*!< 0x20000000 */
#define OCTOSPI_WPCCR_DQSE             OCTOSPI_WPCCR_DQSE_Msk                  /*!< DQS Enable */
#define OCTOSPI_WPCCR_SIOO_Pos         (31U)
#define OCTOSPI_WPCCR_SIOO_Msk         (0x1U << OCTOSPI_WPCCR_SIOO_Pos)        /*!< 0x80000000 */
#define OCTOSPI_WPCCR_SIOO             OCTOSPI_WPCCR_SIOO_Msk                  /*!< Send Instruction Only Once Mode */

/****************  Bit definition for OCTOSPI_WPTCR register  *******************/
#define OCTOSPI_WPTCR_DCYC_Pos         (0U)
#define OCTOSPI_WPTCR_DCYC_Msk         (0x1FU << OCTOSPI_WPTCR_DCYC_Pos)       /*!< 0x0000001F */
#define OCTOSPI_WPTCR_DCYC             OCTOSPI_WPTCR_DCYC_Msk                  /*!< Number of Dummy Cycles */
#define OCTOSPI_WPTCR_DHQC_Pos         (28U)
#define OCTOSPI_WPTCR_DHQC_Msk         (0x1U << OCTOSPI_WPTCR_DHQC_Pos)        /*!< 0x10000000 */
#define OCTOSPI_WPTCR_DHQC             OCTOSPI_WPTCR_DHQC_Msk                  /*!< Delay Hold Quarter Cycle */
#define OCTOSPI_WPTCR_SSHIFT_Pos       (30U)
#define OCTOSPI_WPTCR_SSHIFT_Msk       (0x1U << OCTOSPI_WPTCR_SSHIFT_Pos)      /*!< 0x40000000 */
#define OCTOSPI_WPTCR_SSHIFT           OCTOSPI_WPTCR_SSHIFT_Msk                /*!< Sample Shift */

/*****************  Bit definition for OCTOSPI_WPIR register  *******************/
#define OCTOSPI_WPIR_INSTRUCTION_Pos   (0U)
#define OCTOSPI_WPIR_INSTRUCTION_Msk   (0xFFFFFFFFU << OCTOSPI_WPIR_INSTRUCTION_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WPIR_INSTRUCTION       OCTOSPI_WPIR_INSTRUCTION_Msk            /*!< Instruction */

/****************  Bit definition for OCTOSPI_WPABR register  *******************/
#define OCTOSPI_WPABR_ALTERNATE_Pos    (0U)
#define OCTOSPI_WPABR_ALTERNATE_Msk    (0xFFFFFFFFU << OCTOSPI_WPABR_ALTERNATE_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WPABR_ALTERNATE        OCTOSPI_WPABR_ALTERNATE_Msk             /*!< Alternate Bytes */

/****************  Bit definition for OCTOSPI_WCCR register  ******************/
#define OCTOSPI_WCCR_IMODE_Pos         (0U)
#define OCTOSPI_WCCR_IMODE_Msk         (0x7U << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000007 */
#define OCTOSPI_WCCR_IMODE             OCTOSPI_WCCR_IMODE_Msk                  /*!< Instruction Mode */
#define OCTOSPI_WCCR_IMODE_0           (0x1U << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000001 */
#define OCTOSPI_WCCR_IMODE_1           (0x2U << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000002 */
#define OCTOSPI_WCCR_IMODE_2           (0x4U << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000004 */
#define OCTOSPI_WCCR_IDTR_Pos          (3U)
#define OCTOSPI_WCCR_IDTR_Msk          (0x1U << OCTOSPI_WCCR_IDTR_Pos)         /*!< 0x00000008 */
#define OCTOSPI_WCCR_IDTR              OCTOSPI_WCCR_IDTR_Msk                   /*!< Instruction Double Transfer Rate */
#define OCTOSPI_WCCR_ISIZE_Pos         (4U)
#define OCTOSPI_WCCR_ISIZE_Msk         (0x3U << OCTOSPI_WCCR_ISIZE_Pos)        /*!< 0x00000030 */
#define OCTOSPI_WCCR_ISIZE             OCTOSPI_WCCR_ISIZE_Msk                  /*!< Instruction Size */
#define OCTOSPI_WCCR_ISIZE_0           (0x1U << OCTOSPI_WCCR_ISIZE_Pos)        /*!< 0x00000010 */
#define OCTOSPI_WCCR_ISIZE_1           (0x2U << OCTOSPI_WCCR_ISIZE_Pos)        /*!< 0x00000020 */
#define OCTOSPI_WCCR_ADMODE_Pos        (8U)
#define OCTOSPI_WCCR_ADMODE_Msk        (0x7U << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000700 */
#define OCTOSPI_WCCR_ADMODE            OCTOSPI_WCCR_ADMODE_Msk                 /*!< Address Mode */
#define OCTOSPI_WCCR_ADMODE_0          (0x1U << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000100 */
#define OCTOSPI_WCCR_ADMODE_1          (0x2U << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000200 */
#define OCTOSPI_WCCR_ADMODE_2          (0x4U << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000400 */
#define OCTOSPI_WCCR_ADDTR_Pos         (11U)
#define OCTOSPI_WCCR_ADDTR_Msk         (0x1U << OCTOSPI_WCCR_ADDTR_Pos)        /*!< 0x00000800 */
#define OCTOSPI_WCCR_ADDTR             OCTOSPI_WCCR_ADDTR_Msk                  /*!< Address Double Transfer Rate */
#define OCTOSPI_WCCR_ADSIZE_Pos        (12U)
#define OCTOSPI_WCCR_ADSIZE_Msk        (0x3U << OCTOSPI_WCCR_ADSIZE_Pos)       /*!< 0x00003000 */
#define OCTOSPI_WCCR_ADSIZE            OCTOSPI_WCCR_ADSIZE_Msk                 /*!< Address Size */
#define OCTOSPI_WCCR_ADSIZE_0          (0x1U << OCTOSPI_WCCR_ADSIZE_Pos)       /*!< 0x00001000 */
#define OCTOSPI_WCCR_ADSIZE_1          (0x2U << OCTOSPI_WCCR_ADSIZE_Pos)       /*!< 0x00002000 */
#define OCTOSPI_WCCR_ABMODE_Pos        (16U)
#define OCTOSPI_WCCR_ABMODE_Msk        (0x7U << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00070000 */
#define OCTOSPI_WCCR_ABMODE            OCTOSPI_WCCR_ABMODE_Msk                 /*!< Alternate Bytes Mode */
#define OCTOSPI_WCCR_ABMODE_0          (0x1U << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00010000 */
#define OCTOSPI_WCCR_ABMODE_1          (0x2U << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00020000 */
#define OCTOSPI_WCCR_ABMODE_2          (0x4U << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00040000 */
#define OCTOSPI_WCCR_ABDTR_Pos         (19U)
#define OCTOSPI_WCCR_ABDTR_Msk         (0x1U << OCTOSPI_WCCR_ABDTR_Pos)        /*!< 0x00080000 */
#define OCTOSPI_WCCR_ABDTR             OCTOSPI_WCCR_ABDTR_Msk                  /*!< Alternate Bytes Double Transfer Rate */
#define OCTOSPI_WCCR_ABSIZE_Pos        (20U)
#define OCTOSPI_WCCR_ABSIZE_Msk        (0x3U << OCTOSPI_WCCR_ABSIZE_Pos)       /*!< 0x00300000 */
#define OCTOSPI_WCCR_ABSIZE            OCTOSPI_WCCR_ABSIZE_Msk                 /*!< Alternate Bytes Size */
#define OCTOSPI_WCCR_ABSIZE_0          (0x1U << OCTOSPI_WCCR_ABSIZE_Pos)       /*!< 0x00100000 */
#define OCTOSPI_WCCR_ABSIZE_1          (0x2U << OCTOSPI_WCCR_ABSIZE_Pos)       /*!< 0x00200000 */
#define OCTOSPI_WCCR_DMODE_Pos         (24U)
#define OCTOSPI_WCCR_DMODE_Msk         (0x7U << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x07000000 */
#define OCTOSPI_WCCR_DMODE             OCTOSPI_WCCR_DMODE_Msk                  /*!< Data Mode */
#define OCTOSPI_WCCR_DMODE_0           (0x1U << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x01000000 */
#define OCTOSPI_WCCR_DMODE_1           (0x2U << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x02000000 */
#define OCTOSPI_WCCR_DMODE_2           (0x4U << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x04000000 */
#define OCTOSPI_WCCR_DDTR_Pos          (27U)
#define OCTOSPI_WCCR_DDTR_Msk          (0x1U << OCTOSPI_WCCR_DDTR_Pos)         /*!< 0x08000000 */
#define OCTOSPI_WCCR_DDTR              OCTOSPI_WCCR_DDTR_Msk                   /*!< Data Double Transfer Rate */
#define OCTOSPI_WCCR_DQSE_Pos          (29U)
#define OCTOSPI_WCCR_DQSE_Msk          (0x1U << OCTOSPI_WCCR_DQSE_Pos)         /*!< 0x20000000 */
#define OCTOSPI_WCCR_DQSE              OCTOSPI_WCCR_DQSE_Msk                   /*!< DQS Enable */
#define OCTOSPI_WCCR_SIOO_Pos          (31U)
#define OCTOSPI_WCCR_SIOO_Msk          (0x1U << OCTOSPI_WCCR_SIOO_Pos)         /*!< 0x80000000 */
#define OCTOSPI_WCCR_SIOO              OCTOSPI_WCCR_SIOO_Msk                   /*!< Send Instruction Only Once Mode */

/****************  Bit definition for OCTOSPI_WTCR register  ******************/
#define OCTOSPI_WTCR_DCYC_Pos          (0U)
#define OCTOSPI_WTCR_DCYC_Msk          (0x1FU << OCTOSPI_WTCR_DCYC_Pos)        /*!< 0x0000001F */
#define OCTOSPI_WTCR_DCYC              OCTOSPI_WTCR_DCYC_Msk                   /*!< Number of Dummy Cycles */

/****************  Bit definition for OCTOSPI_WIR register  *******************/
#define OCTOSPI_WIR_INSTRUCTION_Pos    (0U)
#define OCTOSPI_WIR_INSTRUCTION_Msk    (0xFFFFFFFFU << OCTOSPI_WIR_INSTRUCTION_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WIR_INSTRUCTION        OCTOSPI_WIR_INSTRUCTION_Msk             /*!< Instruction */

/****************  Bit definition for OCTOSPI_WABR register  ******************/
#define OCTOSPI_WABR_ALTERNATE_Pos     (0U)
#define OCTOSPI_WABR_ALTERNATE_Msk     (0xFFFFFFFFU << OCTOSPI_WABR_ALTERNATE_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WABR_ALTERNATE         OCTOSPI_WABR_ALTERNATE_Msk              /*!< Alternate Bytes */

/****************  Bit definition for OCTOSPI_HLCR register  ******************/
#define OCTOSPI_HLCR_LM_Pos            (0U)
#define OCTOSPI_HLCR_LM_Msk            (0x1U << OCTOSPI_HLCR_LM_Pos)           /*!< 0x00000001 */
#define OCTOSPI_HLCR_LM                OCTOSPI_HLCR_LM_Msk                     /*!< Latency Mode */
#define OCTOSPI_HLCR_WZL_Pos           (1U)
#define OCTOSPI_HLCR_WZL_Msk           (0x1U << OCTOSPI_HLCR_WZL_Pos)          /*!< 0x00000002 */
#define OCTOSPI_HLCR_WZL               OCTOSPI_HLCR_WZL_Msk                    /*!< Write Zero Latency */
#define OCTOSPI_HLCR_TACC_Pos          (8U)
#define OCTOSPI_HLCR_TACC_Msk          (0xFFU << OCTOSPI_HLCR_TACC_Pos)        /*!< 0x0000FF00 */
#define OCTOSPI_HLCR_TACC              OCTOSPI_HLCR_TACC_Msk                   /*!< Access Time */
#define OCTOSPI_HLCR_TRWR_Pos          (16U)
#define OCTOSPI_HLCR_TRWR_Msk          (0xFFU << OCTOSPI_HLCR_TRWR_Pos)        /*!< 0x00FF0000 */
#define OCTOSPI_HLCR_TRWR              OCTOSPI_HLCR_TRWR_Msk                   /*!< Read Write Recovery Time */

/****************  Bit definition for OCTOSPI_VER register  *******************/
#define OCTOSPI_VER_VER_Pos            (0U)
#define OCTOSPI_VER_VER_Msk            (0xFFU << OCTOSPI_VER_VER_Pos)          /*!< 0x000000FF */
#define OCTOSPI_VER_VER                OCTOSPI_VER_VER_Msk                     /*!< Version */

/*****************  Bit definition for OCTOSPI_ID register  *******************/
#define OCTOSPI_ID_ID_Pos              (0U)
#define OCTOSPI_ID_ID_Msk              (0xFFFFFFFFU << OCTOSPI_ID_ID_Pos)      /*!< 0xFFFFFFFF */
#define OCTOSPI_ID_ID                  OCTOSPI_ID_ID_Msk                       /*!< Identification */

/****************  Bit definition for OCTOSPI_MID register  *******************/
#define OCTOSPI_MID_MID_Pos            (0U)
#define OCTOSPI_MID_MID_Msk            (0xFFFFFFFFU << OCTOSPI_MID_MID_Pos)    /*!< 0xFFFFFFFF */
#define OCTOSPI_MID_MID                OCTOSPI_MID_MID_Msk                     /*!< Magic ID */

/******************************************************************************/
/*                                                                            */
/*                                  OCTOSPIM                                  */
/*                                                                            */
/******************************************************************************/
/***************  Bit definition for OCTOSPIM_CR register  ********************/
#define OCTOSPIM_CR_MUXEN_Pos            (0U)
#define OCTOSPIM_CR_MUXEN_Msk            (0x1U << OCTOSPIM_CR_MUXEN_Pos)        /*!< 0x00000001 */
#define OCTOSPIM_CR_MUXEN                OCTOSPIM_CR_MUXEN_Msk                  /*!< Multiplexed Mode Enable */
#define OCTOSPIM_CR_REQ2ACK_TIME_Pos     (16U)
#define OCTOSPIM_CR_REQ2ACK_TIME_Msk     (0xFFU << OCTOSPIM_CR_REQ2ACK_TIME_Pos)/*!< 0x00FF0000 */
#define OCTOSPIM_CR_REQ2ACK_TIME         OCTOSPIM_CR_REQ2ACK_TIME_Msk           /*!< REQ to ACK Time */

/***************  Bit definition for OCTOSPIM_PCR register  *****************/
#define OCTOSPIM_PCR_CLKEN_Pos            (0U)
#define OCTOSPIM_PCR_CLKEN_Msk            (0x1U << OCTOSPIM_PCR_CLKEN_Pos)        /*!< 0x00000001 */
#define OCTOSPIM_PCR_CLKEN                OCTOSPIM_PCR_CLKEN_Msk                  /*!< CLK/CLKn Enable for Port n */
#define OCTOSPIM_PCR_CLKSRC_Pos            (1U)
#define OCTOSPIM_PCR_CLKSRC_Msk            (0x1U << OCTOSPIM_PCR_CLKSRC_Pos)        /*!< 0x00000002 */
#define OCTOSPIM_PCR_CLKSRC                OCTOSPIM_PCR_CLKSRC_Msk                  /*!< CLK/CLKn Source for Port n*/
#define OCTOSPIM_PCR_DQSEN_Pos            (4U)
#define OCTOSPIM_PCR_DQSEN_Msk            (0x1U << OCTOSPIM_PCR_DQSEN_Pos)        /*!< 0x00000010 */
#define OCTOSPIM_PCR_DQSEN                OCTOSPIM_PCR_DQSEN_Msk                  /*!< DQS Enable for Port n */
#define OCTOSPIM_PCR_DQSSRC_Pos           (5U)
#define OCTOSPIM_PCR_DQSSRC_Msk           (0x1U << OCTOSPIM_PCR_DQSSRC_Pos)        /*!< 0x00000020 */
#define OCTOSPIM_PCR_DQSSRC               OCTOSPIM_PCR_DQSSRC_Msk                  /*!< DQS Source for Port n */
#define OCTOSPIM_PCR_NCSEN_Pos            (8U)
#define OCTOSPIM_PCR_NCSEN_Msk            (0x1U << OCTOSPIM_PCR_NCSEN_Pos)        /*!< 0x00000100U */
#define OCTOSPIM_PCR_NCSEN                OCTOSPIM_PCR_NCSEN_Msk                  /*!< nCS Enable for Port n*/
#define OCTOSPIM_PCR_NCSSRC_Pos           (9U)
#define OCTOSPIM_PCR_NCSSRC_Msk           (0x1U << OCTOSPIM_PCR_NCSSRC_Pos)        /*!< 0x00000200U */
#define OCTOSPIM_PCR_NCSSRC               OCTOSPIM_PCR_NCSSRC_Msk                  /*!< nCS Source for Port n */
#define OCTOSPIM_PCR_IOLEN_Pos            (16U)
#define OCTOSPIM_PCR_IOLEN_Msk            (0x1U << OCTOSPIM_PCR_IOLEN_Pos)        /*!< 0x00010000U */
#define OCTOSPIM_PCR_IOLEN                OCTOSPIM_PCR_IOLEN_Msk                  /*!< IO[3:0] Enable for Port n */
#define OCTOSPIM_PCR_IOLSRC_Pos          (17U)
#define OCTOSPIM_PCR_IOLSRC_Msk          (0x3U << OCTOSPIM_PCR_IOLSRC_Pos)       /*!< 0x00060000U */
#define OCTOSPIM_PCR_IOLSRC              OCTOSPIM_PCR_IOLSRC_Msk                 /*!< IO[3:0] Source for Port n */
#define OCTOSPIM_PCR_IOLSRC_0            (0x1U << OCTOSPIM_PCR_IOLSRC_Pos)       /*!< 0x00020000 */
#define OCTOSPIM_PCR_IOLSRC_1            (0x2U << OCTOSPIM_PCR_IOLSRC_Pos)       /*!< 0x00040000 */
#define OCTOSPIM_PCR_IOHEN_Pos           (24U)
#define OCTOSPIM_PCR_IOHEN_Msk           (0x1U << OCTOSPIM_PCR_IOHEN_Pos)        /*!< 0x01000000U */
#define OCTOSPIM_PCR_IOHEN                OCTOSPIM_PCR_IOHEN_Msk                  /*!< IO[7:4] Enable for Port n */
#define OCTOSPIM_PCR_IOHSRC_Pos          (25U)
#define OCTOSPIM_PCR_IOHSRC_Msk          (0x3U << OCTOSPIM_PCR_IOHSRC_Pos)       /*!< 0x06000000U */
#define OCTOSPIM_PCR_IOHSRC              OCTOSPIM_PCR_IOHSRC_Msk                 /*!< IO[7:4] Source for Port n */
#define OCTOSPIM_PCR_IOHSRC_0            (0x1U << OCTOSPIM_PCR_IOHSRC_Pos)       /*!< 0x02000000U */
#define OCTOSPIM_PCR_IOHSRC_1            (0x2U << OCTOSPIM_PCR_IOHSRC_Pos)       /*!< 0x04000000U */

/******************************************************************************/
/*                                                                            */
/*                       Public Key Accelerator (PKA)                         */
/*                       refere to PKA2 v1.0 data-sheet                       */
/*                                                                            */
/******************************************************************************/
#define PKA_VERSION_V2_0              (1U)                                 /*!< i.e. MP2 uses PKA version v2.0 */

/*******************  Bits definition for PKA_CR register  **************/
#define PKA_CR_EN_Pos              (0U)
#define PKA_CR_EN_Msk              (0x1UL << PKA_CR_EN_Pos)                /*!< 0x00000001 */
#define PKA_CR_EN                  PKA_CR_EN_Msk                           /*!< PKA enable */
#define PKA_CR_START_Pos           (1U)
#define PKA_CR_START_Msk           (0x1UL << PKA_CR_START_Pos)             /*!< 0x00000002 */
#define PKA_CR_START               PKA_CR_START_Msk                        /*!< Start operation */
#define PKA_CR_MODE_Pos            (8U)
#define PKA_CR_MODE_Msk            (0x3FUL << PKA_CR_MODE_Pos)             /*!< 0x00003F00 */
#define PKA_CR_MODE                PKA_CR_MODE_Msk                         /*!< MODE[5:0] PKA operation code */
#define PKA_CR_MODE_0              (0x01U << PKA_CR_MODE_Pos)              /*!< 0x00000100 */
#define PKA_CR_MODE_1              (0x02U << PKA_CR_MODE_Pos)              /*!< 0x00000200 */
#define PKA_CR_MODE_2              (0x04U << PKA_CR_MODE_Pos)              /*!< 0x00000400 */
#define PKA_CR_MODE_3              (0x08U << PKA_CR_MODE_Pos)              /*!< 0x00000800 */
#define PKA_CR_MODE_4              (0x10U << PKA_CR_MODE_Pos)              /*!< 0x00001000 */
#define PKA_CR_MODE_5              (0x20U << PKA_CR_MODE_Pos)              /*!< 0x00002000 */
#define PKA_CR_PROCENDIE_Pos       (17U)
#define PKA_CR_PROCENDIE_Msk       (0x1UL << PKA_CR_PROCENDIE_Pos)         /*!< 0x00020000 */
#define PKA_CR_PROCENDIE           PKA_CR_PROCENDIE_Msk                    /*!< End of operation interrupt enable */
#define PKA_CR_RAMERRIE_Pos        (19U)
#define PKA_CR_RAMERRIE_Msk        (0x1UL << PKA_CR_RAMERRIE_Pos)          /*!< 0x00080000 */
#define PKA_CR_RAMERRIE            PKA_CR_RAMERRIE_Msk                     /*!< RAM error interrupt enable */
#define PKA_CR_ADDRERRIE_Pos       (20U)
#define PKA_CR_ADDRERRIE_Msk       (0x1UL << PKA_CR_ADDRERRIE_Pos)         /*!< 0x00100000 */
#define PKA_CR_ADDRERRIE           PKA_CR_ADDRERRIE_Msk                    /*!< addr error interrupt enable */
#define PKA_CR_OPERRIE_Pos         (21U)
#define PKA_CR_OPERRIE_Msk         (0x1UL << PKA_CR_OPERRIE_Pos)           /*!< 0x01000000 */
#define PKA_CR_OPERRIE             PKA_CR_OPERRIE_Msk                      /*!< oper error interrupt enable */

/*******************  Bits definition for PKA_SR register  **************/
#define PKA_SR_INITOK_Pos          (0U)
#define PKA_SR_INITOK_Msk          (0x1UL << PKA_SR_INITOK_Pos)            /*!< 0x00000001 */
#define PKA_SR_INITOK              PKA_SR_INITOK_Msk                       /*!< init ok */
#define PKA_SR_BUSY_Pos            (16U)
#define PKA_SR_BUSY_Msk            (0x1UL << PKA_SR_BUSY_Pos)              /*!< 0x00010000 */
#define PKA_SR_BUSY                PKA_SR_BUSY_Msk                         /*!< PKA operation is in progress */
#define PKA_SR_PROCENDF_Pos        (17U)
#define PKA_SR_PROCENDF_Msk        (0x1UL << PKA_SR_PROCENDF_Pos)          /*!< 0x00020000 */
#define PKA_SR_PROCENDF            PKA_SR_PROCENDF_Msk                     /*!< PKA end of operation flag */
#define PKA_SR_RAMERRF_Pos         (19U)
#define PKA_SR_RAMERRF_Msk         (0x1UL << PKA_SR_RAMERRF_Pos)           /*!< 0x00080000 */
#define PKA_SR_RAMERRF             PKA_SR_RAMERRF_Msk                      /*!< PKA RAM error flag */
#define PKA_SR_ADDRERRF_Pos        (20U)
#define PKA_SR_ADDRERRF_Msk        (0x1UL << PKA_SR_ADDRERRF_Pos)          /*!< 0x00100000 */
#define PKA_SR_ADDRERRF            PKA_SR_ADDRERRF_Msk                     /*!< Address error flag */
#define PKA_SR_OPERRF_Pos          (21U)
#define PKA_SR_OPERRF_Msk          (0x1UL << PKA_SR_OPERRF_Pos)            /*!< 0x00200000 */
#define PKA_SR_OPERRF              PKA_SR_OPERRF_Msk                       /*!< Operation error flag */

/*******************  Bits definition for PKA_CLRFR register  **************/
#define PKA_CLRFR_PROCENDFC_Pos    (17U)
#define PKA_CLRFR_PROCENDFC_Msk    (0x1UL << PKA_CLRFR_PROCENDFC_Pos)      /*!< 0x00020000 */
#define PKA_CLRFR_PROCENDFC        PKA_CLRFR_PROCENDFC_Msk                 /*!< Clear PKA end of operation flag */
#define PKA_CLRFR_RAMERRFC_Pos     (19U)
#define PKA_CLRFR_RAMERRFC_Msk     (0x1UL << PKA_CLRFR_RAMERRFC_Pos)       /*!< 0x00080000 */
#define PKA_CLRFR_RAMERRFC         PKA_CLRFR_RAMERRFC_Msk                  /*!< Clear PKA RAM error flag */
#define PKA_CLRFR_ADDRERRFC_Pos    (20U)
#define PKA_CLRFR_ADDRERRFC_Msk    (0x1UL << PKA_CLRFR_ADDRERRFC_Pos)      /*!< 0x00100000 */
#define PKA_CLRFR_ADDRERRFC        PKA_CLRFR_ADDRERRFC_Msk                 /*!< Clear address error flag */
#define PKA_CLRFR_OPERRFC_Pos      (21U)
#define PKA_CLRFR_OPERRFC_Msk      (0x1UL << PKA_CLRFR_OPERRFC_Pos)        /*!< 0x00200000 */
#define PKA_CLRFR_OPERRFC          PKA_CLRFR_OPERRFC_Msk                   /*!< Clear operation error flag */

/*******************  Bits definition for PKA_HWCFGR register  **************/
#define PKA_HWCFGR_CFG1_Pos    (0U)
#define PKA_HWCFGR_CFG1_Msk    (0x4UL << PKA_HWCFGR_CFG1_Pos)      /*!< 0x00000004 */
#define PKA_HWCFGR_CFG1        PKA_CLRFR_CFG1_Msk                  /*!< DPAEN generic value */
#define PKA_HWCFGR_CFG2_Pos    (4U)
#define PKA_HWCFGR_CFG2_Msk    (0x4UL << PKA_HWCFGR_CFG2_Pos)      /*!< 0x00000040 */
#define PKA_HWCFGR_CFG2        PKA_CLRFR_CFG2_Msk                  /*!< PKA64_SEL generic value */

/*******************  Bits definition for PKA_VERR register  **************/
#define PKA_VERR_MINREV_Pos    (0U)
#define PKA_VERR_MINREV_Msk    (0x4UL << PKA_VERR_MINREV_Pos)      /*!< 0x00000004 */
#define PKA_VERR_MINREV        PKA_CLRFR_MINREV_Msk                /*!< PKA Minor version */
#define PKA_VERR_MAJREV_Pos    (4U)
#define PKA_VERR_MAJREV_Msk    (0x4UL << PKA_VERR_MAJREV_Pos)      /*!< 0x00000040 */
#define PKA_VERR_MAJREV        PKA_CLRFR_MAJREV_Msk                /*!< PKA Major version */

/*******************  Bits definition for PKA_IPIDR register  **************/
#define PKA_IPIDR_ID_Pos    (0U)
#define PKA_IPIDR_ID_Msk    (0xFFFFFFFFUL << PKA_IPIDR_ID_Pos)     /*!< 0xFFFFFFFF */
#define PKA_IPIDR_ID        PKA_CLRFR_ID_Msk                       /*!< PKA ID */

/*******************  Bits definition for PKA RAM  *************************/
#define PKA_RAM_OFFSET                            0x400U                           /*!< PKA RAM address offset */

/* Compute Montgomery parameter input data */
#define PKA_MONTGOMERY_PARAM_IN_MOD_NB_BITS       ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus number of bits */
#define PKA_MONTGOMERY_PARAM_IN_MODULUS           ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input modulus */

/* Compute Montgomery parameter output data */
#define PKA_MONTGOMERY_PARAM_OUT_PARAMETER        ((0x620U - PKA_RAM_OFFSET)>>2)   /*!< Output Montgomery parameter */

/* Compute modular exponentiation input data */
#define PKA_MODULAR_EXP_IN_EXP_NB_BITS            ((0x400U - PKA_RAM_OFFSET)>>2)   /*!< Input exponent number of bits */
#define PKA_MODULAR_EXP_IN_OP_NB_BITS             ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_MODULAR_EXP_IN_MONTGOMERY_PARAM       ((0x620U - PKA_RAM_OFFSET)>>2)   /*!< Input storage area for Montgomery parameter */
#define PKA_MODULAR_EXP_IN_EXPONENT_BASE          ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input base of the exponentiation */
#define PKA_MODULAR_EXP_PROTECT_IN_EXPONENT_BASE  ((0x16C8U - PKA_RAM_OFFSET)>>2)  /*!< Input base of the exponentiation(protected) */
#define PKA_MODULAR_EXP_IN_EXPONENT               ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Input exponent to process */
#define PKA_MODULAR_EXP_PROTECT_IN_EXPONENT       ((0x14B8U - PKA_RAM_OFFSET)>>2)  /*!< Input exponent to process (protected) */
#define PKA_MODULAR_EXP_IN_MODULUS                ((0x1088 - PKA_RAM_OFFSET)>>2)   /*!< Input modulus */
#define PKA_MODULAR_EXP_PROTECT_IN_MODULUS        ((0x838U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus (protected) */
#define PKA_MODULAR_EXP_PROTECT_IN_PHI            ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input Phi (protected) */

/* Compute modular exponentiation output data */
#define PKA_MODULAR_EXP_OUT_MONTGOMERY_PARAM      ((0x620U - PKA_RAM_OFFSET)>>2)   /*!< Output storage area for Montgomery parameter */
#define PKA_MODULAR_EXP_OUT_SM_ALGO_ACC1          ((0x838U - PKA_RAM_OFFSET)>>2)   /*!< Output SM algorithm accumulator 1 */
#define PKA_MODULAR_EXP_OUT_RESULT                ((0x838U - PKA_RAM_OFFSET)>>2)   /*!< Output for modular exponentiation */
#define PKA_MODULAR_EXP_OUT_ERROR                 ((0x1298U - PKA_RAM_OFFSET)>>2)  /*!< Output error code*/

/* Compute ECC scalar multiplication input data */
#define PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS         ((0x400U - PKA_RAM_OFFSET)>>2)   /*!< Input exponent number of bits */
#define PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS          ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN        ((0x410U - PKA_RAM_OFFSET)>>2)   /*!< Input sign of the 'a' coefficient */
#define PKA_ECC_SCALAR_MUL_IN_A_COEFF             ((0x418U - PKA_RAM_OFFSET)>>2)   /*!< Input ECC curve 'a' coefficient */
#define PKA_ECC_SCALAR_MUL_IN_B_COEFF             ((0x520U - PKA_RAM_OFFSET)>>2)   /*!< Input ECC curve 'b' coefficient */
#define PKA_ECC_SCALAR_MUL_IN_MOD_GF              ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input modulus GF(p) */
#define PKA_ECC_SCALAR_MUL_IN_N_PRIME_ORDER       ((0xF88U - PKA_RAM_OFFSET)>>2)   /*!< Input curve prime order n */

#define PKA_ECC_SCALAR_MUL_IN_K                   ((0x12A0U - PKA_RAM_OFFSET)>>2)  /*!< Input 'k' of KP */
#define PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_X     ((0x578U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P X coordinate */
#define PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_Y     ((0x470U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Y coordinate */

/* Compute ECC scalar multiplication output data */
#define PKA_ECC_SCALAR_MUL_OUT_RESULT_X           ((0x578U - PKA_RAM_OFFSET)>>2)   /*!< Output result X coordinate */
#define PKA_ECC_SCALAR_MUL_OUT_RESULT_Y           ((0x5D0U - PKA_RAM_OFFSET)>>2)   /*!< Output result Y coordinate */
#define PKA_ECC_SCALAR_MUL_OUT_ERROR              ((0x680U - PKA_RAM_OFFSET)>>2)   /*!< Output error code */

/* Compute ECC complete addition input data */
#define PKA_ECC_COMPLETE_ADD_IN_MOD_NB_BITS         ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input curve modulus number of bits */
#define PKA_ECC_COMPLETE_ADD_IN_A_COEFF_SIGN        ((0x410U - PKA_RAM_OFFSET)>>2)   /*!< Input sign of the 'a' coefficient */
#define PKA_ECC_COMPLETE_ADD_IN_MOD_P               ((0x470U - PKA_RAM_OFFSET)>>2)   /*!< Input curve modulus value p */
#define PKA_ECC_COMPLETE_ADD_IN_A_COEFF             ((0x418U - PKA_RAM_OFFSET)>>2)   /*!< Curve coef a */
#define PKA_ECC_COMPLETE_ADD_IN_POINT1_X            ((0x628U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P X coordinate */
#define PKA_ECC_COMPLETE_ADD_IN_POINT1_Y            ((0x680U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Y coordinate */
#define PKA_ECC_COMPLETE_ADD_IN_POINT1_Z            ((0x6D8U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Z coordinate */
#define PKA_ECC_COMPLETE_ADD_IN_POINT2_X            ((0x730U - PKA_RAM_OFFSET)>>2)   /*!< Input second point P X coordinate */
#define PKA_ECC_COMPLETE_ADD_IN_POINT2_Y            ((0x788U - PKA_RAM_OFFSET)>>2)   /*!< Input second point P Y coordinate */
#define PKA_ECC_COMPLETE_ADD_IN_POINT2_Z            ((0x7E0U - PKA_RAM_OFFSET)>>2)   /*!< Input second point P Z coordinate */

/* Compute ECC complete addition output data */
#define PKA_ECC_COMPLETE_ADD_OUT_RESULT_X           ((0xD60U - PKA_RAM_OFFSET)>>2)   /*!< Output result X coordinate */
#define PKA_ECC_COMPLETE_ADD_OUT_RESULT_Y           ((0xDB8U - PKA_RAM_OFFSET)>>2)   /*!< Output result Y coordinate */
#define PKA_ECC_COMPLETE_ADD_OUT_RESULT_Z           ((0xE10U - PKA_RAM_OFFSET)>>2)   /*!< Output result Z coordinate */

/* Compute ECC double base ladder input data */
#define PKA_ECC_DOUBLE_LADDER_IN_PRIME_ORDER_NB_BITS ((0x400U - PKA_RAM_OFFSET)>>2)   /*!< Input curve prime order 'n' number of bits */
#define PKA_ECC_DOUBLE_LADDER_IN_MOD_NB_BITS         ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input curve modulus 'p' number of bits */
#define PKA_ECC_DOUBLE_LADDER_IN_A_COEFF_SIGN        ((0x410U - PKA_RAM_OFFSET)>>2)   /*!< Input sign of the 'a' coefficient */
#define PKA_ECC_DOUBLE_LADDER_IN_A_COEFF             ((0x418U - PKA_RAM_OFFSET)>>2)   /*!< Curve coef a */
#define PKA_ECC_DOUBLE_LADDER_IN_MOD_P               ((0x470U - PKA_RAM_OFFSET)>>2)   /*!< Input curve modulus value p */
#define PKA_ECC_DOUBLE_LADDER_IN_K_INTEGER           ((0x520U - PKA_RAM_OFFSET)>>2)   /*!< Input integer 'k' */
#define PKA_ECC_DOUBLE_LADDER_IN_M_INTEGER           ((0x578U - PKA_RAM_OFFSET)>>2)   /*!< Input integer 'M' */
#define PKA_ECC_DOUBLE_LADDER_IN_POINT1_X            ((0x628U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P X coordinate */
#define PKA_ECC_DOUBLE_LADDER_IN_POINT1_Y            ((0x680U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Y coordinate */
#define PKA_ECC_DOUBLE_LADDER_IN_POINT1_Z            ((0x6D8U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Z coordinate */
#define PKA_ECC_DOUBLE_LADDER_IN_POINT2_X            ((0x730U - PKA_RAM_OFFSET)>>2)   /*!< Input second point P X coordinate */
#define PKA_ECC_DOUBLE_LADDER_IN_POINT2_Y            ((0x788U - PKA_RAM_OFFSET)>>2)   /*!< Input second point P Y coordinate */
#define PKA_ECC_DOUBLE_LADDER_IN_POINT2_Z            ((0x7E0U - PKA_RAM_OFFSET)>>2)   /*!< Input second point P Z coordinate */

/* Compute ECC double base ladder output data */
#define PKA_ECC_DOUBLE_LADDER_OUT_RESULT_X           ((0x578U - PKA_RAM_OFFSET)>>2)   /*!< Output result X coordinate */
#define PKA_ECC_DOUBLE_LADDER_OUT_RESULT_Y           ((0x5D0U - PKA_RAM_OFFSET)>>2)   /*!< Output result Y coordinate */
#define PKA_ECC_DOUBLE_LADDER_OUT_ERROR              ((0x520U - PKA_RAM_OFFSET)>>2)   /*!< Output error code */

/* Compute ECC projective to affine input data */
#define PKA_ECC_PROJECTIVE_AFF_IN_MOD_NB_BITS         ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input curve modulus 'p' number of bits */
#define PKA_ECC_PROJECTIVE_AFF_IN_MOD_P               ((0x470U - PKA_RAM_OFFSET)>>2)   /*!< Input curve modulus value p */
#define PKA_ECC_PROJECTIVE_AFF_IN_POINT_X             ((0xD60U - PKA_RAM_OFFSET)>>2)   /*!< Input  point P X coordinate */
#define PKA_ECC_PROJECTIVE_AFF_IN_POINT_Y             ((0xDB8U - PKA_RAM_OFFSET)>>2)   /*!< Input  point P Y coordinate */
#define PKA_ECC_PROJECTIVE_AFF_IN_POINT_Z             ((0xE10U - PKA_RAM_OFFSET)>>2)   /*!< Input  point P Z coordinate */
#define PKA_ECC_PROJECTIVE_AFF_IN_MONTGOMERY_PARAM_R2 ((0x4C8U - PKA_RAM_OFFSET)>>2)   /*!< Input  montgomery parameter R2 mod n */

/* Compute ECC projective to affine output data */
#define PKA_ECC_PROJECTIVE_AFF_OUT_RESULT_X           ((0x578U - PKA_RAM_OFFSET)>>2)   /*!< Output result X coordinate */
#define PKA_ECC_PROJECTIVE_AFF_OUT_RESULT_Y           ((0x5D0U - PKA_RAM_OFFSET)>>2)   /*!< Output result Y coordinate */
#define PKA_ECC_PROJECTIVE_AFF_OUT_ERROR              ((0x680U - PKA_RAM_OFFSET)>>2)   /*!< Output error code */

/* Point check input data */
#define PKA_POINT_CHECK_IN_MOD_NB_BITS            ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus number of bits */
#define PKA_POINT_CHECK_IN_A_COEFF_SIGN           ((0x410U - PKA_RAM_OFFSET)>>2)   /*!< Input sign of the 'a' coefficient */
#define PKA_POINT_CHECK_IN_A_COEFF                ((0x418U - PKA_RAM_OFFSET)>>2)   /*!< Input ECC curve 'a' coefficient */
#define PKA_POINT_CHECK_IN_B_COEFF                ((0x520U - PKA_RAM_OFFSET)>>2)   /*!< Input ECC curve 'b' coefficient */
#define PKA_POINT_CHECK_IN_MOD_GF                 ((0x470U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus GF(p) */
#define PKA_POINT_CHECK_IN_INITIAL_POINT_X        ((0x578U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P X coordinate */
#define PKA_POINT_CHECK_IN_INITIAL_POINT_Y        ((0x5D0U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Y coordinate */
#define PKA_POINT_CHECK_IN_MONTGOMERY_PARAM       ((0x4C8U - PKA_RAM_OFFSET)>>2)   /*!< Input Montgomery parameter R2 mod n */

/* Point check output data */
#define PKA_POINT_CHECK_OUT_ERROR                 ((0x680U - PKA_RAM_OFFSET)>>2)   /*!< Output error code */

/* ECDSA signature input data */
#define PKA_ECDSA_SIGN_IN_ORDER_NB_BITS           ((0x400U - PKA_RAM_OFFSET)>>2)   /*!< Input order number of bits */
#define PKA_ECDSA_SIGN_IN_MOD_NB_BITS             ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus number of bits */
#define PKA_ECDSA_SIGN_IN_A_COEFF_SIGN            ((0x410U - PKA_RAM_OFFSET)>>2)   /*!< Input sign of the 'a' coefficient */
#define PKA_ECDSA_SIGN_IN_A_COEFF                 ((0x418U - PKA_RAM_OFFSET)>>2)   /*!< Input ECC curve 'a' coefficient */
#define PKA_ECDSA_SIGN_IN_B_COEFF                 ((0x520U - PKA_RAM_OFFSET)>>2)   /*!< Input ECC curve 'b' coefficient (positive) */
#define PKA_ECDSA_SIGN_IN_MOD_GF                  ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input modulus GF(p) */
#define PKA_ECDSA_SIGN_IN_K                       ((0x12A0U - PKA_RAM_OFFSET)>>2)  /*!< Input k value of the ECDSA */
#define PKA_ECDSA_SIGN_IN_INITIAL_POINT_X         ((0x578U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P X coordinate */
#define PKA_ECDSA_SIGN_IN_INITIAL_POINT_Y         ((0x470U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Y coordinate */
#define PKA_ECDSA_SIGN_IN_HASH_E                  ((0xFE8U - PKA_RAM_OFFSET)>>2)   /*!< Input e, hash of the message */
#define PKA_ECDSA_SIGN_IN_PRIVATE_KEY_D           ((0xF28U - PKA_RAM_OFFSET)>>2)   /*!< Input d, private key */
#define PKA_ECDSA_SIGN_IN_ORDER_N                 ((0xF88U - PKA_RAM_OFFSET)>>2)   /*!< Input n, order of the curve */

/* ECDSA signature output data */
#define PKA_ECDSA_SIGN_OUT_ERROR                  ((0xFE0U - PKA_RAM_OFFSET)>>2)   /*!< Output error code*/
#define PKA_ECDSA_SIGN_OUT_SIGNATURE_R            ((0x730U - PKA_RAM_OFFSET)>>2)   /*!< Output signature r */
#define PKA_ECDSA_SIGN_OUT_SIGNATURE_S            ((0x788U - PKA_RAM_OFFSET)>>2)   /*!< Output signature s */
#define PKA_ECDSA_SIGN_OUT_FINAL_POINT_X          ((0x1400U - PKA_RAM_OFFSET)>>2)  /*!< Output kG x coordinate */
#define PKA_ECDSA_SIGN_OUT_FINAL_POINT_Y          ((0x1458U - PKA_RAM_OFFSET)>>2)  /*!< Output kG y coordinate */

/* ECDSA verification input data */
#define PKA_ECDSA_VERIF_IN_ORDER_NB_BITS          ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input order number of bits */
#define PKA_ECDSA_VERIF_IN_MOD_NB_BITS            ((0x4C8U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus number of bits */
#define PKA_ECDSA_VERIF_IN_A_COEFF_SIGN           ((0x468U - PKA_RAM_OFFSET)>>2)   /*!< Input sign of the 'a' coefficient */
#define PKA_ECDSA_VERIF_IN_A_COEFF                ((0x470U - PKA_RAM_OFFSET)>>2)   /*!< Input ECC curve 'a' coefficient */
#define PKA_ECDSA_VERIF_IN_MOD_GF                 ((0x4D0U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus GF(p) */
#define PKA_ECDSA_VERIF_IN_INITIAL_POINT_X        ((0x678U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P X coordinate */
#define PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y        ((0x6D0U - PKA_RAM_OFFSET)>>2)   /*!< Input initial point P Y coordinate */
#define PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X     ((0x12F8U - PKA_RAM_OFFSET)>>2)  /*!< Input public key point X coordinate */
#define PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y     ((0x1350U - PKA_RAM_OFFSET)>>2)  /*!< Input public key point Y coordinate */
#define PKA_ECDSA_VERIF_IN_SIGNATURE_R            ((0x10E0U - PKA_RAM_OFFSET)>>2)  /*!< Input r, part of the signature */
#define PKA_ECDSA_VERIF_IN_SIGNATURE_S            ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input s, part of the signature */
#define PKA_ECDSA_VERIF_IN_HASH_E                 ((0x13A8U - PKA_RAM_OFFSET)>>2)  /*!< Input e, hash of the message */
#define PKA_ECDSA_VERIF_IN_ORDER_N                ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input n, order of the curve */

/* ECDSA verification output data */
#define PKA_ECDSA_VERIF_OUT_RESULT                ((0x5D0U - PKA_RAM_OFFSET)>>2)   /*!< Output result */
#define PKA_ECDSA_SIGN_OUT_FINAL_POINT_X          ((0x1400U - PKA_RAM_OFFSET)>>2)   /*!< Output kGx point */
#define PKA_ECDSA_SIGN_OUT_FINAL_POINT_Y          ((0x1458U - PKA_RAM_OFFSET)>>2)   /*!< Output kGy point */

/* RSA CRT exponentiation input data */
#define PKA_RSA_CRT_EXP_IN_MOD_NB_BITS            ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operands number of bits */
#define PKA_RSA_CRT_EXP_IN_DP_CRT                 ((0x730U - PKA_RAM_OFFSET)>>2)   /*!< Input Dp CRT parameter */
#define PKA_RSA_CRT_EXP_IN_DQ_CRT                 ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Input Dq CRT parameter */
#define PKA_RSA_CRT_EXP_IN_QINV_CRT               ((0x948U - PKA_RAM_OFFSET)>>2)   /*!< Input qInv CRT parameter */
#define PKA_RSA_CRT_EXP_IN_PRIME_P                ((0xB60U - PKA_RAM_OFFSET)>>2)   /*!< Input Prime p */
#define PKA_RSA_CRT_EXP_IN_PRIME_Q                ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input Prime q */
#define PKA_RSA_CRT_EXP_IN_EXPONENT_BASE          ((0x12A0U - PKA_RAM_OFFSET)>>2)  /*!< Input base of the exponentiation */

/* RSA CRT exponentiation output data */
#define PKA_RSA_CRT_EXP_OUT_RESULT                ((0x838U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Modular reduction input data */
#define PKA_MODULAR_REDUC_IN_OP_LENGTH            ((0x400U - PKA_RAM_OFFSET)>>2)   /*!< Input operand length */
#define PKA_MODULAR_REDUC_IN_OPERAND              ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand */
#define PKA_MODULAR_REDUC_IN_MOD_LENGTH           ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus length */
#define PKA_MODULAR_REDUC_IN_MODULUS              ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input modulus */

/* Modular reduction output data */
#define PKA_MODULAR_REDUC_OUT_RESULT              ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Arithmetic addition input data */
#define PKA_ARITHMETIC_ADD_NB_BITS                ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_ARITHMETIC_ADD_IN_OP1                 ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_ARITHMETIC_ADD_IN_OP2                 ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */

/* Arithmetic addition output data */
#define PKA_ARITHMETIC_ADD_OUT_RESULT             ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Arithmetic substraction input data */
#define PKA_ARITHMETIC_SUB_NB_BITS                ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_ARITHMETIC_SUB_IN_OP1                 ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_ARITHMETIC_SUB_IN_OP2                 ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */

/* Arithmetic substraction output data */
#define PKA_ARITHMETIC_SUB_OUT_RESULT             ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Arithmetic multiplication input data */
#define PKA_ARITHMETIC_MUL_NB_BITS                ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_ARITHMETIC_MUL_IN_OP1                 ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_ARITHMETIC_MUL_IN_OP2                 ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */

/* Arithmetic multiplication output data */
#define PKA_ARITHMETIC_MUL_OUT_RESULT             ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Comparison input data */
#define PKA_COMPARISON_NB_BITS                    ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_COMPARISON_IN_OP1                     ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_COMPARISON_IN_OP2                     ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */

/* Comparison output data */
#define PKA_COMPARISON_OUT_RESULT                 ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Modular addition input data */
#define PKA_MODULAR_ADD_NB_BITS                   ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_MODULAR_ADD_IN_OP1                    ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_MODULAR_ADD_IN_OP2                    ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */
#define PKA_MODULAR_ADD_IN_OP3_MOD                ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input operand op3 (modulus) */

/* Modular addition output data */
#define PKA_MODULAR_ADD_OUT_RESULT                ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Modular inversion input data */
#define PKA_MODULAR_INV_NB_BITS                   ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_MODULAR_INV_IN_OP1                    ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_MODULAR_INV_IN_OP2_MOD                ((0xA44U - PKA_RAM_OFFSET)>>2) /*!< Input operand op2 (modulus) */

/* Modular inversion output data */
#define PKA_MODULAR_INV_OUT_RESULT                ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Modular substraction input data */
#define PKA_MODULAR_SUB_NB_BITS                   ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_MODULAR_SUB_IN_OP1                    ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_MODULAR_SUB_IN_OP2                    ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */
#define PKA_MODULAR_SUB_IN_OP3_MOD                ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input operand op3 */

/* Modular substraction output data */
#define PKA_MODULAR_SUB_OUT_RESULT                ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Montgomery multiplication input data */
#define PKA_MONTGOMERY_MUL_NB_BITS                ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_MONTGOMERY_MUL_IN_OP1                 ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_MONTGOMERY_MUL_IN_OP2                 ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */
#define PKA_MONTGOMERY_MUL_IN_OP3_MOD             ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input modulus */

/* Montgomery multiplication output data */
#define PKA_MONTGOMERY_MUL_OUT_RESULT             ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* Generic Arithmetic input data */
#define PKA_ARITHMETIC_ALL_OPS_NB_BITS            ((0x408U - PKA_RAM_OFFSET)>>2)   /*!< Input operand number of bits */
#define PKA_ARITHMETIC_ALL_OPS_IN_OP1             ((0xA50U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op1 */
#define PKA_ARITHMETIC_ALL_OPS_IN_OP2             ((0xC68U - PKA_RAM_OFFSET)>>2)   /*!< Input operand op2 */
#define PKA_ARITHMETIC_ALL_OPS_IN_OP3             ((0x1088U - PKA_RAM_OFFSET)>>2)  /*!< Input operand op2 */

/* Generic Arithmetic output data */
#define PKA_ARITHMETIC_ALL_OPS_OUT_RESULT         ((0xE78U - PKA_RAM_OFFSET)>>2)   /*!< Output result */

/* PKA functions list */
#define PKA_DEFINE_IN_CMSIS               (1U)                    /*!< i.e. PKA operation define are in CMSIS device not in PKA_HAL header */

#define PKA_MODE_MODULAR_EXP              ((uint32_t)0x00000000U) /*!< Compute Montgomery parameter and modular exponentiation */
#define PKA_MODE_MONTGOMERY_PARAM         ((uint32_t)0x00000001U) /*!< Compute Montgomery parameter only */
#define PKA_MODE_MODULAR_EXP_FAST_MODE    ((uint32_t)0x00000002U) /*!< Compute modular exponentiation only (fast, Montgomery parameter should be loaded) */
#define PKA_MODE_MODULAR_EXP_PROTECT      ((uint32_t)0x00000003U) /*!< Compute modular exponentiation protected */
#define PKA_MODE_RSA_CRT_EXP              ((uint32_t)0x00000007U) /*!< RSA CRT exponentiation */
#define PKA_MODE_MODULAR_INV              ((uint32_t)0x00000008U) /*!< Modular inversion */
#define PKA_MODE_ARITHMETIC_ADD           ((uint32_t)0x00000009U) /*!< Arithmetic addition */
#define PKA_MODE_ARITHMETIC_SUB           ((uint32_t)0x0000000AU) /*!< Arithmetic subtraction */
#define PKA_MODE_ARITHMETIC_MUL           ((uint32_t)0x0000000BU) /*!< Arithmetic multiplication */
#define PKA_MODE_COMPARISON               ((uint32_t)0x0000000CU) /*!< Comparison */
#define PKA_MODE_MODULAR_RED              ((uint32_t)0x0000000DU) /*!< Modular reduction */
#define PKA_MODE_MODULAR_ADD              ((uint32_t)0x0000000EU) /*!< Modular addition */
#define PKA_MODE_MODULAR_SUB              ((uint32_t)0x0000000FU) /*!< Modular subtraction */
#define PKA_MODE_MONTGOMERY_MUL           ((uint32_t)0x00000010U) /*!< Montgomery multiplication */
#define PKA_MODE_ECC_MUL                  ((uint32_t)0x00000020U) /*!< Compute ECC Fp scalar multiplication */
#define PKA_MODE_ECC_COMPLETE_ADD         ((uint32_t)0x00000023U) /*!< ECC complete addition */
#define PKA_MODE_ECDSA_SIGNATURE          ((uint32_t)0x00000024U) /*!< ECDSA signature */
#define PKA_MODE_ECDSA_VERIFICATION       ((uint32_t)0x00000026U) /*!< ECDSA verification */
#define PKA_MODE_DOUBLE_BASE_LADDER       ((uint32_t)0x00000027U) /*!< ECC double base ladder  */
#define PKA_MODE_POINT_CHECK              ((uint32_t)0x00000028U) /*!< Point on elliptic curve check */
#define PKA_MODE_ECC_PROJECTIVE_AFF       ((uint32_t)0x0000002FU) /*!< ECC projective to affine */

/******************************************************************************/
/*                                                                            */
/*                Parallel Synchronous Slave Interface (PSSI )                */
/*                                                                            */
/******************************************************************************/

/********************  Bit definition for PSSI_CR register  *******************/
#define PSSI_CR_OUTEN_Pos               (31U)
#define PSSI_CR_OUTEN_Msk               (0x1UL << PSSI_CR_OUTEN_Pos)           /*!< 0x80000000 */
#define PSSI_CR_OUTEN                   PSSI_CR_OUTEN_Msk                      /*!< Data direction selection */
#define PSSI_CR_DMAEN_Pos               (30U)
#define PSSI_CR_DMAEN_Msk               (0x1UL << PSSI_CR_DMAEN_Pos)           /*!< 0x40000000 */
#define PSSI_CR_DMAEN                   PSSI_CR_DMAEN_Msk                      /*!< DMA enable */
#define PSSI_CR_DERDYCFG_Pos            (18U)
#define PSSI_CR_DERDYCFG_Msk            (0x7UL << PSSI_CR_DERDYCFG_Pos)        /*!< 0x001C0000 */
#define PSSI_CR_DERDYCFG                PSSI_CR_DERDYCFG_Msk                   /*!< Data enable and ready configuration */
#define PSSI_CR_ENABLE_Pos              (14U)
#define PSSI_CR_ENABLE_Msk              (0x1UL << PSSI_CR_ENABLE_Pos)          /*!< 0x00004000 */
#define PSSI_CR_ENABLE                  PSSI_CR_ENABLE_Msk                     /*!< PSSI enable */
#define PSSI_CR_EDM_Pos                 (10U)
#define PSSI_CR_EDM_Msk                 (0x3UL << PSSI_CR_EDM_Pos)             /*!< 0x00000C00 */
#define PSSI_CR_EDM                     PSSI_CR_EDM_Msk                        /*!< Extended data mode */
#define PSSI_CR_RDYPOL_Pos              (8U)
#define PSSI_CR_RDYPOL_Msk              (0x1UL << PSSI_CR_RDYPOL_Pos)          /*!< 0x00000C00 */
#define PSSI_CR_RDYPOL                  PSSI_CR_RDYPOL_Msk                     /*!< Ready polarity */
#define PSSI_CR_DEPOL_Pos               (6U)
#define PSSI_CR_DEPOL_Msk               (0x1UL << PSSI_CR_DEPOL_Pos)           /*!< 0x00000C00 */
#define PSSI_CR_DEPOL                   PSSI_CR_DEPOL_Msk                      /*!<  Data enable polarity */
#define PSSI_CR_CKPOL_Pos               (5U)
#define PSSI_CR_CKPOL_Msk               (0x1UL << PSSI_CR_CKPOL_Pos)           /*!< 0x00000C00 */
#define PSSI_CR_CKPOL                   PSSI_CR_CKPOL_Msk                      /*!< Parallel data clock polarity */
/********************  Bit definition for PSSI_SR register  *******************/
#define PSSI_SR_RTT1B_Pos               (3U)
#define PSSI_SR_RTT1B_Msk               (0x1UL << PSSI_SR_RTT1B_Pos)           /*!< 0x00000008 */
#define PSSI_SR_RTT1B                   PSSI_SR_RTT1B_Msk                      /*!< Ready to transfer one byte */
#define PSSI_SR_RTT4B_Pos               (2U)
#define PSSI_SR_RTT4B_Msk               (0x1UL << PSSI_SR_RTT4B_Pos)           /*!< 0x00000004 */
#define PSSI_SR_RTT4B                   PSSI_SR_RTT4B_Msk                      /*!< Ready to transfer four bytes */
/********************  Bit definition for PSSI_RIS register  *******************/
#define PSSI_RIS_OVR_RIS_Pos            (1U)
#define PSSI_RIS_OVR_RIS_Msk            (0x1UL << PSSI_RIS_OVR_RIS_Pos)        /*!< 0x00000002 */
#define PSSI_RIS_OVR_RIS                PSSI_RIS_OVR_RIS_Msk                   /*!< Data buffer overrun/underrun raw interrupt status */
/********************  Bit definition for PSSI_IER register  *******************/
#define PSSI_IER_OVR_IE_Pos             (1U)
#define PSSI_IER_OVR_IE_Msk             (0x1UL << PSSI_IER_OVR_IE_Pos)         /*!< 0x00000002 */
#define PSSI_IER_OVR_IE                 PSSI_IER_OVR_IE_Msk                    /*!< Data buffer overrun/underrun interrupt enable */
/********************  Bit definition for PSSI_MIS register  *******************/
#define PSSI_MIS_OVR_MIS_Pos            (1U)
#define PSSI_MIS_OVR_MIS_Msk            (0x1UL << PSSI_MIS_OVR_MIS_Pos)        /*!< 0x00000002 */
#define PSSI_MIS_OVR_MIS                PSSI_MIS_OVR_MIS_Msk                   /*!< Data buffer overrun/underrun masked interrupt status */
/********************  Bit definition for PSSI_ICR register  *******************/
#define PSSI_ICR_OVR_ISC_Pos            (1U)
#define PSSI_ICR_OVR_ISC_Msk            (0x1UL << PSSI_ICR_OVR_ISC_Pos)        /*!< 0x00000002 */
#define PSSI_ICR_OVR_ISC                PSSI_ICR_OVR_ISC_Msk                   /*!< Data buffer overrun/underrun interrupt status clear */
/********************  Bit definition for PSSI_DR register  *******************/
#define PSSI_DR_DR_Pos                  (0U)
#define PSSI_DR_DR_Msk                  (0xFFFFFFFFUL << PSSI_DR_DR_Pos)       /*!< 0xFFFFFFF */
#define PSSI_DR_DR                      PSSI_DR_DR_Msk                         /*!< Data register  */

/******************************************************************************/
/*                                                                            */
/*                         PWR                                                */
/*                (based on user spec v1.0.1)                                 */
/******************************************************************************/

/* Bit fields for PWR_CR1 register */

/* Bit fields for PWR_CR2 register */
#define PWR_CR2_MONEN_Pos                      (0U)
#define PWR_CR2_MONEN_Msk                      (0x1U << PWR_CR2_MONEN_Pos)
#define PWR_CR2_MONEN                          PWR_CR2_MONEN_Msk  /*!< VBAT and temperature monitoring enableWhen set, the VBAT supply and temperature monitoring is enabled.- 0: VBAT and temperature monitoring disabled.- 1: VBAT and temperature monitoring enabled. */
#define PWR_CR2_VBATL_Pos                      (8U)
#define PWR_CR2_VBATL_Msk                      (0x1U << PWR_CR2_VBATL_Pos)
#define PWR_CR2_VBATL                          PWR_CR2_VBATL_Msk  /*!< Monitored VBAT level above low threshold- 0: VBAT level above low threshold level, or Monitor disabled.- 1: VBAT level equal or below low threshold level. */
#define PWR_CR2_VBATH_Pos                      (9U)
#define PWR_CR2_VBATH_Msk                      (0x1U << PWR_CR2_VBATH_Pos)
#define PWR_CR2_VBATH                          PWR_CR2_VBATH_Msk  /*!< Monitored VBAT level above high threshold- 0: VBAT level below high threshold level, or Monitor disabled.- 1: VBAT level equal or above high threshold level. */
#define PWR_CR2_TEMPL_Pos                      (10U)
#define PWR_CR2_TEMPL_Msk                      (0x1U << PWR_CR2_TEMPL_Pos)
#define PWR_CR2_TEMPL                          PWR_CR2_TEMPL_Msk  /*!< Monitored temperature level above low threshold- 0: Temperature above low threshold level, or Monitor disabled.- 1: Temperature equal or below low threshold level. */
#define PWR_CR2_TEMPH_Pos                      (11U)
#define PWR_CR2_TEMPH_Msk                      (0x1U << PWR_CR2_TEMPH_Pos)
#define PWR_CR2_TEMPH                          PWR_CR2_TEMPH_Msk  /*!< Monitored temperature level above high threshold- 0: Temperature below high threshold level, or Monitor disabled.- 1: Temperature equal or above high threshold level. */

/* Bit fields for PWR_CR3 register */
#define PWR_CR3_PVDEN_Pos                      (0U)
#define PWR_CR3_PVDEN_Msk                      (0x1U << PWR_CR3_PVDEN_Pos)
#define PWR_CR3_PVDEN                          PWR_CR3_PVDEN_Msk  /*!< Programmable Voltage detector enable.This bit is read only when the SYSCFG register bit PVDL is set. (When PVDL is set, there will be no bus errors generated when writing this register).- 0: Programmable Voltage detector disabled.- 1: Programmable Voltage detector enabled. */
#define PWR_CR3_PLS_Pos                        (4U)
#define PWR_CR3_PLS_Msk                        (0x7U << PWR_CR3_PLS_Pos)
#define PWR_CR3_PLS                            PWR_CR3_PLS_Msk  /*!< Programmable Voltage Detector level selection.These bits are read only when the SYSCFG register bit PVDL is set. (When PVDL is set, there will be no bus errors generated when writing this register.)These bits select the voltage threshold detected by the PVD.- 000: 1.95V- 001: 2.1V- 010: 2.25V- 011: 2.4V- 100: 2.55V- 101: 2.7V- 110: 2.85V- 111: External voltage level on PVD_IN (compared to internal VREFINT) */
#define PWR_CR3_PVDO_Pos                       (8U)
#define PWR_CR3_PVDO_Msk                       (0x1U << PWR_CR3_PVDO_Pos)
#define PWR_CR3_PVDO                           PWR_CR3_PVDO_Msk  /*!< Programmable Voltage Detect OutputThis bit is set and cleared by hardware. It is valid only if PVD is enabled by the PVDEN bit.- 0: VDD or voltage level on PVD_IN is equal or higher than the PVD threshold selected with the PLS[2:0] bits.- 1: VDD or voltage level on PVD_IN is lower than the PVD threshold selected with the PLS[2:0] bits.The PVD is disabled in Standby mode and after a system reset. For this reason, this bit is equal to 0 after Standby and system reset. */

/* Bit fields for PWR_CR4 register */
#define PWR_CR4_AVDEN_Pos                      (0U)
#define PWR_CR4_AVDEN_Msk                      (0x1U << PWR_CR4_AVDEN_Pos)
#define PWR_CR4_AVDEN                          PWR_CR4_AVDEN_Msk  /*!< Peripheral Voltage Monitor on VDDA enable.- 0: Peripheral Voltage Monitor on VDDA disabled.- 1: Peripheral Voltage Monitor on VDDA enabled. */
#define PWR_CR4_ALS_Pos                        (4U)
#define PWR_CR4_ALS_Msk                        (0x3U << PWR_CR4_ALS_Pos)
#define PWR_CR4_ALS                            PWR_CR4_ALS_Msk  /*!< Analog Voltage Detector level selection.These bits select the voltage threshold detected by the AVD.- 00: 1.2V- 01: 1.3V- 10: 1.4V- 11: 1.5V */
#define PWR_CR4_AVDO_Pos                       (8U)
#define PWR_CR4_AVDO_Msk                       (0x1U << PWR_CR4_AVDO_Pos)
#define PWR_CR4_AVDO                           PWR_CR4_AVDO_Msk  /*!< Analog Voltage detector Output on VDDA.This bit is set and cleared by hardware. It is valid only if AVD on VDDA is enabled by the AVDEN bit.- 0: VDDA is equal or higher than the AVD threshold selected with the ALS[1:0] bits.- 1: VDDA is lower than the AVD threshold selected with the ALS[1:0] bits.The AVD is disabled in Standby mode and after system reset. For this reason, this bit is equal to 0 after Standby and reset. */

/* Bit fields for PWR_CR5 register */
#define PWR_CR5_VCOREMONEN_Pos                 (0U)
#define PWR_CR5_VCOREMONEN_Msk                 (0x1U << PWR_CR5_VCOREMONEN_Pos)
#define PWR_CR5_VCOREMONEN                     PWR_CR5_VCOREMONEN_Msk  /*!< VDDCORE monitoring enable.When set, the VDDCORE supply monitoring is enabled.- 0: VDDCORE monitoring disabled.- 1: VDDCORE monitoring enabled. */
#define PWR_CR5_VCOREL_Pos                     (8U)
#define PWR_CR5_VCOREL_Msk                     (0x1U << PWR_CR5_VCOREL_Pos)
#define PWR_CR5_VCOREL                         PWR_CR5_VCOREL_Msk  /*!< Monitored VDDCORE level above low threshold.- 0: VDDCORE level above low threshold level, or Monitor disabled.- 1: VDDCORE level equal or below low threshold level. */
#define PWR_CR5_VCOREH_Pos                     (9U)
#define PWR_CR5_VCOREH_Msk                     (0x1U << PWR_CR5_VCOREH_Pos)
#define PWR_CR5_VCOREH                         PWR_CR5_VCOREH_Msk  /*!< Monitored VDDCORE level above high threshold.- 0: VDDCORE level below high threshold level, or Monitor disabled.- 1: VDDCORE level equal or above high threshold level. */

/* Bit fields for PWR_CR6 register */
#define PWR_CR6_VCPUMONEN_Pos                  (0U)
#define PWR_CR6_VCPUMONEN_Msk                  (0x1U << PWR_CR6_VCPUMONEN_Pos)
#define PWR_CR6_VCPUMONEN                      PWR_CR6_VCPUMONEN_Msk  /*!< VDDCPU monitoring enable.When set, the VDDCPU supply monitoring is enabled.- 0: VDDCPU monitoring disabled.- 1: VDDCPU monitoring enabled. */
#define PWR_CR6_VCPULLS_Pos                    (4U)
#define PWR_CR6_VCPULLS_Msk                    (0x1U << PWR_CR6_VCPULLS_Pos)
#define PWR_CR6_VCPULLS                        PWR_CR6_VCPULLS_Msk  /*!< VDDCPU Voltage Detector low level selection.This bit select the low voltage threshold detected by the monitoring.- 0: 0.72V (TBC in 16FF)- 1: 0.81V (TBC in 16FF) */
#define PWR_CR6_VCPUL_Pos                      (8U)
#define PWR_CR6_VCPUL_Msk                      (0x1U << PWR_CR6_VCPUL_Pos)
#define PWR_CR6_VCPUL                          PWR_CR6_VCPUL_Msk  /*!< Monitored VDDCPU level above low threshold.- 0: VDDCPU level above low threshold level, or Monitor disabled.- 1: VDDCPU level equal or below low threshold level. */
#define PWR_CR6_VCPUH_Pos                      (9U)
#define PWR_CR6_VCPUH_Msk                      (0x1U << PWR_CR6_VCPUH_Pos)
#define PWR_CR6_VCPUH                          PWR_CR6_VCPUH_Msk  /*!< Monitored VDDCPU level above high threshold.- 0: VDDCPU level below high threshold level, or Monitor disabled.- 1: VDDCPU level equal or above high threshold level. */

/* Bit fields for PWR_CR7 register */
#if defined (STM32MP2XX_ASSY2_2_1)
#define PWR_CR7_VBE_Pos                        (0U)
#define PWR_CR7_VBE_Msk                        (0x1U << PWR_CR7_VBE_Pos)
#define PWR_CR7_VBE                            PWR_CR7_VBE_Msk  /*!< VBAT charging enable.- 0: VBAT battery charging disabled.- 1: VBAT battery charging enabled. */
#define PWR_CR7_VBRS_Pos                       (1U)
#define PWR_CR7_VBRS_Msk                       (0x1U << PWR_CR7_VBRS_Pos)
#define PWR_CR7_VBRS                           PWR_CR7_VBRS_Msk  /*!< VBAT charging resistor selection.- 0: Charge VBAT through a 5 kOhm resistor.- 1: Charge VBAT through a 1.5 kOhm resistor. */
#endif /* STM32MP2XX_ASSY2_2_1 */

/* Bit fields for PWR_CR8 register */
#if defined (STM32MP2XX_ASSY2_2_1)
#define PWR_CR8_USB33DEN_Pos                   (24U)
#define PWR_CR8_USB33DEN_Msk                   (0x1U << PWR_CR8_USB33DEN_Pos)
#define PWR_CR8_USB33DEN                       PWR_CR8_USB33DEN_Msk  /*!< USB 3.3V voltage level detector enable.- 0: USB 3.3V voltage level detector disabled.- 1: USB 3.3V voltage level detector enabled. */
#define PWR_CR8_USB33RDY_Pos                   (26U)
#define PWR_CR8_USB33RDY_Msk                   (0x1U << PWR_CR8_USB33RDY_Pos)
#define PWR_CR8_USB33RDY                       PWR_CR8_USB33RDY_Msk  /*!< USB 3.3V supply ready.- 0: USB 3.3V supply not ready.- 1: USB 3.3V supply ready. */
#else /* else STM32MP2XX_ASSY2_2_1 */
#define PWR_CR8_IOEMMCVMEN_Pos                 (0U)
#define PWR_CR8_IOEMMCVMEN_Msk                 (0x1U << PWR_CR8_IOEMMCVMEN_Pos)
#define PWR_CR8_IOEMMCVMEN                     PWR_CR8_IOEMMCVMEN_Msk
#define PWR_CR8_IOOCTOSPI1MEN_Pos              (1U)
#define PWR_CR8_IOOCTOSPI1MEN_Msk              (0x1U << PWR_CR8_IOOCTOSPI1MEN_Pos)
#define PWR_CR8_IOOCTOSPI1MEN                  PWR_CR8_IOOCTOSPI1MEN_Msk
#define PWR_CR8_IOOCTOSPI2MEN_Pos              (2U)
#define PWR_CR8_IOOCTOSPI2MEN_Msk              (0x1U << PWR_CR8_IOOCTOSPI2MEN_Pos)
#define PWR_CR8_IOOCTOSPI2MEN                  PWR_CR8_IOOCTOSPI2MEN_Msk
#define PWR_CR8_IOSDVMEN_Pos                   (3U)
#define PWR_CR8_IOSDVMEN_Msk                   (0x1U << PWR_CR8_IOSDVMEN_Pos)
#define PWR_CR8_IOSDVMEN                       PWR_CR8_IOSDVMEN_Msk
#define PWR_CR8_USB3V3VMEN_Pos                 (4U)
#define PWR_CR8_USB3V3VMEN_Msk                 (0x1U << PWR_CR8_USB3V3VMEN_Pos)
#define PWR_CR8_USB3V3VMEN                     PWR_CR8_USB3V3VMEN_Msk
#define PWR_CR8_USBCCVMEN_Pos                  (5U)
#define PWR_CR8_USBCCVMEN_Msk                  (0x1U << PWR_CR8_USBCCVMEN_Pos)
#define PWR_CR8_USBCCVMEN                      PWR_CR8_USBCCVMEN_Msk
#define PWR_CR8_AVMEN_Pos                      (6U)
#define PWR_CR8_AVMEN_Msk                      (0x1U << PWR_CR8_AVMEN_Pos)
#define PWR_CR8_AVMEN                          PWR_CR8_AVMEN_Msk
#define PWR_CR8_IOEMMCSV_Pos                   (8U)
#define PWR_CR8_IOEMMCSV_Msk                   (0x1U << PWR_CR8_IOEMMCSV_Pos)
#define PWR_CR8_IOEMMCSV                       PWR_CR8_IOEMMCSV_Msk
#define PWR_CR8_IOOCTOSPI1SV_Pos               (9U)
#define PWR_CR8_IOOCTOSPI1SV_Msk               (0x1U << PWR_CR8_IOOCTOSPI1SV_Pos)
#define PWR_CR8_IOOCTOSPI1SV                   PWR_CR8_IOOCTOSPI1SV_Msk
#define PWR_CR8_IOOCTOSPI2SV_Pos               (10U)
#define PWR_CR8_IOOCTOSPI2SV_Msk               (0x1U << PWR_CR8_IOOCTOSPI2SV_Pos)
#define PWR_CR8_IOOCTOSPI2SV                   PWR_CR8_IOOCTOSPI2SV_Msk
#define PWR_CR8_IOSDSV_Pos                     (11U)
#define PWR_CR8_IOSDSV_Msk                     (0x1U << PWR_CR8_IOSDSV_Pos)
#define PWR_CR8_IOSDSV                         PWR_CR8_IOSDSV_Msk
#define PWR_CR8_USB3V3SV_Pos                   (12U)
#define PWR_CR8_USB3V3SV_Msk                   (0x1U << PWR_CR8_USB3V3SV_Pos)
#define PWR_CR8_USB3V3SV                       PWR_CR8_USB3V3SV_Msk
#define PWR_CR8_USBCCSV_Pos                    (13U)
#define PWR_CR8_USBCCSV_Msk                    (0x1U << PWR_CR8_USBCCSV_Pos)
#define PWR_CR8_USBCCSV                        PWR_CR8_USBCCSV_Msk
#define PWR_CR8_ASV_Pos                        (14U)
#define PWR_CR8_ASV_Msk                        (0x1U << PWR_CR8_ASV_Pos)
#define PWR_CR8_ASV                            PWR_CR8_ASV_Msk
#define PWR_CR8_IOEMMCRDY_Pos                  (16U)
#define PWR_CR8_IOEMMCRDY_Msk                  (0x1U << PWR_CR8_IOEMMCRDY_Pos)
#define PWR_CR8_IOEMMCRDY                      PWR_CR8_IOEMMCRDY_Msk
#define PWR_CR8_IOOCTOSPI1RDY_Pos              (17U)
#define PWR_CR8_IOOCTOSPI1RDY_Msk              (0x1U << PWR_CR8_IOOCTOSPI1RDY_Pos)
#define PWR_CR8_IOOCTOSPI1RDY                  PWR_CR8_IOOCTOSPI1RDY_Msk
#define PWR_CR8_IOOCTOSPI2RDY_Pos              (18U)
#define PWR_CR8_IOOCTOSPI2RDY_Msk              (0x1U << PWR_CR8_IOOCTOSPI2RDY_Pos)
#define PWR_CR8_IOOCTOSPI2RDY                  PWR_CR8_IOOCTOSPI2RDY_Msk
#define PWR_CR8_IOSDRDY_Pos                    (19U)
#define PWR_CR8_IOSDRDY_Msk                    (0x1U << PWR_CR8_IOSDRDY_Pos)
#define PWR_CR8_IOSDRDY                        PWR_CR8_IOSDRDY_Msk
#define PWR_CR8_USB3V3RDY_Pos                  (20U)
#define PWR_CR8_USB3V3RDY_Msk                  (0x1U << PWR_CR8_USB3V3RDY_Pos)
#define PWR_CR8_USB3V3RDY                      PWR_CR8_USB3V3RDY_Msk
#define PWR_CR8_USBCCRDY_Pos                   (21U)
#define PWR_CR8_USBCCRDY_Msk                   (0x1U << PWR_CR8_USBCCRDY_Pos)
#define PWR_CR8_USBCCRDY                       PWR_CR8_USBCCRDY_Msk
#define PWR_CR8_ARDY_Pos                       (22U)
#define PWR_CR8_ARDY_Msk                       (0x1U << PWR_CR8_ARDY_Pos)
#define PWR_CR8_ARDY                           PWR_CR8_ARDY_Msk
#define PWR_CR8_GPVMO_Pos                      (31U)
#define PWR_CR8_GPVMO_Msk                      (0x1U << PWR_CR8_GPVMO_Pos)
#define PWR_CR8_GPVMO                          PWR_CR8_GPVMO_Msk
#endif /* STM32MP2XX_ASSY2_2_1 */

/* Bit fields for PWR_CR9 register */
#define PWR_CR9_BKPRBSEN_Pos                   (0U)
#define PWR_CR9_BKPRBSEN_Msk                   (0x1U << PWR_CR9_BKPRBSEN_Pos)
#define PWR_CR9_BKPRBSEN                       PWR_CR9_BKPRBSEN_Msk  /*!< Backup RAM backup supply enable (used to maintain BKP RAM content in Standby and VBAT modes).When set, the backup ram is supplied from backup regulator in Standby and VBAT modes.When reset, The backup ram can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 0: BKPSRAM Backup supply disable.- 1: BKPSRAM Backup supply enable. */
#define PWR_CR9_LPR1BSEN_Pos                   (4U)
#define PWR_CR9_LPR1BSEN_Msk                   (0x1U << PWR_CR9_LPR1BSEN_Pos)
#define PWR_CR9_LPR1BSEN                       PWR_CR9_LPR1BSEN_Msk  /*!< LPSRAM 1 backup supply enable (used to maintain LPSRAM1 RAM content in Standby and VBAT modes).When set, the LPSRAM1 is supplied from backup regulator in Standby and VBAT modes.When reset, The LPSRAM1 can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 0: LPSRAM1 Backup supply disable.- 1: LPSRAM1 Backup supply enable. */

/* Bit fields for PWR_CR10 register */
#define PWR_CR10_RETRBSEN_Pos                  (0U)
#define PWR_CR10_RETRBSEN_Msk                  (0x3U << PWR_CR10_RETRBSEN_Pos)
#define PWR_CR10_RETRBSEN                      PWR_CR10_RETRBSEN_Msk  /*!< Retention RAM backup supply enable (used to maintain RET RAM content in Standby and VBAT modes).When set, the retention ram is supplied from backup regulator in Standby and VBAT modes. When reset, the retention ram can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 00: RETRAM Backup supply disable.- 01: RETRAM Backup supply enable in Standby and VBAT modes.- 10: RETRAM Backup supply enable only in Standby mode (memory content lost in VBAT mode).- 11: RETRAM Backup supply enable only in Standby mode (memory content lost in VBAT mode). */

/* Bit fields for PWR_CR11 register */
#define PWR_CR11_DDRSREN_Pos                   (10U)
#define PWR_CR11_DDRSREN_Msk                   (0x1U << PWR_CR11_DDRSREN_Pos)
#define PWR_CR11_DDRSREN                       PWR_CR11_DDRSREN_Msk  /*!< DDR self-refresh in standby mode enableWhen set, the DDR PHY will put itâs pads in retention when entering Standby mode.- 0: DDR self-refresh retention when entering standby mode disabled.- 1: DDR self-refresh retention when entering standby mode enabled. (DDR self-refresh retention after Standby shall be disabled by DDRSRDIS). */
#define PWR_CR11_DDRSRDIS_Pos                  (11U)
#define PWR_CR11_DDRSRDIS_Msk                  (0x1U << PWR_CR11_DDRSRDIS_Pos)
#define PWR_CR11_DDRSRDIS                      PWR_CR11_DDRSRDIS_Msk  /*!< DDR self-refresh retention after standby disableWhen written âb1, the DDR PHY pads retention, enabled due to DDRSREN, will be disabled.- 0: No action.- 1: When DDRSREN is 0â: Disable DDR self-refresh retention after standby mode. This bit is reset by HW once DDR self-refresh retention has been disabled. When DRRSREN is 0â no action. */
#define PWR_CR11_DDRRETEN_Pos                  (12U)
#define PWR_CR11_DDRRETEN_Msk                  (0x1U << PWR_CR11_DDRRETEN_Pos)
#define PWR_CR11_DDRRETEN                      PWR_CR11_DDRRETEN_Msk  /*!< DDR retention enable.When written âb1, the DDR PHY will put itâs pads in retention. To disable retention software shall write this bit to âb0.- 0: DDR self-refresh retention disabled.- 1: DDR self-refresh retention enabled. */

/* Bit fields for PWR_CR12 register */
#define PWR_CR12_GPUPDEN_Pos                   (0U)
#define PWR_CR12_GPUPDEN_Msk                   (0x1U << PWR_CR12_GPUPDEN_Pos)
#define PWR_CR12_GPUPDEN                       PWR_CR12_GPUPDEN_Msk  /*!< GPU power domain enable.When set, the GPU power domain is enabled. Once set, the application must wait that the GPU power domain ready is set to access the domain.- 0: The GPU power domain is switch off.- 1: The GPU power domain is switch on. */
#define PWR_CR12_GPUPDRDY_Pos                  (31U)
#define PWR_CR12_GPUPDRDY_Msk                  (0x1U << PWR_CR12_GPUPDRDY_Pos)
#define PWR_CR12_GPUPDRDY                      PWR_CR12_GPUPDRDY_Msk  /*!< GPU power domain ready.Set by hardware to indicate that the gpu power domain is ready. */

/* Bit fields for PWR_BDCR1 register */
#define PWR_BDCR1_DBD3P_Pos                    (0U)
#define PWR_BDCR1_DBD3P_Msk                    (0x1U << PWR_BDCR1_DBD3P_Pos)
#define PWR_BDCR1_DBD3P                        PWR_BDCR1_DBD3P_Msk  /*!< Disable backup and D3 domains write protection.In reset state, all registers in backup and D3 domains are protected against parasitic write access from D1 and D2 domains. This bit must be set to enable write access to these registers.- 0: Write access to backup and D3 domains disabled- 1: Write access to backup and D3 domains enabled */

/* Bit fields for PWR_BDCR2 register */
#define PWR_BDCR2_DBP_Pos                      (0U)
#define PWR_BDCR2_DBP_Msk                      (0x1U << PWR_BDCR2_DBP_Pos)
#define PWR_BDCR2_DBP                          PWR_BDCR2_DBP_Msk  /*!< Disable backup domain write protection.In reset state, all registers in backup domain are protected against parasitic write access from D3 domain. This bit must be set to enable write access to these registers.- 0: Write access to backup domains disabled- 1: Write access to backup domains enabled */

/* Bit fields for PWR_CPU1CR register */
#define PWR_CPU1CR_PDDS_D2_Pos                 (0U)
#define PWR_CPU1CR_PDDS_D2_Msk                 (0x1U << PWR_CPU1CR_PDDS_D2_Pos)
#define PWR_CPU1CR_PDDS_D2                     PWR_CPU1CR_PDDS_D2_Msk  /*!< D2 Domain / System Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU1 to define the Deepsleep mode for the D2 / system.- 0: Keep Stop mode when CPU1 enters to CStop.- 1: Allow Standby mode when CPU1 enters to CStop. */
#define PWR_CPU1CR_PDDS_D1_Pos                 (1U)
#define PWR_CPU1CR_PDDS_D1_Msk                 (0x1U << PWR_CPU1CR_PDDS_D1_Pos)
#define PWR_CPU1CR_PDDS_D1                     PWR_CPU1CR_PDDS_D1_Msk  /*!< D1 domain Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU1 to define the Deepsleep mode for the system.- 0: Keep DStop mode when CPU1 enters to CStop.- 1: Allow DStandby mode when CPU1 enters to CStop. */
#define PWR_CPU1CR_VBF_Pos                     (4U)
#define PWR_CPU1CR_VBF_Msk                     (0x1U << PWR_CPU1CR_VBF_Pos)
#define PWR_CPU1CR_VBF                         PWR_CPU1CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU1CR_STOPF_Pos                   (5U)
#define PWR_CPU1CR_STOPF_Msk                   (0x1U << PWR_CPU1CR_STOPF_Pos)
#define PWR_CPU1CR_STOPF                       PWR_CPU1CR_STOPF_Msk  /*!< System Stop FlagThis bit is set by hardware and cleared only by any system reset or by setting the CPU1 CSSF bit.- 0: System has not been in Stop mode.- 1: System has been in Stop mode, clock system has been stopped. */
#define PWR_CPU1CR_SBF_Pos                     (6U)
#define PWR_CPU1CR_SBF_Msk                     (0x1U << PWR_CPU1CR_SBF_Pos)
#define PWR_CPU1CR_SBF                         PWR_CPU1CR_SBF_Msk  /*!< System Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU1 and CPU2 CSSF bit. (not reset when exit from Standby mode)- 0: System has not been in Standby mode.- 1: System has been in Standby mode, system contents has been lost. */
#define PWR_CPU1CR_SBF_D1_Pos                  (7U)
#define PWR_CPU1CR_SBF_D1_Msk                  (0x1U << PWR_CPU1CR_SBF_D1_Pos)
#define PWR_CPU1CR_SBF_D1                      PWR_CPU1CR_SBF_D1_Msk  /*!< D1 DStandby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU1 CSSF bit. (not reset when exit from Standby mode)- 0: D1 domain has not been in DStandby mode.- 1: D1 domain has been in DStandby mode. */
#define PWR_CPU1CR_SBF_D3_Pos                  (8U)
#define PWR_CPU1CR_SBF_D3_Msk                  (0x1U << PWR_CPU1CR_SBF_D3_Pos)
#define PWR_CPU1CR_SBF_D3                      PWR_CPU1CR_SBF_D3_Msk  /*!< D3 SStandby FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT and Standby modes)- 0: D3 domain has not been in SStandby mode.- 1: D3 domain has been in SStandby mode. */
#define PWR_CPU1CR_CSSF_Pos                    (9U)
#define PWR_CPU1CR_CSSF_Msk                    (0x1U << PWR_CPU1CR_CSSF_Pos)
#define PWR_CPU1CR_CSSF                        PWR_CPU1CR_CSSF_Msk  /*!< Clear CPU1 STOPF, SBF_D1/_D3, SBF, VBF flags and CPU2 SBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU1 flags (STOPF, SBF_D1/_D3, SBF, and VBF) and CPU2 SBF flag. Register bit is cleared to 0 by hardware. */
#define PWR_CPU1CR_STANDBYWFIL2_Pos            (15U)
#define PWR_CPU1CR_STANDBYWFIL2_Msk            (0x1U << PWR_CPU1CR_STANDBYWFIL2_Pos)
#define PWR_CPU1CR_STANDBYWFIL2                PWR_CPU1CR_STANDBYWFIL2_Msk  /*!< CPU1 system idle indication.This bit is set and reset by HW based on the CPU1 operation mode.- 0: CPU1 system active.- 1: CPU1 system idle. */
#define PWR_CPU1CR_LPDS_D1_Pos                 (16U)
#define PWR_CPU1CR_LPDS_D1_Msk                 (0x1U << PWR_CPU1CR_LPDS_D1_Pos)
#define PWR_CPU1CR_LPDS_D1                     PWR_CPU1CR_LPDS_D1_Msk  /*!< Low power Deepsleep Stop mode selection for the D1 domain (DStop2).This bit is reset on any system reset.- 0: Stop mode selected, external regulator kept in main power mode.- 1: low-power stop mode selected, external regulator may enter low power mode. Further low power mode selection is provided by LVDS_D1. */
#define PWR_CPU1CR_LVDS_D1_Pos                 (17U)
#define PWR_CPU1CR_LVDS_D1_Msk                 (0x1U << PWR_CPU1CR_LVDS_D1_Pos)
#define PWR_CPU1CR_LVDS_D1                     PWR_CPU1CR_LVDS_D1_Msk  /*!< Low voltage Deepsleep LPLV-Stop mode selection for the D1 domain (DStop3).This bit is reset on any system reset.This bit has only effect when the low power stop mode is selected in LPDS_D1 and will change the VDDCPU domain supply reset level.- 0: LP-Stop mode VDDCPU domain supply reset level at same level as Run mode. The VDDCPU domain supply level in LP-Stop mode shall be kept at same level as Run mode.- 1: LPLV-Stop mode VDDCPU domain supply reset level at lower level than Run mode. Allows to lower VDDCPU domain supply in LPLV-Stop mode (see datasheet for voltage levels). */

/* Bit fields for PWR_CPU2CR register */
#define PWR_CPU2CR_PDDS_D2_Pos                 (0U)
#define PWR_CPU2CR_PDDS_D2_Msk                 (0x1U << PWR_CPU2CR_PDDS_D2_Pos)
#define PWR_CPU2CR_PDDS_D2                     PWR_CPU2CR_PDDS_D2_Msk  /*!< D2 Domain / System Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU2 to define the Deepsleep mode for the system / D2.- 0: Keep Stop mode when CPU2 enters to CStop.- 1: Allow Standby mode when CPU2 enters to CStop. */
#define PWR_CPU2CR_VBF_Pos                     (4U)
#define PWR_CPU2CR_VBF_Msk                     (0x1U << PWR_CPU2CR_VBF_Pos)
#define PWR_CPU2CR_VBF                         PWR_CPU2CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU2CR_STOPF_Pos                   (5U)
#define PWR_CPU2CR_STOPF_Msk                   (0x1U << PWR_CPU2CR_STOPF_Pos)
#define PWR_CPU2CR_STOPF                       PWR_CPU2CR_STOPF_Msk  /*!< System Stop FlagThis bit is set by hardware and cleared only by any system reset or by setting the CPU2 CSSF bit.- 0: System has not been in Stop mode.- 1: System has been in Stop mode, clock system has been stopped. */
#define PWR_CPU2CR_SBF_Pos                     (6U)
#define PWR_CPU2CR_SBF_Msk                     (0x1U << PWR_CPU2CR_SBF_Pos)
#define PWR_CPU2CR_SBF                         PWR_CPU2CR_SBF_Msk  /*!< System Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU2 and CPU1 CSSF bit. (not reset when exit from Standby mode)- 0: System has not been in Standby mode- 1: System has been in Standby mode, system contents has been lost. */
#define PWR_CPU2CR_SBF_D2_Pos                  (7U)
#define PWR_CPU2CR_SBF_D2_Msk                  (0x1U << PWR_CPU2CR_SBF_D2_Pos)
#define PWR_CPU2CR_SBF_D2                      PWR_CPU2CR_SBF_D2_Msk  /*!< D2 Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU2 CSSF bit. (not reset when exit from Standby mode)- 0: D2 domain has not been in Standby mode.- 1: D2 domain has been in Standby mode. */
#define PWR_CPU2CR_SBF_D3_Pos                  (8U)
#define PWR_CPU2CR_SBF_D3_Msk                  (0x1U << PWR_CPU2CR_SBF_D3_Pos)
#define PWR_CPU2CR_SBF_D3                      PWR_CPU2CR_SBF_D3_Msk  /*!< D3 SStandby FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU2 CSSF bit. (not reset when exit from VBAT and Standby modes)- 0: D3 domain has not been in SStandby mode.- 1: D3 domain has been in SStandby mode. */
#define PWR_CPU2CR_CSSF_Pos                    (9U)
#define PWR_CPU2CR_CSSF_Msk                    (0x1U << PWR_CPU2CR_CSSF_Pos)
#define PWR_CPU2CR_CSSF                        PWR_CPU2CR_CSSF_Msk  /*!< Clear CPU2 STOPF, SBF_D2, SBF_D3, SBF, VBF flags and CPU1 SBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU2 flags (STOPF, SBF_D2, SBF_D3, SBF and VBF) and CPU1 SBF flag. Register bit is cleared to 0 by hardware. */
#define PWR_CPU2CR_DEEPSLEEP_Pos               (15U)
#define PWR_CPU2CR_DEEPSLEEP_Msk               (0x1U << PWR_CPU2CR_DEEPSLEEP_Pos)
#define PWR_CPU2CR_DEEPSLEEP                   PWR_CPU2CR_DEEPSLEEP_Msk  /*!< CPU2 system idle indication.This bit is set and reset by HW based on the CPU2 operation mode.- 0: CPU2 system active.- 1: CPU2 system idle. */
#define PWR_CPU2CR_LPDS_D2_Pos                 (16U)
#define PWR_CPU2CR_LPDS_D2_Msk                 (0x1U << PWR_CPU2CR_LPDS_D2_Pos)
#define PWR_CPU2CR_LPDS_D2                     PWR_CPU2CR_LPDS_D2_Msk  /*!< Low power Deepsleep Stop mode selection for the D2 domain / System.This bit is reset on any system reset.- 0: Stop mode selected, external regulator kept in main power mode (pwr_lp=1)- 1: low-power stop mode selected, external regulator may enter low power mode (pwr_lp =0). Further low power mode selection is provided by LVDS_D2. */
#define PWR_CPU2CR_LVDS_D2_Pos                 (17U)
#define PWR_CPU2CR_LVDS_D2_Msk                 (0x1U << PWR_CPU2CR_LVDS_D2_Pos)
#define PWR_CPU2CR_LVDS_D2                     PWR_CPU2CR_LVDS_D2_Msk  /*!< Low voltage Deepsleep LPLV-Stop mode selection for the D2 domain / System.This bit is reset on any system reset.This bit has only effect when the low power stop mode is selected in LPDS_D2 and will change the VDDCORE domain supply reset level.- 0: LP-Stop mode VDDCORE domain supply reset level at same level as Run mode. The VDDCORE domain supply level in LP-Stop mode shall be kept at same level as Run mode.- 1: LPLV-Stop mode VDDCORE domain supply reset level at lower level than Run mode. Allows to lower VDDCORE domain supply in LPLV-Stop mode (see datasheet for voltage levels). */

/* Bit fields for PWR_CPU3CR register */
#define PWR_CPU3CR_VBF_Pos                     (4U)
#define PWR_CPU3CR_VBF_Msk                     (0x1U << PWR_CPU3CR_VBF_Pos)
#define PWR_CPU3CR_VBF                         PWR_CPU3CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU3 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU3CR_SBF_D3_Pos                  (8U)
#define PWR_CPU3CR_SBF_D3_Msk                  (0x1U << PWR_CPU3CR_SBF_D3_Pos)
#define PWR_CPU3CR_SBF_D3                      PWR_CPU3CR_SBF_D3_Msk  /*!< D3 SStandby FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU3 CSSF bit. (not reset when exit from VBAT1 or Standby modes)- 0: D3 domain has not been in SStandby mode- 1: D3 domain has been in SStandby mode */
#define PWR_CPU3CR_CSSF_Pos                    (9U)
#define PWR_CPU3CR_CSSF_Msk                    (0x1U << PWR_CPU3CR_CSSF_Pos)
#define PWR_CPU3CR_CSSF                        PWR_CPU3CR_CSSF_Msk  /*!< Clear CPU3 SBF_D3, VBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU3 flag (SBF_D3 and VBF). Register bit is cleared to 0 by hardware. */
#define PWR_CPU3CR_DEEPSLEEP_Pos               (15U)
#define PWR_CPU3CR_DEEPSLEEP_Msk               (0x1U << PWR_CPU3CR_DEEPSLEEP_Pos)
#define PWR_CPU3CR_DEEPSLEEP                   PWR_CPU3CR_DEEPSLEEP_Msk  /*!< CPU3 system idle indication.This bit is set and reset by HW based on the CPU3 operation mode.- 0: CPU3 active.- 1: CPU3 idle. */

/* Bit fields for PWR_D1CR register */
#define PWR_D1CR_LPCFG_D1_Pos                  (0U)
#define PWR_D1CR_LPCFG_D1_Msk                  (0x1U << PWR_D1CR_LPCFG_D1_Pos)
#define PWR_D1CR_LPCFG_D1                      PWR_D1CR_LPCFG_D1_Msk  /*!< PWR_CPU_ON pin configuration.- 0: PWR_CPU_ON pin signals DStandby mode (PWR_CPU_ON =1 in DRun, DStop1/2/3, and 0 in DStandby). (pwr_cpu_on)- 1: PWR_CPU_ON pin signals DStandby &amp;amp; DStop2/3 modes (PWR_CPU_ON = 1 in DRun, DStop1, and 0 in DStop2/3 and DStandby). (pwr_cpu_onlp) */
#define PWR_D1CR_POPL_D1_Pos                   (8U)
#define PWR_D1CR_POPL_D1_Msk                   (0x1fU << PWR_D1CR_POPL_D1_Pos)
#define PWR_D1CR_POPL_D1                       PWR_D1CR_POPL_D1_Msk  /*!< pwr_cpu_on pulse low configuration.These bits are set and cleared by software. They define the minimum guaranteed duration of the pwr_cpu_on low pulse in DStandby mode. (There is no impact on the DSTOP2/3 modes).The LSI oscillator is automatically enabled when needed by the POPL_D1 pulse low configuration.- 00000: No guaranteed minimum low time.- 00001: ~ 1 ms guaranteed minimum low time. (1 x 32 LSI cycles)- 00010: ~ 2 ms guaranteed minimum low time. (2 x 32 LSI cycles)...- 11111: ~ 31 ms guaranteed minimum low time. (31 x 32 LSI cycles) */

/* Bit fields for PWR_D2CR register */
#define PWR_D2CR_LPCFG_D2_Pos                  (0U)
#define PWR_D2CR_LPCFG_D2_Msk                  (0x1U << PWR_D2CR_LPCFG_D2_Pos)
#define PWR_D2CR_LPCFG_D2                      PWR_D2CR_LPCFG_D2_Msk  /*!< PWR_ON pin configuration.- 0: PWR_ON pin signals Standby modes (PWR_ON =1 in Run, Stop1/2, LP-Stop1/2, LPLV-Stop1/2, and 0 in Standby1/2). (pwr_on)- 1: PWR_ON pin signals Standby &amp;amp; LP-Stop, LPLV-Stop modes (PWR_ CPU_ON = 1 in Run, Stop1/2, and 0 in LP-Stop1/2, LPLV-Stop1/2 and Standby1/2). (pwr_onlp) */
#define PWR_D2CR_POPL_D2_Pos                   (8U)
#define PWR_D2CR_POPL_D2_Msk                   (0x1fU << PWR_D2CR_POPL_D2_Pos)
#define PWR_D2CR_POPL_D2                       PWR_D2CR_POPL_D2_Msk  /*!< pwr_on pulse low configuration.These bits are set and cleared by software. They define the minimum guaranteed duration of the pwr_on low pulse in Standby mode. (There is no impact on the LP-Stop and LPLV-Stop modes).The LSI oscillator is automatically enabled when needed by the POPL_D2 pulse low configuration.- 00000: No guaranteed minimum low time.- 00001: ~ 1 ms guaranteed minimum low time. (1 x 32 LSI cycles)- 00010: ~ 2 ms guaranteed minimum low time. (2 x 32 LSI cycles)...- 11111: ~ 31 ms guaranteed minimum low time. (31 x 32 LSI cycles) */

/* Bit fields for PWR_D3CR register */
#define PWR_D3CR_PDDS_D3_Pos                   (0U)
#define PWR_D3CR_PDDS_D3_Msk                   (0x1U << PWR_D3CR_PDDS_D3_Pos)
#define PWR_D3CR_PDDS_D3                       PWR_D3CR_PDDS_D3_Msk  /*!< D3 domain Power Down Deepsleep selection. This bit has only effect when the EN_D3 bit is not set.- 0: Keep SStop mode when system enters to Standby.- 1: Allow SStandby mode when system enters to Standby. */
#if defined (STM32MP2XX_ASSY2_2_1)
#define PWR_D3CR_EN_D3_Pos                     (4U)
#define PWR_D3CR_EN_D3_Msk                     (0x1U << PWR_D3CR_EN_D3_Pos)
#define PWR_D3CR_EN_D3                         PWR_D3CR_EN_D3_Msk  /*!< Enable D3 domain. When set, the D3 domain can be used whatever the low power mode. When reset, the supply of the D3 domain will be switched off in VBAT mode. It could be still used in Run and Standby modes when the PDDS_D3 = â0â.- 0: D3 domain disabled in VBAT mode.- 1: D3 domain always enabled (Run, Stop, Standby and VBAT modes). */
#define PWR_D3CR_DEEPSLEEP_Pos                 (15U)
#define PWR_D3CR_DEEPSLEEP_Msk                 (0x1U << PWR_D3CR_DEEPSLEEP_Pos)
#define PWR_D3CR_DEEPSLEEP                     PWR_D3CR_DEEPSLEEP_Msk  /*!< CPU3 system idle indication.This bit is set and reset by HW based on the CPU3 operation mode.- 0: CPU3 active.- 1: CPU3 idle. */
#endif /*STM32MP2XX_ASSY2_2_1*/
#define PWR_D3CR_D3RDY_Pos                     (31U)
#define PWR_D3CR_D3RDY_Msk                     (0x1U << PWR_D3CR_D3RDY_Pos)
#define PWR_D3CR_D3RDY                         PWR_D3CR_D3RDY_Msk  /*!< D3 domain supply ready.This bit is set when the domain is accessible- 0: D3 domain not ready- 1: D3 domain ready. */

/* Bit fields for PWR_WKUPCR1 register */
#define PWR_WKUPCR1_WKUPC_Pos                  (0U)
#define PWR_WKUPCR1_WKUPC_Msk                  (0x1U << PWR_WKUPCR1_WKUPC_Pos)
#define PWR_WKUPCR1_WKUPC                      PWR_WKUPCR1_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR1_WKUPP_Pos                  (8U)
#define PWR_WKUPCR1_WKUPP_Msk                  (0x1U << PWR_WKUPCR1_WKUPP_Pos)
#define PWR_WKUPCR1_WKUPP                      PWR_WKUPCR1_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR1_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR1_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR1_WKUPPUPD_Pos)
#define PWR_WKUPCR1_WKUPPUPD                   PWR_WKUPCR1_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR1_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR1_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR1_WKUPENCPU1_Pos)
#define PWR_WKUPCR1_WKUPENCPU1                 PWR_WKUPCR1_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR1_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR1_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR1_WKUPENCPU2_Pos)
#define PWR_WKUPCR1_WKUPENCPU2                 PWR_WKUPCR1_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR1_WKUPF_Pos                  (31U)
#define PWR_WKUPCR1_WKUPF_Msk                  (0x1U << PWR_WKUPCR1_WKUPF_Pos)
#define PWR_WKUPCR1_WKUPF                      PWR_WKUPCR1_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR2 register */
#define PWR_WKUPCR2_WKUPC_Pos                  (0U)
#define PWR_WKUPCR2_WKUPC_Msk                  (0x1U << PWR_WKUPCR2_WKUPC_Pos)
#define PWR_WKUPCR2_WKUPC                      PWR_WKUPCR2_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR2_WKUPP_Pos                  (8U)
#define PWR_WKUPCR2_WKUPP_Msk                  (0x1U << PWR_WKUPCR2_WKUPP_Pos)
#define PWR_WKUPCR2_WKUPP                      PWR_WKUPCR2_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR2_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR2_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR2_WKUPPUPD_Pos)
#define PWR_WKUPCR2_WKUPPUPD                   PWR_WKUPCR2_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR2_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR2_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR2_WKUPENCPU1_Pos)
#define PWR_WKUPCR2_WKUPENCPU1                 PWR_WKUPCR2_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR2_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR2_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR2_WKUPENCPU2_Pos)
#define PWR_WKUPCR2_WKUPENCPU2                 PWR_WKUPCR2_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR2_WKUPF_Pos                  (31U)
#define PWR_WKUPCR2_WKUPF_Msk                  (0x1U << PWR_WKUPCR2_WKUPF_Pos)
#define PWR_WKUPCR2_WKUPF                      PWR_WKUPCR2_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR3 register */
#define PWR_WKUPCR3_WKUPC_Pos                  (0U)
#define PWR_WKUPCR3_WKUPC_Msk                  (0x1U << PWR_WKUPCR3_WKUPC_Pos)
#define PWR_WKUPCR3_WKUPC                      PWR_WKUPCR3_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR3_WKUPP_Pos                  (8U)
#define PWR_WKUPCR3_WKUPP_Msk                  (0x1U << PWR_WKUPCR3_WKUPP_Pos)
#define PWR_WKUPCR3_WKUPP                      PWR_WKUPCR3_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR3_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR3_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR3_WKUPPUPD_Pos)
#define PWR_WKUPCR3_WKUPPUPD                   PWR_WKUPCR3_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR3_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR3_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR3_WKUPENCPU1_Pos)
#define PWR_WKUPCR3_WKUPENCPU1                 PWR_WKUPCR3_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR3_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR3_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR3_WKUPENCPU2_Pos)
#define PWR_WKUPCR3_WKUPENCPU2                 PWR_WKUPCR3_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR3_WKUPF_Pos                  (31U)
#define PWR_WKUPCR3_WKUPF_Msk                  (0x1U << PWR_WKUPCR3_WKUPF_Pos)
#define PWR_WKUPCR3_WKUPF                      PWR_WKUPCR3_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR4 register */
#define PWR_WKUPCR4_WKUPC_Pos                  (0U)
#define PWR_WKUPCR4_WKUPC_Msk                  (0x1U << PWR_WKUPCR4_WKUPC_Pos)
#define PWR_WKUPCR4_WKUPC                      PWR_WKUPCR4_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR4_WKUPP_Pos                  (8U)
#define PWR_WKUPCR4_WKUPP_Msk                  (0x1U << PWR_WKUPCR4_WKUPP_Pos)
#define PWR_WKUPCR4_WKUPP                      PWR_WKUPCR4_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR4_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR4_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR4_WKUPPUPD_Pos)
#define PWR_WKUPCR4_WKUPPUPD                   PWR_WKUPCR4_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR4_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR4_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR4_WKUPENCPU1_Pos)
#define PWR_WKUPCR4_WKUPENCPU1                 PWR_WKUPCR4_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR4_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR4_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR4_WKUPENCPU2_Pos)
#define PWR_WKUPCR4_WKUPENCPU2                 PWR_WKUPCR4_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR4_WKUPF_Pos                  (31U)
#define PWR_WKUPCR4_WKUPF_Msk                  (0x1U << PWR_WKUPCR4_WKUPF_Pos)
#define PWR_WKUPCR4_WKUPF                      PWR_WKUPCR4_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR5 register */
#define PWR_WKUPCR5_WKUPC_Pos                  (0U)
#define PWR_WKUPCR5_WKUPC_Msk                  (0x1U << PWR_WKUPCR5_WKUPC_Pos)
#define PWR_WKUPCR5_WKUPC                      PWR_WKUPCR5_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR5_WKUPP_Pos                  (8U)
#define PWR_WKUPCR5_WKUPP_Msk                  (0x1U << PWR_WKUPCR5_WKUPP_Pos)
#define PWR_WKUPCR5_WKUPP                      PWR_WKUPCR5_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR5_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR5_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR5_WKUPPUPD_Pos)
#define PWR_WKUPCR5_WKUPPUPD                   PWR_WKUPCR5_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR5_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR5_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR5_WKUPENCPU1_Pos)
#define PWR_WKUPCR5_WKUPENCPU1                 PWR_WKUPCR5_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR5_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR5_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR5_WKUPENCPU2_Pos)
#define PWR_WKUPCR5_WKUPENCPU2                 PWR_WKUPCR5_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR5_WKUPF_Pos                  (31U)
#define PWR_WKUPCR5_WKUPF_Msk                  (0x1U << PWR_WKUPCR5_WKUPF_Pos)
#define PWR_WKUPCR5_WKUPF                      PWR_WKUPCR5_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR6 register */
#define PWR_WKUPCR6_WKUPC_Pos                  (0U)
#define PWR_WKUPCR6_WKUPC_Msk                  (0x1U << PWR_WKUPCR6_WKUPC_Pos)
#define PWR_WKUPCR6_WKUPC                      PWR_WKUPCR6_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR6_WKUPP_Pos                  (8U)
#define PWR_WKUPCR6_WKUPP_Msk                  (0x1U << PWR_WKUPCR6_WKUPP_Pos)
#define PWR_WKUPCR6_WKUPP                      PWR_WKUPCR6_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR6_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR6_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR6_WKUPPUPD_Pos)
#define PWR_WKUPCR6_WKUPPUPD                   PWR_WKUPCR6_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR6_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR6_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR6_WKUPENCPU1_Pos)
#define PWR_WKUPCR6_WKUPENCPU1                 PWR_WKUPCR6_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR6_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR6_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR6_WKUPENCPU2_Pos)
#define PWR_WKUPCR6_WKUPENCPU2                 PWR_WKUPCR6_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR6_WKUPF_Pos                  (31U)
#define PWR_WKUPCR6_WKUPF_Msk                  (0x1U << PWR_WKUPCR6_WKUPF_Pos)
#define PWR_WKUPCR6_WKUPF                      PWR_WKUPCR6_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_D3WKUPENR register */
#define PWR_D3WKUPENR_TAMP_WKUPEN_D3_Pos       (0U)
#define PWR_D3WKUPENR_TAMP_WKUPEN_D3_Msk       (0x1U << PWR_D3WKUPENR_TAMP_WKUPEN_D3_Pos)
#define PWR_D3WKUPENR_TAMP_WKUPEN_D3           PWR_D3WKUPENR_TAMP_WKUPEN_D3_Msk  /*!< Enable Wakeup pin for D3 domain in VBAT mode.The bit is set and cleared by software.- 0: A tamper event on D3WKUP pin does not wakeup the D3 domain from SStandby in VBAT mode.- 1: A rising or falling edge on D3WKUP pin wakes-up the D3 domain from SStandby in VBAT mode. */

/* Bit fields for PWR_RSECCFGR register */
#define PWR_RSECCFGR_RSEC0_Pos                 (0U)
#define PWR_RSECCFGR_RSEC0_Msk                 (0x1U << PWR_RSECCFGR_RSEC0_Pos)
#define PWR_RSECCFGR_RSEC0                     PWR_RSECCFGR_RSEC0_Msk  /*!< Secure attribute reference for the local resource number x (x = 0)These bits are written by software to enabled the secure mode for the local resource x.- 0: The local resource number x is non-secure. Secure access is also possible.- 1: The local resource number x is secure only.This bit can only be written by secure application. If corresponding PRIVx bit is set in PWR_RPRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this local resource is enabled by setting CFEN bit in PWR_RxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction. */
#define PWR_RSECCFGR_RSEC1_Pos                 (1U)
#define PWR_RSECCFGR_RSEC1_Msk                 (0x1U << PWR_RSECCFGR_RSEC1_Pos)
#define PWR_RSECCFGR_RSEC1                     PWR_RSECCFGR_RSEC1_Msk  /*!< Secure attribute reference for the local resource number x (x = 1)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC2_Pos                 (2U)
#define PWR_RSECCFGR_RSEC2_Msk                 (0x1U << PWR_RSECCFGR_RSEC2_Pos)
#define PWR_RSECCFGR_RSEC2                     PWR_RSECCFGR_RSEC2_Msk  /*!< Secure attribute reference for the local resource number x (x = 2)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC3_Pos                 (3U)
#define PWR_RSECCFGR_RSEC3_Msk                 (0x1U << PWR_RSECCFGR_RSEC3_Pos)
#define PWR_RSECCFGR_RSEC3                     PWR_RSECCFGR_RSEC3_Msk  /*!< Secure attribute reference for the local resource number x (x = 3)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC4_Pos                 (4U)
#define PWR_RSECCFGR_RSEC4_Msk                 (0x1U << PWR_RSECCFGR_RSEC4_Pos)
#define PWR_RSECCFGR_RSEC4                     PWR_RSECCFGR_RSEC4_Msk  /*!< Secure attribute reference for the local resource number x (x = 4)See RSEC0 for details. */

/* Bit fields for PWR_RPRIVCFGR register */
#define PWR_RPRIVCFGR_RPRIV0_Pos               (0U)
#define PWR_RPRIVCFGR_RPRIV0_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV0_Pos)
#define PWR_RPRIVCFGR_RPRIV0                   PWR_RPRIVCFGR_RPRIV0_Msk  /*!< Privileged attribute reference for the local resource number x (x = 0)These bits are written by software to enabled the privileged mode for the local resource x.- 0: The local resource number x is unprivileged. Secure access is also possible.- 1: The local resource number x is privileged only.This bit can only be written by privileged application. If corresponding SECx bit is set in PWR_RSECCFGR this bit can only be written by secure privileged application.If compartment filtering for this local resource is enabled by setting CFEN bit in PWR_RxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction. */
#define PWR_RPRIVCFGR_RPRIV1_Pos               (1U)
#define PWR_RPRIVCFGR_RPRIV1_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV1_Pos)
#define PWR_RPRIVCFGR_RPRIV1                   PWR_RPRIVCFGR_RPRIV1_Msk  /*!< Privileged attribute reference for the local resource number x (x = 1)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV2_Pos               (2U)
#define PWR_RPRIVCFGR_RPRIV2_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV2_Pos)
#define PWR_RPRIVCFGR_RPRIV2                   PWR_RPRIVCFGR_RPRIV2_Msk  /*!< Privileged attribute reference for the local resource number x (x = 2)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV3_Pos               (3U)
#define PWR_RPRIVCFGR_RPRIV3_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV3_Pos)
#define PWR_RPRIVCFGR_RPRIV3                   PWR_RPRIVCFGR_RPRIV3_Msk  /*!< Privileged attribute reference for the local resource number x (x = 3)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV4_Pos               (4U)
#define PWR_RPRIVCFGR_RPRIV4_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV4_Pos)
#define PWR_RPRIVCFGR_RPRIV4                   PWR_RPRIVCFGR_RPRIV4_Msk  /*!< Privileged attribute reference for the local resource number x (x = 4)See RPRIV0 for details. */

/* Bit fields for PWR_R0CIDCFGR register */
#define PWR_R0CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R0CIDCFGR_CFEN_Msk                 (0x1U << PWR_R0CIDCFGR_CFEN_Pos)
#define PWR_R0CIDCFGR_CFEN                     PWR_R0CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R0CIDCFGR_CID_Pos                  (4U)
#define PWR_R0CIDCFGR_CID_Msk                  (0x7U << PWR_R0CIDCFGR_CID_Pos)
#define PWR_R0CIDCFGR_CID                      PWR_R0CIDCFGR_CID_Msk  /*!< Compartment identifierWhen CFEN=1, this field is used by the Trusted domain application to define which compartment has access to the local resource number x. */
#define PWR_R0CIDCFGR_PRDEN_Pos                (14U)
#define PWR_R0CIDCFGR_PRDEN_Msk                (0x1U << PWR_R0CIDCFGR_PRDEN_Pos)
#define PWR_R0CIDCFGR_PRDEN                    PWR_R0CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to local resource x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read local resource x registers, regardless of secure or privilege. Write to local resource x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */

/* Bit fields for PWR_R1CIDCFGR register */
#define PWR_R1CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R1CIDCFGR_CFEN_Msk                 (0x1U << PWR_R1CIDCFGR_CFEN_Pos)
#define PWR_R1CIDCFGR_CFEN                     PWR_R1CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R1CIDCFGR_CID_Pos                  (4U)
#define PWR_R1CIDCFGR_CID_Msk                  (0x7U << PWR_R1CIDCFGR_CID_Pos)
#define PWR_R1CIDCFGR_CID                      PWR_R1CIDCFGR_CID_Msk  /*!< Compartment identifierWhen CFEN=1, this field is used by the Trusted domain application to define which compartment has access to the local resource number x. */
#define PWR_R1CIDCFGR_PRDEN_Pos                (14U)
#define PWR_R1CIDCFGR_PRDEN_Msk                (0x1U << PWR_R1CIDCFGR_PRDEN_Pos)
#define PWR_R1CIDCFGR_PRDEN                    PWR_R1CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to local resource x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read local resource x registers, regardless of secure or privilege. Write to local resource x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */

/* Bit fields for PWR_R2CIDCFGR register */
#define PWR_R2CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R2CIDCFGR_CFEN_Msk                 (0x1U << PWR_R2CIDCFGR_CFEN_Pos)
#define PWR_R2CIDCFGR_CFEN                     PWR_R2CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R2CIDCFGR_CID_Pos                  (4U)
#define PWR_R2CIDCFGR_CID_Msk                  (0x7U << PWR_R2CIDCFGR_CID_Pos)
#define PWR_R2CIDCFGR_CID                      PWR_R2CIDCFGR_CID_Msk  /*!< Compartment identifierWhen CFEN=1, this field is used by the Trusted domain application to define which compartment has access to the local resource number x. */
#define PWR_R2CIDCFGR_PRDEN_Pos                (14U)
#define PWR_R2CIDCFGR_PRDEN_Msk                (0x1U << PWR_R2CIDCFGR_PRDEN_Pos)
#define PWR_R2CIDCFGR_PRDEN                    PWR_R2CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to local resource x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read local resource x registers, regardless of secure or privilege. Write to local resource x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */

/* Bit fields for PWR_R3CIDCFGR register */
#define PWR_R3CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R3CIDCFGR_CFEN_Msk                 (0x1U << PWR_R3CIDCFGR_CFEN_Pos)
#define PWR_R3CIDCFGR_CFEN                     PWR_R3CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R3CIDCFGR_CID_Pos                  (4U)
#define PWR_R3CIDCFGR_CID_Msk                  (0x7U << PWR_R3CIDCFGR_CID_Pos)
#define PWR_R3CIDCFGR_CID                      PWR_R3CIDCFGR_CID_Msk  /*!< Compartment identifierWhen CFEN=1, this field is used by the Trusted domain application to define which compartment has access to the local resource number x. */
#define PWR_R3CIDCFGR_PRDEN_Pos                (14U)
#define PWR_R3CIDCFGR_PRDEN_Msk                (0x1U << PWR_R3CIDCFGR_PRDEN_Pos)
#define PWR_R3CIDCFGR_PRDEN                    PWR_R3CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to local resource x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read local resource x registers, regardless of secure or privilege. Write to local resource x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */

/* Bit fields for PWR_R4CIDCFGR register */
#define PWR_R4CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R4CIDCFGR_CFEN_Msk                 (0x1U << PWR_R4CIDCFGR_CFEN_Pos)
#define PWR_R4CIDCFGR_CFEN                     PWR_R4CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R4CIDCFGR_CID_Pos                  (4U)
#define PWR_R4CIDCFGR_CID_Msk                  (0x7U << PWR_R4CIDCFGR_CID_Pos)
#define PWR_R4CIDCFGR_CID                      PWR_R4CIDCFGR_CID_Msk  /*!< Compartment identifierWhen CFEN=1, this field is used by the Trusted domain application to define which compartment has access to the local resource number x. */
#define PWR_R4CIDCFGR_PRDEN_Pos                (14U)
#define PWR_R4CIDCFGR_PRDEN_Msk                (0x1U << PWR_R4CIDCFGR_PRDEN_Pos)
#define PWR_R4CIDCFGR_PRDEN                    PWR_R4CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to local resource x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read local resource x registers, regardless of secure or privilege. Write to local resource x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */

/* Bit fields for PWR_WIOSECCFGR register */
#define PWR_WIOSECCFGR_WIOSEC1_Pos             (0U)
#define PWR_WIOSECCFGR_WIOSEC1_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC1_Pos)
#define PWR_WIOSECCFGR_WIOSEC1                 PWR_WIOSECCFGR_WIOSEC1_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 1)These bits are written by software to enabled the secure mode for the wakeup IO x.- 0: The wakeup IO x is non-secure. Secure access is also possible.- 1: The wakeup IO x is secure only.This bit can only be written by secure application. If corresponding PRIVx bit is set in PWR_WIOPRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this Wakeup IO is enabled by setting CFEN bit in PWR_WIOxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction.Authorized compartment value depends on the value of SEM_EN bit in PWR_WIOxCIDCFGR and optionally the SEM_MUTEX bit in PWR_WIOxSEMCR. */
#define PWR_WIOSECCFGR_WIOSEC2_Pos             (1U)
#define PWR_WIOSECCFGR_WIOSEC2_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC2_Pos)
#define PWR_WIOSECCFGR_WIOSEC2                 PWR_WIOSECCFGR_WIOSEC2_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 2)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC3_Pos             (2U)
#define PWR_WIOSECCFGR_WIOSEC3_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC3_Pos)
#define PWR_WIOSECCFGR_WIOSEC3                 PWR_WIOSECCFGR_WIOSEC3_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 3)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC4_Pos             (3U)
#define PWR_WIOSECCFGR_WIOSEC4_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC4_Pos)
#define PWR_WIOSECCFGR_WIOSEC4                 PWR_WIOSECCFGR_WIOSEC4_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 4)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC5_Pos             (4U)
#define PWR_WIOSECCFGR_WIOSEC5_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC5_Pos)
#define PWR_WIOSECCFGR_WIOSEC5                 PWR_WIOSECCFGR_WIOSEC5_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 5)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC6_Pos             (5U)
#define PWR_WIOSECCFGR_WIOSEC6_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC6_Pos)
#define PWR_WIOSECCFGR_WIOSEC6                 PWR_WIOSECCFGR_WIOSEC6_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 6)See WIOSEC1 for details. */

/* Bit fields for PWR_WIOPRIVCFGR register */
#define PWR_WIOPRIVCFGR_WIOPRIV1_Pos           (0U)
#define PWR_WIOPRIVCFGR_WIOPRIV1_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV1_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV1               PWR_WIOPRIVCFGR_WIOPRIV1_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 1)These bits are written by software to enabled the privileged mode for the Wakeup IO x.- 0: The Wakeup IO x is unprivileged. Privileged access is also possible.- 1: The Wakeup IO x is privileged only.This bit can only be written by privileged application. If corresponding SECx bit is set in PWR_WIOSECCFGR this bit can only be written by secure privileged application.If compartment filtering for this Wakeup IO is enabled by setting CFEN bit in PWR_WIOxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction.Authorized compartment value depends on the value of SEM_EN bit in PWR_WIOxCIDCFGR and optionally the SEM_MUTEX bit in PWR_WIOxSEMCR. */
#define PWR_WIOPRIVCFGR_WIOPRIV2_Pos           (1U)
#define PWR_WIOPRIVCFGR_WIOPRIV2_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV2_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV2               PWR_WIOPRIVCFGR_WIOPRIV2_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 2)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV3_Pos           (2U)
#define PWR_WIOPRIVCFGR_WIOPRIV3_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV3_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV3               PWR_WIOPRIVCFGR_WIOPRIV3_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 3)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV4_Pos           (3U)
#define PWR_WIOPRIVCFGR_WIOPRIV4_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV4_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV4               PWR_WIOPRIVCFGR_WIOPRIV4_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 4)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV5_Pos           (4U)
#define PWR_WIOPRIVCFGR_WIOPRIV5_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV5_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV5               PWR_WIOPRIVCFGR_WIOPRIV5_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 5)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV6_Pos           (5U)
#define PWR_WIOPRIVCFGR_WIOPRIV6_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV6_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV6               PWR_WIOPRIVCFGR_WIOPRIV6_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 6)See WIOPRIV1 for details. */

/* Bit fields for PWR_WIO1CIDCFGR register */
#define PWR_WIO1CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO1CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO1CIDCFGR_CFEN_Pos)
#define PWR_WIO1CIDCFGR_CFEN                   PWR_WIO1CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO1CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO1CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO1CIDCFGR_SEM_EN_Pos)
#define PWR_WIO1CIDCFGR_SEM_EN                 PWR_WIO1CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO1CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO1CIDCFGR_SCID_Msk               (0x7U << PWR_WIO1CIDCFGR_SCID_Pos)
#define PWR_WIO1CIDCFGR_SCID                   PWR_WIO1CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO1CIDCFGR_PRDEN_Pos              (14U)
#define PWR_WIO1CIDCFGR_PRDEN_Msk              (0x1U << PWR_WIO1CIDCFGR_PRDEN_Pos)
#define PWR_WIO1CIDCFGR_PRDEN                  PWR_WIO1CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to Wakeup IO x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read Wakeup IO x registers, regardless of secure or privilege. Write to Wakeup IO x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */
#define PWR_WIO1CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO1CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC0                PWR_WIO1CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO1CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC1                PWR_WIO1CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO1CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC2                PWR_WIO1CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO1CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC3                PWR_WIO1CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO1CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC4                PWR_WIO1CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO1CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC5                PWR_WIO1CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO1CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC6                PWR_WIO1CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO1CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC7                PWR_WIO1CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO1SEMCR register */
#define PWR_WIO1SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO1SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO1SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO1SEMCR_SEM_MUTEX                PWR_WIO1SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO1SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO1SEMCR_SEMCID_Msk               (0x7U << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID                   PWR_WIO1SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO2CIDCFGR register */
#define PWR_WIO2CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO2CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO2CIDCFGR_CFEN_Pos)
#define PWR_WIO2CIDCFGR_CFEN                   PWR_WIO2CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO2CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO2CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO2CIDCFGR_SEM_EN_Pos)
#define PWR_WIO2CIDCFGR_SEM_EN                 PWR_WIO2CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO2CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO2CIDCFGR_SCID_Msk               (0x7U << PWR_WIO2CIDCFGR_SCID_Pos)
#define PWR_WIO2CIDCFGR_SCID                   PWR_WIO2CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO2CIDCFGR_PRDEN_Pos              (14U)
#define PWR_WIO2CIDCFGR_PRDEN_Msk              (0x1U << PWR_WIO2CIDCFGR_PRDEN_Pos)
#define PWR_WIO2CIDCFGR_PRDEN                  PWR_WIO2CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to Wakeup IO x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read Wakeup IO x registers, regardless of secure or privilege. Write to Wakeup IO x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */
#define PWR_WIO2CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO2CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC0                PWR_WIO2CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO2CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC1                PWR_WIO2CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO2CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC2                PWR_WIO2CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO2CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC3                PWR_WIO2CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO2CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC4                PWR_WIO2CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO2CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC5                PWR_WIO2CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO2CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC6                PWR_WIO2CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO2CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC7                PWR_WIO2CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO2SEMCR register */
#define PWR_WIO2SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO2SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO2SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO2SEMCR_SEM_MUTEX                PWR_WIO2SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO2SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO2SEMCR_SEMCID_Msk               (0x7U << PWR_WIO2SEMCR_SEMCID_Pos)
#define PWR_WIO2SEMCR_SEMCID                   PWR_WIO2SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO3CIDCFGR register */
#define PWR_WIO3CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO3CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO3CIDCFGR_CFEN_Pos)
#define PWR_WIO3CIDCFGR_CFEN                   PWR_WIO3CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO3CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO3CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO3CIDCFGR_SEM_EN_Pos)
#define PWR_WIO3CIDCFGR_SEM_EN                 PWR_WIO3CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO3CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO3CIDCFGR_SCID_Msk               (0x7U << PWR_WIO3CIDCFGR_SCID_Pos)
#define PWR_WIO3CIDCFGR_SCID                   PWR_WIO3CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO3CIDCFGR_PRDEN_Pos              (14U)
#define PWR_WIO3CIDCFGR_PRDEN_Msk              (0x1U << PWR_WIO3CIDCFGR_PRDEN_Pos)
#define PWR_WIO3CIDCFGR_PRDEN                  PWR_WIO3CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to Wakeup IO x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read Wakeup IO x registers, regardless of secure or privilege. Write to Wakeup IO x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */
#define PWR_WIO3CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO3CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC0                PWR_WIO3CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO3CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC1                PWR_WIO3CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO3CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC2                PWR_WIO3CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO3CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC3                PWR_WIO3CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO3CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC4                PWR_WIO3CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO3CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC5                PWR_WIO3CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO3CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC6                PWR_WIO3CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO3CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC7                PWR_WIO3CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO3SEMCR register */
#define PWR_WIO3SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO3SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO3SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO3SEMCR_SEM_MUTEX                PWR_WIO3SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO3SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO3SEMCR_SEMCID_Msk               (0x7U << PWR_WIO3SEMCR_SEMCID_Pos)
#define PWR_WIO3SEMCR_SEMCID                   PWR_WIO3SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO4CIDCFGR register */
#define PWR_WIO4CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO4CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO4CIDCFGR_CFEN_Pos)
#define PWR_WIO4CIDCFGR_CFEN                   PWR_WIO4CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO4CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO4CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO4CIDCFGR_SEM_EN_Pos)
#define PWR_WIO4CIDCFGR_SEM_EN                 PWR_WIO4CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO4CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO4CIDCFGR_SCID_Msk               (0x7U << PWR_WIO4CIDCFGR_SCID_Pos)
#define PWR_WIO4CIDCFGR_SCID                   PWR_WIO4CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO4CIDCFGR_PRDEN_Pos              (14U)
#define PWR_WIO4CIDCFGR_PRDEN_Msk              (0x1U << PWR_WIO4CIDCFGR_PRDEN_Pos)
#define PWR_WIO4CIDCFGR_PRDEN                  PWR_WIO4CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to Wakeup IO x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read Wakeup IO x registers, regardless of secure or privilege. Write to Wakeup IO x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */
#define PWR_WIO4CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO4CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC0                PWR_WIO4CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO4CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC1                PWR_WIO4CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO4CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC2                PWR_WIO4CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO4CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC3                PWR_WIO4CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO4CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC4                PWR_WIO4CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO4CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC5                PWR_WIO4CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO4CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC6                PWR_WIO4CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO4CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC7                PWR_WIO4CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO4SEMCR register */
#define PWR_WIO4SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO4SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO4SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO4SEMCR_SEM_MUTEX                PWR_WIO4SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO4SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO4SEMCR_SEMCID_Msk               (0x7U << PWR_WIO4SEMCR_SEMCID_Pos)
#define PWR_WIO4SEMCR_SEMCID                   PWR_WIO4SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO5CIDCFGR register */
#define PWR_WIO5CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO5CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO5CIDCFGR_CFEN_Pos)
#define PWR_WIO5CIDCFGR_CFEN                   PWR_WIO5CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO5CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO5CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO5CIDCFGR_SEM_EN_Pos)
#define PWR_WIO5CIDCFGR_SEM_EN                 PWR_WIO5CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO5CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO5CIDCFGR_SCID_Msk               (0x7U << PWR_WIO5CIDCFGR_SCID_Pos)
#define PWR_WIO5CIDCFGR_SCID                   PWR_WIO5CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO5CIDCFGR_PRDEN_Pos              (14U)
#define PWR_WIO5CIDCFGR_PRDEN_Msk              (0x1U << PWR_WIO5CIDCFGR_PRDEN_Pos)
#define PWR_WIO5CIDCFGR_PRDEN                  PWR_WIO5CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to Wakeup IO x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read Wakeup IO x registers, regardless of secure or privilege. Write to Wakeup IO x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */
#define PWR_WIO5CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO5CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC0                PWR_WIO5CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO5CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC1                PWR_WIO5CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO5CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC2                PWR_WIO5CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO5CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC3                PWR_WIO5CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO5CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC4                PWR_WIO5CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO5CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC5                PWR_WIO5CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO5CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC6                PWR_WIO5CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO5CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC7                PWR_WIO5CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO5SEMCR register */
#define PWR_WIO5SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO5SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO5SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO5SEMCR_SEM_MUTEX                PWR_WIO5SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO5SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO5SEMCR_SEMCID_Msk               (0x7U << PWR_WIO5SEMCR_SEMCID_Pos)
#define PWR_WIO5SEMCR_SEMCID                   PWR_WIO5SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO6CIDCFGR register */
#define PWR_WIO6CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO6CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO6CIDCFGR_CFEN_Pos)
#define PWR_WIO6CIDCFGR_CFEN                   PWR_WIO6CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO6CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO6CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO6CIDCFGR_SEM_EN_Pos)
#define PWR_WIO6CIDCFGR_SEM_EN                 PWR_WIO6CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO6CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO6CIDCFGR_SCID_Msk               (0x7U << PWR_WIO6CIDCFGR_SCID_Pos)
#define PWR_WIO6CIDCFGR_SCID                   PWR_WIO6CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO6CIDCFGR_PRDEN_Pos              (14U)
#define PWR_WIO6CIDCFGR_PRDEN_Msk              (0x1U << PWR_WIO6CIDCFGR_PRDEN_Pos)
#define PWR_WIO6CIDCFGR_PRDEN                  PWR_WIO6CIDCFGR_PRDEN_Msk  /*!< Public read enable- 0: Read and write accesses to Wakeup IO x are granted only to allocated compartment, if security and privilege are sufficient.- 1: Any compartment can read Wakeup IO x registers, regardless of secure or privilege. Write to Wakeup IO x registers are only granted to allocated compartment, if security and privilege are sufficient.This bit is ignored if CFEN=0. */
#define PWR_WIO6CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO6CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC0                PWR_WIO6CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO6CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC1                PWR_WIO6CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO6CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC2                PWR_WIO6CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO6CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC3                PWR_WIO6CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO6CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC4                PWR_WIO6CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO6CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC5                PWR_WIO6CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO6CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC6                PWR_WIO6CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO6CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC7                PWR_WIO6CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO6SEMCR register */
#define PWR_WIO6SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO6SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO6SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO6SEMCR_SEM_MUTEX                PWR_WIO6SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO6SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO6SEMCR_SEMCID_Msk               (0x7U << PWR_WIO6SEMCR_SEMCID_Pos)
#define PWR_WIO6SEMCR_SEMCID                   PWR_WIO6SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_CPU1D1SR register */
#define PWR_CPU1D1SR_HOLD_BOOT_Pos             (0U)
#define PWR_CPU1D1SR_HOLD_BOOT_Msk             (0x1U << PWR_CPU1D1SR_HOLD_BOOT_Pos)
#define PWR_CPU1D1SR_HOLD_BOOT                 PWR_CPU1D1SR_HOLD_BOOT_Msk  /*!< CPU1 HOLD_BOOT status flag.Set by hardware to indicate when the CPU1 is in HOLD_BOOT state.- 0: CPU1 is allowed to boot.- 1: CPU1 is maintained in HOLD_BOOT state by hardware.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU1D1SR_WFBEN_Pos                 (1U)
#define PWR_CPU1D1SR_WFBEN_Msk                 (0x1U << PWR_CPU1D1SR_WFBEN_Pos)
#define PWR_CPU1D1SR_WFBEN                     PWR_CPU1D1SR_WFBEN_Msk  /*!< CPU1 Wait for boot enable status flag.Set by hardware to indicate when the CPU1 is in wait for boot enable state. Only applicable in Wakeup event mode.- 0: CPU1 is not in wait for boot enable state. Set at â0â in legacy boot mode.- 1: CPU1 is in wait for boot enable state. It will start once an event assign to him will be raised.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU1D1SR_CSTATE_Pos                (2U)
#define PWR_CPU1D1SR_CSTATE_Msk                (0x3U << PWR_CPU1D1SR_CSTATE_Pos)
#define PWR_CPU1D1SR_CSTATE                    PWR_CPU1D1SR_CSTATE_Msk  /*!< CPU1 cluster state status.Set by hardware to indicate when the CPU1 is in CRun, CSleep or CStop modes.- 00: CPU1 is in reset (Hold_boot or Wfben).- 01: CPU1 is in CRun state.- 10: CPU1 is in CSleep state.- 11: CPU1 is in CStop state. */
#define PWR_CPU1D1SR_DSTATE_Pos                (7U)
#define PWR_CPU1D1SR_DSTATE_Msk                (0x7U << PWR_CPU1D1SR_DSTATE_Pos)
#define PWR_CPU1D1SR_DSTATE                    PWR_CPU1D1SR_DSTATE_Msk  /*!< D1 domain state status.Set by hardware to indicate when the D1 domain is in DRun, DStop1/2/3 or DStandby mode.- 000: DRun- 001: DStop1- 010: DStop2- 011: DStop3- 100: DStandby */

/* Bit fields for PWR_CPU2D2SR register */
#define PWR_CPU2D2SR_HOLD_BOOT_Pos             (0U)
#define PWR_CPU2D2SR_HOLD_BOOT_Msk             (0x1U << PWR_CPU2D2SR_HOLD_BOOT_Pos)
#define PWR_CPU2D2SR_HOLD_BOOT                 PWR_CPU2D2SR_HOLD_BOOT_Msk  /*!< CPU2 HOLD_BOOT status flag.Set by hardware to indicate when the CPU2 is in HOLD_BOOT state.- 0: CPU2 is allowed to boot.- 1: CPU2 is maintained in HOLD_BOOT state by hardware.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU2D2SR_WFBEN_Pos                 (1U)
#define PWR_CPU2D2SR_WFBEN_Msk                 (0x1U << PWR_CPU2D2SR_WFBEN_Pos)
#define PWR_CPU2D2SR_WFBEN                     PWR_CPU2D2SR_WFBEN_Msk  /*!< CPU2 Wait for boot enable status flag.Set by hardware to indicate when the CPU2 is in wait for boot enable state. Only applicable in Wakeup event mode.- 0: CPU2 is not in wait for boot enable state. Set at â0â in legacy boot mode.- 1: CPU2 is in wait for boot enable state. It will start once an event assign to him will be raised.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU2D2SR_CSTATE_Pos                (2U)
#define PWR_CPU2D2SR_CSTATE_Msk                (0x3U << PWR_CPU2D2SR_CSTATE_Pos)
#define PWR_CPU2D2SR_CSTATE                    PWR_CPU2D2SR_CSTATE_Msk  /*!< CPU2 cluster state status flag.Set by hardware to indicate when the CPU2 is in CRun, CSleep or CStop states.- 00: CPU2 is in reset (Hold_boot or Wfben).- 01: CPU2 is in CRun state.- 10: CPU2 is in CSleep state.- 11: CPU2 is in CStop state. */
#define PWR_CPU2D2SR_DSTATE_Pos                (7U)
#define PWR_CPU2D2SR_DSTATE_Msk                (0x7U << PWR_CPU2D2SR_DSTATE_Pos)
#define PWR_CPU2D2SR_DSTATE                    PWR_CPU2D2SR_DSTATE_Msk  /*!< System / D2 state status.Set by hardware to indicate when the system / D2 domain is in Run, Stop, LP-Stop, LPLV-Stop, Standby and VBAT modes.- 000: Run- 001: Stop- 010: LP-Stop- 011: LPLV-Stop- 100: Standby- 101: VBAT */

/* Bit fields for PWR_CPU3D3SR register */
#define PWR_CPU3D3SR_CSTATE_Pos                (2U)
#define PWR_CPU3D3SR_CSTATE_Msk                (0x3U << PWR_CPU3D3SR_CSTATE_Pos)
#define PWR_CPU3D3SR_CSTATE                    PWR_CPU3D3SR_CSTATE_Msk  /*!< CPU3 cluster state status flag.Set by hardware to indicate when the CPU3 is in CRun, CSleep or CStop states.- 00: CPU3 is in reset.- 01: CPU3 is in CRun state.- 10: CPU3 is in CSleep state.- 11: CPU3 is in CStop state. */
#define PWR_CPU3D3SR_DSTATE_Pos                (7U)
#define PWR_CPU3D3SR_DSTATE_Msk                (0x7U << PWR_CPU3D3SR_DSTATE_Pos)
#define PWR_CPU3D3SR_DSTATE                    PWR_CPU3D3SR_DSTATE_Msk  /*!< D3 state status.Set by hardware to indicate when the D3 domain is in SRun1/2/3, SStop1/2 and SStandby modes.- 000: SRun1- 001: SRun2- 010: SRun3- 011: SStop1- 100: SStop2- 101: SStandby (only accessible in Debug standby mode) */

/* Bit fields for PWR_VERR register */
#define PWR_VERR_MINREV_Pos                    (0U)
#define PWR_VERR_MINREV_Msk                    (0xfU << PWR_VERR_MINREV_Pos)
#define PWR_VERR_MINREV                        PWR_VERR_MINREV_Msk  /*!< Minor revision number. */
#define PWR_VERR_MAJREV_Pos                    (4U)
#define PWR_VERR_MAJREV_Msk                    (0xfU << PWR_VERR_MAJREV_Pos)
#define PWR_VERR_MAJREV                        PWR_VERR_MAJREV_Msk  /*!< Major revision number. */

/* Bit fields for PWR_IPIDR register */
#define PWR_IPIDR_ID_Pos                       (0U)
#define PWR_IPIDR_ID_Msk                       (0xffffffffU << PWR_IPIDR_ID_Pos)
#define PWR_IPIDR_ID                           PWR_IPIDR_ID_Msk  /*!< Identifier of the PWR */

/* Bit fields for PWR_SIDR register */
#define PWR_SIDR_SID_Pos                       (0U)
#define PWR_SIDR_SID_Msk                       (0xffffffffU << PWR_SIDR_SID_Pos)
#define PWR_SIDR_SID                           PWR_SIDR_SID_Msk  /*!< Decoding space is 1 KB */

/******************************************************************************/
/*                                                                            */
/*                      SRAMs configuration controller                        */
/*                                                                            */
/*                   (Revision 2.0.0 - August 13th, 2019)                     */
/*                                                                            */
/******************************************************************************/
/****************  Bit definition for RAMCFG_*RAM_CR registers  ***************/
#define RAMCFG_CR_ECCE_Pos                  (0U)
#define RAMCFG_CR_ECCE_Msk                  (0x1UL << RAMCFG_CR_ECCE_Pos)           /*!< 0x00000001 */
#define RAMCFG_CR_ECCE                      RAMCFG_CR_ECCE_Msk                      /*!< ECC Enable */
#define RAMCFG_CR_ALE_Pos                   (4U)
#define RAMCFG_CR_ALE_Msk                   (0x1UL << RAMCFG_CR_ALE_Pos)            /*!< 0x00000010 */
#define RAMCFG_CR_ALE                       RAMCFG_CR_ALE_Msk                       /*!< Address Latch Enable */
#define RAMCFG_CR_SRAMER_Pos                (8U)
#define RAMCFG_CR_SRAMER_Msk                (0x1UL << RAMCFG_CR_SRAMER_Pos)         /*!< 0x00000100 */
#define RAMCFG_CR_SRAMER                    RAMCFG_CR_SRAMER_Msk                    /*!< SRAM Erase */
#define RAMCFG_CR_SRAMHWERDIS_Pos           (12U)
#define RAMCFG_CR_SRAMHWERDIS_Msk           (0x1UL << RAMCFG_CR_SRAMHWERDIS_Pos)    /*!< 0x00001000 */
#define RAMCFG_CR_SRAMHWERDIS               RAMCFG_CR_SRAMHWERDIS_Msk               /*!< SRAM Hardware Erase Disable */

/***************  Bit definition for RAMCFG_*RAM_IER registers  ***************/
#define RAMCFG_IER_SEIE_Pos                 (0U)
#define RAMCFG_IER_SEIE_Msk                 (0x1UL << RAMCFG_IER_SEIE_Pos)          /*!< 0x00000001 */
#define RAMCFG_IER_SEIE                     RAMCFG_IER_SEIE_Msk                     /*!< ECC Single Error Interrupt Enable */
#define RAMCFG_IER_DEIE_Pos                 (1U)
#define RAMCFG_IER_DEIE_Msk                 (0x1UL << RAMCFG_IER_DEIE_Pos)          /*!< 0x00000002 */
#define RAMCFG_IER_DEIE                     RAMCFG_IER_DEIE_Msk                     /*!< ECC Double Error Interrupt Enable */

/****************  Bit definition for RAMCFG_*RAM_ISR registers  **************/
#define RAMCFG_ISR_SEC_Pos                  (0U)
#define RAMCFG_ISR_SEC_Msk                  (0x1UL << RAMCFG_ISR_SEC_Pos)           /*!< 0x00000001 */
#define RAMCFG_ISR_SEC                      RAMCFG_ISR_SEC_Msk                      /*!< ECC Single Error Corrected */
#define RAMCFG_ISR_DED_Pos                  (1U)
#define RAMCFG_ISR_DED_Msk                  (0x1UL << RAMCFG_ISR_DED_Pos)           /*!< 0x00000002 */
#define RAMCFG_ISR_DED                      RAMCFG_ISR_DED_Msk                      /*!< ECC Double Error Detected */
#define RAMCFG_ISR_SRAMBUSY_Pos             (8U)
#define RAMCFG_ISR_SRAMBUSY_Msk             (0x1UL << RAMCFG_ISR_SRAMBUSY_Pos)      /*!< 0x00000100 */
#define RAMCFG_ISR_SRAMBUSY                 RAMCFG_ISR_SRAMBUSY_Msk                 /*!< SRAM busy with erase operation */

/***************  Bit definition for RAMCFG_RETRAM.SEAR register  *************/
#define RAMCFG_SEAR_ESEA_Pos                (0U)
#define RAMCFG_RETRAM_SEAR_ESEA_Msk         (0x7FFFUL << RAMCFG_SEAR_ESEA_Pos)      /*!< 0x00007FFF */
#define RAMCFG_RETRAM_SEAR_ESEA             RAMCFG_RETRAM_SEAR_ESEA_Msk             /*!< ECC Single Error Address */
/**************  Bit definition for RAMCFG_BKPSRAM.SEAR register  *************/
#define RAMCFG_BKPSRAM_SEAR_ESEA_Msk        (0x7FFUL << RAMCFG_SEAR_ESEA_Pos)       /*!< 0x000007FF */
#define RAMCFG_BKPSRAM_SEAR_ESEA            RAMCFG_BKPSRAM_SEAR_ESEA_Msk            /*!< ECC Single Error Address */

/***************  Bit definition for RAMCFG_RETRAM.DEAR register  *************/
#define RAMCFG_DEAR_EDEA_Pos                (0U)
#define RAMCFG_RETRAM_DEAR_EDEA_Msk         (0x7FFFUL << RAMCFG_DEAR_EDEA_Pos)      /*!< 0x00007FFF */
#define RAMCFG_RETRAM_DEAR_EDEA             RAMCFG_RETRAM_DEAR_EDEA_Msk             /*!< ECC Double Error Address */
/**************  Bit definition for RAMCFG_BKPSRAM.SEAR register  *************/
#define RAMCFG_BKPSRAM_DEAR_EDEA_Msk        (0x7FFUL << RAMCFG_DEAR_EDEA_Pos)       /*!< 0x000007FF */
#define RAMCFG_BKPSRAM_DEAR_EDEA            RAMCFG_BKPSRAM_DEAR_EDEA_Msk            /*!< ECC Double Error Address */

/****************  Bit definition for RAMCFG_*RAM_ICR registers  **************/
#define RAMCFG_ICR_CSEC_Pos                 (0U)
#define RAMCFG_ICR_CSEC_Msk                 (0x1UL << RAMCFG_ICR_CSEC_Pos)          /*!< 0x00000001 */
#define RAMCFG_ICR_CSEC                     RAMCFG_ICR_CSEC_Msk                     /*!< Clear ECC Single Error Corrected */
#define RAMCFG_ICR_CDED_Pos                 (1U)
#define RAMCFG_ICR_CDED_Msk                 (0x1UL << RAMCFG_ICR_CDED_Pos)          /*!< 0x00000002 */
#define RAMCFG_ICR_CDED                     RAMCFG_ICR_CDED_Msk                     /*!< Clear ECC Double Error Detected */

/**************  Bit definition for RAMCFG_*RAM_ECCKEYR registers  ************/
#define RAMCFG_ECCKEYR_ECCKEY_Pos           (0U)
#define RAMCFG_ECCKEYR_ECCKEY_Msk           (0xFFUL << RAMCFG_ECCKEYR_ECCKEY_Pos)   /*!< 0x000000FF */
#define RAMCFG_ECCKEYR_ECCKEY               RAMCFG_ECCKEYR_ECCKEY_Msk               /*!< ECC Write Protection Key */

/**************  Bit definition for RAMCFG_*RAM_ERKEYR registers  *************/
#define RAMCFG_ERKEYR_ERASEKEY_Pos          (0U)
#define RAMCFG_ERKEYR_ERASEKEY_Msk          (0xFFUL << RAMCFG_ERKEYR_ERASEKEY_Pos)  /*!< 0x000000FF */
#define RAMCFG_ERKEYR_ERASEKEY              RAMCFG_ERKEYR_ERASEKEY_Msk              /*!< Erase Write Protection Key */

/***************  Bit definition for RAMCFG_*RAM_CCR1 registers  **************/
#define RAMCFG_CCR1_CRCC_Pos                (0U)
#define RAMCFG_CCR1_CRCC_Msk                (0x3UL << RAMCFG_CCR1_CRCC_Pos)         /*!< 0x00000003 */
#define RAMCFG_CCR1_CRCC                    RAMCFG_CCR1_CRCC_Msk                    /*!< CRC configuration */
#define RAMCFG_CCR1_CRCBS_Pos               (4U)
#define RAMCFG_CCR1_CRCBS_Msk               (0x7UL << RAMCFG_CCR1_CRCBS_Pos)        /*!< 0x00000070 */
#define RAMCFG_CCR1_CRCBS                   RAMCFG_CCR1_CRCBS_Msk                   /*!< CRC Buffer Size */

/***************  Bit definition for RAMCFG_*RAM_CCR2 registers  **************/
#define RAMCFG_CCR2_CRCCS_Pos               (0U)
#define RAMCFG_CCR2_CRCCS_Msk               (0x1UL << RAMCFG_CCR2_CRCCS_Pos)        /*!< 0x00000001 */
#define RAMCFG_CCR2_CRCCS                   RAMCFG_CCR2_CRCCS_Msk                   /*!< CRC computation start */
#define RAMCFG_CCR2_CRCFC_Pos               (31U)
#define RAMCFG_CCR2_CRCFC_Msk               (0x1UL << RAMCFG_CCR2_CRCFC_Pos)        /*!< 0x80000000 */
#define RAMCFG_CCR2_CRCFC                   RAMCFG_CCR2_CRCFC_Msk                   /*!< CRC flags clear */

/****************  Bit definition for RAMCFG_*_CRSR registers  ****************/
#define RAMCFG_CRSR_CRCRS_Pos               (0U)
#define RAMCFG_CRSR_CRCRS_Msk               (0xFFFFFFFFUL << RAMCFG_CRSR_CRCRS_Pos) /*!< 0xFFFFFFFF */
#define RAMCFG_CRSR_CRCRS                   RAMCFG_CRSR_CRCRS_Msk                   /*!< CRC reference signature */

/*****************  Bit definition for RAMCFG_*_CSR registers  ****************/
#define RAMCFG_CSR_CRCEOC_Pos               (0U)
#define RAMCFG_CSR_CRCEOC_Msk               (0x1UL << RAMCFG_CSR_CRCEOC_Pos)        /*!< 0x00000001 */
#define RAMCFG_CSR_CRCEOC                   RAMCFG_CSR_CRCEOC_Msk                   /*!< CRC End Of Computation flag */
#define RAMCFG_CSR_CRCSCS_Pos               (1U)
#define RAMCFG_CSR_CRCSCS_Msk               (0x1UL << RAMCFG_CSR_CRCSCS_Pos)        /*!< 0x00000002 */
#define RAMCFG_CSR_CRCSCS                   RAMCFG_CSR_CRCSCS_Msk                   /*!< CRC Signature Check Status flag */

/****************  Bit definition for RAMCFG_*_CCSR registers  ****************/
#define RAMCFG_CCSR_CRCCS_Pos               (0U)
#define RAMCFG_CCSR_CRCCS_Msk               (0xFFFFFFFFUL << RAMCFG_CCSR_CRCCS_Pos) /*!< 0xFFFFFFFF */
#define RAMCFG_CCSR_CRCCS                   RAMCFG_CCSR_CRCCS_Msk                   /*!< CRC calculated signature */

#if defined(STM32MP2XX_ASSY2_2_1)
/******************************************************************************/
/*                         Reset and Clock Control                            */
/* Reference document : RCC specifications applicable to ASSY 2.2.1           */
/*                      (Revision 1.0.15 - June 05th, 2019)                   */
/******************************************************************************/
/* Bit fields for RCC_SECCFGR0 register */
#define RCC_SECCFGR0_SEC_Pos                          0
#define RCC_SECCFGR0_SEC_Msk                          (0xFFFFFFFF << 0)
#define RCC_SECCFGR0_SEC                              (0xFFFFFFFF << 0)

/* Bit fields for RCC_SECCFGR1 register */
#define RCC_SECCFGR1_SEC_Pos                          0
#define RCC_SECCFGR1_SEC_Msk                          (0xFFFFFFFF << 0)
#define RCC_SECCFGR1_SEC                              (0xFFFFFFFF << 0)

/* Bit fields for RCC_SECCFGR2 register */
#define RCC_SECCFGR2_SEC_Pos                          0
#define RCC_SECCFGR2_SEC_Msk                          (0xFFFFFFFF << 0)
#define RCC_SECCFGR2_SEC                              (0xFFFFFFFF << 0)

/* Bit fields for RCC_SECCFGR3 register */
#define RCC_SECCFGR3_SEC_Pos                          0
#define RCC_SECCFGR3_SEC_Msk                          (0x3FFFF << 0)
#define RCC_SECCFGR3_SEC                              (0x3FFFF << 0)

/* Bit fields for RCC_PRIVCFGR0 register */
#define RCC_PRIVCFGR0_PRIV_Pos                        0
#define RCC_PRIVCFGR0_PRIV_Msk                        (0xFFFFFFFF << 0)
#define RCC_PRIVCFGR0_PRIV                            (0xFFFFFFFF << 0)

/* Bit fields for RCC_PRIVCFGR1 register */
#define RCC_PRIVCFGR1_PRIV_Pos                        0
#define RCC_PRIVCFGR1_PRIV_Msk                        (0xFFFFFFFF << 0)
#define RCC_PRIVCFGR1_PRIV                            (0xFFFFFFFF << 0)

/* Bit fields for RCC_PRIVCFGR2 register */
#define RCC_PRIVCFGR2_PRIV_Pos                        0
#define RCC_PRIVCFGR2_PRIV_Msk                        (0xFFFFFFFF << 0)
#define RCC_PRIVCFGR2_PRIV                            (0xFFFFFFFF << 0)

/* Bit fields for RCC_PRIVCFGR3 register */
#define RCC_PRIVCFGR3_PRIV_Pos                        0
#define RCC_PRIVCFGR3_PRIV_Msk                        (0x3FFFF << 0)
#define RCC_PRIVCFGR3_PRIV                            (0x3FFFF << 0)

/* Bit fields for RCC_RCFG_LOCKR0 register */
#define RCC_RCFG_LOCKR0_RLOCK_Pos                     0
#define RCC_RCFG_LOCKR0_RLOCK_Msk                     (0xFFFFFFFF << 0)
#define RCC_RCFG_LOCKR0_RLOCK                         (0xFFFFFFFF << 0)

/* Bit fields for RCC_RCFG_LOCKR1 register */
#define RCC_RCFG_LOCKR1_RLOCK_Pos                     0
#define RCC_RCFG_LOCKR1_RLOCK_Msk                     (0xFFFFFFFF << 0)
#define RCC_RCFG_LOCKR1_RLOCK                         (0xFFFFFFFF << 0)

/* Bit fields for RCC_RCFG_LOCKR2 register */
#define RCC_RCFG_LOCKR2_RLOCK_Pos                     0
#define RCC_RCFG_LOCKR2_RLOCK_Msk                     (0xFFFFFFFF << 0)
#define RCC_RCFG_LOCKR2_RLOCK                         (0xFFFFFFFF << 0)

/* Bit fields for RCC_RCFG_LOCKR3 register */
#define RCC_RCFG_LOCKR3_RLOCK_Pos                     0
#define RCC_RCFG_LOCKR3_RLOCK_Msk                     (0x3FFFF << 0)
#define RCC_RCFG_LOCKR3_RLOCK                         (0x3FFFF << 0)

/* Bit fields for RCC_R0CIDCFGR register */
#define RCC_R0CIDCFGR_CFEN_Pos                        0
#define RCC_R0CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R0CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R0CIDCFGR_SEM_EN_Pos                      1
#define RCC_R0CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R0CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R0CIDCFGR_SCID_Pos                        4
#define RCC_R0CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R0CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R0CIDCFGR_SEMWLC_Pos                      16
#define RCC_R0CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R0CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R0SEMCR register */
#define RCC_R0SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R0SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R0SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R0SEMCR_SEMCID_Pos                        4
#define RCC_R0SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R0SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R1CIDCFGR register */
#define RCC_R1CIDCFGR_CFEN_Pos                        0
#define RCC_R1CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R1CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R1CIDCFGR_SEM_EN_Pos                      1
#define RCC_R1CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R1CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R1CIDCFGR_SCID_Pos                        4
#define RCC_R1CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R1CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R1CIDCFGR_SEMWLC_Pos                      16
#define RCC_R1CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R1CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R1SEMCR register */
#define RCC_R1SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R1SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R1SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R1SEMCR_SEMCID_Pos                        4
#define RCC_R1SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R1SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R2CIDCFGR register */
#define RCC_R2CIDCFGR_CFEN_Pos                        0
#define RCC_R2CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R2CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R2CIDCFGR_SEM_EN_Pos                      1
#define RCC_R2CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R2CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R2CIDCFGR_SCID_Pos                        4
#define RCC_R2CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R2CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R2CIDCFGR_SEMWLC_Pos                      16
#define RCC_R2CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R2CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R2SEMCR register */
#define RCC_R2SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R2SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R2SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R2SEMCR_SEMCID_Pos                        4
#define RCC_R2SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R2SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R3CIDCFGR register */
#define RCC_R3CIDCFGR_CFEN_Pos                        0
#define RCC_R3CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R3CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R3CIDCFGR_SEM_EN_Pos                      1
#define RCC_R3CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R3CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R3CIDCFGR_SCID_Pos                        4
#define RCC_R3CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R3CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R3CIDCFGR_SEMWLC_Pos                      16
#define RCC_R3CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R3CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R3SEMCR register */
#define RCC_R3SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R3SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R3SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R3SEMCR_SEMCID_Pos                        4
#define RCC_R3SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R3SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R4CIDCFGR register */
#define RCC_R4CIDCFGR_CFEN_Pos                        0
#define RCC_R4CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R4CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R4CIDCFGR_SEM_EN_Pos                      1
#define RCC_R4CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R4CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R4CIDCFGR_SCID_Pos                        4
#define RCC_R4CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R4CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R4CIDCFGR_SEMWLC_Pos                      16
#define RCC_R4CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R4CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R4SEMCR register */
#define RCC_R4SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R4SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R4SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R4SEMCR_SEMCID_Pos                        4
#define RCC_R4SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R4SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R5CIDCFGR register */
#define RCC_R5CIDCFGR_CFEN_Pos                        0
#define RCC_R5CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R5CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R5CIDCFGR_SEM_EN_Pos                      1
#define RCC_R5CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R5CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R5CIDCFGR_SCID_Pos                        4
#define RCC_R5CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R5CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R5CIDCFGR_SEMWLC_Pos                      16
#define RCC_R5CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R5CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R5SEMCR register */
#define RCC_R5SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R5SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R5SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R5SEMCR_SEMCID_Pos                        4
#define RCC_R5SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R5SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R6CIDCFGR register */
#define RCC_R6CIDCFGR_CFEN_Pos                        0
#define RCC_R6CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R6CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R6CIDCFGR_SEM_EN_Pos                      1
#define RCC_R6CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R6CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R6CIDCFGR_SCID_Pos                        4
#define RCC_R6CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R6CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R6CIDCFGR_SEMWLC_Pos                      16
#define RCC_R6CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R6CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R6SEMCR register */
#define RCC_R6SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R6SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R6SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R6SEMCR_SEMCID_Pos                        4
#define RCC_R6SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R6SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R7CIDCFGR register */
#define RCC_R7CIDCFGR_CFEN_Pos                        0
#define RCC_R7CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R7CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R7CIDCFGR_SEM_EN_Pos                      1
#define RCC_R7CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R7CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R7CIDCFGR_SCID_Pos                        4
#define RCC_R7CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R7CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R7CIDCFGR_SEMWLC_Pos                      16
#define RCC_R7CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R7CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R7SEMCR register */
#define RCC_R7SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R7SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R7SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R7SEMCR_SEMCID_Pos                        4
#define RCC_R7SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R7SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R8CIDCFGR register */
#define RCC_R8CIDCFGR_CFEN_Pos                        0
#define RCC_R8CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R8CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R8CIDCFGR_SEM_EN_Pos                      1
#define RCC_R8CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R8CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R8CIDCFGR_SCID_Pos                        4
#define RCC_R8CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R8CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R8CIDCFGR_SEMWLC_Pos                      16
#define RCC_R8CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R8CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R8SEMCR register */
#define RCC_R8SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R8SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R8SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R8SEMCR_SEMCID_Pos                        4
#define RCC_R8SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R8SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R9CIDCFGR register */
#define RCC_R9CIDCFGR_CFEN_Pos                        0
#define RCC_R9CIDCFGR_CFEN_Msk                        (0x1 << 0)
#define RCC_R9CIDCFGR_CFEN                            (0x1 << 0)
#define RCC_R9CIDCFGR_SEM_EN_Pos                      1
#define RCC_R9CIDCFGR_SEM_EN_Msk                      (0x1 << 1)
#define RCC_R9CIDCFGR_SEM_EN                          (0x1 << 1)
#define RCC_R9CIDCFGR_SCID_Pos                        4
#define RCC_R9CIDCFGR_SCID_Msk                        (0x7 << 4)
#define RCC_R9CIDCFGR_SCID                            (0x7 << 4)
#define RCC_R9CIDCFGR_SEMWLC_Pos                      16
#define RCC_R9CIDCFGR_SEMWLC_Msk                      (0xff << 16)
#define RCC_R9CIDCFGR_SEMWLC                          (0xff << 16)

/* Bit fields for RCC_R9SEMCR register */
#define RCC_R9SEMCR_SEM_MUTEX_Pos                     0
#define RCC_R9SEMCR_SEM_MUTEX_Msk                     (0x1 << 0)
#define RCC_R9SEMCR_SEM_MUTEX                         (0x1 << 0)
#define RCC_R9SEMCR_SEMCID_Pos                        4
#define RCC_R9SEMCR_SEMCID_Msk                        (0x7 << 4)
#define RCC_R9SEMCR_SEMCID                            (0x7 << 4)

/* Bit fields for RCC_R10CIDCFGR register */
#define RCC_R10CIDCFGR_CFEN_Pos                       0
#define RCC_R10CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R10CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R10CIDCFGR_SEM_EN_Pos                     1
#define RCC_R10CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R10CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R10CIDCFGR_SCID_Pos                       4
#define RCC_R10CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R10CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R10CIDCFGR_SEMWLC_Pos                     16
#define RCC_R10CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R10CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R10SEMCR register */
#define RCC_R10SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R10SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R10SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R10SEMCR_SEMCID_Pos                       4
#define RCC_R10SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R10SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R11CIDCFGR register */
#define RCC_R11CIDCFGR_CFEN_Pos                       0
#define RCC_R11CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R11CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R11CIDCFGR_SEM_EN_Pos                     1
#define RCC_R11CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R11CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R11CIDCFGR_SCID_Pos                       4
#define RCC_R11CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R11CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R11CIDCFGR_SEMWLC_Pos                     16
#define RCC_R11CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R11CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R11SEMCR register */
#define RCC_R11SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R11SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R11SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R11SEMCR_SEMCID_Pos                       4
#define RCC_R11SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R11SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R12CIDCFGR register */
#define RCC_R12CIDCFGR_CFEN_Pos                       0
#define RCC_R12CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R12CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R12CIDCFGR_SEM_EN_Pos                     1
#define RCC_R12CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R12CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R12CIDCFGR_SCID_Pos                       4
#define RCC_R12CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R12CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R12CIDCFGR_SEMWLC_Pos                     16
#define RCC_R12CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R12CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R12SEMCR register */
#define RCC_R12SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R12SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R12SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R12SEMCR_SEMCID_Pos                       4
#define RCC_R12SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R12SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R13CIDCFGR register */
#define RCC_R13CIDCFGR_CFEN_Pos                       0
#define RCC_R13CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R13CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R13CIDCFGR_SEM_EN_Pos                     1
#define RCC_R13CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R13CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R13CIDCFGR_SCID_Pos                       4
#define RCC_R13CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R13CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R13CIDCFGR_SEMWLC_Pos                     16
#define RCC_R13CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R13CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R13SEMCR register */
#define RCC_R13SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R13SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R13SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R13SEMCR_SEMCID_Pos                       4
#define RCC_R13SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R13SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R14CIDCFGR register */
#define RCC_R14CIDCFGR_CFEN_Pos                       0
#define RCC_R14CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R14CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R14CIDCFGR_SEM_EN_Pos                     1
#define RCC_R14CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R14CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R14CIDCFGR_SCID_Pos                       4
#define RCC_R14CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R14CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R14CIDCFGR_SEMWLC_Pos                     16
#define RCC_R14CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R14CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R14SEMCR register */
#define RCC_R14SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R14SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R14SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R14SEMCR_SEMCID_Pos                       4
#define RCC_R14SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R14SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R15CIDCFGR register */
#define RCC_R15CIDCFGR_CFEN_Pos                       0
#define RCC_R15CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R15CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R15CIDCFGR_SEM_EN_Pos                     1
#define RCC_R15CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R15CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R15CIDCFGR_SCID_Pos                       4
#define RCC_R15CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R15CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R15CIDCFGR_SEMWLC_Pos                     16
#define RCC_R15CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R15CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R15SEMCR register */
#define RCC_R15SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R15SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R15SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R15SEMCR_SEMCID_Pos                       4
#define RCC_R15SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R15SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R16CIDCFGR register */
#define RCC_R16CIDCFGR_CFEN_Pos                       0
#define RCC_R16CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R16CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R16CIDCFGR_SEM_EN_Pos                     1
#define RCC_R16CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R16CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R16CIDCFGR_SCID_Pos                       4
#define RCC_R16CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R16CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R16CIDCFGR_SEMWLC_Pos                     16
#define RCC_R16CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R16CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R16SEMCR register */
#define RCC_R16SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R16SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R16SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R16SEMCR_SEMCID_Pos                       4
#define RCC_R16SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R16SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R17CIDCFGR register */
#define RCC_R17CIDCFGR_CFEN_Pos                       0
#define RCC_R17CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R17CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R17CIDCFGR_SEM_EN_Pos                     1
#define RCC_R17CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R17CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R17CIDCFGR_SCID_Pos                       4
#define RCC_R17CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R17CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R17CIDCFGR_SEMWLC_Pos                     16
#define RCC_R17CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R17CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R17SEMCR register */
#define RCC_R17SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R17SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R17SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R17SEMCR_SEMCID_Pos                       4
#define RCC_R17SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R17SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R18CIDCFGR register */
#define RCC_R18CIDCFGR_CFEN_Pos                       0
#define RCC_R18CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R18CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R18CIDCFGR_SEM_EN_Pos                     1
#define RCC_R18CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R18CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R18CIDCFGR_SCID_Pos                       4
#define RCC_R18CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R18CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R18CIDCFGR_SEMWLC_Pos                     16
#define RCC_R18CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R18CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R18SEMCR register */
#define RCC_R18SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R18SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R18SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R18SEMCR_SEMCID_Pos                       4
#define RCC_R18SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R18SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R19CIDCFGR register */
#define RCC_R19CIDCFGR_CFEN_Pos                       0
#define RCC_R19CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R19CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R19CIDCFGR_SEM_EN_Pos                     1
#define RCC_R19CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R19CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R19CIDCFGR_SCID_Pos                       4
#define RCC_R19CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R19CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R19CIDCFGR_SEMWLC_Pos                     16
#define RCC_R19CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R19CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R19SEMCR register */
#define RCC_R19SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R19SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R19SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R19SEMCR_SEMCID_Pos                       4
#define RCC_R19SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R19SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R20CIDCFGR register */
#define RCC_R20CIDCFGR_CFEN_Pos                       0
#define RCC_R20CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R20CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R20CIDCFGR_SEM_EN_Pos                     1
#define RCC_R20CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R20CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R20CIDCFGR_SCID_Pos                       4
#define RCC_R20CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R20CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R20CIDCFGR_SEMWLC_Pos                     16
#define RCC_R20CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R20CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R20SEMCR register */
#define RCC_R20SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R20SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R20SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R20SEMCR_SEMCID_Pos                       4
#define RCC_R20SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R20SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R21CIDCFGR register */
#define RCC_R21CIDCFGR_CFEN_Pos                       0
#define RCC_R21CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R21CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R21CIDCFGR_SEM_EN_Pos                     1
#define RCC_R21CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R21CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R21CIDCFGR_SCID_Pos                       4
#define RCC_R21CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R21CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R21CIDCFGR_SEMWLC_Pos                     16
#define RCC_R21CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R21CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R21SEMCR register */
#define RCC_R21SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R21SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R21SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R21SEMCR_SEMCID_Pos                       4
#define RCC_R21SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R21SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R22CIDCFGR register */
#define RCC_R22CIDCFGR_CFEN_Pos                       0
#define RCC_R22CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R22CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R22CIDCFGR_SEM_EN_Pos                     1
#define RCC_R22CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R22CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R22CIDCFGR_SCID_Pos                       4
#define RCC_R22CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R22CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R22CIDCFGR_SEMWLC_Pos                     16
#define RCC_R22CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R22CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R22SEMCR register */
#define RCC_R22SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R22SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R22SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R22SEMCR_SEMCID_Pos                       4
#define RCC_R22SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R22SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R23CIDCFGR register */
#define RCC_R23CIDCFGR_CFEN_Pos                       0
#define RCC_R23CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R23CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R23CIDCFGR_SEM_EN_Pos                     1
#define RCC_R23CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R23CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R23CIDCFGR_SCID_Pos                       4
#define RCC_R23CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R23CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R23CIDCFGR_SEMWLC_Pos                     16
#define RCC_R23CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R23CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R23SEMCR register */
#define RCC_R23SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R23SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R23SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R23SEMCR_SEMCID_Pos                       4
#define RCC_R23SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R23SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R24CIDCFGR register */
#define RCC_R24CIDCFGR_CFEN_Pos                       0
#define RCC_R24CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R24CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R24CIDCFGR_SEM_EN_Pos                     1
#define RCC_R24CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R24CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R24CIDCFGR_SCID_Pos                       4
#define RCC_R24CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R24CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R24CIDCFGR_SEMWLC_Pos                     16
#define RCC_R24CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R24CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R24SEMCR register */
#define RCC_R24SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R24SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R24SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R24SEMCR_SEMCID_Pos                       4
#define RCC_R24SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R24SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R25CIDCFGR register */
#define RCC_R25CIDCFGR_CFEN_Pos                       0
#define RCC_R25CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R25CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R25CIDCFGR_SEM_EN_Pos                     1
#define RCC_R25CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R25CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R25CIDCFGR_SCID_Pos                       4
#define RCC_R25CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R25CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R25CIDCFGR_SEMWLC_Pos                     16
#define RCC_R25CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R25CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R25SEMCR register */
#define RCC_R25SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R25SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R25SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R25SEMCR_SEMCID_Pos                       4
#define RCC_R25SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R25SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R26CIDCFGR register */
#define RCC_R26CIDCFGR_CFEN_Pos                       0
#define RCC_R26CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R26CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R26CIDCFGR_SEM_EN_Pos                     1
#define RCC_R26CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R26CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R26CIDCFGR_SCID_Pos                       4
#define RCC_R26CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R26CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R26CIDCFGR_SEMWLC_Pos                     16
#define RCC_R26CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R26CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R26SEMCR register */
#define RCC_R26SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R26SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R26SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R26SEMCR_SEMCID_Pos                       4
#define RCC_R26SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R26SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R27CIDCFGR register */
#define RCC_R27CIDCFGR_CFEN_Pos                       0
#define RCC_R27CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R27CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R27CIDCFGR_SEM_EN_Pos                     1
#define RCC_R27CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R27CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R27CIDCFGR_SCID_Pos                       4
#define RCC_R27CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R27CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R27CIDCFGR_SEMWLC_Pos                     16
#define RCC_R27CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R27CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R27SEMCR register */
#define RCC_R27SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R27SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R27SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R27SEMCR_SEMCID_Pos                       4
#define RCC_R27SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R27SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R28CIDCFGR register */
#define RCC_R28CIDCFGR_CFEN_Pos                       0
#define RCC_R28CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R28CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R28CIDCFGR_SEM_EN_Pos                     1
#define RCC_R28CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R28CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R28CIDCFGR_SCID_Pos                       4
#define RCC_R28CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R28CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R28CIDCFGR_SEMWLC_Pos                     16
#define RCC_R28CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R28CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R28SEMCR register */
#define RCC_R28SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R28SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R28SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R28SEMCR_SEMCID_Pos                       4
#define RCC_R28SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R28SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R29CIDCFGR register */
#define RCC_R29CIDCFGR_CFEN_Pos                       0
#define RCC_R29CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R29CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R29CIDCFGR_SEM_EN_Pos                     1
#define RCC_R29CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R29CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R29CIDCFGR_SCID_Pos                       4
#define RCC_R29CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R29CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R29CIDCFGR_SEMWLC_Pos                     16
#define RCC_R29CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R29CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R29SEMCR register */
#define RCC_R29SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R29SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R29SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R29SEMCR_SEMCID_Pos                       4
#define RCC_R29SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R29SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R30CIDCFGR register */
#define RCC_R30CIDCFGR_CFEN_Pos                       0
#define RCC_R30CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R30CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R30CIDCFGR_SEM_EN_Pos                     1
#define RCC_R30CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R30CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R30CIDCFGR_SCID_Pos                       4
#define RCC_R30CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R30CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R30CIDCFGR_SEMWLC_Pos                     16
#define RCC_R30CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R30CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R30SEMCR register */
#define RCC_R30SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R30SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R30SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R30SEMCR_SEMCID_Pos                       4
#define RCC_R30SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R30SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R31CIDCFGR register */
#define RCC_R31CIDCFGR_CFEN_Pos                       0
#define RCC_R31CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R31CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R31CIDCFGR_SEM_EN_Pos                     1
#define RCC_R31CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R31CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R31CIDCFGR_SCID_Pos                       4
#define RCC_R31CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R31CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R31CIDCFGR_SEMWLC_Pos                     16
#define RCC_R31CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R31CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R31SEMCR register */
#define RCC_R31SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R31SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R31SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R31SEMCR_SEMCID_Pos                       4
#define RCC_R31SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R31SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R32CIDCFGR register */
#define RCC_R32CIDCFGR_CFEN_Pos                       0
#define RCC_R32CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R32CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R32CIDCFGR_SEM_EN_Pos                     1
#define RCC_R32CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R32CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R32CIDCFGR_SCID_Pos                       4
#define RCC_R32CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R32CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R32CIDCFGR_SEMWLC_Pos                     16
#define RCC_R32CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R32CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R32SEMCR register */
#define RCC_R32SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R32SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R32SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R32SEMCR_SEMCID_Pos                       4
#define RCC_R32SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R32SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R33CIDCFGR register */
#define RCC_R33CIDCFGR_CFEN_Pos                       0
#define RCC_R33CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R33CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R33CIDCFGR_SEM_EN_Pos                     1
#define RCC_R33CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R33CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R33CIDCFGR_SCID_Pos                       4
#define RCC_R33CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R33CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R33CIDCFGR_SEMWLC_Pos                     16
#define RCC_R33CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R33CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R33SEMCR register */
#define RCC_R33SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R33SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R33SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R33SEMCR_SEMCID_Pos                       4
#define RCC_R33SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R33SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R34CIDCFGR register */
#define RCC_R34CIDCFGR_CFEN_Pos                       0
#define RCC_R34CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R34CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R34CIDCFGR_SEM_EN_Pos                     1
#define RCC_R34CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R34CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R34CIDCFGR_SCID_Pos                       4
#define RCC_R34CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R34CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R34CIDCFGR_SEMWLC_Pos                     16
#define RCC_R34CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R34CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R34SEMCR register */
#define RCC_R34SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R34SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R34SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R34SEMCR_SEMCID_Pos                       4
#define RCC_R34SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R34SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R35CIDCFGR register */
#define RCC_R35CIDCFGR_CFEN_Pos                       0
#define RCC_R35CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R35CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R35CIDCFGR_SEM_EN_Pos                     1
#define RCC_R35CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R35CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R35CIDCFGR_SCID_Pos                       4
#define RCC_R35CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R35CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R35CIDCFGR_SEMWLC_Pos                     16
#define RCC_R35CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R35CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R35SEMCR register */
#define RCC_R35SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R35SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R35SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R35SEMCR_SEMCID_Pos                       4
#define RCC_R35SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R35SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R36CIDCFGR register */
#define RCC_R36CIDCFGR_CFEN_Pos                       0
#define RCC_R36CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R36CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R36CIDCFGR_SEM_EN_Pos                     1
#define RCC_R36CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R36CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R36CIDCFGR_SCID_Pos                       4
#define RCC_R36CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R36CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R36CIDCFGR_SEMWLC_Pos                     16
#define RCC_R36CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R36CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R36SEMCR register */
#define RCC_R36SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R36SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R36SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R36SEMCR_SEMCID_Pos                       4
#define RCC_R36SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R36SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R37CIDCFGR register */
#define RCC_R37CIDCFGR_CFEN_Pos                       0
#define RCC_R37CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R37CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R37CIDCFGR_SEM_EN_Pos                     1
#define RCC_R37CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R37CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R37CIDCFGR_SCID_Pos                       4
#define RCC_R37CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R37CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R37CIDCFGR_SEMWLC_Pos                     16
#define RCC_R37CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R37CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R37SEMCR register */
#define RCC_R37SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R37SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R37SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R37SEMCR_SEMCID_Pos                       4
#define RCC_R37SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R37SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R38CIDCFGR register */
#define RCC_R38CIDCFGR_CFEN_Pos                       0
#define RCC_R38CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R38CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R38CIDCFGR_SEM_EN_Pos                     1
#define RCC_R38CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R38CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R38CIDCFGR_SCID_Pos                       4
#define RCC_R38CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R38CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R38CIDCFGR_SEMWLC_Pos                     16
#define RCC_R38CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R38CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R38SEMCR register */
#define RCC_R38SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R38SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R38SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R38SEMCR_SEMCID_Pos                       4
#define RCC_R38SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R38SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R39CIDCFGR register */
#define RCC_R39CIDCFGR_CFEN_Pos                       0
#define RCC_R39CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R39CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R39CIDCFGR_SEM_EN_Pos                     1
#define RCC_R39CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R39CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R39CIDCFGR_SCID_Pos                       4
#define RCC_R39CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R39CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R39CIDCFGR_SEMWLC_Pos                     16
#define RCC_R39CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R39CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R39SEMCR register */
#define RCC_R39SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R39SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R39SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R39SEMCR_SEMCID_Pos                       4
#define RCC_R39SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R39SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R40CIDCFGR register */
#define RCC_R40CIDCFGR_CFEN_Pos                       0
#define RCC_R40CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R40CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R40CIDCFGR_SEM_EN_Pos                     1
#define RCC_R40CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R40CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R40CIDCFGR_SCID_Pos                       4
#define RCC_R40CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R40CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R40CIDCFGR_SEMWLC_Pos                     16
#define RCC_R40CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R40CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R40SEMCR register */
#define RCC_R40SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R40SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R40SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R40SEMCR_SEMCID_Pos                       4
#define RCC_R40SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R40SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R41CIDCFGR register */
#define RCC_R41CIDCFGR_CFEN_Pos                       0
#define RCC_R41CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R41CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R41CIDCFGR_SEM_EN_Pos                     1
#define RCC_R41CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R41CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R41CIDCFGR_SCID_Pos                       4
#define RCC_R41CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R41CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R41CIDCFGR_SEMWLC_Pos                     16
#define RCC_R41CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R41CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R41SEMCR register */
#define RCC_R41SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R41SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R41SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R41SEMCR_SEMCID_Pos                       4
#define RCC_R41SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R41SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R42CIDCFGR register */
#define RCC_R42CIDCFGR_CFEN_Pos                       0
#define RCC_R42CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R42CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R42CIDCFGR_SEM_EN_Pos                     1
#define RCC_R42CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R42CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R42CIDCFGR_SCID_Pos                       4
#define RCC_R42CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R42CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R42CIDCFGR_SEMWLC_Pos                     16
#define RCC_R42CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R42CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R42SEMCR register */
#define RCC_R42SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R42SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R42SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R42SEMCR_SEMCID_Pos                       4
#define RCC_R42SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R42SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R43CIDCFGR register */
#define RCC_R43CIDCFGR_CFEN_Pos                       0
#define RCC_R43CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R43CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R43CIDCFGR_SEM_EN_Pos                     1
#define RCC_R43CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R43CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R43CIDCFGR_SCID_Pos                       4
#define RCC_R43CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R43CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R43CIDCFGR_SEMWLC_Pos                     16
#define RCC_R43CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R43CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R43SEMCR register */
#define RCC_R43SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R43SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R43SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R43SEMCR_SEMCID_Pos                       4
#define RCC_R43SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R43SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R44CIDCFGR register */
#define RCC_R44CIDCFGR_CFEN_Pos                       0
#define RCC_R44CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R44CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R44CIDCFGR_SEM_EN_Pos                     1
#define RCC_R44CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R44CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R44CIDCFGR_SCID_Pos                       4
#define RCC_R44CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R44CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R44CIDCFGR_SEMWLC_Pos                     16
#define RCC_R44CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R44CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R44SEMCR register */
#define RCC_R44SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R44SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R44SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R44SEMCR_SEMCID_Pos                       4
#define RCC_R44SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R44SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R45CIDCFGR register */
#define RCC_R45CIDCFGR_CFEN_Pos                       0
#define RCC_R45CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R45CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R45CIDCFGR_SEM_EN_Pos                     1
#define RCC_R45CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R45CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R45CIDCFGR_SCID_Pos                       4
#define RCC_R45CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R45CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R45CIDCFGR_SEMWLC_Pos                     16
#define RCC_R45CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R45CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R45SEMCR register */
#define RCC_R45SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R45SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R45SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R45SEMCR_SEMCID_Pos                       4
#define RCC_R45SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R45SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R46CIDCFGR register */
#define RCC_R46CIDCFGR_CFEN_Pos                       0
#define RCC_R46CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R46CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R46CIDCFGR_SEM_EN_Pos                     1
#define RCC_R46CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R46CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R46CIDCFGR_SCID_Pos                       4
#define RCC_R46CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R46CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R46CIDCFGR_SEMWLC_Pos                     16
#define RCC_R46CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R46CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R46SEMCR register */
#define RCC_R46SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R46SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R46SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R46SEMCR_SEMCID_Pos                       4
#define RCC_R46SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R46SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R47CIDCFGR register */
#define RCC_R47CIDCFGR_CFEN_Pos                       0
#define RCC_R47CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R47CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R47CIDCFGR_SEM_EN_Pos                     1
#define RCC_R47CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R47CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R47CIDCFGR_SCID_Pos                       4
#define RCC_R47CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R47CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R47CIDCFGR_SEMWLC_Pos                     16
#define RCC_R47CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R47CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R47SEMCR register */
#define RCC_R47SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R47SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R47SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R47SEMCR_SEMCID_Pos                       4
#define RCC_R47SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R47SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R48CIDCFGR register */
#define RCC_R48CIDCFGR_CFEN_Pos                       0
#define RCC_R48CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R48CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R48CIDCFGR_SEM_EN_Pos                     1
#define RCC_R48CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R48CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R48CIDCFGR_SCID_Pos                       4
#define RCC_R48CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R48CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R48CIDCFGR_SEMWLC_Pos                     16
#define RCC_R48CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R48CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R48SEMCR register */
#define RCC_R48SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R48SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R48SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R48SEMCR_SEMCID_Pos                       4
#define RCC_R48SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R48SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R49CIDCFGR register */
#define RCC_R49CIDCFGR_CFEN_Pos                       0
#define RCC_R49CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R49CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R49CIDCFGR_SEM_EN_Pos                     1
#define RCC_R49CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R49CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R49CIDCFGR_SCID_Pos                       4
#define RCC_R49CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R49CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R49CIDCFGR_SEMWLC_Pos                     16
#define RCC_R49CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R49CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R49SEMCR register */
#define RCC_R49SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R49SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R49SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R49SEMCR_SEMCID_Pos                       4
#define RCC_R49SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R49SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R50CIDCFGR register */
#define RCC_R50CIDCFGR_CFEN_Pos                       0
#define RCC_R50CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R50CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R50CIDCFGR_SEM_EN_Pos                     1
#define RCC_R50CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R50CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R50CIDCFGR_SCID_Pos                       4
#define RCC_R50CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R50CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R50CIDCFGR_SEMWLC_Pos                     16
#define RCC_R50CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R50CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R50SEMCR register */
#define RCC_R50SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R50SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R50SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R50SEMCR_SEMCID_Pos                       4
#define RCC_R50SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R50SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R51CIDCFGR register */
#define RCC_R51CIDCFGR_CFEN_Pos                       0
#define RCC_R51CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R51CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R51CIDCFGR_SEM_EN_Pos                     1
#define RCC_R51CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R51CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R51CIDCFGR_SCID_Pos                       4
#define RCC_R51CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R51CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R51CIDCFGR_SEMWLC_Pos                     16
#define RCC_R51CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R51CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R51SEMCR register */
#define RCC_R51SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R51SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R51SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R51SEMCR_SEMCID_Pos                       4
#define RCC_R51SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R51SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R52CIDCFGR register */
#define RCC_R52CIDCFGR_CFEN_Pos                       0
#define RCC_R52CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R52CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R52CIDCFGR_SEM_EN_Pos                     1
#define RCC_R52CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R52CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R52CIDCFGR_SCID_Pos                       4
#define RCC_R52CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R52CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R52CIDCFGR_SEMWLC_Pos                     16
#define RCC_R52CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R52CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R52SEMCR register */
#define RCC_R52SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R52SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R52SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R52SEMCR_SEMCID_Pos                       4
#define RCC_R52SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R52SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R53CIDCFGR register */
#define RCC_R53CIDCFGR_CFEN_Pos                       0
#define RCC_R53CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R53CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R53CIDCFGR_SEM_EN_Pos                     1
#define RCC_R53CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R53CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R53CIDCFGR_SCID_Pos                       4
#define RCC_R53CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R53CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R53CIDCFGR_SEMWLC_Pos                     16
#define RCC_R53CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R53CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R53SEMCR register */
#define RCC_R53SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R53SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R53SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R53SEMCR_SEMCID_Pos                       4
#define RCC_R53SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R53SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R54CIDCFGR register */
#define RCC_R54CIDCFGR_CFEN_Pos                       0
#define RCC_R54CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R54CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R54CIDCFGR_SEM_EN_Pos                     1
#define RCC_R54CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R54CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R54CIDCFGR_SCID_Pos                       4
#define RCC_R54CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R54CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R54CIDCFGR_SEMWLC_Pos                     16
#define RCC_R54CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R54CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R54SEMCR register */
#define RCC_R54SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R54SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R54SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R54SEMCR_SEMCID_Pos                       4
#define RCC_R54SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R54SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R55CIDCFGR register */
#define RCC_R55CIDCFGR_CFEN_Pos                       0
#define RCC_R55CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R55CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R55CIDCFGR_SEM_EN_Pos                     1
#define RCC_R55CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R55CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R55CIDCFGR_SCID_Pos                       4
#define RCC_R55CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R55CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R55CIDCFGR_SEMWLC_Pos                     16
#define RCC_R55CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R55CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R55SEMCR register */
#define RCC_R55SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R55SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R55SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R55SEMCR_SEMCID_Pos                       4
#define RCC_R55SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R55SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R56CIDCFGR register */
#define RCC_R56CIDCFGR_CFEN_Pos                       0
#define RCC_R56CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R56CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R56CIDCFGR_SEM_EN_Pos                     1
#define RCC_R56CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R56CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R56CIDCFGR_SCID_Pos                       4
#define RCC_R56CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R56CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R56CIDCFGR_SEMWLC_Pos                     16
#define RCC_R56CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R56CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R56SEMCR register */
#define RCC_R56SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R56SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R56SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R56SEMCR_SEMCID_Pos                       4
#define RCC_R56SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R56SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R57CIDCFGR register */
#define RCC_R57CIDCFGR_CFEN_Pos                       0
#define RCC_R57CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R57CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R57CIDCFGR_SEM_EN_Pos                     1
#define RCC_R57CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R57CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R57CIDCFGR_SCID_Pos                       4
#define RCC_R57CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R57CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R57CIDCFGR_SEMWLC_Pos                     16
#define RCC_R57CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R57CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R57SEMCR register */
#define RCC_R57SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R57SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R57SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R57SEMCR_SEMCID_Pos                       4
#define RCC_R57SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R57SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R58CIDCFGR register */
#define RCC_R58CIDCFGR_CFEN_Pos                       0
#define RCC_R58CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R58CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R58CIDCFGR_SEM_EN_Pos                     1
#define RCC_R58CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R58CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R58CIDCFGR_SCID_Pos                       4
#define RCC_R58CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R58CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R58CIDCFGR_SEMWLC_Pos                     16
#define RCC_R58CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R58CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R58SEMCR register */
#define RCC_R58SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R58SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R58SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R58SEMCR_SEMCID_Pos                       4
#define RCC_R58SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R58SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R59CIDCFGR register */
#define RCC_R59CIDCFGR_CFEN_Pos                       0
#define RCC_R59CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R59CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R59CIDCFGR_SEM_EN_Pos                     1
#define RCC_R59CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R59CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R59CIDCFGR_SCID_Pos                       4
#define RCC_R59CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R59CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R59CIDCFGR_SEMWLC_Pos                     16
#define RCC_R59CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R59CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R59SEMCR register */
#define RCC_R59SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R59SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R59SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R59SEMCR_SEMCID_Pos                       4
#define RCC_R59SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R59SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R60CIDCFGR register */
#define RCC_R60CIDCFGR_CFEN_Pos                       0
#define RCC_R60CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R60CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R60CIDCFGR_SEM_EN_Pos                     1
#define RCC_R60CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R60CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R60CIDCFGR_SCID_Pos                       4
#define RCC_R60CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R60CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R60CIDCFGR_SEMWLC_Pos                     16
#define RCC_R60CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R60CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R60SEMCR register */
#define RCC_R60SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R60SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R60SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R60SEMCR_SEMCID_Pos                       4
#define RCC_R60SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R60SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R61CIDCFGR register */
#define RCC_R61CIDCFGR_CFEN_Pos                       0
#define RCC_R61CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R61CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R61CIDCFGR_SEM_EN_Pos                     1
#define RCC_R61CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R61CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R61CIDCFGR_SCID_Pos                       4
#define RCC_R61CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R61CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R61CIDCFGR_SEMWLC_Pos                     16
#define RCC_R61CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R61CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R61SEMCR register */
#define RCC_R61SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R61SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R61SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R61SEMCR_SEMCID_Pos                       4
#define RCC_R61SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R61SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R62CIDCFGR register */
#define RCC_R62CIDCFGR_CFEN_Pos                       0
#define RCC_R62CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R62CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R62CIDCFGR_SEM_EN_Pos                     1
#define RCC_R62CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R62CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R62CIDCFGR_SCID_Pos                       4
#define RCC_R62CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R62CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R62CIDCFGR_SEMWLC_Pos                     16
#define RCC_R62CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R62CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R62SEMCR register */
#define RCC_R62SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R62SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R62SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R62SEMCR_SEMCID_Pos                       4
#define RCC_R62SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R62SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R63CIDCFGR register */
#define RCC_R63CIDCFGR_CFEN_Pos                       0
#define RCC_R63CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R63CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R63CIDCFGR_SEM_EN_Pos                     1
#define RCC_R63CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R63CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R63CIDCFGR_SCID_Pos                       4
#define RCC_R63CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R63CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R63CIDCFGR_SEMWLC_Pos                     16
#define RCC_R63CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R63CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R63SEMCR register */
#define RCC_R63SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R63SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R63SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R63SEMCR_SEMCID_Pos                       4
#define RCC_R63SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R63SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R64CIDCFGR register */
#define RCC_R64CIDCFGR_CFEN_Pos                       0
#define RCC_R64CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R64CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R64CIDCFGR_SEM_EN_Pos                     1
#define RCC_R64CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R64CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R64CIDCFGR_SCID_Pos                       4
#define RCC_R64CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R64CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R64CIDCFGR_SEMWLC_Pos                     16
#define RCC_R64CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R64CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R64SEMCR register */
#define RCC_R64SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R64SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R64SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R64SEMCR_SEMCID_Pos                       4
#define RCC_R64SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R64SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R65CIDCFGR register */
#define RCC_R65CIDCFGR_CFEN_Pos                       0
#define RCC_R65CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R65CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R65CIDCFGR_SEM_EN_Pos                     1
#define RCC_R65CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R65CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R65CIDCFGR_SCID_Pos                       4
#define RCC_R65CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R65CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R65CIDCFGR_SEMWLC_Pos                     16
#define RCC_R65CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R65CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R65SEMCR register */
#define RCC_R65SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R65SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R65SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R65SEMCR_SEMCID_Pos                       4
#define RCC_R65SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R65SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R66CIDCFGR register */
#define RCC_R66CIDCFGR_CFEN_Pos                       0
#define RCC_R66CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R66CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R66CIDCFGR_SEM_EN_Pos                     1
#define RCC_R66CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R66CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R66CIDCFGR_SCID_Pos                       4
#define RCC_R66CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R66CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R66CIDCFGR_SEMWLC_Pos                     16
#define RCC_R66CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R66CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R66SEMCR register */
#define RCC_R66SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R66SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R66SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R66SEMCR_SEMCID_Pos                       4
#define RCC_R66SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R66SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R67CIDCFGR register */
#define RCC_R67CIDCFGR_CFEN_Pos                       0
#define RCC_R67CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R67CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R67CIDCFGR_SEM_EN_Pos                     1
#define RCC_R67CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R67CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R67CIDCFGR_SCID_Pos                       4
#define RCC_R67CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R67CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R67CIDCFGR_SEMWLC_Pos                     16
#define RCC_R67CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R67CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R67SEMCR register */
#define RCC_R67SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R67SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R67SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R67SEMCR_SEMCID_Pos                       4
#define RCC_R67SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R67SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R68CIDCFGR register */
#define RCC_R68CIDCFGR_CFEN_Pos                       0
#define RCC_R68CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R68CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R68CIDCFGR_SEM_EN_Pos                     1
#define RCC_R68CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R68CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R68CIDCFGR_SCID_Pos                       4
#define RCC_R68CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R68CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R68CIDCFGR_SEMWLC_Pos                     16
#define RCC_R68CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R68CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R68SEMCR register */
#define RCC_R68SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R68SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R68SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R68SEMCR_SEMCID_Pos                       4
#define RCC_R68SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R68SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R69CIDCFGR register */
#define RCC_R69CIDCFGR_CFEN_Pos                       0
#define RCC_R69CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R69CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R69CIDCFGR_SEM_EN_Pos                     1
#define RCC_R69CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R69CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R69CIDCFGR_SCID_Pos                       4
#define RCC_R69CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R69CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R69CIDCFGR_SEMWLC_Pos                     16
#define RCC_R69CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R69CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R69SEMCR register */
#define RCC_R69SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R69SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R69SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R69SEMCR_SEMCID_Pos                       4
#define RCC_R69SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R69SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R70CIDCFGR register */
#define RCC_R70CIDCFGR_CFEN_Pos                       0
#define RCC_R70CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R70CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R70CIDCFGR_SEM_EN_Pos                     1
#define RCC_R70CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R70CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R70CIDCFGR_SCID_Pos                       4
#define RCC_R70CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R70CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R70CIDCFGR_SEMWLC_Pos                     16
#define RCC_R70CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R70CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R70SEMCR register */
#define RCC_R70SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R70SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R70SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R70SEMCR_SEMCID_Pos                       4
#define RCC_R70SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R70SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R71CIDCFGR register */
#define RCC_R71CIDCFGR_CFEN_Pos                       0
#define RCC_R71CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R71CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R71CIDCFGR_SEM_EN_Pos                     1
#define RCC_R71CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R71CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R71CIDCFGR_SCID_Pos                       4
#define RCC_R71CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R71CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R71CIDCFGR_SEMWLC_Pos                     16
#define RCC_R71CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R71CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R71SEMCR register */
#define RCC_R71SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R71SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R71SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R71SEMCR_SEMCID_Pos                       4
#define RCC_R71SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R71SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R72CIDCFGR register */
#define RCC_R72CIDCFGR_CFEN_Pos                       0
#define RCC_R72CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R72CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R72CIDCFGR_SEM_EN_Pos                     1
#define RCC_R72CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R72CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R72CIDCFGR_SCID_Pos                       4
#define RCC_R72CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R72CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R72CIDCFGR_SEMWLC_Pos                     16
#define RCC_R72CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R72CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R72SEMCR register */
#define RCC_R72SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R72SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R72SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R72SEMCR_SEMCID_Pos                       4
#define RCC_R72SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R72SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R73CIDCFGR register */
#define RCC_R73CIDCFGR_CFEN_Pos                       0
#define RCC_R73CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R73CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R73CIDCFGR_SEM_EN_Pos                     1
#define RCC_R73CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R73CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R73CIDCFGR_SCID_Pos                       4
#define RCC_R73CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R73CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R73CIDCFGR_SEMWLC_Pos                     16
#define RCC_R73CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R73CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R73SEMCR register */
#define RCC_R73SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R73SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R73SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R73SEMCR_SEMCID_Pos                       4
#define RCC_R73SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R73SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R74CIDCFGR register */
#define RCC_R74CIDCFGR_CFEN_Pos                       0
#define RCC_R74CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R74CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R74CIDCFGR_SEM_EN_Pos                     1
#define RCC_R74CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R74CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R74CIDCFGR_SCID_Pos                       4
#define RCC_R74CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R74CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R74CIDCFGR_SEMWLC_Pos                     16
#define RCC_R74CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R74CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R74SEMCR register */
#define RCC_R74SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R74SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R74SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R74SEMCR_SEMCID_Pos                       4
#define RCC_R74SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R74SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R75CIDCFGR register */
#define RCC_R75CIDCFGR_CFEN_Pos                       0
#define RCC_R75CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R75CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R75CIDCFGR_SEM_EN_Pos                     1
#define RCC_R75CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R75CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R75CIDCFGR_SCID_Pos                       4
#define RCC_R75CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R75CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R75CIDCFGR_SEMWLC_Pos                     16
#define RCC_R75CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R75CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R75SEMCR register */
#define RCC_R75SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R75SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R75SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R75SEMCR_SEMCID_Pos                       4
#define RCC_R75SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R75SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R76CIDCFGR register */
#define RCC_R76CIDCFGR_CFEN_Pos                       0
#define RCC_R76CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R76CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R76CIDCFGR_SEM_EN_Pos                     1
#define RCC_R76CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R76CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R76CIDCFGR_SCID_Pos                       4
#define RCC_R76CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R76CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R76CIDCFGR_SEMWLC_Pos                     16
#define RCC_R76CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R76CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R76SEMCR register */
#define RCC_R76SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R76SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R76SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R76SEMCR_SEMCID_Pos                       4
#define RCC_R76SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R76SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R77CIDCFGR register */
#define RCC_R77CIDCFGR_CFEN_Pos                       0
#define RCC_R77CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R77CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R77CIDCFGR_SEM_EN_Pos                     1
#define RCC_R77CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R77CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R77CIDCFGR_SCID_Pos                       4
#define RCC_R77CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R77CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R77CIDCFGR_SEMWLC_Pos                     16
#define RCC_R77CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R77CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R77SEMCR register */
#define RCC_R77SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R77SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R77SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R77SEMCR_SEMCID_Pos                       4
#define RCC_R77SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R77SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R78CIDCFGR register */
#define RCC_R78CIDCFGR_CFEN_Pos                       0
#define RCC_R78CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R78CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R78CIDCFGR_SEM_EN_Pos                     1
#define RCC_R78CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R78CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R78CIDCFGR_SCID_Pos                       4
#define RCC_R78CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R78CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R78CIDCFGR_SEMWLC_Pos                     16
#define RCC_R78CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R78CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R78SEMCR register */
#define RCC_R78SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R78SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R78SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R78SEMCR_SEMCID_Pos                       4
#define RCC_R78SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R78SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R79CIDCFGR register */
#define RCC_R79CIDCFGR_CFEN_Pos                       0
#define RCC_R79CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R79CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R79CIDCFGR_SEM_EN_Pos                     1
#define RCC_R79CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R79CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R79CIDCFGR_SCID_Pos                       4
#define RCC_R79CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R79CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R79CIDCFGR_SEMWLC_Pos                     16
#define RCC_R79CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R79CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R79SEMCR register */
#define RCC_R79SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R79SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R79SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R79SEMCR_SEMCID_Pos                       4
#define RCC_R79SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R79SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R80CIDCFGR register */
#define RCC_R80CIDCFGR_CFEN_Pos                       0
#define RCC_R80CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R80CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R80CIDCFGR_SEM_EN_Pos                     1
#define RCC_R80CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R80CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R80CIDCFGR_SCID_Pos                       4
#define RCC_R80CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R80CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R80CIDCFGR_SEMWLC_Pos                     16
#define RCC_R80CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R80CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R80SEMCR register */
#define RCC_R80SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R80SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R80SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R80SEMCR_SEMCID_Pos                       4
#define RCC_R80SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R80SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R81CIDCFGR register */
#define RCC_R81CIDCFGR_CFEN_Pos                       0
#define RCC_R81CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R81CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R81CIDCFGR_SEM_EN_Pos                     1
#define RCC_R81CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R81CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R81CIDCFGR_SCID_Pos                       4
#define RCC_R81CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R81CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R81CIDCFGR_SEMWLC_Pos                     16
#define RCC_R81CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R81CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R81SEMCR register */
#define RCC_R81SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R81SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R81SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R81SEMCR_SEMCID_Pos                       4
#define RCC_R81SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R81SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R82CIDCFGR register */
#define RCC_R82CIDCFGR_CFEN_Pos                       0
#define RCC_R82CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R82CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R82CIDCFGR_SEM_EN_Pos                     1
#define RCC_R82CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R82CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R82CIDCFGR_SCID_Pos                       4
#define RCC_R82CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R82CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R82CIDCFGR_SEMWLC_Pos                     16
#define RCC_R82CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R82CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R82SEMCR register */
#define RCC_R82SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R82SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R82SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R82SEMCR_SEMCID_Pos                       4
#define RCC_R82SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R82SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R83CIDCFGR register */
#define RCC_R83CIDCFGR_CFEN_Pos                       0
#define RCC_R83CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R83CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R83CIDCFGR_SEM_EN_Pos                     1
#define RCC_R83CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R83CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R83CIDCFGR_SCID_Pos                       4
#define RCC_R83CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R83CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R83CIDCFGR_SEMWLC_Pos                     16
#define RCC_R83CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R83CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R83SEMCR register */
#define RCC_R83SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R83SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R83SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R83SEMCR_SEMCID_Pos                       4
#define RCC_R83SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R83SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R84CIDCFGR register */
#define RCC_R84CIDCFGR_CFEN_Pos                       0
#define RCC_R84CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R84CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R84CIDCFGR_SEM_EN_Pos                     1
#define RCC_R84CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R84CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R84CIDCFGR_SCID_Pos                       4
#define RCC_R84CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R84CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R84CIDCFGR_SEMWLC_Pos                     16
#define RCC_R84CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R84CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R84SEMCR register */
#define RCC_R84SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R84SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R84SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R84SEMCR_SEMCID_Pos                       4
#define RCC_R84SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R84SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R85CIDCFGR register */
#define RCC_R85CIDCFGR_CFEN_Pos                       0
#define RCC_R85CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R85CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R85CIDCFGR_SEM_EN_Pos                     1
#define RCC_R85CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R85CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R85CIDCFGR_SCID_Pos                       4
#define RCC_R85CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R85CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R85CIDCFGR_SEMWLC_Pos                     16
#define RCC_R85CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R85CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R85SEMCR register */
#define RCC_R85SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R85SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R85SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R85SEMCR_SEMCID_Pos                       4
#define RCC_R85SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R85SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R86CIDCFGR register */
#define RCC_R86CIDCFGR_CFEN_Pos                       0
#define RCC_R86CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R86CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R86CIDCFGR_SEM_EN_Pos                     1
#define RCC_R86CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R86CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R86CIDCFGR_SCID_Pos                       4
#define RCC_R86CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R86CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R86CIDCFGR_SEMWLC_Pos                     16
#define RCC_R86CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R86CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R86SEMCR register */
#define RCC_R86SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R86SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R86SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R86SEMCR_SEMCID_Pos                       4
#define RCC_R86SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R86SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R87CIDCFGR register */
#define RCC_R87CIDCFGR_CFEN_Pos                       0
#define RCC_R87CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R87CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R87CIDCFGR_SEM_EN_Pos                     1
#define RCC_R87CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R87CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R87CIDCFGR_SCID_Pos                       4
#define RCC_R87CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R87CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R87CIDCFGR_SEMWLC_Pos                     16
#define RCC_R87CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R87CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R87SEMCR register */
#define RCC_R87SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R87SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R87SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R87SEMCR_SEMCID_Pos                       4
#define RCC_R87SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R87SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R88CIDCFGR register */
#define RCC_R88CIDCFGR_CFEN_Pos                       0
#define RCC_R88CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R88CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R88CIDCFGR_SEM_EN_Pos                     1
#define RCC_R88CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R88CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R88CIDCFGR_SCID_Pos                       4
#define RCC_R88CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R88CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R88CIDCFGR_SEMWLC_Pos                     16
#define RCC_R88CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R88CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R88SEMCR register */
#define RCC_R88SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R88SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R88SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R88SEMCR_SEMCID_Pos                       4
#define RCC_R88SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R88SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R89CIDCFGR register */
#define RCC_R89CIDCFGR_CFEN_Pos                       0
#define RCC_R89CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R89CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R89CIDCFGR_SEM_EN_Pos                     1
#define RCC_R89CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R89CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R89CIDCFGR_SCID_Pos                       4
#define RCC_R89CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R89CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R89CIDCFGR_SEMWLC_Pos                     16
#define RCC_R89CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R89CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R89SEMCR register */
#define RCC_R89SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R89SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R89SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R89SEMCR_SEMCID_Pos                       4
#define RCC_R89SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R89SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R90CIDCFGR register */
#define RCC_R90CIDCFGR_CFEN_Pos                       0
#define RCC_R90CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R90CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R90CIDCFGR_SEM_EN_Pos                     1
#define RCC_R90CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R90CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R90CIDCFGR_SCID_Pos                       4
#define RCC_R90CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R90CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R90CIDCFGR_SEMWLC_Pos                     16
#define RCC_R90CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R90CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R90SEMCR register */
#define RCC_R90SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R90SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R90SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R90SEMCR_SEMCID_Pos                       4
#define RCC_R90SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R90SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R91CIDCFGR register */
#define RCC_R91CIDCFGR_CFEN_Pos                       0
#define RCC_R91CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R91CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R91CIDCFGR_SEM_EN_Pos                     1
#define RCC_R91CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R91CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R91CIDCFGR_SCID_Pos                       4
#define RCC_R91CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R91CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R91CIDCFGR_SEMWLC_Pos                     16
#define RCC_R91CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R91CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R91SEMCR register */
#define RCC_R91SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R91SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R91SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R91SEMCR_SEMCID_Pos                       4
#define RCC_R91SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R91SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R92CIDCFGR register */
#define RCC_R92CIDCFGR_CFEN_Pos                       0
#define RCC_R92CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R92CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R92CIDCFGR_SEM_EN_Pos                     1
#define RCC_R92CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R92CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R92CIDCFGR_SCID_Pos                       4
#define RCC_R92CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R92CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R92CIDCFGR_SEMWLC_Pos                     16
#define RCC_R92CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R92CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R92SEMCR register */
#define RCC_R92SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R92SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R92SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R92SEMCR_SEMCID_Pos                       4
#define RCC_R92SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R92SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R93CIDCFGR register */
#define RCC_R93CIDCFGR_CFEN_Pos                       0
#define RCC_R93CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R93CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R93CIDCFGR_SEM_EN_Pos                     1
#define RCC_R93CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R93CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R93CIDCFGR_SCID_Pos                       4
#define RCC_R93CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R93CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R93CIDCFGR_SEMWLC_Pos                     16
#define RCC_R93CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R93CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R93SEMCR register */
#define RCC_R93SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R93SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R93SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R93SEMCR_SEMCID_Pos                       4
#define RCC_R93SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R93SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R94CIDCFGR register */
#define RCC_R94CIDCFGR_CFEN_Pos                       0
#define RCC_R94CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R94CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R94CIDCFGR_SEM_EN_Pos                     1
#define RCC_R94CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R94CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R94CIDCFGR_SCID_Pos                       4
#define RCC_R94CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R94CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R94CIDCFGR_SEMWLC_Pos                     16
#define RCC_R94CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R94CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R94SEMCR register */
#define RCC_R94SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R94SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R94SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R94SEMCR_SEMCID_Pos                       4
#define RCC_R94SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R94SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R95CIDCFGR register */
#define RCC_R95CIDCFGR_CFEN_Pos                       0
#define RCC_R95CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R95CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R95CIDCFGR_SEM_EN_Pos                     1
#define RCC_R95CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R95CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R95CIDCFGR_SCID_Pos                       4
#define RCC_R95CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R95CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R95CIDCFGR_SEMWLC_Pos                     16
#define RCC_R95CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R95CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R95SEMCR register */
#define RCC_R95SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R95SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R95SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R95SEMCR_SEMCID_Pos                       4
#define RCC_R95SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R95SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R96CIDCFGR register */
#define RCC_R96CIDCFGR_CFEN_Pos                       0
#define RCC_R96CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R96CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R96CIDCFGR_SEM_EN_Pos                     1
#define RCC_R96CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R96CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R96CIDCFGR_SCID_Pos                       4
#define RCC_R96CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R96CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R96CIDCFGR_SEMWLC_Pos                     16
#define RCC_R96CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R96CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R96SEMCR register */
#define RCC_R96SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R96SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R96SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R96SEMCR_SEMCID_Pos                       4
#define RCC_R96SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R96SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R97CIDCFGR register */
#define RCC_R97CIDCFGR_CFEN_Pos                       0
#define RCC_R97CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R97CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R97CIDCFGR_SEM_EN_Pos                     1
#define RCC_R97CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R97CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R97CIDCFGR_SCID_Pos                       4
#define RCC_R97CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R97CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R97CIDCFGR_SEMWLC_Pos                     16
#define RCC_R97CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R97CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R97SEMCR register */
#define RCC_R97SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R97SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R97SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R97SEMCR_SEMCID_Pos                       4
#define RCC_R97SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R97SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R98CIDCFGR register */
#define RCC_R98CIDCFGR_CFEN_Pos                       0
#define RCC_R98CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R98CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R98CIDCFGR_SEM_EN_Pos                     1
#define RCC_R98CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R98CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R98CIDCFGR_SCID_Pos                       4
#define RCC_R98CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R98CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R98CIDCFGR_SEMWLC_Pos                     16
#define RCC_R98CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R98CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R98SEMCR register */
#define RCC_R98SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R98SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R98SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R98SEMCR_SEMCID_Pos                       4
#define RCC_R98SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R98SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R99CIDCFGR register */
#define RCC_R99CIDCFGR_CFEN_Pos                       0
#define RCC_R99CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R99CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R99CIDCFGR_SEM_EN_Pos                     1
#define RCC_R99CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R99CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R99CIDCFGR_SCID_Pos                       4
#define RCC_R99CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R99CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R99CIDCFGR_SEMWLC_Pos                     16
#define RCC_R99CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R99CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R99SEMCR register */
#define RCC_R99SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R99SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R99SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R99SEMCR_SEMCID_Pos                       4
#define RCC_R99SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R99SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R100CIDCFGR register */
#define RCC_R100CIDCFGR_CFEN_Pos                      0
#define RCC_R100CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R100CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R100CIDCFGR_SEM_EN_Pos                    1
#define RCC_R100CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R100CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R100CIDCFGR_SCID_Pos                      4
#define RCC_R100CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R100CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R100CIDCFGR_SEMWLC_Pos                    16
#define RCC_R100CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R100CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R100SEMCR register */
#define RCC_R100SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R100SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R100SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R100SEMCR_SEMCID_Pos                      4
#define RCC_R100SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R100SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R101CIDCFGR register */
#define RCC_R101CIDCFGR_CFEN_Pos                      0
#define RCC_R101CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R101CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R101CIDCFGR_SEM_EN_Pos                    1
#define RCC_R101CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R101CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R101CIDCFGR_SCID_Pos                      4
#define RCC_R101CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R101CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R101CIDCFGR_SEMWLC_Pos                    16
#define RCC_R101CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R101CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R101SEMCR register */
#define RCC_R101SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R101SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R101SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R101SEMCR_SEMCID_Pos                      4
#define RCC_R101SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R101SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R102CIDCFGR register */
#define RCC_R102CIDCFGR_CFEN_Pos                      0
#define RCC_R102CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R102CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R102CIDCFGR_SEM_EN_Pos                    1
#define RCC_R102CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R102CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R102CIDCFGR_SCID_Pos                      4
#define RCC_R102CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R102CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R102CIDCFGR_SEMWLC_Pos                    16
#define RCC_R102CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R102CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R102SEMCR register */
#define RCC_R102SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R102SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R102SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R102SEMCR_SEMCID_Pos                      4
#define RCC_R102SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R102SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R103CIDCFGR register */
#define RCC_R103CIDCFGR_CFEN_Pos                      0
#define RCC_R103CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R103CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R103CIDCFGR_SEM_EN_Pos                    1
#define RCC_R103CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R103CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R103CIDCFGR_SCID_Pos                      4
#define RCC_R103CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R103CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R103CIDCFGR_SEMWLC_Pos                    16
#define RCC_R103CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R103CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R103SEMCR register */
#define RCC_R103SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R103SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R103SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R103SEMCR_SEMCID_Pos                      4
#define RCC_R103SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R103SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R104CIDCFGR register */
#define RCC_R104CIDCFGR_CFEN_Pos                      0
#define RCC_R104CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R104CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R104CIDCFGR_SEM_EN_Pos                    1
#define RCC_R104CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R104CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R104CIDCFGR_SCID_Pos                      4
#define RCC_R104CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R104CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R104CIDCFGR_SEMWLC_Pos                    16
#define RCC_R104CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R104CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R104SEMCR register */
#define RCC_R104SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R104SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R104SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R104SEMCR_SEMCID_Pos                      4
#define RCC_R104SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R104SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R105CIDCFGR register */
#define RCC_R105CIDCFGR_CFEN_Pos                      0
#define RCC_R105CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R105CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R105CIDCFGR_SEM_EN_Pos                    1
#define RCC_R105CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R105CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R105CIDCFGR_SCID_Pos                      4
#define RCC_R105CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R105CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R105CIDCFGR_SEMWLC_Pos                    16
#define RCC_R105CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R105CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R105SEMCR register */
#define RCC_R105SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R105SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R105SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R105SEMCR_SEMCID_Pos                      4
#define RCC_R105SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R105SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R106CIDCFGR register */
#define RCC_R106CIDCFGR_CFEN_Pos                      0
#define RCC_R106CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R106CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R106CIDCFGR_SEM_EN_Pos                    1
#define RCC_R106CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R106CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R106CIDCFGR_SCID_Pos                      4
#define RCC_R106CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R106CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R106CIDCFGR_SEMWLC_Pos                    16
#define RCC_R106CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R106CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R106SEMCR register */
#define RCC_R106SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R106SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R106SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R106SEMCR_SEMCID_Pos                      4
#define RCC_R106SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R106SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R107CIDCFGR register */
#define RCC_R107CIDCFGR_CFEN_Pos                      0
#define RCC_R107CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R107CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R107CIDCFGR_SEM_EN_Pos                    1
#define RCC_R107CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R107CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R107CIDCFGR_SCID_Pos                      4
#define RCC_R107CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R107CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R107CIDCFGR_SEMWLC_Pos                    16
#define RCC_R107CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R107CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R107SEMCR register */
#define RCC_R107SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R107SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R107SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R107SEMCR_SEMCID_Pos                      4
#define RCC_R107SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R107SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R108CIDCFGR register */
#define RCC_R108CIDCFGR_CFEN_Pos                      0
#define RCC_R108CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R108CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R108CIDCFGR_SEM_EN_Pos                    1
#define RCC_R108CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R108CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R108CIDCFGR_SCID_Pos                      4
#define RCC_R108CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R108CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R108CIDCFGR_SEMWLC_Pos                    16
#define RCC_R108CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R108CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R108SEMCR register */
#define RCC_R108SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R108SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R108SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R108SEMCR_SEMCID_Pos                      4
#define RCC_R108SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R108SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R109CIDCFGR register */
#define RCC_R109CIDCFGR_CFEN_Pos                      0
#define RCC_R109CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R109CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R109CIDCFGR_SEM_EN_Pos                    1
#define RCC_R109CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R109CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R109CIDCFGR_SCID_Pos                      4
#define RCC_R109CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R109CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R109CIDCFGR_SEMWLC_Pos                    16
#define RCC_R109CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R109CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R109SEMCR register */
#define RCC_R109SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R109SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R109SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R109SEMCR_SEMCID_Pos                      4
#define RCC_R109SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R109SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R110CIDCFGR register */
#define RCC_R110CIDCFGR_CFEN_Pos                      0
#define RCC_R110CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R110CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R110CIDCFGR_SEM_EN_Pos                    1
#define RCC_R110CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R110CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R110CIDCFGR_SCID_Pos                      4
#define RCC_R110CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R110CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R110CIDCFGR_SEMWLC_Pos                    16
#define RCC_R110CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R110CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R110SEMCR register */
#define RCC_R110SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R110SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R110SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R110SEMCR_SEMCID_Pos                      4
#define RCC_R110SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R110SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R111CIDCFGR register */
#define RCC_R111CIDCFGR_CFEN_Pos                      0
#define RCC_R111CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R111CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R111CIDCFGR_SEM_EN_Pos                    1
#define RCC_R111CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R111CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R111CIDCFGR_SCID_Pos                      4
#define RCC_R111CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R111CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R111CIDCFGR_SEMWLC_Pos                    16
#define RCC_R111CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R111CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R111SEMCR register */
#define RCC_R111SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R111SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R111SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R111SEMCR_SEMCID_Pos                      4
#define RCC_R111SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R111SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R112CIDCFGR register */
#define RCC_R112CIDCFGR_CFEN_Pos                      0
#define RCC_R112CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R112CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R112CIDCFGR_SEM_EN_Pos                    1
#define RCC_R112CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R112CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R112CIDCFGR_SCID_Pos                      4
#define RCC_R112CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R112CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R112CIDCFGR_SEMWLC_Pos                    16
#define RCC_R112CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R112CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R112SEMCR register */
#define RCC_R112SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R112SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R112SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R112SEMCR_SEMCID_Pos                      4
#define RCC_R112SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R112SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R113CIDCFGR register */
#define RCC_R113CIDCFGR_CFEN_Pos                      0
#define RCC_R113CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R113CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R113CIDCFGR_SEM_EN_Pos                    1
#define RCC_R113CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R113CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R113CIDCFGR_SCID_Pos                      4
#define RCC_R113CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R113CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R113CIDCFGR_SEMWLC_Pos                    16
#define RCC_R113CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R113CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R113SEMCR register */
#define RCC_R113SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R113SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R113SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R113SEMCR_SEMCID_Pos                      4
#define RCC_R113SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R113SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_GRSTCSETR register */
#define RCC_GRSTCSETR_SYSRST_Pos                      0
#define RCC_GRSTCSETR_SYSRST_Msk                      (0x1 << 0)
#define RCC_GRSTCSETR_SYSRST                          (0x1 << 0)

/* Bit fields for RCC_C1RSTCSETR register */
#define RCC_C1RSTCSETR_C1RST_Pos                      0
#define RCC_C1RSTCSETR_C1RST_Msk                      (0x1 << 0)
#define RCC_C1RSTCSETR_C1RST                          (0x1 << 0)

/* Bit fields for RCC_C1P1RSTCSETR register */
#define RCC_C1P1RSTCSETR_C1P1PORRST_Pos               0
#define RCC_C1P1RSTCSETR_C1P1PORRST_Msk               (0x1 << 0)
#define RCC_C1P1RSTCSETR_C1P1PORRST                   (0x1 << 0)
#define RCC_C1P1RSTCSETR_C1P1RST_Pos                  1
#define RCC_C1P1RSTCSETR_C1P1RST_Msk                  (0x1 << 1)
#define RCC_C1P1RSTCSETR_C1P1RST                      (0x1 << 1)

/* Bit fields for RCC_C2RSTCSETR register */
#define RCC_C2RSTCSETR_C2RST_Pos                      0
#define RCC_C2RSTCSETR_C2RST_Msk                      (0x1 << 0)
#define RCC_C2RSTCSETR_C2RST                          (0x1 << 0)

/* Bit fields for RCC_HWRSTSCLRR register */
#define RCC_HWRSTSCLRR_PORRSTF_Pos                    0
#define RCC_HWRSTSCLRR_PORRSTF_Msk                    (0x1 << 0)
#define RCC_HWRSTSCLRR_PORRSTF                        (0x1 << 0)
#define RCC_HWRSTSCLRR_BORRSTF_Pos                    1
#define RCC_HWRSTSCLRR_BORRSTF_Msk                    (0x1 << 1)
#define RCC_HWRSTSCLRR_BORRSTF                        (0x1 << 1)
#define RCC_HWRSTSCLRR_PADRSTF_Pos                    2
#define RCC_HWRSTSCLRR_PADRSTF_Msk                    (0x1 << 2)
#define RCC_HWRSTSCLRR_PADRSTF                        (0x1 << 2)
#define RCC_HWRSTSCLRR_HCSSRSTF_Pos                   3
#define RCC_HWRSTSCLRR_HCSSRSTF_Msk                   (0x1 << 3)
#define RCC_HWRSTSCLRR_HCSSRSTF                       (0x1 << 3)
#define RCC_HWRSTSCLRR_VCORERSTF_Pos                  4
#define RCC_HWRSTSCLRR_VCORERSTF_Msk                  (0x1 << 4)
#define RCC_HWRSTSCLRR_VCORERSTF                      (0x1 << 4)
#define RCC_HWRSTSCLRR_VCPURSTF_Pos                   5
#define RCC_HWRSTSCLRR_VCPURSTF_Msk                   (0x1 << 5)
#define RCC_HWRSTSCLRR_VCPURSTF                       (0x1 << 5)
#define RCC_HWRSTSCLRR_SYSC1RSTF_Pos                  6
#define RCC_HWRSTSCLRR_SYSC1RSTF_Msk                  (0x1 << 6)
#define RCC_HWRSTSCLRR_SYSC1RSTF                      (0x1 << 6)
#define RCC_HWRSTSCLRR_SYSC2RSTF_Pos                  7
#define RCC_HWRSTSCLRR_SYSC2RSTF_Msk                  (0x1 << 7)
#define RCC_HWRSTSCLRR_SYSC2RSTF                      (0x1 << 7)
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF_Pos               8
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF_Msk               (0x1 << 8)
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF                   (0x1 << 8)
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF_Pos               9
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF_Msk               (0x1 << 9)
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF                   (0x1 << 9)
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF_Pos               10
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF_Msk               (0x1 << 10)
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF                   (0x1 << 10)
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF_Pos               11
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF_Msk               (0x1 << 11)
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF                   (0x1 << 11)
#define RCC_HWRSTSCLRR_IWDG5SYSRSTF_Pos               12
#define RCC_HWRSTSCLRR_IWDG5SYSRSTF_Msk               (0x1 << 12)
#define RCC_HWRSTSCLRR_IWDG5SYSRSTF                   (0x1 << 12)
#define RCC_HWRSTSCLRR_C1RSTF_Pos                     13
#define RCC_HWRSTSCLRR_C1RSTF_Msk                     (0x1 << 13)
#define RCC_HWRSTSCLRR_C1RSTF                         (0x1 << 13)
#define RCC_HWRSTSCLRR_C2RSTF_Pos                     14
#define RCC_HWRSTSCLRR_C2RSTF_Msk                     (0x1 << 14)
#define RCC_HWRSTSCLRR_C2RSTF                         (0x1 << 14)
#define RCC_HWRSTSCLRR_C1P1RSTF_Pos                   16
#define RCC_HWRSTSCLRR_C1P1RSTF_Msk                   (0x1 << 16)
#define RCC_HWRSTSCLRR_C1P1RSTF                       (0x1 << 16)
#define RCC_HWRSTSCLRR_RETCRCERRRSTF_Pos              17
#define RCC_HWRSTSCLRR_RETCRCERRRSTF_Msk              (0x1 << 17)
#define RCC_HWRSTSCLRR_RETCRCERRRSTF                  (0x1 << 17)
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Pos          18
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Msk          (0x1 << 18)
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF              (0x1 << 18)
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Pos         19
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Msk         (0x1 << 19)
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF             (0x1 << 19)

/* Bit fields for RCC_C1BOOTRSTSSETR register */
#define RCC_C1BOOTRSTSSETR_PORRSTF_Pos                0
#define RCC_C1BOOTRSTSSETR_PORRSTF_Msk                (0x1 << 0)
#define RCC_C1BOOTRSTSSETR_PORRSTF                    (0x1 << 0)
#define RCC_C1BOOTRSTSSETR_BORRSTF_Pos                1
#define RCC_C1BOOTRSTSSETR_BORRSTF_Msk                (0x1 << 1)
#define RCC_C1BOOTRSTSSETR_BORRSTF                    (0x1 << 1)
#define RCC_C1BOOTRSTSSETR_PADRSTF_Pos                2
#define RCC_C1BOOTRSTSSETR_PADRSTF_Msk                (0x1 << 2)
#define RCC_C1BOOTRSTSSETR_PADRSTF                    (0x1 << 2)
#define RCC_C1BOOTRSTSSETR_HCSSRSTF_Pos               3
#define RCC_C1BOOTRSTSSETR_HCSSRSTF_Msk               (0x1 << 3)
#define RCC_C1BOOTRSTSSETR_HCSSRSTF                   (0x1 << 3)
#define RCC_C1BOOTRSTSSETR_VCORERSTF_Pos              4
#define RCC_C1BOOTRSTSSETR_VCORERSTF_Msk              (0x1 << 4)
#define RCC_C1BOOTRSTSSETR_VCORERSTF                  (0x1 << 4)
#define RCC_C1BOOTRSTSSETR_VCPURSTF_Pos               5
#define RCC_C1BOOTRSTSSETR_VCPURSTF_Msk               (0x1 << 5)
#define RCC_C1BOOTRSTSSETR_VCPURSTF                   (0x1 << 5)
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF_Pos              6
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF_Msk              (0x1 << 6)
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF                  (0x1 << 6)
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF_Pos              7
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF_Msk              (0x1 << 7)
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF                  (0x1 << 7)
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Pos           8
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Msk           (0x1 << 8)
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF               (0x1 << 8)
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Pos           9
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Msk           (0x1 << 9)
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF               (0x1 << 9)
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Pos           10
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Msk           (0x1 << 10)
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF               (0x1 << 10)
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Pos           11
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Msk           (0x1 << 11)
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF               (0x1 << 11)
#define RCC_C1BOOTRSTSSETR_IWDG5SYSRSTF_Pos           12
#define RCC_C1BOOTRSTSSETR_IWDG5SYSRSTF_Msk           (0x1 << 12)
#define RCC_C1BOOTRSTSSETR_IWDG5SYSRSTF               (0x1 << 12)
#define RCC_C1BOOTRSTSSETR_C1RSTF_Pos                 13
#define RCC_C1BOOTRSTSSETR_C1RSTF_Msk                 (0x1 << 13)
#define RCC_C1BOOTRSTSSETR_C1RSTF                     (0x1 << 13)
#define RCC_C1BOOTRSTSSETR_C1P1RSTF_Pos               16
#define RCC_C1BOOTRSTSSETR_C1P1RSTF_Msk               (0x1 << 16)
#define RCC_C1BOOTRSTSSETR_C1P1RSTF                   (0x1 << 16)
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Pos          17
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Msk          (0x1 << 17)
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF              (0x1 << 17)
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos      18
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk      (0x1 << 18)
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF          (0x1 << 18)
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos     19
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk     (0x1 << 19)
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF         (0x1 << 19)
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF_Pos             20
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF_Msk             (0x1 << 20)
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF                 (0x1 << 20)
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF_Pos             22
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF_Msk             (0x1 << 22)
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF                 (0x1 << 22)
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF_Pos             23
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF_Msk             (0x1 << 23)
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF                 (0x1 << 23)
#define RCC_C1BOOTRSTSSETR_IWDG1LOCRSTF_Pos           24
#define RCC_C1BOOTRSTSSETR_IWDG1LOCRSTF_Msk           (0x1 << 24)
#define RCC_C1BOOTRSTSSETR_IWDG1LOCRSTF               (0x1 << 24)
#define RCC_C1BOOTRSTSSETR_IWDG2LOCRSTF_Pos           25
#define RCC_C1BOOTRSTSSETR_IWDG2LOCRSTF_Msk           (0x1 << 25)
#define RCC_C1BOOTRSTSSETR_IWDG2LOCRSTF               (0x1 << 25)

/* Bit fields for RCC_C1BOOTRSTSCLRR register */
#define RCC_C1BOOTRSTSCLRR_PORRSTF_Pos                0
#define RCC_C1BOOTRSTSCLRR_PORRSTF_Msk                (0x1 << 0)
#define RCC_C1BOOTRSTSCLRR_PORRSTF                    (0x1 << 0)
#define RCC_C1BOOTRSTSCLRR_BORRSTF_Pos                1
#define RCC_C1BOOTRSTSCLRR_BORRSTF_Msk                (0x1 << 1)
#define RCC_C1BOOTRSTSCLRR_BORRSTF                    (0x1 << 1)
#define RCC_C1BOOTRSTSCLRR_PADRSTF_Pos                2
#define RCC_C1BOOTRSTSCLRR_PADRSTF_Msk                (0x1 << 2)
#define RCC_C1BOOTRSTSCLRR_PADRSTF                    (0x1 << 2)
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF_Pos               3
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF_Msk               (0x1 << 3)
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF                   (0x1 << 3)
#define RCC_C1BOOTRSTSCLRR_VCORERSTF_Pos              4
#define RCC_C1BOOTRSTSCLRR_VCORERSTF_Msk              (0x1 << 4)
#define RCC_C1BOOTRSTSCLRR_VCORERSTF                  (0x1 << 4)
#define RCC_C1BOOTRSTSCLRR_VCPURSTF_Pos               5
#define RCC_C1BOOTRSTSCLRR_VCPURSTF_Msk               (0x1 << 5)
#define RCC_C1BOOTRSTSCLRR_VCPURSTF                   (0x1 << 5)
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Pos              6
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Msk              (0x1 << 6)
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF                  (0x1 << 6)
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Pos              7
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Msk              (0x1 << 7)
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF                  (0x1 << 7)
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Pos           8
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Msk           (0x1 << 8)
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF               (0x1 << 8)
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Pos           9
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Msk           (0x1 << 9)
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF               (0x1 << 9)
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Pos           10
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Msk           (0x1 << 10)
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF               (0x1 << 10)
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Pos           11
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Msk           (0x1 << 11)
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF               (0x1 << 11)
#define RCC_C1BOOTRSTSCLRR_IWDG5SYSRSTF_Pos           12
#define RCC_C1BOOTRSTSCLRR_IWDG5SYSRSTF_Msk           (0x1 << 12)
#define RCC_C1BOOTRSTSCLRR_IWDG5SYSRSTF               (0x1 << 12)
#define RCC_C1BOOTRSTSCLRR_C1RSTF_Pos                 13
#define RCC_C1BOOTRSTSCLRR_C1RSTF_Msk                 (0x1 << 13)
#define RCC_C1BOOTRSTSCLRR_C1RSTF                     (0x1 << 13)
#define RCC_C1BOOTRSTSCLRR_C1P1RSTF_Pos               16
#define RCC_C1BOOTRSTSCLRR_C1P1RSTF_Msk               (0x1 << 16)
#define RCC_C1BOOTRSTSCLRR_C1P1RSTF                   (0x1 << 16)
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Pos          17
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Msk          (0x1 << 17)
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF              (0x1 << 17)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos      18
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk      (0x1 << 18)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF          (0x1 << 18)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos     19
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk     (0x1 << 19)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF         (0x1 << 19)
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Pos             20
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Msk             (0x1 << 20)
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF                 (0x1 << 20)
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Pos             22
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Msk             (0x1 << 22)
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF                 (0x1 << 22)
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Pos             23
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Msk             (0x1 << 23)
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF                 (0x1 << 23)
#define RCC_C1BOOTRSTSCLRR_IWDG1LOCRSTF_Pos           24
#define RCC_C1BOOTRSTSCLRR_IWDG1LOCRSTF_Msk           (0x1 << 24)
#define RCC_C1BOOTRSTSCLRR_IWDG1LOCRSTF               (0x1 << 24)
#define RCC_C1BOOTRSTSCLRR_IWDG2LOCRSTF_Pos           25
#define RCC_C1BOOTRSTSCLRR_IWDG2LOCRSTF_Msk           (0x1 << 25)
#define RCC_C1BOOTRSTSCLRR_IWDG2LOCRSTF               (0x1 << 25)

/* Bit fields for RCC_C2BOOTRSTSSETR register */
#define RCC_C2BOOTRSTSSETR_PORRSTF_Pos                0
#define RCC_C2BOOTRSTSSETR_PORRSTF_Msk                (0x1 << 0)
#define RCC_C2BOOTRSTSSETR_PORRSTF                    (0x1 << 0)
#define RCC_C2BOOTRSTSSETR_BORRSTF_Pos                1
#define RCC_C2BOOTRSTSSETR_BORRSTF_Msk                (0x1 << 1)
#define RCC_C2BOOTRSTSSETR_BORRSTF                    (0x1 << 1)
#define RCC_C2BOOTRSTSSETR_PADRSTF_Pos                2
#define RCC_C2BOOTRSTSSETR_PADRSTF_Msk                (0x1 << 2)
#define RCC_C2BOOTRSTSSETR_PADRSTF                    (0x1 << 2)
#define RCC_C2BOOTRSTSSETR_HCSSRSTF_Pos               3
#define RCC_C2BOOTRSTSSETR_HCSSRSTF_Msk               (0x1 << 3)
#define RCC_C2BOOTRSTSSETR_HCSSRSTF                   (0x1 << 3)
#define RCC_C2BOOTRSTSSETR_VCORERSTF_Pos              4
#define RCC_C2BOOTRSTSSETR_VCORERSTF_Msk              (0x1 << 4)
#define RCC_C2BOOTRSTSSETR_VCORERSTF                  (0x1 << 4)
#define RCC_C2BOOTRSTSSETR_VCPURSTF_Pos               5
#define RCC_C2BOOTRSTSSETR_VCPURSTF_Msk               (0x1 << 5)
#define RCC_C2BOOTRSTSSETR_VCPURSTF                   (0x1 << 5)
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF_Pos              6
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF_Msk              (0x1 << 6)
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF                  (0x1 << 6)
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF_Pos              7
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF_Msk              (0x1 << 7)
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF                  (0x1 << 7)
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Pos           8
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Msk           (0x1 << 8)
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF               (0x1 << 8)
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Pos           9
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Msk           (0x1 << 9)
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF               (0x1 << 9)
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Pos           10
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Msk           (0x1 << 10)
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF               (0x1 << 10)
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Pos           11
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Msk           (0x1 << 11)
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF               (0x1 << 11)
#define RCC_C2BOOTRSTSSETR_IWDG5SYSRSTF_Pos           12
#define RCC_C2BOOTRSTSSETR_IWDG5SYSRSTF_Msk           (0x1 << 12)
#define RCC_C2BOOTRSTSSETR_IWDG5SYSRSTF               (0x1 << 12)
#define RCC_C2BOOTRSTSSETR_C2RSTF_Pos                 14
#define RCC_C2BOOTRSTSSETR_C2RSTF_Msk                 (0x1 << 14)
#define RCC_C2BOOTRSTSSETR_C2RSTF                     (0x1 << 14)
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Pos          17
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Msk          (0x1 << 17)
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF              (0x1 << 17)
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos      18
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk      (0x1 << 18)
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF          (0x1 << 18)
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos     19
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk     (0x1 << 19)
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF         (0x1 << 19)
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF_Pos             21
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF_Msk             (0x1 << 21)
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF                 (0x1 << 21)
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF_Pos             23
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF_Msk             (0x1 << 23)
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF                 (0x1 << 23)
#define RCC_C2BOOTRSTSSETR_IWDG3LOCRSTF_Pos           26
#define RCC_C2BOOTRSTSSETR_IWDG3LOCRSTF_Msk           (0x1 << 26)
#define RCC_C2BOOTRSTSSETR_IWDG3LOCRSTF               (0x1 << 26)
#define RCC_C2BOOTRSTSSETR_IWDG4LOCRSTF_Pos           27
#define RCC_C2BOOTRSTSSETR_IWDG4LOCRSTF_Msk           (0x1 << 27)
#define RCC_C2BOOTRSTSSETR_IWDG4LOCRSTF               (0x1 << 27)

/* Bit fields for RCC_C2BOOTRSTSCLRR register */
#define RCC_C2BOOTRSTSCLRR_PORRSTF_Pos                0
#define RCC_C2BOOTRSTSCLRR_PORRSTF_Msk                (0x1 << 0)
#define RCC_C2BOOTRSTSCLRR_PORRSTF                    (0x1 << 0)
#define RCC_C2BOOTRSTSCLRR_BORRSTF_Pos                1
#define RCC_C2BOOTRSTSCLRR_BORRSTF_Msk                (0x1 << 1)
#define RCC_C2BOOTRSTSCLRR_BORRSTF                    (0x1 << 1)
#define RCC_C2BOOTRSTSCLRR_PADRSTF_Pos                2
#define RCC_C2BOOTRSTSCLRR_PADRSTF_Msk                (0x1 << 2)
#define RCC_C2BOOTRSTSCLRR_PADRSTF                    (0x1 << 2)
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF_Pos               3
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF_Msk               (0x1 << 3)
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF                   (0x1 << 3)
#define RCC_C2BOOTRSTSCLRR_VCORERSTF_Pos              4
#define RCC_C2BOOTRSTSCLRR_VCORERSTF_Msk              (0x1 << 4)
#define RCC_C2BOOTRSTSCLRR_VCORERSTF                  (0x1 << 4)
#define RCC_C2BOOTRSTSCLRR_VCPURSTF_Pos               5
#define RCC_C2BOOTRSTSCLRR_VCPURSTF_Msk               (0x1 << 5)
#define RCC_C2BOOTRSTSCLRR_VCPURSTF                   (0x1 << 5)
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Pos              6
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Msk              (0x1 << 6)
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF                  (0x1 << 6)
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Pos              7
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Msk              (0x1 << 7)
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF                  (0x1 << 7)
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Pos           8
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Msk           (0x1 << 8)
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF               (0x1 << 8)
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Pos           9
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Msk           (0x1 << 9)
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF               (0x1 << 9)
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Pos           10
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Msk           (0x1 << 10)
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF               (0x1 << 10)
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Pos           11
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Msk           (0x1 << 11)
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF               (0x1 << 11)
#define RCC_C2BOOTRSTSCLRR_IWDG5SYSRSTF_Pos           12
#define RCC_C2BOOTRSTSCLRR_IWDG5SYSRSTF_Msk           (0x1 << 12)
#define RCC_C2BOOTRSTSCLRR_IWDG5SYSRSTF               (0x1 << 12)
#define RCC_C2BOOTRSTSCLRR_C2RSTF_Pos                 14
#define RCC_C2BOOTRSTSCLRR_C2RSTF_Msk                 (0x1 << 14)
#define RCC_C2BOOTRSTSCLRR_C2RSTF                     (0x1 << 14)
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Pos          17
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Msk          (0x1 << 17)
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF              (0x1 << 17)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos      18
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk      (0x1 << 18)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF          (0x1 << 18)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos     19
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk     (0x1 << 19)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF         (0x1 << 19)
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Pos             21
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Msk             (0x1 << 21)
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF                 (0x1 << 21)
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Pos             23
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Msk             (0x1 << 23)
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF                 (0x1 << 23)
#define RCC_C2BOOTRSTSCLRR_IWDG3LOCRSTF_Pos           26
#define RCC_C2BOOTRSTSCLRR_IWDG3LOCRSTF_Msk           (0x1 << 26)
#define RCC_C2BOOTRSTSCLRR_IWDG3LOCRSTF               (0x1 << 26)
#define RCC_C2BOOTRSTSCLRR_IWDG4LOCRSTF_Pos           27
#define RCC_C2BOOTRSTSCLRR_IWDG4LOCRSTF_Msk           (0x1 << 27)
#define RCC_C2BOOTRSTSCLRR_IWDG4LOCRSTF               (0x1 << 27)

/* Bit fields for RCC_C1SREQSETR register */
#define RCC_C1SREQSETR_STPREQ_P0_Pos                  0
#define RCC_C1SREQSETR_STPREQ_P0_Msk                  (0x1 << 0)
#define RCC_C1SREQSETR_STPREQ_P0                      (0x1 << 0)
#define RCC_C1SREQSETR_STPREQ_P1_Pos                  1
#define RCC_C1SREQSETR_STPREQ_P1_Msk                  (0x1 << 1)
#define RCC_C1SREQSETR_STPREQ_P1                      (0x1 << 1)

/* Bit fields for RCC_C1SREQCLRR register */
#define RCC_C1SREQCLRR_STPREQ_P0_Pos                  0
#define RCC_C1SREQCLRR_STPREQ_P0_Msk                  (0x1 << 0)
#define RCC_C1SREQCLRR_STPREQ_P0                      (0x1 << 0)
#define RCC_C1SREQCLRR_STPREQ_P1_Pos                  1
#define RCC_C1SREQCLRR_STPREQ_P1_Msk                  (0x1 << 1)
#define RCC_C1SREQCLRR_STPREQ_P1                      (0x1 << 1)

/* Bit fields for RCC_CPUBOOTCR register */
#define RCC_CPUBOOTCR_BOOT_CPU2_Pos                   0
#define RCC_CPUBOOTCR_BOOT_CPU2_Msk                   (0x1 << 0)
#define RCC_CPUBOOTCR_BOOT_CPU2                       (0x1 << 0)
#define RCC_CPUBOOTCR_BOOT_CPU1_Pos                   1
#define RCC_CPUBOOTCR_BOOT_CPU1_Msk                   (0x1 << 1)
#define RCC_CPUBOOTCR_BOOT_CPU1                       (0x1 << 1)

/* Bit fields for RCC_STBYBOOTCR register */
#define RCC_STBYBOOTCR_LEGACY_BEN_Pos                 0
#define RCC_STBYBOOTCR_LEGACY_BEN_Msk                 (0x1 << 0)
#define RCC_STBYBOOTCR_LEGACY_BEN                     (0x1 << 0)
#define RCC_STBYBOOTCR_CPU_BEN_SEL_Pos                1
#define RCC_STBYBOOTCR_CPU_BEN_SEL_Msk                (0x1 << 1)
#define RCC_STBYBOOTCR_CPU_BEN_SEL                    (0x1 << 1)
#define RCC_STBYBOOTCR_COLD_CPU2_Pos                  2
#define RCC_STBYBOOTCR_COLD_CPU2_Msk                  (0x1 << 2)
#define RCC_STBYBOOTCR_COLD_CPU2                      (0x1 << 2)
#define RCC_STBYBOOTCR_CPU2_HW_BEN_Pos                4
#define RCC_STBYBOOTCR_CPU2_HW_BEN_Msk                (0x1 << 4)
#define RCC_STBYBOOTCR_CPU2_HW_BEN                    (0x1 << 4)
#define RCC_STBYBOOTCR_CPU1_HW_BEN_Pos                5
#define RCC_STBYBOOTCR_CPU1_HW_BEN_Msk                (0x1 << 5)
#define RCC_STBYBOOTCR_CPU1_HW_BEN                    (0x1 << 5)
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Pos           8
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Msk           (0x1 << 8)
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN               (0x1 << 8)

/* Bit fields for RCC_BDCR register */
#define RCC_BDCR_LSEON_Pos                            0
#define RCC_BDCR_LSEON_Msk                            (0x1 << 0)
#define RCC_BDCR_LSEON                                (0x1 << 0)
#define RCC_BDCR_LSEBYP_Pos                           1
#define RCC_BDCR_LSEBYP_Msk                           (0x1 << 1)
#define RCC_BDCR_LSEBYP                               (0x1 << 1)
#define RCC_BDCR_LSERDY_Pos                           2
#define RCC_BDCR_LSERDY_Msk                           (0x1 << 2)
#define RCC_BDCR_LSERDY                               (0x1 << 2)
#define RCC_BDCR_LSEDIGBYP_Pos                        3
#define RCC_BDCR_LSEDIGBYP_Msk                        (0x1 << 3)
#define RCC_BDCR_LSEDIGBYP                            (0x1 << 3)
#define RCC_BDCR_LSEDRV_Pos                           4
#define RCC_BDCR_LSEDRV_Msk                           (0x3 << 4)
#define RCC_BDCR_LSEDRV                               (0x3 << 4)
#define RCC_BDCR_LSECSSON_Pos                         6
#define RCC_BDCR_LSECSSON_Msk                         (0x1 << 6)
#define RCC_BDCR_LSECSSON                             (0x1 << 6)
#define RCC_BDCR_LSEGFON_Pos                          7
#define RCC_BDCR_LSEGFON_Msk                          (0x1 << 7)
#define RCC_BDCR_LSEGFON                              (0x1 << 7)
#define RCC_BDCR_LSECSSD_Pos                          8
#define RCC_BDCR_LSECSSD_Msk                          (0x1 << 8)
#define RCC_BDCR_LSECSSD                              (0x1 << 8)
#define RCC_BDCR_LSION_Pos                            9
#define RCC_BDCR_LSION_Msk                            (0x1 << 9)
#define RCC_BDCR_LSION                                (0x1 << 9)
#define RCC_BDCR_LSIRDY_Pos                           10
#define RCC_BDCR_LSIRDY_Msk                           (0x1 << 10)
#define RCC_BDCR_LSIRDY                               (0x1 << 10)
#define RCC_BDCR_RTCSRC_Pos                           16
#define RCC_BDCR_RTCSRC_Msk                           (0x3 << 16)
#define RCC_BDCR_RTCSRC                               (0x3 << 16)
#define RCC_BDCR_RTCCKEN_Pos                          20
#define RCC_BDCR_RTCCKEN_Msk                          (0x1 << 20)
#define RCC_BDCR_RTCCKEN                              (0x1 << 20)
#define RCC_BDCR_CSIFREQSEL_Pos                       24
#define RCC_BDCR_CSIFREQSEL_Msk                       (0x1 << 24)
#define RCC_BDCR_CSIFREQSEL                           (0x1 << 24)
#define RCC_BDCR_C3SYSTICKSEL_Pos                     25
#define RCC_BDCR_C3SYSTICKSEL_Msk                     (0x1 << 25)
#define RCC_BDCR_C3SYSTICKSEL                         (0x1 << 25)
#define RCC_BDCR_VSWRST_Pos                           31
#define RCC_BDCR_VSWRST_Msk                           (0x1 << 31)
#define RCC_BDCR_VSWRST                               (0x1 << 31)

/* Bit fields for RCC_SRDCR register */
#define RCC_SRDCR_CSION_Pos                           0
#define RCC_SRDCR_CSION_Msk                           (0x1 << 0)
#define RCC_SRDCR_CSION                               (0x1 << 0)
#define RCC_SRDCR_CSIKERON_Pos                        1
#define RCC_SRDCR_CSIKERON_Msk                        (0x1 << 1)
#define RCC_SRDCR_CSIKERON                            (0x1 << 1)
#define RCC_SRDCR_CSIRDY_Pos                          2
#define RCC_SRDCR_CSIRDY_Msk                          (0x1 << 2)
#define RCC_SRDCR_CSIRDY                              (0x1 << 2)
#define RCC_SRDCR_CECKERSEL_Pos                       8
#define RCC_SRDCR_CECKERSEL_Msk                       (0x1 << 8)
#define RCC_SRDCR_CECKERSEL                           (0x1 << 8)
#define RCC_SRDCR_D3PERCKSEL_Pos                      16
#define RCC_SRDCR_D3PERCKSEL_Msk                      (0x3 << 16)
#define RCC_SRDCR_D3PERCKSEL                          (0x3 << 16)

/* Bit fields for RCC_SRDSR register */
#define RCC_SRDSR_D3STATE_Pos                         0
#define RCC_SRDSR_D3STATE_Msk                         (0x3 << 0)
#define RCC_SRDSR_D3STATE                             (0x3 << 0)

/* Bit fields for RCC_RDCR register */
#define RCC_RDCR_MRD_Pos                              16
#define RCC_RDCR_MRD_Msk                              (0x1f << 16)
#define RCC_RDCR_MRD                                  (0x1f << 16)
#define RCC_RDCR_EADLY_Pos                            24
#define RCC_RDCR_EADLY_Msk                            (0x7 << 24)
#define RCC_RDCR_EADLY                                (0x7 << 24)

/* Bit fields for RCC_PWRLPDLYCR register */
#define RCC_PWRLPDLYCR_PWRLP_DLY_Pos                  0
#define RCC_PWRLPDLYCR_PWRLP_DLY_Msk                  (0x3fffff << 0)
#define RCC_PWRLPDLYCR_PWRLP_DLY                      (0x3fffff << 0)
#define RCC_PWRLPDLYCR_CPU2TMPSKP_Pos                 24
#define RCC_PWRLPDLYCR_CPU2TMPSKP_Msk                 (0x1 << 24)
#define RCC_PWRLPDLYCR_CPU2TMPSKP                     (0x1 << 24)

/* Bit fields for RCC_C1CIESETR register */
#define RCC_C1CIESETR_LSIRDYIE_Pos                    0
#define RCC_C1CIESETR_LSIRDYIE_Msk                    (0x1 << 0)
#define RCC_C1CIESETR_LSIRDYIE                        (0x1 << 0)
#define RCC_C1CIESETR_LSERDYIE_Pos                    1
#define RCC_C1CIESETR_LSERDYIE_Msk                    (0x1 << 1)
#define RCC_C1CIESETR_LSERDYIE                        (0x1 << 1)
#define RCC_C1CIESETR_HSIRDYIE_Pos                    2
#define RCC_C1CIESETR_HSIRDYIE_Msk                    (0x1 << 2)
#define RCC_C1CIESETR_HSIRDYIE                        (0x1 << 2)
#define RCC_C1CIESETR_HSERDYIE_Pos                    3
#define RCC_C1CIESETR_HSERDYIE_Msk                    (0x1 << 3)
#define RCC_C1CIESETR_HSERDYIE                        (0x1 << 3)
#define RCC_C1CIESETR_CSIRDYIE_Pos                    4
#define RCC_C1CIESETR_CSIRDYIE_Msk                    (0x1 << 4)
#define RCC_C1CIESETR_CSIRDYIE                        (0x1 << 4)
#define RCC_C1CIESETR_SHSIRDYIE_Pos                   5
#define RCC_C1CIESETR_SHSIRDYIE_Msk                   (0x1 << 5)
#define RCC_C1CIESETR_SHSIRDYIE                       (0x1 << 5)
#define RCC_C1CIESETR_PLL1RDYIE_Pos                   6
#define RCC_C1CIESETR_PLL1RDYIE_Msk                   (0x1 << 6)
#define RCC_C1CIESETR_PLL1RDYIE                       (0x1 << 6)
#define RCC_C1CIESETR_PLL2RDYIE_Pos                   7
#define RCC_C1CIESETR_PLL2RDYIE_Msk                   (0x1 << 7)
#define RCC_C1CIESETR_PLL2RDYIE                       (0x1 << 7)
#define RCC_C1CIESETR_PLL3RDYIE_Pos                   8
#define RCC_C1CIESETR_PLL3RDYIE_Msk                   (0x1 << 8)
#define RCC_C1CIESETR_PLL3RDYIE                       (0x1 << 8)
#define RCC_C1CIESETR_PLL4RDYIE_Pos                   9
#define RCC_C1CIESETR_PLL4RDYIE_Msk                   (0x1 << 9)
#define RCC_C1CIESETR_PLL4RDYIE                       (0x1 << 9)
#define RCC_C1CIESETR_PLL5RDYIE_Pos                   10
#define RCC_C1CIESETR_PLL5RDYIE_Msk                   (0x1 << 10)
#define RCC_C1CIESETR_PLL5RDYIE                       (0x1 << 10)
#define RCC_C1CIESETR_PLL6RDYIE_Pos                   11
#define RCC_C1CIESETR_PLL6RDYIE_Msk                   (0x1 << 11)
#define RCC_C1CIESETR_PLL6RDYIE                       (0x1 << 11)
#define RCC_C1CIESETR_PLL7RDYIE_Pos                   12
#define RCC_C1CIESETR_PLL7RDYIE_Msk                   (0x1 << 12)
#define RCC_C1CIESETR_PLL7RDYIE                       (0x1 << 12)
#define RCC_C1CIESETR_PLL8RDYIE_Pos                   13
#define RCC_C1CIESETR_PLL8RDYIE_Msk                   (0x1 << 13)
#define RCC_C1CIESETR_PLL8RDYIE                       (0x1 << 13)
#define RCC_C1CIESETR_LSECSSIE_Pos                    16
#define RCC_C1CIESETR_LSECSSIE_Msk                    (0x1 << 16)
#define RCC_C1CIESETR_LSECSSIE                        (0x1 << 16)
#define RCC_C1CIESETR_WKUPIE_Pos                      20
#define RCC_C1CIESETR_WKUPIE_Msk                      (0x1 << 20)
#define RCC_C1CIESETR_WKUPIE                          (0x1 << 20)

/* Bit fields for RCC_C1CIFCLRR register */
#define RCC_C1CIFCLRR_LSIRDYF_Pos                     0
#define RCC_C1CIFCLRR_LSIRDYF_Msk                     (0x1 << 0)
#define RCC_C1CIFCLRR_LSIRDYF                         (0x1 << 0)
#define RCC_C1CIFCLRR_LSERDYF_Pos                     1
#define RCC_C1CIFCLRR_LSERDYF_Msk                     (0x1 << 1)
#define RCC_C1CIFCLRR_LSERDYF                         (0x1 << 1)
#define RCC_C1CIFCLRR_HSIRDYF_Pos                     2
#define RCC_C1CIFCLRR_HSIRDYF_Msk                     (0x1 << 2)
#define RCC_C1CIFCLRR_HSIRDYF                         (0x1 << 2)
#define RCC_C1CIFCLRR_HSERDYF_Pos                     3
#define RCC_C1CIFCLRR_HSERDYF_Msk                     (0x1 << 3)
#define RCC_C1CIFCLRR_HSERDYF                         (0x1 << 3)
#define RCC_C1CIFCLRR_CSIRDYF_Pos                     4
#define RCC_C1CIFCLRR_CSIRDYF_Msk                     (0x1 << 4)
#define RCC_C1CIFCLRR_CSIRDYF                         (0x1 << 4)
#define RCC_C1CIFCLRR_SHSIRDYF_Pos                    5
#define RCC_C1CIFCLRR_SHSIRDYF_Msk                    (0x1 << 5)
#define RCC_C1CIFCLRR_SHSIRDYF                        (0x1 << 5)
#define RCC_C1CIFCLRR_PLL1RDYF_Pos                    6
#define RCC_C1CIFCLRR_PLL1RDYF_Msk                    (0x1 << 6)
#define RCC_C1CIFCLRR_PLL1RDYF                        (0x1 << 6)
#define RCC_C1CIFCLRR_PLL2RDYF_Pos                    7
#define RCC_C1CIFCLRR_PLL2RDYF_Msk                    (0x1 << 7)
#define RCC_C1CIFCLRR_PLL2RDYF                        (0x1 << 7)
#define RCC_C1CIFCLRR_PLL3RDYF_Pos                    8
#define RCC_C1CIFCLRR_PLL3RDYF_Msk                    (0x1 << 8)
#define RCC_C1CIFCLRR_PLL3RDYF                        (0x1 << 8)
#define RCC_C1CIFCLRR_PLL4RDYF_Pos                    9
#define RCC_C1CIFCLRR_PLL4RDYF_Msk                    (0x1 << 9)
#define RCC_C1CIFCLRR_PLL4RDYF                        (0x1 << 9)
#define RCC_C1CIFCLRR_PLL5RDYF_Pos                    10
#define RCC_C1CIFCLRR_PLL5RDYF_Msk                    (0x1 << 10)
#define RCC_C1CIFCLRR_PLL5RDYF                        (0x1 << 10)
#define RCC_C1CIFCLRR_PLL6RDYF_Pos                    11
#define RCC_C1CIFCLRR_PLL6RDYF_Msk                    (0x1 << 11)
#define RCC_C1CIFCLRR_PLL6RDYF                        (0x1 << 11)
#define RCC_C1CIFCLRR_PLL7RDYF_Pos                    12
#define RCC_C1CIFCLRR_PLL7RDYF_Msk                    (0x1 << 12)
#define RCC_C1CIFCLRR_PLL7RDYF                        (0x1 << 12)
#define RCC_C1CIFCLRR_PLL8RDYF_Pos                    13
#define RCC_C1CIFCLRR_PLL8RDYF_Msk                    (0x1 << 13)
#define RCC_C1CIFCLRR_PLL8RDYF                        (0x1 << 13)
#define RCC_C1CIFCLRR_LSECSSF_Pos                     16
#define RCC_C1CIFCLRR_LSECSSF_Msk                     (0x1 << 16)
#define RCC_C1CIFCLRR_LSECSSF                         (0x1 << 16)
#define RCC_C1CIFCLRR_WKUPF_Pos                       20
#define RCC_C1CIFCLRR_WKUPF_Msk                       (0x1 << 20)
#define RCC_C1CIFCLRR_WKUPF                           (0x1 << 20)

/* Bit fields for RCC_C2CIESETR register */
#define RCC_C2CIESETR_LSIRDYIE_Pos                    0
#define RCC_C2CIESETR_LSIRDYIE_Msk                    (0x1 << 0)
#define RCC_C2CIESETR_LSIRDYIE                        (0x1 << 0)
#define RCC_C2CIESETR_LSERDYIE_Pos                    1
#define RCC_C2CIESETR_LSERDYIE_Msk                    (0x1 << 1)
#define RCC_C2CIESETR_LSERDYIE                        (0x1 << 1)
#define RCC_C2CIESETR_HSIRDYIE_Pos                    2
#define RCC_C2CIESETR_HSIRDYIE_Msk                    (0x1 << 2)
#define RCC_C2CIESETR_HSIRDYIE                        (0x1 << 2)
#define RCC_C2CIESETR_HSERDYIE_Pos                    3
#define RCC_C2CIESETR_HSERDYIE_Msk                    (0x1 << 3)
#define RCC_C2CIESETR_HSERDYIE                        (0x1 << 3)
#define RCC_C2CIESETR_CSIRDYIE_Pos                    4
#define RCC_C2CIESETR_CSIRDYIE_Msk                    (0x1 << 4)
#define RCC_C2CIESETR_CSIRDYIE                        (0x1 << 4)
#define RCC_C2CIESETR_SHSIRDYIE_Pos                   5
#define RCC_C2CIESETR_SHSIRDYIE_Msk                   (0x1 << 5)
#define RCC_C2CIESETR_SHSIRDYIE                       (0x1 << 5)
#define RCC_C2CIESETR_PLL1RDYIE_Pos                   6
#define RCC_C2CIESETR_PLL1RDYIE_Msk                   (0x1 << 6)
#define RCC_C2CIESETR_PLL1RDYIE                       (0x1 << 6)
#define RCC_C2CIESETR_PLL2RDYIE_Pos                   7
#define RCC_C2CIESETR_PLL2RDYIE_Msk                   (0x1 << 7)
#define RCC_C2CIESETR_PLL2RDYIE                       (0x1 << 7)
#define RCC_C2CIESETR_PLL3RDYIE_Pos                   8
#define RCC_C2CIESETR_PLL3RDYIE_Msk                   (0x1 << 8)
#define RCC_C2CIESETR_PLL3RDYIE                       (0x1 << 8)
#define RCC_C2CIESETR_PLL4RDYIE_Pos                   9
#define RCC_C2CIESETR_PLL4RDYIE_Msk                   (0x1 << 9)
#define RCC_C2CIESETR_PLL4RDYIE                       (0x1 << 9)
#define RCC_C2CIESETR_PLL5RDYIE_Pos                   10
#define RCC_C2CIESETR_PLL5RDYIE_Msk                   (0x1 << 10)
#define RCC_C2CIESETR_PLL5RDYIE                       (0x1 << 10)
#define RCC_C2CIESETR_PLL6RDYIE_Pos                   11
#define RCC_C2CIESETR_PLL6RDYIE_Msk                   (0x1 << 11)
#define RCC_C2CIESETR_PLL6RDYIE                       (0x1 << 11)
#define RCC_C2CIESETR_PLL7RDYIE_Pos                   12
#define RCC_C2CIESETR_PLL7RDYIE_Msk                   (0x1 << 12)
#define RCC_C2CIESETR_PLL7RDYIE                       (0x1 << 12)
#define RCC_C2CIESETR_PLL8RDYIE_Pos                   13
#define RCC_C2CIESETR_PLL8RDYIE_Msk                   (0x1 << 13)
#define RCC_C2CIESETR_PLL8RDYIE                       (0x1 << 13)
#define RCC_C2CIESETR_LSECSSIE_Pos                    16
#define RCC_C2CIESETR_LSECSSIE_Msk                    (0x1 << 16)
#define RCC_C2CIESETR_LSECSSIE                        (0x1 << 16)
#define RCC_C2CIESETR_WKUPIE_Pos                      20
#define RCC_C2CIESETR_WKUPIE_Msk                      (0x1 << 20)
#define RCC_C2CIESETR_WKUPIE                          (0x1 << 20)

/* Bit fields for RCC_C2CIFCLRR register */
#define RCC_C2CIFCLRR_LSIRDYF_Pos                     0
#define RCC_C2CIFCLRR_LSIRDYF_Msk                     (0x1 << 0)
#define RCC_C2CIFCLRR_LSIRDYF                         (0x1 << 0)
#define RCC_C2CIFCLRR_LSERDYF_Pos                     1
#define RCC_C2CIFCLRR_LSERDYF_Msk                     (0x1 << 1)
#define RCC_C2CIFCLRR_LSERDYF                         (0x1 << 1)
#define RCC_C2CIFCLRR_HSIRDYF_Pos                     2
#define RCC_C2CIFCLRR_HSIRDYF_Msk                     (0x1 << 2)
#define RCC_C2CIFCLRR_HSIRDYF                         (0x1 << 2)
#define RCC_C2CIFCLRR_HSERDYF_Pos                     3
#define RCC_C2CIFCLRR_HSERDYF_Msk                     (0x1 << 3)
#define RCC_C2CIFCLRR_HSERDYF                         (0x1 << 3)
#define RCC_C2CIFCLRR_CSIRDYF_Pos                     4
#define RCC_C2CIFCLRR_CSIRDYF_Msk                     (0x1 << 4)
#define RCC_C2CIFCLRR_CSIRDYF                         (0x1 << 4)
#define RCC_C2CIFCLRR_SHSIRDYF_Pos                    5
#define RCC_C2CIFCLRR_SHSIRDYF_Msk                    (0x1 << 5)
#define RCC_C2CIFCLRR_SHSIRDYF                        (0x1 << 5)
#define RCC_C2CIFCLRR_PLL1RDYF_Pos                    6
#define RCC_C2CIFCLRR_PLL1RDYF_Msk                    (0x1 << 6)
#define RCC_C2CIFCLRR_PLL1RDYF                        (0x1 << 6)
#define RCC_C2CIFCLRR_PLL2RDYF_Pos                    7
#define RCC_C2CIFCLRR_PLL2RDYF_Msk                    (0x1 << 7)
#define RCC_C2CIFCLRR_PLL2RDYF                        (0x1 << 7)
#define RCC_C2CIFCLRR_PLL3RDYF_Pos                    8
#define RCC_C2CIFCLRR_PLL3RDYF_Msk                    (0x1 << 8)
#define RCC_C2CIFCLRR_PLL3RDYF                        (0x1 << 8)
#define RCC_C2CIFCLRR_PLL4RDYF_Pos                    9
#define RCC_C2CIFCLRR_PLL4RDYF_Msk                    (0x1 << 9)
#define RCC_C2CIFCLRR_PLL4RDYF                        (0x1 << 9)
#define RCC_C2CIFCLRR_PLL5RDYF_Pos                    10
#define RCC_C2CIFCLRR_PLL5RDYF_Msk                    (0x1 << 10)
#define RCC_C2CIFCLRR_PLL5RDYF                        (0x1 << 10)
#define RCC_C2CIFCLRR_PLL6RDYF_Pos                    11
#define RCC_C2CIFCLRR_PLL6RDYF_Msk                    (0x1 << 11)
#define RCC_C2CIFCLRR_PLL6RDYF                        (0x1 << 11)
#define RCC_C2CIFCLRR_PLL7RDYF_Pos                    12
#define RCC_C2CIFCLRR_PLL7RDYF_Msk                    (0x1 << 12)
#define RCC_C2CIFCLRR_PLL7RDYF                        (0x1 << 12)
#define RCC_C2CIFCLRR_PLL8RDYF_Pos                    13
#define RCC_C2CIFCLRR_PLL8RDYF_Msk                    (0x1 << 13)
#define RCC_C2CIFCLRR_PLL8RDYF                        (0x1 << 13)
#define RCC_C2CIFCLRR_LSECSSF_Pos                     16
#define RCC_C2CIFCLRR_LSECSSF_Msk                     (0x1 << 16)
#define RCC_C2CIFCLRR_LSECSSF                         (0x1 << 16)
#define RCC_C2CIFCLRR_WKUPF_Pos                       20
#define RCC_C2CIFCLRR_WKUPF_Msk                       (0x1 << 20)
#define RCC_C2CIFCLRR_WKUPF                           (0x1 << 20)

/* Bit fields for RCC_IWDGC1FZSETR register */
#define RCC_IWDGC1FZSETR_FZ_IWDG1_Pos                 0
#define RCC_IWDGC1FZSETR_FZ_IWDG1_Msk                 (0x1 << 0)
#define RCC_IWDGC1FZSETR_FZ_IWDG1                     (0x1 << 0)
#define RCC_IWDGC1FZSETR_FZ_IWDG2_Pos                 1
#define RCC_IWDGC1FZSETR_FZ_IWDG2_Msk                 (0x1 << 1)
#define RCC_IWDGC1FZSETR_FZ_IWDG2                     (0x1 << 1)

/* Bit fields for RCC_IWDGC1FZCLRR register */
#define RCC_IWDGC1FZCLRR_FZ_IWDG1_Pos                 0
#define RCC_IWDGC1FZCLRR_FZ_IWDG1_Msk                 (0x1 << 0)
#define RCC_IWDGC1FZCLRR_FZ_IWDG1                     (0x1 << 0)
#define RCC_IWDGC1FZCLRR_FZ_IWDG2_Pos                 1
#define RCC_IWDGC1FZCLRR_FZ_IWDG2_Msk                 (0x1 << 1)
#define RCC_IWDGC1FZCLRR_FZ_IWDG2                     (0x1 << 1)

/* Bit fields for RCC_IWDGC1CFGSETR register */
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Pos          0
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Msk          (0x1 << 0)
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN              (0x1 << 0)
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Pos          2
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Msk          (0x1 << 2)
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN              (0x1 << 2)
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST_Pos            18
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST_Msk            (0x1 << 18)
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST                (0x1 << 18)

/* Bit fields for RCC_IWDGC1CFGCLRR register */
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Pos          0
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Msk          (0x1 << 0)
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN              (0x1 << 0)
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Pos          2
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Msk          (0x1 << 2)
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN              (0x1 << 2)
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Pos            18
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Msk            (0x1 << 18)
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST                (0x1 << 18)

/* Bit fields for RCC_IWDGC2FZSETR register */
#define RCC_IWDGC2FZSETR_FZ_IWDG3_Pos                 0
#define RCC_IWDGC2FZSETR_FZ_IWDG3_Msk                 (0x1 << 0)
#define RCC_IWDGC2FZSETR_FZ_IWDG3                     (0x1 << 0)
#define RCC_IWDGC2FZSETR_FZ_IWDG4_Pos                 1
#define RCC_IWDGC2FZSETR_FZ_IWDG4_Msk                 (0x1 << 1)
#define RCC_IWDGC2FZSETR_FZ_IWDG4                     (0x1 << 1)

/* Bit fields for RCC_IWDGC2FZCLRR register */
#define RCC_IWDGC2FZCLRR_FZ_IWDG3_Pos                 0
#define RCC_IWDGC2FZCLRR_FZ_IWDG3_Msk                 (0x1 << 0)
#define RCC_IWDGC2FZCLRR_FZ_IWDG3                     (0x1 << 0)
#define RCC_IWDGC2FZCLRR_FZ_IWDG4_Pos                 1
#define RCC_IWDGC2FZCLRR_FZ_IWDG4_Msk                 (0x1 << 1)
#define RCC_IWDGC2FZCLRR_FZ_IWDG4                     (0x1 << 1)

/* Bit fields for RCC_IWDGC2CFGSETR register */
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Pos          0
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Msk          (0x1 << 0)
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN              (0x1 << 0)
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Pos          2
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Msk          (0x1 << 2)
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN              (0x1 << 2)
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST_Pos            18
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST_Msk            (0x1 << 18)
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST                (0x1 << 18)

/* Bit fields for RCC_IWDGC2CFGCLRR register */
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Pos          0
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Msk          (0x1 << 0)
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN              (0x1 << 0)
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Pos          2
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Msk          (0x1 << 2)
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN              (0x1 << 2)
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Pos            18
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Msk            (0x1 << 18)
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST                (0x1 << 18)

/* Bit fields for RCC_IWDGC3CFGSETR register */
#define RCC_IWDGC3CFGSETR_IWDG5_SYSRSTEN_Pos          0
#define RCC_IWDGC3CFGSETR_IWDG5_SYSRSTEN_Msk          (0x1 << 0)
#define RCC_IWDGC3CFGSETR_IWDG5_SYSRSTEN              (0x1 << 0)

/* Bit fields for RCC_IWDGC3CFGCLRR register */
#define RCC_IWDGC3CFGCLRR_IWDG5_SYSRSTEN_Pos          0
#define RCC_IWDGC3CFGCLRR_IWDG5_SYSRSTEN_Msk          (0x1 << 0)
#define RCC_IWDGC3CFGCLRR_IWDG5_SYSRSTEN              (0x1 << 0)

/* Bit fields for RCC_MCO1CFGR register */
#define RCC_MCO1CFGR_MCO1SEL_Pos                      0
#define RCC_MCO1CFGR_MCO1SEL_Msk                      (0x1 << 0)
#define RCC_MCO1CFGR_MCO1SEL                          (0x1 << 0)
#define RCC_MCO1CFGR_MCO1ON_Pos                       8
#define RCC_MCO1CFGR_MCO1ON_Msk                       (0x1 << 8)
#define RCC_MCO1CFGR_MCO1ON                           (0x1 << 8)

/* Bit fields for RCC_MCO2CFGR register */
#define RCC_MCO2CFGR_MCO2SEL_Pos                      0
#define RCC_MCO2CFGR_MCO2SEL_Msk                      (0x1 << 0)
#define RCC_MCO2CFGR_MCO2SEL                          (0x1 << 0)
#define RCC_MCO2CFGR_MCO2ON_Pos                       8
#define RCC_MCO2CFGR_MCO2ON_Msk                       (0x1 << 8)
#define RCC_MCO2CFGR_MCO2ON                           (0x1 << 8)

/* Bit fields for RCC_OCENSETR register */
#define RCC_OCENSETR_HSION_Pos                        0
#define RCC_OCENSETR_HSION_Msk                        (0x1 << 0)
#define RCC_OCENSETR_HSION                            (0x1 << 0)
#define RCC_OCENSETR_HSIKERON_Pos                     1
#define RCC_OCENSETR_HSIKERON_Msk                     (0x1 << 1)
#define RCC_OCENSETR_HSIKERON                         (0x1 << 1)
#define RCC_OCENSETR_DIGBYP_Pos                       7
#define RCC_OCENSETR_DIGBYP_Msk                       (0x1 << 7)
#define RCC_OCENSETR_DIGBYP                           (0x1 << 7)
#define RCC_OCENSETR_HSEON_Pos                        8
#define RCC_OCENSETR_HSEON_Msk                        (0x1 << 8)
#define RCC_OCENSETR_HSEON                            (0x1 << 8)
#define RCC_OCENSETR_HSEKERON_Pos                     9
#define RCC_OCENSETR_HSEKERON_Msk                     (0x1 << 9)
#define RCC_OCENSETR_HSEKERON                         (0x1 << 9)
#define RCC_OCENSETR_HSEBYP_Pos                       10
#define RCC_OCENSETR_HSEBYP_Msk                       (0x1 << 10)
#define RCC_OCENSETR_HSEBYP                           (0x1 << 10)
#define RCC_OCENSETR_HSECSSON_Pos                     11
#define RCC_OCENSETR_HSECSSON_Msk                     (0x1 << 11)
#define RCC_OCENSETR_HSECSSON                         (0x1 << 11)

/* Bit fields for RCC_OCENCLRR register */
#define RCC_OCENCLRR_HSION_Pos                        0
#define RCC_OCENCLRR_HSION_Msk                        (0x1 << 0)
#define RCC_OCENCLRR_HSION                            (0x1 << 0)
#define RCC_OCENCLRR_HSIKERON_Pos                     1
#define RCC_OCENCLRR_HSIKERON_Msk                     (0x1 << 1)
#define RCC_OCENCLRR_HSIKERON                         (0x1 << 1)
#define RCC_OCENCLRR_DIGBYP_Pos                       7
#define RCC_OCENCLRR_DIGBYP_Msk                       (0x1 << 7)
#define RCC_OCENCLRR_DIGBYP                           (0x1 << 7)
#define RCC_OCENCLRR_HSEON_Pos                        8
#define RCC_OCENCLRR_HSEON_Msk                        (0x1 << 8)
#define RCC_OCENCLRR_HSEON                            (0x1 << 8)
#define RCC_OCENCLRR_HSEKERON_Pos                     9
#define RCC_OCENCLRR_HSEKERON_Msk                     (0x1 << 9)
#define RCC_OCENCLRR_HSEKERON                         (0x1 << 9)
#define RCC_OCENCLRR_HSEBYP_Pos                       10
#define RCC_OCENCLRR_HSEBYP_Msk                       (0x1 << 10)
#define RCC_OCENCLRR_HSEBYP                           (0x1 << 10)

/* Bit fields for RCC_OCRDYR register */
#define RCC_OCRDYR_HSIRDY_Pos                         0
#define RCC_OCRDYR_HSIRDY_Msk                         (0x1 << 0)
#define RCC_OCRDYR_HSIRDY                             (0x1 << 0)
#define RCC_OCRDYR_HSERDY_Pos                         8
#define RCC_OCRDYR_HSERDY_Msk                         (0x1 << 8)
#define RCC_OCRDYR_HSERDY                             (0x1 << 8)
#define RCC_OCRDYR_CKREST_Pos                         25
#define RCC_OCRDYR_CKREST_Msk                         (0x1 << 25)
#define RCC_OCRDYR_CKREST                             (0x1 << 25)

/* Bit fields for RCC_STBYRDCR register */
#define RCC_STBYRDCR_STBYRD_Pos                       0
#define RCC_STBYRDCR_STBYRD_Msk                       (0x1f << 0)
#define RCC_STBYRDCR_STBYRD                           (0x1f << 0)

/* Bit fields for RCC_HSICFGR register */
#define RCC_HSICFGR_HSITRIM_Pos                       8
#define RCC_HSICFGR_HSITRIM_Msk                       (0x7f << 8)
#define RCC_HSICFGR_HSITRIM                           (0x7f << 8)
#define RCC_HSICFGR_HSICAL_Pos                        16
#define RCC_HSICFGR_HSICAL_Msk                        (0xfff << 16)
#define RCC_HSICFGR_HSICAL                            (0xfff << 16)

/* Bit fields for RCC_CSICFGR register */
#define RCC_CSICFGR_CSITRIM_Pos                       8
#define RCC_CSICFGR_CSITRIM_Msk                       (0x1f << 8)
#define RCC_CSICFGR_CSITRIM                           (0x1f << 8)
#define RCC_CSICFGR_CSICAL_Pos                        16
#define RCC_CSICFGR_CSICAL_Msk                        (0xff << 16)
#define RCC_CSICFGR_CSICAL                            (0xff << 16)

/* Bit fields for RCC_SHSICR register */
#define RCC_SHSICR_SHSION_Pos                         0
#define RCC_SHSICR_SHSION_Msk                         (0x1 << 0)
#define RCC_SHSICR_SHSION                             (0x1 << 0)
#define RCC_SHSICR_SHSIRDY_Pos                        1
#define RCC_SHSICR_SHSIRDY_Msk                        (0x1 << 1)
#define RCC_SHSICR_SHSIRDY                            (0x1 << 1)

/* Bit fields for RCC_RTCDIVR register */
#define RCC_RTCDIVR_RTCDIV_Pos                        0
#define RCC_RTCDIVR_RTCDIV_Msk                        (0x3f << 0)
#define RCC_RTCDIVR_RTCDIV                            (0x3f << 0)

/* Bit fields for RCC_APB1DIVR register */
#define RCC_APB1DIVR_APB1DIV_Pos                      0
#define RCC_APB1DIVR_APB1DIV_Msk                      (0x7 << 0)
#define RCC_APB1DIVR_APB1DIV                          (0x7 << 0)
#define RCC_APB1DIVR_APB1DIVRDY_Pos                   31
#define RCC_APB1DIVR_APB1DIVRDY_Msk                   (0x1 << 31)
#define RCC_APB1DIVR_APB1DIVRDY                       (0x1 << 31)

/* Bit fields for RCC_APB2DIVR register */
#define RCC_APB2DIVR_APB2DIV_Pos                      0
#define RCC_APB2DIVR_APB2DIV_Msk                      (0x7 << 0)
#define RCC_APB2DIVR_APB2DIV                          (0x7 << 0)
#define RCC_APB2DIVR_APB2DIVRDY_Pos                   31
#define RCC_APB2DIVR_APB2DIVRDY_Msk                   (0x1 << 31)
#define RCC_APB2DIVR_APB2DIVRDY                       (0x1 << 31)

/* Bit fields for RCC_APB3DIVR register */
#define RCC_APB3DIVR_APB3DIV_Pos                      0
#define RCC_APB3DIVR_APB3DIV_Msk                      (0x7 << 0)
#define RCC_APB3DIVR_APB3DIV                          (0x7 << 0)
#define RCC_APB3DIVR_APB3DIVRDY_Pos                   31
#define RCC_APB3DIVR_APB3DIVRDY_Msk                   (0x1 << 31)
#define RCC_APB3DIVR_APB3DIVRDY                       (0x1 << 31)

/* Bit fields for RCC_APB4DIVR register */
#define RCC_APB4DIVR_APB4DIV_Pos                      0
#define RCC_APB4DIVR_APB4DIV_Msk                      (0x7 << 0)
#define RCC_APB4DIVR_APB4DIV                          (0x7 << 0)
#define RCC_APB4DIVR_APB4DIVRDY_Pos                   31
#define RCC_APB4DIVR_APB4DIVRDY_Msk                   (0x1 << 31)
#define RCC_APB4DIVR_APB4DIVRDY                       (0x1 << 31)

/* Bit fields for RCC_APBDBGDIVR register */
#define RCC_APBDBGDIVR_APBDBGDIV_Pos                  0
#define RCC_APBDBGDIVR_APBDBGDIV_Msk                  (0x7 << 0)
#define RCC_APBDBGDIVR_APBDBGDIV                      (0x7 << 0)
#define RCC_APBDBGDIVR_APBDBGDIVRDY_Pos               31
#define RCC_APBDBGDIVR_APBDBGDIVRDY_Msk               (0x1 << 31)
#define RCC_APBDBGDIVR_APBDBGDIVRDY                   (0x1 << 31)

/* Bit fields for RCC_TIMG1PRER register */
#define RCC_TIMG1PRER_TIMG1PRE_Pos                    0
#define RCC_TIMG1PRER_TIMG1PRE_Msk                    (0x1 << 0)
#define RCC_TIMG1PRER_TIMG1PRE                        (0x1 << 0)
#define RCC_TIMG1PRER_TIMG1PRERDY_Pos                 31
#define RCC_TIMG1PRER_TIMG1PRERDY_Msk                 (0x1 << 31)
#define RCC_TIMG1PRER_TIMG1PRERDY                     (0x1 << 31)

/* Bit fields for RCC_TIMG2PRER register */
#define RCC_TIMG2PRER_TIMG2PRE_Pos                    0
#define RCC_TIMG2PRER_TIMG2PRE_Msk                    (0x1 << 0)
#define RCC_TIMG2PRER_TIMG2PRE                        (0x1 << 0)
#define RCC_TIMG2PRER_TIMG2PRERDY_Pos                 31
#define RCC_TIMG2PRER_TIMG2PRERDY_Msk                 (0x1 << 31)
#define RCC_TIMG2PRER_TIMG2PRERDY                     (0x1 << 31)

/* Bit fields for RCC_DDRCP1CFGR register */
#define RCC_DDRCP1CFGR_DDRCP1EN_Pos                   1
#define RCC_DDRCP1CFGR_DDRCP1EN_Msk                   (0x1 << 1)
#define RCC_DDRCP1CFGR_DDRCP1EN                       (0x1 << 1)
#define RCC_DDRCP1CFGR_DDRCP1LPEN_Pos                 2
#define RCC_DDRCP1CFGR_DDRCP1LPEN_Msk                 (0x1 << 2)
#define RCC_DDRCP1CFGR_DDRCP1LPEN                     (0x1 << 2)

/* Bit fields for RCC_DDRCP2CFGR register */
#define RCC_DDRCP2CFGR_DDRCP2EN_Pos                   1
#define RCC_DDRCP2CFGR_DDRCP2EN_Msk                   (0x1 << 1)
#define RCC_DDRCP2CFGR_DDRCP2EN                       (0x1 << 1)
#define RCC_DDRCP2CFGR_DDRCP2LPEN_Pos                 2
#define RCC_DDRCP2CFGR_DDRCP2LPEN_Msk                 (0x1 << 2)
#define RCC_DDRCP2CFGR_DDRCP2LPEN                     (0x1 << 2)

/* Bit fields for RCC_DDRCAPBCFGR register */
#define RCC_DDRCAPBCFGR_DDRCAPBRST_Pos                0
#define RCC_DDRCAPBCFGR_DDRCAPBRST_Msk                (0x1 << 0)
#define RCC_DDRCAPBCFGR_DDRCAPBRST                    (0x1 << 0)
#define RCC_DDRCAPBCFGR_DDRCAPBEN_Pos                 1
#define RCC_DDRCAPBCFGR_DDRCAPBEN_Msk                 (0x1 << 1)
#define RCC_DDRCAPBCFGR_DDRCAPBEN                     (0x1 << 1)
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN_Pos               2
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN_Msk               (0x1 << 2)
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN                   (0x1 << 2)

/* Bit fields for RCC_DDRPHYCAPBCFGR register */
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Pos          0
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Msk          (0x1 << 0)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST              (0x1 << 0)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Pos           1
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Msk           (0x1 << 1)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN               (0x1 << 1)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Pos         2
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Msk         (0x1 << 2)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN             (0x1 << 2)

/* Bit fields for RCC_DDRPHYCCFGR register */
#define RCC_DDRPHYCCFGR_DDRPHYCEN_Pos                 1
#define RCC_DDRPHYCCFGR_DDRPHYCEN_Msk                 (0x1 << 1)
#define RCC_DDRPHYCCFGR_DDRPHYCEN                     (0x1 << 1)

/* Bit fields for RCC_DDRCFGR register */
#define RCC_DDRCFGR_DDRCFGRST_Pos                     0
#define RCC_DDRCFGR_DDRCFGRST_Msk                     (0x1 << 0)
#define RCC_DDRCFGR_DDRCFGRST                         (0x1 << 0)
#define RCC_DDRCFGR_DDRCFGEN_Pos                      1
#define RCC_DDRCFGR_DDRCFGEN_Msk                      (0x1 << 1)
#define RCC_DDRCFGR_DDRCFGEN                          (0x1 << 1)
#define RCC_DDRCFGR_DDRCFGLPEN_Pos                    2
#define RCC_DDRCFGR_DDRCFGLPEN_Msk                    (0x1 << 2)
#define RCC_DDRCFGR_DDRCFGLPEN                        (0x1 << 2)

/* Bit fields for RCC_DDRITFCFGR register */
#define RCC_DDRITFCFGR_DDRPHYCRST_Pos                 0
#define RCC_DDRITFCFGR_DDRPHYCRST_Msk                 (0x1 << 0)
#define RCC_DDRITFCFGR_DDRPHYCRST                     (0x1 << 0)
#define RCC_DDRITFCFGR_DDRCRST_Pos                    1
#define RCC_DDRITFCFGR_DDRCRST_Msk                    (0x1 << 1)
#define RCC_DDRITFCFGR_DDRCRST                        (0x1 << 1)
#define RCC_DDRITFCFGR_DDRCP1RST_Pos                  2
#define RCC_DDRITFCFGR_DDRCP1RST_Msk                  (0x1 << 2)
#define RCC_DDRITFCFGR_DDRCP1RST                      (0x1 << 2)
#define RCC_DDRITFCFGR_DDRCP2RST_Pos                  3
#define RCC_DDRITFCFGR_DDRCP2RST_Msk                  (0x1 << 3)
#define RCC_DDRITFCFGR_DDRCP2RST                      (0x1 << 3)
#define RCC_DDRITFCFGR_DDRCKMOD_Pos                   4
#define RCC_DDRITFCFGR_DDRCKMOD_Msk                   (0x3 << 4)
#define RCC_DDRITFCFGR_DDRCKMOD                       (0x3 << 4)
#define RCC_DDRITFCFGR_DDRSHR_Pos                     8
#define RCC_DDRITFCFGR_DDRSHR_Msk                     (0x1 << 8)
#define RCC_DDRITFCFGR_DDRSHR                         (0x1 << 8)
#define RCC_DDRITFCFGR_DDRPHYDLP_Pos                  16
#define RCC_DDRITFCFGR_DDRPHYDLP_Msk                  (0x1 << 16)
#define RCC_DDRITFCFGR_DDRPHYDLP                      (0x1 << 16)

/* Bit fields for RCC_C3CFGR register */
#define RCC_C3CFGR_C3RST_Pos                          0
#define RCC_C3CFGR_C3RST_Msk                          (0x1 << 0)
#define RCC_C3CFGR_C3RST                              (0x1 << 0)
#define RCC_C3CFGR_C3EN_Pos                           1
#define RCC_C3CFGR_C3EN_Msk                           (0x1 << 1)
#define RCC_C3CFGR_C3EN                               (0x1 << 1)
#define RCC_C3CFGR_C3LPEN_Pos                         2
#define RCC_C3CFGR_C3LPEN_Msk                         (0x1 << 2)
#define RCC_C3CFGR_C3LPEN                             (0x1 << 2)
#define RCC_C3CFGR_C3AMEN_Pos                         3
#define RCC_C3CFGR_C3AMEN_Msk                         (0x1 << 3)
#define RCC_C3CFGR_C3AMEN                             (0x1 << 3)
#define RCC_C3CFGR_LPTIM3C3EN_Pos                     16
#define RCC_C3CFGR_LPTIM3C3EN_Msk                     (0x1 << 16)
#define RCC_C3CFGR_LPTIM3C3EN                         (0x1 << 16)
#define RCC_C3CFGR_LPTIM4C3EN_Pos                     17
#define RCC_C3CFGR_LPTIM4C3EN_Msk                     (0x1 << 17)
#define RCC_C3CFGR_LPTIM4C3EN                         (0x1 << 17)
#define RCC_C3CFGR_LPTIM5C3EN_Pos                     18
#define RCC_C3CFGR_LPTIM5C3EN_Msk                     (0x1 << 18)
#define RCC_C3CFGR_LPTIM5C3EN                         (0x1 << 18)
#define RCC_C3CFGR_SPI8C3EN_Pos                       19
#define RCC_C3CFGR_SPI8C3EN_Msk                       (0x1 << 19)
#define RCC_C3CFGR_SPI8C3EN                           (0x1 << 19)
#define RCC_C3CFGR_LPUART1C3EN_Pos                    20
#define RCC_C3CFGR_LPUART1C3EN_Msk                    (0x1 << 20)
#define RCC_C3CFGR_LPUART1C3EN                        (0x1 << 20)
#define RCC_C3CFGR_I2C8C3EN_Pos                       21
#define RCC_C3CFGR_I2C8C3EN_Msk                       (0x1 << 21)
#define RCC_C3CFGR_I2C8C3EN                           (0x1 << 21)
#define RCC_C3CFGR_CECC3EN_Pos                        22
#define RCC_C3CFGR_CECC3EN_Msk                        (0x1 << 22)
#define RCC_C3CFGR_CECC3EN                            (0x1 << 22)
#define RCC_C3CFGR_MDF2C3EN_Pos                       23
#define RCC_C3CFGR_MDF2C3EN_Msk                       (0x1 << 23)
#define RCC_C3CFGR_MDF2C3EN                           (0x1 << 23)
#define RCC_C3CFGR_GPIOZC3EN_Pos                      24
#define RCC_C3CFGR_GPIOZC3EN_Msk                      (0x1 << 24)
#define RCC_C3CFGR_GPIOZC3EN                          (0x1 << 24)
#define RCC_C3CFGR_LPDMAC3EN_Pos                      25
#define RCC_C3CFGR_LPDMAC3EN_Msk                      (0x1 << 25)
#define RCC_C3CFGR_LPDMAC3EN                          (0x1 << 25)
#define RCC_C3CFGR_RTCC3EN_Pos                        26
#define RCC_C3CFGR_RTCC3EN_Msk                        (0x1 << 26)
#define RCC_C3CFGR_RTCC3EN                            (0x1 << 26)
#define RCC_C3CFGR_I3C4C3EN_Pos                       27
#define RCC_C3CFGR_I3C4C3EN_Msk                       (0x1 << 27)
#define RCC_C3CFGR_I3C4C3EN                           (0x1 << 27)

/* Bit fields for RCC_SYSRAMCFGR register */
#define RCC_SYSRAMCFGR_SYSRAMEN_Pos                   1
#define RCC_SYSRAMCFGR_SYSRAMEN_Msk                   (0x1 << 1)
#define RCC_SYSRAMCFGR_SYSRAMEN                       (0x1 << 1)
#define RCC_SYSRAMCFGR_SYSRAMLPEN_Pos                 2
#define RCC_SYSRAMCFGR_SYSRAMLPEN_Msk                 (0x1 << 2)
#define RCC_SYSRAMCFGR_SYSRAMLPEN                     (0x1 << 2)

/* Bit fields for RCC_LTDCSRAMCFGR register */
#define RCC_LTDCSRAMCFGR_LTDCSRAMEN_Pos               1
#define RCC_LTDCSRAMCFGR_LTDCSRAMEN_Msk               (0x1 << 1)
#define RCC_LTDCSRAMCFGR_LTDCSRAMEN                   (0x1 << 1)
#define RCC_LTDCSRAMCFGR_LTDCSRAMLPEN_Pos             2
#define RCC_LTDCSRAMCFGR_LTDCSRAMLPEN_Msk             (0x1 << 2)
#define RCC_LTDCSRAMCFGR_LTDCSRAMLPEN                 (0x1 << 2)

/* Bit fields for RCC_SRAM1CFGR register */
#define RCC_SRAM1CFGR_SRAM1EN_Pos                     1
#define RCC_SRAM1CFGR_SRAM1EN_Msk                     (0x1 << 1)
#define RCC_SRAM1CFGR_SRAM1EN                         (0x1 << 1)
#define RCC_SRAM1CFGR_SRAM1LPEN_Pos                   2
#define RCC_SRAM1CFGR_SRAM1LPEN_Msk                   (0x1 << 2)
#define RCC_SRAM1CFGR_SRAM1LPEN                       (0x1 << 2)

/* Bit fields for RCC_SRAM2CFGR register */
#define RCC_SRAM2CFGR_SRAM2EN_Pos                     1
#define RCC_SRAM2CFGR_SRAM2EN_Msk                     (0x1 << 1)
#define RCC_SRAM2CFGR_SRAM2EN                         (0x1 << 1)
#define RCC_SRAM2CFGR_SRAM2LPEN_Pos                   2
#define RCC_SRAM2CFGR_SRAM2LPEN_Msk                   (0x1 << 2)
#define RCC_SRAM2CFGR_SRAM2LPEN                       (0x1 << 2)

/* Bit fields for RCC_RETRAMCFGR register */
#define RCC_RETRAMCFGR_RETRAMEN_Pos                   1
#define RCC_RETRAMCFGR_RETRAMEN_Msk                   (0x1 << 1)
#define RCC_RETRAMCFGR_RETRAMEN                       (0x1 << 1)
#define RCC_RETRAMCFGR_RETRAMLPEN_Pos                 2
#define RCC_RETRAMCFGR_RETRAMLPEN_Msk                 (0x1 << 2)
#define RCC_RETRAMCFGR_RETRAMLPEN                     (0x1 << 2)

/* Bit fields for RCC_BKPSRAMCFGR register */
#define RCC_BKPSRAMCFGR_BKPSRAMEN_Pos                 1
#define RCC_BKPSRAMCFGR_BKPSRAMEN_Msk                 (0x1 << 1)
#define RCC_BKPSRAMCFGR_BKPSRAMEN                     (0x1 << 1)
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN_Pos               2
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN_Msk               (0x1 << 2)
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN                   (0x1 << 2)

/* Bit fields for RCC_LPSRAM1CFGR register */
#define RCC_LPSRAM1CFGR_LPSRAM1EN_Pos                 1
#define RCC_LPSRAM1CFGR_LPSRAM1EN_Msk                 (0x1 << 1)
#define RCC_LPSRAM1CFGR_LPSRAM1EN                     (0x1 << 1)
#define RCC_LPSRAM1CFGR_LPSRAM1LPEN_Pos               2
#define RCC_LPSRAM1CFGR_LPSRAM1LPEN_Msk               (0x1 << 2)
#define RCC_LPSRAM1CFGR_LPSRAM1LPEN                   (0x1 << 2)
#define RCC_LPSRAM1CFGR_LPSRAM1AMEN_Pos               3
#define RCC_LPSRAM1CFGR_LPSRAM1AMEN_Msk               (0x1 << 3)
#define RCC_LPSRAM1CFGR_LPSRAM1AMEN                   (0x1 << 3)

/* Bit fields for RCC_LPSRAM2CFGR register */
#define RCC_LPSRAM2CFGR_LPSRAM2EN_Pos                 1
#define RCC_LPSRAM2CFGR_LPSRAM2EN_Msk                 (0x1 << 1)
#define RCC_LPSRAM2CFGR_LPSRAM2EN                     (0x1 << 1)
#define RCC_LPSRAM2CFGR_LPSRAM2LPEN_Pos               2
#define RCC_LPSRAM2CFGR_LPSRAM2LPEN_Msk               (0x1 << 2)
#define RCC_LPSRAM2CFGR_LPSRAM2LPEN                   (0x1 << 2)
#define RCC_LPSRAM2CFGR_LPSRAM2AMEN_Pos               3
#define RCC_LPSRAM2CFGR_LPSRAM2AMEN_Msk               (0x1 << 3)
#define RCC_LPSRAM2CFGR_LPSRAM2AMEN                   (0x1 << 3)

/* Bit fields for RCC_LPSRAM3CFGR register */
#define RCC_LPSRAM3CFGR_LPSRAM3EN_Pos                 1
#define RCC_LPSRAM3CFGR_LPSRAM3EN_Msk                 (0x1 << 1)
#define RCC_LPSRAM3CFGR_LPSRAM3EN                     (0x1 << 1)
#define RCC_LPSRAM3CFGR_LPSRAM3LPEN_Pos               2
#define RCC_LPSRAM3CFGR_LPSRAM3LPEN_Msk               (0x1 << 2)
#define RCC_LPSRAM3CFGR_LPSRAM3LPEN                   (0x1 << 2)
#define RCC_LPSRAM3CFGR_LPSRAM3AMEN_Pos               3
#define RCC_LPSRAM3CFGR_LPSRAM3AMEN_Msk               (0x1 << 3)
#define RCC_LPSRAM3CFGR_LPSRAM3AMEN                   (0x1 << 3)

/* Bit fields for RCC_OSPI1CFGR register */
#define RCC_OSPI1CFGR_OSPI1RST_Pos                    0
#define RCC_OSPI1CFGR_OSPI1RST_Msk                    (0x1 << 0)
#define RCC_OSPI1CFGR_OSPI1RST                        (0x1 << 0)
#define RCC_OSPI1CFGR_OSPI1EN_Pos                     1
#define RCC_OSPI1CFGR_OSPI1EN_Msk                     (0x1 << 1)
#define RCC_OSPI1CFGR_OSPI1EN                         (0x1 << 1)
#define RCC_OSPI1CFGR_OSPI1LPEN_Pos                   2
#define RCC_OSPI1CFGR_OSPI1LPEN_Msk                   (0x1 << 2)
#define RCC_OSPI1CFGR_OSPI1LPEN                       (0x1 << 2)
#define RCC_OSPI1CFGR_OSPI1DLLRST_Pos                 16
#define RCC_OSPI1CFGR_OSPI1DLLRST_Msk                 (0x1 << 16)
#define RCC_OSPI1CFGR_OSPI1DLLRST                     (0x1 << 16)

/* Bit fields for RCC_OSPI2CFGR register */
#define RCC_OSPI2CFGR_OSPI2RST_Pos                    0
#define RCC_OSPI2CFGR_OSPI2RST_Msk                    (0x1 << 0)
#define RCC_OSPI2CFGR_OSPI2RST                        (0x1 << 0)
#define RCC_OSPI2CFGR_OSPI2EN_Pos                     1
#define RCC_OSPI2CFGR_OSPI2EN_Msk                     (0x1 << 1)
#define RCC_OSPI2CFGR_OSPI2EN                         (0x1 << 1)
#define RCC_OSPI2CFGR_OSPI2LPEN_Pos                   2
#define RCC_OSPI2CFGR_OSPI2LPEN_Msk                   (0x1 << 2)
#define RCC_OSPI2CFGR_OSPI2LPEN                       (0x1 << 2)
#define RCC_OSPI2CFGR_OSPI2DLLRST_Pos                 16
#define RCC_OSPI2CFGR_OSPI2DLLRST_Msk                 (0x1 << 16)
#define RCC_OSPI2CFGR_OSPI2DLLRST                     (0x1 << 16)

/* Bit fields for RCC_DBGCFGR register */
#define RCC_DBGCFGR_DBGEN_Pos                         8
#define RCC_DBGCFGR_DBGEN_Msk                         (0x1 << 8)
#define RCC_DBGCFGR_DBGEN                             (0x1 << 8)
#define RCC_DBGCFGR_TRACEEN_Pos                       9
#define RCC_DBGCFGR_TRACEEN_Msk                       (0x1 << 9)
#define RCC_DBGCFGR_TRACEEN                           (0x1 << 9)
#define RCC_DBGCFGR_DBGRST_Pos                        12
#define RCC_DBGCFGR_DBGRST_Msk                        (0x1 << 12)
#define RCC_DBGCFGR_DBGRST                            (0x1 << 12)

/* Bit fields for RCC_STM500CFGR register */
#define RCC_STM500CFGR_STM500EN_Pos                   1
#define RCC_STM500CFGR_STM500EN_Msk                   (0x1 << 1)
#define RCC_STM500CFGR_STM500EN                       (0x1 << 1)
#define RCC_STM500CFGR_STM500LPEN_Pos                 2
#define RCC_STM500CFGR_STM500LPEN_Msk                 (0x1 << 2)
#define RCC_STM500CFGR_STM500LPEN                     (0x1 << 2)

/* Bit fields for RCC_ETRCFGR register */
#define RCC_ETRCFGR_ETREN_Pos                         1
#define RCC_ETRCFGR_ETREN_Msk                         (0x1 << 1)
#define RCC_ETRCFGR_ETREN                             (0x1 << 1)
#define RCC_ETRCFGR_ETRLPEN_Pos                       2
#define RCC_ETRCFGR_ETRLPEN_Msk                       (0x1 << 2)
#define RCC_ETRCFGR_ETRLPEN                           (0x1 << 2)

/* Bit fields for RCC_GPIOACFGR register */
#define RCC_GPIOACFGR_GPIOxRST_Pos                    0
#define RCC_GPIOACFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOACFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOACFGR_GPIOxEN_Pos                     1
#define RCC_GPIOACFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOACFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOACFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOACFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOACFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOBCFGR register */
#define RCC_GPIOBCFGR_GPIOxRST_Pos                    0
#define RCC_GPIOBCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOBCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOBCFGR_GPIOxEN_Pos                     1
#define RCC_GPIOBCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOBCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOBCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOBCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOBCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOCCFGR register */
#define RCC_GPIOCCFGR_GPIOxRST_Pos                    0
#define RCC_GPIOCCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOCCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOCCFGR_GPIOxEN_Pos                     1
#define RCC_GPIOCCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOCCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOCCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOCCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOCCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIODCFGR register */
#define RCC_GPIODCFGR_GPIOxRST_Pos                    0
#define RCC_GPIODCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIODCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIODCFGR_GPIOxEN_Pos                     1
#define RCC_GPIODCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIODCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIODCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIODCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIODCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOECFGR register */
#define RCC_GPIOECFGR_GPIOxRST_Pos                    0
#define RCC_GPIOECFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOECFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOECFGR_GPIOxEN_Pos                     1
#define RCC_GPIOECFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOECFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOECFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOECFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOECFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOFCFGR register */
#define RCC_GPIOFCFGR_GPIOxRST_Pos                    0
#define RCC_GPIOFCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOFCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOFCFGR_GPIOxEN_Pos                     1
#define RCC_GPIOFCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOFCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOFCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOFCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOFCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOGCFGR register */
#define RCC_GPIOGCFGR_GPIOxRST_Pos                    0
#define RCC_GPIOGCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOGCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOGCFGR_GPIOxEN_Pos                     1
#define RCC_GPIOGCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOGCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOGCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOGCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOGCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOHCFGR register */
#define RCC_GPIOHCFGR_GPIOxRST_Pos                    0
#define RCC_GPIOHCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOHCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOHCFGR_GPIOxEN_Pos                     1
#define RCC_GPIOHCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOHCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOHCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOHCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOHCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOICFGR register */
#define RCC_GPIOICFGR_GPIOxRST_Pos                    0
#define RCC_GPIOICFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOICFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOICFGR_GPIOxEN_Pos                     1
#define RCC_GPIOICFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOICFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOICFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOICFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOICFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOJCFGR register */
#define RCC_GPIOJCFGR_GPIOxRST_Pos                    0
#define RCC_GPIOJCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOJCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOJCFGR_GPIOxEN_Pos                     1
#define RCC_GPIOJCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOJCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOJCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOJCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOJCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOKCFGR register */
#define RCC_GPIOKCFGR_GPIOxRST_Pos                    0
#define RCC_GPIOKCFGR_GPIOxRST_Msk                    (0x1 << 0)
#define RCC_GPIOKCFGR_GPIOxRST                        (0x1 << 0)
#define RCC_GPIOKCFGR_GPIOxEN_Pos                     1
#define RCC_GPIOKCFGR_GPIOxEN_Msk                     (0x1 << 1)
#define RCC_GPIOKCFGR_GPIOxEN                         (0x1 << 1)
#define RCC_GPIOKCFGR_GPIOxLPEN_Pos                   2
#define RCC_GPIOKCFGR_GPIOxLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOKCFGR_GPIOxLPEN                       (0x1 << 2)

/* Bit fields for RCC_GPIOZCFGR register */
#define RCC_GPIOZCFGR_GPIOZRST_Pos                    0
#define RCC_GPIOZCFGR_GPIOZRST_Msk                    (0x1 << 0)
#define RCC_GPIOZCFGR_GPIOZRST                        (0x1 << 0)
#define RCC_GPIOZCFGR_GPIOZEN_Pos                     1
#define RCC_GPIOZCFGR_GPIOZEN_Msk                     (0x1 << 1)
#define RCC_GPIOZCFGR_GPIOZEN                         (0x1 << 1)
#define RCC_GPIOZCFGR_GPIOZLPEN_Pos                   2
#define RCC_GPIOZCFGR_GPIOZLPEN_Msk                   (0x1 << 2)
#define RCC_GPIOZCFGR_GPIOZLPEN                       (0x1 << 2)
#define RCC_GPIOZCFGR_GPIOZAMEN_Pos                   3
#define RCC_GPIOZCFGR_GPIOZAMEN_Msk                   (0x1 << 3)
#define RCC_GPIOZCFGR_GPIOZAMEN                       (0x1 << 3)

/* Bit fields for RCC_HPDMA1CFGR register */
#define RCC_HPDMA1CFGR_HPDMA1RST_Pos                  0
#define RCC_HPDMA1CFGR_HPDMA1RST_Msk                  (0x1 << 0)
#define RCC_HPDMA1CFGR_HPDMA1RST                      (0x1 << 0)
#define RCC_HPDMA1CFGR_HPDMA1EN_Pos                   1
#define RCC_HPDMA1CFGR_HPDMA1EN_Msk                   (0x1 << 1)
#define RCC_HPDMA1CFGR_HPDMA1EN                       (0x1 << 1)
#define RCC_HPDMA1CFGR_HPDMA1LPEN_Pos                 2
#define RCC_HPDMA1CFGR_HPDMA1LPEN_Msk                 (0x1 << 2)
#define RCC_HPDMA1CFGR_HPDMA1LPEN                     (0x1 << 2)

/* Bit fields for RCC_HPDMA2CFGR register */
#define RCC_HPDMA2CFGR_HPDMA2RST_Pos                  0
#define RCC_HPDMA2CFGR_HPDMA2RST_Msk                  (0x1 << 0)
#define RCC_HPDMA2CFGR_HPDMA2RST                      (0x1 << 0)
#define RCC_HPDMA2CFGR_HPDMA2EN_Pos                   1
#define RCC_HPDMA2CFGR_HPDMA2EN_Msk                   (0x1 << 1)
#define RCC_HPDMA2CFGR_HPDMA2EN                       (0x1 << 1)
#define RCC_HPDMA2CFGR_HPDMA2LPEN_Pos                 2
#define RCC_HPDMA2CFGR_HPDMA2LPEN_Msk                 (0x1 << 2)
#define RCC_HPDMA2CFGR_HPDMA2LPEN                     (0x1 << 2)

/* Bit fields for RCC_HPDMA3CFGR register */
#define RCC_HPDMA3CFGR_HPDMA3RST_Pos                  0
#define RCC_HPDMA3CFGR_HPDMA3RST_Msk                  (0x1 << 0)
#define RCC_HPDMA3CFGR_HPDMA3RST                      (0x1 << 0)
#define RCC_HPDMA3CFGR_HPDMA3EN_Pos                   1
#define RCC_HPDMA3CFGR_HPDMA3EN_Msk                   (0x1 << 1)
#define RCC_HPDMA3CFGR_HPDMA3EN                       (0x1 << 1)
#define RCC_HPDMA3CFGR_HPDMA3LPEN_Pos                 2
#define RCC_HPDMA3CFGR_HPDMA3LPEN_Msk                 (0x1 << 2)
#define RCC_HPDMA3CFGR_HPDMA3LPEN                     (0x1 << 2)

/* Bit fields for RCC_LPDMACFGR register */
#define RCC_LPDMACFGR_LPDMARST_Pos                    0
#define RCC_LPDMACFGR_LPDMARST_Msk                    (0x1 << 0)
#define RCC_LPDMACFGR_LPDMARST                        (0x1 << 0)
#define RCC_LPDMACFGR_LPDMAEN_Pos                     1
#define RCC_LPDMACFGR_LPDMAEN_Msk                     (0x1 << 1)
#define RCC_LPDMACFGR_LPDMAEN                         (0x1 << 1)
#define RCC_LPDMACFGR_LPDMALPEN_Pos                   2
#define RCC_LPDMACFGR_LPDMALPEN_Msk                   (0x1 << 2)
#define RCC_LPDMACFGR_LPDMALPEN                       (0x1 << 2)
#define RCC_LPDMACFGR_LPDMAAMEN_Pos                   3
#define RCC_LPDMACFGR_LPDMAAMEN_Msk                   (0x1 << 3)
#define RCC_LPDMACFGR_LPDMAAMEN                       (0x1 << 3)

/* Bit fields for RCC_HSEMCFGR register */
#define RCC_HSEMCFGR_HSEMRST_Pos                      0
#define RCC_HSEMCFGR_HSEMRST_Msk                      (0x1 << 0)
#define RCC_HSEMCFGR_HSEMRST                          (0x1 << 0)
#define RCC_HSEMCFGR_HSEMEN_Pos                       1
#define RCC_HSEMCFGR_HSEMEN_Msk                       (0x1 << 1)
#define RCC_HSEMCFGR_HSEMEN                           (0x1 << 1)
#define RCC_HSEMCFGR_HSEMLPEN_Pos                     2
#define RCC_HSEMCFGR_HSEMLPEN_Msk                     (0x1 << 2)
#define RCC_HSEMCFGR_HSEMLPEN                         (0x1 << 2)
#define RCC_HSEMCFGR_HSEMAMEN_Pos                     3
#define RCC_HSEMCFGR_HSEMAMEN_Msk                     (0x1 << 3)
#define RCC_HSEMCFGR_HSEMAMEN                         (0x1 << 3)

/* Bit fields for RCC_IPCC1CFGR register */
#define RCC_IPCC1CFGR_IPCC1RST_Pos                    0
#define RCC_IPCC1CFGR_IPCC1RST_Msk                    (0x1 << 0)
#define RCC_IPCC1CFGR_IPCC1RST                        (0x1 << 0)
#define RCC_IPCC1CFGR_IPCC1EN_Pos                     1
#define RCC_IPCC1CFGR_IPCC1EN_Msk                     (0x1 << 1)
#define RCC_IPCC1CFGR_IPCC1EN                         (0x1 << 1)
#define RCC_IPCC1CFGR_IPCC1LPEN_Pos                   2
#define RCC_IPCC1CFGR_IPCC1LPEN_Msk                   (0x1 << 2)
#define RCC_IPCC1CFGR_IPCC1LPEN                       (0x1 << 2)

/* Bit fields for RCC_IPCC2CFGR register */
#define RCC_IPCC2CFGR_IPCC2RST_Pos                    0
#define RCC_IPCC2CFGR_IPCC2RST_Msk                    (0x1 << 0)
#define RCC_IPCC2CFGR_IPCC2RST                        (0x1 << 0)
#define RCC_IPCC2CFGR_IPCC2EN_Pos                     1
#define RCC_IPCC2CFGR_IPCC2EN_Msk                     (0x1 << 1)
#define RCC_IPCC2CFGR_IPCC2EN                         (0x1 << 1)
#define RCC_IPCC2CFGR_IPCC2LPEN_Pos                   2
#define RCC_IPCC2CFGR_IPCC2LPEN_Msk                   (0x1 << 2)
#define RCC_IPCC2CFGR_IPCC2LPEN                       (0x1 << 2)
#define RCC_IPCC2CFGR_IPCC2AMEN_Pos                   3
#define RCC_IPCC2CFGR_IPCC2AMEN_Msk                   (0x1 << 3)
#define RCC_IPCC2CFGR_IPCC2AMEN                       (0x1 << 3)

/* Bit fields for RCC_RTCCFGR register */
#define RCC_RTCCFGR_RTCEN_Pos                         1
#define RCC_RTCCFGR_RTCEN_Msk                         (0x1 << 1)
#define RCC_RTCCFGR_RTCEN                             (0x1 << 1)
#define RCC_RTCCFGR_RTCLPEN_Pos                       2
#define RCC_RTCCFGR_RTCLPEN_Msk                       (0x1 << 2)
#define RCC_RTCCFGR_RTCLPEN                           (0x1 << 2)
#define RCC_RTCCFGR_RTCAMEN_Pos                       3
#define RCC_RTCCFGR_RTCAMEN_Msk                       (0x1 << 3)
#define RCC_RTCCFGR_RTCAMEN                           (0x1 << 3)

/* Bit fields for RCC_SYSCPU1CFGR register */
#define RCC_SYSCPU1CFGR_SYSCPU1EN_Pos                 1
#define RCC_SYSCPU1CFGR_SYSCPU1EN_Msk                 (0x1 << 1)
#define RCC_SYSCPU1CFGR_SYSCPU1EN                     (0x1 << 1)
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN_Pos               2
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN_Msk               (0x1 << 2)
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN                   (0x1 << 2)

/* Bit fields for RCC_PMBCTRLCFGR register */
#define RCC_PMBCTRLCFGR_PMBCTRLRST_Pos                0
#define RCC_PMBCTRLCFGR_PMBCTRLRST_Msk                (0x1 << 0)
#define RCC_PMBCTRLCFGR_PMBCTRLRST                    (0x1 << 0)
#define RCC_PMBCTRLCFGR_PMBCTRLEN_Pos                 1
#define RCC_PMBCTRLCFGR_PMBCTRLEN_Msk                 (0x1 << 1)
#define RCC_PMBCTRLCFGR_PMBCTRLEN                     (0x1 << 1)
#define RCC_PMBCTRLCFGR_PMBCTRLLPEN_Pos               2
#define RCC_PMBCTRLCFGR_PMBCTRLLPEN_Msk               (0x1 << 2)
#define RCC_PMBCTRLCFGR_PMBCTRLLPEN                   (0x1 << 2)

/* Bit fields for RCC_IS2MCFGR register */
#define RCC_IS2MCFGR_IS2MRST_Pos                      0
#define RCC_IS2MCFGR_IS2MRST_Msk                      (0x1 << 0)
#define RCC_IS2MCFGR_IS2MRST                          (0x1 << 0)
#define RCC_IS2MCFGR_IS2MEN_Pos                       1
#define RCC_IS2MCFGR_IS2MEN_Msk                       (0x1 << 1)
#define RCC_IS2MCFGR_IS2MEN                           (0x1 << 1)
#define RCC_IS2MCFGR_IS2MLPEN_Pos                     2
#define RCC_IS2MCFGR_IS2MLPEN_Msk                     (0x1 << 2)
#define RCC_IS2MCFGR_IS2MLPEN                         (0x1 << 2)

/* Bit fields for RCC_PLL2CFGR1 register */
#define RCC_PLL2CFGR1_SSMODRST_Pos                    0
#define RCC_PLL2CFGR1_SSMODRST_Msk                    (0x1 << 0)
#define RCC_PLL2CFGR1_SSMODRST                        (0x1 << 0)
#define RCC_PLL2CFGR1_PLLEN_Pos                       8
#define RCC_PLL2CFGR1_PLLEN_Msk                       (0x1 << 8)
#define RCC_PLL2CFGR1_PLLEN                           (0x1 << 8)
#define RCC_PLL2CFGR1_PLLRDY_Pos                      24
#define RCC_PLL2CFGR1_PLLRDY_Msk                      (0x1 << 24)
#define RCC_PLL2CFGR1_PLLRDY                          (0x1 << 24)
#define RCC_PLL2CFGR1_CKREFST_Pos                     28
#define RCC_PLL2CFGR1_CKREFST_Msk                     (0x1 << 28)
#define RCC_PLL2CFGR1_CKREFST                         (0x1 << 28)

/* Bit fields for RCC_PLL2CFGR2 register */
#define RCC_PLL2CFGR2_FREFDIV_Pos                     0
#define RCC_PLL2CFGR2_FREFDIV_Msk                     (0x3f << 0)
#define RCC_PLL2CFGR2_FREFDIV                         (0x3f << 0)
#define RCC_PLL2CFGR2_FBDIV_Pos                       16
#define RCC_PLL2CFGR2_FBDIV_Msk                       (0xfff << 16)
#define RCC_PLL2CFGR2_FBDIV                           (0xfff << 16)

/* Bit fields for RCC_PLL2CFGR3 register */
#define RCC_PLL2CFGR3_FRACIN_Pos                      0
#define RCC_PLL2CFGR3_FRACIN_Msk                      (0xffffff << 0)
#define RCC_PLL2CFGR3_FRACIN                          (0xffffff << 0)
#define RCC_PLL2CFGR3_DOWNSPREAD_Pos                  24
#define RCC_PLL2CFGR3_DOWNSPREAD_Msk                  (0x1 << 24)
#define RCC_PLL2CFGR3_DOWNSPREAD                      (0x1 << 24)
#define RCC_PLL2CFGR3_DACEN_Pos                       25
#define RCC_PLL2CFGR3_DACEN_Msk                       (0x1 << 25)
#define RCC_PLL2CFGR3_DACEN                           (0x1 << 25)
#define RCC_PLL2CFGR3_SSCGDIS_Pos                     26
#define RCC_PLL2CFGR3_SSCGDIS_Msk                     (0x1 << 26)
#define RCC_PLL2CFGR3_SSCGDIS                         (0x1 << 26)

/* Bit fields for RCC_PLL2CFGR4 register */
#define RCC_PLL2CFGR4_DSMEN_Pos                       8
#define RCC_PLL2CFGR4_DSMEN_Msk                       (0x1 << 8)
#define RCC_PLL2CFGR4_DSMEN                           (0x1 << 8)
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN_Pos               9
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN_Msk               (0x1 << 9)
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN                   (0x1 << 9)
#define RCC_PLL2CFGR4_BYPASS_Pos                      10
#define RCC_PLL2CFGR4_BYPASS_Msk                      (0x1 << 10)
#define RCC_PLL2CFGR4_BYPASS                          (0x1 << 10)

/* Bit fields for RCC_PLL2CFGR5 register */
#define RCC_PLL2CFGR5_DIVVAL_Pos                      0
#define RCC_PLL2CFGR5_DIVVAL_Msk                      (0xf << 0)
#define RCC_PLL2CFGR5_DIVVAL                          (0xf << 0)
#define RCC_PLL2CFGR5_SPREAD_Pos                      16
#define RCC_PLL2CFGR5_SPREAD_Msk                      (0x1f << 16)
#define RCC_PLL2CFGR5_SPREAD                          (0x1f << 16)

/* Bit fields for RCC_PLL2CFGR6 register */
#define RCC_PLL2CFGR6_POSTDIV1_Pos                    0
#define RCC_PLL2CFGR6_POSTDIV1_Msk                    (0x7 << 0)
#define RCC_PLL2CFGR6_POSTDIV1                        (0x7 << 0)

/* Bit fields for RCC_PLL2CFGR7 register */
#define RCC_PLL2CFGR7_POSTDIV2_Pos                    0
#define RCC_PLL2CFGR7_POSTDIV2_Msk                    (0x7 << 0)
#define RCC_PLL2CFGR7_POSTDIV2                        (0x7 << 0)

/* Bit fields for RCC_PLL3CFGR1 register */
#define RCC_PLL3CFGR1_SSMODRST_Pos                    0
#define RCC_PLL3CFGR1_SSMODRST_Msk                    (0x1 << 0)
#define RCC_PLL3CFGR1_SSMODRST                        (0x1 << 0)
#define RCC_PLL3CFGR1_PLLEN_Pos                       8
#define RCC_PLL3CFGR1_PLLEN_Msk                       (0x1 << 8)
#define RCC_PLL3CFGR1_PLLEN                           (0x1 << 8)
#define RCC_PLL3CFGR1_PLLRDY_Pos                      24
#define RCC_PLL3CFGR1_PLLRDY_Msk                      (0x1 << 24)
#define RCC_PLL3CFGR1_PLLRDY                          (0x1 << 24)
#define RCC_PLL3CFGR1_CKREFST_Pos                     28
#define RCC_PLL3CFGR1_CKREFST_Msk                     (0x1 << 28)
#define RCC_PLL3CFGR1_CKREFST                         (0x1 << 28)

/* Bit fields for RCC_PLL3CFGR2 register */
#define RCC_PLL3CFGR2_FREFDIV_Pos                     0
#define RCC_PLL3CFGR2_FREFDIV_Msk                     (0x3f << 0)
#define RCC_PLL3CFGR2_FREFDIV                         (0x3f << 0)
#define RCC_PLL3CFGR2_FBDIV_Pos                       16
#define RCC_PLL3CFGR2_FBDIV_Msk                       (0xfff << 16)
#define RCC_PLL3CFGR2_FBDIV                           (0xfff << 16)

/* Bit fields for RCC_PLL3CFGR3 register */
#define RCC_PLL3CFGR3_FRACIN_Pos                      0
#define RCC_PLL3CFGR3_FRACIN_Msk                      (0xffffff << 0)
#define RCC_PLL3CFGR3_FRACIN                          (0xffffff << 0)
#define RCC_PLL3CFGR3_DOWNSPREAD_Pos                  24
#define RCC_PLL3CFGR3_DOWNSPREAD_Msk                  (0x1 << 24)
#define RCC_PLL3CFGR3_DOWNSPREAD                      (0x1 << 24)
#define RCC_PLL3CFGR3_DACEN_Pos                       25
#define RCC_PLL3CFGR3_DACEN_Msk                       (0x1 << 25)
#define RCC_PLL3CFGR3_DACEN                           (0x1 << 25)
#define RCC_PLL3CFGR3_SSCGDIS_Pos                     26
#define RCC_PLL3CFGR3_SSCGDIS_Msk                     (0x1 << 26)
#define RCC_PLL3CFGR3_SSCGDIS                         (0x1 << 26)

/* Bit fields for RCC_PLL3CFGR4 register */
#define RCC_PLL3CFGR4_DSMEN_Pos                       8
#define RCC_PLL3CFGR4_DSMEN_Msk                       (0x1 << 8)
#define RCC_PLL3CFGR4_DSMEN                           (0x1 << 8)
#define RCC_PLL3CFGR4_FOUTPOSTDIVEN_Pos               9
#define RCC_PLL3CFGR4_FOUTPOSTDIVEN_Msk               (0x1 << 9)
#define RCC_PLL3CFGR4_FOUTPOSTDIVEN                   (0x1 << 9)
#define RCC_PLL3CFGR4_BYPASS_Pos                      10
#define RCC_PLL3CFGR4_BYPASS_Msk                      (0x1 << 10)
#define RCC_PLL3CFGR4_BYPASS                          (0x1 << 10)

/* Bit fields for RCC_PLL3CFGR5 register */
#define RCC_PLL3CFGR5_DIVVAL_Pos                      0
#define RCC_PLL3CFGR5_DIVVAL_Msk                      (0xf << 0)
#define RCC_PLL3CFGR5_DIVVAL                          (0xf << 0)
#define RCC_PLL3CFGR5_SPREAD_Pos                      16
#define RCC_PLL3CFGR5_SPREAD_Msk                      (0x1f << 16)
#define RCC_PLL3CFGR5_SPREAD                          (0x1f << 16)

/* Bit fields for RCC_PLL3CFGR6 register */
#define RCC_PLL3CFGR6_POSTDIV1_Pos                    0
#define RCC_PLL3CFGR6_POSTDIV1_Msk                    (0x7 << 0)
#define RCC_PLL3CFGR6_POSTDIV1                        (0x7 << 0)

/* Bit fields for RCC_PLL3CFGR7 register */
#define RCC_PLL3CFGR7_POSTDIV2_Pos                    0
#define RCC_PLL3CFGR7_POSTDIV2_Msk                    (0x7 << 0)
#define RCC_PLL3CFGR7_POSTDIV2                        (0x7 << 0)

/* Bit fields for RCC_TIM1CFGR register */
#define RCC_TIM1CFGR_TIM1RST_Pos                      0
#define RCC_TIM1CFGR_TIM1RST_Msk                      (0x1 << 0)
#define RCC_TIM1CFGR_TIM1RST                          (0x1 << 0)
#define RCC_TIM1CFGR_TIM1EN_Pos                       1
#define RCC_TIM1CFGR_TIM1EN_Msk                       (0x1 << 1)
#define RCC_TIM1CFGR_TIM1EN                           (0x1 << 1)
#define RCC_TIM1CFGR_TIM1LPEN_Pos                     2
#define RCC_TIM1CFGR_TIM1LPEN_Msk                     (0x1 << 2)
#define RCC_TIM1CFGR_TIM1LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM2CFGR register */
#define RCC_TIM2CFGR_TIM2RST_Pos                      0
#define RCC_TIM2CFGR_TIM2RST_Msk                      (0x1 << 0)
#define RCC_TIM2CFGR_TIM2RST                          (0x1 << 0)
#define RCC_TIM2CFGR_TIM2EN_Pos                       1
#define RCC_TIM2CFGR_TIM2EN_Msk                       (0x1 << 1)
#define RCC_TIM2CFGR_TIM2EN                           (0x1 << 1)
#define RCC_TIM2CFGR_TIM2LPEN_Pos                     2
#define RCC_TIM2CFGR_TIM2LPEN_Msk                     (0x1 << 2)
#define RCC_TIM2CFGR_TIM2LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM3CFGR register */
#define RCC_TIM3CFGR_TIM3RST_Pos                      0
#define RCC_TIM3CFGR_TIM3RST_Msk                      (0x1 << 0)
#define RCC_TIM3CFGR_TIM3RST                          (0x1 << 0)
#define RCC_TIM3CFGR_TIM3EN_Pos                       1
#define RCC_TIM3CFGR_TIM3EN_Msk                       (0x1 << 1)
#define RCC_TIM3CFGR_TIM3EN                           (0x1 << 1)
#define RCC_TIM3CFGR_TIM3LPEN_Pos                     2
#define RCC_TIM3CFGR_TIM3LPEN_Msk                     (0x1 << 2)
#define RCC_TIM3CFGR_TIM3LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM4CFGR register */
#define RCC_TIM4CFGR_TIM4RST_Pos                      0
#define RCC_TIM4CFGR_TIM4RST_Msk                      (0x1 << 0)
#define RCC_TIM4CFGR_TIM4RST                          (0x1 << 0)
#define RCC_TIM4CFGR_TIM4EN_Pos                       1
#define RCC_TIM4CFGR_TIM4EN_Msk                       (0x1 << 1)
#define RCC_TIM4CFGR_TIM4EN                           (0x1 << 1)
#define RCC_TIM4CFGR_TIM4LPEN_Pos                     2
#define RCC_TIM4CFGR_TIM4LPEN_Msk                     (0x1 << 2)
#define RCC_TIM4CFGR_TIM4LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM5CFGR register */
#define RCC_TIM5CFGR_TIM5RST_Pos                      0
#define RCC_TIM5CFGR_TIM5RST_Msk                      (0x1 << 0)
#define RCC_TIM5CFGR_TIM5RST                          (0x1 << 0)
#define RCC_TIM5CFGR_TIM5EN_Pos                       1
#define RCC_TIM5CFGR_TIM5EN_Msk                       (0x1 << 1)
#define RCC_TIM5CFGR_TIM5EN                           (0x1 << 1)
#define RCC_TIM5CFGR_TIM5LPEN_Pos                     2
#define RCC_TIM5CFGR_TIM5LPEN_Msk                     (0x1 << 2)
#define RCC_TIM5CFGR_TIM5LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM6CFGR register */
#define RCC_TIM6CFGR_TIM6RST_Pos                      0
#define RCC_TIM6CFGR_TIM6RST_Msk                      (0x1 << 0)
#define RCC_TIM6CFGR_TIM6RST                          (0x1 << 0)
#define RCC_TIM6CFGR_TIM6EN_Pos                       1
#define RCC_TIM6CFGR_TIM6EN_Msk                       (0x1 << 1)
#define RCC_TIM6CFGR_TIM6EN                           (0x1 << 1)
#define RCC_TIM6CFGR_TIM6LPEN_Pos                     2
#define RCC_TIM6CFGR_TIM6LPEN_Msk                     (0x1 << 2)
#define RCC_TIM6CFGR_TIM6LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM7CFGR register */
#define RCC_TIM7CFGR_TIM7RST_Pos                      0
#define RCC_TIM7CFGR_TIM7RST_Msk                      (0x1 << 0)
#define RCC_TIM7CFGR_TIM7RST                          (0x1 << 0)
#define RCC_TIM7CFGR_TIM7EN_Pos                       1
#define RCC_TIM7CFGR_TIM7EN_Msk                       (0x1 << 1)
#define RCC_TIM7CFGR_TIM7EN                           (0x1 << 1)
#define RCC_TIM7CFGR_TIM7LPEN_Pos                     2
#define RCC_TIM7CFGR_TIM7LPEN_Msk                     (0x1 << 2)
#define RCC_TIM7CFGR_TIM7LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM8CFGR register */
#define RCC_TIM8CFGR_TIM8RST_Pos                      0
#define RCC_TIM8CFGR_TIM8RST_Msk                      (0x1 << 0)
#define RCC_TIM8CFGR_TIM8RST                          (0x1 << 0)
#define RCC_TIM8CFGR_TIM8EN_Pos                       1
#define RCC_TIM8CFGR_TIM8EN_Msk                       (0x1 << 1)
#define RCC_TIM8CFGR_TIM8EN                           (0x1 << 1)
#define RCC_TIM8CFGR_TIM8LPEN_Pos                     2
#define RCC_TIM8CFGR_TIM8LPEN_Msk                     (0x1 << 2)
#define RCC_TIM8CFGR_TIM8LPEN                         (0x1 << 2)

/* Bit fields for RCC_TIM10CFGR register */
#define RCC_TIM10CFGR_TIM10RST_Pos                    0
#define RCC_TIM10CFGR_TIM10RST_Msk                    (0x1 << 0)
#define RCC_TIM10CFGR_TIM10RST                        (0x1 << 0)
#define RCC_TIM10CFGR_TIM10EN_Pos                     1
#define RCC_TIM10CFGR_TIM10EN_Msk                     (0x1 << 1)
#define RCC_TIM10CFGR_TIM10EN                         (0x1 << 1)
#define RCC_TIM10CFGR_TIM10LPEN_Pos                   2
#define RCC_TIM10CFGR_TIM10LPEN_Msk                   (0x1 << 2)
#define RCC_TIM10CFGR_TIM10LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM11CFGR register */
#define RCC_TIM11CFGR_TIM11RST_Pos                    0
#define RCC_TIM11CFGR_TIM11RST_Msk                    (0x1 << 0)
#define RCC_TIM11CFGR_TIM11RST                        (0x1 << 0)
#define RCC_TIM11CFGR_TIM11EN_Pos                     1
#define RCC_TIM11CFGR_TIM11EN_Msk                     (0x1 << 1)
#define RCC_TIM11CFGR_TIM11EN                         (0x1 << 1)
#define RCC_TIM11CFGR_TIM11LPEN_Pos                   2
#define RCC_TIM11CFGR_TIM11LPEN_Msk                   (0x1 << 2)
#define RCC_TIM11CFGR_TIM11LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM12CFGR register */
#define RCC_TIM12CFGR_TIM12RST_Pos                    0
#define RCC_TIM12CFGR_TIM12RST_Msk                    (0x1 << 0)
#define RCC_TIM12CFGR_TIM12RST                        (0x1 << 0)
#define RCC_TIM12CFGR_TIM12EN_Pos                     1
#define RCC_TIM12CFGR_TIM12EN_Msk                     (0x1 << 1)
#define RCC_TIM12CFGR_TIM12EN                         (0x1 << 1)
#define RCC_TIM12CFGR_TIM12LPEN_Pos                   2
#define RCC_TIM12CFGR_TIM12LPEN_Msk                   (0x1 << 2)
#define RCC_TIM12CFGR_TIM12LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM13CFGR register */
#define RCC_TIM13CFGR_TIM13RST_Pos                    0
#define RCC_TIM13CFGR_TIM13RST_Msk                    (0x1 << 0)
#define RCC_TIM13CFGR_TIM13RST                        (0x1 << 0)
#define RCC_TIM13CFGR_TIM13EN_Pos                     1
#define RCC_TIM13CFGR_TIM13EN_Msk                     (0x1 << 1)
#define RCC_TIM13CFGR_TIM13EN                         (0x1 << 1)
#define RCC_TIM13CFGR_TIM13LPEN_Pos                   2
#define RCC_TIM13CFGR_TIM13LPEN_Msk                   (0x1 << 2)
#define RCC_TIM13CFGR_TIM13LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM14CFGR register */
#define RCC_TIM14CFGR_TIM14RST_Pos                    0
#define RCC_TIM14CFGR_TIM14RST_Msk                    (0x1 << 0)
#define RCC_TIM14CFGR_TIM14RST                        (0x1 << 0)
#define RCC_TIM14CFGR_TIM14EN_Pos                     1
#define RCC_TIM14CFGR_TIM14EN_Msk                     (0x1 << 1)
#define RCC_TIM14CFGR_TIM14EN                         (0x1 << 1)
#define RCC_TIM14CFGR_TIM14LPEN_Pos                   2
#define RCC_TIM14CFGR_TIM14LPEN_Msk                   (0x1 << 2)
#define RCC_TIM14CFGR_TIM14LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM15CFGR register */
#define RCC_TIM15CFGR_TIM15RST_Pos                    0
#define RCC_TIM15CFGR_TIM15RST_Msk                    (0x1 << 0)
#define RCC_TIM15CFGR_TIM15RST                        (0x1 << 0)
#define RCC_TIM15CFGR_TIM15EN_Pos                     1
#define RCC_TIM15CFGR_TIM15EN_Msk                     (0x1 << 1)
#define RCC_TIM15CFGR_TIM15EN                         (0x1 << 1)
#define RCC_TIM15CFGR_TIM15LPEN_Pos                   2
#define RCC_TIM15CFGR_TIM15LPEN_Msk                   (0x1 << 2)
#define RCC_TIM15CFGR_TIM15LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM16CFGR register */
#define RCC_TIM16CFGR_TIM16RST_Pos                    0
#define RCC_TIM16CFGR_TIM16RST_Msk                    (0x1 << 0)
#define RCC_TIM16CFGR_TIM16RST                        (0x1 << 0)
#define RCC_TIM16CFGR_TIM16EN_Pos                     1
#define RCC_TIM16CFGR_TIM16EN_Msk                     (0x1 << 1)
#define RCC_TIM16CFGR_TIM16EN                         (0x1 << 1)
#define RCC_TIM16CFGR_TIM16LPEN_Pos                   2
#define RCC_TIM16CFGR_TIM16LPEN_Msk                   (0x1 << 2)
#define RCC_TIM16CFGR_TIM16LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM17CFGR register */
#define RCC_TIM17CFGR_TIM17RST_Pos                    0
#define RCC_TIM17CFGR_TIM17RST_Msk                    (0x1 << 0)
#define RCC_TIM17CFGR_TIM17RST                        (0x1 << 0)
#define RCC_TIM17CFGR_TIM17EN_Pos                     1
#define RCC_TIM17CFGR_TIM17EN_Msk                     (0x1 << 1)
#define RCC_TIM17CFGR_TIM17EN                         (0x1 << 1)
#define RCC_TIM17CFGR_TIM17LPEN_Pos                   2
#define RCC_TIM17CFGR_TIM17LPEN_Msk                   (0x1 << 2)
#define RCC_TIM17CFGR_TIM17LPEN                       (0x1 << 2)

/* Bit fields for RCC_TIM20CFGR register */
#define RCC_TIM20CFGR_TIM20RST_Pos                    0
#define RCC_TIM20CFGR_TIM20RST_Msk                    (0x1 << 0)
#define RCC_TIM20CFGR_TIM20RST                        (0x1 << 0)
#define RCC_TIM20CFGR_TIM20EN_Pos                     1
#define RCC_TIM20CFGR_TIM20EN_Msk                     (0x1 << 1)
#define RCC_TIM20CFGR_TIM20EN                         (0x1 << 1)
#define RCC_TIM20CFGR_TIM20LPEN_Pos                   2
#define RCC_TIM20CFGR_TIM20LPEN_Msk                   (0x1 << 2)
#define RCC_TIM20CFGR_TIM20LPEN                       (0x1 << 2)

/* Bit fields for RCC_LPTIM1CFGR register */
#define RCC_LPTIM1CFGR_LPTIM1RST_Pos                  0
#define RCC_LPTIM1CFGR_LPTIM1RST_Msk                  (0x1 << 0)
#define RCC_LPTIM1CFGR_LPTIM1RST                      (0x1 << 0)
#define RCC_LPTIM1CFGR_LPTIM1EN_Pos                   1
#define RCC_LPTIM1CFGR_LPTIM1EN_Msk                   (0x1 << 1)
#define RCC_LPTIM1CFGR_LPTIM1EN                       (0x1 << 1)
#define RCC_LPTIM1CFGR_LPTIM1LPEN_Pos                 2
#define RCC_LPTIM1CFGR_LPTIM1LPEN_Msk                 (0x1 << 2)
#define RCC_LPTIM1CFGR_LPTIM1LPEN                     (0x1 << 2)

/* Bit fields for RCC_LPTIM2CFGR register */
#define RCC_LPTIM2CFGR_LPTIM2RST_Pos                  0
#define RCC_LPTIM2CFGR_LPTIM2RST_Msk                  (0x1 << 0)
#define RCC_LPTIM2CFGR_LPTIM2RST                      (0x1 << 0)
#define RCC_LPTIM2CFGR_LPTIM2EN_Pos                   1
#define RCC_LPTIM2CFGR_LPTIM2EN_Msk                   (0x1 << 1)
#define RCC_LPTIM2CFGR_LPTIM2EN                       (0x1 << 1)
#define RCC_LPTIM2CFGR_LPTIM2LPEN_Pos                 2
#define RCC_LPTIM2CFGR_LPTIM2LPEN_Msk                 (0x1 << 2)
#define RCC_LPTIM2CFGR_LPTIM2LPEN                     (0x1 << 2)

/* Bit fields for RCC_LPTIM3CFGR register */
#define RCC_LPTIM3CFGR_LPTIM3RST_Pos                  0
#define RCC_LPTIM3CFGR_LPTIM3RST_Msk                  (0x1 << 0)
#define RCC_LPTIM3CFGR_LPTIM3RST                      (0x1 << 0)
#define RCC_LPTIM3CFGR_LPTIM3EN_Pos                   1
#define RCC_LPTIM3CFGR_LPTIM3EN_Msk                   (0x1 << 1)
#define RCC_LPTIM3CFGR_LPTIM3EN                       (0x1 << 1)
#define RCC_LPTIM3CFGR_LPTIM3LPEN_Pos                 2
#define RCC_LPTIM3CFGR_LPTIM3LPEN_Msk                 (0x1 << 2)
#define RCC_LPTIM3CFGR_LPTIM3LPEN                     (0x1 << 2)
#define RCC_LPTIM3CFGR_LPTIM3AMEN_Pos                 3
#define RCC_LPTIM3CFGR_LPTIM3AMEN_Msk                 (0x1 << 3)
#define RCC_LPTIM3CFGR_LPTIM3AMEN                     (0x1 << 3)

/* Bit fields for RCC_LPTIM4CFGR register */
#define RCC_LPTIM4CFGR_LPTIM4RST_Pos                  0
#define RCC_LPTIM4CFGR_LPTIM4RST_Msk                  (0x1 << 0)
#define RCC_LPTIM4CFGR_LPTIM4RST                      (0x1 << 0)
#define RCC_LPTIM4CFGR_LPTIM4EN_Pos                   1
#define RCC_LPTIM4CFGR_LPTIM4EN_Msk                   (0x1 << 1)
#define RCC_LPTIM4CFGR_LPTIM4EN                       (0x1 << 1)
#define RCC_LPTIM4CFGR_LPTIM4LPEN_Pos                 2
#define RCC_LPTIM4CFGR_LPTIM4LPEN_Msk                 (0x1 << 2)
#define RCC_LPTIM4CFGR_LPTIM4LPEN                     (0x1 << 2)
#define RCC_LPTIM4CFGR_LPTIM4AMEN_Pos                 3
#define RCC_LPTIM4CFGR_LPTIM4AMEN_Msk                 (0x1 << 3)
#define RCC_LPTIM4CFGR_LPTIM4AMEN                     (0x1 << 3)

/* Bit fields for RCC_LPTIM5CFGR register */
#define RCC_LPTIM5CFGR_LPTIM5RST_Pos                  0
#define RCC_LPTIM5CFGR_LPTIM5RST_Msk                  (0x1 << 0)
#define RCC_LPTIM5CFGR_LPTIM5RST                      (0x1 << 0)
#define RCC_LPTIM5CFGR_LPTIM5EN_Pos                   1
#define RCC_LPTIM5CFGR_LPTIM5EN_Msk                   (0x1 << 1)
#define RCC_LPTIM5CFGR_LPTIM5EN                       (0x1 << 1)
#define RCC_LPTIM5CFGR_LPTIM5LPEN_Pos                 2
#define RCC_LPTIM5CFGR_LPTIM5LPEN_Msk                 (0x1 << 2)
#define RCC_LPTIM5CFGR_LPTIM5LPEN                     (0x1 << 2)
#define RCC_LPTIM5CFGR_LPTIM5AMEN_Pos                 3
#define RCC_LPTIM5CFGR_LPTIM5AMEN_Msk                 (0x1 << 3)
#define RCC_LPTIM5CFGR_LPTIM5AMEN                     (0x1 << 3)

/* Bit fields for RCC_SPI1CFGR register */
#define RCC_SPI1CFGR_SPI1RST_Pos                      0
#define RCC_SPI1CFGR_SPI1RST_Msk                      (0x1 << 0)
#define RCC_SPI1CFGR_SPI1RST                          (0x1 << 0)
#define RCC_SPI1CFGR_SPI1EN_Pos                       1
#define RCC_SPI1CFGR_SPI1EN_Msk                       (0x1 << 1)
#define RCC_SPI1CFGR_SPI1EN                           (0x1 << 1)
#define RCC_SPI1CFGR_SPI1LPEN_Pos                     2
#define RCC_SPI1CFGR_SPI1LPEN_Msk                     (0x1 << 2)
#define RCC_SPI1CFGR_SPI1LPEN                         (0x1 << 2)

/* Bit fields for RCC_SPI2CFGR register */
#define RCC_SPI2CFGR_SPI2RST_Pos                      0
#define RCC_SPI2CFGR_SPI2RST_Msk                      (0x1 << 0)
#define RCC_SPI2CFGR_SPI2RST                          (0x1 << 0)
#define RCC_SPI2CFGR_SPI2EN_Pos                       1
#define RCC_SPI2CFGR_SPI2EN_Msk                       (0x1 << 1)
#define RCC_SPI2CFGR_SPI2EN                           (0x1 << 1)
#define RCC_SPI2CFGR_SPI2LPEN_Pos                     2
#define RCC_SPI2CFGR_SPI2LPEN_Msk                     (0x1 << 2)
#define RCC_SPI2CFGR_SPI2LPEN                         (0x1 << 2)

/* Bit fields for RCC_SPI3CFGR register */
#define RCC_SPI3CFGR_SPI3RST_Pos                      0
#define RCC_SPI3CFGR_SPI3RST_Msk                      (0x1 << 0)
#define RCC_SPI3CFGR_SPI3RST                          (0x1 << 0)
#define RCC_SPI3CFGR_SPI3EN_Pos                       1
#define RCC_SPI3CFGR_SPI3EN_Msk                       (0x1 << 1)
#define RCC_SPI3CFGR_SPI3EN                           (0x1 << 1)
#define RCC_SPI3CFGR_SPI3LPEN_Pos                     2
#define RCC_SPI3CFGR_SPI3LPEN_Msk                     (0x1 << 2)
#define RCC_SPI3CFGR_SPI3LPEN                         (0x1 << 2)

/* Bit fields for RCC_SPI4CFGR register */
#define RCC_SPI4CFGR_SPI4RST_Pos                      0
#define RCC_SPI4CFGR_SPI4RST_Msk                      (0x1 << 0)
#define RCC_SPI4CFGR_SPI4RST                          (0x1 << 0)
#define RCC_SPI4CFGR_SPI4EN_Pos                       1
#define RCC_SPI4CFGR_SPI4EN_Msk                       (0x1 << 1)
#define RCC_SPI4CFGR_SPI4EN                           (0x1 << 1)
#define RCC_SPI4CFGR_SPI4LPEN_Pos                     2
#define RCC_SPI4CFGR_SPI4LPEN_Msk                     (0x1 << 2)
#define RCC_SPI4CFGR_SPI4LPEN                         (0x1 << 2)

/* Bit fields for RCC_SPI5CFGR register */
#define RCC_SPI5CFGR_SPI5RST_Pos                      0
#define RCC_SPI5CFGR_SPI5RST_Msk                      (0x1 << 0)
#define RCC_SPI5CFGR_SPI5RST                          (0x1 << 0)
#define RCC_SPI5CFGR_SPI5EN_Pos                       1
#define RCC_SPI5CFGR_SPI5EN_Msk                       (0x1 << 1)
#define RCC_SPI5CFGR_SPI5EN                           (0x1 << 1)
#define RCC_SPI5CFGR_SPI5LPEN_Pos                     2
#define RCC_SPI5CFGR_SPI5LPEN_Msk                     (0x1 << 2)
#define RCC_SPI5CFGR_SPI5LPEN                         (0x1 << 2)

/* Bit fields for RCC_SPI6CFGR register */
#define RCC_SPI6CFGR_SPI6RST_Pos                      0
#define RCC_SPI6CFGR_SPI6RST_Msk                      (0x1 << 0)
#define RCC_SPI6CFGR_SPI6RST                          (0x1 << 0)
#define RCC_SPI6CFGR_SPI6EN_Pos                       1
#define RCC_SPI6CFGR_SPI6EN_Msk                       (0x1 << 1)
#define RCC_SPI6CFGR_SPI6EN                           (0x1 << 1)
#define RCC_SPI6CFGR_SPI6LPEN_Pos                     2
#define RCC_SPI6CFGR_SPI6LPEN_Msk                     (0x1 << 2)
#define RCC_SPI6CFGR_SPI6LPEN                         (0x1 << 2)

/* Bit fields for RCC_SPI7CFGR register */
#define RCC_SPI7CFGR_SPI7RST_Pos                      0
#define RCC_SPI7CFGR_SPI7RST_Msk                      (0x1 << 0)
#define RCC_SPI7CFGR_SPI7RST                          (0x1 << 0)
#define RCC_SPI7CFGR_SPI7EN_Pos                       1
#define RCC_SPI7CFGR_SPI7EN_Msk                       (0x1 << 1)
#define RCC_SPI7CFGR_SPI7EN                           (0x1 << 1)
#define RCC_SPI7CFGR_SPI7LPEN_Pos                     2
#define RCC_SPI7CFGR_SPI7LPEN_Msk                     (0x1 << 2)
#define RCC_SPI7CFGR_SPI7LPEN                         (0x1 << 2)

/* Bit fields for RCC_SPI8CFGR register */
#define RCC_SPI8CFGR_SPI8RST_Pos                      0
#define RCC_SPI8CFGR_SPI8RST_Msk                      (0x1 << 0)
#define RCC_SPI8CFGR_SPI8RST                          (0x1 << 0)
#define RCC_SPI8CFGR_SPI8EN_Pos                       1
#define RCC_SPI8CFGR_SPI8EN_Msk                       (0x1 << 1)
#define RCC_SPI8CFGR_SPI8EN                           (0x1 << 1)
#define RCC_SPI8CFGR_SPI8LPEN_Pos                     2
#define RCC_SPI8CFGR_SPI8LPEN_Msk                     (0x1 << 2)
#define RCC_SPI8CFGR_SPI8LPEN                         (0x1 << 2)
#define RCC_SPI8CFGR_SPI8AMEN_Pos                     3
#define RCC_SPI8CFGR_SPI8AMEN_Msk                     (0x1 << 3)
#define RCC_SPI8CFGR_SPI8AMEN                         (0x1 << 3)

/* Bit fields for RCC_SPDIFRXCFGR register */
#define RCC_SPDIFRXCFGR_SPDIFRXRST_Pos                0
#define RCC_SPDIFRXCFGR_SPDIFRXRST_Msk                (0x1 << 0)
#define RCC_SPDIFRXCFGR_SPDIFRXRST                    (0x1 << 0)
#define RCC_SPDIFRXCFGR_SPDIFRXEN_Pos                 1
#define RCC_SPDIFRXCFGR_SPDIFRXEN_Msk                 (0x1 << 1)
#define RCC_SPDIFRXCFGR_SPDIFRXEN                     (0x1 << 1)
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN_Pos               2
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN_Msk               (0x1 << 2)
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN                   (0x1 << 2)

/* Bit fields for RCC_USART1CFGR register */
#define RCC_USART1CFGR_USART1RST_Pos                  0
#define RCC_USART1CFGR_USART1RST_Msk                  (0x1 << 0)
#define RCC_USART1CFGR_USART1RST                      (0x1 << 0)
#define RCC_USART1CFGR_USART1EN_Pos                   1
#define RCC_USART1CFGR_USART1EN_Msk                   (0x1 << 1)
#define RCC_USART1CFGR_USART1EN                       (0x1 << 1)
#define RCC_USART1CFGR_USART1LPEN_Pos                 2
#define RCC_USART1CFGR_USART1LPEN_Msk                 (0x1 << 2)
#define RCC_USART1CFGR_USART1LPEN                     (0x1 << 2)

/* Bit fields for RCC_USART2CFGR register */
#define RCC_USART2CFGR_USART2RST_Pos                  0
#define RCC_USART2CFGR_USART2RST_Msk                  (0x1 << 0)
#define RCC_USART2CFGR_USART2RST                      (0x1 << 0)
#define RCC_USART2CFGR_USART2EN_Pos                   1
#define RCC_USART2CFGR_USART2EN_Msk                   (0x1 << 1)
#define RCC_USART2CFGR_USART2EN                       (0x1 << 1)
#define RCC_USART2CFGR_USART2LPEN_Pos                 2
#define RCC_USART2CFGR_USART2LPEN_Msk                 (0x1 << 2)
#define RCC_USART2CFGR_USART2LPEN                     (0x1 << 2)

/* Bit fields for RCC_USART3CFGR register */
#define RCC_USART3CFGR_USART3RST_Pos                  0
#define RCC_USART3CFGR_USART3RST_Msk                  (0x1 << 0)
#define RCC_USART3CFGR_USART3RST                      (0x1 << 0)
#define RCC_USART3CFGR_USART3EN_Pos                   1
#define RCC_USART3CFGR_USART3EN_Msk                   (0x1 << 1)
#define RCC_USART3CFGR_USART3EN                       (0x1 << 1)
#define RCC_USART3CFGR_USART3LPEN_Pos                 2
#define RCC_USART3CFGR_USART3LPEN_Msk                 (0x1 << 2)
#define RCC_USART3CFGR_USART3LPEN                     (0x1 << 2)

/* Bit fields for RCC_UART4CFGR register */
#define RCC_UART4CFGR_UART4RST_Pos                    0
#define RCC_UART4CFGR_UART4RST_Msk                    (0x1 << 0)
#define RCC_UART4CFGR_UART4RST                        (0x1 << 0)
#define RCC_UART4CFGR_UART4EN_Pos                     1
#define RCC_UART4CFGR_UART4EN_Msk                     (0x1 << 1)
#define RCC_UART4CFGR_UART4EN                         (0x1 << 1)
#define RCC_UART4CFGR_UART4LPEN_Pos                   2
#define RCC_UART4CFGR_UART4LPEN_Msk                   (0x1 << 2)
#define RCC_UART4CFGR_UART4LPEN                       (0x1 << 2)

/* Bit fields for RCC_UART5CFGR register */
#define RCC_UART5CFGR_UART5RST_Pos                    0
#define RCC_UART5CFGR_UART5RST_Msk                    (0x1 << 0)
#define RCC_UART5CFGR_UART5RST                        (0x1 << 0)
#define RCC_UART5CFGR_UART5EN_Pos                     1
#define RCC_UART5CFGR_UART5EN_Msk                     (0x1 << 1)
#define RCC_UART5CFGR_UART5EN                         (0x1 << 1)
#define RCC_UART5CFGR_UART5LPEN_Pos                   2
#define RCC_UART5CFGR_UART5LPEN_Msk                   (0x1 << 2)
#define RCC_UART5CFGR_UART5LPEN                       (0x1 << 2)

/* Bit fields for RCC_USART6CFGR register */
#define RCC_USART6CFGR_USART6RST_Pos                  0
#define RCC_USART6CFGR_USART6RST_Msk                  (0x1 << 0)
#define RCC_USART6CFGR_USART6RST                      (0x1 << 0)
#define RCC_USART6CFGR_USART6EN_Pos                   1
#define RCC_USART6CFGR_USART6EN_Msk                   (0x1 << 1)
#define RCC_USART6CFGR_USART6EN                       (0x1 << 1)
#define RCC_USART6CFGR_USART6LPEN_Pos                 2
#define RCC_USART6CFGR_USART6LPEN_Msk                 (0x1 << 2)
#define RCC_USART6CFGR_USART6LPEN                     (0x1 << 2)

/* Bit fields for RCC_UART7CFGR register */
#define RCC_UART7CFGR_UART7RST_Pos                    0
#define RCC_UART7CFGR_UART7RST_Msk                    (0x1 << 0)
#define RCC_UART7CFGR_UART7RST                        (0x1 << 0)
#define RCC_UART7CFGR_UART7EN_Pos                     1
#define RCC_UART7CFGR_UART7EN_Msk                     (0x1 << 1)
#define RCC_UART7CFGR_UART7EN                         (0x1 << 1)
#define RCC_UART7CFGR_UART7LPEN_Pos                   2
#define RCC_UART7CFGR_UART7LPEN_Msk                   (0x1 << 2)
#define RCC_UART7CFGR_UART7LPEN                       (0x1 << 2)

/* Bit fields for RCC_UART8CFGR register */
#define RCC_UART8CFGR_UART8RST_Pos                    0
#define RCC_UART8CFGR_UART8RST_Msk                    (0x1 << 0)
#define RCC_UART8CFGR_UART8RST                        (0x1 << 0)
#define RCC_UART8CFGR_UART8EN_Pos                     1
#define RCC_UART8CFGR_UART8EN_Msk                     (0x1 << 1)
#define RCC_UART8CFGR_UART8EN                         (0x1 << 1)
#define RCC_UART8CFGR_UART8LPEN_Pos                   2
#define RCC_UART8CFGR_UART8LPEN_Msk                   (0x1 << 2)
#define RCC_UART8CFGR_UART8LPEN                       (0x1 << 2)

/* Bit fields for RCC_UART9CFGR register */
#define RCC_UART9CFGR_UART9RST_Pos                    0
#define RCC_UART9CFGR_UART9RST_Msk                    (0x1 << 0)
#define RCC_UART9CFGR_UART9RST                        (0x1 << 0)
#define RCC_UART9CFGR_UART9EN_Pos                     1
#define RCC_UART9CFGR_UART9EN_Msk                     (0x1 << 1)
#define RCC_UART9CFGR_UART9EN                         (0x1 << 1)
#define RCC_UART9CFGR_UART9LPEN_Pos                   2
#define RCC_UART9CFGR_UART9LPEN_Msk                   (0x1 << 2)
#define RCC_UART9CFGR_UART9LPEN                       (0x1 << 2)

/* Bit fields for RCC_LPUART1CFGR register */
#define RCC_LPUART1CFGR_LPUART1RST_Pos                0
#define RCC_LPUART1CFGR_LPUART1RST_Msk                (0x1 << 0)
#define RCC_LPUART1CFGR_LPUART1RST                    (0x1 << 0)
#define RCC_LPUART1CFGR_LPUART1EN_Pos                 1
#define RCC_LPUART1CFGR_LPUART1EN_Msk                 (0x1 << 1)
#define RCC_LPUART1CFGR_LPUART1EN                     (0x1 << 1)
#define RCC_LPUART1CFGR_LPUART1LPEN_Pos               2
#define RCC_LPUART1CFGR_LPUART1LPEN_Msk               (0x1 << 2)
#define RCC_LPUART1CFGR_LPUART1LPEN                   (0x1 << 2)
#define RCC_LPUART1CFGR_LPUART1AMEN_Pos               3
#define RCC_LPUART1CFGR_LPUART1AMEN_Msk               (0x1 << 3)
#define RCC_LPUART1CFGR_LPUART1AMEN                   (0x1 << 3)

/* Bit fields for RCC_I2C1CFGR register */
#define RCC_I2C1CFGR_I2C1RST_Pos                      0
#define RCC_I2C1CFGR_I2C1RST_Msk                      (0x1 << 0)
#define RCC_I2C1CFGR_I2C1RST                          (0x1 << 0)
#define RCC_I2C1CFGR_I2C1EN_Pos                       1
#define RCC_I2C1CFGR_I2C1EN_Msk                       (0x1 << 1)
#define RCC_I2C1CFGR_I2C1EN                           (0x1 << 1)
#define RCC_I2C1CFGR_I2C1LPEN_Pos                     2
#define RCC_I2C1CFGR_I2C1LPEN_Msk                     (0x1 << 2)
#define RCC_I2C1CFGR_I2C1LPEN                         (0x1 << 2)

/* Bit fields for RCC_I2C2CFGR register */
#define RCC_I2C2CFGR_I2C2RST_Pos                      0
#define RCC_I2C2CFGR_I2C2RST_Msk                      (0x1 << 0)
#define RCC_I2C2CFGR_I2C2RST                          (0x1 << 0)
#define RCC_I2C2CFGR_I2C2EN_Pos                       1
#define RCC_I2C2CFGR_I2C2EN_Msk                       (0x1 << 1)
#define RCC_I2C2CFGR_I2C2EN                           (0x1 << 1)
#define RCC_I2C2CFGR_I2C2LPEN_Pos                     2
#define RCC_I2C2CFGR_I2C2LPEN_Msk                     (0x1 << 2)
#define RCC_I2C2CFGR_I2C2LPEN                         (0x1 << 2)

/* Bit fields for RCC_I2C3CFGR register */
#define RCC_I2C3CFGR_I2C3RST_Pos                      0
#define RCC_I2C3CFGR_I2C3RST_Msk                      (0x1 << 0)
#define RCC_I2C3CFGR_I2C3RST                          (0x1 << 0)
#define RCC_I2C3CFGR_I2C3EN_Pos                       1
#define RCC_I2C3CFGR_I2C3EN_Msk                       (0x1 << 1)
#define RCC_I2C3CFGR_I2C3EN                           (0x1 << 1)
#define RCC_I2C3CFGR_I2C3LPEN_Pos                     2
#define RCC_I2C3CFGR_I2C3LPEN_Msk                     (0x1 << 2)
#define RCC_I2C3CFGR_I2C3LPEN                         (0x1 << 2)

/* Bit fields for RCC_I2C4CFGR register */
#define RCC_I2C4CFGR_I2C4RST_Pos                      0
#define RCC_I2C4CFGR_I2C4RST_Msk                      (0x1 << 0)
#define RCC_I2C4CFGR_I2C4RST                          (0x1 << 0)
#define RCC_I2C4CFGR_I2C4EN_Pos                       1
#define RCC_I2C4CFGR_I2C4EN_Msk                       (0x1 << 1)
#define RCC_I2C4CFGR_I2C4EN                           (0x1 << 1)
#define RCC_I2C4CFGR_I2C4LPEN_Pos                     2
#define RCC_I2C4CFGR_I2C4LPEN_Msk                     (0x1 << 2)
#define RCC_I2C4CFGR_I2C4LPEN                         (0x1 << 2)

/* Bit fields for RCC_I2C5CFGR register */
#define RCC_I2C5CFGR_I2C5RST_Pos                      0
#define RCC_I2C5CFGR_I2C5RST_Msk                      (0x1 << 0)
#define RCC_I2C5CFGR_I2C5RST                          (0x1 << 0)
#define RCC_I2C5CFGR_I2C5EN_Pos                       1
#define RCC_I2C5CFGR_I2C5EN_Msk                       (0x1 << 1)
#define RCC_I2C5CFGR_I2C5EN                           (0x1 << 1)
#define RCC_I2C5CFGR_I2C5LPEN_Pos                     2
#define RCC_I2C5CFGR_I2C5LPEN_Msk                     (0x1 << 2)
#define RCC_I2C5CFGR_I2C5LPEN                         (0x1 << 2)

/* Bit fields for RCC_I2C6CFGR register */
#define RCC_I2C6CFGR_I2C6RST_Pos                      0
#define RCC_I2C6CFGR_I2C6RST_Msk                      (0x1 << 0)
#define RCC_I2C6CFGR_I2C6RST                          (0x1 << 0)
#define RCC_I2C6CFGR_I2C6EN_Pos                       1
#define RCC_I2C6CFGR_I2C6EN_Msk                       (0x1 << 1)
#define RCC_I2C6CFGR_I2C6EN                           (0x1 << 1)
#define RCC_I2C6CFGR_I2C6LPEN_Pos                     2
#define RCC_I2C6CFGR_I2C6LPEN_Msk                     (0x1 << 2)
#define RCC_I2C6CFGR_I2C6LPEN                         (0x1 << 2)

/* Bit fields for RCC_I2C7CFGR register */
#define RCC_I2C7CFGR_I2C7RST_Pos                      0
#define RCC_I2C7CFGR_I2C7RST_Msk                      (0x1 << 0)
#define RCC_I2C7CFGR_I2C7RST                          (0x1 << 0)
#define RCC_I2C7CFGR_I2C7EN_Pos                       1
#define RCC_I2C7CFGR_I2C7EN_Msk                       (0x1 << 1)
#define RCC_I2C7CFGR_I2C7EN                           (0x1 << 1)
#define RCC_I2C7CFGR_I2C7LPEN_Pos                     2
#define RCC_I2C7CFGR_I2C7LPEN_Msk                     (0x1 << 2)
#define RCC_I2C7CFGR_I2C7LPEN                         (0x1 << 2)

/* Bit fields for RCC_I2C8CFGR register */
#define RCC_I2C8CFGR_I2C8RST_Pos                      0
#define RCC_I2C8CFGR_I2C8RST_Msk                      (0x1 << 0)
#define RCC_I2C8CFGR_I2C8RST                          (0x1 << 0)
#define RCC_I2C8CFGR_I2C8EN_Pos                       1
#define RCC_I2C8CFGR_I2C8EN_Msk                       (0x1 << 1)
#define RCC_I2C8CFGR_I2C8EN                           (0x1 << 1)
#define RCC_I2C8CFGR_I2C8LPEN_Pos                     2
#define RCC_I2C8CFGR_I2C8LPEN_Msk                     (0x1 << 2)
#define RCC_I2C8CFGR_I2C8LPEN                         (0x1 << 2)
#define RCC_I2C8CFGR_I2C8AMEN_Pos                     3
#define RCC_I2C8CFGR_I2C8AMEN_Msk                     (0x1 << 3)
#define RCC_I2C8CFGR_I2C8AMEN                         (0x1 << 3)

/* Bit fields for RCC_SAI1CFGR register */
#define RCC_SAI1CFGR_SAI1RST_Pos                      0
#define RCC_SAI1CFGR_SAI1RST_Msk                      (0x1 << 0)
#define RCC_SAI1CFGR_SAI1RST                          (0x1 << 0)
#define RCC_SAI1CFGR_SAI1EN_Pos                       1
#define RCC_SAI1CFGR_SAI1EN_Msk                       (0x1 << 1)
#define RCC_SAI1CFGR_SAI1EN                           (0x1 << 1)
#define RCC_SAI1CFGR_SAI1LPEN_Pos                     2
#define RCC_SAI1CFGR_SAI1LPEN_Msk                     (0x1 << 2)
#define RCC_SAI1CFGR_SAI1LPEN                         (0x1 << 2)

/* Bit fields for RCC_SAI2CFGR register */
#define RCC_SAI2CFGR_SAI2RST_Pos                      0
#define RCC_SAI2CFGR_SAI2RST_Msk                      (0x1 << 0)
#define RCC_SAI2CFGR_SAI2RST                          (0x1 << 0)
#define RCC_SAI2CFGR_SAI2EN_Pos                       1
#define RCC_SAI2CFGR_SAI2EN_Msk                       (0x1 << 1)
#define RCC_SAI2CFGR_SAI2EN                           (0x1 << 1)
#define RCC_SAI2CFGR_SAI2LPEN_Pos                     2
#define RCC_SAI2CFGR_SAI2LPEN_Msk                     (0x1 << 2)
#define RCC_SAI2CFGR_SAI2LPEN                         (0x1 << 2)

/* Bit fields for RCC_SAI3CFGR register */
#define RCC_SAI3CFGR_SAI3RST_Pos                      0
#define RCC_SAI3CFGR_SAI3RST_Msk                      (0x1 << 0)
#define RCC_SAI3CFGR_SAI3RST                          (0x1 << 0)
#define RCC_SAI3CFGR_SAI3EN_Pos                       1
#define RCC_SAI3CFGR_SAI3EN_Msk                       (0x1 << 1)
#define RCC_SAI3CFGR_SAI3EN                           (0x1 << 1)
#define RCC_SAI3CFGR_SAI3LPEN_Pos                     2
#define RCC_SAI3CFGR_SAI3LPEN_Msk                     (0x1 << 2)
#define RCC_SAI3CFGR_SAI3LPEN                         (0x1 << 2)

/* Bit fields for RCC_SAI4CFGR register */
#define RCC_SAI4CFGR_SAI4RST_Pos                      0
#define RCC_SAI4CFGR_SAI4RST_Msk                      (0x1 << 0)
#define RCC_SAI4CFGR_SAI4RST                          (0x1 << 0)
#define RCC_SAI4CFGR_SAI4EN_Pos                       1
#define RCC_SAI4CFGR_SAI4EN_Msk                       (0x1 << 1)
#define RCC_SAI4CFGR_SAI4EN                           (0x1 << 1)
#define RCC_SAI4CFGR_SAI4LPEN_Pos                     2
#define RCC_SAI4CFGR_SAI4LPEN_Msk                     (0x1 << 2)
#define RCC_SAI4CFGR_SAI4LPEN                         (0x1 << 2)

/* Bit fields for RCC_CECCFGR register */
#define RCC_CECCFGR_CECRST_Pos                        0
#define RCC_CECCFGR_CECRST_Msk                        (0x1 << 0)
#define RCC_CECCFGR_CECRST                            (0x1 << 0)
#define RCC_CECCFGR_CECEN_Pos                         1
#define RCC_CECCFGR_CECEN_Msk                         (0x1 << 1)
#define RCC_CECCFGR_CECEN                             (0x1 << 1)
#define RCC_CECCFGR_CECLPEN_Pos                       2
#define RCC_CECCFGR_CECLPEN_Msk                       (0x1 << 2)
#define RCC_CECCFGR_CECLPEN                           (0x1 << 2)
#define RCC_CECCFGR_CECAMEN_Pos                       3
#define RCC_CECCFGR_CECAMEN_Msk                       (0x1 << 3)
#define RCC_CECCFGR_CECAMEN                           (0x1 << 3)

/* Bit fields for RCC_MDF1CFGR register */
#define RCC_MDF1CFGR_MDF1RST_Pos                      0
#define RCC_MDF1CFGR_MDF1RST_Msk                      (0x1 << 0)
#define RCC_MDF1CFGR_MDF1RST                          (0x1 << 0)
#define RCC_MDF1CFGR_MDF1EN_Pos                       1
#define RCC_MDF1CFGR_MDF1EN_Msk                       (0x1 << 1)
#define RCC_MDF1CFGR_MDF1EN                           (0x1 << 1)
#define RCC_MDF1CFGR_MDF1LPEN_Pos                     2
#define RCC_MDF1CFGR_MDF1LPEN_Msk                     (0x1 << 2)
#define RCC_MDF1CFGR_MDF1LPEN                         (0x1 << 2)

/* Bit fields for RCC_MDF2CFGR register */
#define RCC_MDF2CFGR_MDF2RST_Pos                      0
#define RCC_MDF2CFGR_MDF2RST_Msk                      (0x1 << 0)
#define RCC_MDF2CFGR_MDF2RST                          (0x1 << 0)
#define RCC_MDF2CFGR_MDF2EN_Pos                       1
#define RCC_MDF2CFGR_MDF2EN_Msk                       (0x1 << 1)
#define RCC_MDF2CFGR_MDF2EN                           (0x1 << 1)
#define RCC_MDF2CFGR_MDF2LPEN_Pos                     2
#define RCC_MDF2CFGR_MDF2LPEN_Msk                     (0x1 << 2)
#define RCC_MDF2CFGR_MDF2LPEN                         (0x1 << 2)
#define RCC_MDF2CFGR_MDF2AMEN_Pos                     3
#define RCC_MDF2CFGR_MDF2AMEN_Msk                     (0x1 << 3)
#define RCC_MDF2CFGR_MDF2AMEN                         (0x1 << 3)

/* Bit fields for RCC_FDCANCFGR register */
#define RCC_FDCANCFGR_FDCANRST_Pos                    0
#define RCC_FDCANCFGR_FDCANRST_Msk                    (0x1 << 0)
#define RCC_FDCANCFGR_FDCANRST                        (0x1 << 0)
#define RCC_FDCANCFGR_FDCANEN_Pos                     1
#define RCC_FDCANCFGR_FDCANEN_Msk                     (0x1 << 1)
#define RCC_FDCANCFGR_FDCANEN                         (0x1 << 1)
#define RCC_FDCANCFGR_FDCANLPEN_Pos                   2
#define RCC_FDCANCFGR_FDCANLPEN_Msk                   (0x1 << 2)
#define RCC_FDCANCFGR_FDCANLPEN                       (0x1 << 2)

/* Bit fields for RCC_HDPCFGR register */
#define RCC_HDPCFGR_HDPRST_Pos                        0
#define RCC_HDPCFGR_HDPRST_Msk                        (0x1 << 0)
#define RCC_HDPCFGR_HDPRST                            (0x1 << 0)
#define RCC_HDPCFGR_HDPEN_Pos                         1
#define RCC_HDPCFGR_HDPEN_Msk                         (0x1 << 1)
#define RCC_HDPCFGR_HDPEN                             (0x1 << 1)

/* Bit fields for RCC_ADC12CFGR register */
#define RCC_ADC12CFGR_ADC12RST_Pos                    0
#define RCC_ADC12CFGR_ADC12RST_Msk                    (0x1 << 0)
#define RCC_ADC12CFGR_ADC12RST                        (0x1 << 0)
#define RCC_ADC12CFGR_ADC12EN_Pos                     1
#define RCC_ADC12CFGR_ADC12EN_Msk                     (0x1 << 1)
#define RCC_ADC12CFGR_ADC12EN                         (0x1 << 1)
#define RCC_ADC12CFGR_ADC12LPEN_Pos                   2
#define RCC_ADC12CFGR_ADC12LPEN_Msk                   (0x1 << 2)
#define RCC_ADC12CFGR_ADC12LPEN                       (0x1 << 2)

/* Bit fields for RCC_ADC3CFGR register */
#define RCC_ADC3CFGR_ADC3RST_Pos                      0
#define RCC_ADC3CFGR_ADC3RST_Msk                      (0x1 << 0)
#define RCC_ADC3CFGR_ADC3RST                          (0x1 << 0)
#define RCC_ADC3CFGR_ADC3EN_Pos                       1
#define RCC_ADC3CFGR_ADC3EN_Msk                       (0x1 << 1)
#define RCC_ADC3CFGR_ADC3EN                           (0x1 << 1)
#define RCC_ADC3CFGR_ADC3LPEN_Pos                     2
#define RCC_ADC3CFGR_ADC3LPEN_Msk                     (0x1 << 2)
#define RCC_ADC3CFGR_ADC3LPEN                         (0x1 << 2)

/* Bit fields for RCC_ETH1CFGR register */
#define RCC_ETH1CFGR_ETH1RST_Pos                      0
#define RCC_ETH1CFGR_ETH1RST_Msk                      (0x1 << 0)
#define RCC_ETH1CFGR_ETH1RST                          (0x1 << 0)
#define RCC_ETH1CFGR_ETH1EN_Pos                       1
#define RCC_ETH1CFGR_ETH1EN_Msk                       (0x1 << 1)
#define RCC_ETH1CFGR_ETH1EN                           (0x1 << 1)
#define RCC_ETH1CFGR_ETH1LPEN_Pos                     2
#define RCC_ETH1CFGR_ETH1LPEN_Msk                     (0x1 << 2)
#define RCC_ETH1CFGR_ETH1LPEN                         (0x1 << 2)
#define RCC_ETH1CFGR_ETH1STPEN_Pos                    4
#define RCC_ETH1CFGR_ETH1STPEN_Msk                    (0x1 << 4)
#define RCC_ETH1CFGR_ETH1STPEN                        (0x1 << 4)
#define RCC_ETH1CFGR_ETH1MACEN_Pos                    5
#define RCC_ETH1CFGR_ETH1MACEN_Msk                    (0x1 << 5)
#define RCC_ETH1CFGR_ETH1MACEN                        (0x1 << 5)
#define RCC_ETH1CFGR_ETH1MACLPEN_Pos                  6
#define RCC_ETH1CFGR_ETH1MACLPEN_Msk                  (0x1 << 6)
#define RCC_ETH1CFGR_ETH1MACLPEN                      (0x1 << 6)
#define RCC_ETH1CFGR_ETH1TXEN_Pos                     8
#define RCC_ETH1CFGR_ETH1TXEN_Msk                     (0x1 << 8)
#define RCC_ETH1CFGR_ETH1TXEN                         (0x1 << 8)
#define RCC_ETH1CFGR_ETH1TXLPEN_Pos                   9
#define RCC_ETH1CFGR_ETH1TXLPEN_Msk                   (0x1 << 9)
#define RCC_ETH1CFGR_ETH1TXLPEN                       (0x1 << 9)
#define RCC_ETH1CFGR_ETH1RXEN_Pos                     10
#define RCC_ETH1CFGR_ETH1RXEN_Msk                     (0x1 << 10)
#define RCC_ETH1CFGR_ETH1RXEN                         (0x1 << 10)
#define RCC_ETH1CFGR_ETH1RXLPEN_Pos                   11
#define RCC_ETH1CFGR_ETH1RXLPEN_Msk                   (0x1 << 11)
#define RCC_ETH1CFGR_ETH1RXLPEN                       (0x1 << 11)

/* Bit fields for RCC_ETH2CFGR register */
#define RCC_ETH2CFGR_ETH2RST_Pos                      0
#define RCC_ETH2CFGR_ETH2RST_Msk                      (0x1 << 0)
#define RCC_ETH2CFGR_ETH2RST                          (0x1 << 0)
#define RCC_ETH2CFGR_ETH2EN_Pos                       1
#define RCC_ETH2CFGR_ETH2EN_Msk                       (0x1 << 1)
#define RCC_ETH2CFGR_ETH2EN                           (0x1 << 1)
#define RCC_ETH2CFGR_ETH2LPEN_Pos                     2
#define RCC_ETH2CFGR_ETH2LPEN_Msk                     (0x1 << 2)
#define RCC_ETH2CFGR_ETH2LPEN                         (0x1 << 2)
#define RCC_ETH2CFGR_ETH2STPEN_Pos                    4
#define RCC_ETH2CFGR_ETH2STPEN_Msk                    (0x1 << 4)
#define RCC_ETH2CFGR_ETH2STPEN                        (0x1 << 4)
#define RCC_ETH2CFGR_ETH2MACEN_Pos                    5
#define RCC_ETH2CFGR_ETH2MACEN_Msk                    (0x1 << 5)
#define RCC_ETH2CFGR_ETH2MACEN                        (0x1 << 5)
#define RCC_ETH2CFGR_ETH2MACLPEN_Pos                  6
#define RCC_ETH2CFGR_ETH2MACLPEN_Msk                  (0x1 << 6)
#define RCC_ETH2CFGR_ETH2MACLPEN                      (0x1 << 6)
#define RCC_ETH2CFGR_ETH2TXEN_Pos                     8
#define RCC_ETH2CFGR_ETH2TXEN_Msk                     (0x1 << 8)
#define RCC_ETH2CFGR_ETH2TXEN                         (0x1 << 8)
#define RCC_ETH2CFGR_ETH2TXLPEN_Pos                   9
#define RCC_ETH2CFGR_ETH2TXLPEN_Msk                   (0x1 << 9)
#define RCC_ETH2CFGR_ETH2TXLPEN                       (0x1 << 9)
#define RCC_ETH2CFGR_ETH2RXEN_Pos                     10
#define RCC_ETH2CFGR_ETH2RXEN_Msk                     (0x1 << 10)
#define RCC_ETH2CFGR_ETH2RXEN                         (0x1 << 10)
#define RCC_ETH2CFGR_ETH2RXLPEN_Pos                   11
#define RCC_ETH2CFGR_ETH2RXLPEN_Msk                   (0x1 << 11)
#define RCC_ETH2CFGR_ETH2RXLPEN                       (0x1 << 11)

/* Bit fields for RCC_USB2CFGR register */
#define RCC_USB2CFGR_USB2RST_Pos                      0
#define RCC_USB2CFGR_USB2RST_Msk                      (0x1 << 0)
#define RCC_USB2CFGR_USB2RST                          (0x1 << 0)
#define RCC_USB2CFGR_USB2EN_Pos                       1
#define RCC_USB2CFGR_USB2EN_Msk                       (0x1 << 1)
#define RCC_USB2CFGR_USB2EN                           (0x1 << 1)
#define RCC_USB2CFGR_USB2LPEN_Pos                     2
#define RCC_USB2CFGR_USB2LPEN_Msk                     (0x1 << 2)
#define RCC_USB2CFGR_USB2LPEN                         (0x1 << 2)

/* Bit fields for RCC_USB2PHY1CFGR register */
#define RCC_USB2PHY1CFGR_USB2PHY1RST_Pos              0
#define RCC_USB2PHY1CFGR_USB2PHY1RST_Msk              (0x1 << 0)
#define RCC_USB2PHY1CFGR_USB2PHY1RST                  (0x1 << 0)
#define RCC_USB2PHY1CFGR_USB2PHY1EN_Pos               1
#define RCC_USB2PHY1CFGR_USB2PHY1EN_Msk               (0x1 << 1)
#define RCC_USB2PHY1CFGR_USB2PHY1EN                   (0x1 << 1)
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN_Pos             2
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN_Msk             (0x1 << 2)
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN                 (0x1 << 2)

/* Bit fields for RCC_USB2PHY2CFGR register */
#define RCC_USB2PHY2CFGR_USB2PHY2RST_Pos              0
#define RCC_USB2PHY2CFGR_USB2PHY2RST_Msk              (0x1 << 0)
#define RCC_USB2PHY2CFGR_USB2PHY2RST                  (0x1 << 0)
#define RCC_USB2PHY2CFGR_USB2PHY2EN_Pos               1
#define RCC_USB2PHY2CFGR_USB2PHY2EN_Msk               (0x1 << 1)
#define RCC_USB2PHY2CFGR_USB2PHY2EN                   (0x1 << 1)
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN_Pos             2
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN_Msk             (0x1 << 2)
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN                 (0x1 << 2)

/* Bit fields for RCC_USB3DRDCFGR register */
#define RCC_USB3DRDCFGR_USB3DRDRST_Pos                0
#define RCC_USB3DRDCFGR_USB3DRDRST_Msk                (0x1 << 0)
#define RCC_USB3DRDCFGR_USB3DRDRST                    (0x1 << 0)
#define RCC_USB3DRDCFGR_USB3DRDEN_Pos                 1
#define RCC_USB3DRDCFGR_USB3DRDEN_Msk                 (0x1 << 1)
#define RCC_USB3DRDCFGR_USB3DRDEN                     (0x1 << 1)
#define RCC_USB3DRDCFGR_USB3DRDLPEN_Pos               2
#define RCC_USB3DRDCFGR_USB3DRDLPEN_Msk               (0x1 << 2)
#define RCC_USB3DRDCFGR_USB3DRDLPEN                   (0x1 << 2)

/* Bit fields for RCC_USB3PCIEPHYCFGR register */
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYRST_Pos        0
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYRST_Msk        (0x1 << 0)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYRST            (0x1 << 0)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYEN_Pos         1
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYEN_Msk         (0x1 << 1)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYEN             (0x1 << 1)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYLPEN_Pos       2
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYLPEN_Msk       (0x1 << 2)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYLPEN           (0x1 << 2)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYCKREFSEL_Pos   15
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYCKREFSEL_Msk   (0x1 << 15)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYCKREFSEL       (0x1 << 15)

/* Bit fields for RCC_PCIECFGR register */
#define RCC_PCIECFGR_PCIERST_Pos                      0
#define RCC_PCIECFGR_PCIERST_Msk                      (0x1 << 0)
#define RCC_PCIECFGR_PCIERST                          (0x1 << 0)
#define RCC_PCIECFGR_PCIEEN_Pos                       1
#define RCC_PCIECFGR_PCIEEN_Msk                       (0x1 << 1)
#define RCC_PCIECFGR_PCIEEN                           (0x1 << 1)
#define RCC_PCIECFGR_PCIELPEN_Pos                     2
#define RCC_PCIECFGR_PCIELPEN_Msk                     (0x1 << 2)
#define RCC_PCIECFGR_PCIELPEN                         (0x1 << 2)

/* Bit fields for RCC_USBTCCFGR register */
#define RCC_USBTCCFGR_USBTCRST_Pos                    0
#define RCC_USBTCCFGR_USBTCRST_Msk                    (0x1 << 0)
#define RCC_USBTCCFGR_USBTCRST                        (0x1 << 0)
#define RCC_USBTCCFGR_USBTCEN_Pos                     1
#define RCC_USBTCCFGR_USBTCEN_Msk                     (0x1 << 1)
#define RCC_USBTCCFGR_USBTCEN                         (0x1 << 1)
#define RCC_USBTCCFGR_USBTCLPEN_Pos                   2
#define RCC_USBTCCFGR_USBTCLPEN_Msk                   (0x1 << 2)
#define RCC_USBTCCFGR_USBTCLPEN                       (0x1 << 2)

/* Bit fields for RCC_STGENCFGR register */
#define RCC_STGENCFGR_STGENEN_Pos                     1
#define RCC_STGENCFGR_STGENEN_Msk                     (0x1 << 1)
#define RCC_STGENCFGR_STGENEN                         (0x1 << 1)
#define RCC_STGENCFGR_STGENLPEN_Pos                   2
#define RCC_STGENCFGR_STGENLPEN_Msk                   (0x1 << 2)
#define RCC_STGENCFGR_STGENLPEN                       (0x1 << 2)
#define RCC_STGENCFGR_STGENSTPEN_Pos                  4
#define RCC_STGENCFGR_STGENSTPEN_Msk                  (0x1 << 4)
#define RCC_STGENCFGR_STGENSTPEN                      (0x1 << 4)

/* Bit fields for RCC_FMCCFGR register */
#define RCC_FMCCFGR_FMCRST_Pos                        0
#define RCC_FMCCFGR_FMCRST_Msk                        (0x1 << 0)
#define RCC_FMCCFGR_FMCRST                            (0x1 << 0)
#define RCC_FMCCFGR_FMCEN_Pos                         1
#define RCC_FMCCFGR_FMCEN_Msk                         (0x1 << 1)
#define RCC_FMCCFGR_FMCEN                             (0x1 << 1)
#define RCC_FMCCFGR_FMCLPEN_Pos                       2
#define RCC_FMCCFGR_FMCLPEN_Msk                       (0x1 << 2)
#define RCC_FMCCFGR_FMCLPEN                           (0x1 << 2)

/* Bit fields for RCC_SDMMC1CFGR register */
#define RCC_SDMMC1CFGR_SDMMC1RST_Pos                  0
#define RCC_SDMMC1CFGR_SDMMC1RST_Msk                  (0x1 << 0)
#define RCC_SDMMC1CFGR_SDMMC1RST                      (0x1 << 0)
#define RCC_SDMMC1CFGR_SDMMC1EN_Pos                   1
#define RCC_SDMMC1CFGR_SDMMC1EN_Msk                   (0x1 << 1)
#define RCC_SDMMC1CFGR_SDMMC1EN                       (0x1 << 1)
#define RCC_SDMMC1CFGR_SDMMC1LPEN_Pos                 2
#define RCC_SDMMC1CFGR_SDMMC1LPEN_Msk                 (0x1 << 2)
#define RCC_SDMMC1CFGR_SDMMC1LPEN                     (0x1 << 2)
#define RCC_SDMMC1CFGR_SDMMC1DLLRST_Pos               16
#define RCC_SDMMC1CFGR_SDMMC1DLLRST_Msk               (0x1 << 16)
#define RCC_SDMMC1CFGR_SDMMC1DLLRST                   (0x1 << 16)

/* Bit fields for RCC_SDMMC2CFGR register */
#define RCC_SDMMC2CFGR_SDMMC2RST_Pos                  0
#define RCC_SDMMC2CFGR_SDMMC2RST_Msk                  (0x1 << 0)
#define RCC_SDMMC2CFGR_SDMMC2RST                      (0x1 << 0)
#define RCC_SDMMC2CFGR_SDMMC2EN_Pos                   1
#define RCC_SDMMC2CFGR_SDMMC2EN_Msk                   (0x1 << 1)
#define RCC_SDMMC2CFGR_SDMMC2EN                       (0x1 << 1)
#define RCC_SDMMC2CFGR_SDMMC2LPEN_Pos                 2
#define RCC_SDMMC2CFGR_SDMMC2LPEN_Msk                 (0x1 << 2)
#define RCC_SDMMC2CFGR_SDMMC2LPEN                     (0x1 << 2)
#define RCC_SDMMC2CFGR_SDMMC2DLLRST_Pos               16
#define RCC_SDMMC2CFGR_SDMMC2DLLRST_Msk               (0x1 << 16)
#define RCC_SDMMC2CFGR_SDMMC2DLLRST                   (0x1 << 16)

/* Bit fields for RCC_SDMMC3CFGR register */
#define RCC_SDMMC3CFGR_SDMMC3RST_Pos                  0
#define RCC_SDMMC3CFGR_SDMMC3RST_Msk                  (0x1 << 0)
#define RCC_SDMMC3CFGR_SDMMC3RST                      (0x1 << 0)
#define RCC_SDMMC3CFGR_SDMMC3EN_Pos                   1
#define RCC_SDMMC3CFGR_SDMMC3EN_Msk                   (0x1 << 1)
#define RCC_SDMMC3CFGR_SDMMC3EN                       (0x1 << 1)
#define RCC_SDMMC3CFGR_SDMMC3LPEN_Pos                 2
#define RCC_SDMMC3CFGR_SDMMC3LPEN_Msk                 (0x1 << 2)
#define RCC_SDMMC3CFGR_SDMMC3LPEN                     (0x1 << 2)
#define RCC_SDMMC3CFGR_SDMMC3DLLRST_Pos               16
#define RCC_SDMMC3CFGR_SDMMC3DLLRST_Msk               (0x1 << 16)
#define RCC_SDMMC3CFGR_SDMMC3DLLRST                   (0x1 << 16)

/* Bit fields for RCC_GPUCFGR register */
#define RCC_GPUCFGR_GPURST_Pos                        0
#define RCC_GPUCFGR_GPURST_Msk                        (0x1 << 0)
#define RCC_GPUCFGR_GPURST                            (0x1 << 0)
#define RCC_GPUCFGR_GPUEN_Pos                         1
#define RCC_GPUCFGR_GPUEN_Msk                         (0x1 << 1)
#define RCC_GPUCFGR_GPUEN                             (0x1 << 1)
#define RCC_GPUCFGR_GPULPEN_Pos                       2
#define RCC_GPUCFGR_GPULPEN_Msk                       (0x1 << 2)
#define RCC_GPUCFGR_GPULPEN                           (0x1 << 2)

/* Bit fields for RCC_LTDCCFGR register */
#define RCC_LTDCCFGR_LTDCRST_Pos                      0
#define RCC_LTDCCFGR_LTDCRST_Msk                      (0x1 << 0)
#define RCC_LTDCCFGR_LTDCRST                          (0x1 << 0)
#define RCC_LTDCCFGR_LTDCEN_Pos                       1
#define RCC_LTDCCFGR_LTDCEN_Msk                       (0x1 << 1)
#define RCC_LTDCCFGR_LTDCEN                           (0x1 << 1)
#define RCC_LTDCCFGR_LTDCLPEN_Pos                     2
#define RCC_LTDCCFGR_LTDCLPEN_Msk                     (0x1 << 2)
#define RCC_LTDCCFGR_LTDCLPEN                         (0x1 << 2)

/* Bit fields for RCC_DSICFGR register */
#define RCC_DSICFGR_DSIRST_Pos                        0
#define RCC_DSICFGR_DSIRST_Msk                        (0x1 << 0)
#define RCC_DSICFGR_DSIRST                            (0x1 << 0)
#define RCC_DSICFGR_DSIEN_Pos                         1
#define RCC_DSICFGR_DSIEN_Msk                         (0x1 << 1)
#define RCC_DSICFGR_DSIEN                             (0x1 << 1)
#define RCC_DSICFGR_DSILPEN_Pos                       2
#define RCC_DSICFGR_DSILPEN_Msk                       (0x1 << 2)
#define RCC_DSICFGR_DSILPEN                           (0x1 << 2)
#define RCC_DSICFGR_DSIBLSEL_Pos                      12
#define RCC_DSICFGR_DSIBLSEL_Msk                      (0x1 << 12)
#define RCC_DSICFGR_DSIBLSEL                          (0x1 << 12)
#define RCC_DSICFGR_DSIPHYCKREFSEL_Pos                15
#define RCC_DSICFGR_DSIPHYCKREFSEL_Msk                (0x1 << 15)
#define RCC_DSICFGR_DSIPHYCKREFSEL                    (0x1 << 15)

/* Bit fields for RCC_LDITCFGR register */
#define RCC_LDITCFGR_LDITRST_Pos                      0
#define RCC_LDITCFGR_LDITRST_Msk                      (0x1 << 0)
#define RCC_LDITCFGR_LDITRST                          (0x1 << 0)
#define RCC_LDITCFGR_LDITEN_Pos                       1
#define RCC_LDITCFGR_LDITEN_Msk                       (0x1 << 1)
#define RCC_LDITCFGR_LDITEN                           (0x1 << 1)
#define RCC_LDITCFGR_LDITLPEN_Pos                     2
#define RCC_LDITCFGR_LDITLPEN_Msk                     (0x1 << 2)
#define RCC_LDITCFGR_LDITLPEN                         (0x1 << 2)
#define RCC_LDITCFGR_LVDSPHYCKREFSEL_Pos              15
#define RCC_LDITCFGR_LVDSPHYCKREFSEL_Msk              (0x1 << 15)
#define RCC_LDITCFGR_LVDSPHYCKREFSEL                  (0x1 << 15)

/* Bit fields for RCC_CSI2CFGR register */
#define RCC_CSI2CFGR_CSI2RST_Pos                      0
#define RCC_CSI2CFGR_CSI2RST_Msk                      (0x1 << 0)
#define RCC_CSI2CFGR_CSI2RST                          (0x1 << 0)
#define RCC_CSI2CFGR_CSI2EN_Pos                       1
#define RCC_CSI2CFGR_CSI2EN_Msk                       (0x1 << 1)
#define RCC_CSI2CFGR_CSI2EN                           (0x1 << 1)
#define RCC_CSI2CFGR_CSI2LPEN_Pos                     2
#define RCC_CSI2CFGR_CSI2LPEN_Msk                     (0x1 << 2)
#define RCC_CSI2CFGR_CSI2LPEN                         (0x1 << 2)

/* Bit fields for RCC_DCMIPPCFGR register */
#define RCC_DCMIPPCFGR_DCMIPPRST_Pos                  0
#define RCC_DCMIPPCFGR_DCMIPPRST_Msk                  (0x1 << 0)
#define RCC_DCMIPPCFGR_DCMIPPRST                      (0x1 << 0)
#define RCC_DCMIPPCFGR_DCMIPPEN_Pos                   1
#define RCC_DCMIPPCFGR_DCMIPPEN_Msk                   (0x1 << 1)
#define RCC_DCMIPPCFGR_DCMIPPEN                       (0x1 << 1)
#define RCC_DCMIPPCFGR_DCMIPPLPEN_Pos                 2
#define RCC_DCMIPPCFGR_DCMIPPLPEN_Msk                 (0x1 << 2)
#define RCC_DCMIPPCFGR_DCMIPPLPEN                     (0x1 << 2)

/* Bit fields for RCC_CCICFGR register */
#define RCC_CCICFGR_CCIRST_Pos                        0
#define RCC_CCICFGR_CCIRST_Msk                        (0x1 << 0)
#define RCC_CCICFGR_CCIRST                            (0x1 << 0)
#define RCC_CCICFGR_CCIEN_Pos                         1
#define RCC_CCICFGR_CCIEN_Msk                         (0x1 << 1)
#define RCC_CCICFGR_CCIEN                             (0x1 << 1)
#define RCC_CCICFGR_CCILPEN_Pos                       2
#define RCC_CCICFGR_CCILPEN_Msk                       (0x1 << 2)
#define RCC_CCICFGR_CCILPEN                           (0x1 << 2)

/* Bit fields for RCC_RNGCFGR register */
#define RCC_RNGCFGR_RNGRST_Pos                        0
#define RCC_RNGCFGR_RNGRST_Msk                        (0x1 << 0)
#define RCC_RNGCFGR_RNGRST                            (0x1 << 0)
#define RCC_RNGCFGR_RNGEN_Pos                         1
#define RCC_RNGCFGR_RNGEN_Msk                         (0x1 << 1)
#define RCC_RNGCFGR_RNGEN                             (0x1 << 1)
#define RCC_RNGCFGR_RNGLPEN_Pos                       2
#define RCC_RNGCFGR_RNGLPEN_Msk                       (0x1 << 2)
#define RCC_RNGCFGR_RNGLPEN                           (0x1 << 2)

/* Bit fields for RCC_PKACFGR register */
#define RCC_PKACFGR_PKARST_Pos                        0
#define RCC_PKACFGR_PKARST_Msk                        (0x1 << 0)
#define RCC_PKACFGR_PKARST                            (0x1 << 0)
#define RCC_PKACFGR_PKAEN_Pos                         1
#define RCC_PKACFGR_PKAEN_Msk                         (0x1 << 1)
#define RCC_PKACFGR_PKAEN                             (0x1 << 1)
#define RCC_PKACFGR_PKALPEN_Pos                       2
#define RCC_PKACFGR_PKALPEN_Msk                       (0x1 << 2)
#define RCC_PKACFGR_PKALPEN                           (0x1 << 2)

/* Bit fields for RCC_SAESCFGR register */
#define RCC_SAESCFGR_SAESRST_Pos                      0
#define RCC_SAESCFGR_SAESRST_Msk                      (0x1 << 0)
#define RCC_SAESCFGR_SAESRST                          (0x1 << 0)
#define RCC_SAESCFGR_SAESEN_Pos                       1
#define RCC_SAESCFGR_SAESEN_Msk                       (0x1 << 1)
#define RCC_SAESCFGR_SAESEN                           (0x1 << 1)
#define RCC_SAESCFGR_SAESLPEN_Pos                     2
#define RCC_SAESCFGR_SAESLPEN_Msk                     (0x1 << 2)
#define RCC_SAESCFGR_SAESLPEN                         (0x1 << 2)

/* Bit fields for RCC_HASHCFGR register */
#define RCC_HASHCFGR_HASHRST_Pos                      0
#define RCC_HASHCFGR_HASHRST_Msk                      (0x1 << 0)
#define RCC_HASHCFGR_HASHRST                          (0x1 << 0)
#define RCC_HASHCFGR_HASHEN_Pos                       1
#define RCC_HASHCFGR_HASHEN_Msk                       (0x1 << 1)
#define RCC_HASHCFGR_HASHEN                           (0x1 << 1)
#define RCC_HASHCFGR_HASHLPEN_Pos                     2
#define RCC_HASHCFGR_HASHLPEN_Msk                     (0x1 << 2)
#define RCC_HASHCFGR_HASHLPEN                         (0x1 << 2)

/* Bit fields for RCC_CRYP1CFGR register */
#define RCC_CRYP1CFGR_CRYP1RST_Pos                    0
#define RCC_CRYP1CFGR_CRYP1RST_Msk                    (0x1 << 0)
#define RCC_CRYP1CFGR_CRYP1RST                        (0x1 << 0)
#define RCC_CRYP1CFGR_CRYP1EN_Pos                     1
#define RCC_CRYP1CFGR_CRYP1EN_Msk                     (0x1 << 1)
#define RCC_CRYP1CFGR_CRYP1EN                         (0x1 << 1)
#define RCC_CRYP1CFGR_CRYP1LPEN_Pos                   2
#define RCC_CRYP1CFGR_CRYP1LPEN_Msk                   (0x1 << 2)
#define RCC_CRYP1CFGR_CRYP1LPEN                       (0x1 << 2)

/* Bit fields for RCC_CRYP2CFGR register */
#define RCC_CRYP2CFGR_CRYP2RST_Pos                    0
#define RCC_CRYP2CFGR_CRYP2RST_Msk                    (0x1 << 0)
#define RCC_CRYP2CFGR_CRYP2RST                        (0x1 << 0)
#define RCC_CRYP2CFGR_CRYP2EN_Pos                     1
#define RCC_CRYP2CFGR_CRYP2EN_Msk                     (0x1 << 1)
#define RCC_CRYP2CFGR_CRYP2EN                         (0x1 << 1)
#define RCC_CRYP2CFGR_CRYP2LPEN_Pos                   2
#define RCC_CRYP2CFGR_CRYP2LPEN_Msk                   (0x1 << 2)
#define RCC_CRYP2CFGR_CRYP2LPEN                       (0x1 << 2)

/* Bit fields for RCC_IWDG1CFGR register */
#define RCC_IWDG1CFGR_IWDG1EN_Pos                     1
#define RCC_IWDG1CFGR_IWDG1EN_Msk                     (0x1 << 1)
#define RCC_IWDG1CFGR_IWDG1EN                         (0x1 << 1)
#define RCC_IWDG1CFGR_IWDG1LPEN_Pos                   2
#define RCC_IWDG1CFGR_IWDG1LPEN_Msk                   (0x1 << 2)
#define RCC_IWDG1CFGR_IWDG1LPEN                       (0x1 << 2)

/* Bit fields for RCC_IWDG2CFGR register */
#define RCC_IWDG2CFGR_IWDG2EN_Pos                     1
#define RCC_IWDG2CFGR_IWDG2EN_Msk                     (0x1 << 1)
#define RCC_IWDG2CFGR_IWDG2EN                         (0x1 << 1)
#define RCC_IWDG2CFGR_IWDG2LPEN_Pos                   2
#define RCC_IWDG2CFGR_IWDG2LPEN_Msk                   (0x1 << 2)
#define RCC_IWDG2CFGR_IWDG2LPEN                       (0x1 << 2)

/* Bit fields for RCC_IWDG3CFGR register */
#define RCC_IWDG3CFGR_IWDG3EN_Pos                     1
#define RCC_IWDG3CFGR_IWDG3EN_Msk                     (0x1 << 1)
#define RCC_IWDG3CFGR_IWDG3EN                         (0x1 << 1)
#define RCC_IWDG3CFGR_IWDG3LPEN_Pos                   2
#define RCC_IWDG3CFGR_IWDG3LPEN_Msk                   (0x1 << 2)
#define RCC_IWDG3CFGR_IWDG3LPEN                       (0x1 << 2)

/* Bit fields for RCC_IWDG4CFGR register */
#define RCC_IWDG4CFGR_IWDG4EN_Pos                     1
#define RCC_IWDG4CFGR_IWDG4EN_Msk                     (0x1 << 1)
#define RCC_IWDG4CFGR_IWDG4EN                         (0x1 << 1)
#define RCC_IWDG4CFGR_IWDG4LPEN_Pos                   2
#define RCC_IWDG4CFGR_IWDG4LPEN_Msk                   (0x1 << 2)
#define RCC_IWDG4CFGR_IWDG4LPEN                       (0x1 << 2)

/* Bit fields for RCC_IWDG5CFGR register */
#define RCC_IWDG5CFGR_IWDG5EN_Pos                     1
#define RCC_IWDG5CFGR_IWDG5EN_Msk                     (0x1 << 1)
#define RCC_IWDG5CFGR_IWDG5EN                         (0x1 << 1)
#define RCC_IWDG5CFGR_IWDG5LPEN_Pos                   2
#define RCC_IWDG5CFGR_IWDG5LPEN_Msk                   (0x1 << 2)
#define RCC_IWDG5CFGR_IWDG5LPEN                       (0x1 << 2)
#define RCC_IWDG5CFGR_IWDG5AMEN_Pos                   3
#define RCC_IWDG5CFGR_IWDG5AMEN_Msk                   (0x1 << 3)
#define RCC_IWDG5CFGR_IWDG5AMEN                       (0x1 << 3)

/* Bit fields for RCC_WWDG1CFGR register */
#define RCC_WWDG1CFGR_WWDG1RST_Pos                    0
#define RCC_WWDG1CFGR_WWDG1RST_Msk                    (0x1 << 0)
#define RCC_WWDG1CFGR_WWDG1RST                        (0x1 << 0)
#define RCC_WWDG1CFGR_WWDG1EN_Pos                     1
#define RCC_WWDG1CFGR_WWDG1EN_Msk                     (0x1 << 1)
#define RCC_WWDG1CFGR_WWDG1EN                         (0x1 << 1)
#define RCC_WWDG1CFGR_WWDG1LPEN_Pos                   2
#define RCC_WWDG1CFGR_WWDG1LPEN_Msk                   (0x1 << 2)
#define RCC_WWDG1CFGR_WWDG1LPEN                       (0x1 << 2)

/* Bit fields for RCC_WWDG2CFGR register */
#define RCC_WWDG2CFGR_WWDG2RST_Pos                    0
#define RCC_WWDG2CFGR_WWDG2RST_Msk                    (0x1 << 0)
#define RCC_WWDG2CFGR_WWDG2RST                        (0x1 << 0)
#define RCC_WWDG2CFGR_WWDG2EN_Pos                     1
#define RCC_WWDG2CFGR_WWDG2EN_Msk                     (0x1 << 1)
#define RCC_WWDG2CFGR_WWDG2EN                         (0x1 << 1)
#define RCC_WWDG2CFGR_WWDG2LPEN_Pos                   2
#define RCC_WWDG2CFGR_WWDG2LPEN_Msk                   (0x1 << 2)
#define RCC_WWDG2CFGR_WWDG2LPEN                       (0x1 << 2)
#define RCC_WWDG2CFGR_WWDG2AMEN_Pos                   3
#define RCC_WWDG2CFGR_WWDG2AMEN_Msk                   (0x1 << 3)
#define RCC_WWDG2CFGR_WWDG2AMEN                       (0x1 << 3)

/* Bit fields for RCC_BUSPERFMCFGR register */
#define RCC_BUSPERFMCFGR_BUSPERFMRST_Pos              0
#define RCC_BUSPERFMCFGR_BUSPERFMRST_Msk              (0x1 << 0)
#define RCC_BUSPERFMCFGR_BUSPERFMRST                  (0x1 << 0)
#define RCC_BUSPERFMCFGR_BUSPERFMEN_Pos               1
#define RCC_BUSPERFMCFGR_BUSPERFMEN_Msk               (0x1 << 1)
#define RCC_BUSPERFMCFGR_BUSPERFMEN                   (0x1 << 1)
#define RCC_BUSPERFMCFGR_BUSPERFMLPEN_Pos             2
#define RCC_BUSPERFMCFGR_BUSPERFMLPEN_Msk             (0x1 << 2)
#define RCC_BUSPERFMCFGR_BUSPERFMLPEN                 (0x1 << 2)

/* Bit fields for RCC_VREFCFGR register */
#define RCC_VREFCFGR_VREFRST_Pos                      0
#define RCC_VREFCFGR_VREFRST_Msk                      (0x1 << 0)
#define RCC_VREFCFGR_VREFRST                          (0x1 << 0)
#define RCC_VREFCFGR_VREFEN_Pos                       1
#define RCC_VREFCFGR_VREFEN_Msk                       (0x1 << 1)
#define RCC_VREFCFGR_VREFEN                           (0x1 << 1)
#define RCC_VREFCFGR_VREFLPEN_Pos                     2
#define RCC_VREFCFGR_VREFLPEN_Msk                     (0x1 << 2)
#define RCC_VREFCFGR_VREFLPEN                         (0x1 << 2)

/* Bit fields for RCC_TMPSENSCFGR register */
#define RCC_TMPSENSCFGR_TMPSENSRST_Pos                0
#define RCC_TMPSENSCFGR_TMPSENSRST_Msk                (0x1 << 0)
#define RCC_TMPSENSCFGR_TMPSENSRST                    (0x1 << 0)
#define RCC_TMPSENSCFGR_TMPSENSEN_Pos                 1
#define RCC_TMPSENSCFGR_TMPSENSEN_Msk                 (0x1 << 1)
#define RCC_TMPSENSCFGR_TMPSENSEN                     (0x1 << 1)
#define RCC_TMPSENSCFGR_TMPSENSLPEN_Pos               2
#define RCC_TMPSENSCFGR_TMPSENSLPEN_Msk               (0x1 << 2)
#define RCC_TMPSENSCFGR_TMPSENSLPEN                   (0x1 << 2)
#define RCC_TMPSENSCFGR_TMPSENSKERSEL_Pos             12
#define RCC_TMPSENSCFGR_TMPSENSKERSEL_Msk             (0x3 << 12)
#define RCC_TMPSENSCFGR_TMPSENSKERSEL                 (0x3 << 12)

/* Bit fields for RCC_CRCCFGR register */
#define RCC_CRCCFGR_CRCRST_Pos                        0
#define RCC_CRCCFGR_CRCRST_Msk                        (0x1 << 0)
#define RCC_CRCCFGR_CRCRST                            (0x1 << 0)
#define RCC_CRCCFGR_CRCEN_Pos                         1
#define RCC_CRCCFGR_CRCEN_Msk                         (0x1 << 1)
#define RCC_CRCCFGR_CRCEN                             (0x1 << 1)
#define RCC_CRCCFGR_CRCLPEN_Pos                       2
#define RCC_CRCCFGR_CRCLPEN_Msk                       (0x1 << 2)
#define RCC_CRCCFGR_CRCLPEN                           (0x1 << 2)

/* Bit fields for RCC_BSECCFGR register */
#define RCC_BSECCFGR_BSECEN_Pos                       1
#define RCC_BSECCFGR_BSECEN_Msk                       (0x1 << 1)
#define RCC_BSECCFGR_BSECEN                           (0x1 << 1)
#define RCC_BSECCFGR_BSECLPEN_Pos                     2
#define RCC_BSECCFGR_BSECLPEN_Msk                     (0x1 << 2)
#define RCC_BSECCFGR_BSECLPEN                         (0x1 << 2)

/* Bit fields for RCC_GICV2MCFGR register */
#define RCC_GICV2MCFGR_GICV2MEN_Pos                   1
#define RCC_GICV2MCFGR_GICV2MEN_Msk                   (0x1 << 1)
#define RCC_GICV2MCFGR_GICV2MEN                       (0x1 << 1)
#define RCC_GICV2MCFGR_GICV2MLPEN_Pos                 2
#define RCC_GICV2MCFGR_GICV2MLPEN_Msk                 (0x1 << 2)
#define RCC_GICV2MCFGR_GICV2MLPEN                     (0x1 << 2)

/* Bit fields for RCC_I3C1CFGR register */
#define RCC_I3C1CFGR_I3C1RST_Pos                      0
#define RCC_I3C1CFGR_I3C1RST_Msk                      (0x1 << 0)
#define RCC_I3C1CFGR_I3C1RST                          (0x1 << 0)
#define RCC_I3C1CFGR_I3C1EN_Pos                       1
#define RCC_I3C1CFGR_I3C1EN_Msk                       (0x1 << 1)
#define RCC_I3C1CFGR_I3C1EN                           (0x1 << 1)
#define RCC_I3C1CFGR_I3C1LPEN_Pos                     2
#define RCC_I3C1CFGR_I3C1LPEN_Msk                     (0x1 << 2)
#define RCC_I3C1CFGR_I3C1LPEN                         (0x1 << 2)

/* Bit fields for RCC_I3C2CFGR register */
#define RCC_I3C2CFGR_I3C2RST_Pos                      0
#define RCC_I3C2CFGR_I3C2RST_Msk                      (0x1 << 0)
#define RCC_I3C2CFGR_I3C2RST                          (0x1 << 0)
#define RCC_I3C2CFGR_I3C2EN_Pos                       1
#define RCC_I3C2CFGR_I3C2EN_Msk                       (0x1 << 1)
#define RCC_I3C2CFGR_I3C2EN                           (0x1 << 1)
#define RCC_I3C2CFGR_I3C2LPEN_Pos                     2
#define RCC_I3C2CFGR_I3C2LPEN_Msk                     (0x1 << 2)
#define RCC_I3C2CFGR_I3C2LPEN                         (0x1 << 2)

/* Bit fields for RCC_I3C3CFGR register */
#define RCC_I3C3CFGR_I3C3RST_Pos                      0
#define RCC_I3C3CFGR_I3C3RST_Msk                      (0x1 << 0)
#define RCC_I3C3CFGR_I3C3RST                          (0x1 << 0)
#define RCC_I3C3CFGR_I3C3EN_Pos                       1
#define RCC_I3C3CFGR_I3C3EN_Msk                       (0x1 << 1)
#define RCC_I3C3CFGR_I3C3EN                           (0x1 << 1)
#define RCC_I3C3CFGR_I3C3LPEN_Pos                     2
#define RCC_I3C3CFGR_I3C3LPEN_Msk                     (0x1 << 2)
#define RCC_I3C3CFGR_I3C3LPEN                         (0x1 << 2)

/* Bit fields for RCC_I3C4CFGR register */
#define RCC_I3C4CFGR_I3C4RST_Pos                      0
#define RCC_I3C4CFGR_I3C4RST_Msk                      (0x1 << 0)
#define RCC_I3C4CFGR_I3C4RST                          (0x1 << 0)
#define RCC_I3C4CFGR_I3C4EN_Pos                       1
#define RCC_I3C4CFGR_I3C4EN_Msk                       (0x1 << 1)
#define RCC_I3C4CFGR_I3C4EN                           (0x1 << 1)
#define RCC_I3C4CFGR_I3C4LPEN_Pos                     2
#define RCC_I3C4CFGR_I3C4LPEN_Msk                     (0x1 << 2)
#define RCC_I3C4CFGR_I3C4LPEN                         (0x1 << 2)
#define RCC_I3C4CFGR_I3C4AMEN_Pos                     3
#define RCC_I3C4CFGR_I3C4AMEN_Msk                     (0x1 << 3)
#define RCC_I3C4CFGR_I3C4AMEN                         (0x1 << 3)

/* Bit fields for RCC_MUXSELCFGR register */
#define RCC_MUXSELCFGR_MUXSEL0_Pos                    0
#define RCC_MUXSELCFGR_MUXSEL0_Msk                    (0x3 << 0)
#define RCC_MUXSELCFGR_MUXSEL0                        (0x3 << 0)
#define RCC_MUXSELCFGR_MUXSEL1_Pos                    4
#define RCC_MUXSELCFGR_MUXSEL1_Msk                    (0x3 << 4)
#define RCC_MUXSELCFGR_MUXSEL1                        (0x3 << 4)
#define RCC_MUXSELCFGR_MUXSEL2_Pos                    8
#define RCC_MUXSELCFGR_MUXSEL2_Msk                    (0x3 << 8)
#define RCC_MUXSELCFGR_MUXSEL2                        (0x3 << 8)
#define RCC_MUXSELCFGR_MUXSEL3_Pos                    12
#define RCC_MUXSELCFGR_MUXSEL3_Msk                    (0x3 << 12)
#define RCC_MUXSELCFGR_MUXSEL3                        (0x3 << 12)
#define RCC_MUXSELCFGR_MUXSEL4_Pos                    16
#define RCC_MUXSELCFGR_MUXSEL4_Msk                    (0x3 << 16)
#define RCC_MUXSELCFGR_MUXSEL4                        (0x3 << 16)
#define RCC_MUXSELCFGR_MUXSEL5_Pos                    20
#define RCC_MUXSELCFGR_MUXSEL5_Msk                    (0x3 << 20)
#define RCC_MUXSELCFGR_MUXSEL5                        (0x3 << 20)
#define RCC_MUXSELCFGR_MUXSEL6_Pos                    24
#define RCC_MUXSELCFGR_MUXSEL6_Msk                    (0x3 << 24)
#define RCC_MUXSELCFGR_MUXSEL6                        (0x3 << 24)
#define RCC_MUXSELCFGR_MUXSEL7_Pos                    28
#define RCC_MUXSELCFGR_MUXSEL7_Msk                    (0x3 << 28)
#define RCC_MUXSELCFGR_MUXSEL7                        (0x3 << 28)

/* Bit fields for RCC_XBAR0CFGR register */
#define RCC_XBAR0CFGR_XBAR0SEL_Pos                    0
#define RCC_XBAR0CFGR_XBAR0SEL_Msk                    (0xf << 0)
#define RCC_XBAR0CFGR_XBAR0SEL                        (0xf << 0)
#define RCC_XBAR0CFGR_XBAR0EN_Pos                     6
#define RCC_XBAR0CFGR_XBAR0EN_Msk                     (0x1 << 6)
#define RCC_XBAR0CFGR_XBAR0EN                         (0x1 << 6)
#define RCC_XBAR0CFGR_XBAR0STS_Pos                    7
#define RCC_XBAR0CFGR_XBAR0STS_Msk                    (0x1 << 7)
#define RCC_XBAR0CFGR_XBAR0STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR1CFGR register */
#define RCC_XBAR1CFGR_XBAR1SEL_Pos                    0
#define RCC_XBAR1CFGR_XBAR1SEL_Msk                    (0xf << 0)
#define RCC_XBAR1CFGR_XBAR1SEL                        (0xf << 0)
#define RCC_XBAR1CFGR_XBAR1EN_Pos                     6
#define RCC_XBAR1CFGR_XBAR1EN_Msk                     (0x1 << 6)
#define RCC_XBAR1CFGR_XBAR1EN                         (0x1 << 6)
#define RCC_XBAR1CFGR_XBAR1STS_Pos                    7
#define RCC_XBAR1CFGR_XBAR1STS_Msk                    (0x1 << 7)
#define RCC_XBAR1CFGR_XBAR1STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR2CFGR register */
#define RCC_XBAR2CFGR_XBAR2SEL_Pos                    0
#define RCC_XBAR2CFGR_XBAR2SEL_Msk                    (0xf << 0)
#define RCC_XBAR2CFGR_XBAR2SEL                        (0xf << 0)
#define RCC_XBAR2CFGR_XBAR2EN_Pos                     6
#define RCC_XBAR2CFGR_XBAR2EN_Msk                     (0x1 << 6)
#define RCC_XBAR2CFGR_XBAR2EN                         (0x1 << 6)
#define RCC_XBAR2CFGR_XBAR2STS_Pos                    7
#define RCC_XBAR2CFGR_XBAR2STS_Msk                    (0x1 << 7)
#define RCC_XBAR2CFGR_XBAR2STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR3CFGR register */
#define RCC_XBAR3CFGR_XBAR3SEL_Pos                    0
#define RCC_XBAR3CFGR_XBAR3SEL_Msk                    (0xf << 0)
#define RCC_XBAR3CFGR_XBAR3SEL                        (0xf << 0)
#define RCC_XBAR3CFGR_XBAR3EN_Pos                     6
#define RCC_XBAR3CFGR_XBAR3EN_Msk                     (0x1 << 6)
#define RCC_XBAR3CFGR_XBAR3EN                         (0x1 << 6)
#define RCC_XBAR3CFGR_XBAR3STS_Pos                    7
#define RCC_XBAR3CFGR_XBAR3STS_Msk                    (0x1 << 7)
#define RCC_XBAR3CFGR_XBAR3STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR4CFGR register */
#define RCC_XBAR4CFGR_XBAR4SEL_Pos                    0
#define RCC_XBAR4CFGR_XBAR4SEL_Msk                    (0xf << 0)
#define RCC_XBAR4CFGR_XBAR4SEL                        (0xf << 0)
#define RCC_XBAR4CFGR_XBAR4EN_Pos                     6
#define RCC_XBAR4CFGR_XBAR4EN_Msk                     (0x1 << 6)
#define RCC_XBAR4CFGR_XBAR4EN                         (0x1 << 6)
#define RCC_XBAR4CFGR_XBAR4STS_Pos                    7
#define RCC_XBAR4CFGR_XBAR4STS_Msk                    (0x1 << 7)
#define RCC_XBAR4CFGR_XBAR4STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR5CFGR register */
#define RCC_XBAR5CFGR_XBAR5SEL_Pos                    0
#define RCC_XBAR5CFGR_XBAR5SEL_Msk                    (0xf << 0)
#define RCC_XBAR5CFGR_XBAR5SEL                        (0xf << 0)
#define RCC_XBAR5CFGR_XBAR5EN_Pos                     6
#define RCC_XBAR5CFGR_XBAR5EN_Msk                     (0x1 << 6)
#define RCC_XBAR5CFGR_XBAR5EN                         (0x1 << 6)
#define RCC_XBAR5CFGR_XBAR5STS_Pos                    7
#define RCC_XBAR5CFGR_XBAR5STS_Msk                    (0x1 << 7)
#define RCC_XBAR5CFGR_XBAR5STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR6CFGR register */
#define RCC_XBAR6CFGR_XBAR6SEL_Pos                    0
#define RCC_XBAR6CFGR_XBAR6SEL_Msk                    (0xf << 0)
#define RCC_XBAR6CFGR_XBAR6SEL                        (0xf << 0)
#define RCC_XBAR6CFGR_XBAR6EN_Pos                     6
#define RCC_XBAR6CFGR_XBAR6EN_Msk                     (0x1 << 6)
#define RCC_XBAR6CFGR_XBAR6EN                         (0x1 << 6)
#define RCC_XBAR6CFGR_XBAR6STS_Pos                    7
#define RCC_XBAR6CFGR_XBAR6STS_Msk                    (0x1 << 7)
#define RCC_XBAR6CFGR_XBAR6STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR7CFGR register */
#define RCC_XBAR7CFGR_XBAR7SEL_Pos                    0
#define RCC_XBAR7CFGR_XBAR7SEL_Msk                    (0xf << 0)
#define RCC_XBAR7CFGR_XBAR7SEL                        (0xf << 0)
#define RCC_XBAR7CFGR_XBAR7EN_Pos                     6
#define RCC_XBAR7CFGR_XBAR7EN_Msk                     (0x1 << 6)
#define RCC_XBAR7CFGR_XBAR7EN                         (0x1 << 6)
#define RCC_XBAR7CFGR_XBAR7STS_Pos                    7
#define RCC_XBAR7CFGR_XBAR7STS_Msk                    (0x1 << 7)
#define RCC_XBAR7CFGR_XBAR7STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR8CFGR register */
#define RCC_XBAR8CFGR_XBAR8SEL_Pos                    0
#define RCC_XBAR8CFGR_XBAR8SEL_Msk                    (0xf << 0)
#define RCC_XBAR8CFGR_XBAR8SEL                        (0xf << 0)
#define RCC_XBAR8CFGR_XBAR8EN_Pos                     6
#define RCC_XBAR8CFGR_XBAR8EN_Msk                     (0x1 << 6)
#define RCC_XBAR8CFGR_XBAR8EN                         (0x1 << 6)
#define RCC_XBAR8CFGR_XBAR8STS_Pos                    7
#define RCC_XBAR8CFGR_XBAR8STS_Msk                    (0x1 << 7)
#define RCC_XBAR8CFGR_XBAR8STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR9CFGR register */
#define RCC_XBAR9CFGR_XBAR9SEL_Pos                    0
#define RCC_XBAR9CFGR_XBAR9SEL_Msk                    (0xf << 0)
#define RCC_XBAR9CFGR_XBAR9SEL                        (0xf << 0)
#define RCC_XBAR9CFGR_XBAR9EN_Pos                     6
#define RCC_XBAR9CFGR_XBAR9EN_Msk                     (0x1 << 6)
#define RCC_XBAR9CFGR_XBAR9EN                         (0x1 << 6)
#define RCC_XBAR9CFGR_XBAR9STS_Pos                    7
#define RCC_XBAR9CFGR_XBAR9STS_Msk                    (0x1 << 7)
#define RCC_XBAR9CFGR_XBAR9STS                        (0x1 << 7)

/* Bit fields for RCC_XBAR10CFGR register */
#define RCC_XBAR10CFGR_XBAR10SEL_Pos                  0
#define RCC_XBAR10CFGR_XBAR10SEL_Msk                  (0xf << 0)
#define RCC_XBAR10CFGR_XBAR10SEL                      (0xf << 0)
#define RCC_XBAR10CFGR_XBAR10EN_Pos                   6
#define RCC_XBAR10CFGR_XBAR10EN_Msk                   (0x1 << 6)
#define RCC_XBAR10CFGR_XBAR10EN                       (0x1 << 6)
#define RCC_XBAR10CFGR_XBAR10STS_Pos                  7
#define RCC_XBAR10CFGR_XBAR10STS_Msk                  (0x1 << 7)
#define RCC_XBAR10CFGR_XBAR10STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR11CFGR register */
#define RCC_XBAR11CFGR_XBAR11SEL_Pos                  0
#define RCC_XBAR11CFGR_XBAR11SEL_Msk                  (0xf << 0)
#define RCC_XBAR11CFGR_XBAR11SEL                      (0xf << 0)
#define RCC_XBAR11CFGR_XBAR11EN_Pos                   6
#define RCC_XBAR11CFGR_XBAR11EN_Msk                   (0x1 << 6)
#define RCC_XBAR11CFGR_XBAR11EN                       (0x1 << 6)
#define RCC_XBAR11CFGR_XBAR11STS_Pos                  7
#define RCC_XBAR11CFGR_XBAR11STS_Msk                  (0x1 << 7)
#define RCC_XBAR11CFGR_XBAR11STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR12CFGR register */
#define RCC_XBAR12CFGR_XBAR12SEL_Pos                  0
#define RCC_XBAR12CFGR_XBAR12SEL_Msk                  (0xf << 0)
#define RCC_XBAR12CFGR_XBAR12SEL                      (0xf << 0)
#define RCC_XBAR12CFGR_XBAR12EN_Pos                   6
#define RCC_XBAR12CFGR_XBAR12EN_Msk                   (0x1 << 6)
#define RCC_XBAR12CFGR_XBAR12EN                       (0x1 << 6)
#define RCC_XBAR12CFGR_XBAR12STS_Pos                  7
#define RCC_XBAR12CFGR_XBAR12STS_Msk                  (0x1 << 7)
#define RCC_XBAR12CFGR_XBAR12STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR13CFGR register */
#define RCC_XBAR13CFGR_XBAR13SEL_Pos                  0
#define RCC_XBAR13CFGR_XBAR13SEL_Msk                  (0xf << 0)
#define RCC_XBAR13CFGR_XBAR13SEL                      (0xf << 0)
#define RCC_XBAR13CFGR_XBAR13EN_Pos                   6
#define RCC_XBAR13CFGR_XBAR13EN_Msk                   (0x1 << 6)
#define RCC_XBAR13CFGR_XBAR13EN                       (0x1 << 6)
#define RCC_XBAR13CFGR_XBAR13STS_Pos                  7
#define RCC_XBAR13CFGR_XBAR13STS_Msk                  (0x1 << 7)
#define RCC_XBAR13CFGR_XBAR13STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR14CFGR register */
#define RCC_XBAR14CFGR_XBAR14SEL_Pos                  0
#define RCC_XBAR14CFGR_XBAR14SEL_Msk                  (0xf << 0)
#define RCC_XBAR14CFGR_XBAR14SEL                      (0xf << 0)
#define RCC_XBAR14CFGR_XBAR14EN_Pos                   6
#define RCC_XBAR14CFGR_XBAR14EN_Msk                   (0x1 << 6)
#define RCC_XBAR14CFGR_XBAR14EN                       (0x1 << 6)
#define RCC_XBAR14CFGR_XBAR14STS_Pos                  7
#define RCC_XBAR14CFGR_XBAR14STS_Msk                  (0x1 << 7)
#define RCC_XBAR14CFGR_XBAR14STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR15CFGR register */
#define RCC_XBAR15CFGR_XBAR15SEL_Pos                  0
#define RCC_XBAR15CFGR_XBAR15SEL_Msk                  (0xf << 0)
#define RCC_XBAR15CFGR_XBAR15SEL                      (0xf << 0)
#define RCC_XBAR15CFGR_XBAR15EN_Pos                   6
#define RCC_XBAR15CFGR_XBAR15EN_Msk                   (0x1 << 6)
#define RCC_XBAR15CFGR_XBAR15EN                       (0x1 << 6)
#define RCC_XBAR15CFGR_XBAR15STS_Pos                  7
#define RCC_XBAR15CFGR_XBAR15STS_Msk                  (0x1 << 7)
#define RCC_XBAR15CFGR_XBAR15STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR16CFGR register */
#define RCC_XBAR16CFGR_XBAR16SEL_Pos                  0
#define RCC_XBAR16CFGR_XBAR16SEL_Msk                  (0xf << 0)
#define RCC_XBAR16CFGR_XBAR16SEL                      (0xf << 0)
#define RCC_XBAR16CFGR_XBAR16EN_Pos                   6
#define RCC_XBAR16CFGR_XBAR16EN_Msk                   (0x1 << 6)
#define RCC_XBAR16CFGR_XBAR16EN                       (0x1 << 6)
#define RCC_XBAR16CFGR_XBAR16STS_Pos                  7
#define RCC_XBAR16CFGR_XBAR16STS_Msk                  (0x1 << 7)
#define RCC_XBAR16CFGR_XBAR16STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR17CFGR register */
#define RCC_XBAR17CFGR_XBAR17SEL_Pos                  0
#define RCC_XBAR17CFGR_XBAR17SEL_Msk                  (0xf << 0)
#define RCC_XBAR17CFGR_XBAR17SEL                      (0xf << 0)
#define RCC_XBAR17CFGR_XBAR17EN_Pos                   6
#define RCC_XBAR17CFGR_XBAR17EN_Msk                   (0x1 << 6)
#define RCC_XBAR17CFGR_XBAR17EN                       (0x1 << 6)
#define RCC_XBAR17CFGR_XBAR17STS_Pos                  7
#define RCC_XBAR17CFGR_XBAR17STS_Msk                  (0x1 << 7)
#define RCC_XBAR17CFGR_XBAR17STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR18CFGR register */
#define RCC_XBAR18CFGR_XBAR18SEL_Pos                  0
#define RCC_XBAR18CFGR_XBAR18SEL_Msk                  (0xf << 0)
#define RCC_XBAR18CFGR_XBAR18SEL                      (0xf << 0)
#define RCC_XBAR18CFGR_XBAR18EN_Pos                   6
#define RCC_XBAR18CFGR_XBAR18EN_Msk                   (0x1 << 6)
#define RCC_XBAR18CFGR_XBAR18EN                       (0x1 << 6)
#define RCC_XBAR18CFGR_XBAR18STS_Pos                  7
#define RCC_XBAR18CFGR_XBAR18STS_Msk                  (0x1 << 7)
#define RCC_XBAR18CFGR_XBAR18STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR19CFGR register */
#define RCC_XBAR19CFGR_XBAR19SEL_Pos                  0
#define RCC_XBAR19CFGR_XBAR19SEL_Msk                  (0xf << 0)
#define RCC_XBAR19CFGR_XBAR19SEL                      (0xf << 0)
#define RCC_XBAR19CFGR_XBAR19EN_Pos                   6
#define RCC_XBAR19CFGR_XBAR19EN_Msk                   (0x1 << 6)
#define RCC_XBAR19CFGR_XBAR19EN                       (0x1 << 6)
#define RCC_XBAR19CFGR_XBAR19STS_Pos                  7
#define RCC_XBAR19CFGR_XBAR19STS_Msk                  (0x1 << 7)
#define RCC_XBAR19CFGR_XBAR19STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR20CFGR register */
#define RCC_XBAR20CFGR_XBAR20SEL_Pos                  0
#define RCC_XBAR20CFGR_XBAR20SEL_Msk                  (0xf << 0)
#define RCC_XBAR20CFGR_XBAR20SEL                      (0xf << 0)
#define RCC_XBAR20CFGR_XBAR20EN_Pos                   6
#define RCC_XBAR20CFGR_XBAR20EN_Msk                   (0x1 << 6)
#define RCC_XBAR20CFGR_XBAR20EN                       (0x1 << 6)
#define RCC_XBAR20CFGR_XBAR20STS_Pos                  7
#define RCC_XBAR20CFGR_XBAR20STS_Msk                  (0x1 << 7)
#define RCC_XBAR20CFGR_XBAR20STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR21CFGR register */
#define RCC_XBAR21CFGR_XBAR21SEL_Pos                  0
#define RCC_XBAR21CFGR_XBAR21SEL_Msk                  (0xf << 0)
#define RCC_XBAR21CFGR_XBAR21SEL                      (0xf << 0)
#define RCC_XBAR21CFGR_XBAR21EN_Pos                   6
#define RCC_XBAR21CFGR_XBAR21EN_Msk                   (0x1 << 6)
#define RCC_XBAR21CFGR_XBAR21EN                       (0x1 << 6)
#define RCC_XBAR21CFGR_XBAR21STS_Pos                  7
#define RCC_XBAR21CFGR_XBAR21STS_Msk                  (0x1 << 7)
#define RCC_XBAR21CFGR_XBAR21STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR22CFGR register */
#define RCC_XBAR22CFGR_XBAR22SEL_Pos                  0
#define RCC_XBAR22CFGR_XBAR22SEL_Msk                  (0xf << 0)
#define RCC_XBAR22CFGR_XBAR22SEL                      (0xf << 0)
#define RCC_XBAR22CFGR_XBAR22EN_Pos                   6
#define RCC_XBAR22CFGR_XBAR22EN_Msk                   (0x1 << 6)
#define RCC_XBAR22CFGR_XBAR22EN                       (0x1 << 6)
#define RCC_XBAR22CFGR_XBAR22STS_Pos                  7
#define RCC_XBAR22CFGR_XBAR22STS_Msk                  (0x1 << 7)
#define RCC_XBAR22CFGR_XBAR22STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR23CFGR register */
#define RCC_XBAR23CFGR_XBAR23SEL_Pos                  0
#define RCC_XBAR23CFGR_XBAR23SEL_Msk                  (0xf << 0)
#define RCC_XBAR23CFGR_XBAR23SEL                      (0xf << 0)
#define RCC_XBAR23CFGR_XBAR23EN_Pos                   6
#define RCC_XBAR23CFGR_XBAR23EN_Msk                   (0x1 << 6)
#define RCC_XBAR23CFGR_XBAR23EN                       (0x1 << 6)
#define RCC_XBAR23CFGR_XBAR23STS_Pos                  7
#define RCC_XBAR23CFGR_XBAR23STS_Msk                  (0x1 << 7)
#define RCC_XBAR23CFGR_XBAR23STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR24CFGR register */
#define RCC_XBAR24CFGR_XBAR24SEL_Pos                  0
#define RCC_XBAR24CFGR_XBAR24SEL_Msk                  (0xf << 0)
#define RCC_XBAR24CFGR_XBAR24SEL                      (0xf << 0)
#define RCC_XBAR24CFGR_XBAR24EN_Pos                   6
#define RCC_XBAR24CFGR_XBAR24EN_Msk                   (0x1 << 6)
#define RCC_XBAR24CFGR_XBAR24EN                       (0x1 << 6)
#define RCC_XBAR24CFGR_XBAR24STS_Pos                  7
#define RCC_XBAR24CFGR_XBAR24STS_Msk                  (0x1 << 7)
#define RCC_XBAR24CFGR_XBAR24STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR25CFGR register */
#define RCC_XBAR25CFGR_XBAR25SEL_Pos                  0
#define RCC_XBAR25CFGR_XBAR25SEL_Msk                  (0xf << 0)
#define RCC_XBAR25CFGR_XBAR25SEL                      (0xf << 0)
#define RCC_XBAR25CFGR_XBAR25EN_Pos                   6
#define RCC_XBAR25CFGR_XBAR25EN_Msk                   (0x1 << 6)
#define RCC_XBAR25CFGR_XBAR25EN                       (0x1 << 6)
#define RCC_XBAR25CFGR_XBAR25STS_Pos                  7
#define RCC_XBAR25CFGR_XBAR25STS_Msk                  (0x1 << 7)
#define RCC_XBAR25CFGR_XBAR25STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR26CFGR register */
#define RCC_XBAR26CFGR_XBAR26SEL_Pos                  0
#define RCC_XBAR26CFGR_XBAR26SEL_Msk                  (0xf << 0)
#define RCC_XBAR26CFGR_XBAR26SEL                      (0xf << 0)
#define RCC_XBAR26CFGR_XBAR26EN_Pos                   6
#define RCC_XBAR26CFGR_XBAR26EN_Msk                   (0x1 << 6)
#define RCC_XBAR26CFGR_XBAR26EN                       (0x1 << 6)
#define RCC_XBAR26CFGR_XBAR26STS_Pos                  7
#define RCC_XBAR26CFGR_XBAR26STS_Msk                  (0x1 << 7)
#define RCC_XBAR26CFGR_XBAR26STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR27CFGR register */
#define RCC_XBAR27CFGR_XBAR27SEL_Pos                  0
#define RCC_XBAR27CFGR_XBAR27SEL_Msk                  (0xf << 0)
#define RCC_XBAR27CFGR_XBAR27SEL                      (0xf << 0)
#define RCC_XBAR27CFGR_XBAR27EN_Pos                   6
#define RCC_XBAR27CFGR_XBAR27EN_Msk                   (0x1 << 6)
#define RCC_XBAR27CFGR_XBAR27EN                       (0x1 << 6)
#define RCC_XBAR27CFGR_XBAR27STS_Pos                  7
#define RCC_XBAR27CFGR_XBAR27STS_Msk                  (0x1 << 7)
#define RCC_XBAR27CFGR_XBAR27STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR28CFGR register */
#define RCC_XBAR28CFGR_XBAR28SEL_Pos                  0
#define RCC_XBAR28CFGR_XBAR28SEL_Msk                  (0xf << 0)
#define RCC_XBAR28CFGR_XBAR28SEL                      (0xf << 0)
#define RCC_XBAR28CFGR_XBAR28EN_Pos                   6
#define RCC_XBAR28CFGR_XBAR28EN_Msk                   (0x1 << 6)
#define RCC_XBAR28CFGR_XBAR28EN                       (0x1 << 6)
#define RCC_XBAR28CFGR_XBAR28STS_Pos                  7
#define RCC_XBAR28CFGR_XBAR28STS_Msk                  (0x1 << 7)
#define RCC_XBAR28CFGR_XBAR28STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR29CFGR register */
#define RCC_XBAR29CFGR_XBAR29SEL_Pos                  0
#define RCC_XBAR29CFGR_XBAR29SEL_Msk                  (0xf << 0)
#define RCC_XBAR29CFGR_XBAR29SEL                      (0xf << 0)
#define RCC_XBAR29CFGR_XBAR29EN_Pos                   6
#define RCC_XBAR29CFGR_XBAR29EN_Msk                   (0x1 << 6)
#define RCC_XBAR29CFGR_XBAR29EN                       (0x1 << 6)
#define RCC_XBAR29CFGR_XBAR29STS_Pos                  7
#define RCC_XBAR29CFGR_XBAR29STS_Msk                  (0x1 << 7)
#define RCC_XBAR29CFGR_XBAR29STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR30CFGR register */
#define RCC_XBAR30CFGR_XBAR30SEL_Pos                  0
#define RCC_XBAR30CFGR_XBAR30SEL_Msk                  (0xf << 0)
#define RCC_XBAR30CFGR_XBAR30SEL                      (0xf << 0)
#define RCC_XBAR30CFGR_XBAR30EN_Pos                   6
#define RCC_XBAR30CFGR_XBAR30EN_Msk                   (0x1 << 6)
#define RCC_XBAR30CFGR_XBAR30EN                       (0x1 << 6)
#define RCC_XBAR30CFGR_XBAR30STS_Pos                  7
#define RCC_XBAR30CFGR_XBAR30STS_Msk                  (0x1 << 7)
#define RCC_XBAR30CFGR_XBAR30STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR31CFGR register */
#define RCC_XBAR31CFGR_XBAR31SEL_Pos                  0
#define RCC_XBAR31CFGR_XBAR31SEL_Msk                  (0xf << 0)
#define RCC_XBAR31CFGR_XBAR31SEL                      (0xf << 0)
#define RCC_XBAR31CFGR_XBAR31EN_Pos                   6
#define RCC_XBAR31CFGR_XBAR31EN_Msk                   (0x1 << 6)
#define RCC_XBAR31CFGR_XBAR31EN                       (0x1 << 6)
#define RCC_XBAR31CFGR_XBAR31STS_Pos                  7
#define RCC_XBAR31CFGR_XBAR31STS_Msk                  (0x1 << 7)
#define RCC_XBAR31CFGR_XBAR31STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR32CFGR register */
#define RCC_XBAR32CFGR_XBAR32SEL_Pos                  0
#define RCC_XBAR32CFGR_XBAR32SEL_Msk                  (0xf << 0)
#define RCC_XBAR32CFGR_XBAR32SEL                      (0xf << 0)
#define RCC_XBAR32CFGR_XBAR32EN_Pos                   6
#define RCC_XBAR32CFGR_XBAR32EN_Msk                   (0x1 << 6)
#define RCC_XBAR32CFGR_XBAR32EN                       (0x1 << 6)
#define RCC_XBAR32CFGR_XBAR32STS_Pos                  7
#define RCC_XBAR32CFGR_XBAR32STS_Msk                  (0x1 << 7)
#define RCC_XBAR32CFGR_XBAR32STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR33CFGR register */
#define RCC_XBAR33CFGR_XBAR33SEL_Pos                  0
#define RCC_XBAR33CFGR_XBAR33SEL_Msk                  (0xf << 0)
#define RCC_XBAR33CFGR_XBAR33SEL                      (0xf << 0)
#define RCC_XBAR33CFGR_XBAR33EN_Pos                   6
#define RCC_XBAR33CFGR_XBAR33EN_Msk                   (0x1 << 6)
#define RCC_XBAR33CFGR_XBAR33EN                       (0x1 << 6)
#define RCC_XBAR33CFGR_XBAR33STS_Pos                  7
#define RCC_XBAR33CFGR_XBAR33STS_Msk                  (0x1 << 7)
#define RCC_XBAR33CFGR_XBAR33STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR34CFGR register */
#define RCC_XBAR34CFGR_XBAR34SEL_Pos                  0
#define RCC_XBAR34CFGR_XBAR34SEL_Msk                  (0xf << 0)
#define RCC_XBAR34CFGR_XBAR34SEL                      (0xf << 0)
#define RCC_XBAR34CFGR_XBAR34EN_Pos                   6
#define RCC_XBAR34CFGR_XBAR34EN_Msk                   (0x1 << 6)
#define RCC_XBAR34CFGR_XBAR34EN                       (0x1 << 6)
#define RCC_XBAR34CFGR_XBAR34STS_Pos                  7
#define RCC_XBAR34CFGR_XBAR34STS_Msk                  (0x1 << 7)
#define RCC_XBAR34CFGR_XBAR34STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR35CFGR register */
#define RCC_XBAR35CFGR_XBAR35SEL_Pos                  0
#define RCC_XBAR35CFGR_XBAR35SEL_Msk                  (0xf << 0)
#define RCC_XBAR35CFGR_XBAR35SEL                      (0xf << 0)
#define RCC_XBAR35CFGR_XBAR35EN_Pos                   6
#define RCC_XBAR35CFGR_XBAR35EN_Msk                   (0x1 << 6)
#define RCC_XBAR35CFGR_XBAR35EN                       (0x1 << 6)
#define RCC_XBAR35CFGR_XBAR35STS_Pos                  7
#define RCC_XBAR35CFGR_XBAR35STS_Msk                  (0x1 << 7)
#define RCC_XBAR35CFGR_XBAR35STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR36CFGR register */
#define RCC_XBAR36CFGR_XBAR36SEL_Pos                  0
#define RCC_XBAR36CFGR_XBAR36SEL_Msk                  (0xf << 0)
#define RCC_XBAR36CFGR_XBAR36SEL                      (0xf << 0)
#define RCC_XBAR36CFGR_XBAR36EN_Pos                   6
#define RCC_XBAR36CFGR_XBAR36EN_Msk                   (0x1 << 6)
#define RCC_XBAR36CFGR_XBAR36EN                       (0x1 << 6)
#define RCC_XBAR36CFGR_XBAR36STS_Pos                  7
#define RCC_XBAR36CFGR_XBAR36STS_Msk                  (0x1 << 7)
#define RCC_XBAR36CFGR_XBAR36STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR37CFGR register */
#define RCC_XBAR37CFGR_XBAR37SEL_Pos                  0
#define RCC_XBAR37CFGR_XBAR37SEL_Msk                  (0xf << 0)
#define RCC_XBAR37CFGR_XBAR37SEL                      (0xf << 0)
#define RCC_XBAR37CFGR_XBAR37EN_Pos                   6
#define RCC_XBAR37CFGR_XBAR37EN_Msk                   (0x1 << 6)
#define RCC_XBAR37CFGR_XBAR37EN                       (0x1 << 6)
#define RCC_XBAR37CFGR_XBAR37STS_Pos                  7
#define RCC_XBAR37CFGR_XBAR37STS_Msk                  (0x1 << 7)
#define RCC_XBAR37CFGR_XBAR37STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR38CFGR register */
#define RCC_XBAR38CFGR_XBAR38SEL_Pos                  0
#define RCC_XBAR38CFGR_XBAR38SEL_Msk                  (0xf << 0)
#define RCC_XBAR38CFGR_XBAR38SEL                      (0xf << 0)
#define RCC_XBAR38CFGR_XBAR38EN_Pos                   6
#define RCC_XBAR38CFGR_XBAR38EN_Msk                   (0x1 << 6)
#define RCC_XBAR38CFGR_XBAR38EN                       (0x1 << 6)
#define RCC_XBAR38CFGR_XBAR38STS_Pos                  7
#define RCC_XBAR38CFGR_XBAR38STS_Msk                  (0x1 << 7)
#define RCC_XBAR38CFGR_XBAR38STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR39CFGR register */
#define RCC_XBAR39CFGR_XBAR39SEL_Pos                  0
#define RCC_XBAR39CFGR_XBAR39SEL_Msk                  (0xf << 0)
#define RCC_XBAR39CFGR_XBAR39SEL                      (0xf << 0)
#define RCC_XBAR39CFGR_XBAR39EN_Pos                   6
#define RCC_XBAR39CFGR_XBAR39EN_Msk                   (0x1 << 6)
#define RCC_XBAR39CFGR_XBAR39EN                       (0x1 << 6)
#define RCC_XBAR39CFGR_XBAR39STS_Pos                  7
#define RCC_XBAR39CFGR_XBAR39STS_Msk                  (0x1 << 7)
#define RCC_XBAR39CFGR_XBAR39STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR40CFGR register */
#define RCC_XBAR40CFGR_XBAR40SEL_Pos                  0
#define RCC_XBAR40CFGR_XBAR40SEL_Msk                  (0xf << 0)
#define RCC_XBAR40CFGR_XBAR40SEL                      (0xf << 0)
#define RCC_XBAR40CFGR_XBAR40EN_Pos                   6
#define RCC_XBAR40CFGR_XBAR40EN_Msk                   (0x1 << 6)
#define RCC_XBAR40CFGR_XBAR40EN                       (0x1 << 6)
#define RCC_XBAR40CFGR_XBAR40STS_Pos                  7
#define RCC_XBAR40CFGR_XBAR40STS_Msk                  (0x1 << 7)
#define RCC_XBAR40CFGR_XBAR40STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR41CFGR register */
#define RCC_XBAR41CFGR_XBAR41SEL_Pos                  0
#define RCC_XBAR41CFGR_XBAR41SEL_Msk                  (0xf << 0)
#define RCC_XBAR41CFGR_XBAR41SEL                      (0xf << 0)
#define RCC_XBAR41CFGR_XBAR41EN_Pos                   6
#define RCC_XBAR41CFGR_XBAR41EN_Msk                   (0x1 << 6)
#define RCC_XBAR41CFGR_XBAR41EN                       (0x1 << 6)
#define RCC_XBAR41CFGR_XBAR41STS_Pos                  7
#define RCC_XBAR41CFGR_XBAR41STS_Msk                  (0x1 << 7)
#define RCC_XBAR41CFGR_XBAR41STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR42CFGR register */
#define RCC_XBAR42CFGR_XBAR42SEL_Pos                  0
#define RCC_XBAR42CFGR_XBAR42SEL_Msk                  (0xf << 0)
#define RCC_XBAR42CFGR_XBAR42SEL                      (0xf << 0)
#define RCC_XBAR42CFGR_XBAR42EN_Pos                   6
#define RCC_XBAR42CFGR_XBAR42EN_Msk                   (0x1 << 6)
#define RCC_XBAR42CFGR_XBAR42EN                       (0x1 << 6)
#define RCC_XBAR42CFGR_XBAR42STS_Pos                  7
#define RCC_XBAR42CFGR_XBAR42STS_Msk                  (0x1 << 7)
#define RCC_XBAR42CFGR_XBAR42STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR43CFGR register */
#define RCC_XBAR43CFGR_XBAR43SEL_Pos                  0
#define RCC_XBAR43CFGR_XBAR43SEL_Msk                  (0xf << 0)
#define RCC_XBAR43CFGR_XBAR43SEL                      (0xf << 0)
#define RCC_XBAR43CFGR_XBAR43EN_Pos                   6
#define RCC_XBAR43CFGR_XBAR43EN_Msk                   (0x1 << 6)
#define RCC_XBAR43CFGR_XBAR43EN                       (0x1 << 6)
#define RCC_XBAR43CFGR_XBAR43STS_Pos                  7
#define RCC_XBAR43CFGR_XBAR43STS_Msk                  (0x1 << 7)
#define RCC_XBAR43CFGR_XBAR43STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR44CFGR register */
#define RCC_XBAR44CFGR_XBAR44SEL_Pos                  0
#define RCC_XBAR44CFGR_XBAR44SEL_Msk                  (0xf << 0)
#define RCC_XBAR44CFGR_XBAR44SEL                      (0xf << 0)
#define RCC_XBAR44CFGR_XBAR44EN_Pos                   6
#define RCC_XBAR44CFGR_XBAR44EN_Msk                   (0x1 << 6)
#define RCC_XBAR44CFGR_XBAR44EN                       (0x1 << 6)
#define RCC_XBAR44CFGR_XBAR44STS_Pos                  7
#define RCC_XBAR44CFGR_XBAR44STS_Msk                  (0x1 << 7)
#define RCC_XBAR44CFGR_XBAR44STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR45CFGR register */
#define RCC_XBAR45CFGR_XBAR45SEL_Pos                  0
#define RCC_XBAR45CFGR_XBAR45SEL_Msk                  (0xf << 0)
#define RCC_XBAR45CFGR_XBAR45SEL                      (0xf << 0)
#define RCC_XBAR45CFGR_XBAR45EN_Pos                   6
#define RCC_XBAR45CFGR_XBAR45EN_Msk                   (0x1 << 6)
#define RCC_XBAR45CFGR_XBAR45EN                       (0x1 << 6)
#define RCC_XBAR45CFGR_XBAR45STS_Pos                  7
#define RCC_XBAR45CFGR_XBAR45STS_Msk                  (0x1 << 7)
#define RCC_XBAR45CFGR_XBAR45STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR46CFGR register */
#define RCC_XBAR46CFGR_XBAR46SEL_Pos                  0
#define RCC_XBAR46CFGR_XBAR46SEL_Msk                  (0xf << 0)
#define RCC_XBAR46CFGR_XBAR46SEL                      (0xf << 0)
#define RCC_XBAR46CFGR_XBAR46EN_Pos                   6
#define RCC_XBAR46CFGR_XBAR46EN_Msk                   (0x1 << 6)
#define RCC_XBAR46CFGR_XBAR46EN                       (0x1 << 6)
#define RCC_XBAR46CFGR_XBAR46STS_Pos                  7
#define RCC_XBAR46CFGR_XBAR46STS_Msk                  (0x1 << 7)
#define RCC_XBAR46CFGR_XBAR46STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR47CFGR register */
#define RCC_XBAR47CFGR_XBAR47SEL_Pos                  0
#define RCC_XBAR47CFGR_XBAR47SEL_Msk                  (0xf << 0)
#define RCC_XBAR47CFGR_XBAR47SEL                      (0xf << 0)
#define RCC_XBAR47CFGR_XBAR47EN_Pos                   6
#define RCC_XBAR47CFGR_XBAR47EN_Msk                   (0x1 << 6)
#define RCC_XBAR47CFGR_XBAR47EN                       (0x1 << 6)
#define RCC_XBAR47CFGR_XBAR47STS_Pos                  7
#define RCC_XBAR47CFGR_XBAR47STS_Msk                  (0x1 << 7)
#define RCC_XBAR47CFGR_XBAR47STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR48CFGR register */
#define RCC_XBAR48CFGR_XBAR48SEL_Pos                  0
#define RCC_XBAR48CFGR_XBAR48SEL_Msk                  (0xf << 0)
#define RCC_XBAR48CFGR_XBAR48SEL                      (0xf << 0)
#define RCC_XBAR48CFGR_XBAR48EN_Pos                   6
#define RCC_XBAR48CFGR_XBAR48EN_Msk                   (0x1 << 6)
#define RCC_XBAR48CFGR_XBAR48EN                       (0x1 << 6)
#define RCC_XBAR48CFGR_XBAR48STS_Pos                  7
#define RCC_XBAR48CFGR_XBAR48STS_Msk                  (0x1 << 7)
#define RCC_XBAR48CFGR_XBAR48STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR49CFGR register */
#define RCC_XBAR49CFGR_XBAR49SEL_Pos                  0
#define RCC_XBAR49CFGR_XBAR49SEL_Msk                  (0xf << 0)
#define RCC_XBAR49CFGR_XBAR49SEL                      (0xf << 0)
#define RCC_XBAR49CFGR_XBAR49EN_Pos                   6
#define RCC_XBAR49CFGR_XBAR49EN_Msk                   (0x1 << 6)
#define RCC_XBAR49CFGR_XBAR49EN                       (0x1 << 6)
#define RCC_XBAR49CFGR_XBAR49STS_Pos                  7
#define RCC_XBAR49CFGR_XBAR49STS_Msk                  (0x1 << 7)
#define RCC_XBAR49CFGR_XBAR49STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR50CFGR register */
#define RCC_XBAR50CFGR_XBAR50SEL_Pos                  0
#define RCC_XBAR50CFGR_XBAR50SEL_Msk                  (0xf << 0)
#define RCC_XBAR50CFGR_XBAR50SEL                      (0xf << 0)
#define RCC_XBAR50CFGR_XBAR50EN_Pos                   6
#define RCC_XBAR50CFGR_XBAR50EN_Msk                   (0x1 << 6)
#define RCC_XBAR50CFGR_XBAR50EN                       (0x1 << 6)
#define RCC_XBAR50CFGR_XBAR50STS_Pos                  7
#define RCC_XBAR50CFGR_XBAR50STS_Msk                  (0x1 << 7)
#define RCC_XBAR50CFGR_XBAR50STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR51CFGR register */
#define RCC_XBAR51CFGR_XBAR51SEL_Pos                  0
#define RCC_XBAR51CFGR_XBAR51SEL_Msk                  (0xf << 0)
#define RCC_XBAR51CFGR_XBAR51SEL                      (0xf << 0)
#define RCC_XBAR51CFGR_XBAR51EN_Pos                   6
#define RCC_XBAR51CFGR_XBAR51EN_Msk                   (0x1 << 6)
#define RCC_XBAR51CFGR_XBAR51EN                       (0x1 << 6)
#define RCC_XBAR51CFGR_XBAR51STS_Pos                  7
#define RCC_XBAR51CFGR_XBAR51STS_Msk                  (0x1 << 7)
#define RCC_XBAR51CFGR_XBAR51STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR52CFGR register */
#define RCC_XBAR52CFGR_XBAR52SEL_Pos                  0
#define RCC_XBAR52CFGR_XBAR52SEL_Msk                  (0xf << 0)
#define RCC_XBAR52CFGR_XBAR52SEL                      (0xf << 0)
#define RCC_XBAR52CFGR_XBAR52EN_Pos                   6
#define RCC_XBAR52CFGR_XBAR52EN_Msk                   (0x1 << 6)
#define RCC_XBAR52CFGR_XBAR52EN                       (0x1 << 6)
#define RCC_XBAR52CFGR_XBAR52STS_Pos                  7
#define RCC_XBAR52CFGR_XBAR52STS_Msk                  (0x1 << 7)
#define RCC_XBAR52CFGR_XBAR52STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR53CFGR register */
#define RCC_XBAR53CFGR_XBAR53SEL_Pos                  0
#define RCC_XBAR53CFGR_XBAR53SEL_Msk                  (0xf << 0)
#define RCC_XBAR53CFGR_XBAR53SEL                      (0xf << 0)
#define RCC_XBAR53CFGR_XBAR53EN_Pos                   6
#define RCC_XBAR53CFGR_XBAR53EN_Msk                   (0x1 << 6)
#define RCC_XBAR53CFGR_XBAR53EN                       (0x1 << 6)
#define RCC_XBAR53CFGR_XBAR53STS_Pos                  7
#define RCC_XBAR53CFGR_XBAR53STS_Msk                  (0x1 << 7)
#define RCC_XBAR53CFGR_XBAR53STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR54CFGR register */
#define RCC_XBAR54CFGR_XBAR54SEL_Pos                  0
#define RCC_XBAR54CFGR_XBAR54SEL_Msk                  (0xf << 0)
#define RCC_XBAR54CFGR_XBAR54SEL                      (0xf << 0)
#define RCC_XBAR54CFGR_XBAR54EN_Pos                   6
#define RCC_XBAR54CFGR_XBAR54EN_Msk                   (0x1 << 6)
#define RCC_XBAR54CFGR_XBAR54EN                       (0x1 << 6)
#define RCC_XBAR54CFGR_XBAR54STS_Pos                  7
#define RCC_XBAR54CFGR_XBAR54STS_Msk                  (0x1 << 7)
#define RCC_XBAR54CFGR_XBAR54STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR55CFGR register */
#define RCC_XBAR55CFGR_XBAR55SEL_Pos                  0
#define RCC_XBAR55CFGR_XBAR55SEL_Msk                  (0xf << 0)
#define RCC_XBAR55CFGR_XBAR55SEL                      (0xf << 0)
#define RCC_XBAR55CFGR_XBAR55EN_Pos                   6
#define RCC_XBAR55CFGR_XBAR55EN_Msk                   (0x1 << 6)
#define RCC_XBAR55CFGR_XBAR55EN                       (0x1 << 6)
#define RCC_XBAR55CFGR_XBAR55STS_Pos                  7
#define RCC_XBAR55CFGR_XBAR55STS_Msk                  (0x1 << 7)
#define RCC_XBAR55CFGR_XBAR55STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR56CFGR register */
#define RCC_XBAR56CFGR_XBAR56SEL_Pos                  0
#define RCC_XBAR56CFGR_XBAR56SEL_Msk                  (0xf << 0)
#define RCC_XBAR56CFGR_XBAR56SEL                      (0xf << 0)
#define RCC_XBAR56CFGR_XBAR56EN_Pos                   6
#define RCC_XBAR56CFGR_XBAR56EN_Msk                   (0x1 << 6)
#define RCC_XBAR56CFGR_XBAR56EN                       (0x1 << 6)
#define RCC_XBAR56CFGR_XBAR56STS_Pos                  7
#define RCC_XBAR56CFGR_XBAR56STS_Msk                  (0x1 << 7)
#define RCC_XBAR56CFGR_XBAR56STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR57CFGR register */
#define RCC_XBAR57CFGR_XBAR57SEL_Pos                  0
#define RCC_XBAR57CFGR_XBAR57SEL_Msk                  (0xf << 0)
#define RCC_XBAR57CFGR_XBAR57SEL                      (0xf << 0)
#define RCC_XBAR57CFGR_XBAR57EN_Pos                   6
#define RCC_XBAR57CFGR_XBAR57EN_Msk                   (0x1 << 6)
#define RCC_XBAR57CFGR_XBAR57EN                       (0x1 << 6)
#define RCC_XBAR57CFGR_XBAR57STS_Pos                  7
#define RCC_XBAR57CFGR_XBAR57STS_Msk                  (0x1 << 7)
#define RCC_XBAR57CFGR_XBAR57STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR58CFGR register */
#define RCC_XBAR58CFGR_XBAR58SEL_Pos                  0
#define RCC_XBAR58CFGR_XBAR58SEL_Msk                  (0xf << 0)
#define RCC_XBAR58CFGR_XBAR58SEL                      (0xf << 0)
#define RCC_XBAR58CFGR_XBAR58EN_Pos                   6
#define RCC_XBAR58CFGR_XBAR58EN_Msk                   (0x1 << 6)
#define RCC_XBAR58CFGR_XBAR58EN                       (0x1 << 6)
#define RCC_XBAR58CFGR_XBAR58STS_Pos                  7
#define RCC_XBAR58CFGR_XBAR58STS_Msk                  (0x1 << 7)
#define RCC_XBAR58CFGR_XBAR58STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR59CFGR register */
#define RCC_XBAR59CFGR_XBAR59SEL_Pos                  0
#define RCC_XBAR59CFGR_XBAR59SEL_Msk                  (0xf << 0)
#define RCC_XBAR59CFGR_XBAR59SEL                      (0xf << 0)
#define RCC_XBAR59CFGR_XBAR59EN_Pos                   6
#define RCC_XBAR59CFGR_XBAR59EN_Msk                   (0x1 << 6)
#define RCC_XBAR59CFGR_XBAR59EN                       (0x1 << 6)
#define RCC_XBAR59CFGR_XBAR59STS_Pos                  7
#define RCC_XBAR59CFGR_XBAR59STS_Msk                  (0x1 << 7)
#define RCC_XBAR59CFGR_XBAR59STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR60CFGR register */
#define RCC_XBAR60CFGR_XBAR60SEL_Pos                  0
#define RCC_XBAR60CFGR_XBAR60SEL_Msk                  (0xf << 0)
#define RCC_XBAR60CFGR_XBAR60SEL                      (0xf << 0)
#define RCC_XBAR60CFGR_XBAR60EN_Pos                   6
#define RCC_XBAR60CFGR_XBAR60EN_Msk                   (0x1 << 6)
#define RCC_XBAR60CFGR_XBAR60EN                       (0x1 << 6)
#define RCC_XBAR60CFGR_XBAR60STS_Pos                  7
#define RCC_XBAR60CFGR_XBAR60STS_Msk                  (0x1 << 7)
#define RCC_XBAR60CFGR_XBAR60STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR61CFGR register */
#define RCC_XBAR61CFGR_XBAR61SEL_Pos                  0
#define RCC_XBAR61CFGR_XBAR61SEL_Msk                  (0xf << 0)
#define RCC_XBAR61CFGR_XBAR61SEL                      (0xf << 0)
#define RCC_XBAR61CFGR_XBAR61EN_Pos                   6
#define RCC_XBAR61CFGR_XBAR61EN_Msk                   (0x1 << 6)
#define RCC_XBAR61CFGR_XBAR61EN                       (0x1 << 6)
#define RCC_XBAR61CFGR_XBAR61STS_Pos                  7
#define RCC_XBAR61CFGR_XBAR61STS_Msk                  (0x1 << 7)
#define RCC_XBAR61CFGR_XBAR61STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR62CFGR register */
#define RCC_XBAR62CFGR_XBAR62SEL_Pos                  0
#define RCC_XBAR62CFGR_XBAR62SEL_Msk                  (0xf << 0)
#define RCC_XBAR62CFGR_XBAR62SEL                      (0xf << 0)
#define RCC_XBAR62CFGR_XBAR62EN_Pos                   6
#define RCC_XBAR62CFGR_XBAR62EN_Msk                   (0x1 << 6)
#define RCC_XBAR62CFGR_XBAR62EN                       (0x1 << 6)
#define RCC_XBAR62CFGR_XBAR62STS_Pos                  7
#define RCC_XBAR62CFGR_XBAR62STS_Msk                  (0x1 << 7)
#define RCC_XBAR62CFGR_XBAR62STS                      (0x1 << 7)

/* Bit fields for RCC_XBAR63CFGR register */
#define RCC_XBAR63CFGR_XBAR63SEL_Pos                  0
#define RCC_XBAR63CFGR_XBAR63SEL_Msk                  (0xf << 0)
#define RCC_XBAR63CFGR_XBAR63SEL                      (0xf << 0)
#define RCC_XBAR63CFGR_XBAR63EN_Pos                   6
#define RCC_XBAR63CFGR_XBAR63EN_Msk                   (0x1 << 6)
#define RCC_XBAR63CFGR_XBAR63EN                       (0x1 << 6)
#define RCC_XBAR63CFGR_XBAR63STS_Pos                  7
#define RCC_XBAR63CFGR_XBAR63STS_Msk                  (0x1 << 7)
#define RCC_XBAR63CFGR_XBAR63STS                      (0x1 << 7)

/* Bit fields for RCC_PREDIV0CFGR register */
#define RCC_PREDIV0CFGR_PREDIV0_Pos                   0
#define RCC_PREDIV0CFGR_PREDIV0_Msk                   (0x3ff << 0)
#define RCC_PREDIV0CFGR_PREDIV0                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV1CFGR register */
#define RCC_PREDIV1CFGR_PREDIV1_Pos                   0
#define RCC_PREDIV1CFGR_PREDIV1_Msk                   (0x3ff << 0)
#define RCC_PREDIV1CFGR_PREDIV1                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV2CFGR register */
#define RCC_PREDIV2CFGR_PREDIV2_Pos                   0
#define RCC_PREDIV2CFGR_PREDIV2_Msk                   (0x3ff << 0)
#define RCC_PREDIV2CFGR_PREDIV2                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV3CFGR register */
#define RCC_PREDIV3CFGR_PREDIV3_Pos                   0
#define RCC_PREDIV3CFGR_PREDIV3_Msk                   (0x3ff << 0)
#define RCC_PREDIV3CFGR_PREDIV3                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV4CFGR register */
#define RCC_PREDIV4CFGR_PREDIV4_Pos                   0
#define RCC_PREDIV4CFGR_PREDIV4_Msk                   (0x3ff << 0)
#define RCC_PREDIV4CFGR_PREDIV4                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV5CFGR register */
#define RCC_PREDIV5CFGR_PREDIV5_Pos                   0
#define RCC_PREDIV5CFGR_PREDIV5_Msk                   (0x3ff << 0)
#define RCC_PREDIV5CFGR_PREDIV5                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV6CFGR register */
#define RCC_PREDIV6CFGR_PREDIV6_Pos                   0
#define RCC_PREDIV6CFGR_PREDIV6_Msk                   (0x3ff << 0)
#define RCC_PREDIV6CFGR_PREDIV6                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV7CFGR register */
#define RCC_PREDIV7CFGR_PREDIV7_Pos                   0
#define RCC_PREDIV7CFGR_PREDIV7_Msk                   (0x3ff << 0)
#define RCC_PREDIV7CFGR_PREDIV7                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV8CFGR register */
#define RCC_PREDIV8CFGR_PREDIV8_Pos                   0
#define RCC_PREDIV8CFGR_PREDIV8_Msk                   (0x3ff << 0)
#define RCC_PREDIV8CFGR_PREDIV8                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV9CFGR register */
#define RCC_PREDIV9CFGR_PREDIV9_Pos                   0
#define RCC_PREDIV9CFGR_PREDIV9_Msk                   (0x3ff << 0)
#define RCC_PREDIV9CFGR_PREDIV9                       (0x3ff << 0)

/* Bit fields for RCC_PREDIV10CFGR register */
#define RCC_PREDIV10CFGR_PREDIV10_Pos                 0
#define RCC_PREDIV10CFGR_PREDIV10_Msk                 (0x3ff << 0)
#define RCC_PREDIV10CFGR_PREDIV10                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV11CFGR register */
#define RCC_PREDIV11CFGR_PREDIV11_Pos                 0
#define RCC_PREDIV11CFGR_PREDIV11_Msk                 (0x3ff << 0)
#define RCC_PREDIV11CFGR_PREDIV11                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV12CFGR register */
#define RCC_PREDIV12CFGR_PREDIV12_Pos                 0
#define RCC_PREDIV12CFGR_PREDIV12_Msk                 (0x3ff << 0)
#define RCC_PREDIV12CFGR_PREDIV12                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV13CFGR register */
#define RCC_PREDIV13CFGR_PREDIV13_Pos                 0
#define RCC_PREDIV13CFGR_PREDIV13_Msk                 (0x3ff << 0)
#define RCC_PREDIV13CFGR_PREDIV13                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV14CFGR register */
#define RCC_PREDIV14CFGR_PREDIV14_Pos                 0
#define RCC_PREDIV14CFGR_PREDIV14_Msk                 (0x3ff << 0)
#define RCC_PREDIV14CFGR_PREDIV14                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV15CFGR register */
#define RCC_PREDIV15CFGR_PREDIV15_Pos                 0
#define RCC_PREDIV15CFGR_PREDIV15_Msk                 (0x3ff << 0)
#define RCC_PREDIV15CFGR_PREDIV15                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV16CFGR register */
#define RCC_PREDIV16CFGR_PREDIV16_Pos                 0
#define RCC_PREDIV16CFGR_PREDIV16_Msk                 (0x3ff << 0)
#define RCC_PREDIV16CFGR_PREDIV16                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV17CFGR register */
#define RCC_PREDIV17CFGR_PREDIV17_Pos                 0
#define RCC_PREDIV17CFGR_PREDIV17_Msk                 (0x3ff << 0)
#define RCC_PREDIV17CFGR_PREDIV17                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV18CFGR register */
#define RCC_PREDIV18CFGR_PREDIV18_Pos                 0
#define RCC_PREDIV18CFGR_PREDIV18_Msk                 (0x3ff << 0)
#define RCC_PREDIV18CFGR_PREDIV18                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV19CFGR register */
#define RCC_PREDIV19CFGR_PREDIV19_Pos                 0
#define RCC_PREDIV19CFGR_PREDIV19_Msk                 (0x3ff << 0)
#define RCC_PREDIV19CFGR_PREDIV19                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV20CFGR register */
#define RCC_PREDIV20CFGR_PREDIV20_Pos                 0
#define RCC_PREDIV20CFGR_PREDIV20_Msk                 (0x3ff << 0)
#define RCC_PREDIV20CFGR_PREDIV20                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV21CFGR register */
#define RCC_PREDIV21CFGR_PREDIV21_Pos                 0
#define RCC_PREDIV21CFGR_PREDIV21_Msk                 (0x3ff << 0)
#define RCC_PREDIV21CFGR_PREDIV21                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV22CFGR register */
#define RCC_PREDIV22CFGR_PREDIV22_Pos                 0
#define RCC_PREDIV22CFGR_PREDIV22_Msk                 (0x3ff << 0)
#define RCC_PREDIV22CFGR_PREDIV22                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV23CFGR register */
#define RCC_PREDIV23CFGR_PREDIV23_Pos                 0
#define RCC_PREDIV23CFGR_PREDIV23_Msk                 (0x3ff << 0)
#define RCC_PREDIV23CFGR_PREDIV23                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV24CFGR register */
#define RCC_PREDIV24CFGR_PREDIV24_Pos                 0
#define RCC_PREDIV24CFGR_PREDIV24_Msk                 (0x3ff << 0)
#define RCC_PREDIV24CFGR_PREDIV24                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV25CFGR register */
#define RCC_PREDIV25CFGR_PREDIV25_Pos                 0
#define RCC_PREDIV25CFGR_PREDIV25_Msk                 (0x3ff << 0)
#define RCC_PREDIV25CFGR_PREDIV25                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV26CFGR register */
#define RCC_PREDIV26CFGR_PREDIV26_Pos                 0
#define RCC_PREDIV26CFGR_PREDIV26_Msk                 (0x3ff << 0)
#define RCC_PREDIV26CFGR_PREDIV26                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV27CFGR register */
#define RCC_PREDIV27CFGR_PREDIV27_Pos                 0
#define RCC_PREDIV27CFGR_PREDIV27_Msk                 (0x3ff << 0)
#define RCC_PREDIV27CFGR_PREDIV27                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV28CFGR register */
#define RCC_PREDIV28CFGR_PREDIV28_Pos                 0
#define RCC_PREDIV28CFGR_PREDIV28_Msk                 (0x3ff << 0)
#define RCC_PREDIV28CFGR_PREDIV28                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV29CFGR register */
#define RCC_PREDIV29CFGR_PREDIV29_Pos                 0
#define RCC_PREDIV29CFGR_PREDIV29_Msk                 (0x3ff << 0)
#define RCC_PREDIV29CFGR_PREDIV29                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV30CFGR register */
#define RCC_PREDIV30CFGR_PREDIV30_Pos                 0
#define RCC_PREDIV30CFGR_PREDIV30_Msk                 (0x3ff << 0)
#define RCC_PREDIV30CFGR_PREDIV30                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV31CFGR register */
#define RCC_PREDIV31CFGR_PREDIV31_Pos                 0
#define RCC_PREDIV31CFGR_PREDIV31_Msk                 (0x3ff << 0)
#define RCC_PREDIV31CFGR_PREDIV31                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV32CFGR register */
#define RCC_PREDIV32CFGR_PREDIV32_Pos                 0
#define RCC_PREDIV32CFGR_PREDIV32_Msk                 (0x3ff << 0)
#define RCC_PREDIV32CFGR_PREDIV32                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV33CFGR register */
#define RCC_PREDIV33CFGR_PREDIV33_Pos                 0
#define RCC_PREDIV33CFGR_PREDIV33_Msk                 (0x3ff << 0)
#define RCC_PREDIV33CFGR_PREDIV33                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV34CFGR register */
#define RCC_PREDIV34CFGR_PREDIV34_Pos                 0
#define RCC_PREDIV34CFGR_PREDIV34_Msk                 (0x3ff << 0)
#define RCC_PREDIV34CFGR_PREDIV34                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV35CFGR register */
#define RCC_PREDIV35CFGR_PREDIV35_Pos                 0
#define RCC_PREDIV35CFGR_PREDIV35_Msk                 (0x3ff << 0)
#define RCC_PREDIV35CFGR_PREDIV35                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV36CFGR register */
#define RCC_PREDIV36CFGR_PREDIV36_Pos                 0
#define RCC_PREDIV36CFGR_PREDIV36_Msk                 (0x3ff << 0)
#define RCC_PREDIV36CFGR_PREDIV36                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV37CFGR register */
#define RCC_PREDIV37CFGR_PREDIV37_Pos                 0
#define RCC_PREDIV37CFGR_PREDIV37_Msk                 (0x3ff << 0)
#define RCC_PREDIV37CFGR_PREDIV37                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV38CFGR register */
#define RCC_PREDIV38CFGR_PREDIV38_Pos                 0
#define RCC_PREDIV38CFGR_PREDIV38_Msk                 (0x3ff << 0)
#define RCC_PREDIV38CFGR_PREDIV38                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV39CFGR register */
#define RCC_PREDIV39CFGR_PREDIV39_Pos                 0
#define RCC_PREDIV39CFGR_PREDIV39_Msk                 (0x3ff << 0)
#define RCC_PREDIV39CFGR_PREDIV39                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV40CFGR register */
#define RCC_PREDIV40CFGR_PREDIV40_Pos                 0
#define RCC_PREDIV40CFGR_PREDIV40_Msk                 (0x3ff << 0)
#define RCC_PREDIV40CFGR_PREDIV40                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV41CFGR register */
#define RCC_PREDIV41CFGR_PREDIV41_Pos                 0
#define RCC_PREDIV41CFGR_PREDIV41_Msk                 (0x3ff << 0)
#define RCC_PREDIV41CFGR_PREDIV41                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV42CFGR register */
#define RCC_PREDIV42CFGR_PREDIV42_Pos                 0
#define RCC_PREDIV42CFGR_PREDIV42_Msk                 (0x3ff << 0)
#define RCC_PREDIV42CFGR_PREDIV42                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV43CFGR register */
#define RCC_PREDIV43CFGR_PREDIV43_Pos                 0
#define RCC_PREDIV43CFGR_PREDIV43_Msk                 (0x3ff << 0)
#define RCC_PREDIV43CFGR_PREDIV43                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV44CFGR register */
#define RCC_PREDIV44CFGR_PREDIV44_Pos                 0
#define RCC_PREDIV44CFGR_PREDIV44_Msk                 (0x3ff << 0)
#define RCC_PREDIV44CFGR_PREDIV44                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV45CFGR register */
#define RCC_PREDIV45CFGR_PREDIV45_Pos                 0
#define RCC_PREDIV45CFGR_PREDIV45_Msk                 (0x3ff << 0)
#define RCC_PREDIV45CFGR_PREDIV45                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV46CFGR register */
#define RCC_PREDIV46CFGR_PREDIV46_Pos                 0
#define RCC_PREDIV46CFGR_PREDIV46_Msk                 (0x3ff << 0)
#define RCC_PREDIV46CFGR_PREDIV46                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV47CFGR register */
#define RCC_PREDIV47CFGR_PREDIV47_Pos                 0
#define RCC_PREDIV47CFGR_PREDIV47_Msk                 (0x3ff << 0)
#define RCC_PREDIV47CFGR_PREDIV47                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV48CFGR register */
#define RCC_PREDIV48CFGR_PREDIV48_Pos                 0
#define RCC_PREDIV48CFGR_PREDIV48_Msk                 (0x3ff << 0)
#define RCC_PREDIV48CFGR_PREDIV48                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV49CFGR register */
#define RCC_PREDIV49CFGR_PREDIV49_Pos                 0
#define RCC_PREDIV49CFGR_PREDIV49_Msk                 (0x3ff << 0)
#define RCC_PREDIV49CFGR_PREDIV49                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV50CFGR register */
#define RCC_PREDIV50CFGR_PREDIV50_Pos                 0
#define RCC_PREDIV50CFGR_PREDIV50_Msk                 (0x3ff << 0)
#define RCC_PREDIV50CFGR_PREDIV50                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV51CFGR register */
#define RCC_PREDIV51CFGR_PREDIV51_Pos                 0
#define RCC_PREDIV51CFGR_PREDIV51_Msk                 (0x3ff << 0)
#define RCC_PREDIV51CFGR_PREDIV51                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV52CFGR register */
#define RCC_PREDIV52CFGR_PREDIV52_Pos                 0
#define RCC_PREDIV52CFGR_PREDIV52_Msk                 (0x3ff << 0)
#define RCC_PREDIV52CFGR_PREDIV52                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV53CFGR register */
#define RCC_PREDIV53CFGR_PREDIV53_Pos                 0
#define RCC_PREDIV53CFGR_PREDIV53_Msk                 (0x3ff << 0)
#define RCC_PREDIV53CFGR_PREDIV53                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV54CFGR register */
#define RCC_PREDIV54CFGR_PREDIV54_Pos                 0
#define RCC_PREDIV54CFGR_PREDIV54_Msk                 (0x3ff << 0)
#define RCC_PREDIV54CFGR_PREDIV54                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV55CFGR register */
#define RCC_PREDIV55CFGR_PREDIV55_Pos                 0
#define RCC_PREDIV55CFGR_PREDIV55_Msk                 (0x3ff << 0)
#define RCC_PREDIV55CFGR_PREDIV55                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV56CFGR register */
#define RCC_PREDIV56CFGR_PREDIV56_Pos                 0
#define RCC_PREDIV56CFGR_PREDIV56_Msk                 (0x3ff << 0)
#define RCC_PREDIV56CFGR_PREDIV56                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV57CFGR register */
#define RCC_PREDIV57CFGR_PREDIV57_Pos                 0
#define RCC_PREDIV57CFGR_PREDIV57_Msk                 (0x3ff << 0)
#define RCC_PREDIV57CFGR_PREDIV57                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV58CFGR register */
#define RCC_PREDIV58CFGR_PREDIV58_Pos                 0
#define RCC_PREDIV58CFGR_PREDIV58_Msk                 (0x3ff << 0)
#define RCC_PREDIV58CFGR_PREDIV58                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV59CFGR register */
#define RCC_PREDIV59CFGR_PREDIV59_Pos                 0
#define RCC_PREDIV59CFGR_PREDIV59_Msk                 (0x3ff << 0)
#define RCC_PREDIV59CFGR_PREDIV59                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV60CFGR register */
#define RCC_PREDIV60CFGR_PREDIV60_Pos                 0
#define RCC_PREDIV60CFGR_PREDIV60_Msk                 (0x3ff << 0)
#define RCC_PREDIV60CFGR_PREDIV60                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV61CFGR register */
#define RCC_PREDIV61CFGR_PREDIV61_Pos                 0
#define RCC_PREDIV61CFGR_PREDIV61_Msk                 (0x3ff << 0)
#define RCC_PREDIV61CFGR_PREDIV61                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV62CFGR register */
#define RCC_PREDIV62CFGR_PREDIV62_Pos                 0
#define RCC_PREDIV62CFGR_PREDIV62_Msk                 (0x3ff << 0)
#define RCC_PREDIV62CFGR_PREDIV62                     (0x3ff << 0)

/* Bit fields for RCC_PREDIV63CFGR register */
#define RCC_PREDIV63CFGR_PREDIV63_Pos                 0
#define RCC_PREDIV63CFGR_PREDIV63_Msk                 (0x3ff << 0)
#define RCC_PREDIV63CFGR_PREDIV63                     (0x3ff << 0)

/* Bit fields for RCC_PREDIVSR1 register */
#define RCC_PREDIVSR1_PREDIVSTS_Pos                   0
#define RCC_PREDIVSR1_PREDIVSTS_Msk                   (0xFFFFFFFF << 0)
#define RCC_PREDIVSR1_PREDIVSTS                       (0xFFFFFFFF << 0)

/* Bit fields for RCC_PREDIVSR2 register */
#define RCC_PREDIVSR2_PREDIVSTS_Pos                   0
#define RCC_PREDIVSR2_PREDIVSTS_Msk                   (0xFFFFFFFF << 0)
#define RCC_PREDIVSR2_PREDIVSTS                       (0xFFFFFFFF << 0)

/* Bit fields for RCC_FINDIV0CFGR register */
#define RCC_FINDIV0CFGR_FINDIV0_Pos                   0
#define RCC_FINDIV0CFGR_FINDIV0_Msk                   (0x3f << 0)
#define RCC_FINDIV0CFGR_FINDIV0                       (0x3f << 0)
#define RCC_FINDIV0CFGR_FINDIV0EN_Pos                 6
#define RCC_FINDIV0CFGR_FINDIV0EN_Msk                 (0x1 << 6)
#define RCC_FINDIV0CFGR_FINDIV0EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV1CFGR register */
#define RCC_FINDIV1CFGR_FINDIV1_Pos                   0
#define RCC_FINDIV1CFGR_FINDIV1_Msk                   (0x3f << 0)
#define RCC_FINDIV1CFGR_FINDIV1                       (0x3f << 0)
#define RCC_FINDIV1CFGR_FINDIV1EN_Pos                 6
#define RCC_FINDIV1CFGR_FINDIV1EN_Msk                 (0x1 << 6)
#define RCC_FINDIV1CFGR_FINDIV1EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV2CFGR register */
#define RCC_FINDIV2CFGR_FINDIV2_Pos                   0
#define RCC_FINDIV2CFGR_FINDIV2_Msk                   (0x3f << 0)
#define RCC_FINDIV2CFGR_FINDIV2                       (0x3f << 0)
#define RCC_FINDIV2CFGR_FINDIV2EN_Pos                 6
#define RCC_FINDIV2CFGR_FINDIV2EN_Msk                 (0x1 << 6)
#define RCC_FINDIV2CFGR_FINDIV2EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV3CFGR register */
#define RCC_FINDIV3CFGR_FINDIV3_Pos                   0
#define RCC_FINDIV3CFGR_FINDIV3_Msk                   (0x3f << 0)
#define RCC_FINDIV3CFGR_FINDIV3                       (0x3f << 0)
#define RCC_FINDIV3CFGR_FINDIV3EN_Pos                 6
#define RCC_FINDIV3CFGR_FINDIV3EN_Msk                 (0x1 << 6)
#define RCC_FINDIV3CFGR_FINDIV3EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV4CFGR register */
#define RCC_FINDIV4CFGR_FINDIV4_Pos                   0
#define RCC_FINDIV4CFGR_FINDIV4_Msk                   (0x3f << 0)
#define RCC_FINDIV4CFGR_FINDIV4                       (0x3f << 0)
#define RCC_FINDIV4CFGR_FINDIV4EN_Pos                 6
#define RCC_FINDIV4CFGR_FINDIV4EN_Msk                 (0x1 << 6)
#define RCC_FINDIV4CFGR_FINDIV4EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV5CFGR register */
#define RCC_FINDIV5CFGR_FINDIV5_Pos                   0
#define RCC_FINDIV5CFGR_FINDIV5_Msk                   (0x3f << 0)
#define RCC_FINDIV5CFGR_FINDIV5                       (0x3f << 0)
#define RCC_FINDIV5CFGR_FINDIV5EN_Pos                 6
#define RCC_FINDIV5CFGR_FINDIV5EN_Msk                 (0x1 << 6)
#define RCC_FINDIV5CFGR_FINDIV5EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV6CFGR register */
#define RCC_FINDIV6CFGR_FINDIV6_Pos                   0
#define RCC_FINDIV6CFGR_FINDIV6_Msk                   (0x3f << 0)
#define RCC_FINDIV6CFGR_FINDIV6                       (0x3f << 0)
#define RCC_FINDIV6CFGR_FINDIV6EN_Pos                 6
#define RCC_FINDIV6CFGR_FINDIV6EN_Msk                 (0x1 << 6)
#define RCC_FINDIV6CFGR_FINDIV6EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV7CFGR register */
#define RCC_FINDIV7CFGR_FINDIV7_Pos                   0
#define RCC_FINDIV7CFGR_FINDIV7_Msk                   (0x3f << 0)
#define RCC_FINDIV7CFGR_FINDIV7                       (0x3f << 0)
#define RCC_FINDIV7CFGR_FINDIV7EN_Pos                 6
#define RCC_FINDIV7CFGR_FINDIV7EN_Msk                 (0x1 << 6)
#define RCC_FINDIV7CFGR_FINDIV7EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV8CFGR register */
#define RCC_FINDIV8CFGR_FINDIV8_Pos                   0
#define RCC_FINDIV8CFGR_FINDIV8_Msk                   (0x3f << 0)
#define RCC_FINDIV8CFGR_FINDIV8                       (0x3f << 0)
#define RCC_FINDIV8CFGR_FINDIV8EN_Pos                 6
#define RCC_FINDIV8CFGR_FINDIV8EN_Msk                 (0x1 << 6)
#define RCC_FINDIV8CFGR_FINDIV8EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV9CFGR register */
#define RCC_FINDIV9CFGR_FINDIV9_Pos                   0
#define RCC_FINDIV9CFGR_FINDIV9_Msk                   (0x3f << 0)
#define RCC_FINDIV9CFGR_FINDIV9                       (0x3f << 0)
#define RCC_FINDIV9CFGR_FINDIV9EN_Pos                 6
#define RCC_FINDIV9CFGR_FINDIV9EN_Msk                 (0x1 << 6)
#define RCC_FINDIV9CFGR_FINDIV9EN                     (0x1 << 6)

/* Bit fields for RCC_FINDIV10CFGR register */
#define RCC_FINDIV10CFGR_FINDIV10_Pos                 0
#define RCC_FINDIV10CFGR_FINDIV10_Msk                 (0x3f << 0)
#define RCC_FINDIV10CFGR_FINDIV10                     (0x3f << 0)
#define RCC_FINDIV10CFGR_FINDIV10EN_Pos               6
#define RCC_FINDIV10CFGR_FINDIV10EN_Msk               (0x1 << 6)
#define RCC_FINDIV10CFGR_FINDIV10EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV11CFGR register */
#define RCC_FINDIV11CFGR_FINDIV11_Pos                 0
#define RCC_FINDIV11CFGR_FINDIV11_Msk                 (0x3f << 0)
#define RCC_FINDIV11CFGR_FINDIV11                     (0x3f << 0)
#define RCC_FINDIV11CFGR_FINDIV11EN_Pos               6
#define RCC_FINDIV11CFGR_FINDIV11EN_Msk               (0x1 << 6)
#define RCC_FINDIV11CFGR_FINDIV11EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV12CFGR register */
#define RCC_FINDIV12CFGR_FINDIV12_Pos                 0
#define RCC_FINDIV12CFGR_FINDIV12_Msk                 (0x3f << 0)
#define RCC_FINDIV12CFGR_FINDIV12                     (0x3f << 0)
#define RCC_FINDIV12CFGR_FINDIV12EN_Pos               6
#define RCC_FINDIV12CFGR_FINDIV12EN_Msk               (0x1 << 6)
#define RCC_FINDIV12CFGR_FINDIV12EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV13CFGR register */
#define RCC_FINDIV13CFGR_FINDIV13_Pos                 0
#define RCC_FINDIV13CFGR_FINDIV13_Msk                 (0x3f << 0)
#define RCC_FINDIV13CFGR_FINDIV13                     (0x3f << 0)
#define RCC_FINDIV13CFGR_FINDIV13EN_Pos               6
#define RCC_FINDIV13CFGR_FINDIV13EN_Msk               (0x1 << 6)
#define RCC_FINDIV13CFGR_FINDIV13EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV14CFGR register */
#define RCC_FINDIV14CFGR_FINDIV14_Pos                 0
#define RCC_FINDIV14CFGR_FINDIV14_Msk                 (0x3f << 0)
#define RCC_FINDIV14CFGR_FINDIV14                     (0x3f << 0)
#define RCC_FINDIV14CFGR_FINDIV14EN_Pos               6
#define RCC_FINDIV14CFGR_FINDIV14EN_Msk               (0x1 << 6)
#define RCC_FINDIV14CFGR_FINDIV14EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV15CFGR register */
#define RCC_FINDIV15CFGR_FINDIV15_Pos                 0
#define RCC_FINDIV15CFGR_FINDIV15_Msk                 (0x3f << 0)
#define RCC_FINDIV15CFGR_FINDIV15                     (0x3f << 0)
#define RCC_FINDIV15CFGR_FINDIV15EN_Pos               6
#define RCC_FINDIV15CFGR_FINDIV15EN_Msk               (0x1 << 6)
#define RCC_FINDIV15CFGR_FINDIV15EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV16CFGR register */
#define RCC_FINDIV16CFGR_FINDIV16_Pos                 0
#define RCC_FINDIV16CFGR_FINDIV16_Msk                 (0x3f << 0)
#define RCC_FINDIV16CFGR_FINDIV16                     (0x3f << 0)
#define RCC_FINDIV16CFGR_FINDIV16EN_Pos               6
#define RCC_FINDIV16CFGR_FINDIV16EN_Msk               (0x1 << 6)
#define RCC_FINDIV16CFGR_FINDIV16EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV17CFGR register */
#define RCC_FINDIV17CFGR_FINDIV17_Pos                 0
#define RCC_FINDIV17CFGR_FINDIV17_Msk                 (0x3f << 0)
#define RCC_FINDIV17CFGR_FINDIV17                     (0x3f << 0)
#define RCC_FINDIV17CFGR_FINDIV17EN_Pos               6
#define RCC_FINDIV17CFGR_FINDIV17EN_Msk               (0x1 << 6)
#define RCC_FINDIV17CFGR_FINDIV17EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV18CFGR register */
#define RCC_FINDIV18CFGR_FINDIV18_Pos                 0
#define RCC_FINDIV18CFGR_FINDIV18_Msk                 (0x3f << 0)
#define RCC_FINDIV18CFGR_FINDIV18                     (0x3f << 0)
#define RCC_FINDIV18CFGR_FINDIV18EN_Pos               6
#define RCC_FINDIV18CFGR_FINDIV18EN_Msk               (0x1 << 6)
#define RCC_FINDIV18CFGR_FINDIV18EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV19CFGR register */
#define RCC_FINDIV19CFGR_FINDIV19_Pos                 0
#define RCC_FINDIV19CFGR_FINDIV19_Msk                 (0x3f << 0)
#define RCC_FINDIV19CFGR_FINDIV19                     (0x3f << 0)
#define RCC_FINDIV19CFGR_FINDIV19EN_Pos               6
#define RCC_FINDIV19CFGR_FINDIV19EN_Msk               (0x1 << 6)
#define RCC_FINDIV19CFGR_FINDIV19EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV20CFGR register */
#define RCC_FINDIV20CFGR_FINDIV20_Pos                 0
#define RCC_FINDIV20CFGR_FINDIV20_Msk                 (0x3f << 0)
#define RCC_FINDIV20CFGR_FINDIV20                     (0x3f << 0)
#define RCC_FINDIV20CFGR_FINDIV20EN_Pos               6
#define RCC_FINDIV20CFGR_FINDIV20EN_Msk               (0x1 << 6)
#define RCC_FINDIV20CFGR_FINDIV20EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV21CFGR register */
#define RCC_FINDIV21CFGR_FINDIV21_Pos                 0
#define RCC_FINDIV21CFGR_FINDIV21_Msk                 (0x3f << 0)
#define RCC_FINDIV21CFGR_FINDIV21                     (0x3f << 0)
#define RCC_FINDIV21CFGR_FINDIV21EN_Pos               6
#define RCC_FINDIV21CFGR_FINDIV21EN_Msk               (0x1 << 6)
#define RCC_FINDIV21CFGR_FINDIV21EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV22CFGR register */
#define RCC_FINDIV22CFGR_FINDIV22_Pos                 0
#define RCC_FINDIV22CFGR_FINDIV22_Msk                 (0x3f << 0)
#define RCC_FINDIV22CFGR_FINDIV22                     (0x3f << 0)
#define RCC_FINDIV22CFGR_FINDIV22EN_Pos               6
#define RCC_FINDIV22CFGR_FINDIV22EN_Msk               (0x1 << 6)
#define RCC_FINDIV22CFGR_FINDIV22EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV23CFGR register */
#define RCC_FINDIV23CFGR_FINDIV23_Pos                 0
#define RCC_FINDIV23CFGR_FINDIV23_Msk                 (0x3f << 0)
#define RCC_FINDIV23CFGR_FINDIV23                     (0x3f << 0)
#define RCC_FINDIV23CFGR_FINDIV23EN_Pos               6
#define RCC_FINDIV23CFGR_FINDIV23EN_Msk               (0x1 << 6)
#define RCC_FINDIV23CFGR_FINDIV23EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV24CFGR register */
#define RCC_FINDIV24CFGR_FINDIV24_Pos                 0
#define RCC_FINDIV24CFGR_FINDIV24_Msk                 (0x3f << 0)
#define RCC_FINDIV24CFGR_FINDIV24                     (0x3f << 0)
#define RCC_FINDIV24CFGR_FINDIV24EN_Pos               6
#define RCC_FINDIV24CFGR_FINDIV24EN_Msk               (0x1 << 6)
#define RCC_FINDIV24CFGR_FINDIV24EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV25CFGR register */
#define RCC_FINDIV25CFGR_FINDIV25_Pos                 0
#define RCC_FINDIV25CFGR_FINDIV25_Msk                 (0x3f << 0)
#define RCC_FINDIV25CFGR_FINDIV25                     (0x3f << 0)
#define RCC_FINDIV25CFGR_FINDIV25EN_Pos               6
#define RCC_FINDIV25CFGR_FINDIV25EN_Msk               (0x1 << 6)
#define RCC_FINDIV25CFGR_FINDIV25EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV26CFGR register */
#define RCC_FINDIV26CFGR_FINDIV26_Pos                 0
#define RCC_FINDIV26CFGR_FINDIV26_Msk                 (0x3f << 0)
#define RCC_FINDIV26CFGR_FINDIV26                     (0x3f << 0)
#define RCC_FINDIV26CFGR_FINDIV26EN_Pos               6
#define RCC_FINDIV26CFGR_FINDIV26EN_Msk               (0x1 << 6)
#define RCC_FINDIV26CFGR_FINDIV26EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV27CFGR register */
#define RCC_FINDIV27CFGR_FINDIV27_Pos                 0
#define RCC_FINDIV27CFGR_FINDIV27_Msk                 (0x3f << 0)
#define RCC_FINDIV27CFGR_FINDIV27                     (0x3f << 0)
#define RCC_FINDIV27CFGR_FINDIV27EN_Pos               6
#define RCC_FINDIV27CFGR_FINDIV27EN_Msk               (0x1 << 6)
#define RCC_FINDIV27CFGR_FINDIV27EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV28CFGR register */
#define RCC_FINDIV28CFGR_FINDIV28_Pos                 0
#define RCC_FINDIV28CFGR_FINDIV28_Msk                 (0x3f << 0)
#define RCC_FINDIV28CFGR_FINDIV28                     (0x3f << 0)
#define RCC_FINDIV28CFGR_FINDIV28EN_Pos               6
#define RCC_FINDIV28CFGR_FINDIV28EN_Msk               (0x1 << 6)
#define RCC_FINDIV28CFGR_FINDIV28EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV29CFGR register */
#define RCC_FINDIV29CFGR_FINDIV29_Pos                 0
#define RCC_FINDIV29CFGR_FINDIV29_Msk                 (0x3f << 0)
#define RCC_FINDIV29CFGR_FINDIV29                     (0x3f << 0)
#define RCC_FINDIV29CFGR_FINDIV29EN_Pos               6
#define RCC_FINDIV29CFGR_FINDIV29EN_Msk               (0x1 << 6)
#define RCC_FINDIV29CFGR_FINDIV29EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV30CFGR register */
#define RCC_FINDIV30CFGR_FINDIV30_Pos                 0
#define RCC_FINDIV30CFGR_FINDIV30_Msk                 (0x3f << 0)
#define RCC_FINDIV30CFGR_FINDIV30                     (0x3f << 0)
#define RCC_FINDIV30CFGR_FINDIV30EN_Pos               6
#define RCC_FINDIV30CFGR_FINDIV30EN_Msk               (0x1 << 6)
#define RCC_FINDIV30CFGR_FINDIV30EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV31CFGR register */
#define RCC_FINDIV31CFGR_FINDIV31_Pos                 0
#define RCC_FINDIV31CFGR_FINDIV31_Msk                 (0x3f << 0)
#define RCC_FINDIV31CFGR_FINDIV31                     (0x3f << 0)
#define RCC_FINDIV31CFGR_FINDIV31EN_Pos               6
#define RCC_FINDIV31CFGR_FINDIV31EN_Msk               (0x1 << 6)
#define RCC_FINDIV31CFGR_FINDIV31EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV32CFGR register */
#define RCC_FINDIV32CFGR_FINDIV32_Pos                 0
#define RCC_FINDIV32CFGR_FINDIV32_Msk                 (0x3f << 0)
#define RCC_FINDIV32CFGR_FINDIV32                     (0x3f << 0)
#define RCC_FINDIV32CFGR_FINDIV32EN_Pos               6
#define RCC_FINDIV32CFGR_FINDIV32EN_Msk               (0x1 << 6)
#define RCC_FINDIV32CFGR_FINDIV32EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV33CFGR register */
#define RCC_FINDIV33CFGR_FINDIV33_Pos                 0
#define RCC_FINDIV33CFGR_FINDIV33_Msk                 (0x3f << 0)
#define RCC_FINDIV33CFGR_FINDIV33                     (0x3f << 0)
#define RCC_FINDIV33CFGR_FINDIV33EN_Pos               6
#define RCC_FINDIV33CFGR_FINDIV33EN_Msk               (0x1 << 6)
#define RCC_FINDIV33CFGR_FINDIV33EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV34CFGR register */
#define RCC_FINDIV34CFGR_FINDIV34_Pos                 0
#define RCC_FINDIV34CFGR_FINDIV34_Msk                 (0x3f << 0)
#define RCC_FINDIV34CFGR_FINDIV34                     (0x3f << 0)
#define RCC_FINDIV34CFGR_FINDIV34EN_Pos               6
#define RCC_FINDIV34CFGR_FINDIV34EN_Msk               (0x1 << 6)
#define RCC_FINDIV34CFGR_FINDIV34EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV35CFGR register */
#define RCC_FINDIV35CFGR_FINDIV35_Pos                 0
#define RCC_FINDIV35CFGR_FINDIV35_Msk                 (0x3f << 0)
#define RCC_FINDIV35CFGR_FINDIV35                     (0x3f << 0)
#define RCC_FINDIV35CFGR_FINDIV35EN_Pos               6
#define RCC_FINDIV35CFGR_FINDIV35EN_Msk               (0x1 << 6)
#define RCC_FINDIV35CFGR_FINDIV35EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV36CFGR register */
#define RCC_FINDIV36CFGR_FINDIV36_Pos                 0
#define RCC_FINDIV36CFGR_FINDIV36_Msk                 (0x3f << 0)
#define RCC_FINDIV36CFGR_FINDIV36                     (0x3f << 0)
#define RCC_FINDIV36CFGR_FINDIV36EN_Pos               6
#define RCC_FINDIV36CFGR_FINDIV36EN_Msk               (0x1 << 6)
#define RCC_FINDIV36CFGR_FINDIV36EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV37CFGR register */
#define RCC_FINDIV37CFGR_FINDIV37_Pos                 0
#define RCC_FINDIV37CFGR_FINDIV37_Msk                 (0x3f << 0)
#define RCC_FINDIV37CFGR_FINDIV37                     (0x3f << 0)
#define RCC_FINDIV37CFGR_FINDIV37EN_Pos               6
#define RCC_FINDIV37CFGR_FINDIV37EN_Msk               (0x1 << 6)
#define RCC_FINDIV37CFGR_FINDIV37EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV38CFGR register */
#define RCC_FINDIV38CFGR_FINDIV38_Pos                 0
#define RCC_FINDIV38CFGR_FINDIV38_Msk                 (0x3f << 0)
#define RCC_FINDIV38CFGR_FINDIV38                     (0x3f << 0)
#define RCC_FINDIV38CFGR_FINDIV38EN_Pos               6
#define RCC_FINDIV38CFGR_FINDIV38EN_Msk               (0x1 << 6)
#define RCC_FINDIV38CFGR_FINDIV38EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV39CFGR register */
#define RCC_FINDIV39CFGR_FINDIV39_Pos                 0
#define RCC_FINDIV39CFGR_FINDIV39_Msk                 (0x3f << 0)
#define RCC_FINDIV39CFGR_FINDIV39                     (0x3f << 0)
#define RCC_FINDIV39CFGR_FINDIV39EN_Pos               6
#define RCC_FINDIV39CFGR_FINDIV39EN_Msk               (0x1 << 6)
#define RCC_FINDIV39CFGR_FINDIV39EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV40CFGR register */
#define RCC_FINDIV40CFGR_FINDIV40_Pos                 0
#define RCC_FINDIV40CFGR_FINDIV40_Msk                 (0x3f << 0)
#define RCC_FINDIV40CFGR_FINDIV40                     (0x3f << 0)
#define RCC_FINDIV40CFGR_FINDIV40EN_Pos               6
#define RCC_FINDIV40CFGR_FINDIV40EN_Msk               (0x1 << 6)
#define RCC_FINDIV40CFGR_FINDIV40EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV41CFGR register */
#define RCC_FINDIV41CFGR_FINDIV41_Pos                 0
#define RCC_FINDIV41CFGR_FINDIV41_Msk                 (0x3f << 0)
#define RCC_FINDIV41CFGR_FINDIV41                     (0x3f << 0)
#define RCC_FINDIV41CFGR_FINDIV41EN_Pos               6
#define RCC_FINDIV41CFGR_FINDIV41EN_Msk               (0x1 << 6)
#define RCC_FINDIV41CFGR_FINDIV41EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV42CFGR register */
#define RCC_FINDIV42CFGR_FINDIV42_Pos                 0
#define RCC_FINDIV42CFGR_FINDIV42_Msk                 (0x3f << 0)
#define RCC_FINDIV42CFGR_FINDIV42                     (0x3f << 0)
#define RCC_FINDIV42CFGR_FINDIV42EN_Pos               6
#define RCC_FINDIV42CFGR_FINDIV42EN_Msk               (0x1 << 6)
#define RCC_FINDIV42CFGR_FINDIV42EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV43CFGR register */
#define RCC_FINDIV43CFGR_FINDIV43_Pos                 0
#define RCC_FINDIV43CFGR_FINDIV43_Msk                 (0x3f << 0)
#define RCC_FINDIV43CFGR_FINDIV43                     (0x3f << 0)
#define RCC_FINDIV43CFGR_FINDIV43EN_Pos               6
#define RCC_FINDIV43CFGR_FINDIV43EN_Msk               (0x1 << 6)
#define RCC_FINDIV43CFGR_FINDIV43EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV44CFGR register */
#define RCC_FINDIV44CFGR_FINDIV44_Pos                 0
#define RCC_FINDIV44CFGR_FINDIV44_Msk                 (0x3f << 0)
#define RCC_FINDIV44CFGR_FINDIV44                     (0x3f << 0)
#define RCC_FINDIV44CFGR_FINDIV44EN_Pos               6
#define RCC_FINDIV44CFGR_FINDIV44EN_Msk               (0x1 << 6)
#define RCC_FINDIV44CFGR_FINDIV44EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV45CFGR register */
#define RCC_FINDIV45CFGR_FINDIV45_Pos                 0
#define RCC_FINDIV45CFGR_FINDIV45_Msk                 (0x3f << 0)
#define RCC_FINDIV45CFGR_FINDIV45                     (0x3f << 0)
#define RCC_FINDIV45CFGR_FINDIV45EN_Pos               6
#define RCC_FINDIV45CFGR_FINDIV45EN_Msk               (0x1 << 6)
#define RCC_FINDIV45CFGR_FINDIV45EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV46CFGR register */
#define RCC_FINDIV46CFGR_FINDIV46_Pos                 0
#define RCC_FINDIV46CFGR_FINDIV46_Msk                 (0x3f << 0)
#define RCC_FINDIV46CFGR_FINDIV46                     (0x3f << 0)
#define RCC_FINDIV46CFGR_FINDIV46EN_Pos               6
#define RCC_FINDIV46CFGR_FINDIV46EN_Msk               (0x1 << 6)
#define RCC_FINDIV46CFGR_FINDIV46EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV47CFGR register */
#define RCC_FINDIV47CFGR_FINDIV47_Pos                 0
#define RCC_FINDIV47CFGR_FINDIV47_Msk                 (0x3f << 0)
#define RCC_FINDIV47CFGR_FINDIV47                     (0x3f << 0)
#define RCC_FINDIV47CFGR_FINDIV47EN_Pos               6
#define RCC_FINDIV47CFGR_FINDIV47EN_Msk               (0x1 << 6)
#define RCC_FINDIV47CFGR_FINDIV47EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV48CFGR register */
#define RCC_FINDIV48CFGR_FINDIV48_Pos                 0
#define RCC_FINDIV48CFGR_FINDIV48_Msk                 (0x3f << 0)
#define RCC_FINDIV48CFGR_FINDIV48                     (0x3f << 0)
#define RCC_FINDIV48CFGR_FINDIV48EN_Pos               6
#define RCC_FINDIV48CFGR_FINDIV48EN_Msk               (0x1 << 6)
#define RCC_FINDIV48CFGR_FINDIV48EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV49CFGR register */
#define RCC_FINDIV49CFGR_FINDIV49_Pos                 0
#define RCC_FINDIV49CFGR_FINDIV49_Msk                 (0x3f << 0)
#define RCC_FINDIV49CFGR_FINDIV49                     (0x3f << 0)
#define RCC_FINDIV49CFGR_FINDIV49EN_Pos               6
#define RCC_FINDIV49CFGR_FINDIV49EN_Msk               (0x1 << 6)
#define RCC_FINDIV49CFGR_FINDIV49EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV50CFGR register */
#define RCC_FINDIV50CFGR_FINDIV50_Pos                 0
#define RCC_FINDIV50CFGR_FINDIV50_Msk                 (0x3f << 0)
#define RCC_FINDIV50CFGR_FINDIV50                     (0x3f << 0)
#define RCC_FINDIV50CFGR_FINDIV50EN_Pos               6
#define RCC_FINDIV50CFGR_FINDIV50EN_Msk               (0x1 << 6)
#define RCC_FINDIV50CFGR_FINDIV50EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV51CFGR register */
#define RCC_FINDIV51CFGR_FINDIV51_Pos                 0
#define RCC_FINDIV51CFGR_FINDIV51_Msk                 (0x3f << 0)
#define RCC_FINDIV51CFGR_FINDIV51                     (0x3f << 0)
#define RCC_FINDIV51CFGR_FINDIV51EN_Pos               6
#define RCC_FINDIV51CFGR_FINDIV51EN_Msk               (0x1 << 6)
#define RCC_FINDIV51CFGR_FINDIV51EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV52CFGR register */
#define RCC_FINDIV52CFGR_FINDIV52_Pos                 0
#define RCC_FINDIV52CFGR_FINDIV52_Msk                 (0x3f << 0)
#define RCC_FINDIV52CFGR_FINDIV52                     (0x3f << 0)
#define RCC_FINDIV52CFGR_FINDIV52EN_Pos               6
#define RCC_FINDIV52CFGR_FINDIV52EN_Msk               (0x1 << 6)
#define RCC_FINDIV52CFGR_FINDIV52EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV53CFGR register */
#define RCC_FINDIV53CFGR_FINDIV53_Pos                 0
#define RCC_FINDIV53CFGR_FINDIV53_Msk                 (0x3f << 0)
#define RCC_FINDIV53CFGR_FINDIV53                     (0x3f << 0)
#define RCC_FINDIV53CFGR_FINDIV53EN_Pos               6
#define RCC_FINDIV53CFGR_FINDIV53EN_Msk               (0x1 << 6)
#define RCC_FINDIV53CFGR_FINDIV53EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV54CFGR register */
#define RCC_FINDIV54CFGR_FINDIV54_Pos                 0
#define RCC_FINDIV54CFGR_FINDIV54_Msk                 (0x3f << 0)
#define RCC_FINDIV54CFGR_FINDIV54                     (0x3f << 0)
#define RCC_FINDIV54CFGR_FINDIV54EN_Pos               6
#define RCC_FINDIV54CFGR_FINDIV54EN_Msk               (0x1 << 6)
#define RCC_FINDIV54CFGR_FINDIV54EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV55CFGR register */
#define RCC_FINDIV55CFGR_FINDIV55_Pos                 0
#define RCC_FINDIV55CFGR_FINDIV55_Msk                 (0x3f << 0)
#define RCC_FINDIV55CFGR_FINDIV55                     (0x3f << 0)
#define RCC_FINDIV55CFGR_FINDIV55EN_Pos               6
#define RCC_FINDIV55CFGR_FINDIV55EN_Msk               (0x1 << 6)
#define RCC_FINDIV55CFGR_FINDIV55EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV56CFGR register */
#define RCC_FINDIV56CFGR_FINDIV56_Pos                 0
#define RCC_FINDIV56CFGR_FINDIV56_Msk                 (0x3f << 0)
#define RCC_FINDIV56CFGR_FINDIV56                     (0x3f << 0)
#define RCC_FINDIV56CFGR_FINDIV56EN_Pos               6
#define RCC_FINDIV56CFGR_FINDIV56EN_Msk               (0x1 << 6)
#define RCC_FINDIV56CFGR_FINDIV56EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV57CFGR register */
#define RCC_FINDIV57CFGR_FINDIV57_Pos                 0
#define RCC_FINDIV57CFGR_FINDIV57_Msk                 (0x3f << 0)
#define RCC_FINDIV57CFGR_FINDIV57                     (0x3f << 0)
#define RCC_FINDIV57CFGR_FINDIV57EN_Pos               6
#define RCC_FINDIV57CFGR_FINDIV57EN_Msk               (0x1 << 6)
#define RCC_FINDIV57CFGR_FINDIV57EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV58CFGR register */
#define RCC_FINDIV58CFGR_FINDIV58_Pos                 0
#define RCC_FINDIV58CFGR_FINDIV58_Msk                 (0x3f << 0)
#define RCC_FINDIV58CFGR_FINDIV58                     (0x3f << 0)
#define RCC_FINDIV58CFGR_FINDIV58EN_Pos               6
#define RCC_FINDIV58CFGR_FINDIV58EN_Msk               (0x1 << 6)
#define RCC_FINDIV58CFGR_FINDIV58EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV59CFGR register */
#define RCC_FINDIV59CFGR_FINDIV59_Pos                 0
#define RCC_FINDIV59CFGR_FINDIV59_Msk                 (0x3f << 0)
#define RCC_FINDIV59CFGR_FINDIV59                     (0x3f << 0)
#define RCC_FINDIV59CFGR_FINDIV59EN_Pos               6
#define RCC_FINDIV59CFGR_FINDIV59EN_Msk               (0x1 << 6)
#define RCC_FINDIV59CFGR_FINDIV59EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV60CFGR register */
#define RCC_FINDIV60CFGR_FINDIV60_Pos                 0
#define RCC_FINDIV60CFGR_FINDIV60_Msk                 (0x3f << 0)
#define RCC_FINDIV60CFGR_FINDIV60                     (0x3f << 0)
#define RCC_FINDIV60CFGR_FINDIV60EN_Pos               6
#define RCC_FINDIV60CFGR_FINDIV60EN_Msk               (0x1 << 6)
#define RCC_FINDIV60CFGR_FINDIV60EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV61CFGR register */
#define RCC_FINDIV61CFGR_FINDIV61_Pos                 0
#define RCC_FINDIV61CFGR_FINDIV61_Msk                 (0x3f << 0)
#define RCC_FINDIV61CFGR_FINDIV61                     (0x3f << 0)
#define RCC_FINDIV61CFGR_FINDIV61EN_Pos               6
#define RCC_FINDIV61CFGR_FINDIV61EN_Msk               (0x1 << 6)
#define RCC_FINDIV61CFGR_FINDIV61EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV62CFGR register */
#define RCC_FINDIV62CFGR_FINDIV62_Pos                 0
#define RCC_FINDIV62CFGR_FINDIV62_Msk                 (0x3f << 0)
#define RCC_FINDIV62CFGR_FINDIV62                     (0x3f << 0)
#define RCC_FINDIV62CFGR_FINDIV62EN_Pos               6
#define RCC_FINDIV62CFGR_FINDIV62EN_Msk               (0x1 << 6)
#define RCC_FINDIV62CFGR_FINDIV62EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIV63CFGR register */
#define RCC_FINDIV63CFGR_FINDIV63_Pos                 0
#define RCC_FINDIV63CFGR_FINDIV63_Msk                 (0x3f << 0)
#define RCC_FINDIV63CFGR_FINDIV63                     (0x3f << 0)
#define RCC_FINDIV63CFGR_FINDIV63EN_Pos               6
#define RCC_FINDIV63CFGR_FINDIV63EN_Msk               (0x1 << 6)
#define RCC_FINDIV63CFGR_FINDIV63EN                   (0x1 << 6)

/* Bit fields for RCC_FINDIVSR1 register */
#define RCC_FINDIVSR1_FINDIVSTS_Pos                   0
#define RCC_FINDIVSR1_FINDIVSTS_Msk                   (0xFFFFFFFF << 0)
#define RCC_FINDIVSR1_FINDIVSTS                       (0xFFFFFFFF << 0)

/* Bit fields for RCC_FINDIVSR2 register */
#define RCC_FINDIVSR2_FINDIVSTS_Pos                   0
#define RCC_FINDIVSR2_FINDIVSTS_Msk                   (0xFFFFFFFF << 0)
#define RCC_FINDIVSR2_FINDIVSTS                       (0xFFFFFFFF << 0)

/* Bit fields for RCC_JEREFOBS0CFGR register */
#define RCC_JEREFOBS0CFGR_CKINTSEL_Pos                0
#define RCC_JEREFOBS0CFGR_CKINTSEL_Msk                (0xff << 0)
#define RCC_JEREFOBS0CFGR_CKINTSEL                    (0xff << 0)
#define RCC_JEREFOBS0CFGR_CKEXTSEL_Pos                8
#define RCC_JEREFOBS0CFGR_CKEXTSEL_Msk                (0x7 << 8)
#define RCC_JEREFOBS0CFGR_CKEXTSEL                    (0x7 << 8)
#define RCC_JEREFOBS0CFGR_CKJEREFEXTSEL_Pos           15
#define RCC_JEREFOBS0CFGR_CKJEREFEXTSEL_Msk           (0x1 << 15)
#define RCC_JEREFOBS0CFGR_CKJEREFEXTSEL               (0x1 << 15)
#define RCC_JEREFOBS0CFGR_CKOBSEXTSEL_Pos             16
#define RCC_JEREFOBS0CFGR_CKOBSEXTSEL_Msk             (0x1 << 16)
#define RCC_JEREFOBS0CFGR_CKOBSEXTSEL                 (0x1 << 16)
#define RCC_JEREFOBS0CFGR_CKJEREFINV_Pos              17
#define RCC_JEREFOBS0CFGR_CKJEREFINV_Msk              (0x1 << 17)
#define RCC_JEREFOBS0CFGR_CKJEREFINV                  (0x1 << 17)
#define RCC_JEREFOBS0CFGR_CKOBSINV_Pos                18
#define RCC_JEREFOBS0CFGR_CKOBSINV_Msk                (0x1 << 18)
#define RCC_JEREFOBS0CFGR_CKOBSINV                    (0x1 << 18)
#define RCC_JEREFOBS0CFGR_CKJEREFDIV_Pos              19
#define RCC_JEREFOBS0CFGR_CKJEREFDIV_Msk              (0x7 << 19)
#define RCC_JEREFOBS0CFGR_CKJEREFDIV                  (0x7 << 19)
#define RCC_JEREFOBS0CFGR_CKOBSDIV_Pos                22
#define RCC_JEREFOBS0CFGR_CKOBSDIV_Msk                (0x7 << 22)
#define RCC_JEREFOBS0CFGR_CKOBSDIV                    (0x7 << 22)
#define RCC_JEREFOBS0CFGR_CKJEREFEN_Pos               25
#define RCC_JEREFOBS0CFGR_CKJEREFEN_Msk               (0x1 << 25)
#define RCC_JEREFOBS0CFGR_CKJEREFEN                   (0x1 << 25)
#define RCC_JEREFOBS0CFGR_CKOBSEN_Pos                 26
#define RCC_JEREFOBS0CFGR_CKOBSEN_Msk                 (0x1 << 26)
#define RCC_JEREFOBS0CFGR_CKOBSEN                     (0x1 << 26)
#define RCC_JEREFOBS0CFGR_CKOUTSEL_Pos                27
#define RCC_JEREFOBS0CFGR_CKOUTSEL_Msk                (0x7 << 27)
#define RCC_JEREFOBS0CFGR_CKOUTSEL                    (0x7 << 27)

/* Bit fields for RCC_JEREFOBS1CFGR register */
#define RCC_JEREFOBS1CFGR_CKINTSEL_Pos                0
#define RCC_JEREFOBS1CFGR_CKINTSEL_Msk                (0xff << 0)
#define RCC_JEREFOBS1CFGR_CKINTSEL                    (0xff << 0)
#define RCC_JEREFOBS1CFGR_CKEXTSEL_Pos                8
#define RCC_JEREFOBS1CFGR_CKEXTSEL_Msk                (0x7 << 8)
#define RCC_JEREFOBS1CFGR_CKEXTSEL                    (0x7 << 8)
#define RCC_JEREFOBS1CFGR_CKJEREFEXTSEL_Pos           15
#define RCC_JEREFOBS1CFGR_CKJEREFEXTSEL_Msk           (0x1 << 15)
#define RCC_JEREFOBS1CFGR_CKJEREFEXTSEL               (0x1 << 15)
#define RCC_JEREFOBS1CFGR_CKOBSEXTSEL_Pos             16
#define RCC_JEREFOBS1CFGR_CKOBSEXTSEL_Msk             (0x1 << 16)
#define RCC_JEREFOBS1CFGR_CKOBSEXTSEL                 (0x1 << 16)
#define RCC_JEREFOBS1CFGR_CKJEOBSINV_Pos              17
#define RCC_JEREFOBS1CFGR_CKJEOBSINV_Msk              (0x1 << 17)
#define RCC_JEREFOBS1CFGR_CKJEOBSINV                  (0x1 << 17)
#define RCC_JEREFOBS1CFGR_CKOBSINV_Pos                18
#define RCC_JEREFOBS1CFGR_CKOBSINV_Msk                (0x1 << 18)
#define RCC_JEREFOBS1CFGR_CKOBSINV                    (0x1 << 18)
#define RCC_JEREFOBS1CFGR_CKJEOBSDIV_Pos              19
#define RCC_JEREFOBS1CFGR_CKJEOBSDIV_Msk              (0x7 << 19)
#define RCC_JEREFOBS1CFGR_CKJEOBSDIV                  (0x7 << 19)
#define RCC_JEREFOBS1CFGR_CKOBSDIV_Pos                22
#define RCC_JEREFOBS1CFGR_CKOBSDIV_Msk                (0x7 << 22)
#define RCC_JEREFOBS1CFGR_CKOBSDIV                    (0x7 << 22)
#define RCC_JEREFOBS1CFGR_CKJEOBSEN_Pos               25
#define RCC_JEREFOBS1CFGR_CKJEOBSEN_Msk               (0x1 << 25)
#define RCC_JEREFOBS1CFGR_CKJEOBSEN                   (0x1 << 25)
#define RCC_JEREFOBS1CFGR_CKOBSEN_Pos                 26
#define RCC_JEREFOBS1CFGR_CKOBSEN_Msk                 (0x1 << 26)
#define RCC_JEREFOBS1CFGR_CKOBSEN                     (0x1 << 26)
#define RCC_JEREFOBS1CFGR_JERSTN_Pos                  27
#define RCC_JEREFOBS1CFGR_JERSTN_Msk                  (0x1 << 27)
#define RCC_JEREFOBS1CFGR_JERSTN                      (0x1 << 27)

/* Bit fields for RCC_JELOCKCFGR register */
#define RCC_JELOCKCFGR_PLLREFCKSEL_Pos                0
#define RCC_JELOCKCFGR_PLLREFCKSEL_Msk                (0x7 << 0)
#define RCC_JELOCKCFGR_PLLREFCKSEL                    (0x7 << 0)
#define RCC_JELOCKCFGR_JELOCKSEL_Pos                  8
#define RCC_JELOCKCFGR_JELOCKSEL_Msk                  (0x7 << 8)
#define RCC_JELOCKCFGR_JELOCKSEL                      (0x7 << 8)
#define RCC_JELOCKCFGR_JELOCKANDSEL_Pos               12
#define RCC_JELOCKCFGR_JELOCKANDSEL_Msk               (0x1 << 12)
#define RCC_JELOCKCFGR_JELOCKANDSEL                   (0x1 << 12)
#define RCC_JELOCKCFGR_JELOCKORSEL_Pos                13
#define RCC_JELOCKCFGR_JELOCKORSEL_Msk                (0x1 << 13)
#define RCC_JELOCKCFGR_JELOCKORSEL                    (0x1 << 13)
#define RCC_JELOCKCFGR_PLLLOCKEN_Pos                  16
#define RCC_JELOCKCFGR_PLLLOCKEN_Msk                  (0x1f << 16)
#define RCC_JELOCKCFGR_PLLLOCKEN                      (0x1f << 16)

/* Bit fields for RCC_JECR1 register */
#define RCC_JECR1_BISTRUN_Pos                         0
#define RCC_JECR1_BISTRUN_Msk                         (0x1 << 0)
#define RCC_JECR1_BISTRUN                             (0x1 << 0)

/* Bit fields for RCC_JECR2 register */
#define RCC_JECR2_EDGEMODE_Pos                        0
#define RCC_JECR2_EDGEMODE_Msk                        (0x1 << 0)
#define RCC_JECR2_EDGEMODE                            (0x1 << 0)
#define RCC_JECR2_MODE_Pos                            3
#define RCC_JECR2_MODE_Msk                            (0x3 << 3)
#define RCC_JECR2_MODE                                (0x3 << 3)
#define RCC_JECR2_STOPVAL_Pos                         11
#define RCC_JECR2_STOPVAL_Msk                         (0xf << 11)
#define RCC_JECR2_STOPVAL                             (0xf << 11)
#define RCC_JECR2_SELOUT_Pos                          17
#define RCC_JECR2_SELOUT_Msk                          (0x1f << 17)
#define RCC_JECR2_SELOUT                              (0x1f << 17)

/* Bit fields for RCC_JESR1 register */
#define RCC_JESR1_MEAS_Pos                            0
#define RCC_JESR1_MEAS_Msk                            (0x1ffff << 0)
#define RCC_JESR1_MEAS                                (0x1ffff << 0)
#define RCC_JESR1_STS_Pos                             19
#define RCC_JESR1_STS_Msk                             (0x1 << 19)
#define RCC_JESR1_STS                                 (0x1 << 19)

/* Bit fields for RCC_PLL4CFGR1 register */
#define RCC_PLL4CFGR1_SSMODRST_Pos                    0
#define RCC_PLL4CFGR1_SSMODRST_Msk                    (0x1 << 0)
#define RCC_PLL4CFGR1_SSMODRST                        (0x1 << 0)
#define RCC_PLL4CFGR1_PLLEN_Pos                       8
#define RCC_PLL4CFGR1_PLLEN_Msk                       (0x1 << 8)
#define RCC_PLL4CFGR1_PLLEN                           (0x1 << 8)
#define RCC_PLL4CFGR1_PLLRDY_Pos                      24
#define RCC_PLL4CFGR1_PLLRDY_Msk                      (0x1 << 24)
#define RCC_PLL4CFGR1_PLLRDY                          (0x1 << 24)
#define RCC_PLL4CFGR1_CKREFST_Pos                     28
#define RCC_PLL4CFGR1_CKREFST_Msk                     (0x1 << 28)
#define RCC_PLL4CFGR1_CKREFST                         (0x1 << 28)

/* Bit fields for RCC_PLL4CFGR2 register */
#define RCC_PLL4CFGR2_FREFDIV_Pos                     0
#define RCC_PLL4CFGR2_FREFDIV_Msk                     (0x3f << 0)
#define RCC_PLL4CFGR2_FREFDIV                         (0x3f << 0)
#define RCC_PLL4CFGR2_FBDIV_Pos                       16
#define RCC_PLL4CFGR2_FBDIV_Msk                       (0xfff << 16)
#define RCC_PLL4CFGR2_FBDIV                           (0xfff << 16)

/* Bit fields for RCC_PLL4CFGR3 register */
#define RCC_PLL4CFGR3_FRACIN_Pos                      0
#define RCC_PLL4CFGR3_FRACIN_Msk                      (0xffffff << 0)
#define RCC_PLL4CFGR3_FRACIN                          (0xffffff << 0)
#define RCC_PLL4CFGR3_DOWNSPREAD_Pos                  24
#define RCC_PLL4CFGR3_DOWNSPREAD_Msk                  (0x1 << 24)
#define RCC_PLL4CFGR3_DOWNSPREAD                      (0x1 << 24)
#define RCC_PLL4CFGR3_DACEN_Pos                       25
#define RCC_PLL4CFGR3_DACEN_Msk                       (0x1 << 25)
#define RCC_PLL4CFGR3_DACEN                           (0x1 << 25)
#define RCC_PLL4CFGR3_SSCGDIS_Pos                     26
#define RCC_PLL4CFGR3_SSCGDIS_Msk                     (0x1 << 26)
#define RCC_PLL4CFGR3_SSCGDIS                         (0x1 << 26)

/* Bit fields for RCC_PLL4CFGR4 register */
#define RCC_PLL4CFGR4_DSMEN_Pos                       8
#define RCC_PLL4CFGR4_DSMEN_Msk                       (0x1 << 8)
#define RCC_PLL4CFGR4_DSMEN                           (0x1 << 8)
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN_Pos               9
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN_Msk               (0x1 << 9)
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN                   (0x1 << 9)
#define RCC_PLL4CFGR4_BYPASS_Pos                      10
#define RCC_PLL4CFGR4_BYPASS_Msk                      (0x1 << 10)
#define RCC_PLL4CFGR4_BYPASS                          (0x1 << 10)

/* Bit fields for RCC_PLL4CFGR5 register */
#define RCC_PLL4CFGR5_DIVVAL_Pos                      0
#define RCC_PLL4CFGR5_DIVVAL_Msk                      (0xf << 0)
#define RCC_PLL4CFGR5_DIVVAL                          (0xf << 0)
#define RCC_PLL4CFGR5_SPREAD_Pos                      16
#define RCC_PLL4CFGR5_SPREAD_Msk                      (0x1f << 16)
#define RCC_PLL4CFGR5_SPREAD                          (0x1f << 16)

/* Bit fields for RCC_PLL4CFGR6 register */
#define RCC_PLL4CFGR6_POSTDIV1_Pos                    0
#define RCC_PLL4CFGR6_POSTDIV1_Msk                    (0x7 << 0)
#define RCC_PLL4CFGR6_POSTDIV1                        (0x7 << 0)

/* Bit fields for RCC_PLL4CFGR7 register */
#define RCC_PLL4CFGR7_POSTDIV2_Pos                    0
#define RCC_PLL4CFGR7_POSTDIV2_Msk                    (0x7 << 0)
#define RCC_PLL4CFGR7_POSTDIV2                        (0x7 << 0)

/* Bit fields for RCC_PLL5CFGR1 register */
#define RCC_PLL5CFGR1_SSMODRST_Pos                    0
#define RCC_PLL5CFGR1_SSMODRST_Msk                    (0x1 << 0)
#define RCC_PLL5CFGR1_SSMODRST                        (0x1 << 0)
#define RCC_PLL5CFGR1_PLLEN_Pos                       8
#define RCC_PLL5CFGR1_PLLEN_Msk                       (0x1 << 8)
#define RCC_PLL5CFGR1_PLLEN                           (0x1 << 8)
#define RCC_PLL5CFGR1_PLLRDY_Pos                      24
#define RCC_PLL5CFGR1_PLLRDY_Msk                      (0x1 << 24)
#define RCC_PLL5CFGR1_PLLRDY                          (0x1 << 24)
#define RCC_PLL5CFGR1_CKREFST_Pos                     28
#define RCC_PLL5CFGR1_CKREFST_Msk                     (0x1 << 28)
#define RCC_PLL5CFGR1_CKREFST                         (0x1 << 28)

/* Bit fields for RCC_PLL5CFGR2 register */
#define RCC_PLL5CFGR2_FREFDIV_Pos                     0
#define RCC_PLL5CFGR2_FREFDIV_Msk                     (0x3f << 0)
#define RCC_PLL5CFGR2_FREFDIV                         (0x3f << 0)
#define RCC_PLL5CFGR2_FBDIV_Pos                       16
#define RCC_PLL5CFGR2_FBDIV_Msk                       (0xfff << 16)
#define RCC_PLL5CFGR2_FBDIV                           (0xfff << 16)

/* Bit fields for RCC_PLL5CFGR3 register */
#define RCC_PLL5CFGR3_FRACIN_Pos                      0
#define RCC_PLL5CFGR3_FRACIN_Msk                      (0xffffff << 0)
#define RCC_PLL5CFGR3_FRACIN                          (0xffffff << 0)
#define RCC_PLL5CFGR3_DOWNSPREAD_Pos                  24
#define RCC_PLL5CFGR3_DOWNSPREAD_Msk                  (0x1 << 24)
#define RCC_PLL5CFGR3_DOWNSPREAD                      (0x1 << 24)
#define RCC_PLL5CFGR3_DACEN_Pos                       25
#define RCC_PLL5CFGR3_DACEN_Msk                       (0x1 << 25)
#define RCC_PLL5CFGR3_DACEN                           (0x1 << 25)
#define RCC_PLL5CFGR3_SSCGDIS_Pos                     26
#define RCC_PLL5CFGR3_SSCGDIS_Msk                     (0x1 << 26)
#define RCC_PLL5CFGR3_SSCGDIS                         (0x1 << 26)

/* Bit fields for RCC_PLL5CFGR4 register */
#define RCC_PLL5CFGR4_DSMEN_Pos                       8
#define RCC_PLL5CFGR4_DSMEN_Msk                       (0x1 << 8)
#define RCC_PLL5CFGR4_DSMEN                           (0x1 << 8)
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN_Pos               9
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN_Msk               (0x1 << 9)
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN                   (0x1 << 9)
#define RCC_PLL5CFGR4_BYPASS_Pos                      10
#define RCC_PLL5CFGR4_BYPASS_Msk                      (0x1 << 10)
#define RCC_PLL5CFGR4_BYPASS                          (0x1 << 10)

/* Bit fields for RCC_PLL5CFGR5 register */
#define RCC_PLL5CFGR5_DIVVAL_Pos                      0
#define RCC_PLL5CFGR5_DIVVAL_Msk                      (0xf << 0)
#define RCC_PLL5CFGR5_DIVVAL                          (0xf << 0)
#define RCC_PLL5CFGR5_SPREAD_Pos                      16
#define RCC_PLL5CFGR5_SPREAD_Msk                      (0x1f << 16)
#define RCC_PLL5CFGR5_SPREAD                          (0x1f << 16)

/* Bit fields for RCC_PLL5CFGR6 register */
#define RCC_PLL5CFGR6_POSTDIV1_Pos                    0
#define RCC_PLL5CFGR6_POSTDIV1_Msk                    (0x7 << 0)
#define RCC_PLL5CFGR6_POSTDIV1                        (0x7 << 0)

/* Bit fields for RCC_PLL5CFGR7 register */
#define RCC_PLL5CFGR7_POSTDIV2_Pos                    0
#define RCC_PLL5CFGR7_POSTDIV2_Msk                    (0x7 << 0)
#define RCC_PLL5CFGR7_POSTDIV2                        (0x7 << 0)

/* Bit fields for RCC_PLL6CFGR1 register */
#define RCC_PLL6CFGR1_SSMODRST_Pos                    0
#define RCC_PLL6CFGR1_SSMODRST_Msk                    (0x1 << 0)
#define RCC_PLL6CFGR1_SSMODRST                        (0x1 << 0)
#define RCC_PLL6CFGR1_PLLEN_Pos                       8
#define RCC_PLL6CFGR1_PLLEN_Msk                       (0x1 << 8)
#define RCC_PLL6CFGR1_PLLEN                           (0x1 << 8)
#define RCC_PLL6CFGR1_PLLRDY_Pos                      24
#define RCC_PLL6CFGR1_PLLRDY_Msk                      (0x1 << 24)
#define RCC_PLL6CFGR1_PLLRDY                          (0x1 << 24)
#define RCC_PLL6CFGR1_CKREFST_Pos                     28
#define RCC_PLL6CFGR1_CKREFST_Msk                     (0x1 << 28)
#define RCC_PLL6CFGR1_CKREFST                         (0x1 << 28)

/* Bit fields for RCC_PLL6CFGR2 register */
#define RCC_PLL6CFGR2_FREFDIV_Pos                     0
#define RCC_PLL6CFGR2_FREFDIV_Msk                     (0x3f << 0)
#define RCC_PLL6CFGR2_FREFDIV                         (0x3f << 0)
#define RCC_PLL6CFGR2_FBDIV_Pos                       16
#define RCC_PLL6CFGR2_FBDIV_Msk                       (0xfff << 16)
#define RCC_PLL6CFGR2_FBDIV                           (0xfff << 16)

/* Bit fields for RCC_PLL6CFGR3 register */
#define RCC_PLL6CFGR3_FRACIN_Pos                      0
#define RCC_PLL6CFGR3_FRACIN_Msk                      (0xffffff << 0)
#define RCC_PLL6CFGR3_FRACIN                          (0xffffff << 0)
#define RCC_PLL6CFGR3_DOWNSPREAD_Pos                  24
#define RCC_PLL6CFGR3_DOWNSPREAD_Msk                  (0x1 << 24)
#define RCC_PLL6CFGR3_DOWNSPREAD                      (0x1 << 24)
#define RCC_PLL6CFGR3_DACEN_Pos                       25
#define RCC_PLL6CFGR3_DACEN_Msk                       (0x1 << 25)
#define RCC_PLL6CFGR3_DACEN                           (0x1 << 25)
#define RCC_PLL6CFGR3_SSCGDIS_Pos                     26
#define RCC_PLL6CFGR3_SSCGDIS_Msk                     (0x1 << 26)
#define RCC_PLL6CFGR3_SSCGDIS                         (0x1 << 26)

/* Bit fields for RCC_PLL6CFGR4 register */
#define RCC_PLL6CFGR4_DSMEN_Pos                       8
#define RCC_PLL6CFGR4_DSMEN_Msk                       (0x1 << 8)
#define RCC_PLL6CFGR4_DSMEN                           (0x1 << 8)
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN_Pos               9
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN_Msk               (0x1 << 9)
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN                   (0x1 << 9)
#define RCC_PLL6CFGR4_BYPASS_Pos                      10
#define RCC_PLL6CFGR4_BYPASS_Msk                      (0x1 << 10)
#define RCC_PLL6CFGR4_BYPASS                          (0x1 << 10)

/* Bit fields for RCC_PLL6CFGR5 register */
#define RCC_PLL6CFGR5_DIVVAL_Pos                      0
#define RCC_PLL6CFGR5_DIVVAL_Msk                      (0xf << 0)
#define RCC_PLL6CFGR5_DIVVAL                          (0xf << 0)
#define RCC_PLL6CFGR5_SPREAD_Pos                      16
#define RCC_PLL6CFGR5_SPREAD_Msk                      (0x1f << 16)
#define RCC_PLL6CFGR5_SPREAD                          (0x1f << 16)

/* Bit fields for RCC_PLL6CFGR6 register */
#define RCC_PLL6CFGR6_POSTDIV1_Pos                    0
#define RCC_PLL6CFGR6_POSTDIV1_Msk                    (0x7 << 0)
#define RCC_PLL6CFGR6_POSTDIV1                        (0x7 << 0)

/* Bit fields for RCC_PLL6CFGR7 register */
#define RCC_PLL6CFGR7_POSTDIV2_Pos                    0
#define RCC_PLL6CFGR7_POSTDIV2_Msk                    (0x7 << 0)
#define RCC_PLL6CFGR7_POSTDIV2                        (0x7 << 0)

/* Bit fields for RCC_PLL7CFGR1 register */
#define RCC_PLL7CFGR1_SSMODRST_Pos                    0
#define RCC_PLL7CFGR1_SSMODRST_Msk                    (0x1 << 0)
#define RCC_PLL7CFGR1_SSMODRST                        (0x1 << 0)
#define RCC_PLL7CFGR1_PLLEN_Pos                       8
#define RCC_PLL7CFGR1_PLLEN_Msk                       (0x1 << 8)
#define RCC_PLL7CFGR1_PLLEN                           (0x1 << 8)
#define RCC_PLL7CFGR1_PLLRDY_Pos                      24
#define RCC_PLL7CFGR1_PLLRDY_Msk                      (0x1 << 24)
#define RCC_PLL7CFGR1_PLLRDY                          (0x1 << 24)
#define RCC_PLL7CFGR1_CKREFST_Pos                     28
#define RCC_PLL7CFGR1_CKREFST_Msk                     (0x1 << 28)
#define RCC_PLL7CFGR1_CKREFST                         (0x1 << 28)

/* Bit fields for RCC_PLL7CFGR2 register */
#define RCC_PLL7CFGR2_FREFDIV_Pos                     0
#define RCC_PLL7CFGR2_FREFDIV_Msk                     (0x3f << 0)
#define RCC_PLL7CFGR2_FREFDIV                         (0x3f << 0)
#define RCC_PLL7CFGR2_FBDIV_Pos                       16
#define RCC_PLL7CFGR2_FBDIV_Msk                       (0xfff << 16)
#define RCC_PLL7CFGR2_FBDIV                           (0xfff << 16)

/* Bit fields for RCC_PLL7CFGR3 register */
#define RCC_PLL7CFGR3_FRACIN_Pos                      0
#define RCC_PLL7CFGR3_FRACIN_Msk                      (0xffffff << 0)
#define RCC_PLL7CFGR3_FRACIN                          (0xffffff << 0)
#define RCC_PLL7CFGR3_DOWNSPREAD_Pos                  24
#define RCC_PLL7CFGR3_DOWNSPREAD_Msk                  (0x1 << 24)
#define RCC_PLL7CFGR3_DOWNSPREAD                      (0x1 << 24)
#define RCC_PLL7CFGR3_DACEN_Pos                       25
#define RCC_PLL7CFGR3_DACEN_Msk                       (0x1 << 25)
#define RCC_PLL7CFGR3_DACEN                           (0x1 << 25)
#define RCC_PLL7CFGR3_SSCGDIS_Pos                     26
#define RCC_PLL7CFGR3_SSCGDIS_Msk                     (0x1 << 26)
#define RCC_PLL7CFGR3_SSCGDIS                         (0x1 << 26)

/* Bit fields for RCC_PLL7CFGR4 register */
#define RCC_PLL7CFGR4_DSMEN_Pos                       8
#define RCC_PLL7CFGR4_DSMEN_Msk                       (0x1 << 8)
#define RCC_PLL7CFGR4_DSMEN                           (0x1 << 8)
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN_Pos               9
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN_Msk               (0x1 << 9)
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN                   (0x1 << 9)
#define RCC_PLL7CFGR4_BYPASS_Pos                      10
#define RCC_PLL7CFGR4_BYPASS_Msk                      (0x1 << 10)
#define RCC_PLL7CFGR4_BYPASS                          (0x1 << 10)

/* Bit fields for RCC_PLL7CFGR5 register */
#define RCC_PLL7CFGR5_DIVVAL_Pos                      0
#define RCC_PLL7CFGR5_DIVVAL_Msk                      (0xf << 0)
#define RCC_PLL7CFGR5_DIVVAL                          (0xf << 0)
#define RCC_PLL7CFGR5_SPREAD_Pos                      16
#define RCC_PLL7CFGR5_SPREAD_Msk                      (0x1f << 16)
#define RCC_PLL7CFGR5_SPREAD                          (0x1f << 16)

/* Bit fields for RCC_PLL7CFGR6 register */
#define RCC_PLL7CFGR6_POSTDIV1_Pos                    0
#define RCC_PLL7CFGR6_POSTDIV1_Msk                    (0x7 << 0)
#define RCC_PLL7CFGR6_POSTDIV1                        (0x7 << 0)

/* Bit fields for RCC_PLL7CFGR7 register */
#define RCC_PLL7CFGR7_POSTDIV2_Pos                    0
#define RCC_PLL7CFGR7_POSTDIV2_Msk                    (0x7 << 0)
#define RCC_PLL7CFGR7_POSTDIV2                        (0x7 << 0)

/* Bit fields for RCC_PLL8CFGR1 register */
#define RCC_PLL8CFGR1_SSMODRST_Pos                    0
#define RCC_PLL8CFGR1_SSMODRST_Msk                    (0x1 << 0)
#define RCC_PLL8CFGR1_SSMODRST                        (0x1 << 0)
#define RCC_PLL8CFGR1_PLLEN_Pos                       8
#define RCC_PLL8CFGR1_PLLEN_Msk                       (0x1 << 8)
#define RCC_PLL8CFGR1_PLLEN                           (0x1 << 8)
#define RCC_PLL8CFGR1_PLLRDY_Pos                      24
#define RCC_PLL8CFGR1_PLLRDY_Msk                      (0x1 << 24)
#define RCC_PLL8CFGR1_PLLRDY                          (0x1 << 24)
#define RCC_PLL8CFGR1_CKREFST_Pos                     28
#define RCC_PLL8CFGR1_CKREFST_Msk                     (0x1 << 28)
#define RCC_PLL8CFGR1_CKREFST                         (0x1 << 28)

/* Bit fields for RCC_PLL8CFGR2 register */
#define RCC_PLL8CFGR2_FREFDIV_Pos                     0
#define RCC_PLL8CFGR2_FREFDIV_Msk                     (0x3f << 0)
#define RCC_PLL8CFGR2_FREFDIV                         (0x3f << 0)
#define RCC_PLL8CFGR2_FBDIV_Pos                       16
#define RCC_PLL8CFGR2_FBDIV_Msk                       (0xfff << 16)
#define RCC_PLL8CFGR2_FBDIV                           (0xfff << 16)

/* Bit fields for RCC_PLL8CFGR3 register */
#define RCC_PLL8CFGR3_FRACIN_Pos                      0
#define RCC_PLL8CFGR3_FRACIN_Msk                      (0xffffff << 0)
#define RCC_PLL8CFGR3_FRACIN                          (0xffffff << 0)
#define RCC_PLL8CFGR3_DOWNSPREAD_Pos                  24
#define RCC_PLL8CFGR3_DOWNSPREAD_Msk                  (0x1 << 24)
#define RCC_PLL8CFGR3_DOWNSPREAD                      (0x1 << 24)
#define RCC_PLL8CFGR3_DACEN_Pos                       25
#define RCC_PLL8CFGR3_DACEN_Msk                       (0x1 << 25)
#define RCC_PLL8CFGR3_DACEN                           (0x1 << 25)
#define RCC_PLL8CFGR3_SSCGDIS_Pos                     26
#define RCC_PLL8CFGR3_SSCGDIS_Msk                     (0x1 << 26)
#define RCC_PLL8CFGR3_SSCGDIS                         (0x1 << 26)

/* Bit fields for RCC_PLL8CFGR4 register */
#define RCC_PLL8CFGR4_DSMEN_Pos                       8
#define RCC_PLL8CFGR4_DSMEN_Msk                       (0x1 << 8)
#define RCC_PLL8CFGR4_DSMEN                           (0x1 << 8)
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN_Pos               9
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN_Msk               (0x1 << 9)
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN                   (0x1 << 9)
#define RCC_PLL8CFGR4_BYPASS_Pos                      10
#define RCC_PLL8CFGR4_BYPASS_Msk                      (0x1 << 10)
#define RCC_PLL8CFGR4_BYPASS                          (0x1 << 10)

/* Bit fields for RCC_PLL8CFGR5 register */
#define RCC_PLL8CFGR5_DIVVAL_Pos                      0
#define RCC_PLL8CFGR5_DIVVAL_Msk                      (0xf << 0)
#define RCC_PLL8CFGR5_DIVVAL                          (0xf << 0)
#define RCC_PLL8CFGR5_SPREAD_Pos                      16
#define RCC_PLL8CFGR5_SPREAD_Msk                      (0x1f << 16)
#define RCC_PLL8CFGR5_SPREAD                          (0x1f << 16)

/* Bit fields for RCC_PLL8CFGR6 register */
#define RCC_PLL8CFGR6_POSTDIV1_Pos                    0
#define RCC_PLL8CFGR6_POSTDIV1_Msk                    (0x7 << 0)
#define RCC_PLL8CFGR6_POSTDIV1                        (0x7 << 0)

/* Bit fields for RCC_PLL8CFGR7 register */
#define RCC_PLL8CFGR7_POSTDIV2_Pos                    0
#define RCC_PLL8CFGR7_POSTDIV2_Msk                    (0x7 << 0)
#define RCC_PLL8CFGR7_POSTDIV2                        (0x7 << 0)

/* Bit fields for RCC_VERR register */
#define RCC_VERR_MINREV_Pos                           0
#define RCC_VERR_MINREV_Msk                           (0xf << 0)
#define RCC_VERR_MINREV                               (0xf << 0)
#define RCC_VERR_MAJREV_Pos                           4
#define RCC_VERR_MAJREV_Msk                           (0xf << 4)
#define RCC_VERR_MAJREV                               (0xf << 4)

/* Bit fields for RCC_IDR register */
#define RCC_IDR_ID_Pos                                0
#define RCC_IDR_ID_Msk                                (0xFFFFFFFF << 0)
#define RCC_IDR_ID                                    (0xFFFFFFFF << 0)

/* Bit fields for RCC_SIDR register */
#define RCC_SIDR_SID_Pos                              0
#define RCC_SIDR_SID_Msk                              (0xFFFFFFFF << 0)
#define RCC_SIDR_SID                                  (0xFFFFFFFF << 0)
#else /* STM32MP2XX_ASSY2_2_1 */
/******************************************************************************/
/*                         Reset and Clock Control                            */
/* Reference document : RCC specifications applicable to ASSY 2.3             */
/*                      (Revision 1.0.18 - December 18th, 2019)               */
/******************************************************************************/
/* Bit fields for RCC_SECCFGR0 register */
#define RCC_SECCFGR0_SEC_Pos                         0
#define RCC_SECCFGR0_SEC_Msk                         (0xFFFFFFFF << 0)
#define RCC_SECCFGR0_SEC                             (0xFFFFFFFF << 0)

/* Bit fields for RCC_SECCFGR1 register */
#define RCC_SECCFGR1_SEC_Pos                         0
#define RCC_SECCFGR1_SEC_Msk                         (0xFFFFFFFF << 0)
#define RCC_SECCFGR1_SEC                             (0xFFFFFFFF << 0)

/* Bit fields for RCC_SECCFGR2 register */
#define RCC_SECCFGR2_SEC_Pos                         0
#define RCC_SECCFGR2_SEC_Msk                         (0xFFFFFFFF << 0)
#define RCC_SECCFGR2_SEC                             (0xFFFFFFFF << 0)

/* Bit fields for RCC_SECCFGR3 register */
#define RCC_SECCFGR3_SEC_Pos                         0
#define RCC_SECCFGR3_SEC_Msk                         (0x1ffff << 0)
#define RCC_SECCFGR3_SEC                             (0x1ffff << 0)

/* Bit fields for RCC_PRIVCFGR0 register */
#define RCC_PRIVCFGR0_PRIV_Pos                       0
#define RCC_PRIVCFGR0_PRIV_Msk                       (0xFFFFFFFF << 0)
#define RCC_PRIVCFGR0_PRIV                           (0xFFFFFFFF << 0)

/* Bit fields for RCC_PRIVCFGR1 register */
#define RCC_PRIVCFGR1_PRIV_Pos                       0
#define RCC_PRIVCFGR1_PRIV_Msk                       (0xFFFFFFFF << 0)
#define RCC_PRIVCFGR1_PRIV                           (0xFFFFFFFF << 0)

/* Bit fields for RCC_PRIVCFGR2 register */
#define RCC_PRIVCFGR2_PRIV_Pos                       0
#define RCC_PRIVCFGR2_PRIV_Msk                       (0xFFFFFFFF << 0)
#define RCC_PRIVCFGR2_PRIV                           (0xFFFFFFFF << 0)

/* Bit fields for RCC_PRIVCFGR3 register */
#define RCC_PRIVCFGR3_PRIV_Pos                       0
#define RCC_PRIVCFGR3_PRIV_Msk                       (0x1ffff << 0)
#define RCC_PRIVCFGR3_PRIV                           (0x1ffff << 0)

/* Bit fields for RCC_RCFGLOCK0 register */
#define RCC_RCFGLOCK0_RLOCK_Pos                      0
#define RCC_RCFGLOCK0_RLOCK_Msk                      (0xFFFFFFFF << 0)
#define RCC_RCFGLOCK0_RLOCK                          (0xFFFFFFFF << 0)

/* Bit fields for RCC_RCFGLOCK1 register */
#define RCC_RCFGLOCK1_RLOCK_Pos                      0
#define RCC_RCFGLOCK1_RLOCK_Msk                      (0xFFFFFFFF << 0)
#define RCC_RCFGLOCK1_RLOCK                          (0xFFFFFFFF << 0)

/* Bit fields for RCC_RCFGLOCK2 register */
#define RCC_RCFGLOCK2_RLOCK_Pos                      0
#define RCC_RCFGLOCK2_RLOCK_Msk                      (0xFFFFFFFF << 0)
#define RCC_RCFGLOCK2_RLOCK                          (0xFFFFFFFF << 0)

/* Bit fields for RCC_RCFGLOCK3 register */
#define RCC_RCFGLOCK3_RLOCK_Pos                      0
#define RCC_RCFGLOCK3_RLOCK_Msk                      (0x1ffff << 0)
#define RCC_RCFGLOCK3_RLOCK                          (0x1ffff << 0)

/* Bit fields for RCC_R0CIDCFGR register */
#define RCC_R0CIDCFGR_CFEN_Pos                       0
#define RCC_R0CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R0CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R0CIDCFGR_SEM_EN_Pos                     1
#define RCC_R0CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R0CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R0CIDCFGR_SCID_Pos                       4
#define RCC_R0CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R0CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R0CIDCFGR_SEMWLC_Pos                     16
#define RCC_R0CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R0CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R0SEMCR register */
#define RCC_R0SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R0SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R0SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R0SEMCR_SEMCID_Pos                       4
#define RCC_R0SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R0SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R1CIDCFGR register */
#define RCC_R1CIDCFGR_CFEN_Pos                       0
#define RCC_R1CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R1CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R1CIDCFGR_SEM_EN_Pos                     1
#define RCC_R1CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R1CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R1CIDCFGR_SCID_Pos                       4
#define RCC_R1CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R1CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R1CIDCFGR_SEMWLC_Pos                     16
#define RCC_R1CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R1CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R1SEMCR register */
#define RCC_R1SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R1SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R1SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R1SEMCR_SEMCID_Pos                       4
#define RCC_R1SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R1SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R2CIDCFGR register */
#define RCC_R2CIDCFGR_CFEN_Pos                       0
#define RCC_R2CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R2CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R2CIDCFGR_SEM_EN_Pos                     1
#define RCC_R2CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R2CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R2CIDCFGR_SCID_Pos                       4
#define RCC_R2CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R2CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R2CIDCFGR_SEMWLC_Pos                     16
#define RCC_R2CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R2CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R2SEMCR register */
#define RCC_R2SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R2SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R2SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R2SEMCR_SEMCID_Pos                       4
#define RCC_R2SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R2SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R3CIDCFGR register */
#define RCC_R3CIDCFGR_CFEN_Pos                       0
#define RCC_R3CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R3CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R3CIDCFGR_SEM_EN_Pos                     1
#define RCC_R3CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R3CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R3CIDCFGR_SCID_Pos                       4
#define RCC_R3CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R3CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R3CIDCFGR_SEMWLC_Pos                     16
#define RCC_R3CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R3CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R3SEMCR register */
#define RCC_R3SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R3SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R3SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R3SEMCR_SEMCID_Pos                       4
#define RCC_R3SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R3SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R4CIDCFGR register */
#define RCC_R4CIDCFGR_CFEN_Pos                       0
#define RCC_R4CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R4CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R4CIDCFGR_SEM_EN_Pos                     1
#define RCC_R4CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R4CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R4CIDCFGR_SCID_Pos                       4
#define RCC_R4CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R4CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R4CIDCFGR_SEMWLC_Pos                     16
#define RCC_R4CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R4CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R4SEMCR register */
#define RCC_R4SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R4SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R4SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R4SEMCR_SEMCID_Pos                       4
#define RCC_R4SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R4SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R5CIDCFGR register */
#define RCC_R5CIDCFGR_CFEN_Pos                       0
#define RCC_R5CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R5CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R5CIDCFGR_SEM_EN_Pos                     1
#define RCC_R5CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R5CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R5CIDCFGR_SCID_Pos                       4
#define RCC_R5CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R5CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R5CIDCFGR_SEMWLC_Pos                     16
#define RCC_R5CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R5CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R5SEMCR register */
#define RCC_R5SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R5SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R5SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R5SEMCR_SEMCID_Pos                       4
#define RCC_R5SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R5SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R6CIDCFGR register */
#define RCC_R6CIDCFGR_CFEN_Pos                       0
#define RCC_R6CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R6CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R6CIDCFGR_SEM_EN_Pos                     1
#define RCC_R6CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R6CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R6CIDCFGR_SCID_Pos                       4
#define RCC_R6CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R6CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R6CIDCFGR_SEMWLC_Pos                     16
#define RCC_R6CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R6CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R6SEMCR register */
#define RCC_R6SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R6SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R6SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R6SEMCR_SEMCID_Pos                       4
#define RCC_R6SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R6SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R7CIDCFGR register */
#define RCC_R7CIDCFGR_CFEN_Pos                       0
#define RCC_R7CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R7CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R7CIDCFGR_SEM_EN_Pos                     1
#define RCC_R7CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R7CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R7CIDCFGR_SCID_Pos                       4
#define RCC_R7CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R7CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R7CIDCFGR_SEMWLC_Pos                     16
#define RCC_R7CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R7CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R7SEMCR register */
#define RCC_R7SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R7SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R7SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R7SEMCR_SEMCID_Pos                       4
#define RCC_R7SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R7SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R8CIDCFGR register */
#define RCC_R8CIDCFGR_CFEN_Pos                       0
#define RCC_R8CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R8CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R8CIDCFGR_SEM_EN_Pos                     1
#define RCC_R8CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R8CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R8CIDCFGR_SCID_Pos                       4
#define RCC_R8CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R8CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R8CIDCFGR_SEMWLC_Pos                     16
#define RCC_R8CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R8CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R8SEMCR register */
#define RCC_R8SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R8SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R8SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R8SEMCR_SEMCID_Pos                       4
#define RCC_R8SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R8SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R9CIDCFGR register */
#define RCC_R9CIDCFGR_CFEN_Pos                       0
#define RCC_R9CIDCFGR_CFEN_Msk                       (0x1 << 0)
#define RCC_R9CIDCFGR_CFEN                           (0x1 << 0)
#define RCC_R9CIDCFGR_SEM_EN_Pos                     1
#define RCC_R9CIDCFGR_SEM_EN_Msk                     (0x1 << 1)
#define RCC_R9CIDCFGR_SEM_EN                         (0x1 << 1)
#define RCC_R9CIDCFGR_SCID_Pos                       4
#define RCC_R9CIDCFGR_SCID_Msk                       (0x7 << 4)
#define RCC_R9CIDCFGR_SCID                           (0x7 << 4)
#define RCC_R9CIDCFGR_SEMWLC_Pos                     16
#define RCC_R9CIDCFGR_SEMWLC_Msk                     (0xff << 16)
#define RCC_R9CIDCFGR_SEMWLC                         (0xff << 16)

/* Bit fields for RCC_R9SEMCR register */
#define RCC_R9SEMCR_SEM_MUTEX_Pos                    0
#define RCC_R9SEMCR_SEM_MUTEX_Msk                    (0x1 << 0)
#define RCC_R9SEMCR_SEM_MUTEX                        (0x1 << 0)
#define RCC_R9SEMCR_SEMCID_Pos                       4
#define RCC_R9SEMCR_SEMCID_Msk                       (0x7 << 4)
#define RCC_R9SEMCR_SEMCID                           (0x7 << 4)

/* Bit fields for RCC_R10CIDCFGR register */
#define RCC_R10CIDCFGR_CFEN_Pos                      0
#define RCC_R10CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R10CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R10CIDCFGR_SEM_EN_Pos                    1
#define RCC_R10CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R10CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R10CIDCFGR_SCID_Pos                      4
#define RCC_R10CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R10CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R10CIDCFGR_SEMWLC_Pos                    16
#define RCC_R10CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R10CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R10SEMCR register */
#define RCC_R10SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R10SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R10SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R10SEMCR_SEMCID_Pos                      4
#define RCC_R10SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R10SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R11CIDCFGR register */
#define RCC_R11CIDCFGR_CFEN_Pos                      0
#define RCC_R11CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R11CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R11CIDCFGR_SEM_EN_Pos                    1
#define RCC_R11CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R11CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R11CIDCFGR_SCID_Pos                      4
#define RCC_R11CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R11CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R11CIDCFGR_SEMWLC_Pos                    16
#define RCC_R11CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R11CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R11SEMCR register */
#define RCC_R11SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R11SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R11SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R11SEMCR_SEMCID_Pos                      4
#define RCC_R11SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R11SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R12CIDCFGR register */
#define RCC_R12CIDCFGR_CFEN_Pos                      0
#define RCC_R12CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R12CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R12CIDCFGR_SEM_EN_Pos                    1
#define RCC_R12CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R12CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R12CIDCFGR_SCID_Pos                      4
#define RCC_R12CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R12CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R12CIDCFGR_SEMWLC_Pos                    16
#define RCC_R12CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R12CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R12SEMCR register */
#define RCC_R12SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R12SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R12SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R12SEMCR_SEMCID_Pos                      4
#define RCC_R12SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R12SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R13CIDCFGR register */
#define RCC_R13CIDCFGR_CFEN_Pos                      0
#define RCC_R13CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R13CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R13CIDCFGR_SEM_EN_Pos                    1
#define RCC_R13CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R13CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R13CIDCFGR_SCID_Pos                      4
#define RCC_R13CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R13CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R13CIDCFGR_SEMWLC_Pos                    16
#define RCC_R13CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R13CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R13SEMCR register */
#define RCC_R13SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R13SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R13SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R13SEMCR_SEMCID_Pos                      4
#define RCC_R13SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R13SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R14CIDCFGR register */
#define RCC_R14CIDCFGR_CFEN_Pos                      0
#define RCC_R14CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R14CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R14CIDCFGR_SEM_EN_Pos                    1
#define RCC_R14CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R14CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R14CIDCFGR_SCID_Pos                      4
#define RCC_R14CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R14CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R14CIDCFGR_SEMWLC_Pos                    16
#define RCC_R14CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R14CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R14SEMCR register */
#define RCC_R14SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R14SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R14SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R14SEMCR_SEMCID_Pos                      4
#define RCC_R14SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R14SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R15CIDCFGR register */
#define RCC_R15CIDCFGR_CFEN_Pos                      0
#define RCC_R15CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R15CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R15CIDCFGR_SEM_EN_Pos                    1
#define RCC_R15CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R15CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R15CIDCFGR_SCID_Pos                      4
#define RCC_R15CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R15CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R15CIDCFGR_SEMWLC_Pos                    16
#define RCC_R15CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R15CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R15SEMCR register */
#define RCC_R15SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R15SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R15SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R15SEMCR_SEMCID_Pos                      4
#define RCC_R15SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R15SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R16CIDCFGR register */
#define RCC_R16CIDCFGR_CFEN_Pos                      0
#define RCC_R16CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R16CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R16CIDCFGR_SEM_EN_Pos                    1
#define RCC_R16CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R16CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R16CIDCFGR_SCID_Pos                      4
#define RCC_R16CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R16CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R16CIDCFGR_SEMWLC_Pos                    16
#define RCC_R16CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R16CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R16SEMCR register */
#define RCC_R16SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R16SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R16SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R16SEMCR_SEMCID_Pos                      4
#define RCC_R16SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R16SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R17CIDCFGR register */
#define RCC_R17CIDCFGR_CFEN_Pos                      0
#define RCC_R17CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R17CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R17CIDCFGR_SEM_EN_Pos                    1
#define RCC_R17CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R17CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R17CIDCFGR_SCID_Pos                      4
#define RCC_R17CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R17CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R17CIDCFGR_SEMWLC_Pos                    16
#define RCC_R17CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R17CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R17SEMCR register */
#define RCC_R17SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R17SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R17SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R17SEMCR_SEMCID_Pos                      4
#define RCC_R17SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R17SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R18CIDCFGR register */
#define RCC_R18CIDCFGR_CFEN_Pos                      0
#define RCC_R18CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R18CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R18CIDCFGR_SEM_EN_Pos                    1
#define RCC_R18CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R18CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R18CIDCFGR_SCID_Pos                      4
#define RCC_R18CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R18CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R18CIDCFGR_SEMWLC_Pos                    16
#define RCC_R18CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R18CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R18SEMCR register */
#define RCC_R18SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R18SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R18SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R18SEMCR_SEMCID_Pos                      4
#define RCC_R18SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R18SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R19CIDCFGR register */
#define RCC_R19CIDCFGR_CFEN_Pos                      0
#define RCC_R19CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R19CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R19CIDCFGR_SEM_EN_Pos                    1
#define RCC_R19CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R19CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R19CIDCFGR_SCID_Pos                      4
#define RCC_R19CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R19CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R19CIDCFGR_SEMWLC_Pos                    16
#define RCC_R19CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R19CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R19SEMCR register */
#define RCC_R19SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R19SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R19SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R19SEMCR_SEMCID_Pos                      4
#define RCC_R19SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R19SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R20CIDCFGR register */
#define RCC_R20CIDCFGR_CFEN_Pos                      0
#define RCC_R20CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R20CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R20CIDCFGR_SEM_EN_Pos                    1
#define RCC_R20CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R20CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R20CIDCFGR_SCID_Pos                      4
#define RCC_R20CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R20CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R20CIDCFGR_SEMWLC_Pos                    16
#define RCC_R20CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R20CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R20SEMCR register */
#define RCC_R20SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R20SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R20SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R20SEMCR_SEMCID_Pos                      4
#define RCC_R20SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R20SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R21CIDCFGR register */
#define RCC_R21CIDCFGR_CFEN_Pos                      0
#define RCC_R21CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R21CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R21CIDCFGR_SEM_EN_Pos                    1
#define RCC_R21CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R21CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R21CIDCFGR_SCID_Pos                      4
#define RCC_R21CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R21CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R21CIDCFGR_SEMWLC_Pos                    16
#define RCC_R21CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R21CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R21SEMCR register */
#define RCC_R21SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R21SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R21SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R21SEMCR_SEMCID_Pos                      4
#define RCC_R21SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R21SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R22CIDCFGR register */
#define RCC_R22CIDCFGR_CFEN_Pos                      0
#define RCC_R22CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R22CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R22CIDCFGR_SEM_EN_Pos                    1
#define RCC_R22CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R22CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R22CIDCFGR_SCID_Pos                      4
#define RCC_R22CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R22CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R22CIDCFGR_SEMWLC_Pos                    16
#define RCC_R22CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R22CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R22SEMCR register */
#define RCC_R22SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R22SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R22SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R22SEMCR_SEMCID_Pos                      4
#define RCC_R22SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R22SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R23CIDCFGR register */
#define RCC_R23CIDCFGR_CFEN_Pos                      0
#define RCC_R23CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R23CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R23CIDCFGR_SEM_EN_Pos                    1
#define RCC_R23CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R23CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R23CIDCFGR_SCID_Pos                      4
#define RCC_R23CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R23CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R23CIDCFGR_SEMWLC_Pos                    16
#define RCC_R23CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R23CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R23SEMCR register */
#define RCC_R23SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R23SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R23SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R23SEMCR_SEMCID_Pos                      4
#define RCC_R23SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R23SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R24CIDCFGR register */
#define RCC_R24CIDCFGR_CFEN_Pos                      0
#define RCC_R24CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R24CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R24CIDCFGR_SEM_EN_Pos                    1
#define RCC_R24CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R24CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R24CIDCFGR_SCID_Pos                      4
#define RCC_R24CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R24CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R24CIDCFGR_SEMWLC_Pos                    16
#define RCC_R24CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R24CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R24SEMCR register */
#define RCC_R24SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R24SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R24SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R24SEMCR_SEMCID_Pos                      4
#define RCC_R24SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R24SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R25CIDCFGR register */
#define RCC_R25CIDCFGR_CFEN_Pos                      0
#define RCC_R25CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R25CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R25CIDCFGR_SEM_EN_Pos                    1
#define RCC_R25CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R25CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R25CIDCFGR_SCID_Pos                      4
#define RCC_R25CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R25CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R25CIDCFGR_SEMWLC_Pos                    16
#define RCC_R25CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R25CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R25SEMCR register */
#define RCC_R25SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R25SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R25SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R25SEMCR_SEMCID_Pos                      4
#define RCC_R25SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R25SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R26CIDCFGR register */
#define RCC_R26CIDCFGR_CFEN_Pos                      0
#define RCC_R26CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R26CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R26CIDCFGR_SEM_EN_Pos                    1
#define RCC_R26CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R26CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R26CIDCFGR_SCID_Pos                      4
#define RCC_R26CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R26CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R26CIDCFGR_SEMWLC_Pos                    16
#define RCC_R26CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R26CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R26SEMCR register */
#define RCC_R26SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R26SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R26SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R26SEMCR_SEMCID_Pos                      4
#define RCC_R26SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R26SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R27CIDCFGR register */
#define RCC_R27CIDCFGR_CFEN_Pos                      0
#define RCC_R27CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R27CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R27CIDCFGR_SEM_EN_Pos                    1
#define RCC_R27CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R27CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R27CIDCFGR_SCID_Pos                      4
#define RCC_R27CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R27CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R27CIDCFGR_SEMWLC_Pos                    16
#define RCC_R27CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R27CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R27SEMCR register */
#define RCC_R27SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R27SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R27SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R27SEMCR_SEMCID_Pos                      4
#define RCC_R27SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R27SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R28CIDCFGR register */
#define RCC_R28CIDCFGR_CFEN_Pos                      0
#define RCC_R28CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R28CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R28CIDCFGR_SEM_EN_Pos                    1
#define RCC_R28CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R28CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R28CIDCFGR_SCID_Pos                      4
#define RCC_R28CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R28CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R28CIDCFGR_SEMWLC_Pos                    16
#define RCC_R28CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R28CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R28SEMCR register */
#define RCC_R28SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R28SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R28SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R28SEMCR_SEMCID_Pos                      4
#define RCC_R28SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R28SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R29CIDCFGR register */
#define RCC_R29CIDCFGR_CFEN_Pos                      0
#define RCC_R29CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R29CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R29CIDCFGR_SEM_EN_Pos                    1
#define RCC_R29CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R29CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R29CIDCFGR_SCID_Pos                      4
#define RCC_R29CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R29CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R29CIDCFGR_SEMWLC_Pos                    16
#define RCC_R29CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R29CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R29SEMCR register */
#define RCC_R29SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R29SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R29SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R29SEMCR_SEMCID_Pos                      4
#define RCC_R29SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R29SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R30CIDCFGR register */
#define RCC_R30CIDCFGR_CFEN_Pos                      0
#define RCC_R30CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R30CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R30CIDCFGR_SEM_EN_Pos                    1
#define RCC_R30CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R30CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R30CIDCFGR_SCID_Pos                      4
#define RCC_R30CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R30CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R30CIDCFGR_SEMWLC_Pos                    16
#define RCC_R30CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R30CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R30SEMCR register */
#define RCC_R30SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R30SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R30SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R30SEMCR_SEMCID_Pos                      4
#define RCC_R30SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R30SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R31CIDCFGR register */
#define RCC_R31CIDCFGR_CFEN_Pos                      0
#define RCC_R31CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R31CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R31CIDCFGR_SEM_EN_Pos                    1
#define RCC_R31CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R31CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R31CIDCFGR_SCID_Pos                      4
#define RCC_R31CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R31CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R31CIDCFGR_SEMWLC_Pos                    16
#define RCC_R31CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R31CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R31SEMCR register */
#define RCC_R31SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R31SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R31SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R31SEMCR_SEMCID_Pos                      4
#define RCC_R31SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R31SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R32CIDCFGR register */
#define RCC_R32CIDCFGR_CFEN_Pos                      0
#define RCC_R32CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R32CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R32CIDCFGR_SEM_EN_Pos                    1
#define RCC_R32CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R32CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R32CIDCFGR_SCID_Pos                      4
#define RCC_R32CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R32CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R32CIDCFGR_SEMWLC_Pos                    16
#define RCC_R32CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R32CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R32SEMCR register */
#define RCC_R32SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R32SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R32SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R32SEMCR_SEMCID_Pos                      4
#define RCC_R32SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R32SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R33CIDCFGR register */
#define RCC_R33CIDCFGR_CFEN_Pos                      0
#define RCC_R33CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R33CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R33CIDCFGR_SEM_EN_Pos                    1
#define RCC_R33CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R33CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R33CIDCFGR_SCID_Pos                      4
#define RCC_R33CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R33CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R33CIDCFGR_SEMWLC_Pos                    16
#define RCC_R33CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R33CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R33SEMCR register */
#define RCC_R33SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R33SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R33SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R33SEMCR_SEMCID_Pos                      4
#define RCC_R33SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R33SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R34CIDCFGR register */
#define RCC_R34CIDCFGR_CFEN_Pos                      0
#define RCC_R34CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R34CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R34CIDCFGR_SEM_EN_Pos                    1
#define RCC_R34CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R34CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R34CIDCFGR_SCID_Pos                      4
#define RCC_R34CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R34CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R34CIDCFGR_SEMWLC_Pos                    16
#define RCC_R34CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R34CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R34SEMCR register */
#define RCC_R34SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R34SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R34SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R34SEMCR_SEMCID_Pos                      4
#define RCC_R34SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R34SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R35CIDCFGR register */
#define RCC_R35CIDCFGR_CFEN_Pos                      0
#define RCC_R35CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R35CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R35CIDCFGR_SEM_EN_Pos                    1
#define RCC_R35CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R35CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R35CIDCFGR_SCID_Pos                      4
#define RCC_R35CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R35CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R35CIDCFGR_SEMWLC_Pos                    16
#define RCC_R35CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R35CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R35SEMCR register */
#define RCC_R35SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R35SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R35SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R35SEMCR_SEMCID_Pos                      4
#define RCC_R35SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R35SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R36CIDCFGR register */
#define RCC_R36CIDCFGR_CFEN_Pos                      0
#define RCC_R36CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R36CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R36CIDCFGR_SEM_EN_Pos                    1
#define RCC_R36CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R36CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R36CIDCFGR_SCID_Pos                      4
#define RCC_R36CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R36CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R36CIDCFGR_SEMWLC_Pos                    16
#define RCC_R36CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R36CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R36SEMCR register */
#define RCC_R36SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R36SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R36SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R36SEMCR_SEMCID_Pos                      4
#define RCC_R36SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R36SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R37CIDCFGR register */
#define RCC_R37CIDCFGR_CFEN_Pos                      0
#define RCC_R37CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R37CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R37CIDCFGR_SEM_EN_Pos                    1
#define RCC_R37CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R37CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R37CIDCFGR_SCID_Pos                      4
#define RCC_R37CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R37CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R37CIDCFGR_SEMWLC_Pos                    16
#define RCC_R37CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R37CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R37SEMCR register */
#define RCC_R37SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R37SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R37SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R37SEMCR_SEMCID_Pos                      4
#define RCC_R37SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R37SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R38CIDCFGR register */
#define RCC_R38CIDCFGR_CFEN_Pos                      0
#define RCC_R38CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R38CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R38CIDCFGR_SEM_EN_Pos                    1
#define RCC_R38CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R38CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R38CIDCFGR_SCID_Pos                      4
#define RCC_R38CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R38CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R38CIDCFGR_SEMWLC_Pos                    16
#define RCC_R38CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R38CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R38SEMCR register */
#define RCC_R38SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R38SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R38SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R38SEMCR_SEMCID_Pos                      4
#define RCC_R38SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R38SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R39CIDCFGR register */
#define RCC_R39CIDCFGR_CFEN_Pos                      0
#define RCC_R39CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R39CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R39CIDCFGR_SEM_EN_Pos                    1
#define RCC_R39CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R39CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R39CIDCFGR_SCID_Pos                      4
#define RCC_R39CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R39CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R39CIDCFGR_SEMWLC_Pos                    16
#define RCC_R39CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R39CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R39SEMCR register */
#define RCC_R39SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R39SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R39SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R39SEMCR_SEMCID_Pos                      4
#define RCC_R39SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R39SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R40CIDCFGR register */
#define RCC_R40CIDCFGR_CFEN_Pos                      0
#define RCC_R40CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R40CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R40CIDCFGR_SEM_EN_Pos                    1
#define RCC_R40CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R40CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R40CIDCFGR_SCID_Pos                      4
#define RCC_R40CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R40CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R40CIDCFGR_SEMWLC_Pos                    16
#define RCC_R40CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R40CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R40SEMCR register */
#define RCC_R40SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R40SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R40SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R40SEMCR_SEMCID_Pos                      4
#define RCC_R40SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R40SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R41CIDCFGR register */
#define RCC_R41CIDCFGR_CFEN_Pos                      0
#define RCC_R41CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R41CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R41CIDCFGR_SEM_EN_Pos                    1
#define RCC_R41CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R41CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R41CIDCFGR_SCID_Pos                      4
#define RCC_R41CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R41CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R41CIDCFGR_SEMWLC_Pos                    16
#define RCC_R41CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R41CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R41SEMCR register */
#define RCC_R41SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R41SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R41SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R41SEMCR_SEMCID_Pos                      4
#define RCC_R41SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R41SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R42CIDCFGR register */
#define RCC_R42CIDCFGR_CFEN_Pos                      0
#define RCC_R42CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R42CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R42CIDCFGR_SEM_EN_Pos                    1
#define RCC_R42CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R42CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R42CIDCFGR_SCID_Pos                      4
#define RCC_R42CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R42CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R42CIDCFGR_SEMWLC_Pos                    16
#define RCC_R42CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R42CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R42SEMCR register */
#define RCC_R42SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R42SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R42SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R42SEMCR_SEMCID_Pos                      4
#define RCC_R42SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R42SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R43CIDCFGR register */
#define RCC_R43CIDCFGR_CFEN_Pos                      0
#define RCC_R43CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R43CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R43CIDCFGR_SEM_EN_Pos                    1
#define RCC_R43CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R43CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R43CIDCFGR_SCID_Pos                      4
#define RCC_R43CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R43CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R43CIDCFGR_SEMWLC_Pos                    16
#define RCC_R43CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R43CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R43SEMCR register */
#define RCC_R43SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R43SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R43SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R43SEMCR_SEMCID_Pos                      4
#define RCC_R43SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R43SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R44CIDCFGR register */
#define RCC_R44CIDCFGR_CFEN_Pos                      0
#define RCC_R44CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R44CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R44CIDCFGR_SEM_EN_Pos                    1
#define RCC_R44CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R44CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R44CIDCFGR_SCID_Pos                      4
#define RCC_R44CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R44CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R44CIDCFGR_SEMWLC_Pos                    16
#define RCC_R44CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R44CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R44SEMCR register */
#define RCC_R44SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R44SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R44SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R44SEMCR_SEMCID_Pos                      4
#define RCC_R44SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R44SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R45CIDCFGR register */
#define RCC_R45CIDCFGR_CFEN_Pos                      0
#define RCC_R45CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R45CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R45CIDCFGR_SEM_EN_Pos                    1
#define RCC_R45CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R45CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R45CIDCFGR_SCID_Pos                      4
#define RCC_R45CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R45CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R45CIDCFGR_SEMWLC_Pos                    16
#define RCC_R45CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R45CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R45SEMCR register */
#define RCC_R45SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R45SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R45SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R45SEMCR_SEMCID_Pos                      4
#define RCC_R45SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R45SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R46CIDCFGR register */
#define RCC_R46CIDCFGR_CFEN_Pos                      0
#define RCC_R46CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R46CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R46CIDCFGR_SEM_EN_Pos                    1
#define RCC_R46CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R46CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R46CIDCFGR_SCID_Pos                      4
#define RCC_R46CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R46CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R46CIDCFGR_SEMWLC_Pos                    16
#define RCC_R46CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R46CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R46SEMCR register */
#define RCC_R46SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R46SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R46SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R46SEMCR_SEMCID_Pos                      4
#define RCC_R46SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R46SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R47CIDCFGR register */
#define RCC_R47CIDCFGR_CFEN_Pos                      0
#define RCC_R47CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R47CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R47CIDCFGR_SEM_EN_Pos                    1
#define RCC_R47CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R47CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R47CIDCFGR_SCID_Pos                      4
#define RCC_R47CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R47CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R47CIDCFGR_SEMWLC_Pos                    16
#define RCC_R47CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R47CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R47SEMCR register */
#define RCC_R47SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R47SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R47SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R47SEMCR_SEMCID_Pos                      4
#define RCC_R47SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R47SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R48CIDCFGR register */
#define RCC_R48CIDCFGR_CFEN_Pos                      0
#define RCC_R48CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R48CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R48CIDCFGR_SEM_EN_Pos                    1
#define RCC_R48CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R48CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R48CIDCFGR_SCID_Pos                      4
#define RCC_R48CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R48CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R48CIDCFGR_SEMWLC_Pos                    16
#define RCC_R48CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R48CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R48SEMCR register */
#define RCC_R48SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R48SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R48SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R48SEMCR_SEMCID_Pos                      4
#define RCC_R48SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R48SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R49CIDCFGR register */
#define RCC_R49CIDCFGR_CFEN_Pos                      0
#define RCC_R49CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R49CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R49CIDCFGR_SEM_EN_Pos                    1
#define RCC_R49CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R49CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R49CIDCFGR_SCID_Pos                      4
#define RCC_R49CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R49CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R49CIDCFGR_SEMWLC_Pos                    16
#define RCC_R49CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R49CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R49SEMCR register */
#define RCC_R49SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R49SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R49SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R49SEMCR_SEMCID_Pos                      4
#define RCC_R49SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R49SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R50CIDCFGR register */
#define RCC_R50CIDCFGR_CFEN_Pos                      0
#define RCC_R50CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R50CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R50CIDCFGR_SEM_EN_Pos                    1
#define RCC_R50CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R50CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R50CIDCFGR_SCID_Pos                      4
#define RCC_R50CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R50CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R50CIDCFGR_SEMWLC_Pos                    16
#define RCC_R50CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R50CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R50SEMCR register */
#define RCC_R50SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R50SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R50SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R50SEMCR_SEMCID_Pos                      4
#define RCC_R50SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R50SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R51CIDCFGR register */
#define RCC_R51CIDCFGR_CFEN_Pos                      0
#define RCC_R51CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R51CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R51CIDCFGR_SEM_EN_Pos                    1
#define RCC_R51CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R51CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R51CIDCFGR_SCID_Pos                      4
#define RCC_R51CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R51CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R51CIDCFGR_SEMWLC_Pos                    16
#define RCC_R51CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R51CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R51SEMCR register */
#define RCC_R51SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R51SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R51SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R51SEMCR_SEMCID_Pos                      4
#define RCC_R51SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R51SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R52CIDCFGR register */
#define RCC_R52CIDCFGR_CFEN_Pos                      0
#define RCC_R52CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R52CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R52CIDCFGR_SEM_EN_Pos                    1
#define RCC_R52CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R52CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R52CIDCFGR_SCID_Pos                      4
#define RCC_R52CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R52CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R52CIDCFGR_SEMWLC_Pos                    16
#define RCC_R52CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R52CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R52SEMCR register */
#define RCC_R52SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R52SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R52SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R52SEMCR_SEMCID_Pos                      4
#define RCC_R52SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R52SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R53CIDCFGR register */
#define RCC_R53CIDCFGR_CFEN_Pos                      0
#define RCC_R53CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R53CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R53CIDCFGR_SEM_EN_Pos                    1
#define RCC_R53CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R53CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R53CIDCFGR_SCID_Pos                      4
#define RCC_R53CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R53CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R53CIDCFGR_SEMWLC_Pos                    16
#define RCC_R53CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R53CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R53SEMCR register */
#define RCC_R53SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R53SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R53SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R53SEMCR_SEMCID_Pos                      4
#define RCC_R53SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R53SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R54CIDCFGR register */
#define RCC_R54CIDCFGR_CFEN_Pos                      0
#define RCC_R54CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R54CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R54CIDCFGR_SEM_EN_Pos                    1
#define RCC_R54CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R54CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R54CIDCFGR_SCID_Pos                      4
#define RCC_R54CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R54CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R54CIDCFGR_SEMWLC_Pos                    16
#define RCC_R54CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R54CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R54SEMCR register */
#define RCC_R54SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R54SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R54SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R54SEMCR_SEMCID_Pos                      4
#define RCC_R54SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R54SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R55CIDCFGR register */
#define RCC_R55CIDCFGR_CFEN_Pos                      0
#define RCC_R55CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R55CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R55CIDCFGR_SEM_EN_Pos                    1
#define RCC_R55CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R55CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R55CIDCFGR_SCID_Pos                      4
#define RCC_R55CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R55CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R55CIDCFGR_SEMWLC_Pos                    16
#define RCC_R55CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R55CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R55SEMCR register */
#define RCC_R55SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R55SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R55SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R55SEMCR_SEMCID_Pos                      4
#define RCC_R55SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R55SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R56CIDCFGR register */
#define RCC_R56CIDCFGR_CFEN_Pos                      0
#define RCC_R56CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R56CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R56CIDCFGR_SEM_EN_Pos                    1
#define RCC_R56CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R56CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R56CIDCFGR_SCID_Pos                      4
#define RCC_R56CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R56CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R56CIDCFGR_SEMWLC_Pos                    16
#define RCC_R56CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R56CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R56SEMCR register */
#define RCC_R56SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R56SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R56SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R56SEMCR_SEMCID_Pos                      4
#define RCC_R56SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R56SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R57CIDCFGR register */
#define RCC_R57CIDCFGR_CFEN_Pos                      0
#define RCC_R57CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R57CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R57CIDCFGR_SEM_EN_Pos                    1
#define RCC_R57CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R57CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R57CIDCFGR_SCID_Pos                      4
#define RCC_R57CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R57CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R57CIDCFGR_SEMWLC_Pos                    16
#define RCC_R57CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R57CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R57SEMCR register */
#define RCC_R57SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R57SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R57SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R57SEMCR_SEMCID_Pos                      4
#define RCC_R57SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R57SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R58CIDCFGR register */
#define RCC_R58CIDCFGR_CFEN_Pos                      0
#define RCC_R58CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R58CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R58CIDCFGR_SEM_EN_Pos                    1
#define RCC_R58CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R58CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R58CIDCFGR_SCID_Pos                      4
#define RCC_R58CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R58CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R58CIDCFGR_SEMWLC_Pos                    16
#define RCC_R58CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R58CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R58SEMCR register */
#define RCC_R58SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R58SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R58SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R58SEMCR_SEMCID_Pos                      4
#define RCC_R58SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R58SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R59CIDCFGR register */
#define RCC_R59CIDCFGR_CFEN_Pos                      0
#define RCC_R59CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R59CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R59CIDCFGR_SEM_EN_Pos                    1
#define RCC_R59CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R59CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R59CIDCFGR_SCID_Pos                      4
#define RCC_R59CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R59CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R59CIDCFGR_SEMWLC_Pos                    16
#define RCC_R59CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R59CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R59SEMCR register */
#define RCC_R59SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R59SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R59SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R59SEMCR_SEMCID_Pos                      4
#define RCC_R59SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R59SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R60CIDCFGR register */
#define RCC_R60CIDCFGR_CFEN_Pos                      0
#define RCC_R60CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R60CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R60CIDCFGR_SEM_EN_Pos                    1
#define RCC_R60CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R60CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R60CIDCFGR_SCID_Pos                      4
#define RCC_R60CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R60CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R60CIDCFGR_SEMWLC_Pos                    16
#define RCC_R60CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R60CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R60SEMCR register */
#define RCC_R60SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R60SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R60SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R60SEMCR_SEMCID_Pos                      4
#define RCC_R60SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R60SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R61CIDCFGR register */
#define RCC_R61CIDCFGR_CFEN_Pos                      0
#define RCC_R61CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R61CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R61CIDCFGR_SEM_EN_Pos                    1
#define RCC_R61CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R61CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R61CIDCFGR_SCID_Pos                      4
#define RCC_R61CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R61CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R61CIDCFGR_SEMWLC_Pos                    16
#define RCC_R61CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R61CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R61SEMCR register */
#define RCC_R61SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R61SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R61SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R61SEMCR_SEMCID_Pos                      4
#define RCC_R61SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R61SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R62CIDCFGR register */
#define RCC_R62CIDCFGR_CFEN_Pos                      0
#define RCC_R62CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R62CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R62CIDCFGR_SEM_EN_Pos                    1
#define RCC_R62CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R62CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R62CIDCFGR_SCID_Pos                      4
#define RCC_R62CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R62CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R62CIDCFGR_SEMWLC_Pos                    16
#define RCC_R62CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R62CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R62SEMCR register */
#define RCC_R62SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R62SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R62SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R62SEMCR_SEMCID_Pos                      4
#define RCC_R62SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R62SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R63CIDCFGR register */
#define RCC_R63CIDCFGR_CFEN_Pos                      0
#define RCC_R63CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R63CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R63CIDCFGR_SEM_EN_Pos                    1
#define RCC_R63CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R63CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R63CIDCFGR_SCID_Pos                      4
#define RCC_R63CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R63CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R63CIDCFGR_SEMWLC_Pos                    16
#define RCC_R63CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R63CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R63SEMCR register */
#define RCC_R63SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R63SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R63SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R63SEMCR_SEMCID_Pos                      4
#define RCC_R63SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R63SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R64CIDCFGR register */
#define RCC_R64CIDCFGR_CFEN_Pos                      0
#define RCC_R64CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R64CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R64CIDCFGR_SEM_EN_Pos                    1
#define RCC_R64CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R64CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R64CIDCFGR_SCID_Pos                      4
#define RCC_R64CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R64CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R64CIDCFGR_SEMWLC_Pos                    16
#define RCC_R64CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R64CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R64SEMCR register */
#define RCC_R64SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R64SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R64SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R64SEMCR_SEMCID_Pos                      4
#define RCC_R64SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R64SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R65CIDCFGR register */
#define RCC_R65CIDCFGR_CFEN_Pos                      0
#define RCC_R65CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R65CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R65CIDCFGR_SEM_EN_Pos                    1
#define RCC_R65CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R65CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R65CIDCFGR_SCID_Pos                      4
#define RCC_R65CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R65CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R65CIDCFGR_SEMWLC_Pos                    16
#define RCC_R65CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R65CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R65SEMCR register */
#define RCC_R65SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R65SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R65SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R65SEMCR_SEMCID_Pos                      4
#define RCC_R65SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R65SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R66CIDCFGR register */
#define RCC_R66CIDCFGR_CFEN_Pos                      0
#define RCC_R66CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R66CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R66CIDCFGR_SEM_EN_Pos                    1
#define RCC_R66CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R66CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R66CIDCFGR_SCID_Pos                      4
#define RCC_R66CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R66CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R66CIDCFGR_SEMWLC_Pos                    16
#define RCC_R66CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R66CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R66SEMCR register */
#define RCC_R66SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R66SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R66SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R66SEMCR_SEMCID_Pos                      4
#define RCC_R66SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R66SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R67CIDCFGR register */
#define RCC_R67CIDCFGR_CFEN_Pos                      0
#define RCC_R67CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R67CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R67CIDCFGR_SEM_EN_Pos                    1
#define RCC_R67CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R67CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R67CIDCFGR_SCID_Pos                      4
#define RCC_R67CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R67CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R67CIDCFGR_SEMWLC_Pos                    16
#define RCC_R67CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R67CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R67SEMCR register */
#define RCC_R67SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R67SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R67SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R67SEMCR_SEMCID_Pos                      4
#define RCC_R67SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R67SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R68CIDCFGR register */
#define RCC_R68CIDCFGR_CFEN_Pos                      0
#define RCC_R68CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R68CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R68CIDCFGR_SEM_EN_Pos                    1
#define RCC_R68CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R68CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R68CIDCFGR_SCID_Pos                      4
#define RCC_R68CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R68CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R68CIDCFGR_SEMWLC_Pos                    16
#define RCC_R68CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R68CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R68SEMCR register */
#define RCC_R68SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R68SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R68SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R68SEMCR_SEMCID_Pos                      4
#define RCC_R68SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R68SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R69CIDCFGR register */
#define RCC_R69CIDCFGR_CFEN_Pos                      0
#define RCC_R69CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R69CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R69CIDCFGR_SEM_EN_Pos                    1
#define RCC_R69CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R69CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R69CIDCFGR_SCID_Pos                      4
#define RCC_R69CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R69CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R69CIDCFGR_SEMWLC_Pos                    16
#define RCC_R69CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R69CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R69SEMCR register */
#define RCC_R69SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R69SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R69SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R69SEMCR_SEMCID_Pos                      4
#define RCC_R69SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R69SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R70CIDCFGR register */
#define RCC_R70CIDCFGR_CFEN_Pos                      0
#define RCC_R70CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R70CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R70CIDCFGR_SEM_EN_Pos                    1
#define RCC_R70CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R70CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R70CIDCFGR_SCID_Pos                      4
#define RCC_R70CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R70CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R70CIDCFGR_SEMWLC_Pos                    16
#define RCC_R70CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R70CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R70SEMCR register */
#define RCC_R70SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R70SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R70SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R70SEMCR_SEMCID_Pos                      4
#define RCC_R70SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R70SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R71CIDCFGR register */
#define RCC_R71CIDCFGR_CFEN_Pos                      0
#define RCC_R71CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R71CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R71CIDCFGR_SEM_EN_Pos                    1
#define RCC_R71CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R71CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R71CIDCFGR_SCID_Pos                      4
#define RCC_R71CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R71CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R71CIDCFGR_SEMWLC_Pos                    16
#define RCC_R71CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R71CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R71SEMCR register */
#define RCC_R71SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R71SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R71SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R71SEMCR_SEMCID_Pos                      4
#define RCC_R71SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R71SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R72CIDCFGR register */
#define RCC_R72CIDCFGR_CFEN_Pos                      0
#define RCC_R72CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R72CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R72CIDCFGR_SEM_EN_Pos                    1
#define RCC_R72CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R72CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R72CIDCFGR_SCID_Pos                      4
#define RCC_R72CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R72CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R72CIDCFGR_SEMWLC_Pos                    16
#define RCC_R72CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R72CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R72SEMCR register */
#define RCC_R72SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R72SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R72SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R72SEMCR_SEMCID_Pos                      4
#define RCC_R72SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R72SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R73CIDCFGR register */
#define RCC_R73CIDCFGR_CFEN_Pos                      0
#define RCC_R73CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R73CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R73CIDCFGR_SEM_EN_Pos                    1
#define RCC_R73CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R73CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R73CIDCFGR_SCID_Pos                      4
#define RCC_R73CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R73CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R73CIDCFGR_SEMWLC_Pos                    16
#define RCC_R73CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R73CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R73SEMCR register */
#define RCC_R73SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R73SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R73SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R73SEMCR_SEMCID_Pos                      4
#define RCC_R73SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R73SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R74CIDCFGR register */
#define RCC_R74CIDCFGR_CFEN_Pos                      0
#define RCC_R74CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R74CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R74CIDCFGR_SEM_EN_Pos                    1
#define RCC_R74CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R74CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R74CIDCFGR_SCID_Pos                      4
#define RCC_R74CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R74CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R74CIDCFGR_SEMWLC_Pos                    16
#define RCC_R74CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R74CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R74SEMCR register */
#define RCC_R74SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R74SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R74SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R74SEMCR_SEMCID_Pos                      4
#define RCC_R74SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R74SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R75CIDCFGR register */
#define RCC_R75CIDCFGR_CFEN_Pos                      0
#define RCC_R75CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R75CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R75CIDCFGR_SEM_EN_Pos                    1
#define RCC_R75CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R75CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R75CIDCFGR_SCID_Pos                      4
#define RCC_R75CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R75CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R75CIDCFGR_SEMWLC_Pos                    16
#define RCC_R75CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R75CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R75SEMCR register */
#define RCC_R75SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R75SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R75SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R75SEMCR_SEMCID_Pos                      4
#define RCC_R75SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R75SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R76CIDCFGR register */
#define RCC_R76CIDCFGR_CFEN_Pos                      0
#define RCC_R76CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R76CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R76CIDCFGR_SEM_EN_Pos                    1
#define RCC_R76CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R76CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R76CIDCFGR_SCID_Pos                      4
#define RCC_R76CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R76CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R76CIDCFGR_SEMWLC_Pos                    16
#define RCC_R76CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R76CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R76SEMCR register */
#define RCC_R76SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R76SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R76SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R76SEMCR_SEMCID_Pos                      4
#define RCC_R76SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R76SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R77CIDCFGR register */
#define RCC_R77CIDCFGR_CFEN_Pos                      0
#define RCC_R77CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R77CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R77CIDCFGR_SEM_EN_Pos                    1
#define RCC_R77CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R77CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R77CIDCFGR_SCID_Pos                      4
#define RCC_R77CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R77CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R77CIDCFGR_SEMWLC_Pos                    16
#define RCC_R77CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R77CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R77SEMCR register */
#define RCC_R77SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R77SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R77SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R77SEMCR_SEMCID_Pos                      4
#define RCC_R77SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R77SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R78CIDCFGR register */
#define RCC_R78CIDCFGR_CFEN_Pos                      0
#define RCC_R78CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R78CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R78CIDCFGR_SEM_EN_Pos                    1
#define RCC_R78CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R78CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R78CIDCFGR_SCID_Pos                      4
#define RCC_R78CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R78CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R78CIDCFGR_SEMWLC_Pos                    16
#define RCC_R78CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R78CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R78SEMCR register */
#define RCC_R78SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R78SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R78SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R78SEMCR_SEMCID_Pos                      4
#define RCC_R78SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R78SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R79CIDCFGR register */
#define RCC_R79CIDCFGR_CFEN_Pos                      0
#define RCC_R79CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R79CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R79CIDCFGR_SEM_EN_Pos                    1
#define RCC_R79CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R79CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R79CIDCFGR_SCID_Pos                      4
#define RCC_R79CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R79CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R79CIDCFGR_SEMWLC_Pos                    16
#define RCC_R79CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R79CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R79SEMCR register */
#define RCC_R79SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R79SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R79SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R79SEMCR_SEMCID_Pos                      4
#define RCC_R79SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R79SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R80CIDCFGR register */
#define RCC_R80CIDCFGR_CFEN_Pos                      0
#define RCC_R80CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R80CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R80CIDCFGR_SEM_EN_Pos                    1
#define RCC_R80CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R80CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R80CIDCFGR_SCID_Pos                      4
#define RCC_R80CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R80CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R80CIDCFGR_SEMWLC_Pos                    16
#define RCC_R80CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R80CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R80SEMCR register */
#define RCC_R80SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R80SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R80SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R80SEMCR_SEMCID_Pos                      4
#define RCC_R80SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R80SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R81CIDCFGR register */
#define RCC_R81CIDCFGR_CFEN_Pos                      0
#define RCC_R81CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R81CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R81CIDCFGR_SEM_EN_Pos                    1
#define RCC_R81CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R81CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R81CIDCFGR_SCID_Pos                      4
#define RCC_R81CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R81CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R81CIDCFGR_SEMWLC_Pos                    16
#define RCC_R81CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R81CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R81SEMCR register */
#define RCC_R81SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R81SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R81SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R81SEMCR_SEMCID_Pos                      4
#define RCC_R81SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R81SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R82CIDCFGR register */
#define RCC_R82CIDCFGR_CFEN_Pos                      0
#define RCC_R82CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R82CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R82CIDCFGR_SEM_EN_Pos                    1
#define RCC_R82CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R82CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R82CIDCFGR_SCID_Pos                      4
#define RCC_R82CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R82CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R82CIDCFGR_SEMWLC_Pos                    16
#define RCC_R82CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R82CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R82SEMCR register */
#define RCC_R82SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R82SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R82SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R82SEMCR_SEMCID_Pos                      4
#define RCC_R82SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R82SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R83CIDCFGR register */
#define RCC_R83CIDCFGR_CFEN_Pos                      0
#define RCC_R83CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R83CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R83CIDCFGR_SEM_EN_Pos                    1
#define RCC_R83CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R83CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R83CIDCFGR_SCID_Pos                      4
#define RCC_R83CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R83CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R83CIDCFGR_SEMWLC_Pos                    16
#define RCC_R83CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R83CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R83SEMCR register */
#define RCC_R83SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R83SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R83SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R83SEMCR_SEMCID_Pos                      4
#define RCC_R83SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R83SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R84CIDCFGR register */
#define RCC_R84CIDCFGR_CFEN_Pos                      0
#define RCC_R84CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R84CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R84CIDCFGR_SEM_EN_Pos                    1
#define RCC_R84CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R84CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R84CIDCFGR_SCID_Pos                      4
#define RCC_R84CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R84CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R84CIDCFGR_SEMWLC_Pos                    16
#define RCC_R84CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R84CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R84SEMCR register */
#define RCC_R84SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R84SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R84SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R84SEMCR_SEMCID_Pos                      4
#define RCC_R84SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R84SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R85CIDCFGR register */
#define RCC_R85CIDCFGR_CFEN_Pos                      0
#define RCC_R85CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R85CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R85CIDCFGR_SEM_EN_Pos                    1
#define RCC_R85CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R85CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R85CIDCFGR_SCID_Pos                      4
#define RCC_R85CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R85CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R85CIDCFGR_SEMWLC_Pos                    16
#define RCC_R85CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R85CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R85SEMCR register */
#define RCC_R85SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R85SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R85SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R85SEMCR_SEMCID_Pos                      4
#define RCC_R85SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R85SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R86CIDCFGR register */
#define RCC_R86CIDCFGR_CFEN_Pos                      0
#define RCC_R86CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R86CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R86CIDCFGR_SEM_EN_Pos                    1
#define RCC_R86CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R86CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R86CIDCFGR_SCID_Pos                      4
#define RCC_R86CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R86CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R86CIDCFGR_SEMWLC_Pos                    16
#define RCC_R86CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R86CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R86SEMCR register */
#define RCC_R86SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R86SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R86SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R86SEMCR_SEMCID_Pos                      4
#define RCC_R86SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R86SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R87CIDCFGR register */
#define RCC_R87CIDCFGR_CFEN_Pos                      0
#define RCC_R87CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R87CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R87CIDCFGR_SEM_EN_Pos                    1
#define RCC_R87CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R87CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R87CIDCFGR_SCID_Pos                      4
#define RCC_R87CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R87CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R87CIDCFGR_SEMWLC_Pos                    16
#define RCC_R87CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R87CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R87SEMCR register */
#define RCC_R87SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R87SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R87SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R87SEMCR_SEMCID_Pos                      4
#define RCC_R87SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R87SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R88CIDCFGR register */
#define RCC_R88CIDCFGR_CFEN_Pos                      0
#define RCC_R88CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R88CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R88CIDCFGR_SEM_EN_Pos                    1
#define RCC_R88CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R88CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R88CIDCFGR_SCID_Pos                      4
#define RCC_R88CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R88CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R88CIDCFGR_SEMWLC_Pos                    16
#define RCC_R88CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R88CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R88SEMCR register */
#define RCC_R88SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R88SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R88SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R88SEMCR_SEMCID_Pos                      4
#define RCC_R88SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R88SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R89CIDCFGR register */
#define RCC_R89CIDCFGR_CFEN_Pos                      0
#define RCC_R89CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R89CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R89CIDCFGR_SEM_EN_Pos                    1
#define RCC_R89CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R89CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R89CIDCFGR_SCID_Pos                      4
#define RCC_R89CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R89CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R89CIDCFGR_SEMWLC_Pos                    16
#define RCC_R89CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R89CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R89SEMCR register */
#define RCC_R89SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R89SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R89SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R89SEMCR_SEMCID_Pos                      4
#define RCC_R89SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R89SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R90CIDCFGR register */
#define RCC_R90CIDCFGR_CFEN_Pos                      0
#define RCC_R90CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R90CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R90CIDCFGR_SEM_EN_Pos                    1
#define RCC_R90CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R90CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R90CIDCFGR_SCID_Pos                      4
#define RCC_R90CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R90CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R90CIDCFGR_SEMWLC_Pos                    16
#define RCC_R90CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R90CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R90SEMCR register */
#define RCC_R90SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R90SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R90SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R90SEMCR_SEMCID_Pos                      4
#define RCC_R90SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R90SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R91CIDCFGR register */
#define RCC_R91CIDCFGR_CFEN_Pos                      0
#define RCC_R91CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R91CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R91CIDCFGR_SEM_EN_Pos                    1
#define RCC_R91CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R91CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R91CIDCFGR_SCID_Pos                      4
#define RCC_R91CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R91CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R91CIDCFGR_SEMWLC_Pos                    16
#define RCC_R91CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R91CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R91SEMCR register */
#define RCC_R91SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R91SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R91SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R91SEMCR_SEMCID_Pos                      4
#define RCC_R91SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R91SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R92CIDCFGR register */
#define RCC_R92CIDCFGR_CFEN_Pos                      0
#define RCC_R92CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R92CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R92CIDCFGR_SEM_EN_Pos                    1
#define RCC_R92CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R92CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R92CIDCFGR_SCID_Pos                      4
#define RCC_R92CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R92CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R92CIDCFGR_SEMWLC_Pos                    16
#define RCC_R92CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R92CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R92SEMCR register */
#define RCC_R92SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R92SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R92SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R92SEMCR_SEMCID_Pos                      4
#define RCC_R92SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R92SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R93CIDCFGR register */
#define RCC_R93CIDCFGR_CFEN_Pos                      0
#define RCC_R93CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R93CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R93CIDCFGR_SEM_EN_Pos                    1
#define RCC_R93CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R93CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R93CIDCFGR_SCID_Pos                      4
#define RCC_R93CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R93CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R93CIDCFGR_SEMWLC_Pos                    16
#define RCC_R93CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R93CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R93SEMCR register */
#define RCC_R93SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R93SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R93SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R93SEMCR_SEMCID_Pos                      4
#define RCC_R93SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R93SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R94CIDCFGR register */
#define RCC_R94CIDCFGR_CFEN_Pos                      0
#define RCC_R94CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R94CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R94CIDCFGR_SEM_EN_Pos                    1
#define RCC_R94CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R94CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R94CIDCFGR_SCID_Pos                      4
#define RCC_R94CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R94CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R94CIDCFGR_SEMWLC_Pos                    16
#define RCC_R94CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R94CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R94SEMCR register */
#define RCC_R94SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R94SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R94SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R94SEMCR_SEMCID_Pos                      4
#define RCC_R94SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R94SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R95CIDCFGR register */
#define RCC_R95CIDCFGR_CFEN_Pos                      0
#define RCC_R95CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R95CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R95CIDCFGR_SEM_EN_Pos                    1
#define RCC_R95CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R95CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R95CIDCFGR_SCID_Pos                      4
#define RCC_R95CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R95CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R95CIDCFGR_SEMWLC_Pos                    16
#define RCC_R95CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R95CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R95SEMCR register */
#define RCC_R95SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R95SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R95SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R95SEMCR_SEMCID_Pos                      4
#define RCC_R95SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R95SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R96CIDCFGR register */
#define RCC_R96CIDCFGR_CFEN_Pos                      0
#define RCC_R96CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R96CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R96CIDCFGR_SEM_EN_Pos                    1
#define RCC_R96CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R96CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R96CIDCFGR_SCID_Pos                      4
#define RCC_R96CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R96CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R96CIDCFGR_SEMWLC_Pos                    16
#define RCC_R96CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R96CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R96SEMCR register */
#define RCC_R96SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R96SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R96SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R96SEMCR_SEMCID_Pos                      4
#define RCC_R96SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R96SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R97CIDCFGR register */
#define RCC_R97CIDCFGR_CFEN_Pos                      0
#define RCC_R97CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R97CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R97CIDCFGR_SEM_EN_Pos                    1
#define RCC_R97CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R97CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R97CIDCFGR_SCID_Pos                      4
#define RCC_R97CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R97CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R97CIDCFGR_SEMWLC_Pos                    16
#define RCC_R97CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R97CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R97SEMCR register */
#define RCC_R97SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R97SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R97SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R97SEMCR_SEMCID_Pos                      4
#define RCC_R97SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R97SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R98CIDCFGR register */
#define RCC_R98CIDCFGR_CFEN_Pos                      0
#define RCC_R98CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R98CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R98CIDCFGR_SEM_EN_Pos                    1
#define RCC_R98CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R98CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R98CIDCFGR_SCID_Pos                      4
#define RCC_R98CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R98CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R98CIDCFGR_SEMWLC_Pos                    16
#define RCC_R98CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R98CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R98SEMCR register */
#define RCC_R98SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R98SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R98SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R98SEMCR_SEMCID_Pos                      4
#define RCC_R98SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R98SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R99CIDCFGR register */
#define RCC_R99CIDCFGR_CFEN_Pos                      0
#define RCC_R99CIDCFGR_CFEN_Msk                      (0x1 << 0)
#define RCC_R99CIDCFGR_CFEN                          (0x1 << 0)
#define RCC_R99CIDCFGR_SEM_EN_Pos                    1
#define RCC_R99CIDCFGR_SEM_EN_Msk                    (0x1 << 1)
#define RCC_R99CIDCFGR_SEM_EN                        (0x1 << 1)
#define RCC_R99CIDCFGR_SCID_Pos                      4
#define RCC_R99CIDCFGR_SCID_Msk                      (0x7 << 4)
#define RCC_R99CIDCFGR_SCID                          (0x7 << 4)
#define RCC_R99CIDCFGR_SEMWLC_Pos                    16
#define RCC_R99CIDCFGR_SEMWLC_Msk                    (0xff << 16)
#define RCC_R99CIDCFGR_SEMWLC                        (0xff << 16)

/* Bit fields for RCC_R99SEMCR register */
#define RCC_R99SEMCR_SEM_MUTEX_Pos                   0
#define RCC_R99SEMCR_SEM_MUTEX_Msk                   (0x1 << 0)
#define RCC_R99SEMCR_SEM_MUTEX                       (0x1 << 0)
#define RCC_R99SEMCR_SEMCID_Pos                      4
#define RCC_R99SEMCR_SEMCID_Msk                      (0x7 << 4)
#define RCC_R99SEMCR_SEMCID                          (0x7 << 4)

/* Bit fields for RCC_R100CIDCFGR register */
#define RCC_R100CIDCFGR_CFEN_Pos                     0
#define RCC_R100CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R100CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R100CIDCFGR_SEM_EN_Pos                   1
#define RCC_R100CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R100CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R100CIDCFGR_SCID_Pos                     4
#define RCC_R100CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R100CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R100CIDCFGR_SEMWLC_Pos                   16
#define RCC_R100CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R100CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R100SEMCR register */
#define RCC_R100SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R100SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R100SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R100SEMCR_SEMCID_Pos                     4
#define RCC_R100SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R100SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R101CIDCFGR register */
#define RCC_R101CIDCFGR_CFEN_Pos                     0
#define RCC_R101CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R101CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R101CIDCFGR_SEM_EN_Pos                   1
#define RCC_R101CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R101CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R101CIDCFGR_SCID_Pos                     4
#define RCC_R101CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R101CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R101CIDCFGR_SEMWLC_Pos                   16
#define RCC_R101CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R101CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R101SEMCR register */
#define RCC_R101SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R101SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R101SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R101SEMCR_SEMCID_Pos                     4
#define RCC_R101SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R101SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R102CIDCFGR register */
#define RCC_R102CIDCFGR_CFEN_Pos                     0
#define RCC_R102CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R102CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R102CIDCFGR_SEM_EN_Pos                   1
#define RCC_R102CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R102CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R102CIDCFGR_SCID_Pos                     4
#define RCC_R102CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R102CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R102CIDCFGR_SEMWLC_Pos                   16
#define RCC_R102CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R102CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R102SEMCR register */
#define RCC_R102SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R102SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R102SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R102SEMCR_SEMCID_Pos                     4
#define RCC_R102SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R102SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R103CIDCFGR register */
#define RCC_R103CIDCFGR_CFEN_Pos                     0
#define RCC_R103CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R103CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R103CIDCFGR_SEM_EN_Pos                   1
#define RCC_R103CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R103CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R103CIDCFGR_SCID_Pos                     4
#define RCC_R103CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R103CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R103CIDCFGR_SEMWLC_Pos                   16
#define RCC_R103CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R103CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R103SEMCR register */
#define RCC_R103SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R103SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R103SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R103SEMCR_SEMCID_Pos                     4
#define RCC_R103SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R103SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R104CIDCFGR register */
#define RCC_R104CIDCFGR_CFEN_Pos                     0
#define RCC_R104CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R104CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R104CIDCFGR_SEM_EN_Pos                   1
#define RCC_R104CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R104CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R104CIDCFGR_SCID_Pos                     4
#define RCC_R104CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R104CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R104CIDCFGR_SEMWLC_Pos                   16
#define RCC_R104CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R104CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R104SEMCR register */
#define RCC_R104SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R104SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R104SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R104SEMCR_SEMCID_Pos                     4
#define RCC_R104SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R104SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R105CIDCFGR register */
#define RCC_R105CIDCFGR_CFEN_Pos                     0
#define RCC_R105CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R105CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R105CIDCFGR_SEM_EN_Pos                   1
#define RCC_R105CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R105CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R105CIDCFGR_SCID_Pos                     4
#define RCC_R105CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R105CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R105CIDCFGR_SEMWLC_Pos                   16
#define RCC_R105CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R105CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R105SEMCR register */
#define RCC_R105SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R105SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R105SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R105SEMCR_SEMCID_Pos                     4
#define RCC_R105SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R105SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R106CIDCFGR register */
#define RCC_R106CIDCFGR_CFEN_Pos                     0
#define RCC_R106CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R106CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R106CIDCFGR_SEM_EN_Pos                   1
#define RCC_R106CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R106CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R106CIDCFGR_SCID_Pos                     4
#define RCC_R106CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R106CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R106CIDCFGR_SEMWLC_Pos                   16
#define RCC_R106CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R106CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R106SEMCR register */
#define RCC_R106SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R106SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R106SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R106SEMCR_SEMCID_Pos                     4
#define RCC_R106SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R106SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R107CIDCFGR register */
#define RCC_R107CIDCFGR_CFEN_Pos                     0
#define RCC_R107CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R107CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R107CIDCFGR_SEM_EN_Pos                   1
#define RCC_R107CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R107CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R107CIDCFGR_SCID_Pos                     4
#define RCC_R107CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R107CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R107CIDCFGR_SEMWLC_Pos                   16
#define RCC_R107CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R107CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R107SEMCR register */
#define RCC_R107SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R107SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R107SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R107SEMCR_SEMCID_Pos                     4
#define RCC_R107SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R107SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R108CIDCFGR register */
#define RCC_R108CIDCFGR_CFEN_Pos                     0
#define RCC_R108CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R108CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R108CIDCFGR_SEM_EN_Pos                   1
#define RCC_R108CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R108CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R108CIDCFGR_SCID_Pos                     4
#define RCC_R108CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R108CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R108CIDCFGR_SEMWLC_Pos                   16
#define RCC_R108CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R108CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R108SEMCR register */
#define RCC_R108SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R108SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R108SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R108SEMCR_SEMCID_Pos                     4
#define RCC_R108SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R108SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R109CIDCFGR register */
#define RCC_R109CIDCFGR_CFEN_Pos                     0
#define RCC_R109CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R109CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R109CIDCFGR_SEM_EN_Pos                   1
#define RCC_R109CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R109CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R109CIDCFGR_SCID_Pos                     4
#define RCC_R109CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R109CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R109CIDCFGR_SEMWLC_Pos                   16
#define RCC_R109CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R109CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R109SEMCR register */
#define RCC_R109SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R109SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R109SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R109SEMCR_SEMCID_Pos                     4
#define RCC_R109SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R109SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R110CIDCFGR register */
#define RCC_R110CIDCFGR_CFEN_Pos                     0
#define RCC_R110CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R110CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R110CIDCFGR_SEM_EN_Pos                   1
#define RCC_R110CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R110CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R110CIDCFGR_SCID_Pos                     4
#define RCC_R110CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R110CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R110CIDCFGR_SEMWLC_Pos                   16
#define RCC_R110CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R110CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R110SEMCR register */
#define RCC_R110SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R110SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R110SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R110SEMCR_SEMCID_Pos                     4
#define RCC_R110SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R110SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R111CIDCFGR register */
#define RCC_R111CIDCFGR_CFEN_Pos                     0
#define RCC_R111CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R111CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R111CIDCFGR_SEM_EN_Pos                   1
#define RCC_R111CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R111CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R111CIDCFGR_SCID_Pos                     4
#define RCC_R111CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R111CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R111CIDCFGR_SEMWLC_Pos                   16
#define RCC_R111CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R111CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R111SEMCR register */
#define RCC_R111SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R111SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R111SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R111SEMCR_SEMCID_Pos                     4
#define RCC_R111SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R111SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_R112CIDCFGR register */
#define RCC_R112CIDCFGR_CFEN_Pos                     0
#define RCC_R112CIDCFGR_CFEN_Msk                     (0x1 << 0)
#define RCC_R112CIDCFGR_CFEN                         (0x1 << 0)
#define RCC_R112CIDCFGR_SEM_EN_Pos                   1
#define RCC_R112CIDCFGR_SEM_EN_Msk                   (0x1 << 1)
#define RCC_R112CIDCFGR_SEM_EN                       (0x1 << 1)
#define RCC_R112CIDCFGR_SCID_Pos                     4
#define RCC_R112CIDCFGR_SCID_Msk                     (0x7 << 4)
#define RCC_R112CIDCFGR_SCID                         (0x7 << 4)
#define RCC_R112CIDCFGR_SEMWLC_Pos                   16
#define RCC_R112CIDCFGR_SEMWLC_Msk                   (0xff << 16)
#define RCC_R112CIDCFGR_SEMWLC                       (0xff << 16)

/* Bit fields for RCC_R112SEMCR register */
#define RCC_R112SEMCR_SEM_MUTEX_Pos                  0
#define RCC_R112SEMCR_SEM_MUTEX_Msk                  (0x1 << 0)
#define RCC_R112SEMCR_SEM_MUTEX                      (0x1 << 0)
#define RCC_R112SEMCR_SEMCID_Pos                     4
#define RCC_R112SEMCR_SEMCID_Msk                     (0x7 << 4)
#define RCC_R112SEMCR_SEMCID                         (0x7 << 4)

/* Bit fields for RCC_GRSTCSETR register */
#define RCC_GRSTCSETR_SYSRST_Pos                     0
#define RCC_GRSTCSETR_SYSRST_Msk                     (0x1 << 0)
#define RCC_GRSTCSETR_SYSRST                         (0x1 << 0)

/* Bit fields for RCC_C1RSTCSETR register */
#define RCC_C1RSTCSETR_C1RST_Pos                     0
#define RCC_C1RSTCSETR_C1RST_Msk                     (0x1 << 0)
#define RCC_C1RSTCSETR_C1RST                         (0x1 << 0)

/* Bit fields for RCC_C1P1RSTCSETR register */
#define RCC_C1P1RSTCSETR_C1P1PORRST_Pos              0
#define RCC_C1P1RSTCSETR_C1P1PORRST_Msk              (0x1 << 0)
#define RCC_C1P1RSTCSETR_C1P1PORRST                  (0x1 << 0)
#define RCC_C1P1RSTCSETR_C1P1RST_Pos                 1
#define RCC_C1P1RSTCSETR_C1P1RST_Msk                 (0x1 << 1)
#define RCC_C1P1RSTCSETR_C1P1RST                     (0x1 << 1)

/* Bit fields for RCC_C2RSTCSETR register */
#define RCC_C2RSTCSETR_C2RST_Pos                     0
#define RCC_C2RSTCSETR_C2RST_Msk                     (0x1 << 0)
#define RCC_C2RSTCSETR_C2RST                         (0x1 << 0)

/* Bit fields for RCC_HWRSTSCLRR register */
#define RCC_HWRSTSCLRR_PORRSTF_Pos                   0
#define RCC_HWRSTSCLRR_PORRSTF_Msk                   (0x1 << 0)
#define RCC_HWRSTSCLRR_PORRSTF                       (0x1 << 0)
#define RCC_HWRSTSCLRR_BORRSTF_Pos                   1
#define RCC_HWRSTSCLRR_BORRSTF_Msk                   (0x1 << 1)
#define RCC_HWRSTSCLRR_BORRSTF                       (0x1 << 1)
#define RCC_HWRSTSCLRR_PADRSTF_Pos                   2
#define RCC_HWRSTSCLRR_PADRSTF_Msk                   (0x1 << 2)
#define RCC_HWRSTSCLRR_PADRSTF                       (0x1 << 2)
#define RCC_HWRSTSCLRR_HCSSRSTF_Pos                  3
#define RCC_HWRSTSCLRR_HCSSRSTF_Msk                  (0x1 << 3)
#define RCC_HWRSTSCLRR_HCSSRSTF                      (0x1 << 3)
#define RCC_HWRSTSCLRR_VCORERSTF_Pos                 4
#define RCC_HWRSTSCLRR_VCORERSTF_Msk                 (0x1 << 4)
#define RCC_HWRSTSCLRR_VCORERSTF                     (0x1 << 4)
#define RCC_HWRSTSCLRR_VCPURSTF_Pos                  5
#define RCC_HWRSTSCLRR_VCPURSTF_Msk                  (0x1 << 5)
#define RCC_HWRSTSCLRR_VCPURSTF                      (0x1 << 5)
#define RCC_HWRSTSCLRR_SYSC1RSTF_Pos                 6
#define RCC_HWRSTSCLRR_SYSC1RSTF_Msk                 (0x1 << 6)
#define RCC_HWRSTSCLRR_SYSC1RSTF                     (0x1 << 6)
#define RCC_HWRSTSCLRR_SYSC2RSTF_Pos                 7
#define RCC_HWRSTSCLRR_SYSC2RSTF_Msk                 (0x1 << 7)
#define RCC_HWRSTSCLRR_SYSC2RSTF                     (0x1 << 7)
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF_Pos              8
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF_Msk              (0x1 << 8)
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF                  (0x1 << 8)
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF_Pos              9
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF_Msk              (0x1 << 9)
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF                  (0x1 << 9)
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF_Pos              10
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF_Msk              (0x1 << 10)
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF                  (0x1 << 10)
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF_Pos              11
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF_Msk              (0x1 << 11)
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF                  (0x1 << 11)
#define RCC_HWRSTSCLRR_IWDG5SYSRSTF_Pos              12
#define RCC_HWRSTSCLRR_IWDG5SYSRSTF_Msk              (0x1 << 12)
#define RCC_HWRSTSCLRR_IWDG5SYSRSTF                  (0x1 << 12)
#define RCC_HWRSTSCLRR_C1RSTF_Pos                    13
#define RCC_HWRSTSCLRR_C1RSTF_Msk                    (0x1 << 13)
#define RCC_HWRSTSCLRR_C1RSTF                        (0x1 << 13)
#define RCC_HWRSTSCLRR_C2RSTF_Pos                    14
#define RCC_HWRSTSCLRR_C2RSTF_Msk                    (0x1 << 14)
#define RCC_HWRSTSCLRR_C2RSTF                        (0x1 << 14)
#define RCC_HWRSTSCLRR_C1P1RSTF_Pos                  16
#define RCC_HWRSTSCLRR_C1P1RSTF_Msk                  (0x1 << 16)
#define RCC_HWRSTSCLRR_C1P1RSTF                      (0x1 << 16)
#define RCC_HWRSTSCLRR_RETCRCERRRSTF_Pos             17
#define RCC_HWRSTSCLRR_RETCRCERRRSTF_Msk             (0x1 << 17)
#define RCC_HWRSTSCLRR_RETCRCERRRSTF                 (0x1 << 17)
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Pos         18
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Msk         (0x1 << 18)
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF             (0x1 << 18)
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Pos        19
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Msk        (0x1 << 19)
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF            (0x1 << 19)

/* Bit fields for RCC_C1BOOTRSTSSETR register */
#define RCC_C1BOOTRSTSSETR_PORRSTF_Pos               0
#define RCC_C1BOOTRSTSSETR_PORRSTF_Msk               (0x1 << 0)
#define RCC_C1BOOTRSTSSETR_PORRSTF                   (0x1 << 0)
#define RCC_C1BOOTRSTSSETR_BORRSTF_Pos               1
#define RCC_C1BOOTRSTSSETR_BORRSTF_Msk               (0x1 << 1)
#define RCC_C1BOOTRSTSSETR_BORRSTF                   (0x1 << 1)
#define RCC_C1BOOTRSTSSETR_PADRSTF_Pos               2
#define RCC_C1BOOTRSTSSETR_PADRSTF_Msk               (0x1 << 2)
#define RCC_C1BOOTRSTSSETR_PADRSTF                   (0x1 << 2)
#define RCC_C1BOOTRSTSSETR_HCSSRSTF_Pos              3
#define RCC_C1BOOTRSTSSETR_HCSSRSTF_Msk              (0x1 << 3)
#define RCC_C1BOOTRSTSSETR_HCSSRSTF                  (0x1 << 3)
#define RCC_C1BOOTRSTSSETR_VCORERSTF_Pos             4
#define RCC_C1BOOTRSTSSETR_VCORERSTF_Msk             (0x1 << 4)
#define RCC_C1BOOTRSTSSETR_VCORERSTF                 (0x1 << 4)
#define RCC_C1BOOTRSTSSETR_VCPURSTF_Pos              5
#define RCC_C1BOOTRSTSSETR_VCPURSTF_Msk              (0x1 << 5)
#define RCC_C1BOOTRSTSSETR_VCPURSTF                  (0x1 << 5)
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF_Pos             6
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF_Msk             (0x1 << 6)
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF                 (0x1 << 6)
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF_Pos             7
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF_Msk             (0x1 << 7)
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF                 (0x1 << 7)
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Pos          8
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Msk          (0x1 << 8)
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF              (0x1 << 8)
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Pos          9
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Msk          (0x1 << 9)
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF              (0x1 << 9)
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Pos          10
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Msk          (0x1 << 10)
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF              (0x1 << 10)
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Pos          11
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Msk          (0x1 << 11)
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF              (0x1 << 11)
#define RCC_C1BOOTRSTSSETR_IWDG5SYSRSTF_Pos          12
#define RCC_C1BOOTRSTSSETR_IWDG5SYSRSTF_Msk          (0x1 << 12)
#define RCC_C1BOOTRSTSSETR_IWDG5SYSRSTF              (0x1 << 12)
#define RCC_C1BOOTRSTSSETR_C1RSTF_Pos                13
#define RCC_C1BOOTRSTSSETR_C1RSTF_Msk                (0x1 << 13)
#define RCC_C1BOOTRSTSSETR_C1RSTF                    (0x1 << 13)
#define RCC_C1BOOTRSTSSETR_C1P1RSTF_Pos              16
#define RCC_C1BOOTRSTSSETR_C1P1RSTF_Msk              (0x1 << 16)
#define RCC_C1BOOTRSTSSETR_C1P1RSTF                  (0x1 << 16)
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Pos         17
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Msk         (0x1 << 17)
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF             (0x1 << 17)
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos     18
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk     (0x1 << 18)
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF         (0x1 << 18)
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos    19
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk    (0x1 << 19)
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF        (0x1 << 19)
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF_Pos            20
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF_Msk            (0x1 << 20)
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF                (0x1 << 20)
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF_Pos            22
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF_Msk            (0x1 << 22)
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF                (0x1 << 22)
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF_Pos            23
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF_Msk            (0x1 << 23)
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF                (0x1 << 23)
#define RCC_C1BOOTRSTSSETR_IWDG1LOCRSTF_Pos          24
#define RCC_C1BOOTRSTSSETR_IWDG1LOCRSTF_Msk          (0x1 << 24)
#define RCC_C1BOOTRSTSSETR_IWDG1LOCRSTF              (0x1 << 24)
#define RCC_C1BOOTRSTSSETR_IWDG2LOCRSTF_Pos          25
#define RCC_C1BOOTRSTSSETR_IWDG2LOCRSTF_Msk          (0x1 << 25)
#define RCC_C1BOOTRSTSSETR_IWDG2LOCRSTF              (0x1 << 25)

/* Bit fields for RCC_C1BOOTRSTSCLRR register */
#define RCC_C1BOOTRSTSCLRR_PORRSTF_Pos               0
#define RCC_C1BOOTRSTSCLRR_PORRSTF_Msk               (0x1 << 0)
#define RCC_C1BOOTRSTSCLRR_PORRSTF                   (0x1 << 0)
#define RCC_C1BOOTRSTSCLRR_BORRSTF_Pos               1
#define RCC_C1BOOTRSTSCLRR_BORRSTF_Msk               (0x1 << 1)
#define RCC_C1BOOTRSTSCLRR_BORRSTF                   (0x1 << 1)
#define RCC_C1BOOTRSTSCLRR_PADRSTF_Pos               2
#define RCC_C1BOOTRSTSCLRR_PADRSTF_Msk               (0x1 << 2)
#define RCC_C1BOOTRSTSCLRR_PADRSTF                   (0x1 << 2)
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF_Pos              3
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF_Msk              (0x1 << 3)
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF                  (0x1 << 3)
#define RCC_C1BOOTRSTSCLRR_VCORERSTF_Pos             4
#define RCC_C1BOOTRSTSCLRR_VCORERSTF_Msk             (0x1 << 4)
#define RCC_C1BOOTRSTSCLRR_VCORERSTF                 (0x1 << 4)
#define RCC_C1BOOTRSTSCLRR_VCPURSTF_Pos              5
#define RCC_C1BOOTRSTSCLRR_VCPURSTF_Msk              (0x1 << 5)
#define RCC_C1BOOTRSTSCLRR_VCPURSTF                  (0x1 << 5)
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Pos             6
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Msk             (0x1 << 6)
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF                 (0x1 << 6)
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Pos             7
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Msk             (0x1 << 7)
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF                 (0x1 << 7)
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Pos          8
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Msk          (0x1 << 8)
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF              (0x1 << 8)
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Pos          9
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Msk          (0x1 << 9)
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF              (0x1 << 9)
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Pos          10
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Msk          (0x1 << 10)
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF              (0x1 << 10)
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Pos          11
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Msk          (0x1 << 11)
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF              (0x1 << 11)
#define RCC_C1BOOTRSTSCLRR_IWDG5SYSRSTF_Pos          12
#define RCC_C1BOOTRSTSCLRR_IWDG5SYSRSTF_Msk          (0x1 << 12)
#define RCC_C1BOOTRSTSCLRR_IWDG5SYSRSTF              (0x1 << 12)
#define RCC_C1BOOTRSTSCLRR_C1RSTF_Pos                13
#define RCC_C1BOOTRSTSCLRR_C1RSTF_Msk                (0x1 << 13)
#define RCC_C1BOOTRSTSCLRR_C1RSTF                    (0x1 << 13)
#define RCC_C1BOOTRSTSCLRR_C1P1RSTF_Pos              16
#define RCC_C1BOOTRSTSCLRR_C1P1RSTF_Msk              (0x1 << 16)
#define RCC_C1BOOTRSTSCLRR_C1P1RSTF                  (0x1 << 16)
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Pos         17
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Msk         (0x1 << 17)
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF             (0x1 << 17)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos     18
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk     (0x1 << 18)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF         (0x1 << 18)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos    19
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk    (0x1 << 19)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF        (0x1 << 19)
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Pos            20
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Msk            (0x1 << 20)
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF                (0x1 << 20)
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Pos            22
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Msk            (0x1 << 22)
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF                (0x1 << 22)
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Pos            23
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Msk            (0x1 << 23)
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF                (0x1 << 23)
#define RCC_C1BOOTRSTSCLRR_IWDG1LOCRSTF_Pos          24
#define RCC_C1BOOTRSTSCLRR_IWDG1LOCRSTF_Msk          (0x1 << 24)
#define RCC_C1BOOTRSTSCLRR_IWDG1LOCRSTF              (0x1 << 24)
#define RCC_C1BOOTRSTSCLRR_IWDG2LOCRSTF_Pos          25
#define RCC_C1BOOTRSTSCLRR_IWDG2LOCRSTF_Msk          (0x1 << 25)
#define RCC_C1BOOTRSTSCLRR_IWDG2LOCRSTF              (0x1 << 25)

/* Bit fields for RCC_C2BOOTRSTSSETR register */
#define RCC_C2BOOTRSTSSETR_PORRSTF_Pos               0
#define RCC_C2BOOTRSTSSETR_PORRSTF_Msk               (0x1 << 0)
#define RCC_C2BOOTRSTSSETR_PORRSTF                   (0x1 << 0)
#define RCC_C2BOOTRSTSSETR_BORRSTF_Pos               1
#define RCC_C2BOOTRSTSSETR_BORRSTF_Msk               (0x1 << 1)
#define RCC_C2BOOTRSTSSETR_BORRSTF                   (0x1 << 1)
#define RCC_C2BOOTRSTSSETR_PADRSTF_Pos               2
#define RCC_C2BOOTRSTSSETR_PADRSTF_Msk               (0x1 << 2)
#define RCC_C2BOOTRSTSSETR_PADRSTF                   (0x1 << 2)
#define RCC_C2BOOTRSTSSETR_HCSSRSTF_Pos              3
#define RCC_C2BOOTRSTSSETR_HCSSRSTF_Msk              (0x1 << 3)
#define RCC_C2BOOTRSTSSETR_HCSSRSTF                  (0x1 << 3)
#define RCC_C2BOOTRSTSSETR_VCORERSTF_Pos             4
#define RCC_C2BOOTRSTSSETR_VCORERSTF_Msk             (0x1 << 4)
#define RCC_C2BOOTRSTSSETR_VCORERSTF                 (0x1 << 4)
#define RCC_C2BOOTRSTSSETR_VCPURSTF_Pos              5
#define RCC_C2BOOTRSTSSETR_VCPURSTF_Msk              (0x1 << 5)
#define RCC_C2BOOTRSTSSETR_VCPURSTF                  (0x1 << 5)
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF_Pos             6
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF_Msk             (0x1 << 6)
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF                 (0x1 << 6)
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF_Pos             7
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF_Msk             (0x1 << 7)
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF                 (0x1 << 7)
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Pos          8
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Msk          (0x1 << 8)
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF              (0x1 << 8)
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Pos          9
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Msk          (0x1 << 9)
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF              (0x1 << 9)
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Pos          10
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Msk          (0x1 << 10)
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF              (0x1 << 10)
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Pos          11
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Msk          (0x1 << 11)
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF              (0x1 << 11)
#define RCC_C2BOOTRSTSSETR_IWDG5SYSRSTF_Pos          12
#define RCC_C2BOOTRSTSSETR_IWDG5SYSRSTF_Msk          (0x1 << 12)
#define RCC_C2BOOTRSTSSETR_IWDG5SYSRSTF              (0x1 << 12)
#define RCC_C2BOOTRSTSSETR_C2RSTF_Pos                14
#define RCC_C2BOOTRSTSSETR_C2RSTF_Msk                (0x1 << 14)
#define RCC_C2BOOTRSTSSETR_C2RSTF                    (0x1 << 14)
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Pos         17
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Msk         (0x1 << 17)
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF             (0x1 << 17)
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos     18
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk     (0x1 << 18)
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF         (0x1 << 18)
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos    19
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk    (0x1 << 19)
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF        (0x1 << 19)
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF_Pos            21
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF_Msk            (0x1 << 21)
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF                (0x1 << 21)
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF_Pos            23
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF_Msk            (0x1 << 23)
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF                (0x1 << 23)
#define RCC_C2BOOTRSTSSETR_IWDG3LOCRSTF_Pos          26
#define RCC_C2BOOTRSTSSETR_IWDG3LOCRSTF_Msk          (0x1 << 26)
#define RCC_C2BOOTRSTSSETR_IWDG3LOCRSTF              (0x1 << 26)
#define RCC_C2BOOTRSTSSETR_IWDG4LOCRSTF_Pos          27
#define RCC_C2BOOTRSTSSETR_IWDG4LOCRSTF_Msk          (0x1 << 27)
#define RCC_C2BOOTRSTSSETR_IWDG4LOCRSTF              (0x1 << 27)

/* Bit fields for RCC_C2BOOTRSTSCLRR register */
#define RCC_C2BOOTRSTSCLRR_PORRSTF_Pos               0
#define RCC_C2BOOTRSTSCLRR_PORRSTF_Msk               (0x1 << 0)
#define RCC_C2BOOTRSTSCLRR_PORRSTF                   (0x1 << 0)
#define RCC_C2BOOTRSTSCLRR_BORRSTF_Pos               1
#define RCC_C2BOOTRSTSCLRR_BORRSTF_Msk               (0x1 << 1)
#define RCC_C2BOOTRSTSCLRR_BORRSTF                   (0x1 << 1)
#define RCC_C2BOOTRSTSCLRR_PADRSTF_Pos               2
#define RCC_C2BOOTRSTSCLRR_PADRSTF_Msk               (0x1 << 2)
#define RCC_C2BOOTRSTSCLRR_PADRSTF                   (0x1 << 2)
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF_Pos              3
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF_Msk              (0x1 << 3)
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF                  (0x1 << 3)
#define RCC_C2BOOTRSTSCLRR_VCORERSTF_Pos             4
#define RCC_C2BOOTRSTSCLRR_VCORERSTF_Msk             (0x1 << 4)
#define RCC_C2BOOTRSTSCLRR_VCORERSTF                 (0x1 << 4)
#define RCC_C2BOOTRSTSCLRR_VCPURSTF_Pos              5
#define RCC_C2BOOTRSTSCLRR_VCPURSTF_Msk              (0x1 << 5)
#define RCC_C2BOOTRSTSCLRR_VCPURSTF                  (0x1 << 5)
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Pos             6
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Msk             (0x1 << 6)
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF                 (0x1 << 6)
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Pos             7
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Msk             (0x1 << 7)
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF                 (0x1 << 7)
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Pos          8
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Msk          (0x1 << 8)
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF              (0x1 << 8)
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Pos          9
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Msk          (0x1 << 9)
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF              (0x1 << 9)
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Pos          10
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Msk          (0x1 << 10)
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF              (0x1 << 10)
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Pos          11
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Msk          (0x1 << 11)
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF              (0x1 << 11)
#define RCC_C2BOOTRSTSCLRR_IWDG5SYSRSTF_Pos          12
#define RCC_C2BOOTRSTSCLRR_IWDG5SYSRSTF_Msk          (0x1 << 12)
#define RCC_C2BOOTRSTSCLRR_IWDG5SYSRSTF              (0x1 << 12)
#define RCC_C2BOOTRSTSCLRR_C2RSTF_Pos                14
#define RCC_C2BOOTRSTSCLRR_C2RSTF_Msk                (0x1 << 14)
#define RCC_C2BOOTRSTSCLRR_C2RSTF                    (0x1 << 14)
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Pos         17
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Msk         (0x1 << 17)
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF             (0x1 << 17)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos     18
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk     (0x1 << 18)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF         (0x1 << 18)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos    19
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk    (0x1 << 19)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF        (0x1 << 19)
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Pos            21
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Msk            (0x1 << 21)
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF                (0x1 << 21)
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Pos            23
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Msk            (0x1 << 23)
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF                (0x1 << 23)
#define RCC_C2BOOTRSTSCLRR_IWDG3LOCRSTF_Pos          26
#define RCC_C2BOOTRSTSCLRR_IWDG3LOCRSTF_Msk          (0x1 << 26)
#define RCC_C2BOOTRSTSCLRR_IWDG3LOCRSTF              (0x1 << 26)
#define RCC_C2BOOTRSTSCLRR_IWDG4LOCRSTF_Pos          27
#define RCC_C2BOOTRSTSCLRR_IWDG4LOCRSTF_Msk          (0x1 << 27)
#define RCC_C2BOOTRSTSCLRR_IWDG4LOCRSTF              (0x1 << 27)

/* Bit fields for RCC_C1SREQSETR register */
#define RCC_C1SREQSETR_STPREQ_P0_Pos                 0
#define RCC_C1SREQSETR_STPREQ_P0_Msk                 (0x1 << 0)
#define RCC_C1SREQSETR_STPREQ_P0                     (0x1 << 0)
#define RCC_C1SREQSETR_STPREQ_P1_Pos                 1
#define RCC_C1SREQSETR_STPREQ_P1_Msk                 (0x1 << 1)
#define RCC_C1SREQSETR_STPREQ_P1                     (0x1 << 1)

/* Bit fields for RCC_C1SREQCLRR register */
#define RCC_C1SREQCLRR_STPREQ_P0_Pos                 0
#define RCC_C1SREQCLRR_STPREQ_P0_Msk                 (0x1 << 0)
#define RCC_C1SREQCLRR_STPREQ_P0                     (0x1 << 0)
#define RCC_C1SREQCLRR_STPREQ_P1_Pos                 1
#define RCC_C1SREQCLRR_STPREQ_P1_Msk                 (0x1 << 1)
#define RCC_C1SREQCLRR_STPREQ_P1                     (0x1 << 1)

/* Bit fields for RCC_CPUBOOTCR register */
#define RCC_CPUBOOTCR_BOOT_CPU2_Pos                  0
#define RCC_CPUBOOTCR_BOOT_CPU2_Msk                  (0x1 << 0)
#define RCC_CPUBOOTCR_BOOT_CPU2                      (0x1 << 0)
#define RCC_CPUBOOTCR_BOOT_CPU1_Pos                  1
#define RCC_CPUBOOTCR_BOOT_CPU1_Msk                  (0x1 << 1)
#define RCC_CPUBOOTCR_BOOT_CPU1                      (0x1 << 1)

/* Bit fields for RCC_STBYBOOTCR register */
#define RCC_STBYBOOTCR_LEGACY_BEN_Pos                0
#define RCC_STBYBOOTCR_LEGACY_BEN_Msk                (0x1 << 0)
#define RCC_STBYBOOTCR_LEGACY_BEN                    (0x1 << 0)
#define RCC_STBYBOOTCR_CPU_BEN_SEL_Pos               1
#define RCC_STBYBOOTCR_CPU_BEN_SEL_Msk               (0x1 << 1)
#define RCC_STBYBOOTCR_CPU_BEN_SEL                   (0x1 << 1)
#define RCC_STBYBOOTCR_COLD_CPU2_Pos                 2
#define RCC_STBYBOOTCR_COLD_CPU2_Msk                 (0x1 << 2)
#define RCC_STBYBOOTCR_COLD_CPU2                     (0x1 << 2)
#define RCC_STBYBOOTCR_CPU2_HW_BEN_Pos               4
#define RCC_STBYBOOTCR_CPU2_HW_BEN_Msk               (0x1 << 4)
#define RCC_STBYBOOTCR_CPU2_HW_BEN                   (0x1 << 4)
#define RCC_STBYBOOTCR_CPU1_HW_BEN_Pos               5
#define RCC_STBYBOOTCR_CPU1_HW_BEN_Msk               (0x1 << 5)
#define RCC_STBYBOOTCR_CPU1_HW_BEN                   (0x1 << 5)
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Pos          8
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Msk          (0x1 << 8)
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN              (0x1 << 8)

/* Bit fields for RCC_BDCR register */
#define RCC_BDCR_LSEON_Pos                           0
#define RCC_BDCR_LSEON_Msk                           (0x1 << 0)
#define RCC_BDCR_LSEON                               (0x1 << 0)
#define RCC_BDCR_LSEBYP_Pos                          1
#define RCC_BDCR_LSEBYP_Msk                          (0x1 << 1)
#define RCC_BDCR_LSEBYP                              (0x1 << 1)
#define RCC_BDCR_LSERDY_Pos                          2
#define RCC_BDCR_LSERDY_Msk                          (0x1 << 2)
#define RCC_BDCR_LSERDY                              (0x1 << 2)
#define RCC_BDCR_LSEDIGBYP_Pos                       3
#define RCC_BDCR_LSEDIGBYP_Msk                       (0x1 << 3)
#define RCC_BDCR_LSEDIGBYP                           (0x1 << 3)
#define RCC_BDCR_LSEDRV_Pos                          4
#define RCC_BDCR_LSEDRV_Msk                          (0x3 << 4)
#define RCC_BDCR_LSEDRV                              (0x3 << 4)
#define RCC_BDCR_LSECSSON_Pos                        6
#define RCC_BDCR_LSECSSON_Msk                        (0x1 << 6)
#define RCC_BDCR_LSECSSON                            (0x1 << 6)
#define RCC_BDCR_LSEGFON_Pos                         7
#define RCC_BDCR_LSEGFON_Msk                         (0x1 << 7)
#define RCC_BDCR_LSEGFON                             (0x1 << 7)
#define RCC_BDCR_LSECSSD_Pos                         8
#define RCC_BDCR_LSECSSD_Msk                         (0x1 << 8)
#define RCC_BDCR_LSECSSD                             (0x1 << 8)
#define RCC_BDCR_LSION_Pos                           9
#define RCC_BDCR_LSION_Msk                           (0x1 << 9)
#define RCC_BDCR_LSION                               (0x1 << 9)
#define RCC_BDCR_LSIRDY_Pos                          10
#define RCC_BDCR_LSIRDY_Msk                          (0x1 << 10)
#define RCC_BDCR_LSIRDY                              (0x1 << 10)
#define RCC_BDCR_RTCSRC_Pos                          16
#define RCC_BDCR_RTCSRC_Msk                          (0x3 << 16)
#define RCC_BDCR_RTCSRC                              (0x3 << 16)
#define RCC_BDCR_RTCCKEN_Pos                         20
#define RCC_BDCR_RTCCKEN_Msk                         (0x1 << 20)
#define RCC_BDCR_RTCCKEN                             (0x1 << 20)
#define RCC_BDCR_CSIFREQSEL_Pos                      24
#define RCC_BDCR_CSIFREQSEL_Msk                      (0x1 << 24)
#define RCC_BDCR_CSIFREQSEL                          (0x1 << 24)
#define RCC_BDCR_C3SYSTICKSEL_Pos                    25
#define RCC_BDCR_C3SYSTICKSEL_Msk                    (0x1 << 25)
#define RCC_BDCR_C3SYSTICKSEL                        (0x1 << 25)
#define RCC_BDCR_VSWRST_Pos                          31
#define RCC_BDCR_VSWRST_Msk                          (0x1 << 31)
#define RCC_BDCR_VSWRST                              (0x1 << 31)

/* Bit fields for RCC_SRDCR register */
#define RCC_SRDCR_CSION_Pos                          0
#define RCC_SRDCR_CSION_Msk                          (0x1 << 0)
#define RCC_SRDCR_CSION                              (0x1 << 0)
#define RCC_SRDCR_CSIKERON_Pos                       1
#define RCC_SRDCR_CSIKERON_Msk                       (0x1 << 1)
#define RCC_SRDCR_CSIKERON                           (0x1 << 1)
#define RCC_SRDCR_CSIRDY_Pos                         2
#define RCC_SRDCR_CSIRDY_Msk                         (0x1 << 2)
#define RCC_SRDCR_CSIRDY                             (0x1 << 2)
#define RCC_SRDCR_D3PERCKSEL_Pos                     16
#define RCC_SRDCR_D3PERCKSEL_Msk                     (0x3 << 16)
#define RCC_SRDCR_D3PERCKSEL                         (0x3 << 16)

/* Bit fields for RCC_SRDSR register */
#define RCC_SRDSR_D3STATE_Pos                        0
#define RCC_SRDSR_D3STATE_Msk                        (0x3 << 0)
#define RCC_SRDSR_D3STATE                            (0x3 << 0)

/* Bit fields for RCC_RDCR register */
#define RCC_RDCR_MRD_Pos                             16
#define RCC_RDCR_MRD_Msk                             (0x1f << 16)
#define RCC_RDCR_MRD                                 (0x1f << 16)
#define RCC_RDCR_EADLY_Pos                           24
#define RCC_RDCR_EADLY_Msk                           (0x7 << 24)
#define RCC_RDCR_EADLY                               (0x7 << 24)

/* Bit fields for RCC_PWRLPDLYCR register */
#define RCC_PWRLPDLYCR_PWRLP_DLY_Pos                 0
#define RCC_PWRLPDLYCR_PWRLP_DLY_Msk                 (0x3fffff << 0)
#define RCC_PWRLPDLYCR_PWRLP_DLY                     (0x3fffff << 0)
#define RCC_PWRLPDLYCR_CPU2TMPSKP_Pos                24
#define RCC_PWRLPDLYCR_CPU2TMPSKP_Msk                (0x1 << 24)
#define RCC_PWRLPDLYCR_CPU2TMPSKP                    (0x1 << 24)

/* Bit fields for RCC_C1CIESETR register */
#define RCC_C1CIESETR_LSIRDYIE_Pos                   0
#define RCC_C1CIESETR_LSIRDYIE_Msk                   (0x1 << 0)
#define RCC_C1CIESETR_LSIRDYIE                       (0x1 << 0)
#define RCC_C1CIESETR_LSERDYIE_Pos                   1
#define RCC_C1CIESETR_LSERDYIE_Msk                   (0x1 << 1)
#define RCC_C1CIESETR_LSERDYIE                       (0x1 << 1)
#define RCC_C1CIESETR_HSIRDYIE_Pos                   2
#define RCC_C1CIESETR_HSIRDYIE_Msk                   (0x1 << 2)
#define RCC_C1CIESETR_HSIRDYIE                       (0x1 << 2)
#define RCC_C1CIESETR_HSERDYIE_Pos                   3
#define RCC_C1CIESETR_HSERDYIE_Msk                   (0x1 << 3)
#define RCC_C1CIESETR_HSERDYIE                       (0x1 << 3)
#define RCC_C1CIESETR_CSIRDYIE_Pos                   4
#define RCC_C1CIESETR_CSIRDYIE_Msk                   (0x1 << 4)
#define RCC_C1CIESETR_CSIRDYIE                       (0x1 << 4)
#define RCC_C1CIESETR_SHSIRDYIE_Pos                  5
#define RCC_C1CIESETR_SHSIRDYIE_Msk                  (0x1 << 5)
#define RCC_C1CIESETR_SHSIRDYIE                      (0x1 << 5)
#define RCC_C1CIESETR_PLL1RDYIE_Pos                  6
#define RCC_C1CIESETR_PLL1RDYIE_Msk                  (0x1 << 6)
#define RCC_C1CIESETR_PLL1RDYIE                      (0x1 << 6)
#define RCC_C1CIESETR_PLL2RDYIE_Pos                  7
#define RCC_C1CIESETR_PLL2RDYIE_Msk                  (0x1 << 7)
#define RCC_C1CIESETR_PLL2RDYIE                      (0x1 << 7)
#define RCC_C1CIESETR_PLL3RDYIE_Pos                  8
#define RCC_C1CIESETR_PLL3RDYIE_Msk                  (0x1 << 8)
#define RCC_C1CIESETR_PLL3RDYIE                      (0x1 << 8)
#define RCC_C1CIESETR_PLL4RDYIE_Pos                  9
#define RCC_C1CIESETR_PLL4RDYIE_Msk                  (0x1 << 9)
#define RCC_C1CIESETR_PLL4RDYIE                      (0x1 << 9)
#define RCC_C1CIESETR_PLL5RDYIE_Pos                  10
#define RCC_C1CIESETR_PLL5RDYIE_Msk                  (0x1 << 10)
#define RCC_C1CIESETR_PLL5RDYIE                      (0x1 << 10)
#define RCC_C1CIESETR_PLL6RDYIE_Pos                  11
#define RCC_C1CIESETR_PLL6RDYIE_Msk                  (0x1 << 11)
#define RCC_C1CIESETR_PLL6RDYIE                      (0x1 << 11)
#define RCC_C1CIESETR_PLL7RDYIE_Pos                  12
#define RCC_C1CIESETR_PLL7RDYIE_Msk                  (0x1 << 12)
#define RCC_C1CIESETR_PLL7RDYIE                      (0x1 << 12)
#define RCC_C1CIESETR_PLL8RDYIE_Pos                  13
#define RCC_C1CIESETR_PLL8RDYIE_Msk                  (0x1 << 13)
#define RCC_C1CIESETR_PLL8RDYIE                      (0x1 << 13)
#define RCC_C1CIESETR_LSECSSIE_Pos                   16
#define RCC_C1CIESETR_LSECSSIE_Msk                   (0x1 << 16)
#define RCC_C1CIESETR_LSECSSIE                       (0x1 << 16)
#define RCC_C1CIESETR_WKUPIE_Pos                     20
#define RCC_C1CIESETR_WKUPIE_Msk                     (0x1 << 20)
#define RCC_C1CIESETR_WKUPIE                         (0x1 << 20)

/* Bit fields for RCC_C1CIFCLRR register */
#define RCC_C1CIFCLRR_LSIRDYF_Pos                    0
#define RCC_C1CIFCLRR_LSIRDYF_Msk                    (0x1 << 0)
#define RCC_C1CIFCLRR_LSIRDYF                        (0x1 << 0)
#define RCC_C1CIFCLRR_LSERDYF_Pos                    1
#define RCC_C1CIFCLRR_LSERDYF_Msk                    (0x1 << 1)
#define RCC_C1CIFCLRR_LSERDYF                        (0x1 << 1)
#define RCC_C1CIFCLRR_HSIRDYF_Pos                    2
#define RCC_C1CIFCLRR_HSIRDYF_Msk                    (0x1 << 2)
#define RCC_C1CIFCLRR_HSIRDYF                        (0x1 << 2)
#define RCC_C1CIFCLRR_HSERDYF_Pos                    3
#define RCC_C1CIFCLRR_HSERDYF_Msk                    (0x1 << 3)
#define RCC_C1CIFCLRR_HSERDYF                        (0x1 << 3)
#define RCC_C1CIFCLRR_CSIRDYF_Pos                    4
#define RCC_C1CIFCLRR_CSIRDYF_Msk                    (0x1 << 4)
#define RCC_C1CIFCLRR_CSIRDYF                        (0x1 << 4)
#define RCC_C1CIFCLRR_SHSIRDYF_Pos                   5
#define RCC_C1CIFCLRR_SHSIRDYF_Msk                   (0x1 << 5)
#define RCC_C1CIFCLRR_SHSIRDYF                       (0x1 << 5)
#define RCC_C1CIFCLRR_PLL1RDYF_Pos                   6
#define RCC_C1CIFCLRR_PLL1RDYF_Msk                   (0x1 << 6)
#define RCC_C1CIFCLRR_PLL1RDYF                       (0x1 << 6)
#define RCC_C1CIFCLRR_PLL2RDYF_Pos                   7
#define RCC_C1CIFCLRR_PLL2RDYF_Msk                   (0x1 << 7)
#define RCC_C1CIFCLRR_PLL2RDYF                       (0x1 << 7)
#define RCC_C1CIFCLRR_PLL3RDYF_Pos                   8
#define RCC_C1CIFCLRR_PLL3RDYF_Msk                   (0x1 << 8)
#define RCC_C1CIFCLRR_PLL3RDYF                       (0x1 << 8)
#define RCC_C1CIFCLRR_PLL4RDYF_Pos                   9
#define RCC_C1CIFCLRR_PLL4RDYF_Msk                   (0x1 << 9)
#define RCC_C1CIFCLRR_PLL4RDYF                       (0x1 << 9)
#define RCC_C1CIFCLRR_PLL5RDYF_Pos                   10
#define RCC_C1CIFCLRR_PLL5RDYF_Msk                   (0x1 << 10)
#define RCC_C1CIFCLRR_PLL5RDYF                       (0x1 << 10)
#define RCC_C1CIFCLRR_PLL6RDYF_Pos                   11
#define RCC_C1CIFCLRR_PLL6RDYF_Msk                   (0x1 << 11)
#define RCC_C1CIFCLRR_PLL6RDYF                       (0x1 << 11)
#define RCC_C1CIFCLRR_PLL7RDYF_Pos                   12
#define RCC_C1CIFCLRR_PLL7RDYF_Msk                   (0x1 << 12)
#define RCC_C1CIFCLRR_PLL7RDYF                       (0x1 << 12)
#define RCC_C1CIFCLRR_PLL8RDYF_Pos                   13
#define RCC_C1CIFCLRR_PLL8RDYF_Msk                   (0x1 << 13)
#define RCC_C1CIFCLRR_PLL8RDYF                       (0x1 << 13)
#define RCC_C1CIFCLRR_LSECSSF_Pos                    16
#define RCC_C1CIFCLRR_LSECSSF_Msk                    (0x1 << 16)
#define RCC_C1CIFCLRR_LSECSSF                        (0x1 << 16)
#define RCC_C1CIFCLRR_WKUPF_Pos                      20
#define RCC_C1CIFCLRR_WKUPF_Msk                      (0x1 << 20)
#define RCC_C1CIFCLRR_WKUPF                          (0x1 << 20)

/* Bit fields for RCC_C2CIESETR register */
#define RCC_C2CIESETR_LSIRDYIE_Pos                   0
#define RCC_C2CIESETR_LSIRDYIE_Msk                   (0x1 << 0)
#define RCC_C2CIESETR_LSIRDYIE                       (0x1 << 0)
#define RCC_C2CIESETR_LSERDYIE_Pos                   1
#define RCC_C2CIESETR_LSERDYIE_Msk                   (0x1 << 1)
#define RCC_C2CIESETR_LSERDYIE                       (0x1 << 1)
#define RCC_C2CIESETR_HSIRDYIE_Pos                   2
#define RCC_C2CIESETR_HSIRDYIE_Msk                   (0x1 << 2)
#define RCC_C2CIESETR_HSIRDYIE                       (0x1 << 2)
#define RCC_C2CIESETR_HSERDYIE_Pos                   3
#define RCC_C2CIESETR_HSERDYIE_Msk                   (0x1 << 3)
#define RCC_C2CIESETR_HSERDYIE                       (0x1 << 3)
#define RCC_C2CIESETR_CSIRDYIE_Pos                   4
#define RCC_C2CIESETR_CSIRDYIE_Msk                   (0x1 << 4)
#define RCC_C2CIESETR_CSIRDYIE                       (0x1 << 4)
#define RCC_C2CIESETR_SHSIRDYIE_Pos                  5
#define RCC_C2CIESETR_SHSIRDYIE_Msk                  (0x1 << 5)
#define RCC_C2CIESETR_SHSIRDYIE                      (0x1 << 5)
#define RCC_C2CIESETR_PLL1RDYIE_Pos                  6
#define RCC_C2CIESETR_PLL1RDYIE_Msk                  (0x1 << 6)
#define RCC_C2CIESETR_PLL1RDYIE                      (0x1 << 6)
#define RCC_C2CIESETR_PLL2RDYIE_Pos                  7
#define RCC_C2CIESETR_PLL2RDYIE_Msk                  (0x1 << 7)
#define RCC_C2CIESETR_PLL2RDYIE                      (0x1 << 7)
#define RCC_C2CIESETR_PLL3RDYIE_Pos                  8
#define RCC_C2CIESETR_PLL3RDYIE_Msk                  (0x1 << 8)
#define RCC_C2CIESETR_PLL3RDYIE                      (0x1 << 8)
#define RCC_C2CIESETR_PLL4RDYIE_Pos                  9
#define RCC_C2CIESETR_PLL4RDYIE_Msk                  (0x1 << 9)
#define RCC_C2CIESETR_PLL4RDYIE                      (0x1 << 9)
#define RCC_C2CIESETR_PLL5RDYIE_Pos                  10
#define RCC_C2CIESETR_PLL5RDYIE_Msk                  (0x1 << 10)
#define RCC_C2CIESETR_PLL5RDYIE                      (0x1 << 10)
#define RCC_C2CIESETR_PLL6RDYIE_Pos                  11
#define RCC_C2CIESETR_PLL6RDYIE_Msk                  (0x1 << 11)
#define RCC_C2CIESETR_PLL6RDYIE                      (0x1 << 11)
#define RCC_C2CIESETR_PLL7RDYIE_Pos                  12
#define RCC_C2CIESETR_PLL7RDYIE_Msk                  (0x1 << 12)
#define RCC_C2CIESETR_PLL7RDYIE                      (0x1 << 12)
#define RCC_C2CIESETR_PLL8RDYIE_Pos                  13
#define RCC_C2CIESETR_PLL8RDYIE_Msk                  (0x1 << 13)
#define RCC_C2CIESETR_PLL8RDYIE                      (0x1 << 13)
#define RCC_C2CIESETR_LSECSSIE_Pos                   16
#define RCC_C2CIESETR_LSECSSIE_Msk                   (0x1 << 16)
#define RCC_C2CIESETR_LSECSSIE                       (0x1 << 16)
#define RCC_C2CIESETR_WKUPIE_Pos                     20
#define RCC_C2CIESETR_WKUPIE_Msk                     (0x1 << 20)
#define RCC_C2CIESETR_WKUPIE                         (0x1 << 20)

/* Bit fields for RCC_C2CIFCLRR register */
#define RCC_C2CIFCLRR_LSIRDYF_Pos                    0
#define RCC_C2CIFCLRR_LSIRDYF_Msk                    (0x1 << 0)
#define RCC_C2CIFCLRR_LSIRDYF                        (0x1 << 0)
#define RCC_C2CIFCLRR_LSERDYF_Pos                    1
#define RCC_C2CIFCLRR_LSERDYF_Msk                    (0x1 << 1)
#define RCC_C2CIFCLRR_LSERDYF                        (0x1 << 1)
#define RCC_C2CIFCLRR_HSIRDYF_Pos                    2
#define RCC_C2CIFCLRR_HSIRDYF_Msk                    (0x1 << 2)
#define RCC_C2CIFCLRR_HSIRDYF                        (0x1 << 2)
#define RCC_C2CIFCLRR_HSERDYF_Pos                    3
#define RCC_C2CIFCLRR_HSERDYF_Msk                    (0x1 << 3)
#define RCC_C2CIFCLRR_HSERDYF                        (0x1 << 3)
#define RCC_C2CIFCLRR_CSIRDYF_Pos                    4
#define RCC_C2CIFCLRR_CSIRDYF_Msk                    (0x1 << 4)
#define RCC_C2CIFCLRR_CSIRDYF                        (0x1 << 4)
#define RCC_C2CIFCLRR_SHSIRDYF_Pos                   5
#define RCC_C2CIFCLRR_SHSIRDYF_Msk                   (0x1 << 5)
#define RCC_C2CIFCLRR_SHSIRDYF                       (0x1 << 5)
#define RCC_C2CIFCLRR_PLL1RDYF_Pos                   6
#define RCC_C2CIFCLRR_PLL1RDYF_Msk                   (0x1 << 6)
#define RCC_C2CIFCLRR_PLL1RDYF                       (0x1 << 6)
#define RCC_C2CIFCLRR_PLL2RDYF_Pos                   7
#define RCC_C2CIFCLRR_PLL2RDYF_Msk                   (0x1 << 7)
#define RCC_C2CIFCLRR_PLL2RDYF                       (0x1 << 7)
#define RCC_C2CIFCLRR_PLL3RDYF_Pos                   8
#define RCC_C2CIFCLRR_PLL3RDYF_Msk                   (0x1 << 8)
#define RCC_C2CIFCLRR_PLL3RDYF                       (0x1 << 8)
#define RCC_C2CIFCLRR_PLL4RDYF_Pos                   9
#define RCC_C2CIFCLRR_PLL4RDYF_Msk                   (0x1 << 9)
#define RCC_C2CIFCLRR_PLL4RDYF                       (0x1 << 9)
#define RCC_C2CIFCLRR_PLL5RDYF_Pos                   10
#define RCC_C2CIFCLRR_PLL5RDYF_Msk                   (0x1 << 10)
#define RCC_C2CIFCLRR_PLL5RDYF                       (0x1 << 10)
#define RCC_C2CIFCLRR_PLL6RDYF_Pos                   11
#define RCC_C2CIFCLRR_PLL6RDYF_Msk                   (0x1 << 11)
#define RCC_C2CIFCLRR_PLL6RDYF                       (0x1 << 11)
#define RCC_C2CIFCLRR_PLL7RDYF_Pos                   12
#define RCC_C2CIFCLRR_PLL7RDYF_Msk                   (0x1 << 12)
#define RCC_C2CIFCLRR_PLL7RDYF                       (0x1 << 12)
#define RCC_C2CIFCLRR_PLL8RDYF_Pos                   13
#define RCC_C2CIFCLRR_PLL8RDYF_Msk                   (0x1 << 13)
#define RCC_C2CIFCLRR_PLL8RDYF                       (0x1 << 13)
#define RCC_C2CIFCLRR_LSECSSF_Pos                    16
#define RCC_C2CIFCLRR_LSECSSF_Msk                    (0x1 << 16)
#define RCC_C2CIFCLRR_LSECSSF                        (0x1 << 16)
#define RCC_C2CIFCLRR_WKUPF_Pos                      20
#define RCC_C2CIFCLRR_WKUPF_Msk                      (0x1 << 20)
#define RCC_C2CIFCLRR_WKUPF                          (0x1 << 20)

/* Bit fields for RCC_IWDGC1FZSETR register */
#define RCC_IWDGC1FZSETR_FZ_IWDG1_Pos                0
#define RCC_IWDGC1FZSETR_FZ_IWDG1_Msk                (0x1 << 0)
#define RCC_IWDGC1FZSETR_FZ_IWDG1                    (0x1 << 0)
#define RCC_IWDGC1FZSETR_FZ_IWDG2_Pos                1
#define RCC_IWDGC1FZSETR_FZ_IWDG2_Msk                (0x1 << 1)
#define RCC_IWDGC1FZSETR_FZ_IWDG2                    (0x1 << 1)

/* Bit fields for RCC_IWDGC1FZCLRR register */
#define RCC_IWDGC1FZCLRR_FZ_IWDG1_Pos                0
#define RCC_IWDGC1FZCLRR_FZ_IWDG1_Msk                (0x1 << 0)
#define RCC_IWDGC1FZCLRR_FZ_IWDG1                    (0x1 << 0)
#define RCC_IWDGC1FZCLRR_FZ_IWDG2_Pos                1
#define RCC_IWDGC1FZCLRR_FZ_IWDG2_Msk                (0x1 << 1)
#define RCC_IWDGC1FZCLRR_FZ_IWDG2                    (0x1 << 1)

/* Bit fields for RCC_IWDGC1CFGSETR register */
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Pos         0
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Msk         (0x1 << 0)
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN             (0x1 << 0)
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Pos         2
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Msk         (0x1 << 2)
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN             (0x1 << 2)
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST_Pos           18
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST_Msk           (0x1 << 18)
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST               (0x1 << 18)

/* Bit fields for RCC_IWDGC1CFGCLRR register */
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Pos         0
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Msk         (0x1 << 0)
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN             (0x1 << 0)
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Pos         2
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Msk         (0x1 << 2)
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN             (0x1 << 2)
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Pos           18
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Msk           (0x1 << 18)
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST               (0x1 << 18)

/* Bit fields for RCC_IWDGC2FZSETR register */
#define RCC_IWDGC2FZSETR_FZ_IWDG3_Pos                0
#define RCC_IWDGC2FZSETR_FZ_IWDG3_Msk                (0x1 << 0)
#define RCC_IWDGC2FZSETR_FZ_IWDG3                    (0x1 << 0)
#define RCC_IWDGC2FZSETR_FZ_IWDG4_Pos                1
#define RCC_IWDGC2FZSETR_FZ_IWDG4_Msk                (0x1 << 1)
#define RCC_IWDGC2FZSETR_FZ_IWDG4                    (0x1 << 1)

/* Bit fields for RCC_IWDGC2FZCLRR register */
#define RCC_IWDGC2FZCLRR_FZ_IWDG3_Pos                0
#define RCC_IWDGC2FZCLRR_FZ_IWDG3_Msk                (0x1 << 0)
#define RCC_IWDGC2FZCLRR_FZ_IWDG3                    (0x1 << 0)
#define RCC_IWDGC2FZCLRR_FZ_IWDG4_Pos                1
#define RCC_IWDGC2FZCLRR_FZ_IWDG4_Msk                (0x1 << 1)
#define RCC_IWDGC2FZCLRR_FZ_IWDG4                    (0x1 << 1)

/* Bit fields for RCC_IWDGC2CFGSETR register */
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Pos         0
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Msk         (0x1 << 0)
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN             (0x1 << 0)
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Pos         2
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Msk         (0x1 << 2)
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN             (0x1 << 2)
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST_Pos           18
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST_Msk           (0x1 << 18)
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST               (0x1 << 18)

/* Bit fields for RCC_IWDGC2CFGCLRR register */
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Pos         0
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Msk         (0x1 << 0)
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN             (0x1 << 0)
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Pos         2
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Msk         (0x1 << 2)
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN             (0x1 << 2)
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Pos           18
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Msk           (0x1 << 18)
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST               (0x1 << 18)

/* Bit fields for RCC_IWDGC3CFGSETR register */
#define RCC_IWDGC3CFGSETR_IWDG5_SYSRSTEN_Pos         0
#define RCC_IWDGC3CFGSETR_IWDG5_SYSRSTEN_Msk         (0x1 << 0)
#define RCC_IWDGC3CFGSETR_IWDG5_SYSRSTEN             (0x1 << 0)

/* Bit fields for RCC_IWDGC3CFGCLRR register */
#define RCC_IWDGC3CFGCLRR_IWDG5_SYSRSTEN_Pos         0
#define RCC_IWDGC3CFGCLRR_IWDG5_SYSRSTEN_Msk         (0x1 << 0)
#define RCC_IWDGC3CFGCLRR_IWDG5_SYSRSTEN             (0x1 << 0)

/* Bit fields for RCC_MCO1CFGR register */
#define RCC_MCO1CFGR_MCO1SEL_Pos                     0
#define RCC_MCO1CFGR_MCO1SEL_Msk                     (0x1 << 0)
#define RCC_MCO1CFGR_MCO1SEL                         (0x1 << 0)
#define RCC_MCO1CFGR_MCO1ON_Pos                      8
#define RCC_MCO1CFGR_MCO1ON_Msk                      (0x1 << 8)
#define RCC_MCO1CFGR_MCO1ON                          (0x1 << 8)

/* Bit fields for RCC_MCO2CFGR register */
#define RCC_MCO2CFGR_MCO2SEL_Pos                     0
#define RCC_MCO2CFGR_MCO2SEL_Msk                     (0x1 << 0)
#define RCC_MCO2CFGR_MCO2SEL                         (0x1 << 0)
#define RCC_MCO2CFGR_MCO2ON_Pos                      8
#define RCC_MCO2CFGR_MCO2ON_Msk                      (0x1 << 8)
#define RCC_MCO2CFGR_MCO2ON                          (0x1 << 8)

/* Bit fields for RCC_OCENSETR register */
#define RCC_OCENSETR_HSION_Pos                       0
#define RCC_OCENSETR_HSION_Msk                       (0x1 << 0)
#define RCC_OCENSETR_HSION                           (0x1 << 0)
#define RCC_OCENSETR_HSIKERON_Pos                    1
#define RCC_OCENSETR_HSIKERON_Msk                    (0x1 << 1)
#define RCC_OCENSETR_HSIKERON                        (0x1 << 1)
#define RCC_OCENSETR_DIGBYP_Pos                      7
#define RCC_OCENSETR_DIGBYP_Msk                      (0x1 << 7)
#define RCC_OCENSETR_DIGBYP                          (0x1 << 7)
#define RCC_OCENSETR_HSEON_Pos                       8
#define RCC_OCENSETR_HSEON_Msk                       (0x1 << 8)
#define RCC_OCENSETR_HSEON                           (0x1 << 8)
#define RCC_OCENSETR_HSEKERON_Pos                    9
#define RCC_OCENSETR_HSEKERON_Msk                    (0x1 << 9)
#define RCC_OCENSETR_HSEKERON                        (0x1 << 9)
#define RCC_OCENSETR_HSEBYP_Pos                      10
#define RCC_OCENSETR_HSEBYP_Msk                      (0x1 << 10)
#define RCC_OCENSETR_HSEBYP                          (0x1 << 10)
#define RCC_OCENSETR_HSECSSON_Pos                    11
#define RCC_OCENSETR_HSECSSON_Msk                    (0x1 << 11)
#define RCC_OCENSETR_HSECSSON                        (0x1 << 11)

/* Bit fields for RCC_OCENCLRR register */
#define RCC_OCENCLRR_HSION_Pos                       0
#define RCC_OCENCLRR_HSION_Msk                       (0x1 << 0)
#define RCC_OCENCLRR_HSION                           (0x1 << 0)
#define RCC_OCENCLRR_HSIKERON_Pos                    1
#define RCC_OCENCLRR_HSIKERON_Msk                    (0x1 << 1)
#define RCC_OCENCLRR_HSIKERON                        (0x1 << 1)
#define RCC_OCENCLRR_DIGBYP_Pos                      7
#define RCC_OCENCLRR_DIGBYP_Msk                      (0x1 << 7)
#define RCC_OCENCLRR_DIGBYP                          (0x1 << 7)
#define RCC_OCENCLRR_HSEON_Pos                       8
#define RCC_OCENCLRR_HSEON_Msk                       (0x1 << 8)
#define RCC_OCENCLRR_HSEON                           (0x1 << 8)
#define RCC_OCENCLRR_HSEKERON_Pos                    9
#define RCC_OCENCLRR_HSEKERON_Msk                    (0x1 << 9)
#define RCC_OCENCLRR_HSEKERON                        (0x1 << 9)
#define RCC_OCENCLRR_HSEBYP_Pos                      10
#define RCC_OCENCLRR_HSEBYP_Msk                      (0x1 << 10)
#define RCC_OCENCLRR_HSEBYP                          (0x1 << 10)

/* Bit fields for RCC_OCRDYR register */
#define RCC_OCRDYR_HSIRDY_Pos                        0
#define RCC_OCRDYR_HSIRDY_Msk                        (0x1 << 0)
#define RCC_OCRDYR_HSIRDY                            (0x1 << 0)
#define RCC_OCRDYR_HSERDY_Pos                        8
#define RCC_OCRDYR_HSERDY_Msk                        (0x1 << 8)
#define RCC_OCRDYR_HSERDY                            (0x1 << 8)
#define RCC_OCRDYR_CKREST_Pos                        25
#define RCC_OCRDYR_CKREST_Msk                        (0x1 << 25)
#define RCC_OCRDYR_CKREST                            (0x1 << 25)

/* Bit fields for RCC_STBYRDCR register */
#define RCC_STBYRDCR_STBYRD_Pos                      0
#define RCC_STBYRDCR_STBYRD_Msk                      (0x1f << 0)
#define RCC_STBYRDCR_STBYRD                          (0x1f << 0)

/* Bit fields for RCC_HSICFGR register */
#define RCC_HSICFGR_HSITRIM_Pos                      8
#define RCC_HSICFGR_HSITRIM_Msk                      (0x7f << 8)
#define RCC_HSICFGR_HSITRIM                          (0x7f << 8)
#define RCC_HSICFGR_HSICAL_Pos                       16
#define RCC_HSICFGR_HSICAL_Msk                       (0xfff << 16)
#define RCC_HSICFGR_HSICAL                           (0xfff << 16)

/* Bit fields for RCC_CSICFGR register */
#define RCC_CSICFGR_CSITRIM_Pos                      8
#define RCC_CSICFGR_CSITRIM_Msk                      (0x1f << 8)
#define RCC_CSICFGR_CSITRIM                          (0x1f << 8)
#define RCC_CSICFGR_CSICAL_Pos                       16
#define RCC_CSICFGR_CSICAL_Msk                       (0xff << 16)
#define RCC_CSICFGR_CSICAL                           (0xff << 16)

/* Bit fields for RCC_SHSICR register */
#define RCC_SHSICR_SHSION_Pos                        0
#define RCC_SHSICR_SHSION_Msk                        (0x1 << 0)
#define RCC_SHSICR_SHSION                            (0x1 << 0)
#define RCC_SHSICR_SHSIRDY_Pos                       1
#define RCC_SHSICR_SHSIRDY_Msk                       (0x1 << 1)
#define RCC_SHSICR_SHSIRDY                           (0x1 << 1)

/* Bit fields for RCC_RTCDIVR register */
#define RCC_RTCDIVR_RTCDIV_Pos                       0
#define RCC_RTCDIVR_RTCDIV_Msk                       (0x3f << 0)
#define RCC_RTCDIVR_RTCDIV                           (0x3f << 0)

/* Bit fields for RCC_APB1DIVR register */
#define RCC_APB1DIVR_APB1DIV_Pos                     0
#define RCC_APB1DIVR_APB1DIV_Msk                     (0x7 << 0)
#define RCC_APB1DIVR_APB1DIV                         (0x7 << 0)
#define RCC_APB1DIVR_APB1DIVRDY_Pos                  31
#define RCC_APB1DIVR_APB1DIVRDY_Msk                  (0x1 << 31)
#define RCC_APB1DIVR_APB1DIVRDY                      (0x1 << 31)

/* Bit fields for RCC_APB2DIVR register */
#define RCC_APB2DIVR_APB2DIV_Pos                     0
#define RCC_APB2DIVR_APB2DIV_Msk                     (0x7 << 0)
#define RCC_APB2DIVR_APB2DIV                         (0x7 << 0)
#define RCC_APB2DIVR_APB2DIVRDY_Pos                  31
#define RCC_APB2DIVR_APB2DIVRDY_Msk                  (0x1 << 31)
#define RCC_APB2DIVR_APB2DIVRDY                      (0x1 << 31)

/* Bit fields for RCC_APB3DIVR register */
#define RCC_APB3DIVR_APB3DIV_Pos                     0
#define RCC_APB3DIVR_APB3DIV_Msk                     (0x7 << 0)
#define RCC_APB3DIVR_APB3DIV                         (0x7 << 0)
#define RCC_APB3DIVR_APB3DIVRDY_Pos                  31
#define RCC_APB3DIVR_APB3DIVRDY_Msk                  (0x1 << 31)
#define RCC_APB3DIVR_APB3DIVRDY                      (0x1 << 31)

/* Bit fields for RCC_APB4DIVR register */
#define RCC_APB4DIVR_APB4DIV_Pos                     0
#define RCC_APB4DIVR_APB4DIV_Msk                     (0x7 << 0)
#define RCC_APB4DIVR_APB4DIV                         (0x7 << 0)
#define RCC_APB4DIVR_APB4DIVRDY_Pos                  31
#define RCC_APB4DIVR_APB4DIVRDY_Msk                  (0x1 << 31)
#define RCC_APB4DIVR_APB4DIVRDY                      (0x1 << 31)

/* Bit fields for RCC_APBDBGDIVR register */
#define RCC_APBDBGDIVR_APBDBGDIV_Pos                 0
#define RCC_APBDBGDIVR_APBDBGDIV_Msk                 (0x7 << 0)
#define RCC_APBDBGDIVR_APBDBGDIV                     (0x7 << 0)
#define RCC_APBDBGDIVR_APBDBGDIVRDY_Pos              31
#define RCC_APBDBGDIVR_APBDBGDIVRDY_Msk              (0x1 << 31)
#define RCC_APBDBGDIVR_APBDBGDIVRDY                  (0x1 << 31)

/* Bit fields for RCC_TIMG1PRER register */
#define RCC_TIMG1PRER_TIMG1PRE_Pos                   0
#define RCC_TIMG1PRER_TIMG1PRE_Msk                   (0x1 << 0)
#define RCC_TIMG1PRER_TIMG1PRE                       (0x1 << 0)
#define RCC_TIMG1PRER_TIMG1PRERDY_Pos                31
#define RCC_TIMG1PRER_TIMG1PRERDY_Msk                (0x1 << 31)
#define RCC_TIMG1PRER_TIMG1PRERDY                    (0x1 << 31)

/* Bit fields for RCC_TIMG2PRER register */
#define RCC_TIMG2PRER_TIMG2PRE_Pos                   0
#define RCC_TIMG2PRER_TIMG2PRE_Msk                   (0x1 << 0)
#define RCC_TIMG2PRER_TIMG2PRE                       (0x1 << 0)
#define RCC_TIMG2PRER_TIMG2PRERDY_Pos                31
#define RCC_TIMG2PRER_TIMG2PRERDY_Msk                (0x1 << 31)
#define RCC_TIMG2PRER_TIMG2PRERDY                    (0x1 << 31)

/* Bit fields for RCC_LSMCUDIVR register */
#define RCC_LSMCUDIVR_LSMCUDIV_Pos                   0
#define RCC_LSMCUDIVR_LSMCUDIV_Msk                   (0x1 << 0)
#define RCC_LSMCUDIVR_LSMCUDIV                       (0x1 << 0)
#define RCC_LSMCUDIVR_LSMCUDIVRDY_Pos                31
#define RCC_LSMCUDIVR_LSMCUDIVRDY_Msk                (0x1 << 31)
#define RCC_LSMCUDIVR_LSMCUDIVRDY                    (0x1 << 31)

/* Bit fields for RCC_DDRCP1CFGR register */
#define RCC_DDRCP1CFGR_DDRCP1EN_Pos                  1
#define RCC_DDRCP1CFGR_DDRCP1EN_Msk                  (0x1 << 1)
#define RCC_DDRCP1CFGR_DDRCP1EN                      (0x1 << 1)
#define RCC_DDRCP1CFGR_DDRCP1LPEN_Pos                2
#define RCC_DDRCP1CFGR_DDRCP1LPEN_Msk                (0x1 << 2)
#define RCC_DDRCP1CFGR_DDRCP1LPEN                    (0x1 << 2)

/* Bit fields for RCC_DDRCP2CFGR register */
#define RCC_DDRCP2CFGR_DDRCP2EN_Pos                  1
#define RCC_DDRCP2CFGR_DDRCP2EN_Msk                  (0x1 << 1)
#define RCC_DDRCP2CFGR_DDRCP2EN                      (0x1 << 1)
#define RCC_DDRCP2CFGR_DDRCP2LPEN_Pos                2
#define RCC_DDRCP2CFGR_DDRCP2LPEN_Msk                (0x1 << 2)
#define RCC_DDRCP2CFGR_DDRCP2LPEN                    (0x1 << 2)

/* Bit fields for RCC_DDRCAPBCFGR register */
#define RCC_DDRCAPBCFGR_DDRCAPBRST_Pos               0
#define RCC_DDRCAPBCFGR_DDRCAPBRST_Msk               (0x1 << 0)
#define RCC_DDRCAPBCFGR_DDRCAPBRST                   (0x1 << 0)
#define RCC_DDRCAPBCFGR_DDRCAPBEN_Pos                1
#define RCC_DDRCAPBCFGR_DDRCAPBEN_Msk                (0x1 << 1)
#define RCC_DDRCAPBCFGR_DDRCAPBEN                    (0x1 << 1)
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN_Pos              2
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN_Msk              (0x1 << 2)
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN                  (0x1 << 2)

/* Bit fields for RCC_DDRPHYCAPBCFGR register */
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Pos         0
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Msk         (0x1 << 0)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST             (0x1 << 0)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Pos          1
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Msk          (0x1 << 1)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN              (0x1 << 1)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Pos        2
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Msk        (0x1 << 2)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN            (0x1 << 2)

/* Bit fields for RCC_DDRPHYCCFGR register */
#define RCC_DDRPHYCCFGR_DDRPHYCEN_Pos                1
#define RCC_DDRPHYCCFGR_DDRPHYCEN_Msk                (0x1 << 1)
#define RCC_DDRPHYCCFGR_DDRPHYCEN                    (0x1 << 1)

/* Bit fields for RCC_DDRCFGR register */
#define RCC_DDRCFGR_DDRCFGRST_Pos                    0
#define RCC_DDRCFGR_DDRCFGRST_Msk                    (0x1 << 0)
#define RCC_DDRCFGR_DDRCFGRST                        (0x1 << 0)
#define RCC_DDRCFGR_DDRCFGEN_Pos                     1
#define RCC_DDRCFGR_DDRCFGEN_Msk                     (0x1 << 1)
#define RCC_DDRCFGR_DDRCFGEN                         (0x1 << 1)
#define RCC_DDRCFGR_DDRCFGLPEN_Pos                   2
#define RCC_DDRCFGR_DDRCFGLPEN_Msk                   (0x1 << 2)
#define RCC_DDRCFGR_DDRCFGLPEN                       (0x1 << 2)

/* Bit fields for RCC_DDRITFCFGR register */
#define RCC_DDRITFCFGR_DDRPHYCRST_Pos                0
#define RCC_DDRITFCFGR_DDRPHYCRST_Msk                (0x1 << 0)
#define RCC_DDRITFCFGR_DDRPHYCRST                    (0x1 << 0)
#define RCC_DDRITFCFGR_DDRCRST_Pos                   1
#define RCC_DDRITFCFGR_DDRCRST_Msk                   (0x1 << 1)
#define RCC_DDRITFCFGR_DDRCRST                       (0x1 << 1)
#define RCC_DDRITFCFGR_DDRCP1RST_Pos                 2
#define RCC_DDRITFCFGR_DDRCP1RST_Msk                 (0x1 << 2)
#define RCC_DDRITFCFGR_DDRCP1RST                     (0x1 << 2)
#define RCC_DDRITFCFGR_DDRCP2RST_Pos                 3
#define RCC_DDRITFCFGR_DDRCP2RST_Msk                 (0x1 << 3)
#define RCC_DDRITFCFGR_DDRCP2RST                     (0x1 << 3)
#define RCC_DDRITFCFGR_DDRCKMOD_Pos                  4
#define RCC_DDRITFCFGR_DDRCKMOD_Msk                  (0x3 << 4)
#define RCC_DDRITFCFGR_DDRCKMOD                      (0x3 << 4)
#define RCC_DDRITFCFGR_DDRSHR_Pos                    8
#define RCC_DDRITFCFGR_DDRSHR_Msk                    (0x1 << 8)
#define RCC_DDRITFCFGR_DDRSHR                        (0x1 << 8)
#define RCC_DDRITFCFGR_DDRPHYDLP_Pos                 16
#define RCC_DDRITFCFGR_DDRPHYDLP_Msk                 (0x1 << 16)
#define RCC_DDRITFCFGR_DDRPHYDLP                     (0x1 << 16)

/* Bit fields for RCC_C3CFGR register */
#define RCC_C3CFGR_C3RST_Pos                         0
#define RCC_C3CFGR_C3RST_Msk                         (0x1 << 0)
#define RCC_C3CFGR_C3RST                             (0x1 << 0)
#define RCC_C3CFGR_C3EN_Pos                          1
#define RCC_C3CFGR_C3EN_Msk                          (0x1 << 1)
#define RCC_C3CFGR_C3EN                              (0x1 << 1)
#define RCC_C3CFGR_C3LPEN_Pos                        2
#define RCC_C3CFGR_C3LPEN_Msk                        (0x1 << 2)
#define RCC_C3CFGR_C3LPEN                            (0x1 << 2)
#define RCC_C3CFGR_C3AMEN_Pos                        3
#define RCC_C3CFGR_C3AMEN_Msk                        (0x1 << 3)
#define RCC_C3CFGR_C3AMEN                            (0x1 << 3)
#define RCC_C3CFGR_LPTIM3C3EN_Pos                    16
#define RCC_C3CFGR_LPTIM3C3EN_Msk                    (0x1 << 16)
#define RCC_C3CFGR_LPTIM3C3EN                        (0x1 << 16)
#define RCC_C3CFGR_LPTIM4C3EN_Pos                    17
#define RCC_C3CFGR_LPTIM4C3EN_Msk                    (0x1 << 17)
#define RCC_C3CFGR_LPTIM4C3EN                        (0x1 << 17)
#define RCC_C3CFGR_LPTIM5C3EN_Pos                    18
#define RCC_C3CFGR_LPTIM5C3EN_Msk                    (0x1 << 18)
#define RCC_C3CFGR_LPTIM5C3EN                        (0x1 << 18)
#define RCC_C3CFGR_SPI8C3EN_Pos                      19
#define RCC_C3CFGR_SPI8C3EN_Msk                      (0x1 << 19)
#define RCC_C3CFGR_SPI8C3EN                          (0x1 << 19)
#define RCC_C3CFGR_LPUART1C3EN_Pos                   20
#define RCC_C3CFGR_LPUART1C3EN_Msk                   (0x1 << 20)
#define RCC_C3CFGR_LPUART1C3EN                       (0x1 << 20)
#define RCC_C3CFGR_I2C8C3EN_Pos                      21
#define RCC_C3CFGR_I2C8C3EN_Msk                      (0x1 << 21)
#define RCC_C3CFGR_I2C8C3EN                          (0x1 << 21)
#define RCC_C3CFGR_MDF2C3EN_Pos                      23
#define RCC_C3CFGR_MDF2C3EN_Msk                      (0x1 << 23)
#define RCC_C3CFGR_MDF2C3EN                          (0x1 << 23)
#define RCC_C3CFGR_GPIOZC3EN_Pos                     24
#define RCC_C3CFGR_GPIOZC3EN_Msk                     (0x1 << 24)
#define RCC_C3CFGR_GPIOZC3EN                         (0x1 << 24)
#define RCC_C3CFGR_LPDMAC3EN_Pos                     25
#define RCC_C3CFGR_LPDMAC3EN_Msk                     (0x1 << 25)
#define RCC_C3CFGR_LPDMAC3EN                         (0x1 << 25)
#define RCC_C3CFGR_RTCC3EN_Pos                       26
#define RCC_C3CFGR_RTCC3EN_Msk                       (0x1 << 26)
#define RCC_C3CFGR_RTCC3EN                           (0x1 << 26)
#define RCC_C3CFGR_I3C4C3EN_Pos                      27
#define RCC_C3CFGR_I3C4C3EN_Msk                      (0x1 << 27)
#define RCC_C3CFGR_I3C4C3EN                          (0x1 << 27)

/* Bit fields for RCC_SYSRAMCFGR register */
#define RCC_SYSRAMCFGR_SYSRAMEN_Pos                  1
#define RCC_SYSRAMCFGR_SYSRAMEN_Msk                  (0x1 << 1)
#define RCC_SYSRAMCFGR_SYSRAMEN                      (0x1 << 1)
#define RCC_SYSRAMCFGR_SYSRAMLPEN_Pos                2
#define RCC_SYSRAMCFGR_SYSRAMLPEN_Msk                (0x1 << 2)
#define RCC_SYSRAMCFGR_SYSRAMLPEN                    (0x1 << 2)

/* Bit fields for RCC_VDERAMCFGR register */
#define RCC_VDERAMCFGR_VDERAMEN_Pos                  1
#define RCC_VDERAMCFGR_VDERAMEN_Msk                  (0x1 << 1)
#define RCC_VDERAMCFGR_VDERAMEN                      (0x1 << 1)
#define RCC_VDERAMCFGR_VDERAMLPEN_Pos                2
#define RCC_VDERAMCFGR_VDERAMLPEN_Msk                (0x1 << 2)
#define RCC_VDERAMCFGR_VDERAMLPEN                    (0x1 << 2)

/* Bit fields for RCC_SRAM1CFGR register */
#define RCC_SRAM1CFGR_SRAM1EN_Pos                    1
#define RCC_SRAM1CFGR_SRAM1EN_Msk                    (0x1 << 1)
#define RCC_SRAM1CFGR_SRAM1EN                        (0x1 << 1)
#define RCC_SRAM1CFGR_SRAM1LPEN_Pos                  2
#define RCC_SRAM1CFGR_SRAM1LPEN_Msk                  (0x1 << 2)
#define RCC_SRAM1CFGR_SRAM1LPEN                      (0x1 << 2)

/* Bit fields for RCC_SRAM2CFGR register */
#define RCC_SRAM2CFGR_SRAM2EN_Pos                    1
#define RCC_SRAM2CFGR_SRAM2EN_Msk                    (0x1 << 1)
#define RCC_SRAM2CFGR_SRAM2EN                        (0x1 << 1)
#define RCC_SRAM2CFGR_SRAM2LPEN_Pos                  2
#define RCC_SRAM2CFGR_SRAM2LPEN_Msk                  (0x1 << 2)
#define RCC_SRAM2CFGR_SRAM2LPEN                      (0x1 << 2)

/* Bit fields for RCC_RETRAMCFGR register */
#define RCC_RETRAMCFGR_RETRAMEN_Pos                  1
#define RCC_RETRAMCFGR_RETRAMEN_Msk                  (0x1 << 1)
#define RCC_RETRAMCFGR_RETRAMEN                      (0x1 << 1)
#define RCC_RETRAMCFGR_RETRAMLPEN_Pos                2
#define RCC_RETRAMCFGR_RETRAMLPEN_Msk                (0x1 << 2)
#define RCC_RETRAMCFGR_RETRAMLPEN                    (0x1 << 2)

/* Bit fields for RCC_BKPSRAMCFGR register */
#define RCC_BKPSRAMCFGR_BKPSRAMEN_Pos                1
#define RCC_BKPSRAMCFGR_BKPSRAMEN_Msk                (0x1 << 1)
#define RCC_BKPSRAMCFGR_BKPSRAMEN                    (0x1 << 1)
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN_Pos              2
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN_Msk              (0x1 << 2)
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN                  (0x1 << 2)

/* Bit fields for RCC_LPSRAM1CFGR register */
#define RCC_LPSRAM1CFGR_LPSRAM1EN_Pos                1
#define RCC_LPSRAM1CFGR_LPSRAM1EN_Msk                (0x1 << 1)
#define RCC_LPSRAM1CFGR_LPSRAM1EN                    (0x1 << 1)
#define RCC_LPSRAM1CFGR_LPSRAM1LPEN_Pos              2
#define RCC_LPSRAM1CFGR_LPSRAM1LPEN_Msk              (0x1 << 2)
#define RCC_LPSRAM1CFGR_LPSRAM1LPEN                  (0x1 << 2)
#define RCC_LPSRAM1CFGR_LPSRAM1AMEN_Pos              3
#define RCC_LPSRAM1CFGR_LPSRAM1AMEN_Msk              (0x1 << 3)
#define RCC_LPSRAM1CFGR_LPSRAM1AMEN                  (0x1 << 3)

/* Bit fields for RCC_LPSRAM2CFGR register */
#define RCC_LPSRAM2CFGR_LPSRAM2EN_Pos                1
#define RCC_LPSRAM2CFGR_LPSRAM2EN_Msk                (0x1 << 1)
#define RCC_LPSRAM2CFGR_LPSRAM2EN                    (0x1 << 1)
#define RCC_LPSRAM2CFGR_LPSRAM2LPEN_Pos              2
#define RCC_LPSRAM2CFGR_LPSRAM2LPEN_Msk              (0x1 << 2)
#define RCC_LPSRAM2CFGR_LPSRAM2LPEN                  (0x1 << 2)
#define RCC_LPSRAM2CFGR_LPSRAM2AMEN_Pos              3
#define RCC_LPSRAM2CFGR_LPSRAM2AMEN_Msk              (0x1 << 3)
#define RCC_LPSRAM2CFGR_LPSRAM2AMEN                  (0x1 << 3)

/* Bit fields for RCC_LPSRAM3CFGR register */
#define RCC_LPSRAM3CFGR_LPSRAM3EN_Pos                1
#define RCC_LPSRAM3CFGR_LPSRAM3EN_Msk                (0x1 << 1)
#define RCC_LPSRAM3CFGR_LPSRAM3EN                    (0x1 << 1)
#define RCC_LPSRAM3CFGR_LPSRAM3LPEN_Pos              2
#define RCC_LPSRAM3CFGR_LPSRAM3LPEN_Msk              (0x1 << 2)
#define RCC_LPSRAM3CFGR_LPSRAM3LPEN                  (0x1 << 2)
#define RCC_LPSRAM3CFGR_LPSRAM3AMEN_Pos              3
#define RCC_LPSRAM3CFGR_LPSRAM3AMEN_Msk              (0x1 << 3)
#define RCC_LPSRAM3CFGR_LPSRAM3AMEN                  (0x1 << 3)

/* Bit fields for RCC_OSPI1CFGR register */
#define RCC_OSPI1CFGR_OSPI1RST_Pos                   0
#define RCC_OSPI1CFGR_OSPI1RST_Msk                   (0x1 << 0)
#define RCC_OSPI1CFGR_OSPI1RST                       (0x1 << 0)
#define RCC_OSPI1CFGR_OSPI1EN_Pos                    1
#define RCC_OSPI1CFGR_OSPI1EN_Msk                    (0x1 << 1)
#define RCC_OSPI1CFGR_OSPI1EN                        (0x1 << 1)
#define RCC_OSPI1CFGR_OSPI1LPEN_Pos                  2
#define RCC_OSPI1CFGR_OSPI1LPEN_Msk                  (0x1 << 2)
#define RCC_OSPI1CFGR_OSPI1LPEN                      (0x1 << 2)
#define RCC_OSPI1CFGR_OSPI1DLLRST_Pos                16
#define RCC_OSPI1CFGR_OSPI1DLLRST_Msk                (0x1 << 16)
#define RCC_OSPI1CFGR_OSPI1DLLRST                    (0x1 << 16)

/* Bit fields for RCC_OSPI2CFGR register */
#define RCC_OSPI2CFGR_OSPI2RST_Pos                   0
#define RCC_OSPI2CFGR_OSPI2RST_Msk                   (0x1 << 0)
#define RCC_OSPI2CFGR_OSPI2RST                       (0x1 << 0)
#define RCC_OSPI2CFGR_OSPI2EN_Pos                    1
#define RCC_OSPI2CFGR_OSPI2EN_Msk                    (0x1 << 1)
#define RCC_OSPI2CFGR_OSPI2EN                        (0x1 << 1)
#define RCC_OSPI2CFGR_OSPI2LPEN_Pos                  2
#define RCC_OSPI2CFGR_OSPI2LPEN_Msk                  (0x1 << 2)
#define RCC_OSPI2CFGR_OSPI2LPEN                      (0x1 << 2)
#define RCC_OSPI2CFGR_OSPI2DLLRST_Pos                16
#define RCC_OSPI2CFGR_OSPI2DLLRST_Msk                (0x1 << 16)
#define RCC_OSPI2CFGR_OSPI2DLLRST                    (0x1 << 16)

/* Bit fields for RCC_FMCCFGR register */
#define RCC_FMCCFGR_FMCRST_Pos                       0
#define RCC_FMCCFGR_FMCRST_Msk                       (0x1 << 0)
#define RCC_FMCCFGR_FMCRST                           (0x1 << 0)
#define RCC_FMCCFGR_FMCEN_Pos                        1
#define RCC_FMCCFGR_FMCEN_Msk                        (0x1 << 1)
#define RCC_FMCCFGR_FMCEN                            (0x1 << 1)
#define RCC_FMCCFGR_FMCLPEN_Pos                      2
#define RCC_FMCCFGR_FMCLPEN_Msk                      (0x1 << 2)
#define RCC_FMCCFGR_FMCLPEN                          (0x1 << 2)

/* Bit fields for RCC_DBGCFGR register */
#define RCC_DBGCFGR_DBGEN_Pos                        8
#define RCC_DBGCFGR_DBGEN_Msk                        (0x1 << 8)
#define RCC_DBGCFGR_DBGEN                            (0x1 << 8)
#define RCC_DBGCFGR_TRACEEN_Pos                      9
#define RCC_DBGCFGR_TRACEEN_Msk                      (0x1 << 9)
#define RCC_DBGCFGR_TRACEEN                          (0x1 << 9)
#define RCC_DBGCFGR_DBGRST_Pos                       12
#define RCC_DBGCFGR_DBGRST_Msk                       (0x1 << 12)
#define RCC_DBGCFGR_DBGRST                           (0x1 << 12)

/* Bit fields for RCC_STM500CFGR register */
#define RCC_STM500CFGR_STM500EN_Pos                  1
#define RCC_STM500CFGR_STM500EN_Msk                  (0x1 << 1)
#define RCC_STM500CFGR_STM500EN                      (0x1 << 1)
#define RCC_STM500CFGR_STM500LPEN_Pos                2
#define RCC_STM500CFGR_STM500LPEN_Msk                (0x1 << 2)
#define RCC_STM500CFGR_STM500LPEN                    (0x1 << 2)

/* Bit fields for RCC_ETRCFGR register */
#define RCC_ETRCFGR_ETREN_Pos                        1
#define RCC_ETRCFGR_ETREN_Msk                        (0x1 << 1)
#define RCC_ETRCFGR_ETREN                            (0x1 << 1)
#define RCC_ETRCFGR_ETRLPEN_Pos                      2
#define RCC_ETRCFGR_ETRLPEN_Msk                      (0x1 << 2)
#define RCC_ETRCFGR_ETRLPEN                          (0x1 << 2)

/* Bit fields for RCC_GPIOACFGR register */
#define RCC_GPIOACFGR_GPIOxRST_Pos                   0
#define RCC_GPIOACFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOACFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOACFGR_GPIOxEN_Pos                    1
#define RCC_GPIOACFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOACFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOACFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOACFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOACFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOBCFGR register */
#define RCC_GPIOBCFGR_GPIOxRST_Pos                   0
#define RCC_GPIOBCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOBCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOBCFGR_GPIOxEN_Pos                    1
#define RCC_GPIOBCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOBCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOBCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOBCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOBCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOCCFGR register */
#define RCC_GPIOCCFGR_GPIOxRST_Pos                   0
#define RCC_GPIOCCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOCCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOCCFGR_GPIOxEN_Pos                    1
#define RCC_GPIOCCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOCCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOCCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOCCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOCCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIODCFGR register */
#define RCC_GPIODCFGR_GPIOxRST_Pos                   0
#define RCC_GPIODCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIODCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIODCFGR_GPIOxEN_Pos                    1
#define RCC_GPIODCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIODCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIODCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIODCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIODCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOECFGR register */
#define RCC_GPIOECFGR_GPIOxRST_Pos                   0
#define RCC_GPIOECFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOECFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOECFGR_GPIOxEN_Pos                    1
#define RCC_GPIOECFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOECFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOECFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOECFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOECFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOFCFGR register */
#define RCC_GPIOFCFGR_GPIOxRST_Pos                   0
#define RCC_GPIOFCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOFCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOFCFGR_GPIOxEN_Pos                    1
#define RCC_GPIOFCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOFCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOFCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOFCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOFCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOGCFGR register */
#define RCC_GPIOGCFGR_GPIOxRST_Pos                   0
#define RCC_GPIOGCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOGCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOGCFGR_GPIOxEN_Pos                    1
#define RCC_GPIOGCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOGCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOGCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOGCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOGCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOHCFGR register */
#define RCC_GPIOHCFGR_GPIOxRST_Pos                   0
#define RCC_GPIOHCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOHCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOHCFGR_GPIOxEN_Pos                    1
#define RCC_GPIOHCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOHCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOHCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOHCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOHCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOICFGR register */
#define RCC_GPIOICFGR_GPIOxRST_Pos                   0
#define RCC_GPIOICFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOICFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOICFGR_GPIOxEN_Pos                    1
#define RCC_GPIOICFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOICFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOICFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOICFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOICFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOJCFGR register */
#define RCC_GPIOJCFGR_GPIOxRST_Pos                   0
#define RCC_GPIOJCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOJCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOJCFGR_GPIOxEN_Pos                    1
#define RCC_GPIOJCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOJCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOJCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOJCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOJCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOKCFGR register */
#define RCC_GPIOKCFGR_GPIOxRST_Pos                   0
#define RCC_GPIOKCFGR_GPIOxRST_Msk                   (0x1 << 0)
#define RCC_GPIOKCFGR_GPIOxRST                       (0x1 << 0)
#define RCC_GPIOKCFGR_GPIOxEN_Pos                    1
#define RCC_GPIOKCFGR_GPIOxEN_Msk                    (0x1 << 1)
#define RCC_GPIOKCFGR_GPIOxEN                        (0x1 << 1)
#define RCC_GPIOKCFGR_GPIOxLPEN_Pos                  2
#define RCC_GPIOKCFGR_GPIOxLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOKCFGR_GPIOxLPEN                      (0x1 << 2)

/* Bit fields for RCC_GPIOZCFGR register */
#define RCC_GPIOZCFGR_GPIOZRST_Pos                   0
#define RCC_GPIOZCFGR_GPIOZRST_Msk                   (0x1 << 0)
#define RCC_GPIOZCFGR_GPIOZRST                       (0x1 << 0)
#define RCC_GPIOZCFGR_GPIOZEN_Pos                    1
#define RCC_GPIOZCFGR_GPIOZEN_Msk                    (0x1 << 1)
#define RCC_GPIOZCFGR_GPIOZEN                        (0x1 << 1)
#define RCC_GPIOZCFGR_GPIOZLPEN_Pos                  2
#define RCC_GPIOZCFGR_GPIOZLPEN_Msk                  (0x1 << 2)
#define RCC_GPIOZCFGR_GPIOZLPEN                      (0x1 << 2)
#define RCC_GPIOZCFGR_GPIOZAMEN_Pos                  3
#define RCC_GPIOZCFGR_GPIOZAMEN_Msk                  (0x1 << 3)
#define RCC_GPIOZCFGR_GPIOZAMEN                      (0x1 << 3)

/* Bit fields for RCC_HPDMA1CFGR register */
#define RCC_HPDMA1CFGR_HPDMA1RST_Pos                 0
#define RCC_HPDMA1CFGR_HPDMA1RST_Msk                 (0x1 << 0)
#define RCC_HPDMA1CFGR_HPDMA1RST                     (0x1 << 0)
#define RCC_HPDMA1CFGR_HPDMA1EN_Pos                  1
#define RCC_HPDMA1CFGR_HPDMA1EN_Msk                  (0x1 << 1)
#define RCC_HPDMA1CFGR_HPDMA1EN                      (0x1 << 1)
#define RCC_HPDMA1CFGR_HPDMA1LPEN_Pos                2
#define RCC_HPDMA1CFGR_HPDMA1LPEN_Msk                (0x1 << 2)
#define RCC_HPDMA1CFGR_HPDMA1LPEN                    (0x1 << 2)

/* Bit fields for RCC_HPDMA2CFGR register */
#define RCC_HPDMA2CFGR_HPDMA2RST_Pos                 0
#define RCC_HPDMA2CFGR_HPDMA2RST_Msk                 (0x1 << 0)
#define RCC_HPDMA2CFGR_HPDMA2RST                     (0x1 << 0)
#define RCC_HPDMA2CFGR_HPDMA2EN_Pos                  1
#define RCC_HPDMA2CFGR_HPDMA2EN_Msk                  (0x1 << 1)
#define RCC_HPDMA2CFGR_HPDMA2EN                      (0x1 << 1)
#define RCC_HPDMA2CFGR_HPDMA2LPEN_Pos                2
#define RCC_HPDMA2CFGR_HPDMA2LPEN_Msk                (0x1 << 2)
#define RCC_HPDMA2CFGR_HPDMA2LPEN                    (0x1 << 2)

/* Bit fields for RCC_HPDMA3CFGR register */
#define RCC_HPDMA3CFGR_HPDMA3RST_Pos                 0
#define RCC_HPDMA3CFGR_HPDMA3RST_Msk                 (0x1 << 0)
#define RCC_HPDMA3CFGR_HPDMA3RST                     (0x1 << 0)
#define RCC_HPDMA3CFGR_HPDMA3EN_Pos                  1
#define RCC_HPDMA3CFGR_HPDMA3EN_Msk                  (0x1 << 1)
#define RCC_HPDMA3CFGR_HPDMA3EN                      (0x1 << 1)
#define RCC_HPDMA3CFGR_HPDMA3LPEN_Pos                2
#define RCC_HPDMA3CFGR_HPDMA3LPEN_Msk                (0x1 << 2)
#define RCC_HPDMA3CFGR_HPDMA3LPEN                    (0x1 << 2)

/* Bit fields for RCC_LPDMACFGR register */
#define RCC_LPDMACFGR_LPDMARST_Pos                   0
#define RCC_LPDMACFGR_LPDMARST_Msk                   (0x1 << 0)
#define RCC_LPDMACFGR_LPDMARST                       (0x1 << 0)
#define RCC_LPDMACFGR_LPDMAEN_Pos                    1
#define RCC_LPDMACFGR_LPDMAEN_Msk                    (0x1 << 1)
#define RCC_LPDMACFGR_LPDMAEN                        (0x1 << 1)
#define RCC_LPDMACFGR_LPDMALPEN_Pos                  2
#define RCC_LPDMACFGR_LPDMALPEN_Msk                  (0x1 << 2)
#define RCC_LPDMACFGR_LPDMALPEN                      (0x1 << 2)
#define RCC_LPDMACFGR_LPDMAAMEN_Pos                  3
#define RCC_LPDMACFGR_LPDMAAMEN_Msk                  (0x1 << 3)
#define RCC_LPDMACFGR_LPDMAAMEN                      (0x1 << 3)

/* Bit fields for RCC_HSEMCFGR register */
#define RCC_HSEMCFGR_HSEMRST_Pos                     0
#define RCC_HSEMCFGR_HSEMRST_Msk                     (0x1 << 0)
#define RCC_HSEMCFGR_HSEMRST                         (0x1 << 0)
#define RCC_HSEMCFGR_HSEMEN_Pos                      1
#define RCC_HSEMCFGR_HSEMEN_Msk                      (0x1 << 1)
#define RCC_HSEMCFGR_HSEMEN                          (0x1 << 1)
#define RCC_HSEMCFGR_HSEMLPEN_Pos                    2
#define RCC_HSEMCFGR_HSEMLPEN_Msk                    (0x1 << 2)
#define RCC_HSEMCFGR_HSEMLPEN                        (0x1 << 2)
#define RCC_HSEMCFGR_HSEMAMEN_Pos                    3
#define RCC_HSEMCFGR_HSEMAMEN_Msk                    (0x1 << 3)
#define RCC_HSEMCFGR_HSEMAMEN                        (0x1 << 3)

/* Bit fields for RCC_IPCC1CFGR register */
#define RCC_IPCC1CFGR_IPCC1RST_Pos                   0
#define RCC_IPCC1CFGR_IPCC1RST_Msk                   (0x1 << 0)
#define RCC_IPCC1CFGR_IPCC1RST                       (0x1 << 0)
#define RCC_IPCC1CFGR_IPCC1EN_Pos                    1
#define RCC_IPCC1CFGR_IPCC1EN_Msk                    (0x1 << 1)
#define RCC_IPCC1CFGR_IPCC1EN                        (0x1 << 1)
#define RCC_IPCC1CFGR_IPCC1LPEN_Pos                  2
#define RCC_IPCC1CFGR_IPCC1LPEN_Msk                  (0x1 << 2)
#define RCC_IPCC1CFGR_IPCC1LPEN                      (0x1 << 2)

/* Bit fields for RCC_IPCC2CFGR register */
#define RCC_IPCC2CFGR_IPCC2RST_Pos                   0
#define RCC_IPCC2CFGR_IPCC2RST_Msk                   (0x1 << 0)
#define RCC_IPCC2CFGR_IPCC2RST                       (0x1 << 0)
#define RCC_IPCC2CFGR_IPCC2EN_Pos                    1
#define RCC_IPCC2CFGR_IPCC2EN_Msk                    (0x1 << 1)
#define RCC_IPCC2CFGR_IPCC2EN                        (0x1 << 1)
#define RCC_IPCC2CFGR_IPCC2LPEN_Pos                  2
#define RCC_IPCC2CFGR_IPCC2LPEN_Msk                  (0x1 << 2)
#define RCC_IPCC2CFGR_IPCC2LPEN                      (0x1 << 2)
#define RCC_IPCC2CFGR_IPCC2AMEN_Pos                  3
#define RCC_IPCC2CFGR_IPCC2AMEN_Msk                  (0x1 << 3)
#define RCC_IPCC2CFGR_IPCC2AMEN                      (0x1 << 3)

/* Bit fields for RCC_RTCCFGR register */
#define RCC_RTCCFGR_RTCEN_Pos                        1
#define RCC_RTCCFGR_RTCEN_Msk                        (0x1 << 1)
#define RCC_RTCCFGR_RTCEN                            (0x1 << 1)
#define RCC_RTCCFGR_RTCLPEN_Pos                      2
#define RCC_RTCCFGR_RTCLPEN_Msk                      (0x1 << 2)
#define RCC_RTCCFGR_RTCLPEN                          (0x1 << 2)
#define RCC_RTCCFGR_RTCAMEN_Pos                      3
#define RCC_RTCCFGR_RTCAMEN_Msk                      (0x1 << 3)
#define RCC_RTCCFGR_RTCAMEN                          (0x1 << 3)

/* Bit fields for RCC_SYSCPU1CFGR register */
#define RCC_SYSCPU1CFGR_SYSCPU1EN_Pos                1
#define RCC_SYSCPU1CFGR_SYSCPU1EN_Msk                (0x1 << 1)
#define RCC_SYSCPU1CFGR_SYSCPU1EN                    (0x1 << 1)
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN_Pos              2
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN_Msk              (0x1 << 2)
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN                  (0x1 << 2)

/* Bit fields for RCC_BSECCFGR register */
#define RCC_BSECCFGR_BSECEN_Pos                      1
#define RCC_BSECCFGR_BSECEN_Msk                      (0x1 << 1)
#define RCC_BSECCFGR_BSECEN                          (0x1 << 1)
#define RCC_BSECCFGR_BSECLPEN_Pos                    2
#define RCC_BSECCFGR_BSECLPEN_Msk                    (0x1 << 2)
#define RCC_BSECCFGR_BSECLPEN                        (0x1 << 2)

/* Bit fields for RCC_IS2MCFGR register */
#define RCC_IS2MCFGR_IS2MRST_Pos                     0
#define RCC_IS2MCFGR_IS2MRST_Msk                     (0x1 << 0)
#define RCC_IS2MCFGR_IS2MRST                         (0x1 << 0)
#define RCC_IS2MCFGR_IS2MEN_Pos                      1
#define RCC_IS2MCFGR_IS2MEN_Msk                      (0x1 << 1)
#define RCC_IS2MCFGR_IS2MEN                          (0x1 << 1)
#define RCC_IS2MCFGR_IS2MLPEN_Pos                    2
#define RCC_IS2MCFGR_IS2MLPEN_Msk                    (0x1 << 2)
#define RCC_IS2MCFGR_IS2MLPEN                        (0x1 << 2)

/* Bit fields for RCC_PLL2CFGR1 register */
#define RCC_PLL2CFGR1_SSMODRST_Pos                   0
#define RCC_PLL2CFGR1_SSMODRST_Msk                   (0x1 << 0)
#define RCC_PLL2CFGR1_SSMODRST                       (0x1 << 0)
#define RCC_PLL2CFGR1_PLLEN_Pos                      8
#define RCC_PLL2CFGR1_PLLEN_Msk                      (0x1 << 8)
#define RCC_PLL2CFGR1_PLLEN                          (0x1 << 8)
#define RCC_PLL2CFGR1_PLLRDY_Pos                     24
#define RCC_PLL2CFGR1_PLLRDY_Msk                     (0x1 << 24)
#define RCC_PLL2CFGR1_PLLRDY                         (0x1 << 24)
#define RCC_PLL2CFGR1_CKREFST_Pos                    28
#define RCC_PLL2CFGR1_CKREFST_Msk                    (0x1 << 28)
#define RCC_PLL2CFGR1_CKREFST                        (0x1 << 28)

/* Bit fields for RCC_PLL2CFGR2 register */
#define RCC_PLL2CFGR2_FREFDIV_Pos                    0
#define RCC_PLL2CFGR2_FREFDIV_Msk                    (0x3f << 0)
#define RCC_PLL2CFGR2_FREFDIV                        (0x3f << 0)
#define RCC_PLL2CFGR2_FBDIV_Pos                      16
#define RCC_PLL2CFGR2_FBDIV_Msk                      (0xfff << 16)
#define RCC_PLL2CFGR2_FBDIV                          (0xfff << 16)

/* Bit fields for RCC_PLL2CFGR3 register */
#define RCC_PLL2CFGR3_FRACIN_Pos                     0
#define RCC_PLL2CFGR3_FRACIN_Msk                     (0xffffff << 0)
#define RCC_PLL2CFGR3_FRACIN                         (0xffffff << 0)
#define RCC_PLL2CFGR3_DOWNSPREAD_Pos                 24
#define RCC_PLL2CFGR3_DOWNSPREAD_Msk                 (0x1 << 24)
#define RCC_PLL2CFGR3_DOWNSPREAD                     (0x1 << 24)
#define RCC_PLL2CFGR3_DACEN_Pos                      25
#define RCC_PLL2CFGR3_DACEN_Msk                      (0x1 << 25)
#define RCC_PLL2CFGR3_DACEN                          (0x1 << 25)
#define RCC_PLL2CFGR3_SSCGDIS_Pos                    26
#define RCC_PLL2CFGR3_SSCGDIS_Msk                    (0x1 << 26)
#define RCC_PLL2CFGR3_SSCGDIS                        (0x1 << 26)

/* Bit fields for RCC_PLL2CFGR4 register */
#define RCC_PLL2CFGR4_DSMEN_Pos                      8
#define RCC_PLL2CFGR4_DSMEN_Msk                      (0x1 << 8)
#define RCC_PLL2CFGR4_DSMEN                          (0x1 << 8)
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN_Pos              9
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN_Msk              (0x1 << 9)
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN                  (0x1 << 9)
#define RCC_PLL2CFGR4_BYPASS_Pos                     10
#define RCC_PLL2CFGR4_BYPASS_Msk                     (0x1 << 10)
#define RCC_PLL2CFGR4_BYPASS                         (0x1 << 10)

/* Bit fields for RCC_PLL2CFGR5 register */
#define RCC_PLL2CFGR5_DIVVAL_Pos                     0
#define RCC_PLL2CFGR5_DIVVAL_Msk                     (0xf << 0)
#define RCC_PLL2CFGR5_DIVVAL                         (0xf << 0)
#define RCC_PLL2CFGR5_SPREAD_Pos                     16
#define RCC_PLL2CFGR5_SPREAD_Msk                     (0x1f << 16)
#define RCC_PLL2CFGR5_SPREAD                         (0x1f << 16)

/* Bit fields for RCC_PLL2CFGR6 register */
#define RCC_PLL2CFGR6_POSTDIV1_Pos                   0
#define RCC_PLL2CFGR6_POSTDIV1_Msk                   (0x7 << 0)
#define RCC_PLL2CFGR6_POSTDIV1                       (0x7 << 0)

/* Bit fields for RCC_PLL2CFGR7 register */
#define RCC_PLL2CFGR7_POSTDIV2_Pos                   0
#define RCC_PLL2CFGR7_POSTDIV2_Msk                   (0x7 << 0)
#define RCC_PLL2CFGR7_POSTDIV2                       (0x7 << 0)

/* Bit fields for RCC_PLL3CFGR1 register */
#define RCC_PLL3CFGR1_SSMODRST_Pos                   0
#define RCC_PLL3CFGR1_SSMODRST_Msk                   (0x1 << 0)
#define RCC_PLL3CFGR1_SSMODRST                       (0x1 << 0)
#define RCC_PLL3CFGR1_PLLEN_Pos                      8
#define RCC_PLL3CFGR1_PLLEN_Msk                      (0x1 << 8)
#define RCC_PLL3CFGR1_PLLEN                          (0x1 << 8)
#define RCC_PLL3CFGR1_PLLRDY_Pos                     24
#define RCC_PLL3CFGR1_PLLRDY_Msk                     (0x1 << 24)
#define RCC_PLL3CFGR1_PLLRDY                         (0x1 << 24)
#define RCC_PLL3CFGR1_CKREFST_Pos                    28
#define RCC_PLL3CFGR1_CKREFST_Msk                    (0x1 << 28)
#define RCC_PLL3CFGR1_CKREFST                        (0x1 << 28)

/* Bit fields for RCC_PLL3CFGR2 register */
#define RCC_PLL3CFGR2_FREFDIV_Pos                    0
#define RCC_PLL3CFGR2_FREFDIV_Msk                    (0x3f << 0)
#define RCC_PLL3CFGR2_FREFDIV                        (0x3f << 0)
#define RCC_PLL3CFGR2_FBDIV_Pos                      16
#define RCC_PLL3CFGR2_FBDIV_Msk                      (0xfff << 16)
#define RCC_PLL3CFGR2_FBDIV                          (0xfff << 16)

/* Bit fields for RCC_PLL3CFGR3 register */
#define RCC_PLL3CFGR3_FRACIN_Pos                     0
#define RCC_PLL3CFGR3_FRACIN_Msk                     (0xffffff << 0)
#define RCC_PLL3CFGR3_FRACIN                         (0xffffff << 0)
#define RCC_PLL3CFGR3_DOWNSPREAD_Pos                 24
#define RCC_PLL3CFGR3_DOWNSPREAD_Msk                 (0x1 << 24)
#define RCC_PLL3CFGR3_DOWNSPREAD                     (0x1 << 24)
#define RCC_PLL3CFGR3_DACEN_Pos                      25
#define RCC_PLL3CFGR3_DACEN_Msk                      (0x1 << 25)
#define RCC_PLL3CFGR3_DACEN                          (0x1 << 25)
#define RCC_PLL3CFGR3_SSCGDIS_Pos                    26
#define RCC_PLL3CFGR3_SSCGDIS_Msk                    (0x1 << 26)
#define RCC_PLL3CFGR3_SSCGDIS                        (0x1 << 26)

/* Bit fields for RCC_PLL3CFGR4 register */
#define RCC_PLL3CFGR4_DSMEN_Pos                      8
#define RCC_PLL3CFGR4_DSMEN_Msk                      (0x1 << 8)
#define RCC_PLL3CFGR4_DSMEN                          (0x1 << 8)
#define RCC_PLL3CFGR4_FOUTPOSTDIVEN_Pos              9
#define RCC_PLL3CFGR4_FOUTPOSTDIVEN_Msk              (0x1 << 9)
#define RCC_PLL3CFGR4_FOUTPOSTDIVEN                  (0x1 << 9)
#define RCC_PLL3CFGR4_BYPASS_Pos                     10
#define RCC_PLL3CFGR4_BYPASS_Msk                     (0x1 << 10)
#define RCC_PLL3CFGR4_BYPASS                         (0x1 << 10)

/* Bit fields for RCC_PLL3CFGR5 register */
#define RCC_PLL3CFGR5_DIVVAL_Pos                     0
#define RCC_PLL3CFGR5_DIVVAL_Msk                     (0xf << 0)
#define RCC_PLL3CFGR5_DIVVAL                         (0xf << 0)
#define RCC_PLL3CFGR5_SPREAD_Pos                     16
#define RCC_PLL3CFGR5_SPREAD_Msk                     (0x1f << 16)
#define RCC_PLL3CFGR5_SPREAD                         (0x1f << 16)

/* Bit fields for RCC_PLL3CFGR6 register */
#define RCC_PLL3CFGR6_POSTDIV1_Pos                   0
#define RCC_PLL3CFGR6_POSTDIV1_Msk                   (0x7 << 0)
#define RCC_PLL3CFGR6_POSTDIV1                       (0x7 << 0)

/* Bit fields for RCC_PLL3CFGR7 register */
#define RCC_PLL3CFGR7_POSTDIV2_Pos                   0
#define RCC_PLL3CFGR7_POSTDIV2_Msk                   (0x7 << 0)
#define RCC_PLL3CFGR7_POSTDIV2                       (0x7 << 0)

/* Bit fields for RCC_TIM1CFGR register */
#define RCC_TIM1CFGR_TIM1RST_Pos                     0
#define RCC_TIM1CFGR_TIM1RST_Msk                     (0x1 << 0)
#define RCC_TIM1CFGR_TIM1RST                         (0x1 << 0)
#define RCC_TIM1CFGR_TIM1EN_Pos                      1
#define RCC_TIM1CFGR_TIM1EN_Msk                      (0x1 << 1)
#define RCC_TIM1CFGR_TIM1EN                          (0x1 << 1)
#define RCC_TIM1CFGR_TIM1LPEN_Pos                    2
#define RCC_TIM1CFGR_TIM1LPEN_Msk                    (0x1 << 2)
#define RCC_TIM1CFGR_TIM1LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM2CFGR register */
#define RCC_TIM2CFGR_TIM2RST_Pos                     0
#define RCC_TIM2CFGR_TIM2RST_Msk                     (0x1 << 0)
#define RCC_TIM2CFGR_TIM2RST                         (0x1 << 0)
#define RCC_TIM2CFGR_TIM2EN_Pos                      1
#define RCC_TIM2CFGR_TIM2EN_Msk                      (0x1 << 1)
#define RCC_TIM2CFGR_TIM2EN                          (0x1 << 1)
#define RCC_TIM2CFGR_TIM2LPEN_Pos                    2
#define RCC_TIM2CFGR_TIM2LPEN_Msk                    (0x1 << 2)
#define RCC_TIM2CFGR_TIM2LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM3CFGR register */
#define RCC_TIM3CFGR_TIM3RST_Pos                     0
#define RCC_TIM3CFGR_TIM3RST_Msk                     (0x1 << 0)
#define RCC_TIM3CFGR_TIM3RST                         (0x1 << 0)
#define RCC_TIM3CFGR_TIM3EN_Pos                      1
#define RCC_TIM3CFGR_TIM3EN_Msk                      (0x1 << 1)
#define RCC_TIM3CFGR_TIM3EN                          (0x1 << 1)
#define RCC_TIM3CFGR_TIM3LPEN_Pos                    2
#define RCC_TIM3CFGR_TIM3LPEN_Msk                    (0x1 << 2)
#define RCC_TIM3CFGR_TIM3LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM4CFGR register */
#define RCC_TIM4CFGR_TIM4RST_Pos                     0
#define RCC_TIM4CFGR_TIM4RST_Msk                     (0x1 << 0)
#define RCC_TIM4CFGR_TIM4RST                         (0x1 << 0)
#define RCC_TIM4CFGR_TIM4EN_Pos                      1
#define RCC_TIM4CFGR_TIM4EN_Msk                      (0x1 << 1)
#define RCC_TIM4CFGR_TIM4EN                          (0x1 << 1)
#define RCC_TIM4CFGR_TIM4LPEN_Pos                    2
#define RCC_TIM4CFGR_TIM4LPEN_Msk                    (0x1 << 2)
#define RCC_TIM4CFGR_TIM4LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM5CFGR register */
#define RCC_TIM5CFGR_TIM5RST_Pos                     0
#define RCC_TIM5CFGR_TIM5RST_Msk                     (0x1 << 0)
#define RCC_TIM5CFGR_TIM5RST                         (0x1 << 0)
#define RCC_TIM5CFGR_TIM5EN_Pos                      1
#define RCC_TIM5CFGR_TIM5EN_Msk                      (0x1 << 1)
#define RCC_TIM5CFGR_TIM5EN                          (0x1 << 1)
#define RCC_TIM5CFGR_TIM5LPEN_Pos                    2
#define RCC_TIM5CFGR_TIM5LPEN_Msk                    (0x1 << 2)
#define RCC_TIM5CFGR_TIM5LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM6CFGR register */
#define RCC_TIM6CFGR_TIM6RST_Pos                     0
#define RCC_TIM6CFGR_TIM6RST_Msk                     (0x1 << 0)
#define RCC_TIM6CFGR_TIM6RST                         (0x1 << 0)
#define RCC_TIM6CFGR_TIM6EN_Pos                      1
#define RCC_TIM6CFGR_TIM6EN_Msk                      (0x1 << 1)
#define RCC_TIM6CFGR_TIM6EN                          (0x1 << 1)
#define RCC_TIM6CFGR_TIM6LPEN_Pos                    2
#define RCC_TIM6CFGR_TIM6LPEN_Msk                    (0x1 << 2)
#define RCC_TIM6CFGR_TIM6LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM7CFGR register */
#define RCC_TIM7CFGR_TIM7RST_Pos                     0
#define RCC_TIM7CFGR_TIM7RST_Msk                     (0x1 << 0)
#define RCC_TIM7CFGR_TIM7RST                         (0x1 << 0)
#define RCC_TIM7CFGR_TIM7EN_Pos                      1
#define RCC_TIM7CFGR_TIM7EN_Msk                      (0x1 << 1)
#define RCC_TIM7CFGR_TIM7EN                          (0x1 << 1)
#define RCC_TIM7CFGR_TIM7LPEN_Pos                    2
#define RCC_TIM7CFGR_TIM7LPEN_Msk                    (0x1 << 2)
#define RCC_TIM7CFGR_TIM7LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM8CFGR register */
#define RCC_TIM8CFGR_TIM8RST_Pos                     0
#define RCC_TIM8CFGR_TIM8RST_Msk                     (0x1 << 0)
#define RCC_TIM8CFGR_TIM8RST                         (0x1 << 0)
#define RCC_TIM8CFGR_TIM8EN_Pos                      1
#define RCC_TIM8CFGR_TIM8EN_Msk                      (0x1 << 1)
#define RCC_TIM8CFGR_TIM8EN                          (0x1 << 1)
#define RCC_TIM8CFGR_TIM8LPEN_Pos                    2
#define RCC_TIM8CFGR_TIM8LPEN_Msk                    (0x1 << 2)
#define RCC_TIM8CFGR_TIM8LPEN                        (0x1 << 2)

/* Bit fields for RCC_TIM10CFGR register */
#define RCC_TIM10CFGR_TIM10RST_Pos                   0
#define RCC_TIM10CFGR_TIM10RST_Msk                   (0x1 << 0)
#define RCC_TIM10CFGR_TIM10RST                       (0x1 << 0)
#define RCC_TIM10CFGR_TIM10EN_Pos                    1
#define RCC_TIM10CFGR_TIM10EN_Msk                    (0x1 << 1)
#define RCC_TIM10CFGR_TIM10EN                        (0x1 << 1)
#define RCC_TIM10CFGR_TIM10LPEN_Pos                  2
#define RCC_TIM10CFGR_TIM10LPEN_Msk                  (0x1 << 2)
#define RCC_TIM10CFGR_TIM10LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM11CFGR register */
#define RCC_TIM11CFGR_TIM11RST_Pos                   0
#define RCC_TIM11CFGR_TIM11RST_Msk                   (0x1 << 0)
#define RCC_TIM11CFGR_TIM11RST                       (0x1 << 0)
#define RCC_TIM11CFGR_TIM11EN_Pos                    1
#define RCC_TIM11CFGR_TIM11EN_Msk                    (0x1 << 1)
#define RCC_TIM11CFGR_TIM11EN                        (0x1 << 1)
#define RCC_TIM11CFGR_TIM11LPEN_Pos                  2
#define RCC_TIM11CFGR_TIM11LPEN_Msk                  (0x1 << 2)
#define RCC_TIM11CFGR_TIM11LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM12CFGR register */
#define RCC_TIM12CFGR_TIM12RST_Pos                   0
#define RCC_TIM12CFGR_TIM12RST_Msk                   (0x1 << 0)
#define RCC_TIM12CFGR_TIM12RST                       (0x1 << 0)
#define RCC_TIM12CFGR_TIM12EN_Pos                    1
#define RCC_TIM12CFGR_TIM12EN_Msk                    (0x1 << 1)
#define RCC_TIM12CFGR_TIM12EN                        (0x1 << 1)
#define RCC_TIM12CFGR_TIM12LPEN_Pos                  2
#define RCC_TIM12CFGR_TIM12LPEN_Msk                  (0x1 << 2)
#define RCC_TIM12CFGR_TIM12LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM13CFGR register */
#define RCC_TIM13CFGR_TIM13RST_Pos                   0
#define RCC_TIM13CFGR_TIM13RST_Msk                   (0x1 << 0)
#define RCC_TIM13CFGR_TIM13RST                       (0x1 << 0)
#define RCC_TIM13CFGR_TIM13EN_Pos                    1
#define RCC_TIM13CFGR_TIM13EN_Msk                    (0x1 << 1)
#define RCC_TIM13CFGR_TIM13EN                        (0x1 << 1)
#define RCC_TIM13CFGR_TIM13LPEN_Pos                  2
#define RCC_TIM13CFGR_TIM13LPEN_Msk                  (0x1 << 2)
#define RCC_TIM13CFGR_TIM13LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM14CFGR register */
#define RCC_TIM14CFGR_TIM14RST_Pos                   0
#define RCC_TIM14CFGR_TIM14RST_Msk                   (0x1 << 0)
#define RCC_TIM14CFGR_TIM14RST                       (0x1 << 0)
#define RCC_TIM14CFGR_TIM14EN_Pos                    1
#define RCC_TIM14CFGR_TIM14EN_Msk                    (0x1 << 1)
#define RCC_TIM14CFGR_TIM14EN                        (0x1 << 1)
#define RCC_TIM14CFGR_TIM14LPEN_Pos                  2
#define RCC_TIM14CFGR_TIM14LPEN_Msk                  (0x1 << 2)
#define RCC_TIM14CFGR_TIM14LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM15CFGR register */
#define RCC_TIM15CFGR_TIM15RST_Pos                   0
#define RCC_TIM15CFGR_TIM15RST_Msk                   (0x1 << 0)
#define RCC_TIM15CFGR_TIM15RST                       (0x1 << 0)
#define RCC_TIM15CFGR_TIM15EN_Pos                    1
#define RCC_TIM15CFGR_TIM15EN_Msk                    (0x1 << 1)
#define RCC_TIM15CFGR_TIM15EN                        (0x1 << 1)
#define RCC_TIM15CFGR_TIM15LPEN_Pos                  2
#define RCC_TIM15CFGR_TIM15LPEN_Msk                  (0x1 << 2)
#define RCC_TIM15CFGR_TIM15LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM16CFGR register */
#define RCC_TIM16CFGR_TIM16RST_Pos                   0
#define RCC_TIM16CFGR_TIM16RST_Msk                   (0x1 << 0)
#define RCC_TIM16CFGR_TIM16RST                       (0x1 << 0)
#define RCC_TIM16CFGR_TIM16EN_Pos                    1
#define RCC_TIM16CFGR_TIM16EN_Msk                    (0x1 << 1)
#define RCC_TIM16CFGR_TIM16EN                        (0x1 << 1)
#define RCC_TIM16CFGR_TIM16LPEN_Pos                  2
#define RCC_TIM16CFGR_TIM16LPEN_Msk                  (0x1 << 2)
#define RCC_TIM16CFGR_TIM16LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM17CFGR register */
#define RCC_TIM17CFGR_TIM17RST_Pos                   0
#define RCC_TIM17CFGR_TIM17RST_Msk                   (0x1 << 0)
#define RCC_TIM17CFGR_TIM17RST                       (0x1 << 0)
#define RCC_TIM17CFGR_TIM17EN_Pos                    1
#define RCC_TIM17CFGR_TIM17EN_Msk                    (0x1 << 1)
#define RCC_TIM17CFGR_TIM17EN                        (0x1 << 1)
#define RCC_TIM17CFGR_TIM17LPEN_Pos                  2
#define RCC_TIM17CFGR_TIM17LPEN_Msk                  (0x1 << 2)
#define RCC_TIM17CFGR_TIM17LPEN                      (0x1 << 2)

/* Bit fields for RCC_TIM20CFGR register */
#define RCC_TIM20CFGR_TIM20RST_Pos                   0
#define RCC_TIM20CFGR_TIM20RST_Msk                   (0x1 << 0)
#define RCC_TIM20CFGR_TIM20RST                       (0x1 << 0)
#define RCC_TIM20CFGR_TIM20EN_Pos                    1
#define RCC_TIM20CFGR_TIM20EN_Msk                    (0x1 << 1)
#define RCC_TIM20CFGR_TIM20EN                        (0x1 << 1)
#define RCC_TIM20CFGR_TIM20LPEN_Pos                  2
#define RCC_TIM20CFGR_TIM20LPEN_Msk                  (0x1 << 2)
#define RCC_TIM20CFGR_TIM20LPEN                      (0x1 << 2)

/* Bit fields for RCC_LPTIM1CFGR register */
#define RCC_LPTIM1CFGR_LPTIM1RST_Pos                 0
#define RCC_LPTIM1CFGR_LPTIM1RST_Msk                 (0x1 << 0)
#define RCC_LPTIM1CFGR_LPTIM1RST                     (0x1 << 0)
#define RCC_LPTIM1CFGR_LPTIM1EN_Pos                  1
#define RCC_LPTIM1CFGR_LPTIM1EN_Msk                  (0x1 << 1)
#define RCC_LPTIM1CFGR_LPTIM1EN                      (0x1 << 1)
#define RCC_LPTIM1CFGR_LPTIM1LPEN_Pos                2
#define RCC_LPTIM1CFGR_LPTIM1LPEN_Msk                (0x1 << 2)
#define RCC_LPTIM1CFGR_LPTIM1LPEN                    (0x1 << 2)

/* Bit fields for RCC_LPTIM2CFGR register */
#define RCC_LPTIM2CFGR_LPTIM2RST_Pos                 0
#define RCC_LPTIM2CFGR_LPTIM2RST_Msk                 (0x1 << 0)
#define RCC_LPTIM2CFGR_LPTIM2RST                     (0x1 << 0)
#define RCC_LPTIM2CFGR_LPTIM2EN_Pos                  1
#define RCC_LPTIM2CFGR_LPTIM2EN_Msk                  (0x1 << 1)
#define RCC_LPTIM2CFGR_LPTIM2EN                      (0x1 << 1)
#define RCC_LPTIM2CFGR_LPTIM2LPEN_Pos                2
#define RCC_LPTIM2CFGR_LPTIM2LPEN_Msk                (0x1 << 2)
#define RCC_LPTIM2CFGR_LPTIM2LPEN                    (0x1 << 2)

/* Bit fields for RCC_LPTIM3CFGR register */
#define RCC_LPTIM3CFGR_LPTIM3RST_Pos                 0
#define RCC_LPTIM3CFGR_LPTIM3RST_Msk                 (0x1 << 0)
#define RCC_LPTIM3CFGR_LPTIM3RST                     (0x1 << 0)
#define RCC_LPTIM3CFGR_LPTIM3EN_Pos                  1
#define RCC_LPTIM3CFGR_LPTIM3EN_Msk                  (0x1 << 1)
#define RCC_LPTIM3CFGR_LPTIM3EN                      (0x1 << 1)
#define RCC_LPTIM3CFGR_LPTIM3LPEN_Pos                2
#define RCC_LPTIM3CFGR_LPTIM3LPEN_Msk                (0x1 << 2)
#define RCC_LPTIM3CFGR_LPTIM3LPEN                    (0x1 << 2)
#define RCC_LPTIM3CFGR_LPTIM3AMEN_Pos                3
#define RCC_LPTIM3CFGR_LPTIM3AMEN_Msk                (0x1 << 3)
#define RCC_LPTIM3CFGR_LPTIM3AMEN                    (0x1 << 3)

/* Bit fields for RCC_LPTIM4CFGR register */
#define RCC_LPTIM4CFGR_LPTIM4RST_Pos                 0
#define RCC_LPTIM4CFGR_LPTIM4RST_Msk                 (0x1 << 0)
#define RCC_LPTIM4CFGR_LPTIM4RST                     (0x1 << 0)
#define RCC_LPTIM4CFGR_LPTIM4EN_Pos                  1
#define RCC_LPTIM4CFGR_LPTIM4EN_Msk                  (0x1 << 1)
#define RCC_LPTIM4CFGR_LPTIM4EN                      (0x1 << 1)
#define RCC_LPTIM4CFGR_LPTIM4LPEN_Pos                2
#define RCC_LPTIM4CFGR_LPTIM4LPEN_Msk                (0x1 << 2)
#define RCC_LPTIM4CFGR_LPTIM4LPEN                    (0x1 << 2)
#define RCC_LPTIM4CFGR_LPTIM4AMEN_Pos                3
#define RCC_LPTIM4CFGR_LPTIM4AMEN_Msk                (0x1 << 3)
#define RCC_LPTIM4CFGR_LPTIM4AMEN                    (0x1 << 3)

/* Bit fields for RCC_LPTIM5CFGR register */
#define RCC_LPTIM5CFGR_LPTIM5RST_Pos                 0
#define RCC_LPTIM5CFGR_LPTIM5RST_Msk                 (0x1 << 0)
#define RCC_LPTIM5CFGR_LPTIM5RST                     (0x1 << 0)
#define RCC_LPTIM5CFGR_LPTIM5EN_Pos                  1
#define RCC_LPTIM5CFGR_LPTIM5EN_Msk                  (0x1 << 1)
#define RCC_LPTIM5CFGR_LPTIM5EN                      (0x1 << 1)
#define RCC_LPTIM5CFGR_LPTIM5LPEN_Pos                2
#define RCC_LPTIM5CFGR_LPTIM5LPEN_Msk                (0x1 << 2)
#define RCC_LPTIM5CFGR_LPTIM5LPEN                    (0x1 << 2)
#define RCC_LPTIM5CFGR_LPTIM5AMEN_Pos                3
#define RCC_LPTIM5CFGR_LPTIM5AMEN_Msk                (0x1 << 3)
#define RCC_LPTIM5CFGR_LPTIM5AMEN                    (0x1 << 3)

/* Bit fields for RCC_SPI1CFGR register */
#define RCC_SPI1CFGR_SPI1RST_Pos                     0
#define RCC_SPI1CFGR_SPI1RST_Msk                     (0x1 << 0)
#define RCC_SPI1CFGR_SPI1RST                         (0x1 << 0)
#define RCC_SPI1CFGR_SPI1EN_Pos                      1
#define RCC_SPI1CFGR_SPI1EN_Msk                      (0x1 << 1)
#define RCC_SPI1CFGR_SPI1EN                          (0x1 << 1)
#define RCC_SPI1CFGR_SPI1LPEN_Pos                    2
#define RCC_SPI1CFGR_SPI1LPEN_Msk                    (0x1 << 2)
#define RCC_SPI1CFGR_SPI1LPEN                        (0x1 << 2)

/* Bit fields for RCC_SPI2CFGR register */
#define RCC_SPI2CFGR_SPI2RST_Pos                     0
#define RCC_SPI2CFGR_SPI2RST_Msk                     (0x1 << 0)
#define RCC_SPI2CFGR_SPI2RST                         (0x1 << 0)
#define RCC_SPI2CFGR_SPI2EN_Pos                      1
#define RCC_SPI2CFGR_SPI2EN_Msk                      (0x1 << 1)
#define RCC_SPI2CFGR_SPI2EN                          (0x1 << 1)
#define RCC_SPI2CFGR_SPI2LPEN_Pos                    2
#define RCC_SPI2CFGR_SPI2LPEN_Msk                    (0x1 << 2)
#define RCC_SPI2CFGR_SPI2LPEN                        (0x1 << 2)

/* Bit fields for RCC_SPI3CFGR register */
#define RCC_SPI3CFGR_SPI3RST_Pos                     0
#define RCC_SPI3CFGR_SPI3RST_Msk                     (0x1 << 0)
#define RCC_SPI3CFGR_SPI3RST                         (0x1 << 0)
#define RCC_SPI3CFGR_SPI3EN_Pos                      1
#define RCC_SPI3CFGR_SPI3EN_Msk                      (0x1 << 1)
#define RCC_SPI3CFGR_SPI3EN                          (0x1 << 1)
#define RCC_SPI3CFGR_SPI3LPEN_Pos                    2
#define RCC_SPI3CFGR_SPI3LPEN_Msk                    (0x1 << 2)
#define RCC_SPI3CFGR_SPI3LPEN                        (0x1 << 2)

/* Bit fields for RCC_SPI4CFGR register */
#define RCC_SPI4CFGR_SPI4RST_Pos                     0
#define RCC_SPI4CFGR_SPI4RST_Msk                     (0x1 << 0)
#define RCC_SPI4CFGR_SPI4RST                         (0x1 << 0)
#define RCC_SPI4CFGR_SPI4EN_Pos                      1
#define RCC_SPI4CFGR_SPI4EN_Msk                      (0x1 << 1)
#define RCC_SPI4CFGR_SPI4EN                          (0x1 << 1)
#define RCC_SPI4CFGR_SPI4LPEN_Pos                    2
#define RCC_SPI4CFGR_SPI4LPEN_Msk                    (0x1 << 2)
#define RCC_SPI4CFGR_SPI4LPEN                        (0x1 << 2)

/* Bit fields for RCC_SPI5CFGR register */
#define RCC_SPI5CFGR_SPI5RST_Pos                     0
#define RCC_SPI5CFGR_SPI5RST_Msk                     (0x1 << 0)
#define RCC_SPI5CFGR_SPI5RST                         (0x1 << 0)
#define RCC_SPI5CFGR_SPI5EN_Pos                      1
#define RCC_SPI5CFGR_SPI5EN_Msk                      (0x1 << 1)
#define RCC_SPI5CFGR_SPI5EN                          (0x1 << 1)
#define RCC_SPI5CFGR_SPI5LPEN_Pos                    2
#define RCC_SPI5CFGR_SPI5LPEN_Msk                    (0x1 << 2)
#define RCC_SPI5CFGR_SPI5LPEN                        (0x1 << 2)

/* Bit fields for RCC_SPI6CFGR register */
#define RCC_SPI6CFGR_SPI6RST_Pos                     0
#define RCC_SPI6CFGR_SPI6RST_Msk                     (0x1 << 0)
#define RCC_SPI6CFGR_SPI6RST                         (0x1 << 0)
#define RCC_SPI6CFGR_SPI6EN_Pos                      1
#define RCC_SPI6CFGR_SPI6EN_Msk                      (0x1 << 1)
#define RCC_SPI6CFGR_SPI6EN                          (0x1 << 1)
#define RCC_SPI6CFGR_SPI6LPEN_Pos                    2
#define RCC_SPI6CFGR_SPI6LPEN_Msk                    (0x1 << 2)
#define RCC_SPI6CFGR_SPI6LPEN                        (0x1 << 2)

/* Bit fields for RCC_SPI7CFGR register */
#define RCC_SPI7CFGR_SPI7RST_Pos                     0
#define RCC_SPI7CFGR_SPI7RST_Msk                     (0x1 << 0)
#define RCC_SPI7CFGR_SPI7RST                         (0x1 << 0)
#define RCC_SPI7CFGR_SPI7EN_Pos                      1
#define RCC_SPI7CFGR_SPI7EN_Msk                      (0x1 << 1)
#define RCC_SPI7CFGR_SPI7EN                          (0x1 << 1)
#define RCC_SPI7CFGR_SPI7LPEN_Pos                    2
#define RCC_SPI7CFGR_SPI7LPEN_Msk                    (0x1 << 2)
#define RCC_SPI7CFGR_SPI7LPEN                        (0x1 << 2)

/* Bit fields for RCC_SPI8CFGR register */
#define RCC_SPI8CFGR_SPI8RST_Pos                     0
#define RCC_SPI8CFGR_SPI8RST_Msk                     (0x1 << 0)
#define RCC_SPI8CFGR_SPI8RST                         (0x1 << 0)
#define RCC_SPI8CFGR_SPI8EN_Pos                      1
#define RCC_SPI8CFGR_SPI8EN_Msk                      (0x1 << 1)
#define RCC_SPI8CFGR_SPI8EN                          (0x1 << 1)
#define RCC_SPI8CFGR_SPI8LPEN_Pos                    2
#define RCC_SPI8CFGR_SPI8LPEN_Msk                    (0x1 << 2)
#define RCC_SPI8CFGR_SPI8LPEN                        (0x1 << 2)
#define RCC_SPI8CFGR_SPI8AMEN_Pos                    3
#define RCC_SPI8CFGR_SPI8AMEN_Msk                    (0x1 << 3)
#define RCC_SPI8CFGR_SPI8AMEN                        (0x1 << 3)

/* Bit fields for RCC_SPDIFRXCFGR register */
#define RCC_SPDIFRXCFGR_SPDIFRXRST_Pos               0
#define RCC_SPDIFRXCFGR_SPDIFRXRST_Msk               (0x1 << 0)
#define RCC_SPDIFRXCFGR_SPDIFRXRST                   (0x1 << 0)
#define RCC_SPDIFRXCFGR_SPDIFRXEN_Pos                1
#define RCC_SPDIFRXCFGR_SPDIFRXEN_Msk                (0x1 << 1)
#define RCC_SPDIFRXCFGR_SPDIFRXEN                    (0x1 << 1)
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN_Pos              2
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN_Msk              (0x1 << 2)
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN                  (0x1 << 2)

/* Bit fields for RCC_USART1CFGR register */
#define RCC_USART1CFGR_USART1RST_Pos                 0
#define RCC_USART1CFGR_USART1RST_Msk                 (0x1 << 0)
#define RCC_USART1CFGR_USART1RST                     (0x1 << 0)
#define RCC_USART1CFGR_USART1EN_Pos                  1
#define RCC_USART1CFGR_USART1EN_Msk                  (0x1 << 1)
#define RCC_USART1CFGR_USART1EN                      (0x1 << 1)
#define RCC_USART1CFGR_USART1LPEN_Pos                2
#define RCC_USART1CFGR_USART1LPEN_Msk                (0x1 << 2)
#define RCC_USART1CFGR_USART1LPEN                    (0x1 << 2)

/* Bit fields for RCC_USART2CFGR register */
#define RCC_USART2CFGR_USART2RST_Pos                 0
#define RCC_USART2CFGR_USART2RST_Msk                 (0x1 << 0)
#define RCC_USART2CFGR_USART2RST                     (0x1 << 0)
#define RCC_USART2CFGR_USART2EN_Pos                  1
#define RCC_USART2CFGR_USART2EN_Msk                  (0x1 << 1)
#define RCC_USART2CFGR_USART2EN                      (0x1 << 1)
#define RCC_USART2CFGR_USART2LPEN_Pos                2
#define RCC_USART2CFGR_USART2LPEN_Msk                (0x1 << 2)
#define RCC_USART2CFGR_USART2LPEN                    (0x1 << 2)

/* Bit fields for RCC_USART3CFGR register */
#define RCC_USART3CFGR_USART3RST_Pos                 0
#define RCC_USART3CFGR_USART3RST_Msk                 (0x1 << 0)
#define RCC_USART3CFGR_USART3RST                     (0x1 << 0)
#define RCC_USART3CFGR_USART3EN_Pos                  1
#define RCC_USART3CFGR_USART3EN_Msk                  (0x1 << 1)
#define RCC_USART3CFGR_USART3EN                      (0x1 << 1)
#define RCC_USART3CFGR_USART3LPEN_Pos                2
#define RCC_USART3CFGR_USART3LPEN_Msk                (0x1 << 2)
#define RCC_USART3CFGR_USART3LPEN                    (0x1 << 2)

/* Bit fields for RCC_UART4CFGR register */
#define RCC_UART4CFGR_UART4RST_Pos                   0
#define RCC_UART4CFGR_UART4RST_Msk                   (0x1 << 0)
#define RCC_UART4CFGR_UART4RST                       (0x1 << 0)
#define RCC_UART4CFGR_UART4EN_Pos                    1
#define RCC_UART4CFGR_UART4EN_Msk                    (0x1 << 1)
#define RCC_UART4CFGR_UART4EN                        (0x1 << 1)
#define RCC_UART4CFGR_UART4LPEN_Pos                  2
#define RCC_UART4CFGR_UART4LPEN_Msk                  (0x1 << 2)
#define RCC_UART4CFGR_UART4LPEN                      (0x1 << 2)

/* Bit fields for RCC_UART5CFGR register */
#define RCC_UART5CFGR_UART5RST_Pos                   0
#define RCC_UART5CFGR_UART5RST_Msk                   (0x1 << 0)
#define RCC_UART5CFGR_UART5RST                       (0x1 << 0)
#define RCC_UART5CFGR_UART5EN_Pos                    1
#define RCC_UART5CFGR_UART5EN_Msk                    (0x1 << 1)
#define RCC_UART5CFGR_UART5EN                        (0x1 << 1)
#define RCC_UART5CFGR_UART5LPEN_Pos                  2
#define RCC_UART5CFGR_UART5LPEN_Msk                  (0x1 << 2)
#define RCC_UART5CFGR_UART5LPEN                      (0x1 << 2)

/* Bit fields for RCC_USART6CFGR register */
#define RCC_USART6CFGR_USART6RST_Pos                 0
#define RCC_USART6CFGR_USART6RST_Msk                 (0x1 << 0)
#define RCC_USART6CFGR_USART6RST                     (0x1 << 0)
#define RCC_USART6CFGR_USART6EN_Pos                  1
#define RCC_USART6CFGR_USART6EN_Msk                  (0x1 << 1)
#define RCC_USART6CFGR_USART6EN                      (0x1 << 1)
#define RCC_USART6CFGR_USART6LPEN_Pos                2
#define RCC_USART6CFGR_USART6LPEN_Msk                (0x1 << 2)
#define RCC_USART6CFGR_USART6LPEN                    (0x1 << 2)

/* Bit fields for RCC_UART7CFGR register */
#define RCC_UART7CFGR_UART7RST_Pos                   0
#define RCC_UART7CFGR_UART7RST_Msk                   (0x1 << 0)
#define RCC_UART7CFGR_UART7RST                       (0x1 << 0)
#define RCC_UART7CFGR_UART7EN_Pos                    1
#define RCC_UART7CFGR_UART7EN_Msk                    (0x1 << 1)
#define RCC_UART7CFGR_UART7EN                        (0x1 << 1)
#define RCC_UART7CFGR_UART7LPEN_Pos                  2
#define RCC_UART7CFGR_UART7LPEN_Msk                  (0x1 << 2)
#define RCC_UART7CFGR_UART7LPEN                      (0x1 << 2)

/* Bit fields for RCC_UART8CFGR register */
#define RCC_UART8CFGR_UART8RST_Pos                   0
#define RCC_UART8CFGR_UART8RST_Msk                   (0x1 << 0)
#define RCC_UART8CFGR_UART8RST                       (0x1 << 0)
#define RCC_UART8CFGR_UART8EN_Pos                    1
#define RCC_UART8CFGR_UART8EN_Msk                    (0x1 << 1)
#define RCC_UART8CFGR_UART8EN                        (0x1 << 1)
#define RCC_UART8CFGR_UART8LPEN_Pos                  2
#define RCC_UART8CFGR_UART8LPEN_Msk                  (0x1 << 2)
#define RCC_UART8CFGR_UART8LPEN                      (0x1 << 2)

/* Bit fields for RCC_UART9CFGR register */
#define RCC_UART9CFGR_UART9RST_Pos                   0
#define RCC_UART9CFGR_UART9RST_Msk                   (0x1 << 0)
#define RCC_UART9CFGR_UART9RST                       (0x1 << 0)
#define RCC_UART9CFGR_UART9EN_Pos                    1
#define RCC_UART9CFGR_UART9EN_Msk                    (0x1 << 1)
#define RCC_UART9CFGR_UART9EN                        (0x1 << 1)
#define RCC_UART9CFGR_UART9LPEN_Pos                  2
#define RCC_UART9CFGR_UART9LPEN_Msk                  (0x1 << 2)
#define RCC_UART9CFGR_UART9LPEN                      (0x1 << 2)

/* Bit fields for RCC_LPUART1CFGR register */
#define RCC_LPUART1CFGR_LPUART1RST_Pos               0
#define RCC_LPUART1CFGR_LPUART1RST_Msk               (0x1 << 0)
#define RCC_LPUART1CFGR_LPUART1RST                   (0x1 << 0)
#define RCC_LPUART1CFGR_LPUART1EN_Pos                1
#define RCC_LPUART1CFGR_LPUART1EN_Msk                (0x1 << 1)
#define RCC_LPUART1CFGR_LPUART1EN                    (0x1 << 1)
#define RCC_LPUART1CFGR_LPUART1LPEN_Pos              2
#define RCC_LPUART1CFGR_LPUART1LPEN_Msk              (0x1 << 2)
#define RCC_LPUART1CFGR_LPUART1LPEN                  (0x1 << 2)
#define RCC_LPUART1CFGR_LPUART1AMEN_Pos              3
#define RCC_LPUART1CFGR_LPUART1AMEN_Msk              (0x1 << 3)
#define RCC_LPUART1CFGR_LPUART1AMEN                  (0x1 << 3)

/* Bit fields for RCC_I2C1CFGR register */
#define RCC_I2C1CFGR_I2C1RST_Pos                     0
#define RCC_I2C1CFGR_I2C1RST_Msk                     (0x1 << 0)
#define RCC_I2C1CFGR_I2C1RST                         (0x1 << 0)
#define RCC_I2C1CFGR_I2C1EN_Pos                      1
#define RCC_I2C1CFGR_I2C1EN_Msk                      (0x1 << 1)
#define RCC_I2C1CFGR_I2C1EN                          (0x1 << 1)
#define RCC_I2C1CFGR_I2C1LPEN_Pos                    2
#define RCC_I2C1CFGR_I2C1LPEN_Msk                    (0x1 << 2)
#define RCC_I2C1CFGR_I2C1LPEN                        (0x1 << 2)

/* Bit fields for RCC_I2C2CFGR register */
#define RCC_I2C2CFGR_I2C2RST_Pos                     0
#define RCC_I2C2CFGR_I2C2RST_Msk                     (0x1 << 0)
#define RCC_I2C2CFGR_I2C2RST                         (0x1 << 0)
#define RCC_I2C2CFGR_I2C2EN_Pos                      1
#define RCC_I2C2CFGR_I2C2EN_Msk                      (0x1 << 1)
#define RCC_I2C2CFGR_I2C2EN                          (0x1 << 1)
#define RCC_I2C2CFGR_I2C2LPEN_Pos                    2
#define RCC_I2C2CFGR_I2C2LPEN_Msk                    (0x1 << 2)
#define RCC_I2C2CFGR_I2C2LPEN                        (0x1 << 2)

/* Bit fields for RCC_I2C3CFGR register */
#define RCC_I2C3CFGR_I2C3RST_Pos                     0
#define RCC_I2C3CFGR_I2C3RST_Msk                     (0x1 << 0)
#define RCC_I2C3CFGR_I2C3RST                         (0x1 << 0)
#define RCC_I2C3CFGR_I2C3EN_Pos                      1
#define RCC_I2C3CFGR_I2C3EN_Msk                      (0x1 << 1)
#define RCC_I2C3CFGR_I2C3EN                          (0x1 << 1)
#define RCC_I2C3CFGR_I2C3LPEN_Pos                    2
#define RCC_I2C3CFGR_I2C3LPEN_Msk                    (0x1 << 2)
#define RCC_I2C3CFGR_I2C3LPEN                        (0x1 << 2)

/* Bit fields for RCC_I2C4CFGR register */
#define RCC_I2C4CFGR_I2C4RST_Pos                     0
#define RCC_I2C4CFGR_I2C4RST_Msk                     (0x1 << 0)
#define RCC_I2C4CFGR_I2C4RST                         (0x1 << 0)
#define RCC_I2C4CFGR_I2C4EN_Pos                      1
#define RCC_I2C4CFGR_I2C4EN_Msk                      (0x1 << 1)
#define RCC_I2C4CFGR_I2C4EN                          (0x1 << 1)
#define RCC_I2C4CFGR_I2C4LPEN_Pos                    2
#define RCC_I2C4CFGR_I2C4LPEN_Msk                    (0x1 << 2)
#define RCC_I2C4CFGR_I2C4LPEN                        (0x1 << 2)

/* Bit fields for RCC_I2C5CFGR register */
#define RCC_I2C5CFGR_I2C5RST_Pos                     0
#define RCC_I2C5CFGR_I2C5RST_Msk                     (0x1 << 0)
#define RCC_I2C5CFGR_I2C5RST                         (0x1 << 0)
#define RCC_I2C5CFGR_I2C5EN_Pos                      1
#define RCC_I2C5CFGR_I2C5EN_Msk                      (0x1 << 1)
#define RCC_I2C5CFGR_I2C5EN                          (0x1 << 1)
#define RCC_I2C5CFGR_I2C5LPEN_Pos                    2
#define RCC_I2C5CFGR_I2C5LPEN_Msk                    (0x1 << 2)
#define RCC_I2C5CFGR_I2C5LPEN                        (0x1 << 2)

/* Bit fields for RCC_I2C6CFGR register */
#define RCC_I2C6CFGR_I2C6RST_Pos                     0
#define RCC_I2C6CFGR_I2C6RST_Msk                     (0x1 << 0)
#define RCC_I2C6CFGR_I2C6RST                         (0x1 << 0)
#define RCC_I2C6CFGR_I2C6EN_Pos                      1
#define RCC_I2C6CFGR_I2C6EN_Msk                      (0x1 << 1)
#define RCC_I2C6CFGR_I2C6EN                          (0x1 << 1)
#define RCC_I2C6CFGR_I2C6LPEN_Pos                    2
#define RCC_I2C6CFGR_I2C6LPEN_Msk                    (0x1 << 2)
#define RCC_I2C6CFGR_I2C6LPEN                        (0x1 << 2)

/* Bit fields for RCC_I2C7CFGR register */
#define RCC_I2C7CFGR_I2C7RST_Pos                     0
#define RCC_I2C7CFGR_I2C7RST_Msk                     (0x1 << 0)
#define RCC_I2C7CFGR_I2C7RST                         (0x1 << 0)
#define RCC_I2C7CFGR_I2C7EN_Pos                      1
#define RCC_I2C7CFGR_I2C7EN_Msk                      (0x1 << 1)
#define RCC_I2C7CFGR_I2C7EN                          (0x1 << 1)
#define RCC_I2C7CFGR_I2C7LPEN_Pos                    2
#define RCC_I2C7CFGR_I2C7LPEN_Msk                    (0x1 << 2)
#define RCC_I2C7CFGR_I2C7LPEN                        (0x1 << 2)

/* Bit fields for RCC_I2C8CFGR register */
#define RCC_I2C8CFGR_I2C8RST_Pos                     0
#define RCC_I2C8CFGR_I2C8RST_Msk                     (0x1 << 0)
#define RCC_I2C8CFGR_I2C8RST                         (0x1 << 0)
#define RCC_I2C8CFGR_I2C8EN_Pos                      1
#define RCC_I2C8CFGR_I2C8EN_Msk                      (0x1 << 1)
#define RCC_I2C8CFGR_I2C8EN                          (0x1 << 1)
#define RCC_I2C8CFGR_I2C8LPEN_Pos                    2
#define RCC_I2C8CFGR_I2C8LPEN_Msk                    (0x1 << 2)
#define RCC_I2C8CFGR_I2C8LPEN                        (0x1 << 2)
#define RCC_I2C8CFGR_I2C8AMEN_Pos                    3
#define RCC_I2C8CFGR_I2C8AMEN_Msk                    (0x1 << 3)
#define RCC_I2C8CFGR_I2C8AMEN                        (0x1 << 3)

/* Bit fields for RCC_SAI1CFGR register */
#define RCC_SAI1CFGR_SAI1RST_Pos                     0
#define RCC_SAI1CFGR_SAI1RST_Msk                     (0x1 << 0)
#define RCC_SAI1CFGR_SAI1RST                         (0x1 << 0)
#define RCC_SAI1CFGR_SAI1EN_Pos                      1
#define RCC_SAI1CFGR_SAI1EN_Msk                      (0x1 << 1)
#define RCC_SAI1CFGR_SAI1EN                          (0x1 << 1)
#define RCC_SAI1CFGR_SAI1LPEN_Pos                    2
#define RCC_SAI1CFGR_SAI1LPEN_Msk                    (0x1 << 2)
#define RCC_SAI1CFGR_SAI1LPEN                        (0x1 << 2)

/* Bit fields for RCC_SAI2CFGR register */
#define RCC_SAI2CFGR_SAI2RST_Pos                     0
#define RCC_SAI2CFGR_SAI2RST_Msk                     (0x1 << 0)
#define RCC_SAI2CFGR_SAI2RST                         (0x1 << 0)
#define RCC_SAI2CFGR_SAI2EN_Pos                      1
#define RCC_SAI2CFGR_SAI2EN_Msk                      (0x1 << 1)
#define RCC_SAI2CFGR_SAI2EN                          (0x1 << 1)
#define RCC_SAI2CFGR_SAI2LPEN_Pos                    2
#define RCC_SAI2CFGR_SAI2LPEN_Msk                    (0x1 << 2)
#define RCC_SAI2CFGR_SAI2LPEN                        (0x1 << 2)

/* Bit fields for RCC_SAI3CFGR register */
#define RCC_SAI3CFGR_SAI3RST_Pos                     0
#define RCC_SAI3CFGR_SAI3RST_Msk                     (0x1 << 0)
#define RCC_SAI3CFGR_SAI3RST                         (0x1 << 0)
#define RCC_SAI3CFGR_SAI3EN_Pos                      1
#define RCC_SAI3CFGR_SAI3EN_Msk                      (0x1 << 1)
#define RCC_SAI3CFGR_SAI3EN                          (0x1 << 1)
#define RCC_SAI3CFGR_SAI3LPEN_Pos                    2
#define RCC_SAI3CFGR_SAI3LPEN_Msk                    (0x1 << 2)
#define RCC_SAI3CFGR_SAI3LPEN                        (0x1 << 2)

/* Bit fields for RCC_SAI4CFGR register */
#define RCC_SAI4CFGR_SAI4RST_Pos                     0
#define RCC_SAI4CFGR_SAI4RST_Msk                     (0x1 << 0)
#define RCC_SAI4CFGR_SAI4RST                         (0x1 << 0)
#define RCC_SAI4CFGR_SAI4EN_Pos                      1
#define RCC_SAI4CFGR_SAI4EN_Msk                      (0x1 << 1)
#define RCC_SAI4CFGR_SAI4EN                          (0x1 << 1)
#define RCC_SAI4CFGR_SAI4LPEN_Pos                    2
#define RCC_SAI4CFGR_SAI4LPEN_Msk                    (0x1 << 2)
#define RCC_SAI4CFGR_SAI4LPEN                        (0x1 << 2)

/* Bit fields for RCC_MDF1CFGR register */
#define RCC_MDF1CFGR_MDF1RST_Pos                     0
#define RCC_MDF1CFGR_MDF1RST_Msk                     (0x1 << 0)
#define RCC_MDF1CFGR_MDF1RST                         (0x1 << 0)
#define RCC_MDF1CFGR_MDF1EN_Pos                      1
#define RCC_MDF1CFGR_MDF1EN_Msk                      (0x1 << 1)
#define RCC_MDF1CFGR_MDF1EN                          (0x1 << 1)
#define RCC_MDF1CFGR_MDF1LPEN_Pos                    2
#define RCC_MDF1CFGR_MDF1LPEN_Msk                    (0x1 << 2)
#define RCC_MDF1CFGR_MDF1LPEN                        (0x1 << 2)

/* Bit fields for RCC_MDF2CFGR register */
#define RCC_MDF2CFGR_MDF2RST_Pos                     0
#define RCC_MDF2CFGR_MDF2RST_Msk                     (0x1 << 0)
#define RCC_MDF2CFGR_MDF2RST                         (0x1 << 0)
#define RCC_MDF2CFGR_MDF2EN_Pos                      1
#define RCC_MDF2CFGR_MDF2EN_Msk                      (0x1 << 1)
#define RCC_MDF2CFGR_MDF2EN                          (0x1 << 1)
#define RCC_MDF2CFGR_MDF2LPEN_Pos                    2
#define RCC_MDF2CFGR_MDF2LPEN_Msk                    (0x1 << 2)
#define RCC_MDF2CFGR_MDF2LPEN                        (0x1 << 2)
#define RCC_MDF2CFGR_MDF2AMEN_Pos                    3
#define RCC_MDF2CFGR_MDF2AMEN_Msk                    (0x1 << 3)
#define RCC_MDF2CFGR_MDF2AMEN                        (0x1 << 3)

/* Bit fields for RCC_FDCANCFGR register */
#define RCC_FDCANCFGR_FDCANRST_Pos                   0
#define RCC_FDCANCFGR_FDCANRST_Msk                   (0x1 << 0)
#define RCC_FDCANCFGR_FDCANRST                       (0x1 << 0)
#define RCC_FDCANCFGR_FDCANEN_Pos                    1
#define RCC_FDCANCFGR_FDCANEN_Msk                    (0x1 << 1)
#define RCC_FDCANCFGR_FDCANEN                        (0x1 << 1)
#define RCC_FDCANCFGR_FDCANLPEN_Pos                  2
#define RCC_FDCANCFGR_FDCANLPEN_Msk                  (0x1 << 2)
#define RCC_FDCANCFGR_FDCANLPEN                      (0x1 << 2)

/* Bit fields for RCC_HDPCFGR register */
#define RCC_HDPCFGR_HDPRST_Pos                       0
#define RCC_HDPCFGR_HDPRST_Msk                       (0x1 << 0)
#define RCC_HDPCFGR_HDPRST                           (0x1 << 0)
#define RCC_HDPCFGR_HDPEN_Pos                        1
#define RCC_HDPCFGR_HDPEN_Msk                        (0x1 << 1)
#define RCC_HDPCFGR_HDPEN                            (0x1 << 1)

/* Bit fields for RCC_ADC12CFGR register */
#define RCC_ADC12CFGR_ADC12RST_Pos                   0
#define RCC_ADC12CFGR_ADC12RST_Msk                   (0x1 << 0)
#define RCC_ADC12CFGR_ADC12RST                       (0x1 << 0)
#define RCC_ADC12CFGR_ADC12EN_Pos                    1
#define RCC_ADC12CFGR_ADC12EN_Msk                    (0x1 << 1)
#define RCC_ADC12CFGR_ADC12EN                        (0x1 << 1)
#define RCC_ADC12CFGR_ADC12LPEN_Pos                  2
#define RCC_ADC12CFGR_ADC12LPEN_Msk                  (0x1 << 2)
#define RCC_ADC12CFGR_ADC12LPEN                      (0x1 << 2)

/* Bit fields for RCC_ADC3CFGR register */
#define RCC_ADC3CFGR_ADC3RST_Pos                     0
#define RCC_ADC3CFGR_ADC3RST_Msk                     (0x1 << 0)
#define RCC_ADC3CFGR_ADC3RST                         (0x1 << 0)
#define RCC_ADC3CFGR_ADC3EN_Pos                      1
#define RCC_ADC3CFGR_ADC3EN_Msk                      (0x1 << 1)
#define RCC_ADC3CFGR_ADC3EN                          (0x1 << 1)
#define RCC_ADC3CFGR_ADC3LPEN_Pos                    2
#define RCC_ADC3CFGR_ADC3LPEN_Msk                    (0x1 << 2)
#define RCC_ADC3CFGR_ADC3LPEN                        (0x1 << 2)

/* Bit fields for RCC_ETH1CFGR register */
#define RCC_ETH1CFGR_ETH1RST_Pos                     0
#define RCC_ETH1CFGR_ETH1RST_Msk                     (0x1 << 0)
#define RCC_ETH1CFGR_ETH1RST                         (0x1 << 0)
#define RCC_ETH1CFGR_ETH1MACEN_Pos                   1
#define RCC_ETH1CFGR_ETH1MACEN_Msk                   (0x1 << 1)
#define RCC_ETH1CFGR_ETH1MACEN                       (0x1 << 1)
#define RCC_ETH1CFGR_ETH1MACLPEN_Pos                 2
#define RCC_ETH1CFGR_ETH1MACLPEN_Msk                 (0x1 << 2)
#define RCC_ETH1CFGR_ETH1MACLPEN                     (0x1 << 2)
#define RCC_ETH1CFGR_ETH1STPEN_Pos                   4
#define RCC_ETH1CFGR_ETH1STPEN_Msk                   (0x1 << 4)
#define RCC_ETH1CFGR_ETH1STPEN                       (0x1 << 4)
#define RCC_ETH1CFGR_ETH1EN_Pos                      5
#define RCC_ETH1CFGR_ETH1EN_Msk                      (0x1 << 5)
#define RCC_ETH1CFGR_ETH1EN                          (0x1 << 5)
#define RCC_ETH1CFGR_ETH1LPEN_Pos                    6
#define RCC_ETH1CFGR_ETH1LPEN_Msk                    (0x1 << 6)
#define RCC_ETH1CFGR_ETH1LPEN                        (0x1 << 6)
#define RCC_ETH1CFGR_ETH1TXEN_Pos                    8
#define RCC_ETH1CFGR_ETH1TXEN_Msk                    (0x1 << 8)
#define RCC_ETH1CFGR_ETH1TXEN                        (0x1 << 8)
#define RCC_ETH1CFGR_ETH1TXLPEN_Pos                  9
#define RCC_ETH1CFGR_ETH1TXLPEN_Msk                  (0x1 << 9)
#define RCC_ETH1CFGR_ETH1TXLPEN                      (0x1 << 9)
#define RCC_ETH1CFGR_ETH1RXEN_Pos                    10
#define RCC_ETH1CFGR_ETH1RXEN_Msk                    (0x1 << 10)
#define RCC_ETH1CFGR_ETH1RXEN                        (0x1 << 10)
#define RCC_ETH1CFGR_ETH1RXLPEN_Pos                  11
#define RCC_ETH1CFGR_ETH1RXLPEN_Msk                  (0x1 << 11)
#define RCC_ETH1CFGR_ETH1RXLPEN                      (0x1 << 11)

/* Bit fields for RCC_ETH2CFGR register */
#define RCC_ETH2CFGR_ETH2RST_Pos                     0
#define RCC_ETH2CFGR_ETH2RST_Msk                     (0x1 << 0)
#define RCC_ETH2CFGR_ETH2RST                         (0x1 << 0)
#define RCC_ETH2CFGR_ETH2MACEN_Pos                   1
#define RCC_ETH2CFGR_ETH2MACEN_Msk                   (0x1 << 1)
#define RCC_ETH2CFGR_ETH2MACEN                       (0x1 << 1)
#define RCC_ETH2CFGR_ETH2MACLPEN_Pos                 2
#define RCC_ETH2CFGR_ETH2MACLPEN_Msk                 (0x1 << 2)
#define RCC_ETH2CFGR_ETH2MACLPEN                     (0x1 << 2)
#define RCC_ETH2CFGR_ETH2STPEN_Pos                   4
#define RCC_ETH2CFGR_ETH2STPEN_Msk                   (0x1 << 4)
#define RCC_ETH2CFGR_ETH2STPEN                       (0x1 << 4)
#define RCC_ETH2CFGR_ETH2EN_Pos                      5
#define RCC_ETH2CFGR_ETH2EN_Msk                      (0x1 << 5)
#define RCC_ETH2CFGR_ETH2EN                          (0x1 << 5)
#define RCC_ETH2CFGR_ETH2LPEN_Pos                    6
#define RCC_ETH2CFGR_ETH2LPEN_Msk                    (0x1 << 6)
#define RCC_ETH2CFGR_ETH2LPEN                        (0x1 << 6)
#define RCC_ETH2CFGR_ETH2TXEN_Pos                    8
#define RCC_ETH2CFGR_ETH2TXEN_Msk                    (0x1 << 8)
#define RCC_ETH2CFGR_ETH2TXEN                        (0x1 << 8)
#define RCC_ETH2CFGR_ETH2TXLPEN_Pos                  9
#define RCC_ETH2CFGR_ETH2TXLPEN_Msk                  (0x1 << 9)
#define RCC_ETH2CFGR_ETH2TXLPEN                      (0x1 << 9)
#define RCC_ETH2CFGR_ETH2RXEN_Pos                    10
#define RCC_ETH2CFGR_ETH2RXEN_Msk                    (0x1 << 10)
#define RCC_ETH2CFGR_ETH2RXEN                        (0x1 << 10)
#define RCC_ETH2CFGR_ETH2RXLPEN_Pos                  11
#define RCC_ETH2CFGR_ETH2RXLPEN_Msk                  (0x1 << 11)
#define RCC_ETH2CFGR_ETH2RXLPEN                      (0x1 << 11)

/* Bit fields for RCC_ETHSWCFGR register */
#define RCC_ETHSWCFGR_ETHSWRST_Pos                   0
#define RCC_ETHSWCFGR_ETHSWRST_Msk                   (0x1 << 0)
#define RCC_ETHSWCFGR_ETHSWRST                       (0x1 << 0)
#define RCC_ETHSWCFGR_ETHSWMACEN_Pos                 1
#define RCC_ETHSWCFGR_ETHSWMACEN_Msk                 (0x1 << 1)
#define RCC_ETHSWCFGR_ETHSWMACEN                     (0x1 << 1)
#define RCC_ETHSWCFGR_ETHSWMACLPEN_Pos               2
#define RCC_ETHSWCFGR_ETHSWMACLPEN_Msk               (0x1 << 2)
#define RCC_ETHSWCFGR_ETHSWMACLPEN                   (0x1 << 2)
#define RCC_ETHSWCFGR_ETHSWSTPEN_Pos                 4
#define RCC_ETHSWCFGR_ETHSWSTPEN_Msk                 (0x1 << 4)
#define RCC_ETHSWCFGR_ETHSWSTPEN                     (0x1 << 4)
#define RCC_ETHSWCFGR_ETHSWEN_Pos                    5
#define RCC_ETHSWCFGR_ETHSWEN_Msk                    (0x1 << 5)
#define RCC_ETHSWCFGR_ETHSWEN                        (0x1 << 5)
#define RCC_ETHSWCFGR_ETHSWLPEN_Pos                  6
#define RCC_ETHSWCFGR_ETHSWLPEN_Msk                  (0x1 << 6)
#define RCC_ETHSWCFGR_ETHSWLPEN                      (0x1 << 6)
#define RCC_ETHSWCFGR_ETHSWTXEN_Pos                  8
#define RCC_ETHSWCFGR_ETHSWTXEN_Msk                  (0x1 << 8)
#define RCC_ETHSWCFGR_ETHSWTXEN                      (0x1 << 8)
#define RCC_ETHSWCFGR_ETHSWTXLPEN_Pos                9
#define RCC_ETHSWCFGR_ETHSWTXLPEN_Msk                (0x1 << 9)
#define RCC_ETHSWCFGR_ETHSWTXLPEN                    (0x1 << 9)
#define RCC_ETHSWCFGR_ETHSWRXEN_Pos                  10
#define RCC_ETHSWCFGR_ETHSWRXEN_Msk                  (0x1 << 10)
#define RCC_ETHSWCFGR_ETHSWRXEN                      (0x1 << 10)
#define RCC_ETHSWCFGR_ETHSWRXLPEN_Pos                11
#define RCC_ETHSWCFGR_ETHSWRXLPEN_Msk                (0x1 << 11)
#define RCC_ETHSWCFGR_ETHSWRXLPEN                    (0x1 << 11)

/* Bit fields for RCC_USB2CFGR register */
#define RCC_USB2CFGR_USB2RST_Pos                     0
#define RCC_USB2CFGR_USB2RST_Msk                     (0x1 << 0)
#define RCC_USB2CFGR_USB2RST                         (0x1 << 0)
#define RCC_USB2CFGR_USB2EN_Pos                      1
#define RCC_USB2CFGR_USB2EN_Msk                      (0x1 << 1)
#define RCC_USB2CFGR_USB2EN                          (0x1 << 1)
#define RCC_USB2CFGR_USB2LPEN_Pos                    2
#define RCC_USB2CFGR_USB2LPEN_Msk                    (0x1 << 2)
#define RCC_USB2CFGR_USB2LPEN                        (0x1 << 2)
#define RCC_USB2CFGR_USB2STPEN_Pos                   4
#define RCC_USB2CFGR_USB2STPEN_Msk                   (0x1 << 4)
#define RCC_USB2CFGR_USB2STPEN                       (0x1 << 4)

/* Bit fields for RCC_USB2PHY1CFGR register */
#define RCC_USB2PHY1CFGR_USB2PHY1RST_Pos             0
#define RCC_USB2PHY1CFGR_USB2PHY1RST_Msk             (0x1 << 0)
#define RCC_USB2PHY1CFGR_USB2PHY1RST                 (0x1 << 0)
#define RCC_USB2PHY1CFGR_USB2PHY1EN_Pos              1
#define RCC_USB2PHY1CFGR_USB2PHY1EN_Msk              (0x1 << 1)
#define RCC_USB2PHY1CFGR_USB2PHY1EN                  (0x1 << 1)
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN_Pos            2
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN_Msk            (0x1 << 2)
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN                (0x1 << 2)
#define RCC_USB2PHY1CFGR_USB2PHY1STPEN_Pos           4
#define RCC_USB2PHY1CFGR_USB2PHY1STPEN_Msk           (0x1 << 4)
#define RCC_USB2PHY1CFGR_USB2PHY1STPEN               (0x1 << 4)
#define RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL_Pos        15
#define RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL_Msk        (0x1 << 15)
#define RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL            (0x1 << 15)

/* Bit fields for RCC_USB2PHY2CFGR register */
#define RCC_USB2PHY2CFGR_USB2PHY2RST_Pos             0
#define RCC_USB2PHY2CFGR_USB2PHY2RST_Msk             (0x1 << 0)
#define RCC_USB2PHY2CFGR_USB2PHY2RST                 (0x1 << 0)
#define RCC_USB2PHY2CFGR_USB2PHY2EN_Pos              1
#define RCC_USB2PHY2CFGR_USB2PHY2EN_Msk              (0x1 << 1)
#define RCC_USB2PHY2CFGR_USB2PHY2EN                  (0x1 << 1)
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN_Pos            2
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN_Msk            (0x1 << 2)
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN                (0x1 << 2)
#define RCC_USB2PHY2CFGR_USB2PHY2STPEN_Pos           4
#define RCC_USB2PHY2CFGR_USB2PHY2STPEN_Msk           (0x1 << 4)
#define RCC_USB2PHY2CFGR_USB2PHY2STPEN               (0x1 << 4)
#define RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL_Pos        15
#define RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL_Msk        (0x1 << 15)
#define RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL            (0x1 << 15)

/* Bit fields for RCC_USB3DRDCFGR register */
#define RCC_USB3DRDCFGR_USB3DRDRST_Pos               0
#define RCC_USB3DRDCFGR_USB3DRDRST_Msk               (0x1 << 0)
#define RCC_USB3DRDCFGR_USB3DRDRST                   (0x1 << 0)
#define RCC_USB3DRDCFGR_USB3DRDEN_Pos                1
#define RCC_USB3DRDCFGR_USB3DRDEN_Msk                (0x1 << 1)
#define RCC_USB3DRDCFGR_USB3DRDEN                    (0x1 << 1)
#define RCC_USB3DRDCFGR_USB3DRDLPEN_Pos              2
#define RCC_USB3DRDCFGR_USB3DRDLPEN_Msk              (0x1 << 2)
#define RCC_USB3DRDCFGR_USB3DRDLPEN                  (0x1 << 2)
#define RCC_USB3DRDCFGR_USB3DRDSTPEN_Pos             4
#define RCC_USB3DRDCFGR_USB3DRDSTPEN_Msk             (0x1 << 4)
#define RCC_USB3DRDCFGR_USB3DRDSTPEN                 (0x1 << 4)

/* Bit fields for RCC_USB3PCIEPHYCFGR register */
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYRST_Pos       0
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYRST_Msk       (0x1 << 0)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYRST           (0x1 << 0)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYEN_Pos        1
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYEN_Msk        (0x1 << 1)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYEN            (0x1 << 1)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYLPEN_Pos      2
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYLPEN_Msk      (0x1 << 2)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYLPEN          (0x1 << 2)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYSTPEN_Pos     4
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYSTPEN_Msk     (0x1 << 4)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYSTPEN         (0x1 << 4)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYCKREFSEL_Pos  15
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYCKREFSEL_Msk  (0x1 << 15)
#define RCC_USB3PCIEPHYCFGR_USB3PCIEPHYCKREFSEL      (0x1 << 15)

/* Bit fields for RCC_PCIECFGR register */
#define RCC_PCIECFGR_PCIERST_Pos                     0
#define RCC_PCIECFGR_PCIERST_Msk                     (0x1 << 0)
#define RCC_PCIECFGR_PCIERST                         (0x1 << 0)
#define RCC_PCIECFGR_PCIEEN_Pos                      1
#define RCC_PCIECFGR_PCIEEN_Msk                      (0x1 << 1)
#define RCC_PCIECFGR_PCIEEN                          (0x1 << 1)
#define RCC_PCIECFGR_PCIELPEN_Pos                    2
#define RCC_PCIECFGR_PCIELPEN_Msk                    (0x1 << 2)
#define RCC_PCIECFGR_PCIELPEN                        (0x1 << 2)
#define RCC_PCIECFGR_PCIESTPEN_Pos                   4
#define RCC_PCIECFGR_PCIESTPEN_Msk                   (0x1 << 4)
#define RCC_PCIECFGR_PCIESTPEN                       (0x1 << 4)

/* Bit fields for RCC_USBTCCFGR register */
#define RCC_USBTCCFGR_USBTCRST_Pos                   0
#define RCC_USBTCCFGR_USBTCRST_Msk                   (0x1 << 0)
#define RCC_USBTCCFGR_USBTCRST                       (0x1 << 0)
#define RCC_USBTCCFGR_USBTCEN_Pos                    1
#define RCC_USBTCCFGR_USBTCEN_Msk                    (0x1 << 1)
#define RCC_USBTCCFGR_USBTCEN                        (0x1 << 1)
#define RCC_USBTCCFGR_USBTCLPEN_Pos                  2
#define RCC_USBTCCFGR_USBTCLPEN_Msk                  (0x1 << 2)
#define RCC_USBTCCFGR_USBTCLPEN                      (0x1 << 2)

/* Bit fields for RCC_STGENCFGR register */
#define RCC_STGENCFGR_STGENEN_Pos                    1
#define RCC_STGENCFGR_STGENEN_Msk                    (0x1 << 1)
#define RCC_STGENCFGR_STGENEN                        (0x1 << 1)
#define RCC_STGENCFGR_STGENLPEN_Pos                  2
#define RCC_STGENCFGR_STGENLPEN_Msk                  (0x1 << 2)
#define RCC_STGENCFGR_STGENLPEN                      (0x1 << 2)
#define RCC_STGENCFGR_STGENSTPEN_Pos                 4
#define RCC_STGENCFGR_STGENSTPEN_Msk                 (0x1 << 4)
#define RCC_STGENCFGR_STGENSTPEN                     (0x1 << 4)

/* Bit fields for RCC_SDMMC1CFGR register */
#define RCC_SDMMC1CFGR_SDMMC1RST_Pos                 0
#define RCC_SDMMC1CFGR_SDMMC1RST_Msk                 (0x1 << 0)
#define RCC_SDMMC1CFGR_SDMMC1RST                     (0x1 << 0)
#define RCC_SDMMC1CFGR_SDMMC1EN_Pos                  1
#define RCC_SDMMC1CFGR_SDMMC1EN_Msk                  (0x1 << 1)
#define RCC_SDMMC1CFGR_SDMMC1EN                      (0x1 << 1)
#define RCC_SDMMC1CFGR_SDMMC1LPEN_Pos                2
#define RCC_SDMMC1CFGR_SDMMC1LPEN_Msk                (0x1 << 2)
#define RCC_SDMMC1CFGR_SDMMC1LPEN                    (0x1 << 2)
#define RCC_SDMMC1CFGR_SDMMC1DLLRST_Pos              16
#define RCC_SDMMC1CFGR_SDMMC1DLLRST_Msk              (0x1 << 16)
#define RCC_SDMMC1CFGR_SDMMC1DLLRST                  (0x1 << 16)

/* Bit fields for RCC_SDMMC2CFGR register */
#define RCC_SDMMC2CFGR_SDMMC2RST_Pos                 0
#define RCC_SDMMC2CFGR_SDMMC2RST_Msk                 (0x1 << 0)
#define RCC_SDMMC2CFGR_SDMMC2RST                     (0x1 << 0)
#define RCC_SDMMC2CFGR_SDMMC2EN_Pos                  1
#define RCC_SDMMC2CFGR_SDMMC2EN_Msk                  (0x1 << 1)
#define RCC_SDMMC2CFGR_SDMMC2EN                      (0x1 << 1)
#define RCC_SDMMC2CFGR_SDMMC2LPEN_Pos                2
#define RCC_SDMMC2CFGR_SDMMC2LPEN_Msk                (0x1 << 2)
#define RCC_SDMMC2CFGR_SDMMC2LPEN                    (0x1 << 2)
#define RCC_SDMMC2CFGR_SDMMC2DLLRST_Pos              16
#define RCC_SDMMC2CFGR_SDMMC2DLLRST_Msk              (0x1 << 16)
#define RCC_SDMMC2CFGR_SDMMC2DLLRST                  (0x1 << 16)

/* Bit fields for RCC_SDMMC3CFGR register */
#define RCC_SDMMC3CFGR_SDMMC3RST_Pos                 0
#define RCC_SDMMC3CFGR_SDMMC3RST_Msk                 (0x1 << 0)
#define RCC_SDMMC3CFGR_SDMMC3RST                     (0x1 << 0)
#define RCC_SDMMC3CFGR_SDMMC3EN_Pos                  1
#define RCC_SDMMC3CFGR_SDMMC3EN_Msk                  (0x1 << 1)
#define RCC_SDMMC3CFGR_SDMMC3EN                      (0x1 << 1)
#define RCC_SDMMC3CFGR_SDMMC3LPEN_Pos                2
#define RCC_SDMMC3CFGR_SDMMC3LPEN_Msk                (0x1 << 2)
#define RCC_SDMMC3CFGR_SDMMC3LPEN                    (0x1 << 2)
#define RCC_SDMMC3CFGR_SDMMC3DLLRST_Pos              16
#define RCC_SDMMC3CFGR_SDMMC3DLLRST_Msk              (0x1 << 16)
#define RCC_SDMMC3CFGR_SDMMC3DLLRST                  (0x1 << 16)

/* Bit fields for RCC_GPUCFGR register */
#define RCC_GPUCFGR_GPURST_Pos                       0
#define RCC_GPUCFGR_GPURST_Msk                       (0x1 << 0)
#define RCC_GPUCFGR_GPURST                           (0x1 << 0)
#define RCC_GPUCFGR_GPUEN_Pos                        1
#define RCC_GPUCFGR_GPUEN_Msk                        (0x1 << 1)
#define RCC_GPUCFGR_GPUEN                            (0x1 << 1)
#define RCC_GPUCFGR_GPULPEN_Pos                      2
#define RCC_GPUCFGR_GPULPEN_Msk                      (0x1 << 2)
#define RCC_GPUCFGR_GPULPEN                          (0x1 << 2)

/* Bit fields for RCC_LTDCCFGR register */
#define RCC_LTDCCFGR_LTDCRST_Pos                     0
#define RCC_LTDCCFGR_LTDCRST_Msk                     (0x1 << 0)
#define RCC_LTDCCFGR_LTDCRST                         (0x1 << 0)
#define RCC_LTDCCFGR_LTDCEN_Pos                      1
#define RCC_LTDCCFGR_LTDCEN_Msk                      (0x1 << 1)
#define RCC_LTDCCFGR_LTDCEN                          (0x1 << 1)
#define RCC_LTDCCFGR_LTDCLPEN_Pos                    2
#define RCC_LTDCCFGR_LTDCLPEN_Msk                    (0x1 << 2)
#define RCC_LTDCCFGR_LTDCLPEN                        (0x1 << 2)

/* Bit fields for RCC_DSICFGR register */
#define RCC_DSICFGR_DSIRST_Pos                       0
#define RCC_DSICFGR_DSIRST_Msk                       (0x1 << 0)
#define RCC_DSICFGR_DSIRST                           (0x1 << 0)
#define RCC_DSICFGR_DSIEN_Pos                        1
#define RCC_DSICFGR_DSIEN_Msk                        (0x1 << 1)
#define RCC_DSICFGR_DSIEN                            (0x1 << 1)
#define RCC_DSICFGR_DSILPEN_Pos                      2
#define RCC_DSICFGR_DSILPEN_Msk                      (0x1 << 2)
#define RCC_DSICFGR_DSILPEN                          (0x1 << 2)
#define RCC_DSICFGR_DSIBLSEL_Pos                     12
#define RCC_DSICFGR_DSIBLSEL_Msk                     (0x1 << 12)
#define RCC_DSICFGR_DSIBLSEL                         (0x1 << 12)
#define RCC_DSICFGR_DSIPHYCKREFSEL_Pos               15
#define RCC_DSICFGR_DSIPHYCKREFSEL_Msk               (0x1 << 15)
#define RCC_DSICFGR_DSIPHYCKREFSEL                   (0x1 << 15)

/* Bit fields for RCC_LDITCFGR register */
#define RCC_LDITCFGR_LDITRST_Pos                     0
#define RCC_LDITCFGR_LDITRST_Msk                     (0x1 << 0)
#define RCC_LDITCFGR_LDITRST                         (0x1 << 0)
#define RCC_LDITCFGR_LDITEN_Pos                      1
#define RCC_LDITCFGR_LDITEN_Msk                      (0x1 << 1)
#define RCC_LDITCFGR_LDITEN                          (0x1 << 1)
#define RCC_LDITCFGR_LDITLPEN_Pos                    2
#define RCC_LDITCFGR_LDITLPEN_Msk                    (0x1 << 2)
#define RCC_LDITCFGR_LDITLPEN                        (0x1 << 2)
#define RCC_LDITCFGR_LVDSPHYCKREFSEL_Pos             15
#define RCC_LDITCFGR_LVDSPHYCKREFSEL_Msk             (0x1 << 15)
#define RCC_LDITCFGR_LVDSPHYCKREFSEL                 (0x1 << 15)

/* Bit fields for RCC_CSI2CFGR register */
#define RCC_CSI2CFGR_CSI2RST_Pos                     0
#define RCC_CSI2CFGR_CSI2RST_Msk                     (0x1 << 0)
#define RCC_CSI2CFGR_CSI2RST                         (0x1 << 0)
#define RCC_CSI2CFGR_CSI2EN_Pos                      1
#define RCC_CSI2CFGR_CSI2EN_Msk                      (0x1 << 1)
#define RCC_CSI2CFGR_CSI2EN                          (0x1 << 1)
#define RCC_CSI2CFGR_CSI2LPEN_Pos                    2
#define RCC_CSI2CFGR_CSI2LPEN_Msk                    (0x1 << 2)
#define RCC_CSI2CFGR_CSI2LPEN                        (0x1 << 2)

/* Bit fields for RCC_DCMIPPCFGR register */
#define RCC_DCMIPPCFGR_DCMIPPRST_Pos                 0
#define RCC_DCMIPPCFGR_DCMIPPRST_Msk                 (0x1 << 0)
#define RCC_DCMIPPCFGR_DCMIPPRST                     (0x1 << 0)
#define RCC_DCMIPPCFGR_DCMIPPEN_Pos                  1
#define RCC_DCMIPPCFGR_DCMIPPEN_Msk                  (0x1 << 1)
#define RCC_DCMIPPCFGR_DCMIPPEN                      (0x1 << 1)
#define RCC_DCMIPPCFGR_DCMIPPLPEN_Pos                2
#define RCC_DCMIPPCFGR_DCMIPPLPEN_Msk                (0x1 << 2)
#define RCC_DCMIPPCFGR_DCMIPPLPEN                    (0x1 << 2)

/* Bit fields for RCC_CCICFGR register */
#define RCC_CCICFGR_CCIRST_Pos                       0
#define RCC_CCICFGR_CCIRST_Msk                       (0x1 << 0)
#define RCC_CCICFGR_CCIRST                           (0x1 << 0)
#define RCC_CCICFGR_CCIEN_Pos                        1
#define RCC_CCICFGR_CCIEN_Msk                        (0x1 << 1)
#define RCC_CCICFGR_CCIEN                            (0x1 << 1)
#define RCC_CCICFGR_CCILPEN_Pos                      2
#define RCC_CCICFGR_CCILPEN_Msk                      (0x1 << 2)
#define RCC_CCICFGR_CCILPEN                          (0x1 << 2)

/* Bit fields for RCC_VDECCFGR register */
#define RCC_VDECCFGR_VDECRST_Pos                     0
#define RCC_VDECCFGR_VDECRST_Msk                     (0x1 << 0)
#define RCC_VDECCFGR_VDECRST                         (0x1 << 0)
#define RCC_VDECCFGR_VDECEN_Pos                      1
#define RCC_VDECCFGR_VDECEN_Msk                      (0x1 << 1)
#define RCC_VDECCFGR_VDECEN                          (0x1 << 1)
#define RCC_VDECCFGR_VDECLPEN_Pos                    2
#define RCC_VDECCFGR_VDECLPEN_Msk                    (0x1 << 2)
#define RCC_VDECCFGR_VDECLPEN                        (0x1 << 2)

/* Bit fields for RCC_VENCCFGR register */
#define RCC_VENCCFGR_VENCRST_Pos                     0
#define RCC_VENCCFGR_VENCRST_Msk                     (0x1 << 0)
#define RCC_VENCCFGR_VENCRST                         (0x1 << 0)
#define RCC_VENCCFGR_VENCEN_Pos                      1
#define RCC_VENCCFGR_VENCEN_Msk                      (0x1 << 1)
#define RCC_VENCCFGR_VENCEN                          (0x1 << 1)
#define RCC_VENCCFGR_VENCLPEN_Pos                    2
#define RCC_VENCCFGR_VENCLPEN_Msk                    (0x1 << 2)
#define RCC_VENCCFGR_VENCLPEN                        (0x1 << 2)

/* Bit fields for RCC_RNGCFGR register */
#define RCC_RNGCFGR_RNGRST_Pos                       0
#define RCC_RNGCFGR_RNGRST_Msk                       (0x1 << 0)
#define RCC_RNGCFGR_RNGRST                           (0x1 << 0)
#define RCC_RNGCFGR_RNGEN_Pos                        1
#define RCC_RNGCFGR_RNGEN_Msk                        (0x1 << 1)
#define RCC_RNGCFGR_RNGEN                            (0x1 << 1)
#define RCC_RNGCFGR_RNGLPEN_Pos                      2
#define RCC_RNGCFGR_RNGLPEN_Msk                      (0x1 << 2)
#define RCC_RNGCFGR_RNGLPEN                          (0x1 << 2)

/* Bit fields for RCC_PKACFGR register */
#define RCC_PKACFGR_PKARST_Pos                       0
#define RCC_PKACFGR_PKARST_Msk                       (0x1 << 0)
#define RCC_PKACFGR_PKARST                           (0x1 << 0)
#define RCC_PKACFGR_PKAEN_Pos                        1
#define RCC_PKACFGR_PKAEN_Msk                        (0x1 << 1)
#define RCC_PKACFGR_PKAEN                            (0x1 << 1)
#define RCC_PKACFGR_PKALPEN_Pos                      2
#define RCC_PKACFGR_PKALPEN_Msk                      (0x1 << 2)
#define RCC_PKACFGR_PKALPEN                          (0x1 << 2)

/* Bit fields for RCC_SAESCFGR register */
#define RCC_SAESCFGR_SAESRST_Pos                     0
#define RCC_SAESCFGR_SAESRST_Msk                     (0x1 << 0)
#define RCC_SAESCFGR_SAESRST                         (0x1 << 0)
#define RCC_SAESCFGR_SAESEN_Pos                      1
#define RCC_SAESCFGR_SAESEN_Msk                      (0x1 << 1)
#define RCC_SAESCFGR_SAESEN                          (0x1 << 1)
#define RCC_SAESCFGR_SAESLPEN_Pos                    2
#define RCC_SAESCFGR_SAESLPEN_Msk                    (0x1 << 2)
#define RCC_SAESCFGR_SAESLPEN                        (0x1 << 2)

/* Bit fields for RCC_HASHCFGR register */
#define RCC_HASHCFGR_HASHRST_Pos                     0
#define RCC_HASHCFGR_HASHRST_Msk                     (0x1 << 0)
#define RCC_HASHCFGR_HASHRST                         (0x1 << 0)
#define RCC_HASHCFGR_HASHEN_Pos                      1
#define RCC_HASHCFGR_HASHEN_Msk                      (0x1 << 1)
#define RCC_HASHCFGR_HASHEN                          (0x1 << 1)
#define RCC_HASHCFGR_HASHLPEN_Pos                    2
#define RCC_HASHCFGR_HASHLPEN_Msk                    (0x1 << 2)
#define RCC_HASHCFGR_HASHLPEN                        (0x1 << 2)

/* Bit fields for RCC_CRYP1CFGR register */
#define RCC_CRYP1CFGR_CRYP1RST_Pos                   0
#define RCC_CRYP1CFGR_CRYP1RST_Msk                   (0x1 << 0)
#define RCC_CRYP1CFGR_CRYP1RST                       (0x1 << 0)
#define RCC_CRYP1CFGR_CRYP1EN_Pos                    1
#define RCC_CRYP1CFGR_CRYP1EN_Msk                    (0x1 << 1)
#define RCC_CRYP1CFGR_CRYP1EN                        (0x1 << 1)
#define RCC_CRYP1CFGR_CRYP1LPEN_Pos                  2
#define RCC_CRYP1CFGR_CRYP1LPEN_Msk                  (0x1 << 2)
#define RCC_CRYP1CFGR_CRYP1LPEN                      (0x1 << 2)

/* Bit fields for RCC_CRYP2CFGR register */
#define RCC_CRYP2CFGR_CRYP2RST_Pos                   0
#define RCC_CRYP2CFGR_CRYP2RST_Msk                   (0x1 << 0)
#define RCC_CRYP2CFGR_CRYP2RST                       (0x1 << 0)
#define RCC_CRYP2CFGR_CRYP2EN_Pos                    1
#define RCC_CRYP2CFGR_CRYP2EN_Msk                    (0x1 << 1)
#define RCC_CRYP2CFGR_CRYP2EN                        (0x1 << 1)
#define RCC_CRYP2CFGR_CRYP2LPEN_Pos                  2
#define RCC_CRYP2CFGR_CRYP2LPEN_Msk                  (0x1 << 2)
#define RCC_CRYP2CFGR_CRYP2LPEN                      (0x1 << 2)

/* Bit fields for RCC_IWDG1CFGR register */
#define RCC_IWDG1CFGR_IWDG1EN_Pos                    1
#define RCC_IWDG1CFGR_IWDG1EN_Msk                    (0x1 << 1)
#define RCC_IWDG1CFGR_IWDG1EN                        (0x1 << 1)
#define RCC_IWDG1CFGR_IWDG1LPEN_Pos                  2
#define RCC_IWDG1CFGR_IWDG1LPEN_Msk                  (0x1 << 2)
#define RCC_IWDG1CFGR_IWDG1LPEN                      (0x1 << 2)

/* Bit fields for RCC_IWDG2CFGR register */
#define RCC_IWDG2CFGR_IWDG2EN_Pos                    1
#define RCC_IWDG2CFGR_IWDG2EN_Msk                    (0x1 << 1)
#define RCC_IWDG2CFGR_IWDG2EN                        (0x1 << 1)
#define RCC_IWDG2CFGR_IWDG2LPEN_Pos                  2
#define RCC_IWDG2CFGR_IWDG2LPEN_Msk                  (0x1 << 2)
#define RCC_IWDG2CFGR_IWDG2LPEN                      (0x1 << 2)

/* Bit fields for RCC_IWDG3CFGR register */
#define RCC_IWDG3CFGR_IWDG3EN_Pos                    1
#define RCC_IWDG3CFGR_IWDG3EN_Msk                    (0x1 << 1)
#define RCC_IWDG3CFGR_IWDG3EN                        (0x1 << 1)
#define RCC_IWDG3CFGR_IWDG3LPEN_Pos                  2
#define RCC_IWDG3CFGR_IWDG3LPEN_Msk                  (0x1 << 2)
#define RCC_IWDG3CFGR_IWDG3LPEN                      (0x1 << 2)

/* Bit fields for RCC_IWDG4CFGR register */
#define RCC_IWDG4CFGR_IWDG4EN_Pos                    1
#define RCC_IWDG4CFGR_IWDG4EN_Msk                    (0x1 << 1)
#define RCC_IWDG4CFGR_IWDG4EN                        (0x1 << 1)
#define RCC_IWDG4CFGR_IWDG4LPEN_Pos                  2
#define RCC_IWDG4CFGR_IWDG4LPEN_Msk                  (0x1 << 2)
#define RCC_IWDG4CFGR_IWDG4LPEN                      (0x1 << 2)

/* Bit fields for RCC_IWDG5CFGR register */
#define RCC_IWDG5CFGR_IWDG5EN_Pos                    1
#define RCC_IWDG5CFGR_IWDG5EN_Msk                    (0x1 << 1)
#define RCC_IWDG5CFGR_IWDG5EN                        (0x1 << 1)
#define RCC_IWDG5CFGR_IWDG5LPEN_Pos                  2
#define RCC_IWDG5CFGR_IWDG5LPEN_Msk                  (0x1 << 2)
#define RCC_IWDG5CFGR_IWDG5LPEN                      (0x1 << 2)
#define RCC_IWDG5CFGR_IWDG5AMEN_Pos                  3
#define RCC_IWDG5CFGR_IWDG5AMEN_Msk                  (0x1 << 3)
#define RCC_IWDG5CFGR_IWDG5AMEN                      (0x1 << 3)

/* Bit fields for RCC_WWDG1CFGR register */
#define RCC_WWDG1CFGR_WWDG1RST_Pos                   0
#define RCC_WWDG1CFGR_WWDG1RST_Msk                   (0x1 << 0)
#define RCC_WWDG1CFGR_WWDG1RST                       (0x1 << 0)
#define RCC_WWDG1CFGR_WWDG1EN_Pos                    1
#define RCC_WWDG1CFGR_WWDG1EN_Msk                    (0x1 << 1)
#define RCC_WWDG1CFGR_WWDG1EN                        (0x1 << 1)
#define RCC_WWDG1CFGR_WWDG1LPEN_Pos                  2
#define RCC_WWDG1CFGR_WWDG1LPEN_Msk                  (0x1 << 2)
#define RCC_WWDG1CFGR_WWDG1LPEN                      (0x1 << 2)

/* Bit fields for RCC_WWDG2CFGR register */
#define RCC_WWDG2CFGR_WWDG2RST_Pos                   0
#define RCC_WWDG2CFGR_WWDG2RST_Msk                   (0x1 << 0)
#define RCC_WWDG2CFGR_WWDG2RST                       (0x1 << 0)
#define RCC_WWDG2CFGR_WWDG2EN_Pos                    1
#define RCC_WWDG2CFGR_WWDG2EN_Msk                    (0x1 << 1)
#define RCC_WWDG2CFGR_WWDG2EN                        (0x1 << 1)
#define RCC_WWDG2CFGR_WWDG2LPEN_Pos                  2
#define RCC_WWDG2CFGR_WWDG2LPEN_Msk                  (0x1 << 2)
#define RCC_WWDG2CFGR_WWDG2LPEN                      (0x1 << 2)
#define RCC_WWDG2CFGR_WWDG2AMEN_Pos                  3
#define RCC_WWDG2CFGR_WWDG2AMEN_Msk                  (0x1 << 3)
#define RCC_WWDG2CFGR_WWDG2AMEN                      (0x1 << 3)

/* Bit fields for RCC_BUSPERFMCFGR register */
#define RCC_BUSPERFMCFGR_BUSPERFMRST_Pos             0
#define RCC_BUSPERFMCFGR_BUSPERFMRST_Msk             (0x1 << 0)
#define RCC_BUSPERFMCFGR_BUSPERFMRST                 (0x1 << 0)
#define RCC_BUSPERFMCFGR_BUSPERFMEN_Pos              1
#define RCC_BUSPERFMCFGR_BUSPERFMEN_Msk              (0x1 << 1)
#define RCC_BUSPERFMCFGR_BUSPERFMEN                  (0x1 << 1)
#define RCC_BUSPERFMCFGR_BUSPERFMLPEN_Pos            2
#define RCC_BUSPERFMCFGR_BUSPERFMLPEN_Msk            (0x1 << 2)
#define RCC_BUSPERFMCFGR_BUSPERFMLPEN                (0x1 << 2)

/* Bit fields for RCC_VREFCFGR register */
#define RCC_VREFCFGR_VREFRST_Pos                     0
#define RCC_VREFCFGR_VREFRST_Msk                     (0x1 << 0)
#define RCC_VREFCFGR_VREFRST                         (0x1 << 0)
#define RCC_VREFCFGR_VREFEN_Pos                      1
#define RCC_VREFCFGR_VREFEN_Msk                      (0x1 << 1)
#define RCC_VREFCFGR_VREFEN                          (0x1 << 1)
#define RCC_VREFCFGR_VREFLPEN_Pos                    2
#define RCC_VREFCFGR_VREFLPEN_Msk                    (0x1 << 2)
#define RCC_VREFCFGR_VREFLPEN                        (0x1 << 2)

/* Bit fields for RCC_TMPSENSCFGR register */
#define RCC_TMPSENSCFGR_TMPSENSRST_Pos               0
#define RCC_TMPSENSCFGR_TMPSENSRST_Msk               (0x1 << 0)
#define RCC_TMPSENSCFGR_TMPSENSRST                   (0x1 << 0)
#define RCC_TMPSENSCFGR_TMPSENSEN_Pos                1
#define RCC_TMPSENSCFGR_TMPSENSEN_Msk                (0x1 << 1)
#define RCC_TMPSENSCFGR_TMPSENSEN                    (0x1 << 1)
#define RCC_TMPSENSCFGR_TMPSENSLPEN_Pos              2
#define RCC_TMPSENSCFGR_TMPSENSLPEN_Msk              (0x1 << 2)
#define RCC_TMPSENSCFGR_TMPSENSLPEN                  (0x1 << 2)
#define RCC_TMPSENSCFGR_TMPSENSKERSEL_Pos            12
#define RCC_TMPSENSCFGR_TMPSENSKERSEL_Msk            (0x3 << 12)
#define RCC_TMPSENSCFGR_TMPSENSKERSEL                (0x3 << 12)

/* Bit fields for RCC_CRCCFGR register */
#define RCC_CRCCFGR_CRCRST_Pos                       0
#define RCC_CRCCFGR_CRCRST_Msk                       (0x1 << 0)
#define RCC_CRCCFGR_CRCRST                           (0x1 << 0)
#define RCC_CRCCFGR_CRCEN_Pos                        1
#define RCC_CRCCFGR_CRCEN_Msk                        (0x1 << 1)
#define RCC_CRCCFGR_CRCEN                            (0x1 << 1)
#define RCC_CRCCFGR_CRCLPEN_Pos                      2
#define RCC_CRCCFGR_CRCLPEN_Msk                      (0x1 << 2)
#define RCC_CRCCFGR_CRCLPEN                          (0x1 << 2)

/* Bit fields for RCC_SERCCFGR register */
#define RCC_SERCCFGR_SERCRST_Pos                     0
#define RCC_SERCCFGR_SERCRST_Msk                     (0x1 << 0)
#define RCC_SERCCFGR_SERCRST                         (0x1 << 0)
#define RCC_SERCCFGR_SERCEN_Pos                      1
#define RCC_SERCCFGR_SERCEN_Msk                      (0x1 << 1)
#define RCC_SERCCFGR_SERCEN                          (0x1 << 1)
#define RCC_SERCCFGR_SERCLPEN_Pos                    2
#define RCC_SERCCFGR_SERCLPEN_Msk                    (0x1 << 2)
#define RCC_SERCCFGR_SERCLPEN                        (0x1 << 2)

/* Bit fields for RCC_OSPIIOMCFGR register */
#define RCC_OSPIIOMCFGR_OSPIIOMRST_Pos               0
#define RCC_OSPIIOMCFGR_OSPIIOMRST_Msk               (0x1 << 0)
#define RCC_OSPIIOMCFGR_OSPIIOMRST                   (0x1 << 0)
#define RCC_OSPIIOMCFGR_OSPIIOMEN_Pos                1
#define RCC_OSPIIOMCFGR_OSPIIOMEN_Msk                (0x1 << 1)
#define RCC_OSPIIOMCFGR_OSPIIOMEN                    (0x1 << 1)
#define RCC_OSPIIOMCFGR_OSPIIOMLPEN_Pos              2
#define RCC_OSPIIOMCFGR_OSPIIOMLPEN_Msk              (0x1 << 2)
#define RCC_OSPIIOMCFGR_OSPIIOMLPEN                  (0x1 << 2)

/* Bit fields for RCC_GICV2MCFGR register */
#define RCC_GICV2MCFGR_GICV2MEN_Pos                  1
#define RCC_GICV2MCFGR_GICV2MEN_Msk                  (0x1 << 1)
#define RCC_GICV2MCFGR_GICV2MEN                      (0x1 << 1)
#define RCC_GICV2MCFGR_GICV2MLPEN_Pos                2
#define RCC_GICV2MCFGR_GICV2MLPEN_Msk                (0x1 << 2)
#define RCC_GICV2MCFGR_GICV2MLPEN                    (0x1 << 2)

/* Bit fields for RCC_I3C1CFGR register */
#define RCC_I3C1CFGR_I3C1RST_Pos                     0
#define RCC_I3C1CFGR_I3C1RST_Msk                     (0x1 << 0)
#define RCC_I3C1CFGR_I3C1RST                         (0x1 << 0)
#define RCC_I3C1CFGR_I3C1EN_Pos                      1
#define RCC_I3C1CFGR_I3C1EN_Msk                      (0x1 << 1)
#define RCC_I3C1CFGR_I3C1EN                          (0x1 << 1)
#define RCC_I3C1CFGR_I3C1LPEN_Pos                    2
#define RCC_I3C1CFGR_I3C1LPEN_Msk                    (0x1 << 2)
#define RCC_I3C1CFGR_I3C1LPEN                        (0x1 << 2)

/* Bit fields for RCC_I3C2CFGR register */
#define RCC_I3C2CFGR_I3C2RST_Pos                     0
#define RCC_I3C2CFGR_I3C2RST_Msk                     (0x1 << 0)
#define RCC_I3C2CFGR_I3C2RST                         (0x1 << 0)
#define RCC_I3C2CFGR_I3C2EN_Pos                      1
#define RCC_I3C2CFGR_I3C2EN_Msk                      (0x1 << 1)
#define RCC_I3C2CFGR_I3C2EN                          (0x1 << 1)
#define RCC_I3C2CFGR_I3C2LPEN_Pos                    2
#define RCC_I3C2CFGR_I3C2LPEN_Msk                    (0x1 << 2)
#define RCC_I3C2CFGR_I3C2LPEN                        (0x1 << 2)

/* Bit fields for RCC_I3C3CFGR register */
#define RCC_I3C3CFGR_I3C3RST_Pos                     0
#define RCC_I3C3CFGR_I3C3RST_Msk                     (0x1 << 0)
#define RCC_I3C3CFGR_I3C3RST                         (0x1 << 0)
#define RCC_I3C3CFGR_I3C3EN_Pos                      1
#define RCC_I3C3CFGR_I3C3EN_Msk                      (0x1 << 1)
#define RCC_I3C3CFGR_I3C3EN                          (0x1 << 1)
#define RCC_I3C3CFGR_I3C3LPEN_Pos                    2
#define RCC_I3C3CFGR_I3C3LPEN_Msk                    (0x1 << 2)
#define RCC_I3C3CFGR_I3C3LPEN                        (0x1 << 2)

/* Bit fields for RCC_I3C4CFGR register */
#define RCC_I3C4CFGR_I3C4RST_Pos                     0
#define RCC_I3C4CFGR_I3C4RST_Msk                     (0x1 << 0)
#define RCC_I3C4CFGR_I3C4RST                         (0x1 << 0)
#define RCC_I3C4CFGR_I3C4EN_Pos                      1
#define RCC_I3C4CFGR_I3C4EN_Msk                      (0x1 << 1)
#define RCC_I3C4CFGR_I3C4EN                          (0x1 << 1)
#define RCC_I3C4CFGR_I3C4LPEN_Pos                    2
#define RCC_I3C4CFGR_I3C4LPEN_Msk                    (0x1 << 2)
#define RCC_I3C4CFGR_I3C4LPEN                        (0x1 << 2)
#define RCC_I3C4CFGR_I3C4AMEN_Pos                    3
#define RCC_I3C4CFGR_I3C4AMEN_Msk                    (0x1 << 3)
#define RCC_I3C4CFGR_I3C4AMEN                        (0x1 << 3)

/* Bit fields for RCC_MUXSELCFGR register */
#define RCC_MUXSELCFGR_MUXSEL0_Pos                   0
#define RCC_MUXSELCFGR_MUXSEL0_Msk                   (0x3 << 0)
#define RCC_MUXSELCFGR_MUXSEL0                       (0x3 << 0)
#define RCC_MUXSELCFGR_MUXSEL1_Pos                   4
#define RCC_MUXSELCFGR_MUXSEL1_Msk                   (0x3 << 4)
#define RCC_MUXSELCFGR_MUXSEL1                       (0x3 << 4)
#define RCC_MUXSELCFGR_MUXSEL2_Pos                   8
#define RCC_MUXSELCFGR_MUXSEL2_Msk                   (0x3 << 8)
#define RCC_MUXSELCFGR_MUXSEL2                       (0x3 << 8)
#define RCC_MUXSELCFGR_MUXSEL3_Pos                   12
#define RCC_MUXSELCFGR_MUXSEL3_Msk                   (0x3 << 12)
#define RCC_MUXSELCFGR_MUXSEL3                       (0x3 << 12)
#define RCC_MUXSELCFGR_MUXSEL4_Pos                   16
#define RCC_MUXSELCFGR_MUXSEL4_Msk                   (0x3 << 16)
#define RCC_MUXSELCFGR_MUXSEL4                       (0x3 << 16)
#define RCC_MUXSELCFGR_MUXSEL5_Pos                   20
#define RCC_MUXSELCFGR_MUXSEL5_Msk                   (0x3 << 20)
#define RCC_MUXSELCFGR_MUXSEL5                       (0x3 << 20)
#define RCC_MUXSELCFGR_MUXSEL6_Pos                   24
#define RCC_MUXSELCFGR_MUXSEL6_Msk                   (0x3 << 24)
#define RCC_MUXSELCFGR_MUXSEL6                       (0x3 << 24)
#define RCC_MUXSELCFGR_MUXSEL7_Pos                   28
#define RCC_MUXSELCFGR_MUXSEL7_Msk                   (0x3 << 28)
#define RCC_MUXSELCFGR_MUXSEL7                       (0x3 << 28)

/* Bit fields for RCC_XBAR0CFGR register */
#define RCC_XBAR0CFGR_XBAR0SEL_Pos                   0
#define RCC_XBAR0CFGR_XBAR0SEL_Msk                   (0xf << 0)
#define RCC_XBAR0CFGR_XBAR0SEL                       (0xf << 0)
#define RCC_XBAR0CFGR_XBAR0EN_Pos                    6
#define RCC_XBAR0CFGR_XBAR0EN_Msk                    (0x1 << 6)
#define RCC_XBAR0CFGR_XBAR0EN                        (0x1 << 6)
#define RCC_XBAR0CFGR_XBAR0STS_Pos                   7
#define RCC_XBAR0CFGR_XBAR0STS_Msk                   (0x1 << 7)
#define RCC_XBAR0CFGR_XBAR0STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR1CFGR register */
#define RCC_XBAR1CFGR_XBAR1SEL_Pos                   0
#define RCC_XBAR1CFGR_XBAR1SEL_Msk                   (0xf << 0)
#define RCC_XBAR1CFGR_XBAR1SEL                       (0xf << 0)
#define RCC_XBAR1CFGR_XBAR1EN_Pos                    6
#define RCC_XBAR1CFGR_XBAR1EN_Msk                    (0x1 << 6)
#define RCC_XBAR1CFGR_XBAR1EN                        (0x1 << 6)
#define RCC_XBAR1CFGR_XBAR1STS_Pos                   7
#define RCC_XBAR1CFGR_XBAR1STS_Msk                   (0x1 << 7)
#define RCC_XBAR1CFGR_XBAR1STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR2CFGR register */
#define RCC_XBAR2CFGR_XBAR2SEL_Pos                   0
#define RCC_XBAR2CFGR_XBAR2SEL_Msk                   (0xf << 0)
#define RCC_XBAR2CFGR_XBAR2SEL                       (0xf << 0)
#define RCC_XBAR2CFGR_XBAR2EN_Pos                    6
#define RCC_XBAR2CFGR_XBAR2EN_Msk                    (0x1 << 6)
#define RCC_XBAR2CFGR_XBAR2EN                        (0x1 << 6)
#define RCC_XBAR2CFGR_XBAR2STS_Pos                   7
#define RCC_XBAR2CFGR_XBAR2STS_Msk                   (0x1 << 7)
#define RCC_XBAR2CFGR_XBAR2STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR3CFGR register */
#define RCC_XBAR3CFGR_XBAR3SEL_Pos                   0
#define RCC_XBAR3CFGR_XBAR3SEL_Msk                   (0xf << 0)
#define RCC_XBAR3CFGR_XBAR3SEL                       (0xf << 0)
#define RCC_XBAR3CFGR_XBAR3EN_Pos                    6
#define RCC_XBAR3CFGR_XBAR3EN_Msk                    (0x1 << 6)
#define RCC_XBAR3CFGR_XBAR3EN                        (0x1 << 6)
#define RCC_XBAR3CFGR_XBAR3STS_Pos                   7
#define RCC_XBAR3CFGR_XBAR3STS_Msk                   (0x1 << 7)
#define RCC_XBAR3CFGR_XBAR3STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR4CFGR register */
#define RCC_XBAR4CFGR_XBAR4SEL_Pos                   0
#define RCC_XBAR4CFGR_XBAR4SEL_Msk                   (0xf << 0)
#define RCC_XBAR4CFGR_XBAR4SEL                       (0xf << 0)
#define RCC_XBAR4CFGR_XBAR4EN_Pos                    6
#define RCC_XBAR4CFGR_XBAR4EN_Msk                    (0x1 << 6)
#define RCC_XBAR4CFGR_XBAR4EN                        (0x1 << 6)
#define RCC_XBAR4CFGR_XBAR4STS_Pos                   7
#define RCC_XBAR4CFGR_XBAR4STS_Msk                   (0x1 << 7)
#define RCC_XBAR4CFGR_XBAR4STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR5CFGR register */
#define RCC_XBAR5CFGR_XBAR5SEL_Pos                   0
#define RCC_XBAR5CFGR_XBAR5SEL_Msk                   (0xf << 0)
#define RCC_XBAR5CFGR_XBAR5SEL                       (0xf << 0)
#define RCC_XBAR5CFGR_XBAR5EN_Pos                    6
#define RCC_XBAR5CFGR_XBAR5EN_Msk                    (0x1 << 6)
#define RCC_XBAR5CFGR_XBAR5EN                        (0x1 << 6)
#define RCC_XBAR5CFGR_XBAR5STS_Pos                   7
#define RCC_XBAR5CFGR_XBAR5STS_Msk                   (0x1 << 7)
#define RCC_XBAR5CFGR_XBAR5STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR6CFGR register */
#define RCC_XBAR6CFGR_XBAR6SEL_Pos                   0
#define RCC_XBAR6CFGR_XBAR6SEL_Msk                   (0xf << 0)
#define RCC_XBAR6CFGR_XBAR6SEL                       (0xf << 0)
#define RCC_XBAR6CFGR_XBAR6EN_Pos                    6
#define RCC_XBAR6CFGR_XBAR6EN_Msk                    (0x1 << 6)
#define RCC_XBAR6CFGR_XBAR6EN                        (0x1 << 6)
#define RCC_XBAR6CFGR_XBAR6STS_Pos                   7
#define RCC_XBAR6CFGR_XBAR6STS_Msk                   (0x1 << 7)
#define RCC_XBAR6CFGR_XBAR6STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR7CFGR register */
#define RCC_XBAR7CFGR_XBAR7SEL_Pos                   0
#define RCC_XBAR7CFGR_XBAR7SEL_Msk                   (0xf << 0)
#define RCC_XBAR7CFGR_XBAR7SEL                       (0xf << 0)
#define RCC_XBAR7CFGR_XBAR7EN_Pos                    6
#define RCC_XBAR7CFGR_XBAR7EN_Msk                    (0x1 << 6)
#define RCC_XBAR7CFGR_XBAR7EN                        (0x1 << 6)
#define RCC_XBAR7CFGR_XBAR7STS_Pos                   7
#define RCC_XBAR7CFGR_XBAR7STS_Msk                   (0x1 << 7)
#define RCC_XBAR7CFGR_XBAR7STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR8CFGR register */
#define RCC_XBAR8CFGR_XBAR8SEL_Pos                   0
#define RCC_XBAR8CFGR_XBAR8SEL_Msk                   (0xf << 0)
#define RCC_XBAR8CFGR_XBAR8SEL                       (0xf << 0)
#define RCC_XBAR8CFGR_XBAR8EN_Pos                    6
#define RCC_XBAR8CFGR_XBAR8EN_Msk                    (0x1 << 6)
#define RCC_XBAR8CFGR_XBAR8EN                        (0x1 << 6)
#define RCC_XBAR8CFGR_XBAR8STS_Pos                   7
#define RCC_XBAR8CFGR_XBAR8STS_Msk                   (0x1 << 7)
#define RCC_XBAR8CFGR_XBAR8STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR9CFGR register */
#define RCC_XBAR9CFGR_XBAR9SEL_Pos                   0
#define RCC_XBAR9CFGR_XBAR9SEL_Msk                   (0xf << 0)
#define RCC_XBAR9CFGR_XBAR9SEL                       (0xf << 0)
#define RCC_XBAR9CFGR_XBAR9EN_Pos                    6
#define RCC_XBAR9CFGR_XBAR9EN_Msk                    (0x1 << 6)
#define RCC_XBAR9CFGR_XBAR9EN                        (0x1 << 6)
#define RCC_XBAR9CFGR_XBAR9STS_Pos                   7
#define RCC_XBAR9CFGR_XBAR9STS_Msk                   (0x1 << 7)
#define RCC_XBAR9CFGR_XBAR9STS                       (0x1 << 7)

/* Bit fields for RCC_XBAR10CFGR register */
#define RCC_XBAR10CFGR_XBAR10SEL_Pos                 0
#define RCC_XBAR10CFGR_XBAR10SEL_Msk                 (0xf << 0)
#define RCC_XBAR10CFGR_XBAR10SEL                     (0xf << 0)
#define RCC_XBAR10CFGR_XBAR10EN_Pos                  6
#define RCC_XBAR10CFGR_XBAR10EN_Msk                  (0x1 << 6)
#define RCC_XBAR10CFGR_XBAR10EN                      (0x1 << 6)
#define RCC_XBAR10CFGR_XBAR10STS_Pos                 7
#define RCC_XBAR10CFGR_XBAR10STS_Msk                 (0x1 << 7)
#define RCC_XBAR10CFGR_XBAR10STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR11CFGR register */
#define RCC_XBAR11CFGR_XBAR11SEL_Pos                 0
#define RCC_XBAR11CFGR_XBAR11SEL_Msk                 (0xf << 0)
#define RCC_XBAR11CFGR_XBAR11SEL                     (0xf << 0)
#define RCC_XBAR11CFGR_XBAR11EN_Pos                  6
#define RCC_XBAR11CFGR_XBAR11EN_Msk                  (0x1 << 6)
#define RCC_XBAR11CFGR_XBAR11EN                      (0x1 << 6)
#define RCC_XBAR11CFGR_XBAR11STS_Pos                 7
#define RCC_XBAR11CFGR_XBAR11STS_Msk                 (0x1 << 7)
#define RCC_XBAR11CFGR_XBAR11STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR12CFGR register */
#define RCC_XBAR12CFGR_XBAR12SEL_Pos                 0
#define RCC_XBAR12CFGR_XBAR12SEL_Msk                 (0xf << 0)
#define RCC_XBAR12CFGR_XBAR12SEL                     (0xf << 0)
#define RCC_XBAR12CFGR_XBAR12EN_Pos                  6
#define RCC_XBAR12CFGR_XBAR12EN_Msk                  (0x1 << 6)
#define RCC_XBAR12CFGR_XBAR12EN                      (0x1 << 6)
#define RCC_XBAR12CFGR_XBAR12STS_Pos                 7
#define RCC_XBAR12CFGR_XBAR12STS_Msk                 (0x1 << 7)
#define RCC_XBAR12CFGR_XBAR12STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR13CFGR register */
#define RCC_XBAR13CFGR_XBAR13SEL_Pos                 0
#define RCC_XBAR13CFGR_XBAR13SEL_Msk                 (0xf << 0)
#define RCC_XBAR13CFGR_XBAR13SEL                     (0xf << 0)
#define RCC_XBAR13CFGR_XBAR13EN_Pos                  6
#define RCC_XBAR13CFGR_XBAR13EN_Msk                  (0x1 << 6)
#define RCC_XBAR13CFGR_XBAR13EN                      (0x1 << 6)
#define RCC_XBAR13CFGR_XBAR13STS_Pos                 7
#define RCC_XBAR13CFGR_XBAR13STS_Msk                 (0x1 << 7)
#define RCC_XBAR13CFGR_XBAR13STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR14CFGR register */
#define RCC_XBAR14CFGR_XBAR14SEL_Pos                 0
#define RCC_XBAR14CFGR_XBAR14SEL_Msk                 (0xf << 0)
#define RCC_XBAR14CFGR_XBAR14SEL                     (0xf << 0)
#define RCC_XBAR14CFGR_XBAR14EN_Pos                  6
#define RCC_XBAR14CFGR_XBAR14EN_Msk                  (0x1 << 6)
#define RCC_XBAR14CFGR_XBAR14EN                      (0x1 << 6)
#define RCC_XBAR14CFGR_XBAR14STS_Pos                 7
#define RCC_XBAR14CFGR_XBAR14STS_Msk                 (0x1 << 7)
#define RCC_XBAR14CFGR_XBAR14STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR15CFGR register */
#define RCC_XBAR15CFGR_XBAR15SEL_Pos                 0
#define RCC_XBAR15CFGR_XBAR15SEL_Msk                 (0xf << 0)
#define RCC_XBAR15CFGR_XBAR15SEL                     (0xf << 0)
#define RCC_XBAR15CFGR_XBAR15EN_Pos                  6
#define RCC_XBAR15CFGR_XBAR15EN_Msk                  (0x1 << 6)
#define RCC_XBAR15CFGR_XBAR15EN                      (0x1 << 6)
#define RCC_XBAR15CFGR_XBAR15STS_Pos                 7
#define RCC_XBAR15CFGR_XBAR15STS_Msk                 (0x1 << 7)
#define RCC_XBAR15CFGR_XBAR15STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR16CFGR register */
#define RCC_XBAR16CFGR_XBAR16SEL_Pos                 0
#define RCC_XBAR16CFGR_XBAR16SEL_Msk                 (0xf << 0)
#define RCC_XBAR16CFGR_XBAR16SEL                     (0xf << 0)
#define RCC_XBAR16CFGR_XBAR16EN_Pos                  6
#define RCC_XBAR16CFGR_XBAR16EN_Msk                  (0x1 << 6)
#define RCC_XBAR16CFGR_XBAR16EN                      (0x1 << 6)
#define RCC_XBAR16CFGR_XBAR16STS_Pos                 7
#define RCC_XBAR16CFGR_XBAR16STS_Msk                 (0x1 << 7)
#define RCC_XBAR16CFGR_XBAR16STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR17CFGR register */
#define RCC_XBAR17CFGR_XBAR17SEL_Pos                 0
#define RCC_XBAR17CFGR_XBAR17SEL_Msk                 (0xf << 0)
#define RCC_XBAR17CFGR_XBAR17SEL                     (0xf << 0)
#define RCC_XBAR17CFGR_XBAR17EN_Pos                  6
#define RCC_XBAR17CFGR_XBAR17EN_Msk                  (0x1 << 6)
#define RCC_XBAR17CFGR_XBAR17EN                      (0x1 << 6)
#define RCC_XBAR17CFGR_XBAR17STS_Pos                 7
#define RCC_XBAR17CFGR_XBAR17STS_Msk                 (0x1 << 7)
#define RCC_XBAR17CFGR_XBAR17STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR18CFGR register */
#define RCC_XBAR18CFGR_XBAR18SEL_Pos                 0
#define RCC_XBAR18CFGR_XBAR18SEL_Msk                 (0xf << 0)
#define RCC_XBAR18CFGR_XBAR18SEL                     (0xf << 0)
#define RCC_XBAR18CFGR_XBAR18EN_Pos                  6
#define RCC_XBAR18CFGR_XBAR18EN_Msk                  (0x1 << 6)
#define RCC_XBAR18CFGR_XBAR18EN                      (0x1 << 6)
#define RCC_XBAR18CFGR_XBAR18STS_Pos                 7
#define RCC_XBAR18CFGR_XBAR18STS_Msk                 (0x1 << 7)
#define RCC_XBAR18CFGR_XBAR18STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR19CFGR register */
#define RCC_XBAR19CFGR_XBAR19SEL_Pos                 0
#define RCC_XBAR19CFGR_XBAR19SEL_Msk                 (0xf << 0)
#define RCC_XBAR19CFGR_XBAR19SEL                     (0xf << 0)
#define RCC_XBAR19CFGR_XBAR19EN_Pos                  6
#define RCC_XBAR19CFGR_XBAR19EN_Msk                  (0x1 << 6)
#define RCC_XBAR19CFGR_XBAR19EN                      (0x1 << 6)
#define RCC_XBAR19CFGR_XBAR19STS_Pos                 7
#define RCC_XBAR19CFGR_XBAR19STS_Msk                 (0x1 << 7)
#define RCC_XBAR19CFGR_XBAR19STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR20CFGR register */
#define RCC_XBAR20CFGR_XBAR20SEL_Pos                 0
#define RCC_XBAR20CFGR_XBAR20SEL_Msk                 (0xf << 0)
#define RCC_XBAR20CFGR_XBAR20SEL                     (0xf << 0)
#define RCC_XBAR20CFGR_XBAR20EN_Pos                  6
#define RCC_XBAR20CFGR_XBAR20EN_Msk                  (0x1 << 6)
#define RCC_XBAR20CFGR_XBAR20EN                      (0x1 << 6)
#define RCC_XBAR20CFGR_XBAR20STS_Pos                 7
#define RCC_XBAR20CFGR_XBAR20STS_Msk                 (0x1 << 7)
#define RCC_XBAR20CFGR_XBAR20STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR21CFGR register */
#define RCC_XBAR21CFGR_XBAR21SEL_Pos                 0
#define RCC_XBAR21CFGR_XBAR21SEL_Msk                 (0xf << 0)
#define RCC_XBAR21CFGR_XBAR21SEL                     (0xf << 0)
#define RCC_XBAR21CFGR_XBAR21EN_Pos                  6
#define RCC_XBAR21CFGR_XBAR21EN_Msk                  (0x1 << 6)
#define RCC_XBAR21CFGR_XBAR21EN                      (0x1 << 6)
#define RCC_XBAR21CFGR_XBAR21STS_Pos                 7
#define RCC_XBAR21CFGR_XBAR21STS_Msk                 (0x1 << 7)
#define RCC_XBAR21CFGR_XBAR21STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR22CFGR register */
#define RCC_XBAR22CFGR_XBAR22SEL_Pos                 0
#define RCC_XBAR22CFGR_XBAR22SEL_Msk                 (0xf << 0)
#define RCC_XBAR22CFGR_XBAR22SEL                     (0xf << 0)
#define RCC_XBAR22CFGR_XBAR22EN_Pos                  6
#define RCC_XBAR22CFGR_XBAR22EN_Msk                  (0x1 << 6)
#define RCC_XBAR22CFGR_XBAR22EN                      (0x1 << 6)
#define RCC_XBAR22CFGR_XBAR22STS_Pos                 7
#define RCC_XBAR22CFGR_XBAR22STS_Msk                 (0x1 << 7)
#define RCC_XBAR22CFGR_XBAR22STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR23CFGR register */
#define RCC_XBAR23CFGR_XBAR23SEL_Pos                 0
#define RCC_XBAR23CFGR_XBAR23SEL_Msk                 (0xf << 0)
#define RCC_XBAR23CFGR_XBAR23SEL                     (0xf << 0)
#define RCC_XBAR23CFGR_XBAR23EN_Pos                  6
#define RCC_XBAR23CFGR_XBAR23EN_Msk                  (0x1 << 6)
#define RCC_XBAR23CFGR_XBAR23EN                      (0x1 << 6)
#define RCC_XBAR23CFGR_XBAR23STS_Pos                 7
#define RCC_XBAR23CFGR_XBAR23STS_Msk                 (0x1 << 7)
#define RCC_XBAR23CFGR_XBAR23STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR24CFGR register */
#define RCC_XBAR24CFGR_XBAR24SEL_Pos                 0
#define RCC_XBAR24CFGR_XBAR24SEL_Msk                 (0xf << 0)
#define RCC_XBAR24CFGR_XBAR24SEL                     (0xf << 0)
#define RCC_XBAR24CFGR_XBAR24EN_Pos                  6
#define RCC_XBAR24CFGR_XBAR24EN_Msk                  (0x1 << 6)
#define RCC_XBAR24CFGR_XBAR24EN                      (0x1 << 6)
#define RCC_XBAR24CFGR_XBAR24STS_Pos                 7
#define RCC_XBAR24CFGR_XBAR24STS_Msk                 (0x1 << 7)
#define RCC_XBAR24CFGR_XBAR24STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR25CFGR register */
#define RCC_XBAR25CFGR_XBAR25SEL_Pos                 0
#define RCC_XBAR25CFGR_XBAR25SEL_Msk                 (0xf << 0)
#define RCC_XBAR25CFGR_XBAR25SEL                     (0xf << 0)
#define RCC_XBAR25CFGR_XBAR25EN_Pos                  6
#define RCC_XBAR25CFGR_XBAR25EN_Msk                  (0x1 << 6)
#define RCC_XBAR25CFGR_XBAR25EN                      (0x1 << 6)
#define RCC_XBAR25CFGR_XBAR25STS_Pos                 7
#define RCC_XBAR25CFGR_XBAR25STS_Msk                 (0x1 << 7)
#define RCC_XBAR25CFGR_XBAR25STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR26CFGR register */
#define RCC_XBAR26CFGR_XBAR26SEL_Pos                 0
#define RCC_XBAR26CFGR_XBAR26SEL_Msk                 (0xf << 0)
#define RCC_XBAR26CFGR_XBAR26SEL                     (0xf << 0)
#define RCC_XBAR26CFGR_XBAR26EN_Pos                  6
#define RCC_XBAR26CFGR_XBAR26EN_Msk                  (0x1 << 6)
#define RCC_XBAR26CFGR_XBAR26EN                      (0x1 << 6)
#define RCC_XBAR26CFGR_XBAR26STS_Pos                 7
#define RCC_XBAR26CFGR_XBAR26STS_Msk                 (0x1 << 7)
#define RCC_XBAR26CFGR_XBAR26STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR27CFGR register */
#define RCC_XBAR27CFGR_XBAR27SEL_Pos                 0
#define RCC_XBAR27CFGR_XBAR27SEL_Msk                 (0xf << 0)
#define RCC_XBAR27CFGR_XBAR27SEL                     (0xf << 0)
#define RCC_XBAR27CFGR_XBAR27EN_Pos                  6
#define RCC_XBAR27CFGR_XBAR27EN_Msk                  (0x1 << 6)
#define RCC_XBAR27CFGR_XBAR27EN                      (0x1 << 6)
#define RCC_XBAR27CFGR_XBAR27STS_Pos                 7
#define RCC_XBAR27CFGR_XBAR27STS_Msk                 (0x1 << 7)
#define RCC_XBAR27CFGR_XBAR27STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR28CFGR register */
#define RCC_XBAR28CFGR_XBAR28SEL_Pos                 0
#define RCC_XBAR28CFGR_XBAR28SEL_Msk                 (0xf << 0)
#define RCC_XBAR28CFGR_XBAR28SEL                     (0xf << 0)
#define RCC_XBAR28CFGR_XBAR28EN_Pos                  6
#define RCC_XBAR28CFGR_XBAR28EN_Msk                  (0x1 << 6)
#define RCC_XBAR28CFGR_XBAR28EN                      (0x1 << 6)
#define RCC_XBAR28CFGR_XBAR28STS_Pos                 7
#define RCC_XBAR28CFGR_XBAR28STS_Msk                 (0x1 << 7)
#define RCC_XBAR28CFGR_XBAR28STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR29CFGR register */
#define RCC_XBAR29CFGR_XBAR29SEL_Pos                 0
#define RCC_XBAR29CFGR_XBAR29SEL_Msk                 (0xf << 0)
#define RCC_XBAR29CFGR_XBAR29SEL                     (0xf << 0)
#define RCC_XBAR29CFGR_XBAR29EN_Pos                  6
#define RCC_XBAR29CFGR_XBAR29EN_Msk                  (0x1 << 6)
#define RCC_XBAR29CFGR_XBAR29EN                      (0x1 << 6)
#define RCC_XBAR29CFGR_XBAR29STS_Pos                 7
#define RCC_XBAR29CFGR_XBAR29STS_Msk                 (0x1 << 7)
#define RCC_XBAR29CFGR_XBAR29STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR30CFGR register */
#define RCC_XBAR30CFGR_XBAR30SEL_Pos                 0
#define RCC_XBAR30CFGR_XBAR30SEL_Msk                 (0xf << 0)
#define RCC_XBAR30CFGR_XBAR30SEL                     (0xf << 0)
#define RCC_XBAR30CFGR_XBAR30EN_Pos                  6
#define RCC_XBAR30CFGR_XBAR30EN_Msk                  (0x1 << 6)
#define RCC_XBAR30CFGR_XBAR30EN                      (0x1 << 6)
#define RCC_XBAR30CFGR_XBAR30STS_Pos                 7
#define RCC_XBAR30CFGR_XBAR30STS_Msk                 (0x1 << 7)
#define RCC_XBAR30CFGR_XBAR30STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR31CFGR register */
#define RCC_XBAR31CFGR_XBAR31SEL_Pos                 0
#define RCC_XBAR31CFGR_XBAR31SEL_Msk                 (0xf << 0)
#define RCC_XBAR31CFGR_XBAR31SEL                     (0xf << 0)
#define RCC_XBAR31CFGR_XBAR31EN_Pos                  6
#define RCC_XBAR31CFGR_XBAR31EN_Msk                  (0x1 << 6)
#define RCC_XBAR31CFGR_XBAR31EN                      (0x1 << 6)
#define RCC_XBAR31CFGR_XBAR31STS_Pos                 7
#define RCC_XBAR31CFGR_XBAR31STS_Msk                 (0x1 << 7)
#define RCC_XBAR31CFGR_XBAR31STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR32CFGR register */
#define RCC_XBAR32CFGR_XBAR32SEL_Pos                 0
#define RCC_XBAR32CFGR_XBAR32SEL_Msk                 (0xf << 0)
#define RCC_XBAR32CFGR_XBAR32SEL                     (0xf << 0)
#define RCC_XBAR32CFGR_XBAR32EN_Pos                  6
#define RCC_XBAR32CFGR_XBAR32EN_Msk                  (0x1 << 6)
#define RCC_XBAR32CFGR_XBAR32EN                      (0x1 << 6)
#define RCC_XBAR32CFGR_XBAR32STS_Pos                 7
#define RCC_XBAR32CFGR_XBAR32STS_Msk                 (0x1 << 7)
#define RCC_XBAR32CFGR_XBAR32STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR33CFGR register */
#define RCC_XBAR33CFGR_XBAR33SEL_Pos                 0
#define RCC_XBAR33CFGR_XBAR33SEL_Msk                 (0xf << 0)
#define RCC_XBAR33CFGR_XBAR33SEL                     (0xf << 0)
#define RCC_XBAR33CFGR_XBAR33EN_Pos                  6
#define RCC_XBAR33CFGR_XBAR33EN_Msk                  (0x1 << 6)
#define RCC_XBAR33CFGR_XBAR33EN                      (0x1 << 6)
#define RCC_XBAR33CFGR_XBAR33STS_Pos                 7
#define RCC_XBAR33CFGR_XBAR33STS_Msk                 (0x1 << 7)
#define RCC_XBAR33CFGR_XBAR33STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR34CFGR register */
#define RCC_XBAR34CFGR_XBAR34SEL_Pos                 0
#define RCC_XBAR34CFGR_XBAR34SEL_Msk                 (0xf << 0)
#define RCC_XBAR34CFGR_XBAR34SEL                     (0xf << 0)
#define RCC_XBAR34CFGR_XBAR34EN_Pos                  6
#define RCC_XBAR34CFGR_XBAR34EN_Msk                  (0x1 << 6)
#define RCC_XBAR34CFGR_XBAR34EN                      (0x1 << 6)
#define RCC_XBAR34CFGR_XBAR34STS_Pos                 7
#define RCC_XBAR34CFGR_XBAR34STS_Msk                 (0x1 << 7)
#define RCC_XBAR34CFGR_XBAR34STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR35CFGR register */
#define RCC_XBAR35CFGR_XBAR35SEL_Pos                 0
#define RCC_XBAR35CFGR_XBAR35SEL_Msk                 (0xf << 0)
#define RCC_XBAR35CFGR_XBAR35SEL                     (0xf << 0)
#define RCC_XBAR35CFGR_XBAR35EN_Pos                  6
#define RCC_XBAR35CFGR_XBAR35EN_Msk                  (0x1 << 6)
#define RCC_XBAR35CFGR_XBAR35EN                      (0x1 << 6)
#define RCC_XBAR35CFGR_XBAR35STS_Pos                 7
#define RCC_XBAR35CFGR_XBAR35STS_Msk                 (0x1 << 7)
#define RCC_XBAR35CFGR_XBAR35STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR36CFGR register */
#define RCC_XBAR36CFGR_XBAR36SEL_Pos                 0
#define RCC_XBAR36CFGR_XBAR36SEL_Msk                 (0xf << 0)
#define RCC_XBAR36CFGR_XBAR36SEL                     (0xf << 0)
#define RCC_XBAR36CFGR_XBAR36EN_Pos                  6
#define RCC_XBAR36CFGR_XBAR36EN_Msk                  (0x1 << 6)
#define RCC_XBAR36CFGR_XBAR36EN                      (0x1 << 6)
#define RCC_XBAR36CFGR_XBAR36STS_Pos                 7
#define RCC_XBAR36CFGR_XBAR36STS_Msk                 (0x1 << 7)
#define RCC_XBAR36CFGR_XBAR36STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR37CFGR register */
#define RCC_XBAR37CFGR_XBAR37SEL_Pos                 0
#define RCC_XBAR37CFGR_XBAR37SEL_Msk                 (0xf << 0)
#define RCC_XBAR37CFGR_XBAR37SEL                     (0xf << 0)
#define RCC_XBAR37CFGR_XBAR37EN_Pos                  6
#define RCC_XBAR37CFGR_XBAR37EN_Msk                  (0x1 << 6)
#define RCC_XBAR37CFGR_XBAR37EN                      (0x1 << 6)
#define RCC_XBAR37CFGR_XBAR37STS_Pos                 7
#define RCC_XBAR37CFGR_XBAR37STS_Msk                 (0x1 << 7)
#define RCC_XBAR37CFGR_XBAR37STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR38CFGR register */
#define RCC_XBAR38CFGR_XBAR38SEL_Pos                 0
#define RCC_XBAR38CFGR_XBAR38SEL_Msk                 (0xf << 0)
#define RCC_XBAR38CFGR_XBAR38SEL                     (0xf << 0)
#define RCC_XBAR38CFGR_XBAR38EN_Pos                  6
#define RCC_XBAR38CFGR_XBAR38EN_Msk                  (0x1 << 6)
#define RCC_XBAR38CFGR_XBAR38EN                      (0x1 << 6)
#define RCC_XBAR38CFGR_XBAR38STS_Pos                 7
#define RCC_XBAR38CFGR_XBAR38STS_Msk                 (0x1 << 7)
#define RCC_XBAR38CFGR_XBAR38STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR39CFGR register */
#define RCC_XBAR39CFGR_XBAR39SEL_Pos                 0
#define RCC_XBAR39CFGR_XBAR39SEL_Msk                 (0xf << 0)
#define RCC_XBAR39CFGR_XBAR39SEL                     (0xf << 0)
#define RCC_XBAR39CFGR_XBAR39EN_Pos                  6
#define RCC_XBAR39CFGR_XBAR39EN_Msk                  (0x1 << 6)
#define RCC_XBAR39CFGR_XBAR39EN                      (0x1 << 6)
#define RCC_XBAR39CFGR_XBAR39STS_Pos                 7
#define RCC_XBAR39CFGR_XBAR39STS_Msk                 (0x1 << 7)
#define RCC_XBAR39CFGR_XBAR39STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR40CFGR register */
#define RCC_XBAR40CFGR_XBAR40SEL_Pos                 0
#define RCC_XBAR40CFGR_XBAR40SEL_Msk                 (0xf << 0)
#define RCC_XBAR40CFGR_XBAR40SEL                     (0xf << 0)
#define RCC_XBAR40CFGR_XBAR40EN_Pos                  6
#define RCC_XBAR40CFGR_XBAR40EN_Msk                  (0x1 << 6)
#define RCC_XBAR40CFGR_XBAR40EN                      (0x1 << 6)
#define RCC_XBAR40CFGR_XBAR40STS_Pos                 7
#define RCC_XBAR40CFGR_XBAR40STS_Msk                 (0x1 << 7)
#define RCC_XBAR40CFGR_XBAR40STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR41CFGR register */
#define RCC_XBAR41CFGR_XBAR41SEL_Pos                 0
#define RCC_XBAR41CFGR_XBAR41SEL_Msk                 (0xf << 0)
#define RCC_XBAR41CFGR_XBAR41SEL                     (0xf << 0)
#define RCC_XBAR41CFGR_XBAR41EN_Pos                  6
#define RCC_XBAR41CFGR_XBAR41EN_Msk                  (0x1 << 6)
#define RCC_XBAR41CFGR_XBAR41EN                      (0x1 << 6)
#define RCC_XBAR41CFGR_XBAR41STS_Pos                 7
#define RCC_XBAR41CFGR_XBAR41STS_Msk                 (0x1 << 7)
#define RCC_XBAR41CFGR_XBAR41STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR42CFGR register */
#define RCC_XBAR42CFGR_XBAR42SEL_Pos                 0
#define RCC_XBAR42CFGR_XBAR42SEL_Msk                 (0xf << 0)
#define RCC_XBAR42CFGR_XBAR42SEL                     (0xf << 0)
#define RCC_XBAR42CFGR_XBAR42EN_Pos                  6
#define RCC_XBAR42CFGR_XBAR42EN_Msk                  (0x1 << 6)
#define RCC_XBAR42CFGR_XBAR42EN                      (0x1 << 6)
#define RCC_XBAR42CFGR_XBAR42STS_Pos                 7
#define RCC_XBAR42CFGR_XBAR42STS_Msk                 (0x1 << 7)
#define RCC_XBAR42CFGR_XBAR42STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR43CFGR register */
#define RCC_XBAR43CFGR_XBAR43SEL_Pos                 0
#define RCC_XBAR43CFGR_XBAR43SEL_Msk                 (0xf << 0)
#define RCC_XBAR43CFGR_XBAR43SEL                     (0xf << 0)
#define RCC_XBAR43CFGR_XBAR43EN_Pos                  6
#define RCC_XBAR43CFGR_XBAR43EN_Msk                  (0x1 << 6)
#define RCC_XBAR43CFGR_XBAR43EN                      (0x1 << 6)
#define RCC_XBAR43CFGR_XBAR43STS_Pos                 7
#define RCC_XBAR43CFGR_XBAR43STS_Msk                 (0x1 << 7)
#define RCC_XBAR43CFGR_XBAR43STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR44CFGR register */
#define RCC_XBAR44CFGR_XBAR44SEL_Pos                 0
#define RCC_XBAR44CFGR_XBAR44SEL_Msk                 (0xf << 0)
#define RCC_XBAR44CFGR_XBAR44SEL                     (0xf << 0)
#define RCC_XBAR44CFGR_XBAR44EN_Pos                  6
#define RCC_XBAR44CFGR_XBAR44EN_Msk                  (0x1 << 6)
#define RCC_XBAR44CFGR_XBAR44EN                      (0x1 << 6)
#define RCC_XBAR44CFGR_XBAR44STS_Pos                 7
#define RCC_XBAR44CFGR_XBAR44STS_Msk                 (0x1 << 7)
#define RCC_XBAR44CFGR_XBAR44STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR45CFGR register */
#define RCC_XBAR45CFGR_XBAR45SEL_Pos                 0
#define RCC_XBAR45CFGR_XBAR45SEL_Msk                 (0xf << 0)
#define RCC_XBAR45CFGR_XBAR45SEL                     (0xf << 0)
#define RCC_XBAR45CFGR_XBAR45EN_Pos                  6
#define RCC_XBAR45CFGR_XBAR45EN_Msk                  (0x1 << 6)
#define RCC_XBAR45CFGR_XBAR45EN                      (0x1 << 6)
#define RCC_XBAR45CFGR_XBAR45STS_Pos                 7
#define RCC_XBAR45CFGR_XBAR45STS_Msk                 (0x1 << 7)
#define RCC_XBAR45CFGR_XBAR45STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR46CFGR register */
#define RCC_XBAR46CFGR_XBAR46SEL_Pos                 0
#define RCC_XBAR46CFGR_XBAR46SEL_Msk                 (0xf << 0)
#define RCC_XBAR46CFGR_XBAR46SEL                     (0xf << 0)
#define RCC_XBAR46CFGR_XBAR46EN_Pos                  6
#define RCC_XBAR46CFGR_XBAR46EN_Msk                  (0x1 << 6)
#define RCC_XBAR46CFGR_XBAR46EN                      (0x1 << 6)
#define RCC_XBAR46CFGR_XBAR46STS_Pos                 7
#define RCC_XBAR46CFGR_XBAR46STS_Msk                 (0x1 << 7)
#define RCC_XBAR46CFGR_XBAR46STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR47CFGR register */
#define RCC_XBAR47CFGR_XBAR47SEL_Pos                 0
#define RCC_XBAR47CFGR_XBAR47SEL_Msk                 (0xf << 0)
#define RCC_XBAR47CFGR_XBAR47SEL                     (0xf << 0)
#define RCC_XBAR47CFGR_XBAR47EN_Pos                  6
#define RCC_XBAR47CFGR_XBAR47EN_Msk                  (0x1 << 6)
#define RCC_XBAR47CFGR_XBAR47EN                      (0x1 << 6)
#define RCC_XBAR47CFGR_XBAR47STS_Pos                 7
#define RCC_XBAR47CFGR_XBAR47STS_Msk                 (0x1 << 7)
#define RCC_XBAR47CFGR_XBAR47STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR48CFGR register */
#define RCC_XBAR48CFGR_XBAR48SEL_Pos                 0
#define RCC_XBAR48CFGR_XBAR48SEL_Msk                 (0xf << 0)
#define RCC_XBAR48CFGR_XBAR48SEL                     (0xf << 0)
#define RCC_XBAR48CFGR_XBAR48EN_Pos                  6
#define RCC_XBAR48CFGR_XBAR48EN_Msk                  (0x1 << 6)
#define RCC_XBAR48CFGR_XBAR48EN                      (0x1 << 6)
#define RCC_XBAR48CFGR_XBAR48STS_Pos                 7
#define RCC_XBAR48CFGR_XBAR48STS_Msk                 (0x1 << 7)
#define RCC_XBAR48CFGR_XBAR48STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR49CFGR register */
#define RCC_XBAR49CFGR_XBAR49SEL_Pos                 0
#define RCC_XBAR49CFGR_XBAR49SEL_Msk                 (0xf << 0)
#define RCC_XBAR49CFGR_XBAR49SEL                     (0xf << 0)
#define RCC_XBAR49CFGR_XBAR49EN_Pos                  6
#define RCC_XBAR49CFGR_XBAR49EN_Msk                  (0x1 << 6)
#define RCC_XBAR49CFGR_XBAR49EN                      (0x1 << 6)
#define RCC_XBAR49CFGR_XBAR49STS_Pos                 7
#define RCC_XBAR49CFGR_XBAR49STS_Msk                 (0x1 << 7)
#define RCC_XBAR49CFGR_XBAR49STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR50CFGR register */
#define RCC_XBAR50CFGR_XBAR50SEL_Pos                 0
#define RCC_XBAR50CFGR_XBAR50SEL_Msk                 (0xf << 0)
#define RCC_XBAR50CFGR_XBAR50SEL                     (0xf << 0)
#define RCC_XBAR50CFGR_XBAR50EN_Pos                  6
#define RCC_XBAR50CFGR_XBAR50EN_Msk                  (0x1 << 6)
#define RCC_XBAR50CFGR_XBAR50EN                      (0x1 << 6)
#define RCC_XBAR50CFGR_XBAR50STS_Pos                 7
#define RCC_XBAR50CFGR_XBAR50STS_Msk                 (0x1 << 7)
#define RCC_XBAR50CFGR_XBAR50STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR51CFGR register */
#define RCC_XBAR51CFGR_XBAR51SEL_Pos                 0
#define RCC_XBAR51CFGR_XBAR51SEL_Msk                 (0xf << 0)
#define RCC_XBAR51CFGR_XBAR51SEL                     (0xf << 0)
#define RCC_XBAR51CFGR_XBAR51EN_Pos                  6
#define RCC_XBAR51CFGR_XBAR51EN_Msk                  (0x1 << 6)
#define RCC_XBAR51CFGR_XBAR51EN                      (0x1 << 6)
#define RCC_XBAR51CFGR_XBAR51STS_Pos                 7
#define RCC_XBAR51CFGR_XBAR51STS_Msk                 (0x1 << 7)
#define RCC_XBAR51CFGR_XBAR51STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR52CFGR register */
#define RCC_XBAR52CFGR_XBAR52SEL_Pos                 0
#define RCC_XBAR52CFGR_XBAR52SEL_Msk                 (0xf << 0)
#define RCC_XBAR52CFGR_XBAR52SEL                     (0xf << 0)
#define RCC_XBAR52CFGR_XBAR52EN_Pos                  6
#define RCC_XBAR52CFGR_XBAR52EN_Msk                  (0x1 << 6)
#define RCC_XBAR52CFGR_XBAR52EN                      (0x1 << 6)
#define RCC_XBAR52CFGR_XBAR52STS_Pos                 7
#define RCC_XBAR52CFGR_XBAR52STS_Msk                 (0x1 << 7)
#define RCC_XBAR52CFGR_XBAR52STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR53CFGR register */
#define RCC_XBAR53CFGR_XBAR53SEL_Pos                 0
#define RCC_XBAR53CFGR_XBAR53SEL_Msk                 (0xf << 0)
#define RCC_XBAR53CFGR_XBAR53SEL                     (0xf << 0)
#define RCC_XBAR53CFGR_XBAR53EN_Pos                  6
#define RCC_XBAR53CFGR_XBAR53EN_Msk                  (0x1 << 6)
#define RCC_XBAR53CFGR_XBAR53EN                      (0x1 << 6)
#define RCC_XBAR53CFGR_XBAR53STS_Pos                 7
#define RCC_XBAR53CFGR_XBAR53STS_Msk                 (0x1 << 7)
#define RCC_XBAR53CFGR_XBAR53STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR54CFGR register */
#define RCC_XBAR54CFGR_XBAR54SEL_Pos                 0
#define RCC_XBAR54CFGR_XBAR54SEL_Msk                 (0xf << 0)
#define RCC_XBAR54CFGR_XBAR54SEL                     (0xf << 0)
#define RCC_XBAR54CFGR_XBAR54EN_Pos                  6
#define RCC_XBAR54CFGR_XBAR54EN_Msk                  (0x1 << 6)
#define RCC_XBAR54CFGR_XBAR54EN                      (0x1 << 6)
#define RCC_XBAR54CFGR_XBAR54STS_Pos                 7
#define RCC_XBAR54CFGR_XBAR54STS_Msk                 (0x1 << 7)
#define RCC_XBAR54CFGR_XBAR54STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR55CFGR register */
#define RCC_XBAR55CFGR_XBAR55SEL_Pos                 0
#define RCC_XBAR55CFGR_XBAR55SEL_Msk                 (0xf << 0)
#define RCC_XBAR55CFGR_XBAR55SEL                     (0xf << 0)
#define RCC_XBAR55CFGR_XBAR55EN_Pos                  6
#define RCC_XBAR55CFGR_XBAR55EN_Msk                  (0x1 << 6)
#define RCC_XBAR55CFGR_XBAR55EN                      (0x1 << 6)
#define RCC_XBAR55CFGR_XBAR55STS_Pos                 7
#define RCC_XBAR55CFGR_XBAR55STS_Msk                 (0x1 << 7)
#define RCC_XBAR55CFGR_XBAR55STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR56CFGR register */
#define RCC_XBAR56CFGR_XBAR56SEL_Pos                 0
#define RCC_XBAR56CFGR_XBAR56SEL_Msk                 (0xf << 0)
#define RCC_XBAR56CFGR_XBAR56SEL                     (0xf << 0)
#define RCC_XBAR56CFGR_XBAR56EN_Pos                  6
#define RCC_XBAR56CFGR_XBAR56EN_Msk                  (0x1 << 6)
#define RCC_XBAR56CFGR_XBAR56EN                      (0x1 << 6)
#define RCC_XBAR56CFGR_XBAR56STS_Pos                 7
#define RCC_XBAR56CFGR_XBAR56STS_Msk                 (0x1 << 7)
#define RCC_XBAR56CFGR_XBAR56STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR57CFGR register */
#define RCC_XBAR57CFGR_XBAR57SEL_Pos                 0
#define RCC_XBAR57CFGR_XBAR57SEL_Msk                 (0xf << 0)
#define RCC_XBAR57CFGR_XBAR57SEL                     (0xf << 0)
#define RCC_XBAR57CFGR_XBAR57EN_Pos                  6
#define RCC_XBAR57CFGR_XBAR57EN_Msk                  (0x1 << 6)
#define RCC_XBAR57CFGR_XBAR57EN                      (0x1 << 6)
#define RCC_XBAR57CFGR_XBAR57STS_Pos                 7
#define RCC_XBAR57CFGR_XBAR57STS_Msk                 (0x1 << 7)
#define RCC_XBAR57CFGR_XBAR57STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR58CFGR register */
#define RCC_XBAR58CFGR_XBAR58SEL_Pos                 0
#define RCC_XBAR58CFGR_XBAR58SEL_Msk                 (0xf << 0)
#define RCC_XBAR58CFGR_XBAR58SEL                     (0xf << 0)
#define RCC_XBAR58CFGR_XBAR58EN_Pos                  6
#define RCC_XBAR58CFGR_XBAR58EN_Msk                  (0x1 << 6)
#define RCC_XBAR58CFGR_XBAR58EN                      (0x1 << 6)
#define RCC_XBAR58CFGR_XBAR58STS_Pos                 7
#define RCC_XBAR58CFGR_XBAR58STS_Msk                 (0x1 << 7)
#define RCC_XBAR58CFGR_XBAR58STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR59CFGR register */
#define RCC_XBAR59CFGR_XBAR59SEL_Pos                 0
#define RCC_XBAR59CFGR_XBAR59SEL_Msk                 (0xf << 0)
#define RCC_XBAR59CFGR_XBAR59SEL                     (0xf << 0)
#define RCC_XBAR59CFGR_XBAR59EN_Pos                  6
#define RCC_XBAR59CFGR_XBAR59EN_Msk                  (0x1 << 6)
#define RCC_XBAR59CFGR_XBAR59EN                      (0x1 << 6)
#define RCC_XBAR59CFGR_XBAR59STS_Pos                 7
#define RCC_XBAR59CFGR_XBAR59STS_Msk                 (0x1 << 7)
#define RCC_XBAR59CFGR_XBAR59STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR60CFGR register */
#define RCC_XBAR60CFGR_XBAR60SEL_Pos                 0
#define RCC_XBAR60CFGR_XBAR60SEL_Msk                 (0xf << 0)
#define RCC_XBAR60CFGR_XBAR60SEL                     (0xf << 0)
#define RCC_XBAR60CFGR_XBAR60EN_Pos                  6
#define RCC_XBAR60CFGR_XBAR60EN_Msk                  (0x1 << 6)
#define RCC_XBAR60CFGR_XBAR60EN                      (0x1 << 6)
#define RCC_XBAR60CFGR_XBAR60STS_Pos                 7
#define RCC_XBAR60CFGR_XBAR60STS_Msk                 (0x1 << 7)
#define RCC_XBAR60CFGR_XBAR60STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR61CFGR register */
#define RCC_XBAR61CFGR_XBAR61SEL_Pos                 0
#define RCC_XBAR61CFGR_XBAR61SEL_Msk                 (0xf << 0)
#define RCC_XBAR61CFGR_XBAR61SEL                     (0xf << 0)
#define RCC_XBAR61CFGR_XBAR61EN_Pos                  6
#define RCC_XBAR61CFGR_XBAR61EN_Msk                  (0x1 << 6)
#define RCC_XBAR61CFGR_XBAR61EN                      (0x1 << 6)
#define RCC_XBAR61CFGR_XBAR61STS_Pos                 7
#define RCC_XBAR61CFGR_XBAR61STS_Msk                 (0x1 << 7)
#define RCC_XBAR61CFGR_XBAR61STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR62CFGR register */
#define RCC_XBAR62CFGR_XBAR62SEL_Pos                 0
#define RCC_XBAR62CFGR_XBAR62SEL_Msk                 (0xf << 0)
#define RCC_XBAR62CFGR_XBAR62SEL                     (0xf << 0)
#define RCC_XBAR62CFGR_XBAR62EN_Pos                  6
#define RCC_XBAR62CFGR_XBAR62EN_Msk                  (0x1 << 6)
#define RCC_XBAR62CFGR_XBAR62EN                      (0x1 << 6)
#define RCC_XBAR62CFGR_XBAR62STS_Pos                 7
#define RCC_XBAR62CFGR_XBAR62STS_Msk                 (0x1 << 7)
#define RCC_XBAR62CFGR_XBAR62STS                     (0x1 << 7)

/* Bit fields for RCC_XBAR63CFGR register */
#define RCC_XBAR63CFGR_XBAR63SEL_Pos                 0
#define RCC_XBAR63CFGR_XBAR63SEL_Msk                 (0xf << 0)
#define RCC_XBAR63CFGR_XBAR63SEL                     (0xf << 0)
#define RCC_XBAR63CFGR_XBAR63EN_Pos                  6
#define RCC_XBAR63CFGR_XBAR63EN_Msk                  (0x1 << 6)
#define RCC_XBAR63CFGR_XBAR63EN                      (0x1 << 6)
#define RCC_XBAR63CFGR_XBAR63STS_Pos                 7
#define RCC_XBAR63CFGR_XBAR63STS_Msk                 (0x1 << 7)
#define RCC_XBAR63CFGR_XBAR63STS                     (0x1 << 7)

/* Bit fields for RCC_PREDIV0CFGR register */
#define RCC_PREDIV0CFGR_PREDIV0_Pos                  0
#define RCC_PREDIV0CFGR_PREDIV0_Msk                  (0x3ff << 0)
#define RCC_PREDIV0CFGR_PREDIV0                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV1CFGR register */
#define RCC_PREDIV1CFGR_PREDIV1_Pos                  0
#define RCC_PREDIV1CFGR_PREDIV1_Msk                  (0x3ff << 0)
#define RCC_PREDIV1CFGR_PREDIV1                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV2CFGR register */
#define RCC_PREDIV2CFGR_PREDIV2_Pos                  0
#define RCC_PREDIV2CFGR_PREDIV2_Msk                  (0x3ff << 0)
#define RCC_PREDIV2CFGR_PREDIV2                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV3CFGR register */
#define RCC_PREDIV3CFGR_PREDIV3_Pos                  0
#define RCC_PREDIV3CFGR_PREDIV3_Msk                  (0x3ff << 0)
#define RCC_PREDIV3CFGR_PREDIV3                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV4CFGR register */
#define RCC_PREDIV4CFGR_PREDIV4_Pos                  0
#define RCC_PREDIV4CFGR_PREDIV4_Msk                  (0x3ff << 0)
#define RCC_PREDIV4CFGR_PREDIV4                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV5CFGR register */
#define RCC_PREDIV5CFGR_PREDIV5_Pos                  0
#define RCC_PREDIV5CFGR_PREDIV5_Msk                  (0x3ff << 0)
#define RCC_PREDIV5CFGR_PREDIV5                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV6CFGR register */
#define RCC_PREDIV6CFGR_PREDIV6_Pos                  0
#define RCC_PREDIV6CFGR_PREDIV6_Msk                  (0x3ff << 0)
#define RCC_PREDIV6CFGR_PREDIV6                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV7CFGR register */
#define RCC_PREDIV7CFGR_PREDIV7_Pos                  0
#define RCC_PREDIV7CFGR_PREDIV7_Msk                  (0x3ff << 0)
#define RCC_PREDIV7CFGR_PREDIV7                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV8CFGR register */
#define RCC_PREDIV8CFGR_PREDIV8_Pos                  0
#define RCC_PREDIV8CFGR_PREDIV8_Msk                  (0x3ff << 0)
#define RCC_PREDIV8CFGR_PREDIV8                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV9CFGR register */
#define RCC_PREDIV9CFGR_PREDIV9_Pos                  0
#define RCC_PREDIV9CFGR_PREDIV9_Msk                  (0x3ff << 0)
#define RCC_PREDIV9CFGR_PREDIV9                      (0x3ff << 0)

/* Bit fields for RCC_PREDIV10CFGR register */
#define RCC_PREDIV10CFGR_PREDIV10_Pos                0
#define RCC_PREDIV10CFGR_PREDIV10_Msk                (0x3ff << 0)
#define RCC_PREDIV10CFGR_PREDIV10                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV11CFGR register */
#define RCC_PREDIV11CFGR_PREDIV11_Pos                0
#define RCC_PREDIV11CFGR_PREDIV11_Msk                (0x3ff << 0)
#define RCC_PREDIV11CFGR_PREDIV11                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV12CFGR register */
#define RCC_PREDIV12CFGR_PREDIV12_Pos                0
#define RCC_PREDIV12CFGR_PREDIV12_Msk                (0x3ff << 0)
#define RCC_PREDIV12CFGR_PREDIV12                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV13CFGR register */
#define RCC_PREDIV13CFGR_PREDIV13_Pos                0
#define RCC_PREDIV13CFGR_PREDIV13_Msk                (0x3ff << 0)
#define RCC_PREDIV13CFGR_PREDIV13                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV14CFGR register */
#define RCC_PREDIV14CFGR_PREDIV14_Pos                0
#define RCC_PREDIV14CFGR_PREDIV14_Msk                (0x3ff << 0)
#define RCC_PREDIV14CFGR_PREDIV14                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV15CFGR register */
#define RCC_PREDIV15CFGR_PREDIV15_Pos                0
#define RCC_PREDIV15CFGR_PREDIV15_Msk                (0x3ff << 0)
#define RCC_PREDIV15CFGR_PREDIV15                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV16CFGR register */
#define RCC_PREDIV16CFGR_PREDIV16_Pos                0
#define RCC_PREDIV16CFGR_PREDIV16_Msk                (0x3ff << 0)
#define RCC_PREDIV16CFGR_PREDIV16                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV17CFGR register */
#define RCC_PREDIV17CFGR_PREDIV17_Pos                0
#define RCC_PREDIV17CFGR_PREDIV17_Msk                (0x3ff << 0)
#define RCC_PREDIV17CFGR_PREDIV17                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV18CFGR register */
#define RCC_PREDIV18CFGR_PREDIV18_Pos                0
#define RCC_PREDIV18CFGR_PREDIV18_Msk                (0x3ff << 0)
#define RCC_PREDIV18CFGR_PREDIV18                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV19CFGR register */
#define RCC_PREDIV19CFGR_PREDIV19_Pos                0
#define RCC_PREDIV19CFGR_PREDIV19_Msk                (0x3ff << 0)
#define RCC_PREDIV19CFGR_PREDIV19                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV20CFGR register */
#define RCC_PREDIV20CFGR_PREDIV20_Pos                0
#define RCC_PREDIV20CFGR_PREDIV20_Msk                (0x3ff << 0)
#define RCC_PREDIV20CFGR_PREDIV20                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV21CFGR register */
#define RCC_PREDIV21CFGR_PREDIV21_Pos                0
#define RCC_PREDIV21CFGR_PREDIV21_Msk                (0x3ff << 0)
#define RCC_PREDIV21CFGR_PREDIV21                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV22CFGR register */
#define RCC_PREDIV22CFGR_PREDIV22_Pos                0
#define RCC_PREDIV22CFGR_PREDIV22_Msk                (0x3ff << 0)
#define RCC_PREDIV22CFGR_PREDIV22                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV23CFGR register */
#define RCC_PREDIV23CFGR_PREDIV23_Pos                0
#define RCC_PREDIV23CFGR_PREDIV23_Msk                (0x3ff << 0)
#define RCC_PREDIV23CFGR_PREDIV23                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV24CFGR register */
#define RCC_PREDIV24CFGR_PREDIV24_Pos                0
#define RCC_PREDIV24CFGR_PREDIV24_Msk                (0x3ff << 0)
#define RCC_PREDIV24CFGR_PREDIV24                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV25CFGR register */
#define RCC_PREDIV25CFGR_PREDIV25_Pos                0
#define RCC_PREDIV25CFGR_PREDIV25_Msk                (0x3ff << 0)
#define RCC_PREDIV25CFGR_PREDIV25                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV26CFGR register */
#define RCC_PREDIV26CFGR_PREDIV26_Pos                0
#define RCC_PREDIV26CFGR_PREDIV26_Msk                (0x3ff << 0)
#define RCC_PREDIV26CFGR_PREDIV26                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV27CFGR register */
#define RCC_PREDIV27CFGR_PREDIV27_Pos                0
#define RCC_PREDIV27CFGR_PREDIV27_Msk                (0x3ff << 0)
#define RCC_PREDIV27CFGR_PREDIV27                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV28CFGR register */
#define RCC_PREDIV28CFGR_PREDIV28_Pos                0
#define RCC_PREDIV28CFGR_PREDIV28_Msk                (0x3ff << 0)
#define RCC_PREDIV28CFGR_PREDIV28                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV29CFGR register */
#define RCC_PREDIV29CFGR_PREDIV29_Pos                0
#define RCC_PREDIV29CFGR_PREDIV29_Msk                (0x3ff << 0)
#define RCC_PREDIV29CFGR_PREDIV29                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV30CFGR register */
#define RCC_PREDIV30CFGR_PREDIV30_Pos                0
#define RCC_PREDIV30CFGR_PREDIV30_Msk                (0x3ff << 0)
#define RCC_PREDIV30CFGR_PREDIV30                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV31CFGR register */
#define RCC_PREDIV31CFGR_PREDIV31_Pos                0
#define RCC_PREDIV31CFGR_PREDIV31_Msk                (0x3ff << 0)
#define RCC_PREDIV31CFGR_PREDIV31                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV32CFGR register */
#define RCC_PREDIV32CFGR_PREDIV32_Pos                0
#define RCC_PREDIV32CFGR_PREDIV32_Msk                (0x3ff << 0)
#define RCC_PREDIV32CFGR_PREDIV32                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV33CFGR register */
#define RCC_PREDIV33CFGR_PREDIV33_Pos                0
#define RCC_PREDIV33CFGR_PREDIV33_Msk                (0x3ff << 0)
#define RCC_PREDIV33CFGR_PREDIV33                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV34CFGR register */
#define RCC_PREDIV34CFGR_PREDIV34_Pos                0
#define RCC_PREDIV34CFGR_PREDIV34_Msk                (0x3ff << 0)
#define RCC_PREDIV34CFGR_PREDIV34                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV35CFGR register */
#define RCC_PREDIV35CFGR_PREDIV35_Pos                0
#define RCC_PREDIV35CFGR_PREDIV35_Msk                (0x3ff << 0)
#define RCC_PREDIV35CFGR_PREDIV35                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV36CFGR register */
#define RCC_PREDIV36CFGR_PREDIV36_Pos                0
#define RCC_PREDIV36CFGR_PREDIV36_Msk                (0x3ff << 0)
#define RCC_PREDIV36CFGR_PREDIV36                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV37CFGR register */
#define RCC_PREDIV37CFGR_PREDIV37_Pos                0
#define RCC_PREDIV37CFGR_PREDIV37_Msk                (0x3ff << 0)
#define RCC_PREDIV37CFGR_PREDIV37                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV38CFGR register */
#define RCC_PREDIV38CFGR_PREDIV38_Pos                0
#define RCC_PREDIV38CFGR_PREDIV38_Msk                (0x3ff << 0)
#define RCC_PREDIV38CFGR_PREDIV38                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV39CFGR register */
#define RCC_PREDIV39CFGR_PREDIV39_Pos                0
#define RCC_PREDIV39CFGR_PREDIV39_Msk                (0x3ff << 0)
#define RCC_PREDIV39CFGR_PREDIV39                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV40CFGR register */
#define RCC_PREDIV40CFGR_PREDIV40_Pos                0
#define RCC_PREDIV40CFGR_PREDIV40_Msk                (0x3ff << 0)
#define RCC_PREDIV40CFGR_PREDIV40                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV41CFGR register */
#define RCC_PREDIV41CFGR_PREDIV41_Pos                0
#define RCC_PREDIV41CFGR_PREDIV41_Msk                (0x3ff << 0)
#define RCC_PREDIV41CFGR_PREDIV41                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV42CFGR register */
#define RCC_PREDIV42CFGR_PREDIV42_Pos                0
#define RCC_PREDIV42CFGR_PREDIV42_Msk                (0x3ff << 0)
#define RCC_PREDIV42CFGR_PREDIV42                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV43CFGR register */
#define RCC_PREDIV43CFGR_PREDIV43_Pos                0
#define RCC_PREDIV43CFGR_PREDIV43_Msk                (0x3ff << 0)
#define RCC_PREDIV43CFGR_PREDIV43                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV44CFGR register */
#define RCC_PREDIV44CFGR_PREDIV44_Pos                0
#define RCC_PREDIV44CFGR_PREDIV44_Msk                (0x3ff << 0)
#define RCC_PREDIV44CFGR_PREDIV44                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV45CFGR register */
#define RCC_PREDIV45CFGR_PREDIV45_Pos                0
#define RCC_PREDIV45CFGR_PREDIV45_Msk                (0x3ff << 0)
#define RCC_PREDIV45CFGR_PREDIV45                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV46CFGR register */
#define RCC_PREDIV46CFGR_PREDIV46_Pos                0
#define RCC_PREDIV46CFGR_PREDIV46_Msk                (0x3ff << 0)
#define RCC_PREDIV46CFGR_PREDIV46                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV47CFGR register */
#define RCC_PREDIV47CFGR_PREDIV47_Pos                0
#define RCC_PREDIV47CFGR_PREDIV47_Msk                (0x3ff << 0)
#define RCC_PREDIV47CFGR_PREDIV47                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV48CFGR register */
#define RCC_PREDIV48CFGR_PREDIV48_Pos                0
#define RCC_PREDIV48CFGR_PREDIV48_Msk                (0x3ff << 0)
#define RCC_PREDIV48CFGR_PREDIV48                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV49CFGR register */
#define RCC_PREDIV49CFGR_PREDIV49_Pos                0
#define RCC_PREDIV49CFGR_PREDIV49_Msk                (0x3ff << 0)
#define RCC_PREDIV49CFGR_PREDIV49                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV50CFGR register */
#define RCC_PREDIV50CFGR_PREDIV50_Pos                0
#define RCC_PREDIV50CFGR_PREDIV50_Msk                (0x3ff << 0)
#define RCC_PREDIV50CFGR_PREDIV50                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV51CFGR register */
#define RCC_PREDIV51CFGR_PREDIV51_Pos                0
#define RCC_PREDIV51CFGR_PREDIV51_Msk                (0x3ff << 0)
#define RCC_PREDIV51CFGR_PREDIV51                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV52CFGR register */
#define RCC_PREDIV52CFGR_PREDIV52_Pos                0
#define RCC_PREDIV52CFGR_PREDIV52_Msk                (0x3ff << 0)
#define RCC_PREDIV52CFGR_PREDIV52                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV53CFGR register */
#define RCC_PREDIV53CFGR_PREDIV53_Pos                0
#define RCC_PREDIV53CFGR_PREDIV53_Msk                (0x3ff << 0)
#define RCC_PREDIV53CFGR_PREDIV53                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV54CFGR register */
#define RCC_PREDIV54CFGR_PREDIV54_Pos                0
#define RCC_PREDIV54CFGR_PREDIV54_Msk                (0x3ff << 0)
#define RCC_PREDIV54CFGR_PREDIV54                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV55CFGR register */
#define RCC_PREDIV55CFGR_PREDIV55_Pos                0
#define RCC_PREDIV55CFGR_PREDIV55_Msk                (0x3ff << 0)
#define RCC_PREDIV55CFGR_PREDIV55                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV56CFGR register */
#define RCC_PREDIV56CFGR_PREDIV56_Pos                0
#define RCC_PREDIV56CFGR_PREDIV56_Msk                (0x3ff << 0)
#define RCC_PREDIV56CFGR_PREDIV56                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV57CFGR register */
#define RCC_PREDIV57CFGR_PREDIV57_Pos                0
#define RCC_PREDIV57CFGR_PREDIV57_Msk                (0x3ff << 0)
#define RCC_PREDIV57CFGR_PREDIV57                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV58CFGR register */
#define RCC_PREDIV58CFGR_PREDIV58_Pos                0
#define RCC_PREDIV58CFGR_PREDIV58_Msk                (0x3ff << 0)
#define RCC_PREDIV58CFGR_PREDIV58                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV59CFGR register */
#define RCC_PREDIV59CFGR_PREDIV59_Pos                0
#define RCC_PREDIV59CFGR_PREDIV59_Msk                (0x3ff << 0)
#define RCC_PREDIV59CFGR_PREDIV59                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV60CFGR register */
#define RCC_PREDIV60CFGR_PREDIV60_Pos                0
#define RCC_PREDIV60CFGR_PREDIV60_Msk                (0x3ff << 0)
#define RCC_PREDIV60CFGR_PREDIV60                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV61CFGR register */
#define RCC_PREDIV61CFGR_PREDIV61_Pos                0
#define RCC_PREDIV61CFGR_PREDIV61_Msk                (0x3ff << 0)
#define RCC_PREDIV61CFGR_PREDIV61                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV62CFGR register */
#define RCC_PREDIV62CFGR_PREDIV62_Pos                0
#define RCC_PREDIV62CFGR_PREDIV62_Msk                (0x3ff << 0)
#define RCC_PREDIV62CFGR_PREDIV62                    (0x3ff << 0)

/* Bit fields for RCC_PREDIV63CFGR register */
#define RCC_PREDIV63CFGR_PREDIV63_Pos                0
#define RCC_PREDIV63CFGR_PREDIV63_Msk                (0x3ff << 0)
#define RCC_PREDIV63CFGR_PREDIV63                    (0x3ff << 0)

/* Bit fields for RCC_PREDIVSR1 register */
#define RCC_PREDIVSR1_PREDIVSTS_Pos                  0
#define RCC_PREDIVSR1_PREDIVSTS_Msk                  (0xFFFFFFFF << 0)
#define RCC_PREDIVSR1_PREDIVSTS                      (0xFFFFFFFF << 0)

/* Bit fields for RCC_PREDIVSR2 register */
#define RCC_PREDIVSR2_PREDIVSTS_Pos                  0
#define RCC_PREDIVSR2_PREDIVSTS_Msk                  (0xFFFFFFFF << 0)
#define RCC_PREDIVSR2_PREDIVSTS                      (0xFFFFFFFF << 0)

/* Bit fields for RCC_FINDIV0CFGR register */
#define RCC_FINDIV0CFGR_FINDIV0_Pos                  0
#define RCC_FINDIV0CFGR_FINDIV0_Msk                  (0x3f << 0)
#define RCC_FINDIV0CFGR_FINDIV0                      (0x3f << 0)
#define RCC_FINDIV0CFGR_FINDIV0EN_Pos                6
#define RCC_FINDIV0CFGR_FINDIV0EN_Msk                (0x1 << 6)
#define RCC_FINDIV0CFGR_FINDIV0EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV1CFGR register */
#define RCC_FINDIV1CFGR_FINDIV1_Pos                  0
#define RCC_FINDIV1CFGR_FINDIV1_Msk                  (0x3f << 0)
#define RCC_FINDIV1CFGR_FINDIV1                      (0x3f << 0)
#define RCC_FINDIV1CFGR_FINDIV1EN_Pos                6
#define RCC_FINDIV1CFGR_FINDIV1EN_Msk                (0x1 << 6)
#define RCC_FINDIV1CFGR_FINDIV1EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV2CFGR register */
#define RCC_FINDIV2CFGR_FINDIV2_Pos                  0
#define RCC_FINDIV2CFGR_FINDIV2_Msk                  (0x3f << 0)
#define RCC_FINDIV2CFGR_FINDIV2                      (0x3f << 0)
#define RCC_FINDIV2CFGR_FINDIV2EN_Pos                6
#define RCC_FINDIV2CFGR_FINDIV2EN_Msk                (0x1 << 6)
#define RCC_FINDIV2CFGR_FINDIV2EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV3CFGR register */
#define RCC_FINDIV3CFGR_FINDIV3_Pos                  0
#define RCC_FINDIV3CFGR_FINDIV3_Msk                  (0x3f << 0)
#define RCC_FINDIV3CFGR_FINDIV3                      (0x3f << 0)
#define RCC_FINDIV3CFGR_FINDIV3EN_Pos                6
#define RCC_FINDIV3CFGR_FINDIV3EN_Msk                (0x1 << 6)
#define RCC_FINDIV3CFGR_FINDIV3EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV4CFGR register */
#define RCC_FINDIV4CFGR_FINDIV4_Pos                  0
#define RCC_FINDIV4CFGR_FINDIV4_Msk                  (0x3f << 0)
#define RCC_FINDIV4CFGR_FINDIV4                      (0x3f << 0)
#define RCC_FINDIV4CFGR_FINDIV4EN_Pos                6
#define RCC_FINDIV4CFGR_FINDIV4EN_Msk                (0x1 << 6)
#define RCC_FINDIV4CFGR_FINDIV4EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV5CFGR register */
#define RCC_FINDIV5CFGR_FINDIV5_Pos                  0
#define RCC_FINDIV5CFGR_FINDIV5_Msk                  (0x3f << 0)
#define RCC_FINDIV5CFGR_FINDIV5                      (0x3f << 0)
#define RCC_FINDIV5CFGR_FINDIV5EN_Pos                6
#define RCC_FINDIV5CFGR_FINDIV5EN_Msk                (0x1 << 6)
#define RCC_FINDIV5CFGR_FINDIV5EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV6CFGR register */
#define RCC_FINDIV6CFGR_FINDIV6_Pos                  0
#define RCC_FINDIV6CFGR_FINDIV6_Msk                  (0x3f << 0)
#define RCC_FINDIV6CFGR_FINDIV6                      (0x3f << 0)
#define RCC_FINDIV6CFGR_FINDIV6EN_Pos                6
#define RCC_FINDIV6CFGR_FINDIV6EN_Msk                (0x1 << 6)
#define RCC_FINDIV6CFGR_FINDIV6EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV7CFGR register */
#define RCC_FINDIV7CFGR_FINDIV7_Pos                  0
#define RCC_FINDIV7CFGR_FINDIV7_Msk                  (0x3f << 0)
#define RCC_FINDIV7CFGR_FINDIV7                      (0x3f << 0)
#define RCC_FINDIV7CFGR_FINDIV7EN_Pos                6
#define RCC_FINDIV7CFGR_FINDIV7EN_Msk                (0x1 << 6)
#define RCC_FINDIV7CFGR_FINDIV7EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV8CFGR register */
#define RCC_FINDIV8CFGR_FINDIV8_Pos                  0
#define RCC_FINDIV8CFGR_FINDIV8_Msk                  (0x3f << 0)
#define RCC_FINDIV8CFGR_FINDIV8                      (0x3f << 0)
#define RCC_FINDIV8CFGR_FINDIV8EN_Pos                6
#define RCC_FINDIV8CFGR_FINDIV8EN_Msk                (0x1 << 6)
#define RCC_FINDIV8CFGR_FINDIV8EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV9CFGR register */
#define RCC_FINDIV9CFGR_FINDIV9_Pos                  0
#define RCC_FINDIV9CFGR_FINDIV9_Msk                  (0x3f << 0)
#define RCC_FINDIV9CFGR_FINDIV9                      (0x3f << 0)
#define RCC_FINDIV9CFGR_FINDIV9EN_Pos                6
#define RCC_FINDIV9CFGR_FINDIV9EN_Msk                (0x1 << 6)
#define RCC_FINDIV9CFGR_FINDIV9EN                    (0x1 << 6)

/* Bit fields for RCC_FINDIV10CFGR register */
#define RCC_FINDIV10CFGR_FINDIV10_Pos                0
#define RCC_FINDIV10CFGR_FINDIV10_Msk                (0x3f << 0)
#define RCC_FINDIV10CFGR_FINDIV10                    (0x3f << 0)
#define RCC_FINDIV10CFGR_FINDIV10EN_Pos              6
#define RCC_FINDIV10CFGR_FINDIV10EN_Msk              (0x1 << 6)
#define RCC_FINDIV10CFGR_FINDIV10EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV11CFGR register */
#define RCC_FINDIV11CFGR_FINDIV11_Pos                0
#define RCC_FINDIV11CFGR_FINDIV11_Msk                (0x3f << 0)
#define RCC_FINDIV11CFGR_FINDIV11                    (0x3f << 0)
#define RCC_FINDIV11CFGR_FINDIV11EN_Pos              6
#define RCC_FINDIV11CFGR_FINDIV11EN_Msk              (0x1 << 6)
#define RCC_FINDIV11CFGR_FINDIV11EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV12CFGR register */
#define RCC_FINDIV12CFGR_FINDIV12_Pos                0
#define RCC_FINDIV12CFGR_FINDIV12_Msk                (0x3f << 0)
#define RCC_FINDIV12CFGR_FINDIV12                    (0x3f << 0)
#define RCC_FINDIV12CFGR_FINDIV12EN_Pos              6
#define RCC_FINDIV12CFGR_FINDIV12EN_Msk              (0x1 << 6)
#define RCC_FINDIV12CFGR_FINDIV12EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV13CFGR register */
#define RCC_FINDIV13CFGR_FINDIV13_Pos                0
#define RCC_FINDIV13CFGR_FINDIV13_Msk                (0x3f << 0)
#define RCC_FINDIV13CFGR_FINDIV13                    (0x3f << 0)
#define RCC_FINDIV13CFGR_FINDIV13EN_Pos              6
#define RCC_FINDIV13CFGR_FINDIV13EN_Msk              (0x1 << 6)
#define RCC_FINDIV13CFGR_FINDIV13EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV14CFGR register */
#define RCC_FINDIV14CFGR_FINDIV14_Pos                0
#define RCC_FINDIV14CFGR_FINDIV14_Msk                (0x3f << 0)
#define RCC_FINDIV14CFGR_FINDIV14                    (0x3f << 0)
#define RCC_FINDIV14CFGR_FINDIV14EN_Pos              6
#define RCC_FINDIV14CFGR_FINDIV14EN_Msk              (0x1 << 6)
#define RCC_FINDIV14CFGR_FINDIV14EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV15CFGR register */
#define RCC_FINDIV15CFGR_FINDIV15_Pos                0
#define RCC_FINDIV15CFGR_FINDIV15_Msk                (0x3f << 0)
#define RCC_FINDIV15CFGR_FINDIV15                    (0x3f << 0)
#define RCC_FINDIV15CFGR_FINDIV15EN_Pos              6
#define RCC_FINDIV15CFGR_FINDIV15EN_Msk              (0x1 << 6)
#define RCC_FINDIV15CFGR_FINDIV15EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV16CFGR register */
#define RCC_FINDIV16CFGR_FINDIV16_Pos                0
#define RCC_FINDIV16CFGR_FINDIV16_Msk                (0x3f << 0)
#define RCC_FINDIV16CFGR_FINDIV16                    (0x3f << 0)
#define RCC_FINDIV16CFGR_FINDIV16EN_Pos              6
#define RCC_FINDIV16CFGR_FINDIV16EN_Msk              (0x1 << 6)
#define RCC_FINDIV16CFGR_FINDIV16EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV17CFGR register */
#define RCC_FINDIV17CFGR_FINDIV17_Pos                0
#define RCC_FINDIV17CFGR_FINDIV17_Msk                (0x3f << 0)
#define RCC_FINDIV17CFGR_FINDIV17                    (0x3f << 0)
#define RCC_FINDIV17CFGR_FINDIV17EN_Pos              6
#define RCC_FINDIV17CFGR_FINDIV17EN_Msk              (0x1 << 6)
#define RCC_FINDIV17CFGR_FINDIV17EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV18CFGR register */
#define RCC_FINDIV18CFGR_FINDIV18_Pos                0
#define RCC_FINDIV18CFGR_FINDIV18_Msk                (0x3f << 0)
#define RCC_FINDIV18CFGR_FINDIV18                    (0x3f << 0)
#define RCC_FINDIV18CFGR_FINDIV18EN_Pos              6
#define RCC_FINDIV18CFGR_FINDIV18EN_Msk              (0x1 << 6)
#define RCC_FINDIV18CFGR_FINDIV18EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV19CFGR register */
#define RCC_FINDIV19CFGR_FINDIV19_Pos                0
#define RCC_FINDIV19CFGR_FINDIV19_Msk                (0x3f << 0)
#define RCC_FINDIV19CFGR_FINDIV19                    (0x3f << 0)
#define RCC_FINDIV19CFGR_FINDIV19EN_Pos              6
#define RCC_FINDIV19CFGR_FINDIV19EN_Msk              (0x1 << 6)
#define RCC_FINDIV19CFGR_FINDIV19EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV20CFGR register */
#define RCC_FINDIV20CFGR_FINDIV20_Pos                0
#define RCC_FINDIV20CFGR_FINDIV20_Msk                (0x3f << 0)
#define RCC_FINDIV20CFGR_FINDIV20                    (0x3f << 0)
#define RCC_FINDIV20CFGR_FINDIV20EN_Pos              6
#define RCC_FINDIV20CFGR_FINDIV20EN_Msk              (0x1 << 6)
#define RCC_FINDIV20CFGR_FINDIV20EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV21CFGR register */
#define RCC_FINDIV21CFGR_FINDIV21_Pos                0
#define RCC_FINDIV21CFGR_FINDIV21_Msk                (0x3f << 0)
#define RCC_FINDIV21CFGR_FINDIV21                    (0x3f << 0)
#define RCC_FINDIV21CFGR_FINDIV21EN_Pos              6
#define RCC_FINDIV21CFGR_FINDIV21EN_Msk              (0x1 << 6)
#define RCC_FINDIV21CFGR_FINDIV21EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV22CFGR register */
#define RCC_FINDIV22CFGR_FINDIV22_Pos                0
#define RCC_FINDIV22CFGR_FINDIV22_Msk                (0x3f << 0)
#define RCC_FINDIV22CFGR_FINDIV22                    (0x3f << 0)
#define RCC_FINDIV22CFGR_FINDIV22EN_Pos              6
#define RCC_FINDIV22CFGR_FINDIV22EN_Msk              (0x1 << 6)
#define RCC_FINDIV22CFGR_FINDIV22EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV23CFGR register */
#define RCC_FINDIV23CFGR_FINDIV23_Pos                0
#define RCC_FINDIV23CFGR_FINDIV23_Msk                (0x3f << 0)
#define RCC_FINDIV23CFGR_FINDIV23                    (0x3f << 0)
#define RCC_FINDIV23CFGR_FINDIV23EN_Pos              6
#define RCC_FINDIV23CFGR_FINDIV23EN_Msk              (0x1 << 6)
#define RCC_FINDIV23CFGR_FINDIV23EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV24CFGR register */
#define RCC_FINDIV24CFGR_FINDIV24_Pos                0
#define RCC_FINDIV24CFGR_FINDIV24_Msk                (0x3f << 0)
#define RCC_FINDIV24CFGR_FINDIV24                    (0x3f << 0)
#define RCC_FINDIV24CFGR_FINDIV24EN_Pos              6
#define RCC_FINDIV24CFGR_FINDIV24EN_Msk              (0x1 << 6)
#define RCC_FINDIV24CFGR_FINDIV24EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV25CFGR register */
#define RCC_FINDIV25CFGR_FINDIV25_Pos                0
#define RCC_FINDIV25CFGR_FINDIV25_Msk                (0x3f << 0)
#define RCC_FINDIV25CFGR_FINDIV25                    (0x3f << 0)
#define RCC_FINDIV25CFGR_FINDIV25EN_Pos              6
#define RCC_FINDIV25CFGR_FINDIV25EN_Msk              (0x1 << 6)
#define RCC_FINDIV25CFGR_FINDIV25EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV26CFGR register */
#define RCC_FINDIV26CFGR_FINDIV26_Pos                0
#define RCC_FINDIV26CFGR_FINDIV26_Msk                (0x3f << 0)
#define RCC_FINDIV26CFGR_FINDIV26                    (0x3f << 0)
#define RCC_FINDIV26CFGR_FINDIV26EN_Pos              6
#define RCC_FINDIV26CFGR_FINDIV26EN_Msk              (0x1 << 6)
#define RCC_FINDIV26CFGR_FINDIV26EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV27CFGR register */
#define RCC_FINDIV27CFGR_FINDIV27_Pos                0
#define RCC_FINDIV27CFGR_FINDIV27_Msk                (0x3f << 0)
#define RCC_FINDIV27CFGR_FINDIV27                    (0x3f << 0)
#define RCC_FINDIV27CFGR_FINDIV27EN_Pos              6
#define RCC_FINDIV27CFGR_FINDIV27EN_Msk              (0x1 << 6)
#define RCC_FINDIV27CFGR_FINDIV27EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV28CFGR register */
#define RCC_FINDIV28CFGR_FINDIV28_Pos                0
#define RCC_FINDIV28CFGR_FINDIV28_Msk                (0x3f << 0)
#define RCC_FINDIV28CFGR_FINDIV28                    (0x3f << 0)
#define RCC_FINDIV28CFGR_FINDIV28EN_Pos              6
#define RCC_FINDIV28CFGR_FINDIV28EN_Msk              (0x1 << 6)
#define RCC_FINDIV28CFGR_FINDIV28EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV29CFGR register */
#define RCC_FINDIV29CFGR_FINDIV29_Pos                0
#define RCC_FINDIV29CFGR_FINDIV29_Msk                (0x3f << 0)
#define RCC_FINDIV29CFGR_FINDIV29                    (0x3f << 0)
#define RCC_FINDIV29CFGR_FINDIV29EN_Pos              6
#define RCC_FINDIV29CFGR_FINDIV29EN_Msk              (0x1 << 6)
#define RCC_FINDIV29CFGR_FINDIV29EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV30CFGR register */
#define RCC_FINDIV30CFGR_FINDIV30_Pos                0
#define RCC_FINDIV30CFGR_FINDIV30_Msk                (0x3f << 0)
#define RCC_FINDIV30CFGR_FINDIV30                    (0x3f << 0)
#define RCC_FINDIV30CFGR_FINDIV30EN_Pos              6
#define RCC_FINDIV30CFGR_FINDIV30EN_Msk              (0x1 << 6)
#define RCC_FINDIV30CFGR_FINDIV30EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV31CFGR register */
#define RCC_FINDIV31CFGR_FINDIV31_Pos                0
#define RCC_FINDIV31CFGR_FINDIV31_Msk                (0x3f << 0)
#define RCC_FINDIV31CFGR_FINDIV31                    (0x3f << 0)
#define RCC_FINDIV31CFGR_FINDIV31EN_Pos              6
#define RCC_FINDIV31CFGR_FINDIV31EN_Msk              (0x1 << 6)
#define RCC_FINDIV31CFGR_FINDIV31EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV32CFGR register */
#define RCC_FINDIV32CFGR_FINDIV32_Pos                0
#define RCC_FINDIV32CFGR_FINDIV32_Msk                (0x3f << 0)
#define RCC_FINDIV32CFGR_FINDIV32                    (0x3f << 0)
#define RCC_FINDIV32CFGR_FINDIV32EN_Pos              6
#define RCC_FINDIV32CFGR_FINDIV32EN_Msk              (0x1 << 6)
#define RCC_FINDIV32CFGR_FINDIV32EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV33CFGR register */
#define RCC_FINDIV33CFGR_FINDIV33_Pos                0
#define RCC_FINDIV33CFGR_FINDIV33_Msk                (0x3f << 0)
#define RCC_FINDIV33CFGR_FINDIV33                    (0x3f << 0)
#define RCC_FINDIV33CFGR_FINDIV33EN_Pos              6
#define RCC_FINDIV33CFGR_FINDIV33EN_Msk              (0x1 << 6)
#define RCC_FINDIV33CFGR_FINDIV33EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV34CFGR register */
#define RCC_FINDIV34CFGR_FINDIV34_Pos                0
#define RCC_FINDIV34CFGR_FINDIV34_Msk                (0x3f << 0)
#define RCC_FINDIV34CFGR_FINDIV34                    (0x3f << 0)
#define RCC_FINDIV34CFGR_FINDIV34EN_Pos              6
#define RCC_FINDIV34CFGR_FINDIV34EN_Msk              (0x1 << 6)
#define RCC_FINDIV34CFGR_FINDIV34EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV35CFGR register */
#define RCC_FINDIV35CFGR_FINDIV35_Pos                0
#define RCC_FINDIV35CFGR_FINDIV35_Msk                (0x3f << 0)
#define RCC_FINDIV35CFGR_FINDIV35                    (0x3f << 0)
#define RCC_FINDIV35CFGR_FINDIV35EN_Pos              6
#define RCC_FINDIV35CFGR_FINDIV35EN_Msk              (0x1 << 6)
#define RCC_FINDIV35CFGR_FINDIV35EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV36CFGR register */
#define RCC_FINDIV36CFGR_FINDIV36_Pos                0
#define RCC_FINDIV36CFGR_FINDIV36_Msk                (0x3f << 0)
#define RCC_FINDIV36CFGR_FINDIV36                    (0x3f << 0)
#define RCC_FINDIV36CFGR_FINDIV36EN_Pos              6
#define RCC_FINDIV36CFGR_FINDIV36EN_Msk              (0x1 << 6)
#define RCC_FINDIV36CFGR_FINDIV36EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV37CFGR register */
#define RCC_FINDIV37CFGR_FINDIV37_Pos                0
#define RCC_FINDIV37CFGR_FINDIV37_Msk                (0x3f << 0)
#define RCC_FINDIV37CFGR_FINDIV37                    (0x3f << 0)
#define RCC_FINDIV37CFGR_FINDIV37EN_Pos              6
#define RCC_FINDIV37CFGR_FINDIV37EN_Msk              (0x1 << 6)
#define RCC_FINDIV37CFGR_FINDIV37EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV38CFGR register */
#define RCC_FINDIV38CFGR_FINDIV38_Pos                0
#define RCC_FINDIV38CFGR_FINDIV38_Msk                (0x3f << 0)
#define RCC_FINDIV38CFGR_FINDIV38                    (0x3f << 0)
#define RCC_FINDIV38CFGR_FINDIV38EN_Pos              6
#define RCC_FINDIV38CFGR_FINDIV38EN_Msk              (0x1 << 6)
#define RCC_FINDIV38CFGR_FINDIV38EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV39CFGR register */
#define RCC_FINDIV39CFGR_FINDIV39_Pos                0
#define RCC_FINDIV39CFGR_FINDIV39_Msk                (0x3f << 0)
#define RCC_FINDIV39CFGR_FINDIV39                    (0x3f << 0)
#define RCC_FINDIV39CFGR_FINDIV39EN_Pos              6
#define RCC_FINDIV39CFGR_FINDIV39EN_Msk              (0x1 << 6)
#define RCC_FINDIV39CFGR_FINDIV39EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV40CFGR register */
#define RCC_FINDIV40CFGR_FINDIV40_Pos                0
#define RCC_FINDIV40CFGR_FINDIV40_Msk                (0x3f << 0)
#define RCC_FINDIV40CFGR_FINDIV40                    (0x3f << 0)
#define RCC_FINDIV40CFGR_FINDIV40EN_Pos              6
#define RCC_FINDIV40CFGR_FINDIV40EN_Msk              (0x1 << 6)
#define RCC_FINDIV40CFGR_FINDIV40EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV41CFGR register */
#define RCC_FINDIV41CFGR_FINDIV41_Pos                0
#define RCC_FINDIV41CFGR_FINDIV41_Msk                (0x3f << 0)
#define RCC_FINDIV41CFGR_FINDIV41                    (0x3f << 0)
#define RCC_FINDIV41CFGR_FINDIV41EN_Pos              6
#define RCC_FINDIV41CFGR_FINDIV41EN_Msk              (0x1 << 6)
#define RCC_FINDIV41CFGR_FINDIV41EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV42CFGR register */
#define RCC_FINDIV42CFGR_FINDIV42_Pos                0
#define RCC_FINDIV42CFGR_FINDIV42_Msk                (0x3f << 0)
#define RCC_FINDIV42CFGR_FINDIV42                    (0x3f << 0)
#define RCC_FINDIV42CFGR_FINDIV42EN_Pos              6
#define RCC_FINDIV42CFGR_FINDIV42EN_Msk              (0x1 << 6)
#define RCC_FINDIV42CFGR_FINDIV42EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV43CFGR register */
#define RCC_FINDIV43CFGR_FINDIV43_Pos                0
#define RCC_FINDIV43CFGR_FINDIV43_Msk                (0x3f << 0)
#define RCC_FINDIV43CFGR_FINDIV43                    (0x3f << 0)
#define RCC_FINDIV43CFGR_FINDIV43EN_Pos              6
#define RCC_FINDIV43CFGR_FINDIV43EN_Msk              (0x1 << 6)
#define RCC_FINDIV43CFGR_FINDIV43EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV44CFGR register */
#define RCC_FINDIV44CFGR_FINDIV44_Pos                0
#define RCC_FINDIV44CFGR_FINDIV44_Msk                (0x3f << 0)
#define RCC_FINDIV44CFGR_FINDIV44                    (0x3f << 0)
#define RCC_FINDIV44CFGR_FINDIV44EN_Pos              6
#define RCC_FINDIV44CFGR_FINDIV44EN_Msk              (0x1 << 6)
#define RCC_FINDIV44CFGR_FINDIV44EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV45CFGR register */
#define RCC_FINDIV45CFGR_FINDIV45_Pos                0
#define RCC_FINDIV45CFGR_FINDIV45_Msk                (0x3f << 0)
#define RCC_FINDIV45CFGR_FINDIV45                    (0x3f << 0)
#define RCC_FINDIV45CFGR_FINDIV45EN_Pos              6
#define RCC_FINDIV45CFGR_FINDIV45EN_Msk              (0x1 << 6)
#define RCC_FINDIV45CFGR_FINDIV45EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV46CFGR register */
#define RCC_FINDIV46CFGR_FINDIV46_Pos                0
#define RCC_FINDIV46CFGR_FINDIV46_Msk                (0x3f << 0)
#define RCC_FINDIV46CFGR_FINDIV46                    (0x3f << 0)
#define RCC_FINDIV46CFGR_FINDIV46EN_Pos              6
#define RCC_FINDIV46CFGR_FINDIV46EN_Msk              (0x1 << 6)
#define RCC_FINDIV46CFGR_FINDIV46EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV47CFGR register */
#define RCC_FINDIV47CFGR_FINDIV47_Pos                0
#define RCC_FINDIV47CFGR_FINDIV47_Msk                (0x3f << 0)
#define RCC_FINDIV47CFGR_FINDIV47                    (0x3f << 0)
#define RCC_FINDIV47CFGR_FINDIV47EN_Pos              6
#define RCC_FINDIV47CFGR_FINDIV47EN_Msk              (0x1 << 6)
#define RCC_FINDIV47CFGR_FINDIV47EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV48CFGR register */
#define RCC_FINDIV48CFGR_FINDIV48_Pos                0
#define RCC_FINDIV48CFGR_FINDIV48_Msk                (0x3f << 0)
#define RCC_FINDIV48CFGR_FINDIV48                    (0x3f << 0)
#define RCC_FINDIV48CFGR_FINDIV48EN_Pos              6
#define RCC_FINDIV48CFGR_FINDIV48EN_Msk              (0x1 << 6)
#define RCC_FINDIV48CFGR_FINDIV48EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV49CFGR register */
#define RCC_FINDIV49CFGR_FINDIV49_Pos                0
#define RCC_FINDIV49CFGR_FINDIV49_Msk                (0x3f << 0)
#define RCC_FINDIV49CFGR_FINDIV49                    (0x3f << 0)
#define RCC_FINDIV49CFGR_FINDIV49EN_Pos              6
#define RCC_FINDIV49CFGR_FINDIV49EN_Msk              (0x1 << 6)
#define RCC_FINDIV49CFGR_FINDIV49EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV50CFGR register */
#define RCC_FINDIV50CFGR_FINDIV50_Pos                0
#define RCC_FINDIV50CFGR_FINDIV50_Msk                (0x3f << 0)
#define RCC_FINDIV50CFGR_FINDIV50                    (0x3f << 0)
#define RCC_FINDIV50CFGR_FINDIV50EN_Pos              6
#define RCC_FINDIV50CFGR_FINDIV50EN_Msk              (0x1 << 6)
#define RCC_FINDIV50CFGR_FINDIV50EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV51CFGR register */
#define RCC_FINDIV51CFGR_FINDIV51_Pos                0
#define RCC_FINDIV51CFGR_FINDIV51_Msk                (0x3f << 0)
#define RCC_FINDIV51CFGR_FINDIV51                    (0x3f << 0)
#define RCC_FINDIV51CFGR_FINDIV51EN_Pos              6
#define RCC_FINDIV51CFGR_FINDIV51EN_Msk              (0x1 << 6)
#define RCC_FINDIV51CFGR_FINDIV51EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV52CFGR register */
#define RCC_FINDIV52CFGR_FINDIV52_Pos                0
#define RCC_FINDIV52CFGR_FINDIV52_Msk                (0x3f << 0)
#define RCC_FINDIV52CFGR_FINDIV52                    (0x3f << 0)
#define RCC_FINDIV52CFGR_FINDIV52EN_Pos              6
#define RCC_FINDIV52CFGR_FINDIV52EN_Msk              (0x1 << 6)
#define RCC_FINDIV52CFGR_FINDIV52EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV53CFGR register */
#define RCC_FINDIV53CFGR_FINDIV53_Pos                0
#define RCC_FINDIV53CFGR_FINDIV53_Msk                (0x3f << 0)
#define RCC_FINDIV53CFGR_FINDIV53                    (0x3f << 0)
#define RCC_FINDIV53CFGR_FINDIV53EN_Pos              6
#define RCC_FINDIV53CFGR_FINDIV53EN_Msk              (0x1 << 6)
#define RCC_FINDIV53CFGR_FINDIV53EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV54CFGR register */
#define RCC_FINDIV54CFGR_FINDIV54_Pos                0
#define RCC_FINDIV54CFGR_FINDIV54_Msk                (0x3f << 0)
#define RCC_FINDIV54CFGR_FINDIV54                    (0x3f << 0)
#define RCC_FINDIV54CFGR_FINDIV54EN_Pos              6
#define RCC_FINDIV54CFGR_FINDIV54EN_Msk              (0x1 << 6)
#define RCC_FINDIV54CFGR_FINDIV54EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV55CFGR register */
#define RCC_FINDIV55CFGR_FINDIV55_Pos                0
#define RCC_FINDIV55CFGR_FINDIV55_Msk                (0x3f << 0)
#define RCC_FINDIV55CFGR_FINDIV55                    (0x3f << 0)
#define RCC_FINDIV55CFGR_FINDIV55EN_Pos              6
#define RCC_FINDIV55CFGR_FINDIV55EN_Msk              (0x1 << 6)
#define RCC_FINDIV55CFGR_FINDIV55EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV56CFGR register */
#define RCC_FINDIV56CFGR_FINDIV56_Pos                0
#define RCC_FINDIV56CFGR_FINDIV56_Msk                (0x3f << 0)
#define RCC_FINDIV56CFGR_FINDIV56                    (0x3f << 0)
#define RCC_FINDIV56CFGR_FINDIV56EN_Pos              6
#define RCC_FINDIV56CFGR_FINDIV56EN_Msk              (0x1 << 6)
#define RCC_FINDIV56CFGR_FINDIV56EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV57CFGR register */
#define RCC_FINDIV57CFGR_FINDIV57_Pos                0
#define RCC_FINDIV57CFGR_FINDIV57_Msk                (0x3f << 0)
#define RCC_FINDIV57CFGR_FINDIV57                    (0x3f << 0)
#define RCC_FINDIV57CFGR_FINDIV57EN_Pos              6
#define RCC_FINDIV57CFGR_FINDIV57EN_Msk              (0x1 << 6)
#define RCC_FINDIV57CFGR_FINDIV57EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV58CFGR register */
#define RCC_FINDIV58CFGR_FINDIV58_Pos                0
#define RCC_FINDIV58CFGR_FINDIV58_Msk                (0x3f << 0)
#define RCC_FINDIV58CFGR_FINDIV58                    (0x3f << 0)
#define RCC_FINDIV58CFGR_FINDIV58EN_Pos              6
#define RCC_FINDIV58CFGR_FINDIV58EN_Msk              (0x1 << 6)
#define RCC_FINDIV58CFGR_FINDIV58EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV59CFGR register */
#define RCC_FINDIV59CFGR_FINDIV59_Pos                0
#define RCC_FINDIV59CFGR_FINDIV59_Msk                (0x3f << 0)
#define RCC_FINDIV59CFGR_FINDIV59                    (0x3f << 0)
#define RCC_FINDIV59CFGR_FINDIV59EN_Pos              6
#define RCC_FINDIV59CFGR_FINDIV59EN_Msk              (0x1 << 6)
#define RCC_FINDIV59CFGR_FINDIV59EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV60CFGR register */
#define RCC_FINDIV60CFGR_FINDIV60_Pos                0
#define RCC_FINDIV60CFGR_FINDIV60_Msk                (0x3f << 0)
#define RCC_FINDIV60CFGR_FINDIV60                    (0x3f << 0)
#define RCC_FINDIV60CFGR_FINDIV60EN_Pos              6
#define RCC_FINDIV60CFGR_FINDIV60EN_Msk              (0x1 << 6)
#define RCC_FINDIV60CFGR_FINDIV60EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV61CFGR register */
#define RCC_FINDIV61CFGR_FINDIV61_Pos                0
#define RCC_FINDIV61CFGR_FINDIV61_Msk                (0x3f << 0)
#define RCC_FINDIV61CFGR_FINDIV61                    (0x3f << 0)
#define RCC_FINDIV61CFGR_FINDIV61EN_Pos              6
#define RCC_FINDIV61CFGR_FINDIV61EN_Msk              (0x1 << 6)
#define RCC_FINDIV61CFGR_FINDIV61EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV62CFGR register */
#define RCC_FINDIV62CFGR_FINDIV62_Pos                0
#define RCC_FINDIV62CFGR_FINDIV62_Msk                (0x3f << 0)
#define RCC_FINDIV62CFGR_FINDIV62                    (0x3f << 0)
#define RCC_FINDIV62CFGR_FINDIV62EN_Pos              6
#define RCC_FINDIV62CFGR_FINDIV62EN_Msk              (0x1 << 6)
#define RCC_FINDIV62CFGR_FINDIV62EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIV63CFGR register */
#define RCC_FINDIV63CFGR_FINDIV63_Pos                0
#define RCC_FINDIV63CFGR_FINDIV63_Msk                (0x3f << 0)
#define RCC_FINDIV63CFGR_FINDIV63                    (0x3f << 0)
#define RCC_FINDIV63CFGR_FINDIV63EN_Pos              6
#define RCC_FINDIV63CFGR_FINDIV63EN_Msk              (0x1 << 6)
#define RCC_FINDIV63CFGR_FINDIV63EN                  (0x1 << 6)

/* Bit fields for RCC_FINDIVSR1 register */
#define RCC_FINDIVSR1_FINDIVSTS_Pos                  0
#define RCC_FINDIVSR1_FINDIVSTS_Msk                  (0xFFFFFFFF << 0)
#define RCC_FINDIVSR1_FINDIVSTS                      (0xFFFFFFFF << 0)

/* Bit fields for RCC_FINDIVSR2 register */
#define RCC_FINDIVSR2_FINDIVSTS_Pos                  0
#define RCC_FINDIVSR2_FINDIVSTS_Msk                  (0xFFFFFFFF << 0)
#define RCC_FINDIVSR2_FINDIVSTS                      (0xFFFFFFFF << 0)

/* Bit fields for RCC_FCALCOBS0CFGR register */
#define RCC_FCALCOBS0CFGR_CKINTSEL_Pos               0
#define RCC_FCALCOBS0CFGR_CKINTSEL_Msk               (0xff << 0)
#define RCC_FCALCOBS0CFGR_CKINTSEL                   (0xff << 0)
#define RCC_FCALCOBS0CFGR_CKEXTSEL_Pos               8
#define RCC_FCALCOBS0CFGR_CKEXTSEL_Msk               (0x7 << 8)
#define RCC_FCALCOBS0CFGR_CKEXTSEL                   (0x7 << 8)
#define RCC_FCALCOBS0CFGR_FCALCCKEXTSEL_Pos          15
#define RCC_FCALCOBS0CFGR_FCALCCKEXTSEL_Msk          (0x1 << 15)
#define RCC_FCALCOBS0CFGR_FCALCCKEXTSEL              (0x1 << 15)
#define RCC_FCALCOBS0CFGR_CKOBSEXTSEL_Pos            16
#define RCC_FCALCOBS0CFGR_CKOBSEXTSEL_Msk            (0x1 << 16)
#define RCC_FCALCOBS0CFGR_CKOBSEXTSEL                (0x1 << 16)
#define RCC_FCALCOBS0CFGR_FCALCCKINV_Pos             17
#define RCC_FCALCOBS0CFGR_FCALCCKINV_Msk             (0x1 << 17)
#define RCC_FCALCOBS0CFGR_FCALCCKINV                 (0x1 << 17)
#define RCC_FCALCOBS0CFGR_CKOBSINV_Pos               18
#define RCC_FCALCOBS0CFGR_CKOBSINV_Msk               (0x1 << 18)
#define RCC_FCALCOBS0CFGR_CKOBSINV                   (0x1 << 18)
#define RCC_FCALCOBS0CFGR_CKOBSDIV_Pos               22
#define RCC_FCALCOBS0CFGR_CKOBSDIV_Msk               (0x7 << 22)
#define RCC_FCALCOBS0CFGR_CKOBSDIV                   (0x7 << 22)
#define RCC_FCALCOBS0CFGR_FCALCCKEN_Pos              25
#define RCC_FCALCOBS0CFGR_FCALCCKEN_Msk              (0x1 << 25)
#define RCC_FCALCOBS0CFGR_FCALCCKEN                  (0x1 << 25)
#define RCC_FCALCOBS0CFGR_CKOBSEN_Pos                26
#define RCC_FCALCOBS0CFGR_CKOBSEN_Msk                (0x1 << 26)
#define RCC_FCALCOBS0CFGR_CKOBSEN                    (0x1 << 26)

/* Bit fields for RCC_FCALCOBS1CFGR register */
#define RCC_FCALCOBS1CFGR_CKINTSEL_Pos               0
#define RCC_FCALCOBS1CFGR_CKINTSEL_Msk               (0xff << 0)
#define RCC_FCALCOBS1CFGR_CKINTSEL                   (0xff << 0)
#define RCC_FCALCOBS1CFGR_CKEXTSEL_Pos               8
#define RCC_FCALCOBS1CFGR_CKEXTSEL_Msk               (0x7 << 8)
#define RCC_FCALCOBS1CFGR_CKEXTSEL                   (0x7 << 8)
#define RCC_FCALCOBS1CFGR_CKOBSEXTSEL_Pos            16
#define RCC_FCALCOBS1CFGR_CKOBSEXTSEL_Msk            (0x1 << 16)
#define RCC_FCALCOBS1CFGR_CKOBSEXTSEL                (0x1 << 16)
#define RCC_FCALCOBS1CFGR_CKOBSINV_Pos               18
#define RCC_FCALCOBS1CFGR_CKOBSINV_Msk               (0x1 << 18)
#define RCC_FCALCOBS1CFGR_CKOBSINV                   (0x1 << 18)
#define RCC_FCALCOBS1CFGR_CKOBSDIV_Pos               22
#define RCC_FCALCOBS1CFGR_CKOBSDIV_Msk               (0x7 << 22)
#define RCC_FCALCOBS1CFGR_CKOBSDIV                   (0x7 << 22)
#define RCC_FCALCOBS1CFGR_CKOBSEN_Pos                26
#define RCC_FCALCOBS1CFGR_CKOBSEN_Msk                (0x1 << 26)
#define RCC_FCALCOBS1CFGR_CKOBSEN                    (0x1 << 26)
#define RCC_FCALCOBS1CFGR_FCALCRSTN_Pos              27
#define RCC_FCALCOBS1CFGR_FCALCRSTN_Msk              (0x1 << 27)
#define RCC_FCALCOBS1CFGR_FCALCRSTN                  (0x1 << 27)

/* Bit fields for RCC_FCALCREFCFGR register */
#define RCC_FCALCREFCFGR_FCALCREFCKSEL_Pos           0
#define RCC_FCALCREFCFGR_FCALCREFCKSEL_Msk           (0x7 << 0)
#define RCC_FCALCREFCFGR_FCALCREFCKSEL               (0x7 << 0)

/* Bit fields for RCC_FCALCCR1 register */
#define RCC_FCALCCR1_FCALCRUN_Pos                    0
#define RCC_FCALCCR1_FCALCRUN_Msk                    (0x1 << 0)
#define RCC_FCALCCR1_FCALCRUN                        (0x1 << 0)

/* Bit fields for RCC_FCALCCR2 register */
#define RCC_FCALCCR2_FCALCMD_Pos                     3
#define RCC_FCALCCR2_FCALCMD_Msk                     (0x3 << 3)
#define RCC_FCALCCR2_FCALCMD                         (0x3 << 3)
#define RCC_FCALCCR2_FCALCTWC_Pos                    11
#define RCC_FCALCCR2_FCALCTWC_Msk                    (0xf << 11)
#define RCC_FCALCCR2_FCALCTWC                        (0xf << 11)
#define RCC_FCALCCR2_FCALCTYP_Pos                    17
#define RCC_FCALCCR2_FCALCTYP_Msk                    (0x1f << 17)
#define RCC_FCALCCR2_FCALCTYP                        (0x1f << 17)

/* Bit fields for RCC_FCALCSR register */
#define RCC_FCALCSR_FVAL_Pos                         0
#define RCC_FCALCSR_FVAL_Msk                         (0x1ffff << 0)
#define RCC_FCALCSR_FVAL                             (0x1ffff << 0)
#define RCC_FCALCSR_FCALCSTS_Pos                     19
#define RCC_FCALCSR_FCALCSTS_Msk                     (0x1 << 19)
#define RCC_FCALCSR_FCALCSTS                         (0x1 << 19)

/* Bit fields for RCC_PLL4CFGR1 register */
#define RCC_PLL4CFGR1_SSMODRST_Pos                   0
#define RCC_PLL4CFGR1_SSMODRST_Msk                   (0x1 << 0)
#define RCC_PLL4CFGR1_SSMODRST                       (0x1 << 0)
#define RCC_PLL4CFGR1_PLLEN_Pos                      8
#define RCC_PLL4CFGR1_PLLEN_Msk                      (0x1 << 8)
#define RCC_PLL4CFGR1_PLLEN                          (0x1 << 8)
#define RCC_PLL4CFGR1_PLLRDY_Pos                     24
#define RCC_PLL4CFGR1_PLLRDY_Msk                     (0x1 << 24)
#define RCC_PLL4CFGR1_PLLRDY                         (0x1 << 24)
#define RCC_PLL4CFGR1_CKREFST_Pos                    28
#define RCC_PLL4CFGR1_CKREFST_Msk                    (0x1 << 28)
#define RCC_PLL4CFGR1_CKREFST                        (0x1 << 28)

/* Bit fields for RCC_PLL4CFGR2 register */
#define RCC_PLL4CFGR2_FREFDIV_Pos                    0
#define RCC_PLL4CFGR2_FREFDIV_Msk                    (0x3f << 0)
#define RCC_PLL4CFGR2_FREFDIV                        (0x3f << 0)
#define RCC_PLL4CFGR2_FBDIV_Pos                      16
#define RCC_PLL4CFGR2_FBDIV_Msk                      (0xfff << 16)
#define RCC_PLL4CFGR2_FBDIV                          (0xfff << 16)

/* Bit fields for RCC_PLL4CFGR3 register */
#define RCC_PLL4CFGR3_FRACIN_Pos                     0
#define RCC_PLL4CFGR3_FRACIN_Msk                     (0xffffff << 0)
#define RCC_PLL4CFGR3_FRACIN                         (0xffffff << 0)
#define RCC_PLL4CFGR3_DOWNSPREAD_Pos                 24
#define RCC_PLL4CFGR3_DOWNSPREAD_Msk                 (0x1 << 24)
#define RCC_PLL4CFGR3_DOWNSPREAD                     (0x1 << 24)
#define RCC_PLL4CFGR3_DACEN_Pos                      25
#define RCC_PLL4CFGR3_DACEN_Msk                      (0x1 << 25)
#define RCC_PLL4CFGR3_DACEN                          (0x1 << 25)
#define RCC_PLL4CFGR3_SSCGDIS_Pos                    26
#define RCC_PLL4CFGR3_SSCGDIS_Msk                    (0x1 << 26)
#define RCC_PLL4CFGR3_SSCGDIS                        (0x1 << 26)

/* Bit fields for RCC_PLL4CFGR4 register */
#define RCC_PLL4CFGR4_DSMEN_Pos                      8
#define RCC_PLL4CFGR4_DSMEN_Msk                      (0x1 << 8)
#define RCC_PLL4CFGR4_DSMEN                          (0x1 << 8)
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN_Pos              9
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN_Msk              (0x1 << 9)
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN                  (0x1 << 9)
#define RCC_PLL4CFGR4_BYPASS_Pos                     10
#define RCC_PLL4CFGR4_BYPASS_Msk                     (0x1 << 10)
#define RCC_PLL4CFGR4_BYPASS                         (0x1 << 10)

/* Bit fields for RCC_PLL4CFGR5 register */
#define RCC_PLL4CFGR5_DIVVAL_Pos                     0
#define RCC_PLL4CFGR5_DIVVAL_Msk                     (0xf << 0)
#define RCC_PLL4CFGR5_DIVVAL                         (0xf << 0)
#define RCC_PLL4CFGR5_SPREAD_Pos                     16
#define RCC_PLL4CFGR5_SPREAD_Msk                     (0x1f << 16)
#define RCC_PLL4CFGR5_SPREAD                         (0x1f << 16)

/* Bit fields for RCC_PLL4CFGR6 register */
#define RCC_PLL4CFGR6_POSTDIV1_Pos                   0
#define RCC_PLL4CFGR6_POSTDIV1_Msk                   (0x7 << 0)
#define RCC_PLL4CFGR6_POSTDIV1                       (0x7 << 0)

/* Bit fields for RCC_PLL4CFGR7 register */
#define RCC_PLL4CFGR7_POSTDIV2_Pos                   0
#define RCC_PLL4CFGR7_POSTDIV2_Msk                   (0x7 << 0)
#define RCC_PLL4CFGR7_POSTDIV2                       (0x7 << 0)

/* Bit fields for RCC_PLL5CFGR1 register */
#define RCC_PLL5CFGR1_SSMODRST_Pos                   0
#define RCC_PLL5CFGR1_SSMODRST_Msk                   (0x1 << 0)
#define RCC_PLL5CFGR1_SSMODRST                       (0x1 << 0)
#define RCC_PLL5CFGR1_PLLEN_Pos                      8
#define RCC_PLL5CFGR1_PLLEN_Msk                      (0x1 << 8)
#define RCC_PLL5CFGR1_PLLEN                          (0x1 << 8)
#define RCC_PLL5CFGR1_PLLRDY_Pos                     24
#define RCC_PLL5CFGR1_PLLRDY_Msk                     (0x1 << 24)
#define RCC_PLL5CFGR1_PLLRDY                         (0x1 << 24)
#define RCC_PLL5CFGR1_CKREFST_Pos                    28
#define RCC_PLL5CFGR1_CKREFST_Msk                    (0x1 << 28)
#define RCC_PLL5CFGR1_CKREFST                        (0x1 << 28)

/* Bit fields for RCC_PLL5CFGR2 register */
#define RCC_PLL5CFGR2_FREFDIV_Pos                    0
#define RCC_PLL5CFGR2_FREFDIV_Msk                    (0x3f << 0)
#define RCC_PLL5CFGR2_FREFDIV                        (0x3f << 0)
#define RCC_PLL5CFGR2_FBDIV_Pos                      16
#define RCC_PLL5CFGR2_FBDIV_Msk                      (0xfff << 16)
#define RCC_PLL5CFGR2_FBDIV                          (0xfff << 16)

/* Bit fields for RCC_PLL5CFGR3 register */
#define RCC_PLL5CFGR3_FRACIN_Pos                     0
#define RCC_PLL5CFGR3_FRACIN_Msk                     (0xffffff << 0)
#define RCC_PLL5CFGR3_FRACIN                         (0xffffff << 0)
#define RCC_PLL5CFGR3_DOWNSPREAD_Pos                 24
#define RCC_PLL5CFGR3_DOWNSPREAD_Msk                 (0x1 << 24)
#define RCC_PLL5CFGR3_DOWNSPREAD                     (0x1 << 24)
#define RCC_PLL5CFGR3_DACEN_Pos                      25
#define RCC_PLL5CFGR3_DACEN_Msk                      (0x1 << 25)
#define RCC_PLL5CFGR3_DACEN                          (0x1 << 25)
#define RCC_PLL5CFGR3_SSCGDIS_Pos                    26
#define RCC_PLL5CFGR3_SSCGDIS_Msk                    (0x1 << 26)
#define RCC_PLL5CFGR3_SSCGDIS                        (0x1 << 26)

/* Bit fields for RCC_PLL5CFGR4 register */
#define RCC_PLL5CFGR4_DSMEN_Pos                      8
#define RCC_PLL5CFGR4_DSMEN_Msk                      (0x1 << 8)
#define RCC_PLL5CFGR4_DSMEN                          (0x1 << 8)
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN_Pos              9
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN_Msk              (0x1 << 9)
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN                  (0x1 << 9)
#define RCC_PLL5CFGR4_BYPASS_Pos                     10
#define RCC_PLL5CFGR4_BYPASS_Msk                     (0x1 << 10)
#define RCC_PLL5CFGR4_BYPASS                         (0x1 << 10)

/* Bit fields for RCC_PLL5CFGR5 register */
#define RCC_PLL5CFGR5_DIVVAL_Pos                     0
#define RCC_PLL5CFGR5_DIVVAL_Msk                     (0xf << 0)
#define RCC_PLL5CFGR5_DIVVAL                         (0xf << 0)
#define RCC_PLL5CFGR5_SPREAD_Pos                     16
#define RCC_PLL5CFGR5_SPREAD_Msk                     (0x1f << 16)
#define RCC_PLL5CFGR5_SPREAD                         (0x1f << 16)

/* Bit fields for RCC_PLL5CFGR6 register */
#define RCC_PLL5CFGR6_POSTDIV1_Pos                   0
#define RCC_PLL5CFGR6_POSTDIV1_Msk                   (0x7 << 0)
#define RCC_PLL5CFGR6_POSTDIV1                       (0x7 << 0)

/* Bit fields for RCC_PLL5CFGR7 register */
#define RCC_PLL5CFGR7_POSTDIV2_Pos                   0
#define RCC_PLL5CFGR7_POSTDIV2_Msk                   (0x7 << 0)
#define RCC_PLL5CFGR7_POSTDIV2                       (0x7 << 0)

/* Bit fields for RCC_PLL6CFGR1 register */
#define RCC_PLL6CFGR1_SSMODRST_Pos                   0
#define RCC_PLL6CFGR1_SSMODRST_Msk                   (0x1 << 0)
#define RCC_PLL6CFGR1_SSMODRST                       (0x1 << 0)
#define RCC_PLL6CFGR1_PLLEN_Pos                      8
#define RCC_PLL6CFGR1_PLLEN_Msk                      (0x1 << 8)
#define RCC_PLL6CFGR1_PLLEN                          (0x1 << 8)
#define RCC_PLL6CFGR1_PLLRDY_Pos                     24
#define RCC_PLL6CFGR1_PLLRDY_Msk                     (0x1 << 24)
#define RCC_PLL6CFGR1_PLLRDY                         (0x1 << 24)
#define RCC_PLL6CFGR1_CKREFST_Pos                    28
#define RCC_PLL6CFGR1_CKREFST_Msk                    (0x1 << 28)
#define RCC_PLL6CFGR1_CKREFST                        (0x1 << 28)

/* Bit fields for RCC_PLL6CFGR2 register */
#define RCC_PLL6CFGR2_FREFDIV_Pos                    0
#define RCC_PLL6CFGR2_FREFDIV_Msk                    (0x3f << 0)
#define RCC_PLL6CFGR2_FREFDIV                        (0x3f << 0)
#define RCC_PLL6CFGR2_FBDIV_Pos                      16
#define RCC_PLL6CFGR2_FBDIV_Msk                      (0xfff << 16)
#define RCC_PLL6CFGR2_FBDIV                          (0xfff << 16)

/* Bit fields for RCC_PLL6CFGR3 register */
#define RCC_PLL6CFGR3_FRACIN_Pos                     0
#define RCC_PLL6CFGR3_FRACIN_Msk                     (0xffffff << 0)
#define RCC_PLL6CFGR3_FRACIN                         (0xffffff << 0)
#define RCC_PLL6CFGR3_DOWNSPREAD_Pos                 24
#define RCC_PLL6CFGR3_DOWNSPREAD_Msk                 (0x1 << 24)
#define RCC_PLL6CFGR3_DOWNSPREAD                     (0x1 << 24)
#define RCC_PLL6CFGR3_DACEN_Pos                      25
#define RCC_PLL6CFGR3_DACEN_Msk                      (0x1 << 25)
#define RCC_PLL6CFGR3_DACEN                          (0x1 << 25)
#define RCC_PLL6CFGR3_SSCGDIS_Pos                    26
#define RCC_PLL6CFGR3_SSCGDIS_Msk                    (0x1 << 26)
#define RCC_PLL6CFGR3_SSCGDIS                        (0x1 << 26)

/* Bit fields for RCC_PLL6CFGR4 register */
#define RCC_PLL6CFGR4_DSMEN_Pos                      8
#define RCC_PLL6CFGR4_DSMEN_Msk                      (0x1 << 8)
#define RCC_PLL6CFGR4_DSMEN                          (0x1 << 8)
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN_Pos              9
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN_Msk              (0x1 << 9)
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN                  (0x1 << 9)
#define RCC_PLL6CFGR4_BYPASS_Pos                     10
#define RCC_PLL6CFGR4_BYPASS_Msk                     (0x1 << 10)
#define RCC_PLL6CFGR4_BYPASS                         (0x1 << 10)

/* Bit fields for RCC_PLL6CFGR5 register */
#define RCC_PLL6CFGR5_DIVVAL_Pos                     0
#define RCC_PLL6CFGR5_DIVVAL_Msk                     (0xf << 0)
#define RCC_PLL6CFGR5_DIVVAL                         (0xf << 0)
#define RCC_PLL6CFGR5_SPREAD_Pos                     16
#define RCC_PLL6CFGR5_SPREAD_Msk                     (0x1f << 16)
#define RCC_PLL6CFGR5_SPREAD                         (0x1f << 16)

/* Bit fields for RCC_PLL6CFGR6 register */
#define RCC_PLL6CFGR6_POSTDIV1_Pos                   0
#define RCC_PLL6CFGR6_POSTDIV1_Msk                   (0x7 << 0)
#define RCC_PLL6CFGR6_POSTDIV1                       (0x7 << 0)

/* Bit fields for RCC_PLL6CFGR7 register */
#define RCC_PLL6CFGR7_POSTDIV2_Pos                   0
#define RCC_PLL6CFGR7_POSTDIV2_Msk                   (0x7 << 0)
#define RCC_PLL6CFGR7_POSTDIV2                       (0x7 << 0)

/* Bit fields for RCC_PLL7CFGR1 register */
#define RCC_PLL7CFGR1_SSMODRST_Pos                   0
#define RCC_PLL7CFGR1_SSMODRST_Msk                   (0x1 << 0)
#define RCC_PLL7CFGR1_SSMODRST                       (0x1 << 0)
#define RCC_PLL7CFGR1_PLLEN_Pos                      8
#define RCC_PLL7CFGR1_PLLEN_Msk                      (0x1 << 8)
#define RCC_PLL7CFGR1_PLLEN                          (0x1 << 8)
#define RCC_PLL7CFGR1_PLLRDY_Pos                     24
#define RCC_PLL7CFGR1_PLLRDY_Msk                     (0x1 << 24)
#define RCC_PLL7CFGR1_PLLRDY                         (0x1 << 24)
#define RCC_PLL7CFGR1_CKREFST_Pos                    28
#define RCC_PLL7CFGR1_CKREFST_Msk                    (0x1 << 28)
#define RCC_PLL7CFGR1_CKREFST                        (0x1 << 28)

/* Bit fields for RCC_PLL7CFGR2 register */
#define RCC_PLL7CFGR2_FREFDIV_Pos                    0
#define RCC_PLL7CFGR2_FREFDIV_Msk                    (0x3f << 0)
#define RCC_PLL7CFGR2_FREFDIV                        (0x3f << 0)
#define RCC_PLL7CFGR2_FBDIV_Pos                      16
#define RCC_PLL7CFGR2_FBDIV_Msk                      (0xfff << 16)
#define RCC_PLL7CFGR2_FBDIV                          (0xfff << 16)

/* Bit fields for RCC_PLL7CFGR3 register */
#define RCC_PLL7CFGR3_FRACIN_Pos                     0
#define RCC_PLL7CFGR3_FRACIN_Msk                     (0xffffff << 0)
#define RCC_PLL7CFGR3_FRACIN                         (0xffffff << 0)
#define RCC_PLL7CFGR3_DOWNSPREAD_Pos                 24
#define RCC_PLL7CFGR3_DOWNSPREAD_Msk                 (0x1 << 24)
#define RCC_PLL7CFGR3_DOWNSPREAD                     (0x1 << 24)
#define RCC_PLL7CFGR3_DACEN_Pos                      25
#define RCC_PLL7CFGR3_DACEN_Msk                      (0x1 << 25)
#define RCC_PLL7CFGR3_DACEN                          (0x1 << 25)
#define RCC_PLL7CFGR3_SSCGDIS_Pos                    26
#define RCC_PLL7CFGR3_SSCGDIS_Msk                    (0x1 << 26)
#define RCC_PLL7CFGR3_SSCGDIS                        (0x1 << 26)

/* Bit fields for RCC_PLL7CFGR4 register */
#define RCC_PLL7CFGR4_DSMEN_Pos                      8
#define RCC_PLL7CFGR4_DSMEN_Msk                      (0x1 << 8)
#define RCC_PLL7CFGR4_DSMEN                          (0x1 << 8)
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN_Pos              9
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN_Msk              (0x1 << 9)
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN                  (0x1 << 9)
#define RCC_PLL7CFGR4_BYPASS_Pos                     10
#define RCC_PLL7CFGR4_BYPASS_Msk                     (0x1 << 10)
#define RCC_PLL7CFGR4_BYPASS                         (0x1 << 10)

/* Bit fields for RCC_PLL7CFGR5 register */
#define RCC_PLL7CFGR5_DIVVAL_Pos                     0
#define RCC_PLL7CFGR5_DIVVAL_Msk                     (0xf << 0)
#define RCC_PLL7CFGR5_DIVVAL                         (0xf << 0)
#define RCC_PLL7CFGR5_SPREAD_Pos                     16
#define RCC_PLL7CFGR5_SPREAD_Msk                     (0x1f << 16)
#define RCC_PLL7CFGR5_SPREAD                         (0x1f << 16)

/* Bit fields for RCC_PLL7CFGR6 register */
#define RCC_PLL7CFGR6_POSTDIV1_Pos                   0
#define RCC_PLL7CFGR6_POSTDIV1_Msk                   (0x7 << 0)
#define RCC_PLL7CFGR6_POSTDIV1                       (0x7 << 0)

/* Bit fields for RCC_PLL7CFGR7 register */
#define RCC_PLL7CFGR7_POSTDIV2_Pos                   0
#define RCC_PLL7CFGR7_POSTDIV2_Msk                   (0x7 << 0)
#define RCC_PLL7CFGR7_POSTDIV2                       (0x7 << 0)

/* Bit fields for RCC_PLL8CFGR1 register */
#define RCC_PLL8CFGR1_SSMODRST_Pos                   0
#define RCC_PLL8CFGR1_SSMODRST_Msk                   (0x1 << 0)
#define RCC_PLL8CFGR1_SSMODRST                       (0x1 << 0)
#define RCC_PLL8CFGR1_PLLEN_Pos                      8
#define RCC_PLL8CFGR1_PLLEN_Msk                      (0x1 << 8)
#define RCC_PLL8CFGR1_PLLEN                          (0x1 << 8)
#define RCC_PLL8CFGR1_PLLRDY_Pos                     24
#define RCC_PLL8CFGR1_PLLRDY_Msk                     (0x1 << 24)
#define RCC_PLL8CFGR1_PLLRDY                         (0x1 << 24)
#define RCC_PLL8CFGR1_CKREFST_Pos                    28
#define RCC_PLL8CFGR1_CKREFST_Msk                    (0x1 << 28)
#define RCC_PLL8CFGR1_CKREFST                        (0x1 << 28)

/* Bit fields for RCC_PLL8CFGR2 register */
#define RCC_PLL8CFGR2_FREFDIV_Pos                    0
#define RCC_PLL8CFGR2_FREFDIV_Msk                    (0x3f << 0)
#define RCC_PLL8CFGR2_FREFDIV                        (0x3f << 0)
#define RCC_PLL8CFGR2_FBDIV_Pos                      16
#define RCC_PLL8CFGR2_FBDIV_Msk                      (0xfff << 16)
#define RCC_PLL8CFGR2_FBDIV                          (0xfff << 16)

/* Bit fields for RCC_PLL8CFGR3 register */
#define RCC_PLL8CFGR3_FRACIN_Pos                     0
#define RCC_PLL8CFGR3_FRACIN_Msk                     (0xffffff << 0)
#define RCC_PLL8CFGR3_FRACIN                         (0xffffff << 0)
#define RCC_PLL8CFGR3_DOWNSPREAD_Pos                 24
#define RCC_PLL8CFGR3_DOWNSPREAD_Msk                 (0x1 << 24)
#define RCC_PLL8CFGR3_DOWNSPREAD                     (0x1 << 24)
#define RCC_PLL8CFGR3_DACEN_Pos                      25
#define RCC_PLL8CFGR3_DACEN_Msk                      (0x1 << 25)
#define RCC_PLL8CFGR3_DACEN                          (0x1 << 25)
#define RCC_PLL8CFGR3_SSCGDIS_Pos                    26
#define RCC_PLL8CFGR3_SSCGDIS_Msk                    (0x1 << 26)
#define RCC_PLL8CFGR3_SSCGDIS                        (0x1 << 26)

/* Bit fields for RCC_PLL8CFGR4 register */
#define RCC_PLL8CFGR4_DSMEN_Pos                      8
#define RCC_PLL8CFGR4_DSMEN_Msk                      (0x1 << 8)
#define RCC_PLL8CFGR4_DSMEN                          (0x1 << 8)
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN_Pos              9
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN_Msk              (0x1 << 9)
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN                  (0x1 << 9)
#define RCC_PLL8CFGR4_BYPASS_Pos                     10
#define RCC_PLL8CFGR4_BYPASS_Msk                     (0x1 << 10)
#define RCC_PLL8CFGR4_BYPASS                         (0x1 << 10)

/* Bit fields for RCC_PLL8CFGR5 register */
#define RCC_PLL8CFGR5_DIVVAL_Pos                     0
#define RCC_PLL8CFGR5_DIVVAL_Msk                     (0xf << 0)
#define RCC_PLL8CFGR5_DIVVAL                         (0xf << 0)
#define RCC_PLL8CFGR5_SPREAD_Pos                     16
#define RCC_PLL8CFGR5_SPREAD_Msk                     (0x1f << 16)
#define RCC_PLL8CFGR5_SPREAD                         (0x1f << 16)

/* Bit fields for RCC_PLL8CFGR6 register */
#define RCC_PLL8CFGR6_POSTDIV1_Pos                   0
#define RCC_PLL8CFGR6_POSTDIV1_Msk                   (0x7 << 0)
#define RCC_PLL8CFGR6_POSTDIV1                       (0x7 << 0)

/* Bit fields for RCC_PLL8CFGR7 register */
#define RCC_PLL8CFGR7_POSTDIV2_Pos                   0
#define RCC_PLL8CFGR7_POSTDIV2_Msk                   (0x7 << 0)
#define RCC_PLL8CFGR7_POSTDIV2                       (0x7 << 0)

/* Bit fields for RCC_VERR register */
#define RCC_VERR_MINREV_Pos                          0
#define RCC_VERR_MINREV_Msk                          (0xf << 0)
#define RCC_VERR_MINREV                              (0xf << 0)
#define RCC_VERR_MAJREV_Pos                          4
#define RCC_VERR_MAJREV_Msk                          (0xf << 4)
#define RCC_VERR_MAJREV                              (0xf << 4)

/* Bit fields for RCC_IDR register */
#define RCC_IDR_ID_Pos                               0
#define RCC_IDR_ID_Msk                               (0xFFFFFFFF << 0)
#define RCC_IDR_ID                                   (0xFFFFFFFF << 0)

/* Bit fields for RCC_SIDR register */
#define RCC_SIDR_SID_Pos                             0
#define RCC_SIDR_SID_Msk                             (0xFFFFFFFF << 0)
#define RCC_SIDR_SID                                 (0xFFFFFFFF << 0)
#endif /* else STM32MP2XX_ASSY2_2_1*/

/******************************************************************************/
/*                                                                            */
/*                                    RIF                                     */
/*                            (RIF User Spec Rev 1.0.11-ASSY2.2)              */
/******************************************************************************/
#define  RIF_CID_CPU1_CA35 0x1U
#define  RIF_CID_CPU2_CM33 0x2U
#define  RIF_CID_CPU3_CM0  0x3U

/*******************  Bits definition for RISC_CR register ********************/
#define RISC_CR_GLOCK_Pos             (0U)
#define RISC_CR_GLOCK_Msk             (0x1U << RISC_CR_GLOCK_Pos)               /*!< 0x00000001 */
#define RISC_CR_GLOCK                 RISC_CR_GLOCK_Msk

/*******************  Bits definition for RISC_SECCFGR0 register **************/
#define RISC_SECCFGR0_SEC0_Pos        (0U)
#define RISC_SECCFGR0_SEC0_Msk        (0x1U << RISC_SECCFGR0_SEC0_Pos)          /*!< 0x00000001 */
#define RISC_SECCFGR0_SEC0            RISC_SECCFGR0_SEC0_Msk
#define RISC_SECCFGR0_SEC1_Pos        (1U)
#define RISC_SECCFGR0_SEC1_Msk        (0x1U << RISC_SECCFGR0_SEC1_Pos)          /*!< 0x00000002 */
#define RISC_SECCFGR0_SEC1            RISC_SECCFGR0_SEC1_Msk
#define RISC_SECCFGR0_SEC2_Pos        (2U)
#define RISC_SECCFGR0_SEC2_Msk        (0x1U << RISC_SECCFGR0_SEC2_Pos)          /*!< 0x00000004 */
#define RISC_SECCFGR0_SEC2            RISC_SECCFGR0_SEC2_Msk
#define RISC_SECCFGR0_SEC3_Pos        (3U)
#define RISC_SECCFGR0_SEC3_Msk        (0x1U << RISC_SECCFGR0_SEC3_Pos)          /*!< 0x00000008 */
#define RISC_SECCFGR0_SEC3            RISC_SECCFGR0_SEC3_Msk
#define RISC_SECCFGR0_SEC4_Pos        (4U)
#define RISC_SECCFGR0_SEC4_Msk        (0x1U << RISC_SECCFGR0_SEC4_Pos)          /*!< 0x00000010 */
#define RISC_SECCFGR0_SEC4            RISC_SECCFGR0_SEC4_Msk
#define RISC_SECCFGR0_SEC5_Pos        (5U)
#define RISC_SECCFGR0_SEC5_Msk        (0x1U << RISC_SECCFGR0_SEC5_Pos)          /*!< 0x00000020 */
#define RISC_SECCFGR0_SEC5            RISC_SECCFGR0_SEC5_Msk
#define RISC_SECCFGR0_SEC6_Pos        (6U)
#define RISC_SECCFGR0_SEC6_Msk        (0x1U << RISC_SECCFGR0_SEC6_Pos)          /*!< 0x00000040 */
#define RISC_SECCFGR0_SEC6            RISC_SECCFGR0_SEC6_Msk
#define RISC_SECCFGR0_SEC7_Pos        (7U)
#define RISC_SECCFGR0_SEC7_Msk        (0x1U << RISC_SECCFGR0_SEC7_Pos)          /*!< 0x00000080 */
#define RISC_SECCFGR0_SEC7            RISC_SECCFGR0_SEC7_Msk
#define RISC_SECCFGR0_SEC8_Pos        (8U)
#define RISC_SECCFGR0_SEC8_Msk        (0x1U << RISC_SECCFGR0_SEC8_Pos)          /*!< 0x00000100 */
#define RISC_SECCFGR0_SEC8            RISC_SECCFGR0_SEC8_Msk
#define RISC_SECCFGR0_SEC9_Pos        (9U)
#define RISC_SECCFGR0_SEC9_Msk        (0x1U << RISC_SECCFGR0_SEC9_Pos)          /*!< 0x00000200 */
#define RISC_SECCFGR0_SEC9            RISC_SECCFGR0_SEC9_Msk
#define RISC_SECCFGR0_SEC10_Pos       (10U)
#define RISC_SECCFGR0_SEC10_Msk       (0x1U << RISC_SECCFGR0_SEC10_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR0_SEC10           RISC_SECCFGR0_SEC10_Msk
#define RISC_SECCFGR0_SEC11_Pos       (11U)
#define RISC_SECCFGR0_SEC11_Msk       (0x1U << RISC_SECCFGR0_SEC11_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR0_SEC11           RISC_SECCFGR0_SEC11_Msk
#define RISC_SECCFGR0_SEC12_Pos       (12U)
#define RISC_SECCFGR0_SEC12_Msk       (0x1U << RISC_SECCFGR0_SEC12_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR0_SEC12           RISC_SECCFGR0_SEC12_Msk
#define RISC_SECCFGR0_SEC13_Pos       (13U)
#define RISC_SECCFGR0_SEC13_Msk       (0x1U << RISC_SECCFGR0_SEC13_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR0_SEC13           RISC_SECCFGR0_SEC13_Msk
#define RISC_SECCFGR0_SEC14_Pos       (14U)
#define RISC_SECCFGR0_SEC14_Msk       (0x1U << RISC_SECCFGR0_SEC14_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR0_SEC14           RISC_SECCFGR0_SEC14_Msk
#define RISC_SECCFGR0_SEC15_Pos       (15U)
#define RISC_SECCFGR0_SEC15_Msk       (0x1U << RISC_SECCFGR0_SEC15_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR0_SEC15           RISC_SECCFGR0_SEC15_Msk
#define RISC_SECCFGR0_SEC16_Pos       (16U)
#define RISC_SECCFGR0_SEC16_Msk       (0x1U << RISC_SECCFGR0_SEC16_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR0_SEC16           RISC_SECCFGR0_SEC16_Msk
#define RISC_SECCFGR0_SEC17_Pos       (17U)
#define RISC_SECCFGR0_SEC17_Msk       (0x1U << RISC_SECCFGR0_SEC17_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR0_SEC17           RISC_SECCFGR0_SEC17_Msk
#define RISC_SECCFGR0_SEC18_Pos       (18U)
#define RISC_SECCFGR0_SEC18_Msk       (0x1U << RISC_SECCFGR0_SEC18_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR0_SEC18           RISC_SECCFGR0_SEC18_Msk
#define RISC_SECCFGR0_SEC19_Pos       (19U)
#define RISC_SECCFGR0_SEC19_Msk       (0x1U << RISC_SECCFGR0_SEC19_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR0_SEC19           RISC_SECCFGR0_SEC19_Msk
#define RISC_SECCFGR0_SEC20_Pos       (20U)
#define RISC_SECCFGR0_SEC20_Msk       (0x1U << RISC_SECCFGR0_SEC20_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR0_SEC20           RISC_SECCFGR0_SEC20_Msk
#define RISC_SECCFGR0_SEC21_Pos       (21U)
#define RISC_SECCFGR0_SEC21_Msk       (0x1U << RISC_SECCFGR0_SEC21_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR0_SEC21           RISC_SECCFGR0_SEC21_Msk
#define RISC_SECCFGR0_SEC22_Pos       (22U)
#define RISC_SECCFGR0_SEC22_Msk       (0x1U << RISC_SECCFGR0_SEC22_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR0_SEC22           RISC_SECCFGR0_SEC22_Msk
#define RISC_SECCFGR0_SEC23_Pos       (23U)
#define RISC_SECCFGR0_SEC23_Msk       (0x1U << RISC_SECCFGR0_SEC23_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR0_SEC23           RISC_SECCFGR0_SEC23_Msk
#define RISC_SECCFGR0_SEC24_Pos       (24U)
#define RISC_SECCFGR0_SEC24_Msk       (0x1U << RISC_SECCFGR0_SEC24_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR0_SEC24           RISC_SECCFGR0_SEC24_Msk
#define RISC_SECCFGR0_SEC25_Pos       (25U)
#define RISC_SECCFGR0_SEC25_Msk       (0x1U << RISC_SECCFGR0_SEC25_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR0_SEC25           RISC_SECCFGR0_SEC25_Msk
#define RISC_SECCFGR0_SEC26_Pos       (26U)
#define RISC_SECCFGR0_SEC26_Msk       (0x1U << RISC_SECCFGR0_SEC26_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR0_SEC26           RISC_SECCFGR0_SEC26_Msk
#define RISC_SECCFGR0_SEC27_Pos       (27U)
#define RISC_SECCFGR0_SEC27_Msk       (0x1U << RISC_SECCFGR0_SEC27_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR0_SEC27           RISC_SECCFGR0_SEC27_Msk
#define RISC_SECCFGR0_SEC28_Pos       (28U)
#define RISC_SECCFGR0_SEC28_Msk       (0x1U << RISC_SECCFGR0_SEC28_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR0_SEC28           RISC_SECCFGR0_SEC28_Msk
#define RISC_SECCFGR0_SEC29_Pos       (29U)
#define RISC_SECCFGR0_SEC29_Msk       (0x1U << RISC_SECCFGR0_SEC29_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR0_SEC29           RISC_SECCFGR0_SEC29_Msk
#define RISC_SECCFGR0_SEC30_Pos       (30U)
#define RISC_SECCFGR0_SEC30_Msk       (0x1U << RISC_SECCFGR0_SEC30_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR0_SEC30           RISC_SECCFGR0_SEC30_Msk
#define RISC_SECCFGR0_SEC31_Pos       (31U)
#define RISC_SECCFGR0_SEC31_Msk       (0x1U << RISC_SECCFGR0_SEC31_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR0_SEC31           RISC_SECCFGR0_SEC31_Msk

/*******************  Bits definition for RISC_SECCFGR1 register **************/
#define RISC_SECCFGR1_SEC32_Pos       (0U)
#define RISC_SECCFGR1_SEC32_Msk       (0x1U << RISC_SECCFGR1_SEC32_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR1_SEC32           RISC_SECCFGR1_SEC32_Msk
#define RISC_SECCFGR1_SEC33_Pos       (1U)
#define RISC_SECCFGR1_SEC33_Msk       (0x1U << RISC_SECCFGR1_SEC33_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR1_SEC33           RISC_SECCFGR1_SEC33_Msk
#define RISC_SECCFGR1_SEC34_Pos       (2U)
#define RISC_SECCFGR1_SEC34_Msk       (0x1U << RISC_SECCFGR1_SEC34_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR1_SEC34           RISC_SECCFGR1_SEC34_Msk
#define RISC_SECCFGR1_SEC35_Pos       (3U)
#define RISC_SECCFGR1_SEC35_Msk       (0x1U << RISC_SECCFGR1_SEC35_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR1_SEC35           RISC_SECCFGR1_SEC35_Msk
#define RISC_SECCFGR1_SEC36_Pos       (4U)
#define RISC_SECCFGR1_SEC36_Msk       (0x1U << RISC_SECCFGR1_SEC36_Pos)         /*!< 0x00000010 */
#define RISC_SECCFGR1_SEC36           RISC_SECCFGR1_SEC36_Msk
#define RISC_SECCFGR1_SEC37_Pos       (5U)
#define RISC_SECCFGR1_SEC37_Msk       (0x1U << RISC_SECCFGR1_SEC37_Pos)         /*!< 0x00000020 */
#define RISC_SECCFGR1_SEC37           RISC_SECCFGR1_SEC37_Msk
#define RISC_SECCFGR1_SEC38_Pos       (6U)
#define RISC_SECCFGR1_SEC38_Msk       (0x1U << RISC_SECCFGR1_SEC38_Pos)         /*!< 0x00000040 */
#define RISC_SECCFGR1_SEC38           RISC_SECCFGR1_SEC38_Msk
#define RISC_SECCFGR1_SEC39_Pos       (7U)
#define RISC_SECCFGR1_SEC39_Msk       (0x1U << RISC_SECCFGR1_SEC39_Pos)         /*!< 0x00000080 */
#define RISC_SECCFGR1_SEC39           RISC_SECCFGR1_SEC39_Msk
#define RISC_SECCFGR1_SEC40_Pos       (8U)
#define RISC_SECCFGR1_SEC40_Msk       (0x1U << RISC_SECCFGR1_SEC40_Pos)         /*!< 0x00000100 */
#define RISC_SECCFGR1_SEC40           RISC_SECCFGR1_SEC40_Msk
#define RISC_SECCFGR1_SEC41_Pos       (9U)
#define RISC_SECCFGR1_SEC41_Msk       (0x1U << RISC_SECCFGR1_SEC41_Pos)         /*!< 0x00000200 */
#define RISC_SECCFGR1_SEC41           RISC_SECCFGR1_SEC41_Msk
#define RISC_SECCFGR1_SEC42_Pos       (10U)
#define RISC_SECCFGR1_SEC42_Msk       (0x1U << RISC_SECCFGR1_SEC42_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR1_SEC42           RISC_SECCFGR1_SEC42_Msk
#define RISC_SECCFGR1_SEC43_Pos       (11U)
#define RISC_SECCFGR1_SEC43_Msk       (0x1U << RISC_SECCFGR1_SEC43_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR1_SEC43           RISC_SECCFGR1_SEC43_Msk
#define RISC_SECCFGR1_SEC44_Pos       (12U)
#define RISC_SECCFGR1_SEC44_Msk       (0x1U << RISC_SECCFGR1_SEC44_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR1_SEC44           RISC_SECCFGR1_SEC44_Msk
#define RISC_SECCFGR1_SEC45_Pos       (13U)
#define RISC_SECCFGR1_SEC45_Msk       (0x1U << RISC_SECCFGR1_SEC45_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR1_SEC45           RISC_SECCFGR1_SEC45_Msk
#define RISC_SECCFGR1_SEC46_Pos       (14U)
#define RISC_SECCFGR1_SEC46_Msk       (0x1U << RISC_SECCFGR1_SEC46_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR1_SEC46           RISC_SECCFGR1_SEC46_Msk
#define RISC_SECCFGR1_SEC47_Pos       (15U)
#define RISC_SECCFGR1_SEC47_Msk       (0x1U << RISC_SECCFGR1_SEC47_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR1_SEC47           RISC_SECCFGR1_SEC47_Msk
#define RISC_SECCFGR1_SEC48_Pos       (16U)
#define RISC_SECCFGR1_SEC48_Msk       (0x1U << RISC_SECCFGR1_SEC48_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR1_SEC48           RISC_SECCFGR1_SEC48_Msk
#define RISC_SECCFGR1_SEC49_Pos       (17U)
#define RISC_SECCFGR1_SEC49_Msk       (0x1U << RISC_SECCFGR1_SEC49_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR1_SEC49           RISC_SECCFGR1_SEC49_Msk
#define RISC_SECCFGR1_SEC50_Pos       (18U)
#define RISC_SECCFGR1_SEC50_Msk       (0x1U << RISC_SECCFGR1_SEC50_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR1_SEC50           RISC_SECCFGR1_SEC50_Msk
#define RISC_SECCFGR1_SEC51_Pos       (19U)
#define RISC_SECCFGR1_SEC51_Msk       (0x1U << RISC_SECCFGR1_SEC51_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR1_SEC51           RISC_SECCFGR1_SEC51_Msk
#define RISC_SECCFGR1_SEC52_Pos       (20U)
#define RISC_SECCFGR1_SEC52_Msk       (0x1U << RISC_SECCFGR1_SEC52_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR1_SEC52           RISC_SECCFGR1_SEC52_Msk
#define RISC_SECCFGR1_SEC53_Pos       (21U)
#define RISC_SECCFGR1_SEC53_Msk       (0x1U << RISC_SECCFGR1_SEC53_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR1_SEC53           RISC_SECCFGR1_SEC53_Msk
#define RISC_SECCFGR1_SEC54_Pos       (22U)
#define RISC_SECCFGR1_SEC54_Msk       (0x1U << RISC_SECCFGR1_SEC54_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR1_SEC54           RISC_SECCFGR1_SEC54_Msk
#define RISC_SECCFGR1_SEC55_Pos       (23U)
#define RISC_SECCFGR1_SEC55_Msk       (0x1U << RISC_SECCFGR1_SEC55_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR1_SEC55           RISC_SECCFGR1_SEC55_Msk
#define RISC_SECCFGR1_SEC56_Pos       (24U)
#define RISC_SECCFGR1_SEC56_Msk       (0x1U << RISC_SECCFGR1_SEC56_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR1_SEC56           RISC_SECCFGR1_SEC56_Msk
#define RISC_SECCFGR1_SEC57_Pos       (25U)
#define RISC_SECCFGR1_SEC57_Msk       (0x1U << RISC_SECCFGR1_SEC57_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR1_SEC57           RISC_SECCFGR1_SEC57_Msk
#define RISC_SECCFGR1_SEC58_Pos       (26U)
#define RISC_SECCFGR1_SEC58_Msk       (0x1U << RISC_SECCFGR1_SEC58_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR1_SEC58           RISC_SECCFGR1_SEC58_Msk
#define RISC_SECCFGR1_SEC59_Pos       (27U)
#define RISC_SECCFGR1_SEC59_Msk       (0x1U << RISC_SECCFGR1_SEC59_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR1_SEC59           RISC_SECCFGR1_SEC59_Msk
#define RISC_SECCFGR1_SEC60_Pos       (28U)
#define RISC_SECCFGR1_SEC60_Msk       (0x1U << RISC_SECCFGR1_SEC60_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR1_SEC60           RISC_SECCFGR1_SEC60_Msk
#define RISC_SECCFGR1_SEC61_Pos       (29U)
#define RISC_SECCFGR1_SEC61_Msk       (0x1U << RISC_SECCFGR1_SEC61_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR1_SEC61           RISC_SECCFGR1_SEC61_Msk
#define RISC_SECCFGR1_SEC62_Pos       (30U)
#define RISC_SECCFGR1_SEC62_Msk       (0x1U << RISC_SECCFGR1_SEC62_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR1_SEC62           RISC_SECCFGR1_SEC62_Msk
#define RISC_SECCFGR1_SEC63_Pos       (31U)
#define RISC_SECCFGR1_SEC63_Msk       (0x1U << RISC_SECCFGR1_SEC63_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR1_SEC63           RISC_SECCFGR1_SEC63_Msk

/*******************  Bits definition for RISC_SECCFGR2 register **************/
#define RISC_SECCFGR2_SEC64_Pos       (0U)
#define RISC_SECCFGR2_SEC64_Msk       (0x1U << RISC_SECCFGR2_SEC64_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR2_SEC64           RISC_SECCFGR2_SEC64_Msk
#define RISC_SECCFGR2_SEC65_Pos       (1U)
#define RISC_SECCFGR2_SEC65_Msk       (0x1U << RISC_SECCFGR2_SEC65_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR2_SEC65           RISC_SECCFGR2_SEC65_Msk
#define RISC_SECCFGR2_SEC66_Pos       (2U)
#define RISC_SECCFGR2_SEC66_Msk       (0x1U << RISC_SECCFGR2_SEC66_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR2_SEC66           RISC_SECCFGR2_SEC66_Msk
#define RISC_SECCFGR2_SEC67_Pos       (3U)
#define RISC_SECCFGR2_SEC67_Msk       (0x1U << RISC_SECCFGR2_SEC67_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR2_SEC67           RISC_SECCFGR2_SEC67_Msk
#define RISC_SECCFGR2_SEC68_Pos       (4U)
#define RISC_SECCFGR2_SEC68_Msk       (0x1U << RISC_SECCFGR2_SEC68_Pos)         /*!< 0x00000010 */
#define RISC_SECCFGR2_SEC68           RISC_SECCFGR2_SEC68_Msk
#define RISC_SECCFGR2_SEC69_Pos       (5U)
#define RISC_SECCFGR2_SEC69_Msk       (0x1U << RISC_SECCFGR2_SEC69_Pos)         /*!< 0x00000020 */
#define RISC_SECCFGR2_SEC69           RISC_SECCFGR2_SEC69_Msk
#define RISC_SECCFGR2_SEC70_Pos       (6U)
#define RISC_SECCFGR2_SEC70_Msk       (0x1U << RISC_SECCFGR2_SEC70_Pos)         /*!< 0x00000040 */
#define RISC_SECCFGR2_SEC70           RISC_SECCFGR2_SEC70_Msk
#define RISC_SECCFGR2_SEC71_Pos       (7U)
#define RISC_SECCFGR2_SEC71_Msk       (0x1U << RISC_SECCFGR2_SEC71_Pos)         /*!< 0x00000080 */
#define RISC_SECCFGR2_SEC71            RISC_SECCFGR2_SEC71_Msk
#define RISC_SECCFGR2_SEC72_Pos       (8U)
#define RISC_SECCFGR2_SEC72_Msk       (0x1U << RISC_SECCFGR2_SEC72_Pos)         /*!< 0x00000100 */
#define RISC_SECCFGR2_SEC72           RISC_SECCFGR2_SEC72_Msk
#define RISC_SECCFGR2_SEC73_Pos       (9U)
#define RISC_SECCFGR2_SEC73_Msk       (0x1U << RISC_SECCFGR2_SEC73_Pos)         /*!< 0x00000200 */
#define RISC_SECCFGR2_SEC73           RISC_SECCFGR2_SEC73_Msk
#define RISC_SECCFGR2_SEC74_Pos       (10U)
#define RISC_SECCFGR2_SEC74_Msk       (0x1U << RISC_SECCFGR2_SEC74_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR2_SEC74           RISC_SECCFGR2_SEC74_Msk
#define RISC_SECCFGR2_SEC75_Pos       (11U)
#define RISC_SECCFGR2_SEC75_Msk       (0x1U << RISC_SECCFGR2_SEC75_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR2_SEC75           RISC_SECCFGR2_SEC75_Msk
#define RISC_SECCFGR2_SEC76_Pos       (12U)
#define RISC_SECCFGR2_SEC76_Msk       (0x1U << RISC_SECCFGR2_SEC76_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR2_SEC76           RISC_SECCFGR2_SEC76_Msk
#define RISC_SECCFGR2_SEC77_Pos       (13U)
#define RISC_SECCFGR2_SEC77_Msk       (0x1U << RISC_SECCFGR2_SEC77_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR2_SEC77           RISC_SECCFGR2_SEC77_Msk
#define RISC_SECCFGR2_SEC78_Pos       (14U)
#define RISC_SECCFGR2_SEC78_Msk       (0x1U << RISC_SECCFGR2_SEC78_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR2_SEC78           RISC_SECCFGR2_SEC78_Msk
#define RISC_SECCFGR2_SEC79_Pos       (15U)
#define RISC_SECCFGR2_SEC79_Msk       (0x1U << RISC_SECCFGR2_SEC79_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR2_SEC79           RISC_SECCFGR2_SEC79_Msk
#define RISC_SECCFGR2_SEC80_Pos       (16U)
#define RISC_SECCFGR2_SEC80_Msk       (0x1U << RISC_SECCFGR2_SEC80_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR2_SEC80           RISC_SECCFGR2_SEC80_Msk
#define RISC_SECCFGR2_SEC81_Pos       (17U)
#define RISC_SECCFGR2_SEC81_Msk       (0x1U << RISC_SECCFGR2_SEC81_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR2_SEC81           RISC_SECCFGR2_SEC81_Msk
#define RISC_SECCFGR2_SEC82_Pos       (18U)
#define RISC_SECCFGR2_SEC82_Msk       (0x1U << RISC_SECCFGR2_SEC82_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR2_SEC82           RISC_SECCFGR2_SEC82_Msk
#define RISC_SECCFGR2_SEC83_Pos       (19U)
#define RISC_SECCFGR2_SEC83_Msk       (0x1U << RISC_SECCFGR2_SEC83_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR2_SEC83           RISC_SECCFGR2_SEC83_Msk
#define RISC_SECCFGR2_SEC84_Pos       (20U)
#define RISC_SECCFGR2_SEC84_Msk       (0x1U << RISC_SECCFGR2_SEC84_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR2_SEC84           RISC_SECCFGR2_SEC84_Msk
#define RISC_SECCFGR2_SEC85_Pos       (21U)
#define RISC_SECCFGR2_SEC85_Msk       (0x1U << RISC_SECCFGR2_SEC85_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR2_SEC85           RISC_SECCFGR2_SEC85_Msk
#define RISC_SECCFGR2_SEC86_Pos       (22U)
#define RISC_SECCFGR2_SEC86_Msk       (0x1U << RISC_SECCFGR2_SEC86_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR2_SEC86           RISC_SECCFGR2_SEC86_Msk
#define RISC_SECCFGR2_SEC87_Pos       (23U)
#define RISC_SECCFGR2_SEC87_Msk       (0x1U << RISC_SECCFGR2_SEC87_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR2_SEC87           RISC_SECCFGR2_SEC87_Msk
#define RISC_SECCFGR2_SEC88_Pos       (24U)
#define RISC_SECCFGR2_SEC88_Msk       (0x1U << RISC_SECCFGR2_SEC88_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR2_SEC88           RISC_SECCFGR2_SEC88_Msk
#define RISC_SECCFGR2_SEC89_Pos       (25U)
#define RISC_SECCFGR2_SEC89_Msk       (0x1U << RISC_SECCFGR2_SEC89_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR2_SEC89           RISC_SECCFGR2_SEC89_Msk
#define RISC_SECCFGR2_SEC90_Pos       (26U)
#define RISC_SECCFGR2_SEC90_Msk       (0x1U << RISC_SECCFGR2_SEC90_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR2_SEC90           RISC_SECCFGR2_SEC90_Msk
#define RISC_SECCFGR2_SEC91_Pos       (27U)
#define RISC_SECCFGR2_SEC91_Msk       (0x1U << RISC_SECCFGR2_SEC91_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR2_SEC91           RISC_SECCFGR2_SEC91_Msk
#define RISC_SECCFGR2_SEC92_Pos       (28U)
#define RISC_SECCFGR2_SEC92_Msk       (0x1U << RISC_SECCFGR2_SEC92_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR2_SEC92           RISC_SECCFGR2_SEC92_Msk
#define RISC_SECCFGR2_SEC93_Pos       (29U)
#define RISC_SECCFGR2_SEC93_Msk       (0x1U << RISC_SECCFGR2_SEC93_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR2_SEC93           RISC_SECCFGR2_SEC93_Msk
#define RISC_SECCFGR2_SEC94_Pos       (30U)
#define RISC_SECCFGR2_SEC94_Msk       (0x1U << RISC_SECCFGR2_SEC94_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR2_SEC94           RISC_SECCFGR2_SEC94_Msk
#define RISC_SECCFGR2_SEC95_Pos       (31U)
#define RISC_SECCFGR2_SEC95_Msk       (0x1U << RISC_SECCFGR2_SEC95_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR2_SEC95           RISC_SECCFGR2_SEC95_Msk

/*******************  Bits definition for RISC_SECCFGR3 register **************/
#define RISC_SECCFGR3_SEC96_Pos       (0U)
#define RISC_SECCFGR3_SEC96_Msk       (0x1U << RISC_SECCFGR3_SEC96_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR3_SEC96           RISC_SECCFGR3_SEC0_Msk
#define RISC_SECCFGR3_SEC97_Pos       (1U)
#define RISC_SECCFGR3_SEC97_Msk       (0x1U << RISC_SECCFGR3_SEC97_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR3_SEC97           RISC_SECCFGR3_SEC97_Msk
#define RISC_SECCFGR3_SEC98_Pos       (2U)
#define RISC_SECCFGR3_SEC98_Msk       (0x1U << RISC_SECCFGR3_SEC98_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR3_SEC98           RISC_SECCFGR3_SEC98_Msk
#define RISC_SECCFGR3_SEC99_Pos       (3U)
#define RISC_SECCFGR3_SEC99_Msk       (0x1U << RISC_SECCFGR3_SEC99_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR3_SEC99           RISC_SECCFGR3_SEC99_Msk
#define RISC_SECCFGR3_SEC100_Pos      (4U)
#define RISC_SECCFGR3_SEC100_Msk      (0x1U << RISC_SECCFGR3_SEC100_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR3_SEC100          RISC_SECCFGR3_SEC100_Msk
#define RISC_SECCFGR3_SEC101_Pos      (5U)
#define RISC_SECCFGR3_SEC101_Msk      (0x1U << RISC_SECCFGR3_SEC101_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR3_SEC101          RISC_SECCFGR3_SEC101_Msk
#define RISC_SECCFGR3_SEC102_Pos      (6U)
#define RISC_SECCFGR3_SEC102_Msk      (0x1U << RISC_SECCFGR3_SEC102_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR3_SEC102          RISC_SECCFGR3_SEC102_Msk
#define RISC_SECCFGR3_SEC103_Pos      (7U)
#define RISC_SECCFGR3_SEC103_Msk      (0x1U << RISC_SECCFGR3_SEC103_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR3_SEC103          RISC_SECCFGR3_SEC103_Msk
#define RISC_SECCFGR3_SEC104_Pos      (8U)
#define RISC_SECCFGR3_SEC104_Msk      (0x1U << RISC_SECCFGR3_SEC104_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR3_SEC104          RISC_SECCFGR3_SEC104_Msk
#define RISC_SECCFGR3_SEC105_Pos      (9U)
#define RISC_SECCFGR3_SEC105_Msk      (0x1U << RISC_SECCFGR3_SEC105_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR3_SEC105          RISC_SECCFGR3_SEC105_Msk
#define RISC_SECCFGR3_SEC106_Pos      (10U)
#define RISC_SECCFGR3_SEC106_Msk      (0x1U << RISC_SECCFGR3_SEC106_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR3_SEC106          RISC_SECCFGR3_SEC106_Msk
#define RISC_SECCFGR3_SEC107_Pos      (11U)
#define RISC_SECCFGR3_SEC107_Msk      (0x1U << RISC_SECCFGR3_SEC107_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR3_SEC107          RISC_SECCFGR3_SEC107_Msk
#define RISC_SECCFGR3_SEC108_Pos      (12U)
#define RISC_SECCFGR3_SEC108_Msk      (0x1U << RISC_SECCFGR3_SEC108_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR3_SEC108          RISC_SECCFGR3_SEC108_Msk
#define RISC_SECCFGR3_SEC109_Pos      (13U)
#define RISC_SECCFGR3_SEC109_Msk      (0x1U << RISC_SECCFGR3_SEC109_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR3_SEC109          RISC_SECCFGR3_SEC109_Msk
#define RISC_SECCFGR3_SEC110_Pos      (14U)
#define RISC_SECCFGR3_SEC110_Msk      (0x1U << RISC_SECCFGR3_SEC110_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR3_SEC110          RISC_SECCFGR3_SEC110_Msk
#define RISC_SECCFGR3_SEC111_Pos      (15U)
#define RISC_SECCFGR3_SEC111_Msk      (0x1U << RISC_SECCFGR3_SEC111_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR3_SEC111          RISC_SECCFGR3_SEC111_Msk
#define RISC_SECCFGR3_SEC112_Pos      (16U)
#define RISC_SECCFGR3_SEC112_Msk      (0x1U << RISC_SECCFGR3_SEC112_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR3_SEC112          RISC_SECCFGR3_SEC112_Msk
#define RISC_SECCFGR3_SEC113_Pos      (17U)
#define RISC_SECCFGR3_SEC113_Msk      (0x1U << RISC_SECCFGR3_SEC113_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR3_SEC113          RISC_SECCFGR3_SEC113_Msk
#define RISC_SECCFGR3_SEC114_Pos      (18U)
#define RISC_SECCFGR3_SEC114_Msk      (0x1U << RISC_SECCFGR3_SEC114_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR3_SEC114          RISC_SECCFGR3_SEC114_Msk
#define RISC_SECCFGR3_SEC115_Pos      (19U)
#define RISC_SECCFGR3_SEC115_Msk      (0x1U << RISC_SECCFGR3_SEC115_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR3_SEC115          RISC_SECCFGR3_SEC115_Msk
#define RISC_SECCFGR3_SEC116_Pos      (20U)
#define RISC_SECCFGR3_SEC116_Msk      (0x1U << RISC_SECCFGR3_SEC116_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR3_SEC116          RISC_SECCFGR3_SEC116_Msk
#define RISC_SECCFGR3_SEC117_Pos      (21U)
#define RISC_SECCFGR3_SEC117_Msk      (0x1U << RISC_SECCFGR3_SEC117_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR3_SEC117          RISC_SECCFGR3_SEC117_Msk
#define RISC_SECCFGR3_SEC118_Pos      (22U)
#define RISC_SECCFGR3_SEC118_Msk      (0x1U << RISC_SECCFGR3_SEC118_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR3_SEC118          RISC_SECCFGR3_SEC118_Msk
#define RISC_SECCFGR3_SEC119_Pos      (23U)
#define RISC_SECCFGR3_SEC119_Msk      (0x1U << RISC_SECCFGR3_SEC119_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR3_SEC119          RISC_SECCFGR3_SEC119_Msk
#define RISC_SECCFGR3_SEC120_Pos      (24U)
#define RISC_SECCFGR3_SEC120_Msk      (0x1U << RISC_SECCFGR3_SEC120_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR3_SEC120          RISC_SECCFGR3_SEC120_Msk
#define RISC_SECCFGR3_SEC121_Pos      (25U)
#define RISC_SECCFGR3_SEC121_Msk      (0x1U << RISC_SECCFGR3_SEC121_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR3_SEC121          RISC_SECCFGR3_SEC121_Msk
#define RISC_SECCFGR3_SEC122_Pos      (26U)
#define RISC_SECCFGR3_SEC122_Msk      (0x1U << RISC_SECCFGR3_SEC122_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR3_SEC122          RISC_SECCFGR3_SEC122_Msk
#define RISC_SECCFGR3_SEC123_Pos      (27U)
#define RISC_SECCFGR3_SEC123_Msk      (0x1U << RISC_SECCFGR3_SEC123_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR3_SEC123          RISC_SECCFGR3_SEC123_Msk
#define RISC_SECCFGR3_SEC124_Pos      (28U)
#define RISC_SECCFGR3_SEC124_Msk      (0x1U << RISC_SECCFGR3_SEC124_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR3_SEC124          RISC_SECCFGR3_SEC124_Msk
#define RISC_SECCFGR3_SEC125_Pos      (29U)
#define RISC_SECCFGR3_SEC125_Msk      (0x1U << RISC_SECCFGR3_SEC125_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR3_SEC125          RISC_SECCFGR3_SEC125_Msk
#define RISC_SECCFGR3_SEC126_Pos      (30U)
#define RISC_SECCFGR3_SEC126_Msk      (0x1U << RISC_SECCFGR3_SEC126_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR3_SEC126          RISC_SECCFGR3_SEC126_Msk
#define RISC_SECCFGR3_SEC127_Pos      (31U)
#define RISC_SECCFGR3_SEC127_Msk      (0x1U << RISC_SECCFGR3_SEC127_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR3_SEC127          RISC_SECCFGR3_SEC127_Msk

/*******************  Bits definition for RISC_SECCFGR4 register **************/
#define RISC_SECCFGR4_SEC128_Pos      (0U)
#define RISC_SECCFGR4_SEC128_Msk      (0x1U << RISC_SECCFGR4_SEC128_Pos)        /*!< 0x00000001 */
#define RISC_SECCFGR4_SEC128          RISC_SECCFGR4_SEC128_Msk
#define RISC_SECCFGR4_SEC129_Pos      (1U)
#define RISC_SECCFGR4_SEC129_Msk      (0x1U << RISC_SECCFGR4_SEC129_Pos)        /*!< 0x00000002 */
#define RISC_SECCFGR4_SEC129          RISC_SECCFGR4_SEC129_Msk
#define RISC_SECCFGR4_SEC130_Pos      (2U)
#define RISC_SECCFGR4_SEC130_Msk      (0x1U << RISC_SECCFGR4_SEC130_Pos)        /*!< 0x00000004 */
#define RISC_SECCFGR4_SEC130          RISC_SECCFGR4_SEC130_Msk
#define RISC_SECCFGR4_SEC131_Pos      (3U)
#define RISC_SECCFGR4_SEC131_Msk      (0x1U << RISC_SECCFGR4_SEC131_Pos)        /*!< 0x00000008 */
#define RISC_SECCFGR4_SEC131          RISC_SECCFGR4_SEC131_Msk
#define RISC_SECCFGR4_SEC132_Pos      (4U)
#define RISC_SECCFGR4_SEC132_Msk      (0x1U << RISC_SECCFGR4_SEC132_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR4_SEC132          RISC_SECCFGR4_SEC132_Msk
#define RISC_SECCFGR4_SEC133_Pos      (5U)
#define RISC_SECCFGR4_SEC133_Msk      (0x1U << RISC_SECCFGR4_SEC133_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR4_SEC133          RISC_SECCFGR4_SEC133_Msk
#define RISC_SECCFGR4_SEC134_Pos      (6U)
#define RISC_SECCFGR4_SEC134_Msk      (0x1U << RISC_SECCFGR4_SEC134_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR4_SEC134          RISC_SECCFGR4_SEC134_Msk
#define RISC_SECCFGR4_SEC135_Pos      (7U)
#define RISC_SECCFGR4_SEC135_Msk      (0x1U << RISC_SECCFGR4_SEC135_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR4_SEC135          RISC_SECCFGR4_SEC135_Msk
#define RISC_SECCFGR4_SEC136_Pos      (8U)
#define RISC_SECCFGR4_SEC136_Msk      (0x1U << RISC_SECCFGR4_SEC136_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR4_SEC136          RISC_SECCFGR4_SEC136_Msk
#define RISC_SECCFGR4_SEC137_Pos      (9U)
#define RISC_SECCFGR4_SEC137_Msk      (0x1U << RISC_SECCFGR4_SEC137_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR4_SEC137          RISC_SECCFGR4_SEC137_Msk
#define RISC_SECCFGR4_SEC138_Pos      (10U)
#define RISC_SECCFGR4_SEC138_Msk      (0x1U << RISC_SECCFGR4_SEC138_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR4_SEC138          RISC_SECCFGR4_SEC138_Msk
#define RISC_SECCFGR4_SEC139_Pos      (11U)
#define RISC_SECCFGR4_SEC139_Msk      (0x1U << RISC_SECCFGR4_SEC139_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR4_SEC139          RISC_SECCFGR4_SEC139_Msk
#define RISC_SECCFGR4_SEC140_Pos      (12U)
#define RISC_SECCFGR4_SEC140_Msk      (0x1U << RISC_SECCFGR4_SEC140_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR4_SEC140          RISC_SECCFGR4_SEC140_Msk
#define RISC_SECCFGR4_SEC141_Pos      (13U)
#define RISC_SECCFGR4_SEC141_Msk      (0x1U << RISC_SECCFGR4_SEC141_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR4_SEC141          RISC_SECCFGR4_SEC141_Msk
#define RISC_SECCFGR4_SEC142_Pos      (14U)
#define RISC_SECCFGR4_SEC142_Msk      (0x1U << RISC_SECCFGR4_SEC142_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR4_SEC142          RISC_SECCFGR4_SEC142_Msk
#define RISC_SECCFGR4_SEC143_Pos      (15U)
#define RISC_SECCFGR4_SEC143_Msk      (0x1U << RISC_SECCFGR4_SEC143_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR4_SEC143          RISC_SECCFGR4_SEC143_Msk
#define RISC_SECCFGR4_SEC144_Pos      (16U)
#define RISC_SECCFGR4_SEC144_Msk      (0x1U << RISC_SECCFGR4_SEC144_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR4_SEC144          RISC_SECCFGR4_SEC144_Msk
#define RISC_SECCFGR4_SEC145_Pos      (17U)
#define RISC_SECCFGR4_SEC145_Msk      (0x1U << RISC_SECCFGR4_SEC145_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR4_SEC145          RISC_SECCFGR4_SEC145_Msk
#define RISC_SECCFGR4_SEC146_Pos      (18U)
#define RISC_SECCFGR4_SEC146_Msk      (0x1U << RISC_SECCFGR4_SEC146_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR4_SEC146          RISC_SECCFGR4_SEC146_Msk
#define RISC_SECCFGR4_SEC147_Pos      (19U)
#define RISC_SECCFGR4_SEC147_Msk      (0x1U << RISC_SECCFGR4_SEC147_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR4_SEC147          RISC_SECCFGR4_SEC147_Msk
#define RISC_SECCFGR4_SEC148_Pos      (20U)
#define RISC_SECCFGR4_SEC148_Msk      (0x1U << RISC_SECCFGR4_SEC148_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR4_SEC148          RISC_SECCFGR4_SEC148_Msk
#define RISC_SECCFGR4_SEC149_Pos      (21U)
#define RISC_SECCFGR4_SEC149_Msk      (0x1U << RISC_SECCFGR4_SEC149_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR4_SEC149          RISC_SECCFGR4_SEC149_Msk
#define RISC_SECCFGR4_SEC150_Pos      (22U)
#define RISC_SECCFGR4_SEC150_Msk      (0x1U << RISC_SECCFGR4_SEC150_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR4_SEC150          RISC_SECCFGR4_SEC150_Msk
#define RISC_SECCFGR4_SEC151_Pos      (23U)
#define RISC_SECCFGR4_SEC151_Msk      (0x1U << RISC_SECCFGR4_SEC151_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR4_SEC151          RISC_SECCFGR4_SEC151_Msk
#define RISC_SECCFGR4_SEC152_Pos      (24U)
#define RISC_SECCFGR4_SEC152_Msk      (0x1U << RISC_SECCFGR4_SEC152_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR4_SEC152          RISC_SECCFGR4_SEC152_Msk
#define RISC_SECCFGR4_SEC153_Pos      (25U)
#define RISC_SECCFGR4_SEC153_Msk      (0x1U << RISC_SECCFGR4_SEC153_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR4_SEC153          RISC_SECCFGR4_SEC153_Msk
#define RISC_SECCFGR4_SEC154_Pos      (26U)
#define RISC_SECCFGR4_SEC154_Msk      (0x1U << RISC_SECCFGR4_SEC154_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR4_SEC154          RISC_SECCFGR4_SEC154_Msk
#define RISC_SECCFGR4_SEC155_Pos      (27U)
#define RISC_SECCFGR4_SEC155_Msk      (0x1U << RISC_SECCFGR4_SEC155_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR4_SEC155          RISC_SECCFGR4_SEC155_Msk
#define RISC_SECCFGR4_SEC156_Pos      (28U)
#define RISC_SECCFGR4_SEC156_Msk      (0x1U << RISC_SECCFGR4_SEC156_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR4_SEC156          RISC_SECCFGR4_SEC156_Msk
#define RISC_SECCFGR4_SEC157_Pos      (29U)
#define RISC_SECCFGR4_SEC157_Msk      (0x1U << RISC_SECCFGR4_SEC157_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR4_SEC157          RISC_SECCFGR4_SEC157_Msk
#define RISC_SECCFGR4_SEC158_Pos      (30U)
#define RISC_SECCFGR4_SEC158_Msk      (0x1U << RISC_SECCFGR4_SEC158_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR4_SEC158          RISC_SECCFGR4_SEC158_Msk
#define RISC_SECCFGR4_SEC159_Pos      (31U)
#define RISC_SECCFGR4_SEC159_Msk      (0x1U << RISC_SECCFGR4_SEC159_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR4_SEC159          RISC_SECCFGR4_SEC159_Msk

/*******************  Bits definition for RISC_SECCFGR5 register **************/
#define RISC_SECCFGR5_SEC160_Pos      (0U)
#define RISC_SECCFGR5_SEC160_Msk      (0x1U << RISC_SECCFGR5_SEC160_Pos)        /*!< 0x00000001 */
#define RISC_SECCFGR5_SEC160          RISC_SECCFGR5_SEC160_Msk
#define RISC_SECCFGR5_SEC161_Pos      (1U)
#define RISC_SECCFGR5_SEC161_Msk      (0x1U << RISC_SECCFGR5_SEC161_Pos)        /*!< 0x00000002 */
#define RISC_SECCFGR5_SEC161          RISC_SECCFGR5_SEC161_Msk
#define RISC_SECCFGR5_SEC162_Pos      (2U)
#define RISC_SECCFGR5_SEC162_Msk      (0x1U << RISC_SECCFGR5_SEC162_Pos)        /*!< 0x00000004 */
#define RISC_SECCFGR5_SEC162          RISC_SECCFGR5_SEC162_Msk
#define RISC_SECCFGR5_SEC163_Pos      (3U)
#define RISC_SECCFGR5_SEC163_Msk      (0x1U << RISC_SECCFGR5_SEC163_Pos)        /*!< 0x00000008 */
#define RISC_SECCFGR5_SEC163          RISC_SECCFGR5_SEC163_Msk
#define RISC_SECCFGR5_SEC164_Pos      (4U)
#define RISC_SECCFGR5_SEC164_Msk      (0x1U << RISC_SECCFGR5_SEC164_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR5_SEC164          RISC_SECCFGR5_SEC164_Msk
#define RISC_SECCFGR5_SEC165_Pos      (5U)
#define RISC_SECCFGR5_SEC165_Msk      (0x1U << RISC_SECCFGR5_SEC165_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR5_SEC165          RISC_SECCFGR5_SEC165_Msk
#define RISC_SECCFGR5_SEC166_Pos      (6U)
#define RISC_SECCFGR5_SEC166_Msk      (0x1U << RISC_SECCFGR5_SEC166_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR5_SEC166          RISC_SECCFGR5_SEC166_Msk
#define RISC_SECCFGR5_SEC167_Pos      (7U)
#define RISC_SECCFGR5_SEC167_Msk      (0x1U << RISC_SECCFGR5_SEC167_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR5_SEC167          RISC_SECCFGR5_SEC167_Msk
#define RISC_SECCFGR5_SEC168_Pos      (8U)
#define RISC_SECCFGR5_SEC168_Msk      (0x1U << RISC_SECCFGR5_SEC168_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR5_SEC168          RISC_SECCFGR5_SEC168_Msk
#define RISC_SECCFGR5_SEC169_Pos      (9U)
#define RISC_SECCFGR5_SEC169_Msk      (0x1U << RISC_SECCFGR5_SEC169_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR5_SEC169          RISC_SECCFGR5_SEC169_Msk
#define RISC_SECCFGR5_SEC170_Pos      (10U)
#define RISC_SECCFGR5_SEC170_Msk      (0x1U << RISC_SECCFGR5_SEC170_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR5_SEC170          RISC_SECCFGR5_SEC170_Msk
#define RISC_SECCFGR5_SEC171_Pos      (11U)
#define RISC_SECCFGR5_SEC171_Msk      (0x1U << RISC_SECCFGR5_SEC171_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR5_SEC171          RISC_SECCFGR5_SEC171_Msk
#define RISC_SECCFGR5_SEC172_Pos      (12U)
#define RISC_SECCFGR5_SEC172_Msk      (0x1U << RISC_SECCFGR5_SEC172_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR5_SEC172          RISC_SECCFGR5_SEC172_Msk
#define RISC_SECCFGR5_SEC173_Pos      (13U)
#define RISC_SECCFGR5_SEC173_Msk      (0x1U << RISC_SECCFGR5_SEC173_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR5_SEC173          RISC_SECCFGR5_SEC173_Msk
#define RISC_SECCFGR5_SEC174_Pos      (14U)
#define RISC_SECCFGR5_SEC174_Msk      (0x1U << RISC_SECCFGR5_SEC174_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR5_SEC174          RISC_SECCFGR5_SEC174_Msk
#define RISC_SECCFGR5_SEC175_Pos      (15U)
#define RISC_SECCFGR5_SEC175_Msk      (0x1U << RISC_SECCFGR5_SEC175_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR5_SEC175          RISC_SECCFGR5_SEC175_Msk
#define RISC_SECCFGR5_SEC176_Pos      (16U)
#define RISC_SECCFGR5_SEC176_Msk      (0x1U << RISC_SECCFGR5_SEC176_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR5_SEC176          RISC_SECCFGR5_SEC176_Msk
#define RISC_SECCFGR5_SEC177_Pos      (17U)
#define RISC_SECCFGR5_SEC177_Msk      (0x1U << RISC_SECCFGR5_SEC177_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR5_SEC177          RISC_SECCFGR5_SEC177_Msk
#define RISC_SECCFGR5_SEC178_Pos      (18U)
#define RISC_SECCFGR5_SEC178_Msk      (0x1U << RISC_SECCFGR5_SEC178_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR5_SEC178          RISC_SECCFGR5_SEC178_Msk
#define RISC_SECCFGR5_SEC179_Pos      (19U)
#define RISC_SECCFGR5_SEC179_Msk      (0x1U << RISC_SECCFGR5_SEC179_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR5_SEC179          RISC_SECCFGR5_SEC179_Msk
#define RISC_SECCFGR5_SEC180_Pos      (20U)
#define RISC_SECCFGR5_SEC180_Msk      (0x1U << RISC_SECCFGR5_SEC180_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR5_SEC180          RISC_SECCFGR5_SEC180_Msk
#define RISC_SECCFGR5_SEC181_Pos      (21U)
#define RISC_SECCFGR5_SEC181_Msk      (0x1U << RISC_SECCFGR5_SEC181_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR5_SEC181          RISC_SECCFGR5_SEC181_Msk
#define RISC_SECCFGR5_SEC182_Pos      (22U)
#define RISC_SECCFGR5_SEC182_Msk      (0x1U << RISC_SECCFGR5_SEC182_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR5_SEC182          RISC_SECCFGR5_SEC182_Msk
#define RISC_SECCFGR5_SEC183_Pos      (23U)
#define RISC_SECCFGR5_SEC183_Msk      (0x1U << RISC_SECCFGR5_SEC183_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR5_SEC183          RISC_SECCFGR5_SEC183_Msk
#define RISC_SECCFGR5_SEC184_Pos      (24U)
#define RISC_SECCFGR5_SEC184_Msk      (0x1U << RISC_SECCFGR5_SEC184_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR5_SEC184          RISC_SECCFGR5_SEC184_Msk
#define RISC_SECCFGR5_SEC185_Pos      (25U)
#define RISC_SECCFGR5_SEC185_Msk      (0x1U << RISC_SECCFGR5_SEC185_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR5_SEC185          RISC_SECCFGR5_SEC185_Msk
#define RISC_SECCFGR5_SEC186_Pos      (26U)
#define RISC_SECCFGR5_SEC186_Msk      (0x1U << RISC_SECCFGR5_SEC186_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR5_SEC186          RISC_SECCFGR5_SEC186_Msk
#define RISC_SECCFGR5_SEC187_Pos      (27U)
#define RISC_SECCFGR5_SEC187_Msk      (0x1U << RISC_SECCFGR5_SEC187_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR5_SEC187          RISC_SECCFGR5_SEC187_Msk
#define RISC_SECCFGR5_SEC188_Pos      (28U)
#define RISC_SECCFGR5_SEC188_Msk      (0x1U << RISC_SECCFGR5_SEC188_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR5_SEC188          RISC_SECCFGR5_SEC188_Msk
#define RISC_SECCFGR5_SEC189_Pos      (29U)
#define RISC_SECCFGR5_SEC189_Msk      (0x1U << RISC_SECCFGR5_SEC189_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR5_SEC189          RISC_SECCFGR5_SEC189_Msk
#define RISC_SECCFGR5_SEC190_Pos      (30U)
#define RISC_SECCFGR5_SEC190_Msk      (0x1U << RISC_SECCFGR5_SEC190_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR5_SEC190          RISC_SECCFGR5_SEC190_Msk
#define RISC_SECCFGR5_SEC191_Pos      (31U)
#define RISC_SECCFGR5_SEC191_Msk      (0x1U << RISC_SECCFGR5_SEC191_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR5_SEC191          RISC_SECCFGR5_SEC191_Msk

/*******************  Bits definition for RISC_PRIVCFGR0 register *************/
#define RISC_PRIVCFGR0_PRIV0_Pos      (0U)
#define RISC_PRIVCFGR0_PRIV0_Msk      (0x1U << RISC_PRIVCFGR0_PRIV0_Pos)        /*!< 0x00000001 */
#define RISC_PRIVCFGR0_PRIV0          RISC_PRIVCFGR0_PRIV0_Msk
#define RISC_PRIVCFGR0_PRIV1_Pos      (1U)
#define RISC_PRIVCFGR0_PRIV1_Msk      (0x1U << RISC_PRIVCFGR0_PRIV1_Pos)        /*!< 0x00000002 */
#define RISC_PRIVCFGR0_PRIV1          RISC_PRIVCFGR0_PRIV1_Msk
#define RISC_PRIVCFGR0_PRIV2_Pos      (2U)
#define RISC_PRIVCFGR0_PRIV2_Msk      (0x1U << RISC_PRIVCFGR0_PRIV2_Pos)        /*!< 0x00000004 */
#define RISC_PRIVCFGR0_PRIV2          RISC_PRIVCFGR0_PRIV2_Msk
#define RISC_PRIVCFGR0_PRIV3_Pos      (3U)
#define RISC_PRIVCFGR0_PRIV3_Msk      (0x1U << RISC_PRIVCFGR0_PRIV3_Pos)        /*!< 0x00000008 */
#define RISC_PRIVCFGR0_PRIV3          RISC_PRIVCFGR0_PRIV3_Msk
#define RISC_PRIVCFGR0_PRIV4_Pos      (4U)
#define RISC_PRIVCFGR0_PRIV4_Msk      (0x1U << RISC_PRIVCFGR0_PRIV4_Pos)        /*!< 0x00000010 */
#define RISC_PRIVCFGR0_PRIV4          RISC_PRIVCFGR0_PRIV4_Msk
#define RISC_PRIVCFGR0_PRIV5_Pos      (5U)
#define RISC_PRIVCFGR0_PRIV5_Msk      (0x1U << RISC_PRIVCFGR0_PRIV5_Pos)        /*!< 0x00000020 */
#define RISC_PRIVCFGR0_PRIV5          RISC_PRIVCFGR0_PRIV5_Msk
#define RISC_PRIVCFGR0_PRIV6_Pos      (6U)
#define RISC_PRIVCFGR0_PRIV6_Msk      (0x1U << RISC_PRIVCFGR0_PRIV6_Pos)        /*!< 0x00000040 */
#define RISC_PRIVCFGR0_PRIV6          RISC_PRIVCFGR0_PRIV6_Msk
#define RISC_PRIVCFGR0_PRIV7_Pos      (7U)
#define RISC_PRIVCFGR0_PRIV7_Msk      (0x1U << RISC_PRIVCFGR0_PRIV7_Pos)        /*!< 0x00000080 */
#define RISC_PRIVCFGR0_PRIV7          RISC_PRIVCFGR0_PRIV7_Msk
#define RISC_PRIVCFGR0_PRIV8_Pos      (8U)
#define RISC_PRIVCFGR0_PRIV8_Msk      (0x1U << RISC_PRIVCFGR0_PRIV8_Pos)        /*!< 0x00000100 */
#define RISC_PRIVCFGR0_PRIV8          RISC_PRIVCFGR0_PRIV8_Msk
#define RISC_PRIVCFGR0_PRIV9_Pos      (9U)
#define RISC_PRIVCFGR0_PRIV9_Msk      (0x1U << RISC_PRIVCFGR0_PRIV9_Pos)        /*!< 0x00000200 */
#define RISC_PRIVCFGR0_PRIV9          RISC_PRIVCFGR0_PRIV9_Msk
#define RISC_PRIVCFGR0_PRIV10_Pos     (10U)
#define RISC_PRIVCFGR0_PRIV10_Msk     (0x1U << RISC_PRIVCFGR0_PRIV10_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR0_PRIV10         RISC_PRIVCFGR0_PRIV10_Msk
#define RISC_PRIVCFGR0_PRIV11_Pos     (11U)
#define RISC_PRIVCFGR0_PRIV11_Msk     (0x1U << RISC_PRIVCFGR0_PRIV11_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR0_PRIV11         RISC_PRIVCFGR0_PRIV11_Msk
#define RISC_PRIVCFGR0_PRIV12_Pos     (12U)
#define RISC_PRIVCFGR0_PRIV12_Msk     (0x1U << RISC_PRIVCFGR0_PRIV12_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR0_PRIV12         RISC_PRIVCFGR0_PRIV12_Msk
#define RISC_PRIVCFGR0_PRIV13_Pos     (13U)
#define RISC_PRIVCFGR0_PRIV13_Msk     (0x1U << RISC_PRIVCFGR0_PRIV13_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR0_PRIV13         RISC_PRIVCFGR0_PRIV13_Msk
#define RISC_PRIVCFGR0_PRIV14_Pos     (14U)
#define RISC_PRIVCFGR0_PRIV14_Msk     (0x1U << RISC_PRIVCFGR0_PRIV14_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR0_PRIV14         RISC_PRIVCFGR0_PRIV14_Msk
#define RISC_PRIVCFGR0_PRIV15_Pos     (15U)
#define RISC_PRIVCFGR0_PRIV15_Msk     (0x1U << RISC_PRIVCFGR0_PRIV15_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR0_PRIV15         RISC_PRIVCFGR0_PRIV15_Msk
#define RISC_PRIVCFGR0_PRIV16_Pos     (16U)
#define RISC_PRIVCFGR0_PRIV16_Msk     (0x1U << RISC_PRIVCFGR0_PRIV16_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR0_PRIV16         RISC_PRIVCFGR0_PRIV16_Msk
#define RISC_PRIVCFGR0_PRIV17_Pos     (17U)
#define RISC_PRIVCFGR0_PRIV17_Msk     (0x1U << RISC_PRIVCFGR0_PRIV17_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR0_PRIV17         RISC_PRIVCFGR0_PRIV17_Msk
#define RISC_PRIVCFGR0_PRIV18_Pos     (18U)
#define RISC_PRIVCFGR0_PRIV18_Msk     (0x1U << RISC_PRIVCFGR0_PRIV18_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR0_PRIV18         RISC_PRIVCFGR0_PRIV18_Msk
#define RISC_PRIVCFGR0_PRIV19_Pos     (19U)
#define RISC_PRIVCFGR0_PRIV19_Msk     (0x1U << RISC_PRIVCFGR0_PRIV19_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR0_PRIV19         RISC_PRIVCFGR0_PRIV19_Msk
#define RISC_PRIVCFGR0_PRIV20_Pos     (20U)
#define RISC_PRIVCFGR0_PRIV20_Msk     (0x1U << RISC_PRIVCFGR0_PRIV20_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR0_PRIV20         RISC_PRIVCFGR0_PRIV20_Msk
#define RISC_PRIVCFGR0_PRIV21_Pos     (21U)
#define RISC_PRIVCFGR0_PRIV21_Msk     (0x1U << RISC_PRIVCFGR0_PRIV21_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR0_PRIV21         RISC_PRIVCFGR0_PRIV21_Msk
#define RISC_PRIVCFGR0_PRIV22_Pos     (22U)
#define RISC_PRIVCFGR0_PRIV22_Msk     (0x1U << RISC_PRIVCFGR0_PRIV22_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR0_PRIV22         RISC_PRIVCFGR0_PRIV22_Msk
#define RISC_PRIVCFGR0_PRIV23_Pos     (23U)
#define RISC_PRIVCFGR0_PRIV23_Msk     (0x1U << RISC_PRIVCFGR0_PRIV23_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR0_PRIV23         RISC_PRIVCFGR0_PRIV23_Msk
#define RISC_PRIVCFGR0_PRIV24_Pos     (24U)
#define RISC_PRIVCFGR0_PRIV24_Msk     (0x1U << RISC_PRIVCFGR0_PRIV24_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR0_PRIV24         RISC_PRIVCFGR0_PRIV24_Msk
#define RISC_PRIVCFGR0_PRIV25_Pos     (25U)
#define RISC_PRIVCFGR0_PRIV25_Msk     (0x1U << RISC_PRIVCFGR0_PRIV25_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR0_PRIV25         RISC_PRIVCFGR0_PRIV25_Msk
#define RISC_PRIVCFGR0_PRIV26_Pos     (26U)
#define RISC_PRIVCFGR0_PRIV26_Msk     (0x1U << RISC_PRIVCFGR0_PRIV26_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR0_PRIV26         RISC_PRIVCFGR0_PRIV26_Msk
#define RISC_PRIVCFGR0_PRIV27_Pos     (27U)
#define RISC_PRIVCFGR0_PRIV27_Msk     (0x1U << RISC_PRIVCFGR0_PRIV27_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR0_PRIV27         RISC_PRIVCFGR0_PRIV27_Msk
#define RISC_PRIVCFGR0_PRIV28_Pos     (28U)
#define RISC_PRIVCFGR0_PRIV28_Msk     (0x1U << RISC_PRIVCFGR0_PRIV28_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR0_PRIV28         RISC_PRIVCFGR0_PRIV28_Msk
#define RISC_PRIVCFGR0_PRIV29_Pos     (29U)
#define RISC_PRIVCFGR0_PRIV29_Msk     (0x1U << RISC_PRIVCFGR0_PRIV29_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR0_PRIV29         RISC_PRIVCFGR0_PRIV29_Msk
#define RISC_PRIVCFGR0_PRIV30_Pos     (30U)
#define RISC_PRIVCFGR0_PRIV30_Msk     (0x1U << RISC_PRIVCFGR0_PRIV30_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR0_PRIV30         RISC_PRIVCFGR0_PRIV30_Msk
#define RISC_PRIVCFGR0_PRIV31_Pos     (31U)
#define RISC_PRIVCFGR0_PRIV31_Msk     (0x1U << RISC_PRIVCFGR0_PRIV31_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR0_PRIV31         RISC_PRIVCFGR0_PRIV31_Msk

/*******************  Bits definition for RISC_PRIVCFGR1 register *************/
#define RISC_PRIVCFGR1_PRIV32_Pos     (0U)
#define RISC_PRIVCFGR1_PRIV32_Msk     (0x1U << RISC_PRIVCFGR1_PRIV32_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR1_PRIV32         RISC_PRIVCFGR1_PRIV32_Msk
#define RISC_PRIVCFGR1_PRIV33_Pos     (1U)
#define RISC_PRIVCFGR1_PRIV33_Msk     (0x1U << RISC_PRIVCFGR1_PRIV33_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR1_PRIV33         RISC_PRIVCFGR1_PRIV33_Msk
#define RISC_PRIVCFGR1_PRIV34_Pos     (2U)
#define RISC_PRIVCFGR1_PRIV34_Msk     (0x1U << RISC_PRIVCFGR1_PRIV34_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR1_PRIV34         RISC_PRIVCFGR1_PRIV34_Msk
#define RISC_PRIVCFGR1_PRIV35_Pos     (3U)
#define RISC_PRIVCFGR1_PRIV35_Msk     (0x1U << RISC_PRIVCFGR1_PRIV35_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR1_PRIV35         RISC_PRIVCFGR1_PRIV35_Msk
#define RISC_PRIVCFGR1_PRIV36_Pos     (4U)
#define RISC_PRIVCFGR1_PRIV36_Msk     (0x1U << RISC_PRIVCFGR1_PRIV36_Pos)       /*!< 0x00000010 */
#define RISC_PRIVCFGR1_PRIV36         RISC_PRIVCFGR1_PRIV36_Msk
#define RISC_PRIVCFGR1_PRIV37_Pos     (5U)
#define RISC_PRIVCFGR1_PRIV37_Msk     (0x1U << RISC_PRIVCFGR1_PRIV37_Pos)       /*!< 0x00000020 */
#define RISC_PRIVCFGR1_PRIV37         RISC_PRIVCFGR1_PRIV37_Msk
#define RISC_PRIVCFGR1_PRIV38_Pos     (6U)
#define RISC_PRIVCFGR1_PRIV38_Msk     (0x1U << RISC_PRIVCFGR1_PRIV38_Pos)       /*!< 0x00000040 */
#define RISC_PRIVCFGR1_PRIV38         RISC_PRIVCFGR1_PRIV38_Msk
#define RISC_PRIVCFGR1_PRIV39_Pos     (7U)
#define RISC_PRIVCFGR1_PRIV39_Msk     (0x1U << RISC_PRIVCFGR1_PRIV39_Pos)       /*!< 0x00000080 */
#define RISC_PRIVCFGR1_PRIV39         RISC_PRIVCFGR1_PRIV39_Msk
#define RISC_PRIVCFGR1_PRIV40_Pos     (8U)
#define RISC_PRIVCFGR1_PRIV40_Msk     (0x1U << RISC_PRIVCFGR1_PRIV40_Pos)       /*!< 0x00000100 */
#define RISC_PRIVCFGR1_PRIV40         RISC_PRIVCFGR1_PRIV40_Msk
#define RISC_PRIVCFGR1_PRIV41_Pos     (9U)
#define RISC_PRIVCFGR1_PRIV41_Msk     (0x1U << RISC_PRIVCFGR1_PRIV41_Pos)       /*!< 0x00000200 */
#define RISC_PRIVCFGR1_PRIV41         RISC_PRIVCFGR1_PRIV41_Msk
#define RISC_PRIVCFGR1_PRIV42_Pos     (10U)
#define RISC_PRIVCFGR1_PRIV42_Msk     (0x1U << RISC_PRIVCFGR1_PRIV42_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR1_PRIV42         RISC_PRIVCFGR1_PRIV42_Msk
#define RISC_PRIVCFGR1_PRIV43_Pos     (11U)
#define RISC_PRIVCFGR1_PRIV43_Msk     (0x1U << RISC_PRIVCFGR1_PRIV43_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR1_PRIV43         RISC_PRIVCFGR1_PRIV43_Msk
#define RISC_PRIVCFGR1_PRIV44_Pos     (12U)
#define RISC_PRIVCFGR1_PRIV44_Msk     (0x1U << RISC_PRIVCFGR1_PRIV44_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR1_PRIV44         RISC_PRIVCFGR1_PRIV44_Msk
#define RISC_PRIVCFGR1_PRIV45_Pos     (13U)
#define RISC_PRIVCFGR1_PRIV45_Msk     (0x1U << RISC_PRIVCFGR1_PRIV45_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR1_PRIV45         RISC_PRIVCFGR1_PRIV45_Msk
#define RISC_PRIVCFGR1_PRIV46_Pos     (14U)
#define RISC_PRIVCFGR1_PRIV46_Msk     (0x1U << RISC_PRIVCFGR1_PRIV46_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR1_PRIV46         RISC_PRIVCFGR1_PRIV46_Msk
#define RISC_PRIVCFGR1_PRIV47_Pos     (15U)
#define RISC_PRIVCFGR1_PRIV47_Msk     (0x1U << RISC_PRIVCFGR1_PRIV47_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR1_PRIV47         RISC_PRIVCFGR1_PRIV47_Msk
#define RISC_PRIVCFGR1_PRIV48_Pos     (16U)
#define RISC_PRIVCFGR1_PRIV48_Msk     (0x1U << RISC_PRIVCFGR1_PRIV48_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR1_PRIV48         RISC_PRIVCFGR1_PRIV48_Msk
#define RISC_PRIVCFGR1_PRIV49_Pos     (17U)
#define RISC_PRIVCFGR1_PRIV49_Msk     (0x1U << RISC_PRIVCFGR1_PRIV49_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR1_PRIV49         RISC_PRIVCFGR1_PRIV49_Msk
#define RISC_PRIVCFGR1_PRIV50_Pos     (18U)
#define RISC_PRIVCFGR1_PRIV50_Msk     (0x1U << RISC_PRIVCFGR1_PRIV50_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR1_PRIV50         RISC_PRIVCFGR1_PRIV50_Msk
#define RISC_PRIVCFGR1_PRIV51_Pos     (19U)
#define RISC_PRIVCFGR1_PRIV51_Msk     (0x1U << RISC_PRIVCFGR1_PRIV51_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR1_PRIV51         RISC_PRIVCFGR1_PRIV51_Msk
#define RISC_PRIVCFGR1_PRIV52_Pos     (20U)
#define RISC_PRIVCFGR1_PRIV52_Msk     (0x1U << RISC_PRIVCFGR1_PRIV52_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR1_PRIV52         RISC_PRIVCFGR1_PRIV52_Msk
#define RISC_PRIVCFGR1_PRIV53_Pos     (21U)
#define RISC_PRIVCFGR1_PRIV53_Msk     (0x1U << RISC_PRIVCFGR1_PRIV53_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR1_PRIV53         RISC_PRIVCFGR1_PRIV53_Msk
#define RISC_PRIVCFGR1_PRIV54_Pos     (22U)
#define RISC_PRIVCFGR1_PRIV54_Msk     (0x1U << RISC_PRIVCFGR1_PRIV54_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR1_PRIV54         RISC_PRIVCFGR1_PRIV54_Msk
#define RISC_PRIVCFGR1_PRIV55_Pos     (23U)
#define RISC_PRIVCFGR1_PRIV55_Msk     (0x1U << RISC_PRIVCFGR1_PRIV55_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR1_PRIV55         RISC_PRIVCFGR1_PRIV55_Msk
#define RISC_PRIVCFGR1_PRIV56_Pos     (24U)
#define RISC_PRIVCFGR1_PRIV56_Msk     (0x1U << RISC_PRIVCFGR1_PRIV56_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR1_PRIV56         RISC_PRIVCFGR1_PRIV56_Msk
#define RISC_PRIVCFGR1_PRIV57_Pos     (25U)
#define RISC_PRIVCFGR1_PRIV57_Msk     (0x1U << RISC_PRIVCFGR1_PRIV57_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR1_PRIV57         RISC_PRIVCFGR1_PRIV57_Msk
#define RISC_PRIVCFGR1_PRIV58_Pos     (26U)
#define RISC_PRIVCFGR1_PRIV58_Msk     (0x1U << RISC_PRIVCFGR1_PRIV58_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR1_PRIV58         RISC_PRIVCFGR1_PRIV58_Msk
#define RISC_PRIVCFGR1_PRIV59_Pos     (27U)
#define RISC_PRIVCFGR1_PRIV59_Msk     (0x1U << RISC_PRIVCFGR1_PRIV59_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR1_PRIV59         RISC_PRIVCFGR1_PRIV59_Msk
#define RISC_PRIVCFGR1_PRIV60_Pos     (28U)
#define RISC_PRIVCFGR1_PRIV60_Msk     (0x1U << RISC_PRIVCFGR1_PRIV60_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR1_PRIV60         RISC_PRIVCFGR1_PRIV60_Msk
#define RISC_PRIVCFGR1_PRIV61_Pos     (29U)
#define RISC_PRIVCFGR1_PRIV61_Msk     (0x1U << RISC_PRIVCFGR1_PRIV61_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR1_PRIV61         RISC_PRIVCFGR1_PRIV61_Msk
#define RISC_PRIVCFGR1_PRIV62_Pos     (30U)
#define RISC_PRIVCFGR1_PRIV62_Msk     (0x1U << RISC_PRIVCFGR1_PRIV62_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR1_PRIV62         RISC_PRIVCFGR1_PRIV62_Msk
#define RISC_PRIVCFGR1_PRIV63_Pos     (31U)
#define RISC_PRIVCFGR1_PRIV63_Msk     (0x1U << RISC_PRIVCFGR1_PRIV63_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR1_PRIV63         RISC_PRIVCFGR1_PRIV63_Msk

/*******************  Bits definition for RISC_PRIVCFGR2 register *************/
#define RISC_PRIVCFGR2_PRIV64_Pos     (0U)
#define RISC_PRIVCFGR2_PRIV64_Msk     (0x1U << RISC_PRIVCFGR2_PRIV64_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR2_PRIV64         RISC_PRIVCFGR2_PRIV64_Msk
#define RISC_PRIVCFGR2_PRIV65_Pos     (1U)
#define RISC_PRIVCFGR2_PRIV65_Msk     (0x1U << RISC_PRIVCFGR2_PRIV65_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR2_PRIV65         RISC_PRIVCFGR2_PRIV65_Msk
#define RISC_PRIVCFGR2_PRIV66_Pos     (2U)
#define RISC_PRIVCFGR2_PRIV66_Msk     (0x1U << RISC_PRIVCFGR2_PRIV66_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR2_PRIV66         RISC_PRIVCFGR2_PRIV66_Msk
#define RISC_PRIVCFGR2_PRIV67_Pos     (3U)
#define RISC_PRIVCFGR2_PRIV67_Msk     (0x1U << RISC_PRIVCFGR2_PRIV67_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR2_PRIV67         RISC_PRIVCFGR2_PRIV67_Msk
#define RISC_PRIVCFGR2_PRIV68_Pos     (4U)
#define RISC_PRIVCFGR2_PRIV68_Msk     (0x1U << RISC_PRIVCFGR2_PRIV68_Pos)       /*!< 0x00000010 */
#define RISC_PRIVCFGR2_PRIV68         RISC_PRIVCFGR2_PRIV68_Msk
#define RISC_PRIVCFGR2_PRIV69_Pos     (5U)
#define RISC_PRIVCFGR2_PRIV69_Msk     (0x1U << RISC_PRIVCFGR2_PRIV69_Pos)       /*!< 0x00000020 */
#define RISC_PRIVCFGR2_PRIV69         RISC_PRIVCFGR2_PRIV69_Msk
#define RISC_PRIVCFGR2_PRIV70_Pos     (6U)
#define RISC_PRIVCFGR2_PRIV70_Msk     (0x1U << RISC_PRIVCFGR2_PRIV70_Pos)       /*!< 0x00000040 */
#define RISC_PRIVCFGR2_PRIV70         RISC_PRIVCFGR2_PRIV70_Msk
#define RISC_PRIVCFGR2_PRIV71_Pos     (7U)
#define RISC_PRIVCFGR2_PRIV71_Msk     (0x1U << RISC_PRIVCFGR2_PRIV71_Pos)       /*!< 0x00000080 */
#define RISC_PRIVCFGR2_PRIV71          RISC_PRIVCFGR2_PRIV71_Msk
#define RISC_PRIVCFGR2_PRIV72_Pos     (8U)
#define RISC_PRIVCFGR2_PRIV72_Msk     (0x1U << RISC_PRIVCFGR2_PRIV72_Pos)       /*!< 0x00000100 */
#define RISC_PRIVCFGR2_PRIV72         RISC_PRIVCFGR2_PRIV72_Msk
#define RISC_PRIVCFGR2_PRIV73_Pos     (9U)
#define RISC_PRIVCFGR2_PRIV73_Msk     (0x1U << RISC_PRIVCFGR2_PRIV73_Pos)       /*!< 0x00000200 */
#define RISC_PRIVCFGR2_PRIV73         RISC_PRIVCFGR2_PRIV73_Msk
#define RISC_PRIVCFGR2_PRIV74_Pos     (10U)
#define RISC_PRIVCFGR2_PRIV74_Msk     (0x1U << RISC_PRIVCFGR2_PRIV74_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR2_PRIV74         RISC_PRIVCFGR2_PRIV74_Msk
#define RISC_PRIVCFGR2_PRIV75_Pos     (11U)
#define RISC_PRIVCFGR2_PRIV75_Msk     (0x1U << RISC_PRIVCFGR2_PRIV75_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR2_PRIV75         RISC_PRIVCFGR2_PRIV75_Msk
#define RISC_PRIVCFGR2_PRIV76_Pos     (12U)
#define RISC_PRIVCFGR2_PRIV76_Msk     (0x1U << RISC_PRIVCFGR2_PRIV76_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR2_PRIV76         RISC_PRIVCFGR2_PRIV76_Msk
#define RISC_PRIVCFGR2_PRIV77_Pos     (13U)
#define RISC_PRIVCFGR2_PRIV77_Msk     (0x1U << RISC_PRIVCFGR2_PRIV77_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR2_PRIV77         RISC_PRIVCFGR2_PRIV77_Msk
#define RISC_PRIVCFGR2_PRIV78_Pos     (14U)
#define RISC_PRIVCFGR2_PRIV78_Msk     (0x1U << RISC_PRIVCFGR2_PRIV78_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR2_PRIV78         RISC_PRIVCFGR2_PRIV78_Msk
#define RISC_PRIVCFGR2_PRIV79_Pos     (15U)
#define RISC_PRIVCFGR2_PRIV79_Msk     (0x1U << RISC_PRIVCFGR2_PRIV79_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR2_PRIV79         RISC_PRIVCFGR2_PRIV79_Msk
#define RISC_PRIVCFGR2_PRIV80_Pos     (16U)
#define RISC_PRIVCFGR2_PRIV80_Msk     (0x1U << RISC_PRIVCFGR2_PRIV80_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR2_PRIV80         RISC_PRIVCFGR2_PRIV80_Msk
#define RISC_PRIVCFGR2_PRIV81_Pos     (17U)
#define RISC_PRIVCFGR2_PRIV81_Msk     (0x1U << RISC_PRIVCFGR2_PRIV81_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR2_PRIV81         RISC_PRIVCFGR2_PRIV81_Msk
#define RISC_PRIVCFGR2_PRIV82_Pos     (18U)
#define RISC_PRIVCFGR2_PRIV82_Msk     (0x1U << RISC_PRIVCFGR2_PRIV82_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR2_PRIV82         RISC_PRIVCFGR2_PRIV82_Msk
#define RISC_PRIVCFGR2_PRIV83_Pos     (19U)
#define RISC_PRIVCFGR2_PRIV83_Msk     (0x1U << RISC_PRIVCFGR2_PRIV83_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR2_PRIV83         RISC_PRIVCFGR2_PRIV83_Msk
#define RISC_PRIVCFGR2_PRIV84_Pos     (20U)
#define RISC_PRIVCFGR2_PRIV84_Msk     (0x1U << RISC_PRIVCFGR2_PRIV84_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR2_PRIV84         RISC_PRIVCFGR2_PRIV84_Msk
#define RISC_PRIVCFGR2_PRIV85_Pos     (21U)
#define RISC_PRIVCFGR2_PRIV85_Msk     (0x1U << RISC_PRIVCFGR2_PRIV85_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR2_PRIV85         RISC_PRIVCFGR2_PRIV85_Msk
#define RISC_PRIVCFGR2_PRIV86_Pos     (22U)
#define RISC_PRIVCFGR2_PRIV86_Msk     (0x1U << RISC_PRIVCFGR2_PRIV86_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR2_PRIV86         RISC_PRIVCFGR2_PRIV86_Msk
#define RISC_PRIVCFGR2_PRIV87_Pos     (23U)
#define RISC_PRIVCFGR2_PRIV87_Msk     (0x1U << RISC_PRIVCFGR2_PRIV87_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR2_PRIV87         RISC_PRIVCFGR2_PRIV87_Msk
#define RISC_PRIVCFGR2_PRIV88_Pos     (24U)
#define RISC_PRIVCFGR2_PRIV88_Msk     (0x1U << RISC_PRIVCFGR2_PRIV88_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR2_PRIV88         RISC_PRIVCFGR2_PRIV88_Msk
#define RISC_PRIVCFGR2_PRIV89_Pos     (25U)
#define RISC_PRIVCFGR2_PRIV89_Msk     (0x1U << RISC_PRIVCFGR2_PRIV89_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR2_PRIV89         RISC_PRIVCFGR2_PRIV89_Msk
#define RISC_PRIVCFGR2_PRIV90_Pos     (26U)
#define RISC_PRIVCFGR2_PRIV90_Msk     (0x1U << RISC_PRIVCFGR2_PRIV90_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR2_PRIV90         RISC_PRIVCFGR2_PRIV90_Msk
#define RISC_PRIVCFGR2_PRIV91_Pos     (27U)
#define RISC_PRIVCFGR2_PRIV91_Msk     (0x1U << RISC_PRIVCFGR2_PRIV91_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR2_PRIV91         RISC_PRIVCFGR2_PRIV91_Msk
#define RISC_PRIVCFGR2_PRIV92_Pos     (28U)
#define RISC_PRIVCFGR2_PRIV92_Msk     (0x1U << RISC_PRIVCFGR2_PRIV92_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR2_PRIV92         RISC_PRIVCFGR2_PRIV92_Msk
#define RISC_PRIVCFGR2_PRIV93_Pos     (29U)
#define RISC_PRIVCFGR2_PRIV93_Msk     (0x1U << RISC_PRIVCFGR2_PRIV93_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR2_PRIV93         RISC_PRIVCFGR2_PRIV93_Msk
#define RISC_PRIVCFGR2_PRIV94_Pos     (30U)
#define RISC_PRIVCFGR2_PRIV94_Msk     (0x1U << RISC_PRIVCFGR2_PRIV94_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR2_PRIV94         RISC_PRIVCFGR2_PRIV94_Msk
#define RISC_PRIVCFGR2_PRIV95_Pos     (31U)
#define RISC_PRIVCFGR2_PRIV95_Msk     (0x1U << RISC_PRIVCFGR2_PRIV95_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR2_PRIV95         RISC_PRIVCFGR2_PRIV95_Msk

/*******************  Bits definition for RISC_PRIVCFGR3 register *************/
#define RISC_PRIVCFGR3_PRIV96_Pos     (0U)
#define RISC_PRIVCFGR3_PRIV96_Msk     (0x1U << RISC_PRIVCFGR3_PRIV96_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR3_PRIV96         RISC_PRIVCFGR3_PRIV0_Msk
#define RISC_PRIVCFGR3_PRIV97_Pos     (1U)
#define RISC_PRIVCFGR3_PRIV97_Msk     (0x1U << RISC_PRIVCFGR3_PRIV97_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR3_PRIV97         RISC_PRIVCFGR3_PRIV97_Msk
#define RISC_PRIVCFGR3_PRIV98_Pos     (2U)
#define RISC_PRIVCFGR3_PRIV98_Msk     (0x1U << RISC_PRIVCFGR3_PRIV98_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR3_PRIV98         RISC_PRIVCFGR3_PRIV98_Msk
#define RISC_PRIVCFGR3_PRIV99_Pos     (3U)
#define RISC_PRIVCFGR3_PRIV99_Msk     (0x1U << RISC_PRIVCFGR3_PRIV99_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR3_PRIV99         RISC_PRIVCFGR3_PRIV99_Msk
#define RISC_PRIVCFGR3_PRIV100_Pos    (4U)
#define RISC_PRIVCFGR3_PRIV100_Msk    (0x1U << RISC_PRIVCFGR3_PRIV100_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR3_PRIV100        RISC_PRIVCFGR3_PRIV100_Msk
#define RISC_PRIVCFGR3_PRIV101_Pos    (5U)
#define RISC_PRIVCFGR3_PRIV101_Msk    (0x1U << RISC_PRIVCFGR3_PRIV101_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR3_PRIV101        RISC_PRIVCFGR3_PRIV101_Msk
#define RISC_PRIVCFGR3_PRIV102_Pos    (6U)
#define RISC_PRIVCFGR3_PRIV102_Msk    (0x1U << RISC_PRIVCFGR3_PRIV102_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR3_PRIV102        RISC_PRIVCFGR3_PRIV102_Msk
#define RISC_PRIVCFGR3_PRIV103_Pos    (7U)
#define RISC_PRIVCFGR3_PRIV103_Msk    (0x1U << RISC_PRIVCFGR3_PRIV103_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR3_PRIV103        RISC_PRIVCFGR3_PRIV103_Msk
#define RISC_PRIVCFGR3_PRIV104_Pos    (8U)
#define RISC_PRIVCFGR3_PRIV104_Msk    (0x1U << RISC_PRIVCFGR3_PRIV104_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR3_PRIV104        RISC_PRIVCFGR3_PRIV104_Msk
#define RISC_PRIVCFGR3_PRIV105_Pos    (9U)
#define RISC_PRIVCFGR3_PRIV105_Msk    (0x1U << RISC_PRIVCFGR3_PRIV105_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR3_PRIV105        RISC_PRIVCFGR3_PRIV105_Msk
#define RISC_PRIVCFGR3_PRIV106_Pos    (10U)
#define RISC_PRIVCFGR3_PRIV106_Msk    (0x1U << RISC_PRIVCFGR3_PRIV106_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR3_PRIV106        RISC_PRIVCFGR3_PRIV106_Msk
#define RISC_PRIVCFGR3_PRIV107_Pos    (11U)
#define RISC_PRIVCFGR3_PRIV107_Msk    (0x1U << RISC_PRIVCFGR3_PRIV107_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR3_PRIV107        RISC_PRIVCFGR3_PRIV107_Msk
#define RISC_PRIVCFGR3_PRIV108_Pos    (12U)
#define RISC_PRIVCFGR3_PRIV108_Msk    (0x1U << RISC_PRIVCFGR3_PRIV108_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR3_PRIV108        RISC_PRIVCFGR3_PRIV108_Msk
#define RISC_PRIVCFGR3_PRIV109_Pos    (13U)
#define RISC_PRIVCFGR3_PRIV109_Msk    (0x1U << RISC_PRIVCFGR3_PRIV109_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR3_PRIV109        RISC_PRIVCFGR3_PRIV109_Msk
#define RISC_PRIVCFGR3_PRIV110_Pos    (14U)
#define RISC_PRIVCFGR3_PRIV110_Msk    (0x1U << RISC_PRIVCFGR3_PRIV110_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR3_PRIV110        RISC_PRIVCFGR3_PRIV110_Msk
#define RISC_PRIVCFGR3_PRIV111_Pos    (15U)
#define RISC_PRIVCFGR3_PRIV111_Msk    (0x1U << RISC_PRIVCFGR3_PRIV111_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR3_PRIV111        RISC_PRIVCFGR3_PRIV111_Msk
#define RISC_PRIVCFGR3_PRIV112_Pos    (16U)
#define RISC_PRIVCFGR3_PRIV112_Msk    (0x1U << RISC_PRIVCFGR3_PRIV112_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR3_PRIV112        RISC_PRIVCFGR3_PRIV112_Msk
#define RISC_PRIVCFGR3_PRIV113_Pos    (17U)
#define RISC_PRIVCFGR3_PRIV113_Msk    (0x1U << RISC_PRIVCFGR3_PRIV113_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR3_PRIV113        RISC_PRIVCFGR3_PRIV113_Msk
#define RISC_PRIVCFGR3_PRIV114_Pos    (18U)
#define RISC_PRIVCFGR3_PRIV114_Msk    (0x1U << RISC_PRIVCFGR3_PRIV114_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR3_PRIV114        RISC_PRIVCFGR3_PRIV114_Msk
#define RISC_PRIVCFGR3_PRIV115_Pos    (19U)
#define RISC_PRIVCFGR3_PRIV115_Msk    (0x1U << RISC_PRIVCFGR3_PRIV115_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR3_PRIV115        RISC_PRIVCFGR3_PRIV115_Msk
#define RISC_PRIVCFGR3_PRIV116_Pos    (20U)
#define RISC_PRIVCFGR3_PRIV116_Msk    (0x1U << RISC_PRIVCFGR3_PRIV116_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR3_PRIV116        RISC_PRIVCFGR3_PRIV116_Msk
#define RISC_PRIVCFGR3_PRIV117_Pos    (21U)
#define RISC_PRIVCFGR3_PRIV117_Msk    (0x1U << RISC_PRIVCFGR3_PRIV117_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR3_PRIV117        RISC_PRIVCFGR3_PRIV117_Msk
#define RISC_PRIVCFGR3_PRIV118_Pos    (22U)
#define RISC_PRIVCFGR3_PRIV118_Msk    (0x1U << RISC_PRIVCFGR3_PRIV118_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR3_PRIV118        RISC_PRIVCFGR3_PRIV118_Msk
#define RISC_PRIVCFGR3_PRIV119_Pos    (23U)
#define RISC_PRIVCFGR3_PRIV119_Msk    (0x1U << RISC_PRIVCFGR3_PRIV119_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR3_PRIV119        RISC_PRIVCFGR3_PRIV119_Msk
#define RISC_PRIVCFGR3_PRIV120_Pos    (24U)
#define RISC_PRIVCFGR3_PRIV120_Msk    (0x1U << RISC_PRIVCFGR3_PRIV120_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR3_PRIV120        RISC_PRIVCFGR3_PRIV120_Msk
#define RISC_PRIVCFGR3_PRIV121_Pos    (25U)
#define RISC_PRIVCFGR3_PRIV121_Msk    (0x1U << RISC_PRIVCFGR3_PRIV121_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR3_PRIV121        RISC_PRIVCFGR3_PRIV121_Msk
#define RISC_PRIVCFGR3_PRIV122_Pos    (26U)
#define RISC_PRIVCFGR3_PRIV122_Msk    (0x1U << RISC_PRIVCFGR3_PRIV122_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR3_PRIV122        RISC_PRIVCFGR3_PRIV122_Msk
#define RISC_PRIVCFGR3_PRIV123_Pos    (27U)
#define RISC_PRIVCFGR3_PRIV123_Msk    (0x1U << RISC_PRIVCFGR3_PRIV123_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR3_PRIV123        RISC_PRIVCFGR3_PRIV123_Msk
#define RISC_PRIVCFGR3_PRIV124_Pos    (28U)
#define RISC_PRIVCFGR3_PRIV124_Msk    (0x1U << RISC_PRIVCFGR3_PRIV124_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR3_PRIV124        RISC_PRIVCFGR3_PRIV124_Msk
#define RISC_PRIVCFGR3_PRIV125_Pos    (29U)
#define RISC_PRIVCFGR3_PRIV125_Msk    (0x1U << RISC_PRIVCFGR3_PRIV125_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR3_PRIV125        RISC_PRIVCFGR3_PRIV125_Msk
#define RISC_PRIVCFGR3_PRIV126_Pos    (30U)
#define RISC_PRIVCFGR3_PRIV126_Msk    (0x1U << RISC_PRIVCFGR3_PRIV126_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR3_PRIV126        RISC_PRIVCFGR3_PRIV126_Msk
#define RISC_PRIVCFGR3_PRIV127_Pos    (31U)
#define RISC_PRIVCFGR3_PRIV127_Msk    (0x1U << RISC_PRIVCFGR3_PRIV127_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR3_PRIV127        RISC_PRIVCFGR3_PRIV127_Msk

/*******************  Bits definition for RISC_PRIVCFGR4 register *************/
#define RISC_PRIVCFGR4_PRIV128_Pos    (0U)
#define RISC_PRIVCFGR4_PRIV128_Msk    (0x1U << RISC_PRIVCFGR4_PRIV128_Pos)      /*!< 0x00000001 */
#define RISC_PRIVCFGR4_PRIV128        RISC_PRIVCFGR4_PRIV128_Msk
#define RISC_PRIVCFGR4_PRIV129_Pos    (1U)
#define RISC_PRIVCFGR4_PRIV129_Msk    (0x1U << RISC_PRIVCFGR4_PRIV129_Pos)      /*!< 0x00000002 */
#define RISC_PRIVCFGR4_PRIV129        RISC_PRIVCFGR4_PRIV129_Msk
#define RISC_PRIVCFGR4_PRIV130_Pos    (2U)
#define RISC_PRIVCFGR4_PRIV130_Msk    (0x1U << RISC_PRIVCFGR4_PRIV130_Pos)      /*!< 0x00000004 */
#define RISC_PRIVCFGR4_PRIV130        RISC_PRIVCFGR4_PRIV130_Msk
#define RISC_PRIVCFGR4_PRIV131_Pos    (3U)
#define RISC_PRIVCFGR4_PRIV131_Msk    (0x1U << RISC_PRIVCFGR4_PRIV131_Pos)      /*!< 0x00000008 */
#define RISC_PRIVCFGR4_PRIV131        RISC_PRIVCFGR4_PRIV131_Msk
#define RISC_PRIVCFGR4_PRIV132_Pos    (4U)
#define RISC_PRIVCFGR4_PRIV132_Msk    (0x1U << RISC_PRIVCFGR4_PRIV132_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR4_PRIV132        RISC_PRIVCFGR4_PRIV132_Msk
#define RISC_PRIVCFGR4_PRIV133_Pos    (5U)
#define RISC_PRIVCFGR4_PRIV133_Msk    (0x1U << RISC_PRIVCFGR4_PRIV133_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR4_PRIV133        RISC_PRIVCFGR4_PRIV133_Msk
#define RISC_PRIVCFGR4_PRIV134_Pos    (6U)
#define RISC_PRIVCFGR4_PRIV134_Msk    (0x1U << RISC_PRIVCFGR4_PRIV134_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR4_PRIV134        RISC_PRIVCFGR4_PRIV134_Msk
#define RISC_PRIVCFGR4_PRIV135_Pos    (7U)
#define RISC_PRIVCFGR4_PRIV135_Msk    (0x1U << RISC_PRIVCFGR4_PRIV135_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR4_PRIV135        RISC_PRIVCFGR4_PRIV135_Msk
#define RISC_PRIVCFGR4_PRIV136_Pos    (8U)
#define RISC_PRIVCFGR4_PRIV136_Msk    (0x1U << RISC_PRIVCFGR4_PRIV136_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR4_PRIV136        RISC_PRIVCFGR4_PRIV136_Msk
#define RISC_PRIVCFGR4_PRIV137_Pos    (9U)
#define RISC_PRIVCFGR4_PRIV137_Msk    (0x1U << RISC_PRIVCFGR4_PRIV137_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR4_PRIV137        RISC_PRIVCFGR4_PRIV137_Msk
#define RISC_PRIVCFGR4_PRIV138_Pos    (10U)
#define RISC_PRIVCFGR4_PRIV138_Msk    (0x1U << RISC_PRIVCFGR4_PRIV138_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR4_PRIV138        RISC_PRIVCFGR4_PRIV138_Msk
#define RISC_PRIVCFGR4_PRIV139_Pos    (11U)
#define RISC_PRIVCFGR4_PRIV139_Msk    (0x1U << RISC_PRIVCFGR4_PRIV139_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR4_PRIV139        RISC_PRIVCFGR4_PRIV139_Msk
#define RISC_PRIVCFGR4_PRIV140_Pos    (12U)
#define RISC_PRIVCFGR4_PRIV140_Msk    (0x1U << RISC_PRIVCFGR4_PRIV140_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR4_PRIV140        RISC_PRIVCFGR4_PRIV140_Msk
#define RISC_PRIVCFGR4_PRIV141_Pos    (13U)
#define RISC_PRIVCFGR4_PRIV141_Msk    (0x1U << RISC_PRIVCFGR4_PRIV141_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR4_PRIV141        RISC_PRIVCFGR4_PRIV141_Msk
#define RISC_PRIVCFGR4_PRIV142_Pos    (14U)
#define RISC_PRIVCFGR4_PRIV142_Msk    (0x1U << RISC_PRIVCFGR4_PRIV142_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR4_PRIV142        RISC_PRIVCFGR4_PRIV142_Msk
#define RISC_PRIVCFGR4_PRIV143_Pos    (15U)
#define RISC_PRIVCFGR4_PRIV143_Msk    (0x1U << RISC_PRIVCFGR4_PRIV143_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR4_PRIV143        RISC_PRIVCFGR4_PRIV143_Msk
#define RISC_PRIVCFGR4_PRIV144_Pos    (16U)
#define RISC_PRIVCFGR4_PRIV144_Msk    (0x1U << RISC_PRIVCFGR4_PRIV144_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR4_PRIV144        RISC_PRIVCFGR4_PRIV144_Msk
#define RISC_PRIVCFGR4_PRIV145_Pos    (17U)
#define RISC_PRIVCFGR4_PRIV145_Msk    (0x1U << RISC_PRIVCFGR4_PRIV145_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR4_PRIV145        RISC_PRIVCFGR4_PRIV145_Msk
#define RISC_PRIVCFGR4_PRIV146_Pos    (18U)
#define RISC_PRIVCFGR4_PRIV146_Msk    (0x1U << RISC_PRIVCFGR4_PRIV146_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR4_PRIV146        RISC_PRIVCFGR4_PRIV146_Msk
#define RISC_PRIVCFGR4_PRIV147_Pos    (19U)
#define RISC_PRIVCFGR4_PRIV147_Msk    (0x1U << RISC_PRIVCFGR4_PRIV147_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR4_PRIV147        RISC_PRIVCFGR4_PRIV147_Msk
#define RISC_PRIVCFGR4_PRIV148_Pos    (20U)
#define RISC_PRIVCFGR4_PRIV148_Msk    (0x1U << RISC_PRIVCFGR4_PRIV148_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR4_PRIV148        RISC_PRIVCFGR4_PRIV148_Msk
#define RISC_PRIVCFGR4_PRIV149_Pos    (21U)
#define RISC_PRIVCFGR4_PRIV149_Msk    (0x1U << RISC_PRIVCFGR4_PRIV149_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR4_PRIV149        RISC_PRIVCFGR4_PRIV149_Msk
#define RISC_PRIVCFGR4_PRIV150_Pos    (22U)
#define RISC_PRIVCFGR4_PRIV150_Msk    (0x1U << RISC_PRIVCFGR4_PRIV150_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR4_PRIV150        RISC_PRIVCFGR4_PRIV150_Msk
#define RISC_PRIVCFGR4_PRIV151_Pos    (23U)
#define RISC_PRIVCFGR4_PRIV151_Msk    (0x1U << RISC_PRIVCFGR4_PRIV151_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR4_PRIV151        RISC_PRIVCFGR4_PRIV151_Msk
#define RISC_PRIVCFGR4_PRIV152_Pos    (24U)
#define RISC_PRIVCFGR4_PRIV152_Msk    (0x1U << RISC_PRIVCFGR4_PRIV152_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR4_PRIV152        RISC_PRIVCFGR4_PRIV152_Msk
#define RISC_PRIVCFGR4_PRIV153_Pos    (25U)
#define RISC_PRIVCFGR4_PRIV153_Msk    (0x1U << RISC_PRIVCFGR4_PRIV153_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR4_PRIV153        RISC_PRIVCFGR4_PRIV153_Msk
#define RISC_PRIVCFGR4_PRIV154_Pos    (26U)
#define RISC_PRIVCFGR4_PRIV154_Msk    (0x1U << RISC_PRIVCFGR4_PRIV154_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR4_PRIV154        RISC_PRIVCFGR4_PRIV154_Msk
#define RISC_PRIVCFGR4_PRIV155_Pos    (27U)
#define RISC_PRIVCFGR4_PRIV155_Msk    (0x1U << RISC_PRIVCFGR4_PRIV155_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR4_PRIV155        RISC_PRIVCFGR4_PRIV155_Msk
#define RISC_PRIVCFGR4_PRIV156_Pos    (28U)
#define RISC_PRIVCFGR4_PRIV156_Msk    (0x1U << RISC_PRIVCFGR4_PRIV156_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR4_PRIV156        RISC_PRIVCFGR4_PRIV156_Msk
#define RISC_PRIVCFGR4_PRIV157_Pos    (29U)
#define RISC_PRIVCFGR4_PRIV157_Msk    (0x1U << RISC_PRIVCFGR4_PRIV157_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR4_PRIV157        RISC_PRIVCFGR4_PRIV157_Msk
#define RISC_PRIVCFGR4_PRIV158_Pos    (30U)
#define RISC_PRIVCFGR4_PRIV158_Msk    (0x1U << RISC_PRIVCFGR4_PRIV158_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR4_PRIV158        RISC_PRIVCFGR4_PRIV158_Msk
#define RISC_PRIVCFGR4_PRIV159_Pos    (31U)
#define RISC_PRIVCFGR4_PRIV159_Msk    (0x1U << RISC_PRIVCFGR4_PRIV159_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR4_PRIV159        RISC_PRIVCFGR4_PRIV159_Msk

/*******************  Bits definition for RISC_PRIVCFGR5 register *************/
#define RISC_PRIVCFGR5_PRIV160_Pos    (0U)
#define RISC_PRIVCFGR5_PRIV160_Msk    (0x1U << RISC_PRIVCFGR5_PRIV160_Pos)      /*!< 0x00000001 */
#define RISC_PRIVCFGR5_PRIV160        RISC_PRIVCFGR5_PRIV160_Msk
#define RISC_PRIVCFGR5_PRIV161_Pos    (1U)
#define RISC_PRIVCFGR5_PRIV161_Msk    (0x1U << RISC_PRIVCFGR5_PRIV161_Pos)      /*!< 0x00000002 */
#define RISC_PRIVCFGR5_PRIV161        RISC_PRIVCFGR5_PRIV161_Msk
#define RISC_PRIVCFGR5_PRIV162_Pos    (2U)
#define RISC_PRIVCFGR5_PRIV162_Msk    (0x1U << RISC_PRIVCFGR5_PRIV162_Pos)      /*!< 0x00000004 */
#define RISC_PRIVCFGR5_PRIV162        RISC_PRIVCFGR5_PRIV162_Msk
#define RISC_PRIVCFGR5_PRIV163_Pos    (3U)
#define RISC_PRIVCFGR5_PRIV163_Msk    (0x1U << RISC_PRIVCFGR5_PRIV163_Pos)      /*!< 0x00000008 */
#define RISC_PRIVCFGR5_PRIV163        RISC_PRIVCFGR5_PRIV163_Msk
#define RISC_PRIVCFGR5_PRIV164_Pos    (4U)
#define RISC_PRIVCFGR5_PRIV164_Msk    (0x1U << RISC_PRIVCFGR5_PRIV164_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR5_PRIV164        RISC_PRIVCFGR5_PRIV164_Msk
#define RISC_PRIVCFGR5_PRIV165_Pos    (5U)
#define RISC_PRIVCFGR5_PRIV165_Msk    (0x1U << RISC_PRIVCFGR5_PRIV165_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR5_PRIV165        RISC_PRIVCFGR5_PRIV165_Msk
#define RISC_PRIVCFGR5_PRIV166_Pos    (6U)
#define RISC_PRIVCFGR5_PRIV166_Msk    (0x1U << RISC_PRIVCFGR5_PRIV166_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR5_PRIV166        RISC_PRIVCFGR5_PRIV166_Msk
#define RISC_PRIVCFGR5_PRIV167_Pos    (7U)
#define RISC_PRIVCFGR5_PRIV167_Msk    (0x1U << RISC_PRIVCFGR5_PRIV167_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR5_PRIV167        RISC_PRIVCFGR5_PRIV167_Msk
#define RISC_PRIVCFGR5_PRIV168_Pos    (8U)
#define RISC_PRIVCFGR5_PRIV168_Msk    (0x1U << RISC_PRIVCFGR5_PRIV168_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR5_PRIV168        RISC_PRIVCFGR5_PRIV168_Msk
#define RISC_PRIVCFGR5_PRIV169_Pos    (9U)
#define RISC_PRIVCFGR5_PRIV169_Msk    (0x1U << RISC_PRIVCFGR5_PRIV169_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR5_PRIV169        RISC_PRIVCFGR5_PRIV169_Msk
#define RISC_PRIVCFGR5_PRIV170_Pos    (10U)
#define RISC_PRIVCFGR5_PRIV170_Msk    (0x1U << RISC_PRIVCFGR5_PRIV170_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR5_PRIV170        RISC_PRIVCFGR5_PRIV170_Msk
#define RISC_PRIVCFGR5_PRIV171_Pos    (11U)
#define RISC_PRIVCFGR5_PRIV171_Msk    (0x1U << RISC_PRIVCFGR5_PRIV171_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR5_PRIV171        RISC_PRIVCFGR5_PRIV171_Msk
#define RISC_PRIVCFGR5_PRIV172_Pos    (12U)
#define RISC_PRIVCFGR5_PRIV172_Msk    (0x1U << RISC_PRIVCFGR5_PRIV172_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR5_PRIV172        RISC_PRIVCFGR5_PRIV172_Msk
#define RISC_PRIVCFGR5_PRIV173_Pos    (13U)
#define RISC_PRIVCFGR5_PRIV173_Msk    (0x1U << RISC_PRIVCFGR5_PRIV173_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR5_PRIV173        RISC_PRIVCFGR5_PRIV173_Msk
#define RISC_PRIVCFGR5_PRIV174_Pos    (14U)
#define RISC_PRIVCFGR5_PRIV174_Msk    (0x1U << RISC_PRIVCFGR5_PRIV174_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR5_PRIV174        RISC_PRIVCFGR5_PRIV174_Msk
#define RISC_PRIVCFGR5_PRIV175_Pos    (15U)
#define RISC_PRIVCFGR5_PRIV175_Msk    (0x1U << RISC_PRIVCFGR5_PRIV175_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR5_PRIV175        RISC_PRIVCFGR5_PRIV175_Msk
#define RISC_PRIVCFGR5_PRIV176_Pos    (16U)
#define RISC_PRIVCFGR5_PRIV176_Msk    (0x1U << RISC_PRIVCFGR5_PRIV176_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR5_PRIV176        RISC_PRIVCFGR5_PRIV176_Msk
#define RISC_PRIVCFGR5_PRIV177_Pos    (17U)
#define RISC_PRIVCFGR5_PRIV177_Msk    (0x1U << RISC_PRIVCFGR5_PRIV177_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR5_PRIV177        RISC_PRIVCFGR5_PRIV177_Msk
#define RISC_PRIVCFGR5_PRIV178_Pos    (18U)
#define RISC_PRIVCFGR5_PRIV178_Msk    (0x1U << RISC_PRIVCFGR5_PRIV178_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR5_PRIV178        RISC_PRIVCFGR5_PRIV178_Msk
#define RISC_PRIVCFGR5_PRIV179_Pos    (19U)
#define RISC_PRIVCFGR5_PRIV179_Msk    (0x1U << RISC_PRIVCFGR5_PRIV179_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR5_PRIV179        RISC_PRIVCFGR5_PRIV179_Msk
#define RISC_PRIVCFGR5_PRIV180_Pos    (20U)
#define RISC_PRIVCFGR5_PRIV180_Msk    (0x1U << RISC_PRIVCFGR5_PRIV180_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR5_PRIV180        RISC_PRIVCFGR5_PRIV180_Msk
#define RISC_PRIVCFGR5_PRIV181_Pos    (21U)
#define RISC_PRIVCFGR5_PRIV181_Msk    (0x1U << RISC_PRIVCFGR5_PRIV181_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR5_PRIV181        RISC_PRIVCFGR5_PRIV181_Msk
#define RISC_PRIVCFGR5_PRIV182_Pos    (22U)
#define RISC_PRIVCFGR5_PRIV182_Msk    (0x1U << RISC_PRIVCFGR5_PRIV182_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR5_PRIV182        RISC_PRIVCFGR5_PRIV182_Msk
#define RISC_PRIVCFGR5_PRIV183_Pos    (23U)
#define RISC_PRIVCFGR5_PRIV183_Msk    (0x1U << RISC_PRIVCFGR5_PRIV183_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR5_PRIV183        RISC_PRIVCFGR5_PRIV183_Msk
#define RISC_PRIVCFGR5_PRIV184_Pos    (24U)
#define RISC_PRIVCFGR5_PRIV184_Msk    (0x1U << RISC_PRIVCFGR5_PRIV184_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR5_PRIV184        RISC_PRIVCFGR5_PRIV184_Msk
#define RISC_PRIVCFGR5_PRIV185_Pos    (25U)
#define RISC_PRIVCFGR5_PRIV185_Msk    (0x1U << RISC_PRIVCFGR5_PRIV185_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR5_PRIV185        RISC_PRIVCFGR5_PRIV185_Msk
#define RISC_PRIVCFGR5_PRIV186_Pos    (26U)
#define RISC_PRIVCFGR5_PRIV186_Msk    (0x1U << RISC_PRIVCFGR5_PRIV186_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR5_PRIV186        RISC_PRIVCFGR5_PRIV186_Msk
#define RISC_PRIVCFGR5_PRIV187_Pos    (27U)
#define RISC_PRIVCFGR5_PRIV187_Msk    (0x1U << RISC_PRIVCFGR5_PRIV187_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR5_PRIV187        RISC_PRIVCFGR5_PRIV187_Msk
#define RISC_PRIVCFGR5_PRIV188_Pos    (28U)
#define RISC_PRIVCFGR5_PRIV188_Msk    (0x1U << RISC_PRIVCFGR5_PRIV188_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR5_PRIV188        RISC_PRIVCFGR5_PRIV188_Msk
#define RISC_PRIVCFGR5_PRIV189_Pos    (29U)
#define RISC_PRIVCFGR5_PRIV189_Msk    (0x1U << RISC_PRIVCFGR5_PRIV189_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR5_PRIV189        RISC_PRIVCFGR5_PRIV189_Msk
#define RISC_PRIVCFGR5_PRIV190_Pos    (30U)
#define RISC_PRIVCFGR5_PRIV190_Msk    (0x1U << RISC_PRIVCFGR5_PRIV190_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR5_PRIV190        RISC_PRIVCFGR5_PRIV190_Msk
#define RISC_PRIVCFGR5_PRIV191_Pos    (31U)
#define RISC_PRIVCFGR5_PRIV191_Msk    (0x1U << RISC_PRIVCFGR5_PRIV191_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR5_PRIV191        RISC_PRIVCFGR5_PRIV191_Msk

#if defined(STM32MP2XX_ASSY2_2_1)
/*******************  Bits definition for RISC_RCFGLOCK0 register *************/
#define RISC_RCFGLOCK0_RLOCK0_Pos     (0U)
#define RISC_RCFGLOCK0_RLOCK0_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK0_Pos)       /*!< 0x00000001 */
#define RISC_RCFGLOCK0_RLOCK0         RISC_RCFGLOCK0_RLOCK0_Msk
#define RISC_RCFGLOCK0_RLOCK1_Pos     (1U)
#define RISC_RCFGLOCK0_RLOCK1_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK1_Pos)       /*!< 0x00000002 */
#define RISC_RCFGLOCK0_RLOCK1         RISC_RCFGLOCK0_RLOCK1_Msk
#define RISC_RCFGLOCK0_RLOCK2_Pos     (2U)
#define RISC_RCFGLOCK0_RLOCK2_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK2_Pos)       /*!< 0x00000004 */
#define RISC_RCFGLOCK0_RLOCK2         RISC_RCFGLOCK0_RLOCK2_Msk
#define RISC_RCFGLOCK0_RLOCK3_Pos     (3U)
#define RISC_RCFGLOCK0_RLOCK3_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK3_Pos)       /*!< 0x00000008 */
#define RISC_RCFGLOCK0_RLOCK3         RISC_RCFGLOCK0_RLOCK3_Msk
#define RISC_RCFGLOCK0_RLOCK4_Pos     (4U)
#define RISC_RCFGLOCK0_RLOCK4_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK4_Pos)       /*!< 0x00000010 */
#define RISC_RCFGLOCK0_RLOCK4         RISC_RCFGLOCK0_RLOCK4_Msk
#define RISC_RCFGLOCK0_RLOCK5_Pos     (5U)
#define RISC_RCFGLOCK0_RLOCK5_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK5_Pos)       /*!< 0x00000020 */
#define RISC_RCFGLOCK0_RLOCK5         RISC_RCFGLOCK0_RLOCK5_Msk
#define RISC_RCFGLOCK0_RLOCK6_Pos     (6U)
#define RISC_RCFGLOCK0_RLOCK6_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK6_Pos)       /*!< 0x00000040 */
#define RISC_RCFGLOCK0_RLOCK6         RISC_RCFGLOCK0_RLOCK6_Msk
#define RISC_RCFGLOCK0_RLOCK7_Pos     (7U)
#define RISC_RCFGLOCK0_RLOCK7_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK7_Pos)       /*!< 0x00000080 */
#define RISC_RCFGLOCK0_RLOCK7         RISC_RCFGLOCK0_RLOCK7_Msk
#define RISC_RCFGLOCK0_RLOCK8_Pos     (8U)
#define RISC_RCFGLOCK0_RLOCK8_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK8_Pos)       /*!< 0x00000100 */
#define RISC_RCFGLOCK0_RLOCK8         RISC_RCFGLOCK0_RLOCK8_Msk
#define RISC_RCFGLOCK0_RLOCK9_Pos     (9U)
#define RISC_RCFGLOCK0_RLOCK9_Msk     (0x1U << RISC_RCFGLOCK0_RLOCK9_Pos)       /*!< 0x00000200 */
#define RISC_RCFGLOCK0_RLOCK9         RISC_RCFGLOCK0_RLOCK9_Msk
#define RISC_RCFGLOCK0_RLOCK10_Pos    (10U)
#define RISC_RCFGLOCK0_RLOCK10_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK10_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCK0_RLOCK10        RISC_RCFGLOCK0_RLOCK10_Msk
#define RISC_RCFGLOCK0_RLOCK11_Pos    (11U)
#define RISC_RCFGLOCK0_RLOCK11_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK11_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCK0_RLOCK11        RISC_RCFGLOCK0_RLOCK11_Msk
#define RISC_RCFGLOCK0_RLOCK12_Pos    (12U)
#define RISC_RCFGLOCK0_RLOCK12_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK12_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCK0_RLOCK12        RISC_RCFGLOCK0_RLOCK12_Msk
#define RISC_RCFGLOCK0_RLOCK13_Pos    (13U)
#define RISC_RCFGLOCK0_RLOCK13_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK13_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCK0_RLOCK13        RISC_RCFGLOCK0_RLOCK13_Msk
#define RISC_RCFGLOCK0_RLOCK14_Pos    (14U)
#define RISC_RCFGLOCK0_RLOCK14_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK14_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCK0_RLOCK14        RISC_RCFGLOCK0_RLOCK14_Msk
#define RISC_RCFGLOCK0_RLOCK15_Pos    (15U)
#define RISC_RCFGLOCK0_RLOCK15_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK15_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCK0_RLOCK15        RISC_RCFGLOCK0_RLOCK15_Msk
#define RISC_RCFGLOCK0_RLOCK16_Pos    (16U)
#define RISC_RCFGLOCK0_RLOCK16_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK16_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCK0_RLOCK16        RISC_RCFGLOCK0_RLOCK16_Msk
#define RISC_RCFGLOCK0_RLOCK17_Pos    (17U)
#define RISC_RCFGLOCK0_RLOCK17_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK17_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCK0_RLOCK17        RISC_RCFGLOCK0_RLOCK17_Msk
#define RISC_RCFGLOCK0_RLOCK18_Pos    (18U)
#define RISC_RCFGLOCK0_RLOCK18_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK18_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCK0_RLOCK18        RISC_RCFGLOCK0_RLOCK18_Msk
#define RISC_RCFGLOCK0_RLOCK19_Pos    (19U)
#define RISC_RCFGLOCK0_RLOCK19_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK19_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCK0_RLOCK19        RISC_RCFGLOCK0_RLOCK19_Msk
#define RISC_RCFGLOCK0_RLOCK20_Pos    (20U)
#define RISC_RCFGLOCK0_RLOCK20_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK20_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCK0_RLOCK20        RISC_RCFGLOCK0_RLOCK20_Msk
#define RISC_RCFGLOCK0_RLOCK21_Pos    (21U)
#define RISC_RCFGLOCK0_RLOCK21_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK21_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCK0_RLOCK21        RISC_RCFGLOCK0_RLOCK21_Msk
#define RISC_RCFGLOCK0_RLOCK22_Pos    (22U)
#define RISC_RCFGLOCK0_RLOCK22_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK22_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCK0_RLOCK22        RISC_RCFGLOCK0_RLOCK22_Msk
#define RISC_RCFGLOCK0_RLOCK23_Pos    (23U)
#define RISC_RCFGLOCK0_RLOCK23_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK23_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCK0_RLOCK23        RISC_RCFGLOCK0_RLOCK23_Msk
#define RISC_RCFGLOCK0_RLOCK24_Pos    (24U)
#define RISC_RCFGLOCK0_RLOCK24_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK24_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCK0_RLOCK24        RISC_RCFGLOCK0_RLOCK24_Msk
#define RISC_RCFGLOCK0_RLOCK25_Pos    (25U)
#define RISC_RCFGLOCK0_RLOCK25_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK25_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCK0_RLOCK25        RISC_RCFGLOCK0_RLOCK25_Msk
#define RISC_RCFGLOCK0_RLOCK26_Pos    (26U)
#define RISC_RCFGLOCK0_RLOCK26_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK26_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCK0_RLOCK26        RISC_RCFGLOCK0_RLOCK26_Msk
#define RISC_RCFGLOCK0_RLOCK27_Pos    (27U)
#define RISC_RCFGLOCK0_RLOCK27_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK27_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCK0_RLOCK27        RISC_RCFGLOCK0_RLOCK27_Msk
#define RISC_RCFGLOCK0_RLOCK28_Pos    (28U)
#define RISC_RCFGLOCK0_RLOCK28_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK28_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCK0_RLOCK28        RISC_RCFGLOCK0_RLOCK28_Msk
#define RISC_RCFGLOCK0_RLOCK29_Pos    (29U)
#define RISC_RCFGLOCK0_RLOCK29_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK29_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCK0_RLOCK29        RISC_RCFGLOCK0_RLOCK29_Msk
#define RISC_RCFGLOCK0_RLOCK30_Pos    (30U)
#define RISC_RCFGLOCK0_RLOCK30_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK30_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCK0_RLOCK30        RISC_RCFGLOCK0_RLOCK30_Msk
#define RISC_RCFGLOCK0_RLOCK31_Pos    (31U)
#define RISC_RCFGLOCK0_RLOCK31_Msk    (0x1U << RISC_RCFGLOCK0_RLOCK31_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCK0_RLOCK31        RISC_RCFGLOCK0_RLOCK31_Msk

/*******************  Bits definition for RISC_RCFGLOCK1 register *************/
#define RISC_RCFGLOCK1_RLOCK32_Pos    (0U)
#define RISC_RCFGLOCK1_RLOCK32_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK32_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCK1_RLOCK32        RISC_RCFGLOCK1_RLOCK32_Msk
#define RISC_RCFGLOCK1_RLOCK33_Pos    (1U)
#define RISC_RCFGLOCK1_RLOCK33_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK33_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCK1_RLOCK33        RISC_RCFGLOCK1_RLOCK33_Msk
#define RISC_RCFGLOCK1_RLOCK34_Pos    (2U)
#define RISC_RCFGLOCK1_RLOCK34_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK34_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCK1_RLOCK34        RISC_RCFGLOCK1_RLOCK34_Msk
#define RISC_RCFGLOCK1_RLOCK35_Pos    (3U)
#define RISC_RCFGLOCK1_RLOCK35_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK35_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCK1_RLOCK35        RISC_RCFGLOCK1_RLOCK35_Msk
#define RISC_RCFGLOCK1_RLOCK36_Pos    (4U)
#define RISC_RCFGLOCK1_RLOCK36_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK36_Pos)      /*!< 0x00000010 */
#define RISC_RCFGLOCK1_RLOCK36        RISC_RCFGLOCK1_RLOCK36_Msk
#define RISC_RCFGLOCK1_RLOCK37_Pos    (5U)
#define RISC_RCFGLOCK1_RLOCK37_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK37_Pos)      /*!< 0x00000020 */
#define RISC_RCFGLOCK1_RLOCK37        RISC_RCFGLOCK1_RLOCK37_Msk
#define RISC_RCFGLOCK1_RLOCK38_Pos    (6U)
#define RISC_RCFGLOCK1_RLOCK38_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK38_Pos)      /*!< 0x00000040 */
#define RISC_RCFGLOCK1_RLOCK38        RISC_RCFGLOCK1_RLOCK38_Msk
#define RISC_RCFGLOCK1_RLOCK39_Pos    (7U)
#define RISC_RCFGLOCK1_RLOCK39_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK39_Pos)      /*!< 0x00000080 */
#define RISC_RCFGLOCK1_RLOCK39        RISC_RCFGLOCK1_RLOCK39_Msk
#define RISC_RCFGLOCK1_RLOCK40_Pos    (8U)
#define RISC_RCFGLOCK1_RLOCK40_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK40_Pos)      /*!< 0x00000100 */
#define RISC_RCFGLOCK1_RLOCK40        RISC_RCFGLOCK1_RLOCK40_Msk
#define RISC_RCFGLOCK1_RLOCK41_Pos    (9U)
#define RISC_RCFGLOCK1_RLOCK41_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK41_Pos)      /*!< 0x00000200 */
#define RISC_RCFGLOCK1_RLOCK41        RISC_RCFGLOCK1_RLOCK41_Msk
#define RISC_RCFGLOCK1_RLOCK42_Pos    (10U)
#define RISC_RCFGLOCK1_RLOCK42_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK42_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCK1_RLOCK42        RISC_RCFGLOCK1_RLOCK42_Msk
#define RISC_RCFGLOCK1_RLOCK43_Pos    (11U)
#define RISC_RCFGLOCK1_RLOCK43_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK43_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCK1_RLOCK43        RISC_RCFGLOCK1_RLOCK43_Msk
#define RISC_RCFGLOCK1_RLOCK44_Pos    (12U)
#define RISC_RCFGLOCK1_RLOCK44_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK44_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCK1_RLOCK44        RISC_RCFGLOCK1_RLOCK44_Msk
#define RISC_RCFGLOCK1_RLOCK45_Pos    (13U)
#define RISC_RCFGLOCK1_RLOCK45_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK45_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCK1_RLOCK45        RISC_RCFGLOCK1_RLOCK45_Msk
#define RISC_RCFGLOCK1_RLOCK46_Pos    (14U)
#define RISC_RCFGLOCK1_RLOCK46_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK46_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCK1_RLOCK46        RISC_RCFGLOCK1_RLOCK46_Msk
#define RISC_RCFGLOCK1_RLOCK47_Pos    (15U)
#define RISC_RCFGLOCK1_RLOCK47_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK47_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCK1_RLOCK47        RISC_RCFGLOCK1_RLOCK47_Msk
#define RISC_RCFGLOCK1_RLOCK48_Pos    (16U)
#define RISC_RCFGLOCK1_RLOCK48_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK48_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCK1_RLOCK48        RISC_RCFGLOCK1_RLOCK48_Msk
#define RISC_RCFGLOCK1_RLOCK49_Pos    (17U)
#define RISC_RCFGLOCK1_RLOCK49_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK49_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCK1_RLOCK49        RISC_RCFGLOCK1_RLOCK49_Msk
#define RISC_RCFGLOCK1_RLOCK50_Pos    (18U)
#define RISC_RCFGLOCK1_RLOCK50_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK50_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCK1_RLOCK50        RISC_RCFGLOCK1_RLOCK50_Msk
#define RISC_RCFGLOCK1_RLOCK51_Pos    (19U)
#define RISC_RCFGLOCK1_RLOCK51_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK51_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCK1_RLOCK51        RISC_RCFGLOCK1_RLOCK51_Msk
#define RISC_RCFGLOCK1_RLOCK52_Pos    (20U)
#define RISC_RCFGLOCK1_RLOCK52_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK52_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCK1_RLOCK52        RISC_RCFGLOCK1_RLOCK52_Msk
#define RISC_RCFGLOCK1_RLOCK53_Pos    (21U)
#define RISC_RCFGLOCK1_RLOCK53_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK53_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCK1_RLOCK53        RISC_RCFGLOCK1_RLOCK53_Msk
#define RISC_RCFGLOCK1_RLOCK54_Pos    (22U)
#define RISC_RCFGLOCK1_RLOCK54_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK54_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCK1_RLOCK54        RISC_RCFGLOCK1_RLOCK54_Msk
#define RISC_RCFGLOCK1_RLOCK55_Pos    (23U)
#define RISC_RCFGLOCK1_RLOCK55_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK55_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCK1_RLOCK55        RISC_RCFGLOCK1_RLOCK55_Msk
#define RISC_RCFGLOCK1_RLOCK56_Pos    (24U)
#define RISC_RCFGLOCK1_RLOCK56_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK56_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCK1_RLOCK56        RISC_RCFGLOCK1_RLOCK56_Msk
#define RISC_RCFGLOCK1_RLOCK57_Pos    (25U)
#define RISC_RCFGLOCK1_RLOCK57_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK57_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCK1_RLOCK57        RISC_RCFGLOCK1_RLOCK57_Msk
#define RISC_RCFGLOCK1_RLOCK58_Pos    (26U)
#define RISC_RCFGLOCK1_RLOCK58_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK58_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCK1_RLOCK58        RISC_RCFGLOCK1_RLOCK58_Msk
#define RISC_RCFGLOCK1_RLOCK59_Pos    (27U)
#define RISC_RCFGLOCK1_RLOCK59_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK59_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCK1_RLOCK59        RISC_RCFGLOCK1_RLOCK59_Msk
#define RISC_RCFGLOCK1_RLOCK60_Pos    (28U)
#define RISC_RCFGLOCK1_RLOCK60_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK60_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCK1_RLOCK60        RISC_RCFGLOCK1_RLOCK60_Msk
#define RISC_RCFGLOCK1_RLOCK61_Pos    (29U)
#define RISC_RCFGLOCK1_RLOCK61_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK61_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCK1_RLOCK61        RISC_RCFGLOCK1_RLOCK61_Msk
#define RISC_RCFGLOCK1_RLOCK62_Pos    (30U)
#define RISC_RCFGLOCK1_RLOCK62_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK62_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCK1_RLOCK62        RISC_RCFGLOCK1_RLOCK62_Msk
#define RISC_RCFGLOCK1_RLOCK63_Pos    (31U)
#define RISC_RCFGLOCK1_RLOCK63_Msk    (0x1U << RISC_RCFGLOCK1_RLOCK63_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCK1_RLOCK63        RISC_RCFGLOCK1_RLOCK63_Msk

/*******************  Bits definition for RISC_RCFGLOCK2 register *************/
#define RISC_RCFGLOCK2_RLOCK64_Pos    (0U)
#define RISC_RCFGLOCK2_RLOCK64_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK64_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCK2_RLOCK64        RISC_RCFGLOCK2_RLOCK64_Msk
#define RISC_RCFGLOCK2_RLOCK65_Pos    (1U)
#define RISC_RCFGLOCK2_RLOCK65_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK65_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCK2_RLOCK65        RISC_RCFGLOCK2_RLOCK65_Msk
#define RISC_RCFGLOCK2_RLOCK66_Pos    (2U)
#define RISC_RCFGLOCK2_RLOCK66_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK66_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCK2_RLOCK66        RISC_RCFGLOCK2_RLOCK66_Msk
#define RISC_RCFGLOCK2_RLOCK67_Pos    (3U)
#define RISC_RCFGLOCK2_RLOCK67_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK67_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCK2_RLOCK67        RISC_RCFGLOCK2_RLOCK67_Msk
#define RISC_RCFGLOCK2_RLOCK68_Pos    (4U)
#define RISC_RCFGLOCK2_RLOCK68_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK68_Pos)      /*!< 0x00000010 */
#define RISC_RCFGLOCK2_RLOCK68        RISC_RCFGLOCK2_RLOCK68_Msk
#define RISC_RCFGLOCK2_RLOCK69_Pos    (5U)
#define RISC_RCFGLOCK2_RLOCK69_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK69_Pos)      /*!< 0x00000020 */
#define RISC_RCFGLOCK2_RLOCK69        RISC_RCFGLOCK2_RLOCK69_Msk
#define RISC_RCFGLOCK2_RLOCK70_Pos    (6U)
#define RISC_RCFGLOCK2_RLOCK70_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK70_Pos)      /*!< 0x00000040 */
#define RISC_RCFGLOCK2_RLOCK70        RISC_RCFGLOCK2_RLOCK70_Msk
#define RISC_RCFGLOCK2_RLOCK71_Pos    (7U)
#define RISC_RCFGLOCK2_RLOCK71_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK71_Pos)      /*!< 0x00000080 */
#define RISC_RCFGLOCK2_RLOCK71        RISC_RCFGLOCK2_RLOCK71_Msk
#define RISC_RCFGLOCK2_RLOCK72_Pos    (8U)
#define RISC_RCFGLOCK2_RLOCK72_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK72_Pos)      /*!< 0x00000100 */
#define RISC_RCFGLOCK2_RLOCK72        RISC_RCFGLOCK2_RLOCK72_Msk
#define RISC_RCFGLOCK2_RLOCK73_Pos    (9U)
#define RISC_RCFGLOCK2_RLOCK73_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK73_Pos)      /*!< 0x00000200 */
#define RISC_RCFGLOCK2_RLOCK73        RISC_RCFGLOCK2_RLOCK73_Msk
#define RISC_RCFGLOCK2_RLOCK74_Pos    (10U)
#define RISC_RCFGLOCK2_RLOCK74_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK74_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCK2_RLOCK74        RISC_RCFGLOCK2_RLOCK74_Msk
#define RISC_RCFGLOCK2_RLOCK75_Pos    (11U)
#define RISC_RCFGLOCK2_RLOCK75_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK75_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCK2_RLOCK75        RISC_RCFGLOCK2_RLOCK75_Msk
#define RISC_RCFGLOCK2_RLOCK76_Pos    (12U)
#define RISC_RCFGLOCK2_RLOCK76_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK76_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCK2_RLOCK76        RISC_RCFGLOCK2_RLOCK76_Msk
#define RISC_RCFGLOCK2_RLOCK77_Pos    (13U)
#define RISC_RCFGLOCK2_RLOCK77_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK77_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCK2_RLOCK77        RISC_RCFGLOCK2_RLOCK77_Msk
#define RISC_RCFGLOCK2_RLOCK78_Pos    (14U)
#define RISC_RCFGLOCK2_RLOCK78_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK78_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCK2_RLOCK78        RISC_RCFGLOCK2_RLOCK78_Msk
#define RISC_RCFGLOCK2_RLOCK79_Pos    (15U)
#define RISC_RCFGLOCK2_RLOCK79_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK79_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCK2_RLOCK79        RISC_RCFGLOCK2_RLOCK79_Msk
#define RISC_RCFGLOCK2_RLOCK80_Pos    (16U)
#define RISC_RCFGLOCK2_RLOCK80_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK80_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCK2_RLOCK80        RISC_RCFGLOCK2_RLOCK80_Msk
#define RISC_RCFGLOCK2_RLOCK81_Pos    (17U)
#define RISC_RCFGLOCK2_RLOCK81_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK81_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCK2_RLOCK81        RISC_RCFGLOCK2_RLOCK81_Msk
#define RISC_RCFGLOCK2_RLOCK82_Pos    (18U)
#define RISC_RCFGLOCK2_RLOCK82_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK82_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCK2_RLOCK82        RISC_RCFGLOCK2_RLOCK82_Msk
#define RISC_RCFGLOCK2_RLOCK83_Pos    (19U)
#define RISC_RCFGLOCK2_RLOCK83_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK83_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCK2_RLOCK83        RISC_RCFGLOCK2_RLOCK83_Msk
#define RISC_RCFGLOCK2_RLOCK84_Pos    (20U)
#define RISC_RCFGLOCK2_RLOCK84_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK84_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCK2_RLOCK84        RISC_RCFGLOCK2_RLOCK84_Msk
#define RISC_RCFGLOCK2_RLOCK85_Pos    (21U)
#define RISC_RCFGLOCK2_RLOCK85_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK85_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCK2_RLOCK85        RISC_RCFGLOCK2_RLOCK85_Msk
#define RISC_RCFGLOCK2_RLOCK86_Pos    (22U)
#define RISC_RCFGLOCK2_RLOCK86_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK86_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCK2_RLOCK86        RISC_RCFGLOCK2_RLOCK86_Msk
#define RISC_RCFGLOCK2_RLOCK87_Pos    (23U)
#define RISC_RCFGLOCK2_RLOCK87_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK87_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCK2_RLOCK87        RISC_RCFGLOCK2_RLOCK87_Msk
#define RISC_RCFGLOCK2_RLOCK88_Pos    (24U)
#define RISC_RCFGLOCK2_RLOCK88_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK88_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCK2_RLOCK88        RISC_RCFGLOCK2_RLOCK88_Msk
#define RISC_RCFGLOCK2_RLOCK89_Pos    (25U)
#define RISC_RCFGLOCK2_RLOCK89_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK89_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCK2_RLOCK89        RISC_RCFGLOCK2_RLOCK89_Msk
#define RISC_RCFGLOCK2_RLOCK90_Pos    (26U)
#define RISC_RCFGLOCK2_RLOCK90_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK90_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCK2_RLOCK90        RISC_RCFGLOCK2_RLOCK90_Msk
#define RISC_RCFGLOCK2_RLOCK91_Pos    (27U)
#define RISC_RCFGLOCK2_RLOCK91_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK91_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCK2_RLOCK91        RISC_RCFGLOCK2_RLOCK91_Msk
#define RISC_RCFGLOCK2_RLOCK92_Pos    (28U)
#define RISC_RCFGLOCK2_RLOCK92_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK92_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCK2_RLOCK92        RISC_RCFGLOCK2_RLOCK92_Msk
#define RISC_RCFGLOCK2_RLOCK93_Pos    (29U)
#define RISC_RCFGLOCK2_RLOCK93_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK93_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCK2_RLOCK93        RISC_RCFGLOCK2_RLOCK93_Msk
#define RISC_RCFGLOCK2_RLOCK94_Pos    (30U)
#define RISC_RCFGLOCK2_RLOCK94_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK94_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCK2_RLOCK94        RISC_RCFGLOCK2_RLOCK94_Msk
#define RISC_RCFGLOCK2_RLOCK95_Pos    (31U)
#define RISC_RCFGLOCK2_RLOCK95_Msk    (0x1U << RISC_RCFGLOCK2_RLOCK95_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCK2_RLOCK95        RISC_RCFGLOCK2_RLOCK95_Msk

/*******************  Bits definition for RISC_RCFGLOCK3 register *************/
#define RISC_RCFGLOCK3_RLOCK96_Pos    (0U)
#define RISC_RCFGLOCK3_RLOCK96_Msk    (0x1U << RISC_RCFGLOCK3_RLOCK96_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCK3_RLOCK96        RISC_RCFGLOCK3_RLOCK0_Msk
#define RISC_RCFGLOCK3_RLOCK97_Pos    (1U)
#define RISC_RCFGLOCK3_RLOCK97_Msk    (0x1U << RISC_RCFGLOCK3_RLOCK97_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCK3_RLOCK97        RISC_RCFGLOCK3_RLOCK97_Msk
#define RISC_RCFGLOCK3_RLOCK98_Pos    (2U)
#define RISC_RCFGLOCK3_RLOCK98_Msk    (0x1U << RISC_RCFGLOCK3_RLOCK98_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCK3_RLOCK98        RISC_RCFGLOCK3_RLOCK98_Msk
#define RISC_RCFGLOCK3_RLOCK99_Pos    (3U)
#define RISC_RCFGLOCK3_RLOCK99_Msk    (0x1U << RISC_RCFGLOCK3_RLOCK99_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCK3_RLOCK99        RISC_RCFGLOCK3_RLOCK99_Msk
#define RISC_RCFGLOCK3_RLOCK100_Pos   (4U)
#define RISC_RCFGLOCK3_RLOCK100_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK100_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCK3_RLOCK100       RISC_RCFGLOCK3_RLOCK100_Msk
#define RISC_RCFGLOCK3_RLOCK101_Pos   (5U)
#define RISC_RCFGLOCK3_RLOCK101_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK101_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCK3_RLOCK101        RISC_RCFGLOCK3_RLOCK101_Msk
#define RISC_RCFGLOCK3_RLOCK102_Pos   (6U)
#define RISC_RCFGLOCK3_RLOCK102_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK102_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCK3_RLOCK102       RISC_RCFGLOCK3_RLOCK102_Msk
#define RISC_RCFGLOCK3_RLOCK103_Pos   (7U)
#define RISC_RCFGLOCK3_RLOCK103_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK103_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCK3_RLOCK103       RISC_RCFGLOCK3_RLOCK103_Msk
#define RISC_RCFGLOCK3_RLOCK104_Pos   (8U)
#define RISC_RCFGLOCK3_RLOCK104_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK104_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCK3_RLOCK104       RISC_RCFGLOCK3_RLOCK104_Msk
#define RISC_RCFGLOCK3_RLOCK105_Pos   (9U)
#define RISC_RCFGLOCK3_RLOCK105_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK105_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCK3_RLOCK105       RISC_RCFGLOCK3_RLOCK105_Msk
#define RISC_RCFGLOCK3_RLOCK106_Pos   (10U)
#define RISC_RCFGLOCK3_RLOCK106_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK106_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCK3_RLOCK106       RISC_RCFGLOCK3_RLOCK106_Msk
#define RISC_RCFGLOCK3_RLOCK107_Pos   (11U)
#define RISC_RCFGLOCK3_RLOCK107_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK107_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCK3_RLOCK107       RISC_RCFGLOCK3_RLOCK107_Msk
#define RISC_RCFGLOCK3_RLOCK108_Pos   (12U)
#define RISC_RCFGLOCK3_RLOCK108_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK108_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCK3_RLOCK108       RISC_RCFGLOCK3_RLOCK108_Msk
#define RISC_RCFGLOCK3_RLOCK109_Pos   (13U)
#define RISC_RCFGLOCK3_RLOCK109_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK109_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCK3_RLOCK109       RISC_RCFGLOCK3_RLOCK109_Msk
#define RISC_RCFGLOCK3_RLOCK110_Pos   (14U)
#define RISC_RCFGLOCK3_RLOCK110_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK110_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCK3_RLOCK110       RISC_RCFGLOCK3_RLOCK110_Msk
#define RISC_RCFGLOCK3_RLOCK111_Pos   (15U)
#define RISC_RCFGLOCK3_RLOCK111_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK111_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCK3_RLOCK111       RISC_RCFGLOCK3_RLOCK111_Msk
#define RISC_RCFGLOCK3_RLOCK112_Pos   (16U)
#define RISC_RCFGLOCK3_RLOCK112_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK112_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCK3_RLOCK112       RISC_RCFGLOCK3_RLOCK112_Msk
#define RISC_RCFGLOCK3_RLOCK113_Pos   (17U)
#define RISC_RCFGLOCK3_RLOCK113_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK113_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCK3_RLOCK113       RISC_RCFGLOCK3_RLOCK113_Msk
#define RISC_RCFGLOCK3_RLOCK114_Pos   (18U)
#define RISC_RCFGLOCK3_RLOCK114_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK114_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCK3_RLOCK114       RISC_RCFGLOCK3_RLOCK114_Msk
#define RISC_RCFGLOCK3_RLOCK115_Pos   (19U)
#define RISC_RCFGLOCK3_RLOCK115_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK115_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCK3_RLOCK115       RISC_RCFGLOCK3_RLOCK115_Msk
#define RISC_RCFGLOCK3_RLOCK116_Pos   (20U)
#define RISC_RCFGLOCK3_RLOCK116_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK116_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCK3_RLOCK116       RISC_RCFGLOCK3_RLOCK116_Msk
#define RISC_RCFGLOCK3_RLOCK117_Pos   (21U)
#define RISC_RCFGLOCK3_RLOCK117_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK117_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCK3_RLOCK117       RISC_RCFGLOCK3_RLOCK117_Msk
#define RISC_RCFGLOCK3_RLOCK118_Pos   (22U)
#define RISC_RCFGLOCK3_RLOCK118_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK118_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCK3_RLOCK118       RISC_RCFGLOCK3_RLOCK118_Msk
#define RISC_RCFGLOCK3_RLOCK119_Pos   (23U)
#define RISC_RCFGLOCK3_RLOCK119_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK119_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCK3_RLOCK119       RISC_RCFGLOCK3_RLOCK119_Msk
#define RISC_RCFGLOCK3_RLOCK120_Pos   (24U)
#define RISC_RCFGLOCK3_RLOCK120_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK120_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCK3_RLOCK120       RISC_RCFGLOCK3_RLOCK120_Msk
#define RISC_RCFGLOCK3_RLOCK121_Pos   (25U)
#define RISC_RCFGLOCK3_RLOCK121_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK121_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCK3_RLOCK121       RISC_RCFGLOCK3_RLOCK121_Msk
#define RISC_RCFGLOCK3_RLOCK122_Pos   (26U)
#define RISC_RCFGLOCK3_RLOCK122_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK122_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCK3_RLOCK122       RISC_RCFGLOCK3_RLOCK122_Msk
#define RISC_RCFGLOCK3_RLOCK123_Pos   (27U)
#define RISC_RCFGLOCK3_RLOCK123_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK123_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCK3_RLOCK123       RISC_RCFGLOCK3_RLOCK123_Msk
#define RISC_RCFGLOCK3_RLOCK124_Pos   (28U)
#define RISC_RCFGLOCK3_RLOCK124_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK124_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCK3_RLOCK124       RISC_RCFGLOCK3_RLOCK124_Msk
#define RISC_RCFGLOCK3_RLOCK125_Pos   (29U)
#define RISC_RCFGLOCK3_RLOCK125_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK125_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCK3_RLOCK125       RISC_RCFGLOCK3_RLOCK125_Msk
#define RISC_RCFGLOCK3_RLOCK126_Pos   (30U)
#define RISC_RCFGLOCK3_RLOCK126_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK126_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCK3_RLOCK126       RISC_RCFGLOCK3_RLOCK126_Msk
#define RISC_RCFGLOCK3_RLOCK127_Pos   (31U)
#define RISC_RCFGLOCK3_RLOCK127_Msk   (0x1U << RISC_RCFGLOCK3_RLOCK127_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCK3_RLOCK127       RISC_RCFGLOCK3_RLOCK127_Msk

/*******************  Bits definition for RISC_RCFGLOCK4 register *************/
#define RISC_RCFGLOCK4_RLOCK128_Pos   (0U)
#define RISC_RCFGLOCK4_RLOCK128_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK128_Pos)     /*!< 0x00000001 */
#define RISC_RCFGLOCK4_RLOCK128       RISC_RCFGLOCK4_RLOCK128_Msk
#define RISC_RCFGLOCK4_RLOCK129_Pos   (1U)
#define RISC_RCFGLOCK4_RLOCK129_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK129_Pos)     /*!< 0x00000002 */
#define RISC_RCFGLOCK4_RLOCK129       RISC_RCFGLOCK4_RLOCK129_Msk
#define RISC_RCFGLOCK4_RLOCK130_Pos   (2U)
#define RISC_RCFGLOCK4_RLOCK130_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK130_Pos)     /*!< 0x00000004 */
#define RISC_RCFGLOCK4_RLOCK130       RISC_RCFGLOCK4_RLOCK130_Msk
#define RISC_RCFGLOCK4_RLOCK131_Pos   (3U)
#define RISC_RCFGLOCK4_RLOCK131_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK131_Pos)     /*!< 0x00000008 */
#define RISC_RCFGLOCK4_RLOCK131       RISC_RCFGLOCK4_RLOCK131_Msk
#define RISC_RCFGLOCK4_RLOCK132_Pos   (4U)
#define RISC_RCFGLOCK4_RLOCK132_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK132_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCK4_RLOCK132       RISC_RCFGLOCK4_RLOCK132_Msk
#define RISC_RCFGLOCK4_RLOCK133_Pos   (5U)
#define RISC_RCFGLOCK4_RLOCK133_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK133_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCK4_RLOCK133       RISC_RCFGLOCK4_RLOCK133_Msk
#define RISC_RCFGLOCK4_RLOCK134_Pos   (6U)
#define RISC_RCFGLOCK4_RLOCK134_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK134_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCK4_RLOCK134       RISC_RCFGLOCK4_RLOCK134_Msk
#define RISC_RCFGLOCK4_RLOCK135_Pos   (7U)
#define RISC_RCFGLOCK4_RLOCK135_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK135_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCK4_RLOCK135      RISC_RCFGLOCK4_RLOCK135_Msk
#define RISC_RCFGLOCK4_RLOCK136_Pos   (8U)
#define RISC_RCFGLOCK4_RLOCK136_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK136_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCK4_RLOCK136       RISC_RCFGLOCK4_RLOCK136_Msk
#define RISC_RCFGLOCK4_RLOCK137_Pos   (9U)
#define RISC_RCFGLOCK4_RLOCK137_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK137_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCK4_RLOCK137       RISC_RCFGLOCK4_RLOCK137_Msk
#define RISC_RCFGLOCK4_RLOCK138_Pos   (10U)
#define RISC_RCFGLOCK4_RLOCK138_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK138_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCK4_RLOCK138       RISC_RCFGLOCK4_RLOCK138_Msk
#define RISC_RCFGLOCK4_RLOCK139_Pos   (11U)
#define RISC_RCFGLOCK4_RLOCK139_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK139_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCK4_RLOCK139       RISC_RCFGLOCK4_RLOCK139_Msk
#define RISC_RCFGLOCK4_RLOCK140_Pos   (12U)
#define RISC_RCFGLOCK4_RLOCK140_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK140_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCK4_RLOCK140       RISC_RCFGLOCK4_RLOCK140_Msk
#define RISC_RCFGLOCK4_RLOCK141_Pos   (13U)
#define RISC_RCFGLOCK4_RLOCK141_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK141_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCK4_RLOCK141       RISC_RCFGLOCK4_RLOCK141_Msk
#define RISC_RCFGLOCK4_RLOCK142_Pos   (14U)
#define RISC_RCFGLOCK4_RLOCK142_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK142_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCK4_RLOCK142       RISC_RCFGLOCK4_RLOCK142_Msk
#define RISC_RCFGLOCK4_RLOCK143_Pos   (15U)
#define RISC_RCFGLOCK4_RLOCK143_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK143_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCK4_RLOCK143       RISC_RCFGLOCK4_RLOCK143_Msk
#define RISC_RCFGLOCK4_RLOCK144_Pos   (16U)
#define RISC_RCFGLOCK4_RLOCK144_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK144_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCK4_RLOCK144       RISC_RCFGLOCK4_RLOCK144_Msk
#define RISC_RCFGLOCK4_RLOCK145_Pos   (17U)
#define RISC_RCFGLOCK4_RLOCK145_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK145_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCK4_RLOCK145       RISC_RCFGLOCK4_RLOCK145_Msk
#define RISC_RCFGLOCK4_RLOCK146_Pos   (18U)
#define RISC_RCFGLOCK4_RLOCK146_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK146_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCK4_RLOCK146       RISC_RCFGLOCK4_RLOCK146_Msk
#define RISC_RCFGLOCK4_RLOCK147_Pos   (19U)
#define RISC_RCFGLOCK4_RLOCK147_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK147_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCK4_RLOCK147       RISC_RCFGLOCK4_RLOCK147_Msk
#define RISC_RCFGLOCK4_RLOCK148_Pos   (20U)
#define RISC_RCFGLOCK4_RLOCK148_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK148_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCK4_RLOCK148       RISC_RCFGLOCK4_RLOCK148_Msk
#define RISC_RCFGLOCK4_RLOCK149_Pos   (21U)
#define RISC_RCFGLOCK4_RLOCK149_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK149_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCK4_RLOCK149       RISC_RCFGLOCK4_RLOCK149_Msk
#define RISC_RCFGLOCK4_RLOCK150_Pos   (22U)
#define RISC_RCFGLOCK4_RLOCK150_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK150_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCK4_RLOCK150       RISC_RCFGLOCK4_RLOCK150_Msk
#define RISC_RCFGLOCK4_RLOCK151_Pos   (23U)
#define RISC_RCFGLOCK4_RLOCK151_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK151_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCK4_RLOCK151       RISC_RCFGLOCK4_RLOCK151_Msk
#define RISC_RCFGLOCK4_RLOCK152_Pos   (24U)
#define RISC_RCFGLOCK4_RLOCK152_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK152_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCK4_RLOCK152       RISC_RCFGLOCK4_RLOCK152_Msk
#define RISC_RCFGLOCK4_RLOCK153_Pos   (25U)
#define RISC_RCFGLOCK4_RLOCK153_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK153_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCK4_RLOCK153       RISC_RCFGLOCK4_RLOCK153_Msk
#define RISC_RCFGLOCK4_RLOCK154_Pos   (26U)
#define RISC_RCFGLOCK4_RLOCK154_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK154_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCK4_RLOCK154       RISC_RCFGLOCK4_RLOCK154_Msk
#define RISC_RCFGLOCK4_RLOCK155_Pos   (27U)
#define RISC_RCFGLOCK4_RLOCK155_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK155_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCK4_RLOCK155       RISC_RCFGLOCK4_RLOCK155_Msk
#define RISC_RCFGLOCK4_RLOCK156_Pos   (28U)
#define RISC_RCFGLOCK4_RLOCK156_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK156_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCK4_RLOCK156       RISC_RCFGLOCK4_RLOCK156_Msk
#define RISC_RCFGLOCK4_RLOCK157_Pos   (29U)
#define RISC_RCFGLOCK4_RLOCK157_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK157_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCK4_RLOCK157       RISC_RCFGLOCK4_RLOCK157_Msk
#define RISC_RCFGLOCK4_RLOCK158_Pos   (30U)
#define RISC_RCFGLOCK4_RLOCK158_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK158_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCK4_RLOCK158       RISC_RCFGLOCK4_RLOCK158_Msk
#define RISC_RCFGLOCK4_RLOCK159_Pos   (31U)
#define RISC_RCFGLOCK4_RLOCK159_Msk   (0x1U << RISC_RCFGLOCK4_RLOCK159_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCK4_RLOCK159       RISC_RCFGLOCK4_RLOCK159_Msk

/*******************  Bits definition for RISC_RCFGLOCK5 register *************/
#define RISC_RCFGLOCK5_RLOCK160_Pos   (0U)
#define RISC_RCFGLOCK5_RLOCK160_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK160_Pos)     /*!< 0x00000001 */
#define RISC_RCFGLOCK5_RLOCK160       RISC_RCFGLOCK5_RLOCK160_Msk
#define RISC_RCFGLOCK5_RLOCK161_Pos   (1U)
#define RISC_RCFGLOCK5_RLOCK161_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK161_Pos)     /*!< 0x00000002 */
#define RISC_RCFGLOCK5_RLOCK161       RISC_RCFGLOCK5_RLOCK161_Msk
#define RISC_RCFGLOCK5_RLOCK162_Pos   (2U)
#define RISC_RCFGLOCK5_RLOCK162_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK162_Pos)     /*!< 0x00000004 */
#define RISC_RCFGLOCK5_RLOCK162       RISC_RCFGLOCK5_RLOCK162_Msk
#define RISC_RCFGLOCK5_RLOCK163_Pos   (3U)
#define RISC_RCFGLOCK5_RLOCK163_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK163_Pos)     /*!< 0x00000008 */
#define RISC_RCFGLOCK5_RLOCK163       RISC_RCFGLOCK5_RLOCK163_Msk
#define RISC_RCFGLOCK5_RLOCK164_Pos   (4U)
#define RISC_RCFGLOCK5_RLOCK164_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK164_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCK5_RLOCK164       RISC_RCFGLOCK5_RLOCK164_Msk
#define RISC_RCFGLOCK5_RLOCK165_Pos   (5U)
#define RISC_RCFGLOCK5_RLOCK165_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK165_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCK5_RLOCK165       RISC_RCFGLOCK5_RLOCK165_Msk
#define RISC_RCFGLOCK5_RLOCK166_Pos   (6U)
#define RISC_RCFGLOCK5_RLOCK166_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK166_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCK5_RLOCK166       RISC_RCFGLOCK5_RLOCK166_Msk
#define RISC_RCFGLOCK5_RLOCK167_Pos   (7U)
#define RISC_RCFGLOCK5_RLOCK167_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK167_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCK5_RLOCK167       RISC_RCFGLOCK5_RLOCK167_Msk
#define RISC_RCFGLOCK5_RLOCK168_Pos   (8U)
#define RISC_RCFGLOCK5_RLOCK168_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK168_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCK5_RLOCK168        RISC_RCFGLOCK5_RLOCK168_Msk
#define RISC_RCFGLOCK5_RLOCK169_Pos   (9U)
#define RISC_RCFGLOCK5_RLOCK169_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK169_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCK5_RLOCK169       RISC_RCFGLOCK5_RLOCK169_Msk
#define RISC_RCFGLOCK5_RLOCK170_Pos   (10U)
#define RISC_RCFGLOCK5_RLOCK170_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK170_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCK5_RLOCK170       RISC_RCFGLOCK5_RLOCK170_Msk
#define RISC_RCFGLOCK5_RLOCK171_Pos   (11U)
#define RISC_RCFGLOCK5_RLOCK171_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK171_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCK5_RLOCK171       RISC_RCFGLOCK5_RLOCK171_Msk
#define RISC_RCFGLOCK5_RLOCK172_Pos   (12U)
#define RISC_RCFGLOCK5_RLOCK172_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK172_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCK5_RLOCK172       RISC_RCFGLOCK5_RLOCK172_Msk
#define RISC_RCFGLOCK5_RLOCK173_Pos   (13U)
#define RISC_RCFGLOCK5_RLOCK173_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK173_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCK5_RLOCK173       RISC_RCFGLOCK5_RLOCK173_Msk
#define RISC_RCFGLOCK5_RLOCK174_Pos   (14U)
#define RISC_RCFGLOCK5_RLOCK174_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK174_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCK5_RLOCK174       RISC_RCFGLOCK5_RLOCK174_Msk
#define RISC_RCFGLOCK5_RLOCK175_Pos   (15U)
#define RISC_RCFGLOCK5_RLOCK175_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK175_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCK5_RLOCK175       RISC_RCFGLOCK5_RLOCK175_Msk
#define RISC_RCFGLOCK5_RLOCK176_Pos   (16U)
#define RISC_RCFGLOCK5_RLOCK176_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK176_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCK5_RLOCK176       RISC_RCFGLOCK5_RLOCK176_Msk
#define RISC_RCFGLOCK5_RLOCK177_Pos   (17U)
#define RISC_RCFGLOCK5_RLOCK177_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK177_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCK5_RLOCK177       RISC_RCFGLOCK5_RLOCK177_Msk
#define RISC_RCFGLOCK5_RLOCK178_Pos   (18U)
#define RISC_RCFGLOCK5_RLOCK178_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK178_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCK5_RLOCK178       RISC_RCFGLOCK5_RLOCK178_Msk
#define RISC_RCFGLOCK5_RLOCK179_Pos   (19U)
#define RISC_RCFGLOCK5_RLOCK179_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK179_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCK5_RLOCK179       RISC_RCFGLOCK5_RLOCK179_Msk
#define RISC_RCFGLOCK5_RLOCK180_Pos   (20U)
#define RISC_RCFGLOCK5_RLOCK180_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK180_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCK5_RLOCK180       RISC_RCFGLOCK5_RLOCK180_Msk
#define RISC_RCFGLOCK5_RLOCK181_Pos   (21U)
#define RISC_RCFGLOCK5_RLOCK181_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK181_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCK5_RLOCK181       RISC_RCFGLOCK5_RLOCK181_Msk
#define RISC_RCFGLOCK5_RLOCK182_Pos   (22U)
#define RISC_RCFGLOCK5_RLOCK182_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK182_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCK5_RLOCK182       RISC_RCFGLOCK5_RLOCK182_Msk
#define RISC_RCFGLOCK5_RLOCK183_Pos   (23U)
#define RISC_RCFGLOCK5_RLOCK183_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK183_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCK5_RLOCK183       RISC_RCFGLOCK5_RLOCK183_Msk
#define RISC_RCFGLOCK5_RLOCK184_Pos   (24U)
#define RISC_RCFGLOCK5_RLOCK184_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK184_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCK5_RLOCK184       RISC_RCFGLOCK5_RLOCK184_Msk
#define RISC_RCFGLOCK5_RLOCK185_Pos   (25U)
#define RISC_RCFGLOCK5_RLOCK185_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK185_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCK5_RLOCK185       RISC_RCFGLOCK5_RLOCK185_Msk
#define RISC_RCFGLOCK5_RLOCK186_Pos   (26U)
#define RISC_RCFGLOCK5_RLOCK186_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK186_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCK5_RLOCK186       RISC_RCFGLOCK5_RLOCK186_Msk
#define RISC_RCFGLOCK5_RLOCK187_Pos   (27U)
#define RISC_RCFGLOCK5_RLOCK187_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK187_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCK5_RLOCK187       RISC_RCFGLOCK5_RLOCK187_Msk
#define RISC_RCFGLOCK5_RLOCK188_Pos   (28U)
#define RISC_RCFGLOCK5_RLOCK188_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK188_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCK5_RLOCK188       RISC_RCFGLOCK5_RLOCK188_Msk
#define RISC_RCFGLOCK5_RLOCK189_Pos   (29U)
#define RISC_RCFGLOCK5_RLOCK189_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK189_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCK5_RLOCK189       RISC_RCFGLOCK5_RLOCK189_Msk
#define RISC_RCFGLOCK5_RLOCK190_Pos   (30U)
#define RISC_RCFGLOCK5_RLOCK190_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK190_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCK5_RLOCK190       RISC_RCFGLOCK5_RLOCK190_Msk
#define RISC_RCFGLOCK5_RLOCK191_Pos   (31U)
#define RISC_RCFGLOCK5_RLOCK191_Msk   (0x1U << RISC_RCFGLOCK5_RLOCK191_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCK5_RLOCK191       RISC_RCFGLOCK5_RLOCK191_Msk
#else
/*******************  Bits definition for RISC_RIFLOCKR0 register *************/
#define RISC_RIFLOCKR0_RLOCK0_Pos     (0U)
#define RISC_RIFLOCKR0_RLOCK0_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK0_Pos)       /*!< 0x00000001 */
#define RISC_RIFLOCKR0_RLOCK0         RISC_RIFLOCKR0_RLOCK0_Msk
#define RISC_RIFLOCKR0_RLOCK1_Pos     (1U)
#define RISC_RIFLOCKR0_RLOCK1_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK1_Pos)       /*!< 0x00000002 */
#define RISC_RIFLOCKR0_RLOCK1         RISC_RIFLOCKR0_RLOCK1_Msk
#define RISC_RIFLOCKR0_RLOCK2_Pos     (2U)
#define RISC_RIFLOCKR0_RLOCK2_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK2_Pos)       /*!< 0x00000004 */
#define RISC_RIFLOCKR0_RLOCK2         RISC_RIFLOCKR0_RLOCK2_Msk
#define RISC_RIFLOCKR0_RLOCK3_Pos     (3U)
#define RISC_RIFLOCKR0_RLOCK3_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK3_Pos)       /*!< 0x00000008 */
#define RISC_RIFLOCKR0_RLOCK3         RISC_RIFLOCKR0_RLOCK3_Msk
#define RISC_RIFLOCKR0_RLOCK4_Pos     (4U)
#define RISC_RIFLOCKR0_RLOCK4_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK4_Pos)       /*!< 0x00000010 */
#define RISC_RIFLOCKR0_RLOCK4         RISC_RIFLOCKR0_RLOCK4_Msk
#define RISC_RIFLOCKR0_RLOCK5_Pos     (5U)
#define RISC_RIFLOCKR0_RLOCK5_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK5_Pos)       /*!< 0x00000020 */
#define RISC_RIFLOCKR0_RLOCK5         RISC_RIFLOCKR0_RLOCK5_Msk
#define RISC_RIFLOCKR0_RLOCK6_Pos     (6U)
#define RISC_RIFLOCKR0_RLOCK6_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK6_Pos)       /*!< 0x00000040 */
#define RISC_RIFLOCKR0_RLOCK6         RISC_RIFLOCKR0_RLOCK6_Msk
#define RISC_RIFLOCKR0_RLOCK7_Pos     (7U)
#define RISC_RIFLOCKR0_RLOCK7_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK7_Pos)       /*!< 0x00000080 */
#define RISC_RIFLOCKR0_RLOCK7         RISC_RIFLOCKR0_RLOCK7_Msk
#define RISC_RIFLOCKR0_RLOCK8_Pos     (8U)
#define RISC_RIFLOCKR0_RLOCK8_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK8_Pos)       /*!< 0x00000100 */
#define RISC_RIFLOCKR0_RLOCK8         RISC_RIFLOCKR0_RLOCK8_Msk
#define RISC_RIFLOCKR0_RLOCK9_Pos     (9U)
#define RISC_RIFLOCKR0_RLOCK9_Msk     (0x1U << RISC_RIFLOCKR0_RLOCK9_Pos)       /*!< 0x00000200 */
#define RISC_RIFLOCKR0_RLOCK9         RISC_RIFLOCKR0_RLOCK9_Msk
#define RISC_RIFLOCKR0_RLOCK10_Pos    (10U)
#define RISC_RIFLOCKR0_RLOCK10_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK10_Pos)      /*!< 0x00000400 */
#define RISC_RIFLOCKR0_RLOCK10        RISC_RIFLOCKR0_RLOCK10_Msk
#define RISC_RIFLOCKR0_RLOCK11_Pos    (11U)
#define RISC_RIFLOCKR0_RLOCK11_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK11_Pos)      /*!< 0x00000800 */
#define RISC_RIFLOCKR0_RLOCK11        RISC_RIFLOCKR0_RLOCK11_Msk
#define RISC_RIFLOCKR0_RLOCK12_Pos    (12U)
#define RISC_RIFLOCKR0_RLOCK12_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK12_Pos)      /*!< 0x00001000 */
#define RISC_RIFLOCKR0_RLOCK12        RISC_RIFLOCKR0_RLOCK12_Msk
#define RISC_RIFLOCKR0_RLOCK13_Pos    (13U)
#define RISC_RIFLOCKR0_RLOCK13_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK13_Pos)      /*!< 0x00002000 */
#define RISC_RIFLOCKR0_RLOCK13        RISC_RIFLOCKR0_RLOCK13_Msk
#define RISC_RIFLOCKR0_RLOCK14_Pos    (14U)
#define RISC_RIFLOCKR0_RLOCK14_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK14_Pos)      /*!< 0x00004000 */
#define RISC_RIFLOCKR0_RLOCK14        RISC_RIFLOCKR0_RLOCK14_Msk
#define RISC_RIFLOCKR0_RLOCK15_Pos    (15U)
#define RISC_RIFLOCKR0_RLOCK15_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK15_Pos)      /*!< 0x00008000 */
#define RISC_RIFLOCKR0_RLOCK15        RISC_RIFLOCKR0_RLOCK15_Msk
#define RISC_RIFLOCKR0_RLOCK16_Pos    (16U)
#define RISC_RIFLOCKR0_RLOCK16_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK16_Pos)      /*!< 0x00010000 */
#define RISC_RIFLOCKR0_RLOCK16        RISC_RIFLOCKR0_RLOCK16_Msk
#define RISC_RIFLOCKR0_RLOCK17_Pos    (17U)
#define RISC_RIFLOCKR0_RLOCK17_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK17_Pos)      /*!< 0x00020000 */
#define RISC_RIFLOCKR0_RLOCK17        RISC_RIFLOCKR0_RLOCK17_Msk
#define RISC_RIFLOCKR0_RLOCK18_Pos    (18U)
#define RISC_RIFLOCKR0_RLOCK18_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK18_Pos)      /*!< 0x00040000 */
#define RISC_RIFLOCKR0_RLOCK18        RISC_RIFLOCKR0_RLOCK18_Msk
#define RISC_RIFLOCKR0_RLOCK19_Pos    (19U)
#define RISC_RIFLOCKR0_RLOCK19_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK19_Pos)      /*!< 0x00080000 */
#define RISC_RIFLOCKR0_RLOCK19        RISC_RIFLOCKR0_RLOCK19_Msk
#define RISC_RIFLOCKR0_RLOCK20_Pos    (20U)
#define RISC_RIFLOCKR0_RLOCK20_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK20_Pos)      /*!< 0x00100000 */
#define RISC_RIFLOCKR0_RLOCK20        RISC_RIFLOCKR0_RLOCK20_Msk
#define RISC_RIFLOCKR0_RLOCK21_Pos    (21U)
#define RISC_RIFLOCKR0_RLOCK21_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK21_Pos)      /*!< 0x00200000 */
#define RISC_RIFLOCKR0_RLOCK21        RISC_RIFLOCKR0_RLOCK21_Msk
#define RISC_RIFLOCKR0_RLOCK22_Pos    (22U)
#define RISC_RIFLOCKR0_RLOCK22_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK22_Pos)      /*!< 0x00400000 */
#define RISC_RIFLOCKR0_RLOCK22        RISC_RIFLOCKR0_RLOCK22_Msk
#define RISC_RIFLOCKR0_RLOCK23_Pos    (23U)
#define RISC_RIFLOCKR0_RLOCK23_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK23_Pos)      /*!< 0x00800000 */
#define RISC_RIFLOCKR0_RLOCK23        RISC_RIFLOCKR0_RLOCK23_Msk
#define RISC_RIFLOCKR0_RLOCK24_Pos    (24U)
#define RISC_RIFLOCKR0_RLOCK24_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK24_Pos)      /*!< 0x01000000 */
#define RISC_RIFLOCKR0_RLOCK24        RISC_RIFLOCKR0_RLOCK24_Msk
#define RISC_RIFLOCKR0_RLOCK25_Pos    (25U)
#define RISC_RIFLOCKR0_RLOCK25_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK25_Pos)      /*!< 0x02000000 */
#define RISC_RIFLOCKR0_RLOCK25        RISC_RIFLOCKR0_RLOCK25_Msk
#define RISC_RIFLOCKR0_RLOCK26_Pos    (26U)
#define RISC_RIFLOCKR0_RLOCK26_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK26_Pos)      /*!< 0x04000000 */
#define RISC_RIFLOCKR0_RLOCK26        RISC_RIFLOCKR0_RLOCK26_Msk
#define RISC_RIFLOCKR0_RLOCK27_Pos    (27U)
#define RISC_RIFLOCKR0_RLOCK27_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK27_Pos)      /*!< 0x08000000 */
#define RISC_RIFLOCKR0_RLOCK27        RISC_RIFLOCKR0_RLOCK27_Msk
#define RISC_RIFLOCKR0_RLOCK28_Pos    (28U)
#define RISC_RIFLOCKR0_RLOCK28_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK28_Pos)      /*!< 0x10000000 */
#define RISC_RIFLOCKR0_RLOCK28        RISC_RIFLOCKR0_RLOCK28_Msk
#define RISC_RIFLOCKR0_RLOCK29_Pos    (29U)
#define RISC_RIFLOCKR0_RLOCK29_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK29_Pos)      /*!< 0x20000000 */
#define RISC_RIFLOCKR0_RLOCK29        RISC_RIFLOCKR0_RLOCK29_Msk
#define RISC_RIFLOCKR0_RLOCK30_Pos    (30U)
#define RISC_RIFLOCKR0_RLOCK30_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK30_Pos)      /*!< 0x40000000 */
#define RISC_RIFLOCKR0_RLOCK30        RISC_RIFLOCKR0_RLOCK30_Msk
#define RISC_RIFLOCKR0_RLOCK31_Pos    (31U)
#define RISC_RIFLOCKR0_RLOCK31_Msk    (0x1U << RISC_RIFLOCKR0_RLOCK31_Pos)      /*!< 0x80000000 */
#define RISC_RIFLOCKR0_RLOCK31        RISC_RIFLOCKR0_RLOCK31_Msk

/*******************  Bits definition for RISC_RIFLOCKR1 register *************/
#define RISC_RIFLOCKR1_RLOCK32_Pos    (0U)
#define RISC_RIFLOCKR1_RLOCK32_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK32_Pos)      /*!< 0x00000001 */
#define RISC_RIFLOCKR1_RLOCK32        RISC_RIFLOCKR1_RLOCK32_Msk
#define RISC_RIFLOCKR1_RLOCK33_Pos    (1U)
#define RISC_RIFLOCKR1_RLOCK33_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK33_Pos)      /*!< 0x00000002 */
#define RISC_RIFLOCKR1_RLOCK33        RISC_RIFLOCKR1_RLOCK33_Msk
#define RISC_RIFLOCKR1_RLOCK34_Pos    (2U)
#define RISC_RIFLOCKR1_RLOCK34_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK34_Pos)      /*!< 0x00000004 */
#define RISC_RIFLOCKR1_RLOCK34        RISC_RIFLOCKR1_RLOCK34_Msk
#define RISC_RIFLOCKR1_RLOCK35_Pos    (3U)
#define RISC_RIFLOCKR1_RLOCK35_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK35_Pos)      /*!< 0x00000008 */
#define RISC_RIFLOCKR1_RLOCK35        RISC_RIFLOCKR1_RLOCK35_Msk
#define RISC_RIFLOCKR1_RLOCK36_Pos    (4U)
#define RISC_RIFLOCKR1_RLOCK36_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK36_Pos)      /*!< 0x00000010 */
#define RISC_RIFLOCKR1_RLOCK36        RISC_RIFLOCKR1_RLOCK36_Msk
#define RISC_RIFLOCKR1_RLOCK37_Pos    (5U)
#define RISC_RIFLOCKR1_RLOCK37_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK37_Pos)      /*!< 0x00000020 */
#define RISC_RIFLOCKR1_RLOCK37        RISC_RIFLOCKR1_RLOCK37_Msk
#define RISC_RIFLOCKR1_RLOCK38_Pos    (6U)
#define RISC_RIFLOCKR1_RLOCK38_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK38_Pos)      /*!< 0x00000040 */
#define RISC_RIFLOCKR1_RLOCK38        RISC_RIFLOCKR1_RLOCK38_Msk
#define RISC_RIFLOCKR1_RLOCK39_Pos    (7U)
#define RISC_RIFLOCKR1_RLOCK39_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK39_Pos)      /*!< 0x00000080 */
#define RISC_RIFLOCKR1_RLOCK39        RISC_RIFLOCKR1_RLOCK39_Msk
#define RISC_RIFLOCKR1_RLOCK40_Pos    (8U)
#define RISC_RIFLOCKR1_RLOCK40_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK40_Pos)      /*!< 0x00000100 */
#define RISC_RIFLOCKR1_RLOCK40        RISC_RIFLOCKR1_RLOCK40_Msk
#define RISC_RIFLOCKR1_RLOCK41_Pos    (9U)
#define RISC_RIFLOCKR1_RLOCK41_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK41_Pos)      /*!< 0x00000200 */
#define RISC_RIFLOCKR1_RLOCK41        RISC_RIFLOCKR1_RLOCK41_Msk
#define RISC_RIFLOCKR1_RLOCK42_Pos    (10U)
#define RISC_RIFLOCKR1_RLOCK42_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK42_Pos)      /*!< 0x00000400 */
#define RISC_RIFLOCKR1_RLOCK42        RISC_RIFLOCKR1_RLOCK42_Msk
#define RISC_RIFLOCKR1_RLOCK43_Pos    (11U)
#define RISC_RIFLOCKR1_RLOCK43_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK43_Pos)      /*!< 0x00000800 */
#define RISC_RIFLOCKR1_RLOCK43        RISC_RIFLOCKR1_RLOCK43_Msk
#define RISC_RIFLOCKR1_RLOCK44_Pos    (12U)
#define RISC_RIFLOCKR1_RLOCK44_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK44_Pos)      /*!< 0x00001000 */
#define RISC_RIFLOCKR1_RLOCK44        RISC_RIFLOCKR1_RLOCK44_Msk
#define RISC_RIFLOCKR1_RLOCK45_Pos    (13U)
#define RISC_RIFLOCKR1_RLOCK45_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK45_Pos)      /*!< 0x00002000 */
#define RISC_RIFLOCKR1_RLOCK45        RISC_RIFLOCKR1_RLOCK45_Msk
#define RISC_RIFLOCKR1_RLOCK46_Pos    (14U)
#define RISC_RIFLOCKR1_RLOCK46_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK46_Pos)      /*!< 0x00004000 */
#define RISC_RIFLOCKR1_RLOCK46        RISC_RIFLOCKR1_RLOCK46_Msk
#define RISC_RIFLOCKR1_RLOCK47_Pos    (15U)
#define RISC_RIFLOCKR1_RLOCK47_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK47_Pos)      /*!< 0x00008000 */
#define RISC_RIFLOCKR1_RLOCK47        RISC_RIFLOCKR1_RLOCK47_Msk
#define RISC_RIFLOCKR1_RLOCK48_Pos    (16U)
#define RISC_RIFLOCKR1_RLOCK48_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK48_Pos)      /*!< 0x00010000 */
#define RISC_RIFLOCKR1_RLOCK48        RISC_RIFLOCKR1_RLOCK48_Msk
#define RISC_RIFLOCKR1_RLOCK49_Pos    (17U)
#define RISC_RIFLOCKR1_RLOCK49_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK49_Pos)      /*!< 0x00020000 */
#define RISC_RIFLOCKR1_RLOCK49        RISC_RIFLOCKR1_RLOCK49_Msk
#define RISC_RIFLOCKR1_RLOCK50_Pos    (18U)
#define RISC_RIFLOCKR1_RLOCK50_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK50_Pos)      /*!< 0x00040000 */
#define RISC_RIFLOCKR1_RLOCK50        RISC_RIFLOCKR1_RLOCK50_Msk
#define RISC_RIFLOCKR1_RLOCK51_Pos    (19U)
#define RISC_RIFLOCKR1_RLOCK51_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK51_Pos)      /*!< 0x00080000 */
#define RISC_RIFLOCKR1_RLOCK51        RISC_RIFLOCKR1_RLOCK51_Msk
#define RISC_RIFLOCKR1_RLOCK52_Pos    (20U)
#define RISC_RIFLOCKR1_RLOCK52_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK52_Pos)      /*!< 0x00100000 */
#define RISC_RIFLOCKR1_RLOCK52        RISC_RIFLOCKR1_RLOCK52_Msk
#define RISC_RIFLOCKR1_RLOCK53_Pos    (21U)
#define RISC_RIFLOCKR1_RLOCK53_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK53_Pos)      /*!< 0x00200000 */
#define RISC_RIFLOCKR1_RLOCK53        RISC_RIFLOCKR1_RLOCK53_Msk
#define RISC_RIFLOCKR1_RLOCK54_Pos    (22U)
#define RISC_RIFLOCKR1_RLOCK54_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK54_Pos)      /*!< 0x00400000 */
#define RISC_RIFLOCKR1_RLOCK54        RISC_RIFLOCKR1_RLOCK54_Msk
#define RISC_RIFLOCKR1_RLOCK55_Pos    (23U)
#define RISC_RIFLOCKR1_RLOCK55_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK55_Pos)      /*!< 0x00800000 */
#define RISC_RIFLOCKR1_RLOCK55        RISC_RIFLOCKR1_RLOCK55_Msk
#define RISC_RIFLOCKR1_RLOCK56_Pos    (24U)
#define RISC_RIFLOCKR1_RLOCK56_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK56_Pos)      /*!< 0x01000000 */
#define RISC_RIFLOCKR1_RLOCK56        RISC_RIFLOCKR1_RLOCK56_Msk
#define RISC_RIFLOCKR1_RLOCK57_Pos    (25U)
#define RISC_RIFLOCKR1_RLOCK57_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK57_Pos)      /*!< 0x02000000 */
#define RISC_RIFLOCKR1_RLOCK57        RISC_RIFLOCKR1_RLOCK57_Msk
#define RISC_RIFLOCKR1_RLOCK58_Pos    (26U)
#define RISC_RIFLOCKR1_RLOCK58_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK58_Pos)      /*!< 0x04000000 */
#define RISC_RIFLOCKR1_RLOCK58        RISC_RIFLOCKR1_RLOCK58_Msk
#define RISC_RIFLOCKR1_RLOCK59_Pos    (27U)
#define RISC_RIFLOCKR1_RLOCK59_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK59_Pos)      /*!< 0x08000000 */
#define RISC_RIFLOCKR1_RLOCK59        RISC_RIFLOCKR1_RLOCK59_Msk
#define RISC_RIFLOCKR1_RLOCK60_Pos    (28U)
#define RISC_RIFLOCKR1_RLOCK60_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK60_Pos)      /*!< 0x10000000 */
#define RISC_RIFLOCKR1_RLOCK60        RISC_RIFLOCKR1_RLOCK60_Msk
#define RISC_RIFLOCKR1_RLOCK61_Pos    (29U)
#define RISC_RIFLOCKR1_RLOCK61_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK61_Pos)      /*!< 0x20000000 */
#define RISC_RIFLOCKR1_RLOCK61        RISC_RIFLOCKR1_RLOCK61_Msk
#define RISC_RIFLOCKR1_RLOCK62_Pos    (30U)
#define RISC_RIFLOCKR1_RLOCK62_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK62_Pos)      /*!< 0x40000000 */
#define RISC_RIFLOCKR1_RLOCK62        RISC_RIFLOCKR1_RLOCK62_Msk
#define RISC_RIFLOCKR1_RLOCK63_Pos    (31U)
#define RISC_RIFLOCKR1_RLOCK63_Msk    (0x1U << RISC_RIFLOCKR1_RLOCK63_Pos)      /*!< 0x80000000 */
#define RISC_RIFLOCKR1_RLOCK63        RISC_RIFLOCKR1_RLOCK63_Msk

/*******************  Bits definition for RISC_RIFLOCKR2 register *************/
#define RISC_RIFLOCKR2_RLOCK64_Pos    (0U)
#define RISC_RIFLOCKR2_RLOCK64_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK64_Pos)      /*!< 0x00000001 */
#define RISC_RIFLOCKR2_RLOCK64        RISC_RIFLOCKR2_RLOCK64_Msk
#define RISC_RIFLOCKR2_RLOCK65_Pos    (1U)
#define RISC_RIFLOCKR2_RLOCK65_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK65_Pos)      /*!< 0x00000002 */
#define RISC_RIFLOCKR2_RLOCK65        RISC_RIFLOCKR2_RLOCK65_Msk
#define RISC_RIFLOCKR2_RLOCK66_Pos    (2U)
#define RISC_RIFLOCKR2_RLOCK66_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK66_Pos)      /*!< 0x00000004 */
#define RISC_RIFLOCKR2_RLOCK66        RISC_RIFLOCKR2_RLOCK66_Msk
#define RISC_RIFLOCKR2_RLOCK67_Pos    (3U)
#define RISC_RIFLOCKR2_RLOCK67_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK67_Pos)      /*!< 0x00000008 */
#define RISC_RIFLOCKR2_RLOCK67        RISC_RIFLOCKR2_RLOCK67_Msk
#define RISC_RIFLOCKR2_RLOCK68_Pos    (4U)
#define RISC_RIFLOCKR2_RLOCK68_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK68_Pos)      /*!< 0x00000010 */
#define RISC_RIFLOCKR2_RLOCK68        RISC_RIFLOCKR2_RLOCK68_Msk
#define RISC_RIFLOCKR2_RLOCK69_Pos    (5U)
#define RISC_RIFLOCKR2_RLOCK69_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK69_Pos)      /*!< 0x00000020 */
#define RISC_RIFLOCKR2_RLOCK69        RISC_RIFLOCKR2_RLOCK69_Msk
#define RISC_RIFLOCKR2_RLOCK70_Pos    (6U)
#define RISC_RIFLOCKR2_RLOCK70_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK70_Pos)      /*!< 0x00000040 */
#define RISC_RIFLOCKR2_RLOCK70        RISC_RIFLOCKR2_RLOCK70_Msk
#define RISC_RIFLOCKR2_RLOCK71_Pos    (7U)
#define RISC_RIFLOCKR2_RLOCK71_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK71_Pos)      /*!< 0x00000080 */
#define RISC_RIFLOCKR2_RLOCK71        RISC_RIFLOCKR2_RLOCK71_Msk
#define RISC_RIFLOCKR2_RLOCK72_Pos    (8U)
#define RISC_RIFLOCKR2_RLOCK72_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK72_Pos)      /*!< 0x00000100 */
#define RISC_RIFLOCKR2_RLOCK72        RISC_RIFLOCKR2_RLOCK72_Msk
#define RISC_RIFLOCKR2_RLOCK73_Pos    (9U)
#define RISC_RIFLOCKR2_RLOCK73_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK73_Pos)      /*!< 0x00000200 */
#define RISC_RIFLOCKR2_RLOCK73        RISC_RIFLOCKR2_RLOCK73_Msk
#define RISC_RIFLOCKR2_RLOCK74_Pos    (10U)
#define RISC_RIFLOCKR2_RLOCK74_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK74_Pos)      /*!< 0x00000400 */
#define RISC_RIFLOCKR2_RLOCK74        RISC_RIFLOCKR2_RLOCK74_Msk
#define RISC_RIFLOCKR2_RLOCK75_Pos    (11U)
#define RISC_RIFLOCKR2_RLOCK75_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK75_Pos)      /*!< 0x00000800 */
#define RISC_RIFLOCKR2_RLOCK75        RISC_RIFLOCKR2_RLOCK75_Msk
#define RISC_RIFLOCKR2_RLOCK76_Pos    (12U)
#define RISC_RIFLOCKR2_RLOCK76_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK76_Pos)      /*!< 0x00001000 */
#define RISC_RIFLOCKR2_RLOCK76        RISC_RIFLOCKR2_RLOCK76_Msk
#define RISC_RIFLOCKR2_RLOCK77_Pos    (13U)
#define RISC_RIFLOCKR2_RLOCK77_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK77_Pos)      /*!< 0x00002000 */
#define RISC_RIFLOCKR2_RLOCK77        RISC_RIFLOCKR2_RLOCK77_Msk
#define RISC_RIFLOCKR2_RLOCK78_Pos    (14U)
#define RISC_RIFLOCKR2_RLOCK78_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK78_Pos)      /*!< 0x00004000 */
#define RISC_RIFLOCKR2_RLOCK78        RISC_RIFLOCKR2_RLOCK78_Msk
#define RISC_RIFLOCKR2_RLOCK79_Pos    (15U)
#define RISC_RIFLOCKR2_RLOCK79_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK79_Pos)      /*!< 0x00008000 */
#define RISC_RIFLOCKR2_RLOCK79        RISC_RIFLOCKR2_RLOCK79_Msk
#define RISC_RIFLOCKR2_RLOCK80_Pos    (16U)
#define RISC_RIFLOCKR2_RLOCK80_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK80_Pos)      /*!< 0x00010000 */
#define RISC_RIFLOCKR2_RLOCK80        RISC_RIFLOCKR2_RLOCK80_Msk
#define RISC_RIFLOCKR2_RLOCK81_Pos    (17U)
#define RISC_RIFLOCKR2_RLOCK81_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK81_Pos)      /*!< 0x00020000 */
#define RISC_RIFLOCKR2_RLOCK81        RISC_RIFLOCKR2_RLOCK81_Msk
#define RISC_RIFLOCKR2_RLOCK82_Pos    (18U)
#define RISC_RIFLOCKR2_RLOCK82_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK82_Pos)      /*!< 0x00040000 */
#define RISC_RIFLOCKR2_RLOCK82        RISC_RIFLOCKR2_RLOCK82_Msk
#define RISC_RIFLOCKR2_RLOCK83_Pos    (19U)
#define RISC_RIFLOCKR2_RLOCK83_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK83_Pos)      /*!< 0x00080000 */
#define RISC_RIFLOCKR2_RLOCK83        RISC_RIFLOCKR2_RLOCK83_Msk
#define RISC_RIFLOCKR2_RLOCK84_Pos    (20U)
#define RISC_RIFLOCKR2_RLOCK84_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK84_Pos)      /*!< 0x00100000 */
#define RISC_RIFLOCKR2_RLOCK84        RISC_RIFLOCKR2_RLOCK84_Msk
#define RISC_RIFLOCKR2_RLOCK85_Pos    (21U)
#define RISC_RIFLOCKR2_RLOCK85_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK85_Pos)      /*!< 0x00200000 */
#define RISC_RIFLOCKR2_RLOCK85        RISC_RIFLOCKR2_RLOCK85_Msk
#define RISC_RIFLOCKR2_RLOCK86_Pos    (22U)
#define RISC_RIFLOCKR2_RLOCK86_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK86_Pos)      /*!< 0x00400000 */
#define RISC_RIFLOCKR2_RLOCK86        RISC_RIFLOCKR2_RLOCK86_Msk
#define RISC_RIFLOCKR2_RLOCK87_Pos    (23U)
#define RISC_RIFLOCKR2_RLOCK87_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK87_Pos)      /*!< 0x00800000 */
#define RISC_RIFLOCKR2_RLOCK87        RISC_RIFLOCKR2_RLOCK87_Msk
#define RISC_RIFLOCKR2_RLOCK88_Pos    (24U)
#define RISC_RIFLOCKR2_RLOCK88_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK88_Pos)      /*!< 0x01000000 */
#define RISC_RIFLOCKR2_RLOCK88        RISC_RIFLOCKR2_RLOCK88_Msk
#define RISC_RIFLOCKR2_RLOCK89_Pos    (25U)
#define RISC_RIFLOCKR2_RLOCK89_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK89_Pos)      /*!< 0x02000000 */
#define RISC_RIFLOCKR2_RLOCK89        RISC_RIFLOCKR2_RLOCK89_Msk
#define RISC_RIFLOCKR2_RLOCK90_Pos    (26U)
#define RISC_RIFLOCKR2_RLOCK90_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK90_Pos)      /*!< 0x04000000 */
#define RISC_RIFLOCKR2_RLOCK90        RISC_RIFLOCKR2_RLOCK90_Msk
#define RISC_RIFLOCKR2_RLOCK91_Pos    (27U)
#define RISC_RIFLOCKR2_RLOCK91_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK91_Pos)      /*!< 0x08000000 */
#define RISC_RIFLOCKR2_RLOCK91        RISC_RIFLOCKR2_RLOCK91_Msk
#define RISC_RIFLOCKR2_RLOCK92_Pos    (28U)
#define RISC_RIFLOCKR2_RLOCK92_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK92_Pos)      /*!< 0x10000000 */
#define RISC_RIFLOCKR2_RLOCK92        RISC_RIFLOCKR2_RLOCK92_Msk
#define RISC_RIFLOCKR2_RLOCK93_Pos    (29U)
#define RISC_RIFLOCKR2_RLOCK93_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK93_Pos)      /*!< 0x20000000 */
#define RISC_RIFLOCKR2_RLOCK93        RISC_RIFLOCKR2_RLOCK93_Msk
#define RISC_RIFLOCKR2_RLOCK94_Pos    (30U)
#define RISC_RIFLOCKR2_RLOCK94_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK94_Pos)      /*!< 0x40000000 */
#define RISC_RIFLOCKR2_RLOCK94        RISC_RIFLOCKR2_RLOCK94_Msk
#define RISC_RIFLOCKR2_RLOCK95_Pos    (31U)
#define RISC_RIFLOCKR2_RLOCK95_Msk    (0x1U << RISC_RIFLOCKR2_RLOCK95_Pos)      /*!< 0x80000000 */
#define RISC_RIFLOCKR2_RLOCK95        RISC_RIFLOCKR2_RLOCK95_Msk

/*******************  Bits definition for RISC_RIFLOCKR3 register *************/
#define RISC_RIFLOCKR3_RLOCK96_Pos    (0U)
#define RISC_RIFLOCKR3_RLOCK96_Msk    (0x1U << RISC_RIFLOCKR3_RLOCK96_Pos)      /*!< 0x00000001 */
#define RISC_RIFLOCKR3_RLOCK96        RISC_RIFLOCKR3_RLOCK0_Msk
#define RISC_RIFLOCKR3_RLOCK97_Pos    (1U)
#define RISC_RIFLOCKR3_RLOCK97_Msk    (0x1U << RISC_RIFLOCKR3_RLOCK97_Pos)      /*!< 0x00000002 */
#define RISC_RIFLOCKR3_RLOCK97        RISC_RIFLOCKR3_RLOCK97_Msk
#define RISC_RIFLOCKR3_RLOCK98_Pos    (2U)
#define RISC_RIFLOCKR3_RLOCK98_Msk    (0x1U << RISC_RIFLOCKR3_RLOCK98_Pos)      /*!< 0x00000004 */
#define RISC_RIFLOCKR3_RLOCK98        RISC_RIFLOCKR3_RLOCK98_Msk
#define RISC_RIFLOCKR3_RLOCK99_Pos    (3U)
#define RISC_RIFLOCKR3_RLOCK99_Msk    (0x1U << RISC_RIFLOCKR3_RLOCK99_Pos)      /*!< 0x00000008 */
#define RISC_RIFLOCKR3_RLOCK99        RISC_RIFLOCKR3_RLOCK99_Msk
#define RISC_RIFLOCKR3_RLOCK100_Pos   (4U)
#define RISC_RIFLOCKR3_RLOCK100_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK100_Pos)     /*!< 0x00000010 */
#define RISC_RIFLOCKR3_RLOCK100       RISC_RIFLOCKR3_RLOCK100_Msk
#define RISC_RIFLOCKR3_RLOCK101_Pos   (5U)
#define RISC_RIFLOCKR3_RLOCK101_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK101_Pos)     /*!< 0x00000020 */
#define RISC_RIFLOCKR3_RLOCK101        RISC_RIFLOCKR3_RLOCK101_Msk
#define RISC_RIFLOCKR3_RLOCK102_Pos   (6U)
#define RISC_RIFLOCKR3_RLOCK102_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK102_Pos)     /*!< 0x00000040 */
#define RISC_RIFLOCKR3_RLOCK102       RISC_RIFLOCKR3_RLOCK102_Msk
#define RISC_RIFLOCKR3_RLOCK103_Pos   (7U)
#define RISC_RIFLOCKR3_RLOCK103_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK103_Pos)     /*!< 0x00000080 */
#define RISC_RIFLOCKR3_RLOCK103       RISC_RIFLOCKR3_RLOCK103_Msk
#define RISC_RIFLOCKR3_RLOCK104_Pos   (8U)
#define RISC_RIFLOCKR3_RLOCK104_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK104_Pos)     /*!< 0x00000100 */
#define RISC_RIFLOCKR3_RLOCK104       RISC_RIFLOCKR3_RLOCK104_Msk
#define RISC_RIFLOCKR3_RLOCK105_Pos   (9U)
#define RISC_RIFLOCKR3_RLOCK105_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK105_Pos)     /*!< 0x00000200 */
#define RISC_RIFLOCKR3_RLOCK105       RISC_RIFLOCKR3_RLOCK105_Msk
#define RISC_RIFLOCKR3_RLOCK106_Pos   (10U)
#define RISC_RIFLOCKR3_RLOCK106_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK106_Pos)     /*!< 0x00000400 */
#define RISC_RIFLOCKR3_RLOCK106       RISC_RIFLOCKR3_RLOCK106_Msk
#define RISC_RIFLOCKR3_RLOCK107_Pos   (11U)
#define RISC_RIFLOCKR3_RLOCK107_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK107_Pos)     /*!< 0x00000800 */
#define RISC_RIFLOCKR3_RLOCK107       RISC_RIFLOCKR3_RLOCK107_Msk
#define RISC_RIFLOCKR3_RLOCK108_Pos   (12U)
#define RISC_RIFLOCKR3_RLOCK108_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK108_Pos)     /*!< 0x00001000 */
#define RISC_RIFLOCKR3_RLOCK108       RISC_RIFLOCKR3_RLOCK108_Msk
#define RISC_RIFLOCKR3_RLOCK109_Pos   (13U)
#define RISC_RIFLOCKR3_RLOCK109_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK109_Pos)     /*!< 0x00002000 */
#define RISC_RIFLOCKR3_RLOCK109       RISC_RIFLOCKR3_RLOCK109_Msk
#define RISC_RIFLOCKR3_RLOCK110_Pos   (14U)
#define RISC_RIFLOCKR3_RLOCK110_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK110_Pos)     /*!< 0x00004000 */
#define RISC_RIFLOCKR3_RLOCK110       RISC_RIFLOCKR3_RLOCK110_Msk
#define RISC_RIFLOCKR3_RLOCK111_Pos   (15U)
#define RISC_RIFLOCKR3_RLOCK111_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK111_Pos)     /*!< 0x00008000 */
#define RISC_RIFLOCKR3_RLOCK111       RISC_RIFLOCKR3_RLOCK111_Msk
#define RISC_RIFLOCKR3_RLOCK112_Pos   (16U)
#define RISC_RIFLOCKR3_RLOCK112_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK112_Pos)     /*!< 0x00010000 */
#define RISC_RIFLOCKR3_RLOCK112       RISC_RIFLOCKR3_RLOCK112_Msk
#define RISC_RIFLOCKR3_RLOCK113_Pos   (17U)
#define RISC_RIFLOCKR3_RLOCK113_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK113_Pos)     /*!< 0x00020000 */
#define RISC_RIFLOCKR3_RLOCK113       RISC_RIFLOCKR3_RLOCK113_Msk
#define RISC_RIFLOCKR3_RLOCK114_Pos   (18U)
#define RISC_RIFLOCKR3_RLOCK114_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK114_Pos)     /*!< 0x00040000 */
#define RISC_RIFLOCKR3_RLOCK114       RISC_RIFLOCKR3_RLOCK114_Msk
#define RISC_RIFLOCKR3_RLOCK115_Pos   (19U)
#define RISC_RIFLOCKR3_RLOCK115_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK115_Pos)     /*!< 0x00080000 */
#define RISC_RIFLOCKR3_RLOCK115       RISC_RIFLOCKR3_RLOCK115_Msk
#define RISC_RIFLOCKR3_RLOCK116_Pos   (20U)
#define RISC_RIFLOCKR3_RLOCK116_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK116_Pos)     /*!< 0x00100000 */
#define RISC_RIFLOCKR3_RLOCK116       RISC_RIFLOCKR3_RLOCK116_Msk
#define RISC_RIFLOCKR3_RLOCK117_Pos   (21U)
#define RISC_RIFLOCKR3_RLOCK117_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK117_Pos)     /*!< 0x00200000 */
#define RISC_RIFLOCKR3_RLOCK117       RISC_RIFLOCKR3_RLOCK117_Msk
#define RISC_RIFLOCKR3_RLOCK118_Pos   (22U)
#define RISC_RIFLOCKR3_RLOCK118_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK118_Pos)     /*!< 0x00400000 */
#define RISC_RIFLOCKR3_RLOCK118       RISC_RIFLOCKR3_RLOCK118_Msk
#define RISC_RIFLOCKR3_RLOCK119_Pos   (23U)
#define RISC_RIFLOCKR3_RLOCK119_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK119_Pos)     /*!< 0x00800000 */
#define RISC_RIFLOCKR3_RLOCK119       RISC_RIFLOCKR3_RLOCK119_Msk
#define RISC_RIFLOCKR3_RLOCK120_Pos   (24U)
#define RISC_RIFLOCKR3_RLOCK120_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK120_Pos)     /*!< 0x01000000 */
#define RISC_RIFLOCKR3_RLOCK120       RISC_RIFLOCKR3_RLOCK120_Msk
#define RISC_RIFLOCKR3_RLOCK121_Pos   (25U)
#define RISC_RIFLOCKR3_RLOCK121_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK121_Pos)     /*!< 0x02000000 */
#define RISC_RIFLOCKR3_RLOCK121       RISC_RIFLOCKR3_RLOCK121_Msk
#define RISC_RIFLOCKR3_RLOCK122_Pos   (26U)
#define RISC_RIFLOCKR3_RLOCK122_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK122_Pos)     /*!< 0x04000000 */
#define RISC_RIFLOCKR3_RLOCK122       RISC_RIFLOCKR3_RLOCK122_Msk
#define RISC_RIFLOCKR3_RLOCK123_Pos   (27U)
#define RISC_RIFLOCKR3_RLOCK123_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK123_Pos)     /*!< 0x08000000 */
#define RISC_RIFLOCKR3_RLOCK123       RISC_RIFLOCKR3_RLOCK123_Msk
#define RISC_RIFLOCKR3_RLOCK124_Pos   (28U)
#define RISC_RIFLOCKR3_RLOCK124_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK124_Pos)     /*!< 0x10000000 */
#define RISC_RIFLOCKR3_RLOCK124       RISC_RIFLOCKR3_RLOCK124_Msk
#define RISC_RIFLOCKR3_RLOCK125_Pos   (29U)
#define RISC_RIFLOCKR3_RLOCK125_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK125_Pos)     /*!< 0x20000000 */
#define RISC_RIFLOCKR3_RLOCK125       RISC_RIFLOCKR3_RLOCK125_Msk
#define RISC_RIFLOCKR3_RLOCK126_Pos   (30U)
#define RISC_RIFLOCKR3_RLOCK126_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK126_Pos)     /*!< 0x40000000 */
#define RISC_RIFLOCKR3_RLOCK126       RISC_RIFLOCKR3_RLOCK126_Msk
#define RISC_RIFLOCKR3_RLOCK127_Pos   (31U)
#define RISC_RIFLOCKR3_RLOCK127_Msk   (0x1U << RISC_RIFLOCKR3_RLOCK127_Pos)     /*!< 0x80000000 */
#define RISC_RIFLOCKR3_RLOCK127       RISC_RIFLOCKR3_RLOCK127_Msk

/*******************  Bits definition for RISC_RIFLOCKR4 register *************/
#define RISC_RIFLOCKR4_RLOCK128_Pos   (0U)
#define RISC_RIFLOCKR4_RLOCK128_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK128_Pos)     /*!< 0x00000001 */
#define RISC_RIFLOCKR4_RLOCK128       RISC_RIFLOCKR4_RLOCK128_Msk
#define RISC_RIFLOCKR4_RLOCK129_Pos   (1U)
#define RISC_RIFLOCKR4_RLOCK129_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK129_Pos)     /*!< 0x00000002 */
#define RISC_RIFLOCKR4_RLOCK129       RISC_RIFLOCKR4_RLOCK129_Msk
#define RISC_RIFLOCKR4_RLOCK130_Pos   (2U)
#define RISC_RIFLOCKR4_RLOCK130_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK130_Pos)     /*!< 0x00000004 */
#define RISC_RIFLOCKR4_RLOCK130       RISC_RIFLOCKR4_RLOCK130_Msk
#define RISC_RIFLOCKR4_RLOCK131_Pos   (3U)
#define RISC_RIFLOCKR4_RLOCK131_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK131_Pos)     /*!< 0x00000008 */
#define RISC_RIFLOCKR4_RLOCK131       RISC_RIFLOCKR4_RLOCK131_Msk
#define RISC_RIFLOCKR4_RLOCK132_Pos   (4U)
#define RISC_RIFLOCKR4_RLOCK132_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK132_Pos)     /*!< 0x00000010 */
#define RISC_RIFLOCKR4_RLOCK132       RISC_RIFLOCKR4_RLOCK132_Msk
#define RISC_RIFLOCKR4_RLOCK133_Pos   (5U)
#define RISC_RIFLOCKR4_RLOCK133_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK133_Pos)     /*!< 0x00000020 */
#define RISC_RIFLOCKR4_RLOCK133       RISC_RIFLOCKR4_RLOCK133_Msk
#define RISC_RIFLOCKR4_RLOCK134_Pos   (6U)
#define RISC_RIFLOCKR4_RLOCK134_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK134_Pos)     /*!< 0x00000040 */
#define RISC_RIFLOCKR4_RLOCK134       RISC_RIFLOCKR4_RLOCK134_Msk
#define RISC_RIFLOCKR4_RLOCK135_Pos   (7U)
#define RISC_RIFLOCKR4_RLOCK135_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK135_Pos)     /*!< 0x00000080 */
#define RISC_RIFLOCKR4_RLOCK135      RISC_RIFLOCKR4_RLOCK135_Msk
#define RISC_RIFLOCKR4_RLOCK136_Pos   (8U)
#define RISC_RIFLOCKR4_RLOCK136_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK136_Pos)     /*!< 0x00000100 */
#define RISC_RIFLOCKR4_RLOCK136       RISC_RIFLOCKR4_RLOCK136_Msk
#define RISC_RIFLOCKR4_RLOCK137_Pos   (9U)
#define RISC_RIFLOCKR4_RLOCK137_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK137_Pos)     /*!< 0x00000200 */
#define RISC_RIFLOCKR4_RLOCK137       RISC_RIFLOCKR4_RLOCK137_Msk
#define RISC_RIFLOCKR4_RLOCK138_Pos   (10U)
#define RISC_RIFLOCKR4_RLOCK138_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK138_Pos)     /*!< 0x00000400 */
#define RISC_RIFLOCKR4_RLOCK138       RISC_RIFLOCKR4_RLOCK138_Msk
#define RISC_RIFLOCKR4_RLOCK139_Pos   (11U)
#define RISC_RIFLOCKR4_RLOCK139_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK139_Pos)     /*!< 0x00000800 */
#define RISC_RIFLOCKR4_RLOCK139       RISC_RIFLOCKR4_RLOCK139_Msk
#define RISC_RIFLOCKR4_RLOCK140_Pos   (12U)
#define RISC_RIFLOCKR4_RLOCK140_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK140_Pos)     /*!< 0x00001000 */
#define RISC_RIFLOCKR4_RLOCK140       RISC_RIFLOCKR4_RLOCK140_Msk
#define RISC_RIFLOCKR4_RLOCK141_Pos   (13U)
#define RISC_RIFLOCKR4_RLOCK141_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK141_Pos)     /*!< 0x00002000 */
#define RISC_RIFLOCKR4_RLOCK141       RISC_RIFLOCKR4_RLOCK141_Msk
#define RISC_RIFLOCKR4_RLOCK142_Pos   (14U)
#define RISC_RIFLOCKR4_RLOCK142_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK142_Pos)     /*!< 0x00004000 */
#define RISC_RIFLOCKR4_RLOCK142       RISC_RIFLOCKR4_RLOCK142_Msk
#define RISC_RIFLOCKR4_RLOCK143_Pos   (15U)
#define RISC_RIFLOCKR4_RLOCK143_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK143_Pos)     /*!< 0x00008000 */
#define RISC_RIFLOCKR4_RLOCK143       RISC_RIFLOCKR4_RLOCK143_Msk
#define RISC_RIFLOCKR4_RLOCK144_Pos   (16U)
#define RISC_RIFLOCKR4_RLOCK144_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK144_Pos)     /*!< 0x00010000 */
#define RISC_RIFLOCKR4_RLOCK144       RISC_RIFLOCKR4_RLOCK144_Msk
#define RISC_RIFLOCKR4_RLOCK145_Pos   (17U)
#define RISC_RIFLOCKR4_RLOCK145_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK145_Pos)     /*!< 0x00020000 */
#define RISC_RIFLOCKR4_RLOCK145       RISC_RIFLOCKR4_RLOCK145_Msk
#define RISC_RIFLOCKR4_RLOCK146_Pos   (18U)
#define RISC_RIFLOCKR4_RLOCK146_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK146_Pos)     /*!< 0x00040000 */
#define RISC_RIFLOCKR4_RLOCK146       RISC_RIFLOCKR4_RLOCK146_Msk
#define RISC_RIFLOCKR4_RLOCK147_Pos   (19U)
#define RISC_RIFLOCKR4_RLOCK147_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK147_Pos)     /*!< 0x00080000 */
#define RISC_RIFLOCKR4_RLOCK147       RISC_RIFLOCKR4_RLOCK147_Msk
#define RISC_RIFLOCKR4_RLOCK148_Pos   (20U)
#define RISC_RIFLOCKR4_RLOCK148_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK148_Pos)     /*!< 0x00100000 */
#define RISC_RIFLOCKR4_RLOCK148       RISC_RIFLOCKR4_RLOCK148_Msk
#define RISC_RIFLOCKR4_RLOCK149_Pos   (21U)
#define RISC_RIFLOCKR4_RLOCK149_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK149_Pos)     /*!< 0x00200000 */
#define RISC_RIFLOCKR4_RLOCK149       RISC_RIFLOCKR4_RLOCK149_Msk
#define RISC_RIFLOCKR4_RLOCK150_Pos   (22U)
#define RISC_RIFLOCKR4_RLOCK150_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK150_Pos)     /*!< 0x00400000 */
#define RISC_RIFLOCKR4_RLOCK150       RISC_RIFLOCKR4_RLOCK150_Msk
#define RISC_RIFLOCKR4_RLOCK151_Pos   (23U)
#define RISC_RIFLOCKR4_RLOCK151_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK151_Pos)     /*!< 0x00800000 */
#define RISC_RIFLOCKR4_RLOCK151       RISC_RIFLOCKR4_RLOCK151_Msk
#define RISC_RIFLOCKR4_RLOCK152_Pos   (24U)
#define RISC_RIFLOCKR4_RLOCK152_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK152_Pos)     /*!< 0x01000000 */
#define RISC_RIFLOCKR4_RLOCK152       RISC_RIFLOCKR4_RLOCK152_Msk
#define RISC_RIFLOCKR4_RLOCK153_Pos   (25U)
#define RISC_RIFLOCKR4_RLOCK153_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK153_Pos)     /*!< 0x02000000 */
#define RISC_RIFLOCKR4_RLOCK153       RISC_RIFLOCKR4_RLOCK153_Msk
#define RISC_RIFLOCKR4_RLOCK154_Pos   (26U)
#define RISC_RIFLOCKR4_RLOCK154_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK154_Pos)     /*!< 0x04000000 */
#define RISC_RIFLOCKR4_RLOCK154       RISC_RIFLOCKR4_RLOCK154_Msk
#define RISC_RIFLOCKR4_RLOCK155_Pos   (27U)
#define RISC_RIFLOCKR4_RLOCK155_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK155_Pos)     /*!< 0x08000000 */
#define RISC_RIFLOCKR4_RLOCK155       RISC_RIFLOCKR4_RLOCK155_Msk
#define RISC_RIFLOCKR4_RLOCK156_Pos   (28U)
#define RISC_RIFLOCKR4_RLOCK156_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK156_Pos)     /*!< 0x10000000 */
#define RISC_RIFLOCKR4_RLOCK156       RISC_RIFLOCKR4_RLOCK156_Msk
#define RISC_RIFLOCKR4_RLOCK157_Pos   (29U)
#define RISC_RIFLOCKR4_RLOCK157_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK157_Pos)     /*!< 0x20000000 */
#define RISC_RIFLOCKR4_RLOCK157       RISC_RIFLOCKR4_RLOCK157_Msk
#define RISC_RIFLOCKR4_RLOCK158_Pos   (30U)
#define RISC_RIFLOCKR4_RLOCK158_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK158_Pos)     /*!< 0x40000000 */
#define RISC_RIFLOCKR4_RLOCK158       RISC_RIFLOCKR4_RLOCK158_Msk
#define RISC_RIFLOCKR4_RLOCK159_Pos   (31U)
#define RISC_RIFLOCKR4_RLOCK159_Msk   (0x1U << RISC_RIFLOCKR4_RLOCK159_Pos)     /*!< 0x80000000 */
#define RISC_RIFLOCKR4_RLOCK159       RISC_RIFLOCKR4_RLOCK159_Msk

/*******************  Bits definition for RISC_RIFLOCKR5 register *************/
#define RISC_RIFLOCKR5_RLOCK160_Pos   (0U)
#define RISC_RIFLOCKR5_RLOCK160_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK160_Pos)     /*!< 0x00000001 */
#define RISC_RIFLOCKR5_RLOCK160       RISC_RIFLOCKR5_RLOCK160_Msk
#define RISC_RIFLOCKR5_RLOCK161_Pos   (1U)
#define RISC_RIFLOCKR5_RLOCK161_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK161_Pos)     /*!< 0x00000002 */
#define RISC_RIFLOCKR5_RLOCK161       RISC_RIFLOCKR5_RLOCK161_Msk
#define RISC_RIFLOCKR5_RLOCK162_Pos   (2U)
#define RISC_RIFLOCKR5_RLOCK162_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK162_Pos)     /*!< 0x00000004 */
#define RISC_RIFLOCKR5_RLOCK162       RISC_RIFLOCKR5_RLOCK162_Msk
#define RISC_RIFLOCKR5_RLOCK163_Pos   (3U)
#define RISC_RIFLOCKR5_RLOCK163_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK163_Pos)     /*!< 0x00000008 */
#define RISC_RIFLOCKR5_RLOCK163       RISC_RIFLOCKR5_RLOCK163_Msk
#define RISC_RIFLOCKR5_RLOCK164_Pos   (4U)
#define RISC_RIFLOCKR5_RLOCK164_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK164_Pos)     /*!< 0x00000010 */
#define RISC_RIFLOCKR5_RLOCK164       RISC_RIFLOCKR5_RLOCK164_Msk
#define RISC_RIFLOCKR5_RLOCK165_Pos   (5U)
#define RISC_RIFLOCKR5_RLOCK165_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK165_Pos)     /*!< 0x00000020 */
#define RISC_RIFLOCKR5_RLOCK165       RISC_RIFLOCKR5_RLOCK165_Msk
#define RISC_RIFLOCKR5_RLOCK166_Pos   (6U)
#define RISC_RIFLOCKR5_RLOCK166_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK166_Pos)     /*!< 0x00000040 */
#define RISC_RIFLOCKR5_RLOCK166       RISC_RIFLOCKR5_RLOCK166_Msk
#define RISC_RIFLOCKR5_RLOCK167_Pos   (7U)
#define RISC_RIFLOCKR5_RLOCK167_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK167_Pos)     /*!< 0x00000080 */
#define RISC_RIFLOCKR5_RLOCK167       RISC_RIFLOCKR5_RLOCK167_Msk
#define RISC_RIFLOCKR5_RLOCK168_Pos   (8U)
#define RISC_RIFLOCKR5_RLOCK168_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK168_Pos)     /*!< 0x00000100 */
#define RISC_RIFLOCKR5_RLOCK168        RISC_RIFLOCKR5_RLOCK168_Msk
#define RISC_RIFLOCKR5_RLOCK169_Pos   (9U)
#define RISC_RIFLOCKR5_RLOCK169_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK169_Pos)     /*!< 0x00000200 */
#define RISC_RIFLOCKR5_RLOCK169       RISC_RIFLOCKR5_RLOCK169_Msk
#define RISC_RIFLOCKR5_RLOCK170_Pos   (10U)
#define RISC_RIFLOCKR5_RLOCK170_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK170_Pos)     /*!< 0x00000400 */
#define RISC_RIFLOCKR5_RLOCK170       RISC_RIFLOCKR5_RLOCK170_Msk
#define RISC_RIFLOCKR5_RLOCK171_Pos   (11U)
#define RISC_RIFLOCKR5_RLOCK171_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK171_Pos)     /*!< 0x00000800 */
#define RISC_RIFLOCKR5_RLOCK171       RISC_RIFLOCKR5_RLOCK171_Msk
#define RISC_RIFLOCKR5_RLOCK172_Pos   (12U)
#define RISC_RIFLOCKR5_RLOCK172_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK172_Pos)     /*!< 0x00001000 */
#define RISC_RIFLOCKR5_RLOCK172       RISC_RIFLOCKR5_RLOCK172_Msk
#define RISC_RIFLOCKR5_RLOCK173_Pos   (13U)
#define RISC_RIFLOCKR5_RLOCK173_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK173_Pos)     /*!< 0x00002000 */
#define RISC_RIFLOCKR5_RLOCK173       RISC_RIFLOCKR5_RLOCK173_Msk
#define RISC_RIFLOCKR5_RLOCK174_Pos   (14U)
#define RISC_RIFLOCKR5_RLOCK174_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK174_Pos)     /*!< 0x00004000 */
#define RISC_RIFLOCKR5_RLOCK174       RISC_RIFLOCKR5_RLOCK174_Msk
#define RISC_RIFLOCKR5_RLOCK175_Pos   (15U)
#define RISC_RIFLOCKR5_RLOCK175_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK175_Pos)     /*!< 0x00008000 */
#define RISC_RIFLOCKR5_RLOCK175       RISC_RIFLOCKR5_RLOCK175_Msk
#define RISC_RIFLOCKR5_RLOCK176_Pos   (16U)
#define RISC_RIFLOCKR5_RLOCK176_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK176_Pos)     /*!< 0x00010000 */
#define RISC_RIFLOCKR5_RLOCK176       RISC_RIFLOCKR5_RLOCK176_Msk
#define RISC_RIFLOCKR5_RLOCK177_Pos   (17U)
#define RISC_RIFLOCKR5_RLOCK177_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK177_Pos)     /*!< 0x00020000 */
#define RISC_RIFLOCKR5_RLOCK177       RISC_RIFLOCKR5_RLOCK177_Msk
#define RISC_RIFLOCKR5_RLOCK178_Pos   (18U)
#define RISC_RIFLOCKR5_RLOCK178_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK178_Pos)     /*!< 0x00040000 */
#define RISC_RIFLOCKR5_RLOCK178       RISC_RIFLOCKR5_RLOCK178_Msk
#define RISC_RIFLOCKR5_RLOCK179_Pos   (19U)
#define RISC_RIFLOCKR5_RLOCK179_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK179_Pos)     /*!< 0x00080000 */
#define RISC_RIFLOCKR5_RLOCK179       RISC_RIFLOCKR5_RLOCK179_Msk
#define RISC_RIFLOCKR5_RLOCK180_Pos   (20U)
#define RISC_RIFLOCKR5_RLOCK180_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK180_Pos)     /*!< 0x00100000 */
#define RISC_RIFLOCKR5_RLOCK180       RISC_RIFLOCKR5_RLOCK180_Msk
#define RISC_RIFLOCKR5_RLOCK181_Pos   (21U)
#define RISC_RIFLOCKR5_RLOCK181_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK181_Pos)     /*!< 0x00200000 */
#define RISC_RIFLOCKR5_RLOCK181       RISC_RIFLOCKR5_RLOCK181_Msk
#define RISC_RIFLOCKR5_RLOCK182_Pos   (22U)
#define RISC_RIFLOCKR5_RLOCK182_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK182_Pos)     /*!< 0x00400000 */
#define RISC_RIFLOCKR5_RLOCK182       RISC_RIFLOCKR5_RLOCK182_Msk
#define RISC_RIFLOCKR5_RLOCK183_Pos   (23U)
#define RISC_RIFLOCKR5_RLOCK183_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK183_Pos)     /*!< 0x00800000 */
#define RISC_RIFLOCKR5_RLOCK183       RISC_RIFLOCKR5_RLOCK183_Msk
#define RISC_RIFLOCKR5_RLOCK184_Pos   (24U)
#define RISC_RIFLOCKR5_RLOCK184_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK184_Pos)     /*!< 0x01000000 */
#define RISC_RIFLOCKR5_RLOCK184       RISC_RIFLOCKR5_RLOCK184_Msk
#define RISC_RIFLOCKR5_RLOCK185_Pos   (25U)
#define RISC_RIFLOCKR5_RLOCK185_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK185_Pos)     /*!< 0x02000000 */
#define RISC_RIFLOCKR5_RLOCK185       RISC_RIFLOCKR5_RLOCK185_Msk
#define RISC_RIFLOCKR5_RLOCK186_Pos   (26U)
#define RISC_RIFLOCKR5_RLOCK186_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK186_Pos)     /*!< 0x04000000 */
#define RISC_RIFLOCKR5_RLOCK186       RISC_RIFLOCKR5_RLOCK186_Msk
#define RISC_RIFLOCKR5_RLOCK187_Pos   (27U)
#define RISC_RIFLOCKR5_RLOCK187_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK187_Pos)     /*!< 0x08000000 */
#define RISC_RIFLOCKR5_RLOCK187       RISC_RIFLOCKR5_RLOCK187_Msk
#define RISC_RIFLOCKR5_RLOCK188_Pos   (28U)
#define RISC_RIFLOCKR5_RLOCK188_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK188_Pos)     /*!< 0x10000000 */
#define RISC_RIFLOCKR5_RLOCK188       RISC_RIFLOCKR5_RLOCK188_Msk
#define RISC_RIFLOCKR5_RLOCK189_Pos   (29U)
#define RISC_RIFLOCKR5_RLOCK189_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK189_Pos)     /*!< 0x20000000 */
#define RISC_RIFLOCKR5_RLOCK189       RISC_RIFLOCKR5_RLOCK189_Msk
#define RISC_RIFLOCKR5_RLOCK190_Pos   (30U)
#define RISC_RIFLOCKR5_RLOCK190_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK190_Pos)     /*!< 0x40000000 */
#define RISC_RIFLOCKR5_RLOCK190       RISC_RIFLOCKR5_RLOCK190_Msk
#define RISC_RIFLOCKR5_RLOCK191_Pos   (31U)
#define RISC_RIFLOCKR5_RLOCK191_Msk   (0x1U << RISC_RIFLOCKR5_RLOCK191_Pos)     /*!< 0x80000000 */
#define RISC_RIFLOCKR5_RLOCK191       RISC_RIFLOCKR5_RLOCK191_Msk
#endif

/*******************  Bits definition for RISC_PERx_CIDCFGR register **********/
#define RISC_PERCIDCFGR_CFEN_Pos      (0U)
#define RISC_PERCIDCFGR_CFEN_Msk      (0x1U << RISC_PERCIDCFGR_CFEN_Pos)        /*!< 0x00000001 */
#define RISC_PERCIDCFGR_CFEN          RISC_PERCIDCFGR_CFEN_Msk

#define RISC_PERCIDCFGR_SEMEN_Pos     (1U)
#define RISC_PERCIDCFGR_SEMEN_Msk     (0x1U << RISC_PERCIDCFGR_SEMEN_Pos)       /*!< 0x00000002 */
#define RISC_PERCIDCFGR_SEMEN         RISC_PERCIDCFGR_SEMEN_Msk

#define RISC_PERCIDCFGR_SCID_Pos      (4U)
#define RISC_PERCIDCFGR_SCID_Msk      (0x7U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000070 */
#define RISC_PERCIDCFGR_SCID          RISC_PERCIDCFGR_SCID_Msk
#define RISC_PERCIDCFGR_SCID0         (0x0U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000000 */
#define RISC_PERCIDCFGR_SCID1         (0x1U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000010 */
#define RISC_PERCIDCFGR_SCID2         (0x2U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000020 */
#define RISC_PERCIDCFGR_SCID3         (0x3U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000030 */
#define RISC_PERCIDCFGR_SCID4         (0x4U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000040 */
#define RISC_PERCIDCFGR_SCID5         (0x5U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000050 */
#define RISC_PERCIDCFGR_SCID6         (0x6U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000060 */
#define RISC_PERCIDCFGR_SCID7         (0x7U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000070 */

#define RISC_PERCIDCFGR_PRDEN_Pos     (14U)
#define RISC_PERCIDCFGR_PRDEN_Msk     (0x1U << RISC_PERCIDCFGR_PRDEN_Pos)       /*!< 0x00004000 */
#define RISC_PERCIDCFGR_PRDEN         RISC_PERCIDCFGR_PRDEN_Msk

#define RISC_PERCIDCFGR_SEMWL_Pos     (16U)
#define RISC_PERCIDCFGR_SEMWL_Msk     (0xFFU << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00FF0000 */
#define RISC_PERCIDCFGR_SEMWL         RISC_PERCIDCFGR_SEMWL_Msk
#define RISC_PERCIDCFGR_SEMWLC0       (0x1U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00010000 */
#define RISC_PERCIDCFGR_SEMWLC1       (0x2U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00020000 */
#define RISC_PERCIDCFGR_SEMWLC2       (0x4U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00040000 */
#define RISC_PERCIDCFGR_SEMWLC3       (0x8U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00080000 */
#define RISC_PERCIDCFGR_SEMWLC4       (0x10U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00100000 */
#define RISC_PERCIDCFGR_SEMWLC5       (0x20U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00200000 */
#define RISC_PERCIDCFGR_SEMWLC6       (0x40U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00400000 */
#define RISC_PERCIDCFGR_SEMWLC7       (0x80U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00800000 */

/*******************  Bits definition for RISC_PERx_SEMCR register ************/
#define RISC_PERSEMCR_SEMMUTEX_Pos    (0U)
#define RISC_PERSEMCR_SEMMUTEX_Msk    (0x1U << RISC_PERSEMCR_SEMMUTEX_Pos)      /*!< 0x00000001 */
#define RISC_PERSEMCR_SEMMUTEX        RISC_PERSEMCR_SEMMUTEX_Msk

#define RISC_PERSEMCR_SEMCID_Pos      (4U)
#define RISC_PERSEMCR_SEMCID_Msk      (0x7U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000070 */
#define RISC_PERSEMCR_SEMCID          RISC_PERSEMCR_SEMCID_Msk
#define RISC_PERSEMCR_SEMCID0         (0x0U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000000 */
#define RISC_PERSEMCR_SEMCID1         (0x1U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000010 */
#define RISC_PERSEMCR_SEMCID2         (0x2U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000020 */
#define RISC_PERSEMCR_SEMCID3         (0x3U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000030 */
#define RISC_PERSEMCR_SEMCID4         (0x4U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000040 */
#define RISC_PERSEMCR_SEMCID5         (0x5U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000050 */
#define RISC_PERSEMCR_SEMCID6         (0x6U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000060 */
#define RISC_PERSEMCR_SEMCID7         (0x7U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000070 */

/*******************  Bits definition for RISC_REGx_zCFGR register ************/
#define RISC_REGCFGR_SREN_Pos         (0U)
#define RISC_REGCFGR_SREN_Msk         (0x1U << RISC_REGCFGRR_SREN_Pos)          /*!< 0x00000001 */
#define RISC_REGCFGR_SREN             RISC_REGCFGR_SREN_Msk

#define RISC_REGCFGR_RLOCK_Pos        (1U)
#define RISC_REGCFGR_RLOCK_Msk        (0x1U << RISC_REGCFGR_RLOCK_Pos)          /*!< 0x00000002 */
#define RISC_REGCFGR_RLOCK            RISC_REGCFGR_RLOCK_Msk

#define RISC_REGCFGR_SRCID_Pos        (4U)
#define RISC_REGCFGR_SRCID_Msk        (0x7U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000070 */
#define RISC_REGCFGR_SRCID            RISC_REGCFGR_SRCID_Msk
#define RISC_REGCFGR_SRCID0           (0x0U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000000 */
#define RISC_REGCFGR_SRCID1           (0x1U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000010 */
#define RISC_REGCFGR_SRCID2           (0x2U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000020 */
#define RISC_REGCFGR_SRCID3           (0x3U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000030 */
#define RISC_REGCFGR_SRCID4           (0x4U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000040 */
#define RISC_REGCFGR_SRCID5           (0x5U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000050 */
#define RISC_REGCFGR_SRCID6           (0x6U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000060 */
#define RISC_REGCFGR_SRCID7           (0x7U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000070 */

#define RISC_REGCFGR_SEC_Pos          (8U)
#define RISC_REGCFGR_SEC_Msk          (0x1U << RISC_REGCFGR_SEC_Pos)            /*!< 0x00000100 */
#define RISC_REGCFGR_SEC              RISC_REGCFGR_SEC_Msk

#define RISC_REGCFGR_PRIV_Pos         (9U)
#define RISC_REGCFGR_PRIV_Msk         (0x1U << RISC_REGCFGR_PRIV_Pos)           /*!< 0x00000200 */
#define RISC_REGCFGR_PRIV             RISC_REGCFGR_PRIV_Msk

/*******************  Bits definition for RISC_REGx_zADDR register ************/
#define RISC_REG3ADDR_SUBSTART_Pos    (0U)
#define RISC_REG3ADDR_SUBSTART_Msk    (0x7FFU << RISC_REG3ADDR_SUBSTART_Pos)    /*!< 0x000007FF */
#define RISC_REG3ADDR_SUBSTART        RISC_REG3ADDR_SUBSTART_Msk

#define RISC_REG3ADDR_SUBLENGTH_Pos   (16U)
#define RISC_REG3ADDR_SUBLENGTH_Msk   (0xFFFU << RISC_REG3ADDR_SUBLENGTH_Pos)   /*!< 0x0FFF0000 */
#define RISC_REG3ADDR_SUBLENGTH       RISC_REG3ADDR_SUBLENGTH_Msk

/*******************  Bits definition for RIMC_CR register ********************/
#define RIMC_CR_GLOCK_Pos             (0U)
#define RIMC_CR_GLOCK_Msk             (0x1U << RIMC_CR_GLOCK_Pos)               /*!< 0x00000001 */
#define RIMC_CR_GLOCK                 RIMC_CR_GLOCK_Msk

#define RIMC_CR_WUCDONE_Pos           (1U)
#define RIMC_CR_WUCDONE_Msk           (0x1U << RIMC_CR_WUCDONE_Pos)             /*!< 0x00000002 */
#define RIMC_CR_WUCDONE               RIMC_CR_WUCDONE_Msk

#define RIMC_CR_TDCID_Pos             (4U)
#define RIMC_CR_TDCID_Msk             (0x7U << RIMC_CR_TDCID_Pos)               /*!< 0x00000070 */
#define RIMC_CR_TDCID                 RIMC_CR_TDCID_Msk

#define RIMC_CR_DDCID_Pos             (8U)
#define RIMC_CR_DDCID_Msk             (0x7U << RIMC_CR_DDCID_Pos)               /*!< 0x00000700 */
#define RIMC_CR_DDCID                 RIMC_CR_DDCID_Msk

#define RIMC_CR_DDEN_Pos              (15U)
#define RIMC_CR_DDEN_Msk              (0x7U << RIMC_CR_DDEN_Pos)                /*!< 0x00001000 */
#define RIMC_CR_DDEN                  RIMC_CR_DDEN_Msk

/*******************  Bits definition for RIMC_SR register ********************/
#define RIMC_SR_GDPEN_Pos             (0U)
#define RIMC_SR_GDPEN_Msk             (0x1U << RIMC_SR_GDPEN_Pos)               /*!< 0x00000001 */
#define RIMC_SR_GDPEN                 RIMC_SR_GDPEN_Msk

#define RIMC_SR_WUCEN_Pos             (1U)
#define RIMC_SR_WUCEN_Msk             (0x1U << RIMC_SR_WUCEN_Pos)               /*!< 0x00000002 */
#define RIMC_SR_WUCEN                 RIMC_SR_WUCEN_Msk

/*******************  Bits definition for RIMC_ATTRx register *****************/
#if !defined(STM32MP2XX_ASSY2_2_1)
#define RIMC_ATTR_CIDSEL_Pos          (2U)
#define RIMC_ATTR_CIDSEL_Msk          (0x1U << RIMC_ATTR_CIDSEL_Pos)            /*!< 0x00000004 */
#define RIMC_ATTR_CIDSEL              RIMC_ATTR_CIDSEL_Msk
#endif

#define RIMC_ATTR_MCID_Pos            (4U)
#define RIMC_ATTR_MCID_Msk            (0x7U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000070 */
#define RIMC_ATTR_MCID                RIMC_ATTR_MCID_Msk
#define RIMC_ATTR_MCID0               (0x0U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000000 */
#define RIMC_ATTR_MCID1               (0x1U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000010 */
#define RIMC_ATTR_MCID2               (0x2U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000020 */
#define RIMC_ATTR_MCID3               (0x3U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000030 */
#define RIMC_ATTR_MCID4               (0x4U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000040 */
#define RIMC_ATTR_MCID5               (0x5U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000050 */
#define RIMC_ATTR_MCID6               (0x6U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000060 */
#define RIMC_ATTR_MCID7               (0x7U << RIMC_ATTR_MCID_Pos)              /*!< 0x00000070 */

#define RIMC_ATTR_MSEC_Pos            (8U)
#define RIMC_ATTR_MSEC_Msk            (0x1U << RIMC_ATTR_MSEC_Pos)              /*!< 0x00000100 */
#define RIMC_ATTR_MSEC                RIMC_ATTR_MSEC_Msk

#define RIMC_ATTR_MPRIV_Pos           (9U)
#define RIMC_ATTR_MPRIV_Msk           (0x1U << RIMC_ATTR_MPRIV_Pos)             /*!< 0x00000200 */
#define RIMC_ATTR_MPRIV               RIMC_ATTR_MPRIV_Msk

/*******************  Bits definition for RIFSC_VERR register *****************/
#define RIFSC_VERR_MINREV_Pos         (0U)
#define RIFSC_VERR_MINREV_Msk         (0xFU << RIFSC_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define RIFSC_VERR_MINREV             RIFSC_VERR_MINREV_Msk

#define RIFSC_VERR_MAJREV_Pos         (4U)
#define RIFSC_VERR_MAJREV_Msk         (0xFU << RIFSC_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define RIFSC_VERR_MAJREV             RIFSC_VERR_MAJREV_Msk

/*******************  Bits definition for RIFSC_IPIDR register ****************/
#define RIFSC_IPIDR_ID_Pos            (0U)
#define RIFSC_IPIDR_ID_Msk            (0xFFFFFFFFU << RIFSC_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define RIFSC_IPIDR_ID                RIFSC_IPIDR_ID_Msk

/*******************  Bits definition for RIFSC_SIDR register *****************/
#define RIFSC_SIDR_SID_Pos            (0U)
#define RIFSC_SIDR_SID_Msk            (0xFFFFFFFFU << RIFSC_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define RIFSC_SIDR_SID                RIFSC_SIDR_SID_Msk

/*******************  Bits definition for RISAB_CR register *******************/
#define RISAB_CR_GLOCK_Pos            (0U)
#define RISAB_CR_GLOCK_Msk            (0x1U << RISAB_CR_GLOCK_Pos)              /*!< 0x00000001 */
#define RISAB_CR_GLOCK                RISAB_CR_GLOCK_Msk

#define RISAB_CR_SRWIAD_Pos           (31U)
#define RISAB_CR_SRWIAD_Msk           (0x1U << RISAB_CR_SRWIAD_Pos)             /*!< 0x80000000 */
#define RISAB_CR_SRWIAD               RISAB_CR_SRWIAD_Msk

/*******************  Bits definition for RISAB_IASR register *****************/
#define RISAB_IASR_CAEF_Pos           (0U)
#define RISAB_IASR_CAEF_Msk           (0x1U << RISAB_IASR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAB_IASR_CAEF               RISAB_IASR_CAEF_Msk

#define RISAB_IASR_IAEF_Pos           (1U)
#define RISAB_IASR_IAEF_Msk           (0x1U << RISAB_IASR_IAEF_Pos)             /*!< 0x00000002 */
#define RISAB_IASR_IAEF               RISAB_IASR_IAEF_Msk

/*******************  Bits definition for RISAB_IACR register *****************/
#define RISAB_IACR_CAEF_Pos           (0U)
#define RISAB_IACR_CAEF_Msk           (0x1U << RISAB_IACR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAB_IACR_CAEF               RISAB_IACR_CAEF_Msk

#define RISAB_IACR_IAEF_Pos           (1U)
#define RISAB_IACR_IAEF_Msk           (0x1U << RISAB_IACR_IAEF_Pos)             /*!< 0x00000002 */
#define RISAB_IACR_IAEF               RISAB_IACR_IAEF_Msk

#if defined(STM32MP2XX_ASSY2_2_1)
/*******************  Bits definition for RISAB_RCFGLOCK register *************/
#define RISAB_RCFGLOCK_RLOCK0_Pos     (0U)
#define RISAB_RCFGLOCK_RLOCK0_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK0_Pos)       /*!< 0x00000001 */
#define RISAB_RCFGLOCK_RLOCK0         RISAB_RCFGLOCK_RLOCK0_Msk
#define RISAB_RCFGLOCK_RLOCK1_Pos     (1U)
#define RISAB_RCFGLOCK_RLOCK1_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK1_Pos)       /*!< 0x00000002 */
#define RISAB_RCFGLOCK_RLOCK1         RISAB_RCFGLOCK_RLOCK1_Msk
#define RISAB_RCFGLOCK_RLOCK2_Pos     (2U)
#define RISAB_RCFGLOCK_RLOCK2_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK2_Pos)       /*!< 0x00000004 */
#define RISAB_RCFGLOCK_RLOCK2         RISAB_RCFGLOCK_RLOCK2_Msk
#define RISAB_RCFGLOCK_RLOCK3_Pos     (3U)
#define RISAB_RCFGLOCK_RLOCK3_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK3_Pos)       /*!< 0x00000008 */
#define RISAB_RCFGLOCK_RLOCK3         RISAB_RCFGLOCK_RLOCK3_Msk
#define RISAB_RCFGLOCK_RLOCK4_Pos     (4U)
#define RISAB_RCFGLOCK_RLOCK4_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK4_Pos)       /*!< 0x00000010 */
#define RISAB_RCFGLOCK_RLOCK4         RISAB_RCFGLOCK_RLOCK4_Msk
#define RISAB_RCFGLOCK_RLOCK5_Pos     (5U)
#define RISAB_RCFGLOCK_RLOCK5_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK5_Pos)       /*!< 0x00000020 */
#define RISAB_RCFGLOCK_RLOCK5         RISAB_RCFGLOCK_RLOCK5_Msk
#define RISAB_RCFGLOCK_RLOCK6_Pos     (6U)
#define RISAB_RCFGLOCK_RLOCK6_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK6_Pos)       /*!< 0x00000040 */
#define RISAB_RCFGLOCK_RLOCK6         RISAB_RCFGLOCK_RLOCK6_Msk
#define RISAB_RCFGLOCK_RLOCK7_Pos     (7U)
#define RISAB_RCFGLOCK_RLOCK7_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK7_Pos)       /*!< 0x00000080 */
#define RISAB_RCFGLOCK_RLOCK7         RISAB_RCFGLOCK_RLOCK7_Msk
#define RISAB_RCFGLOCK_RLOCK8_Pos     (8U)
#define RISAB_RCFGLOCK_RLOCK8_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK8_Pos)       /*!< 0x00000100 */
#define RISAB_RCFGLOCK_RLOCK8         RISAB_RCFGLOCK_RLOCK8_Msk
#define RISAB_RCFGLOCK_RLOCK9_Pos     (9U)
#define RISAB_RCFGLOCK_RLOCK9_Msk     (0x1U << RISAB_RCFGLOCK_RLOCK9_Pos)       /*!< 0x00000200 */
#define RISAB_RCFGLOCK_RLOCK9         RISAB_RCFGLOCK_RLOCK9_Msk
#define RISAB_RCFGLOCK_RLOCK10_Pos    (10U)
#define RISAB_RCFGLOCK_RLOCK10_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK10_Pos)      /*!< 0x00000400 */
#define RISAB_RCFGLOCK_RLOCK10        RISAB_RCFGLOCK_RLOCK10_Msk
#define RISAB_RCFGLOCK_RLOCK11_Pos    (11U)
#define RISAB_RCFGLOCK_RLOCK11_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK11_Pos)      /*!< 0x00000800 */
#define RISAB_RCFGLOCK_RLOCK11        RISAB_RCFGLOCK_RLOCK11_Msk
#define RISAB_RCFGLOCK_RLOCK12_Pos    (12U)
#define RISAB_RCFGLOCK_RLOCK12_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK12_Pos)      /*!< 0x00001000 */
#define RISAB_RCFGLOCK_RLOCK12        RISAB_RCFGLOCK_RLOCK12_Msk
#define RISAB_RCFGLOCK_RLOCK13_Pos    (13U)
#define RISAB_RCFGLOCK_RLOCK13_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK13_Pos)      /*!< 0x00002000 */
#define RISAB_RCFGLOCK_RLOCK13        RISAB_RCFGLOCK_RLOCK13_Msk
#define RISAB_RCFGLOCK_RLOCK14_Pos    (14U)
#define RISAB_RCFGLOCK_RLOCK14_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK14_Pos)      /*!< 0x00004000 */
#define RISAB_RCFGLOCK_RLOCK14        RISAB_RCFGLOCK_RLOCK14_Msk
#define RISAB_RCFGLOCK_RLOCK15_Pos    (15U)
#define RISAB_RCFGLOCK_RLOCK15_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK15_Pos)      /*!< 0x00008000 */
#define RISAB_RCFGLOCK_RLOCK15        RISAB_RCFGLOCK_RLOCK15_Msk
#define RISAB_RCFGLOCK_RLOCK16_Pos    (16U)
#define RISAB_RCFGLOCK_RLOCK16_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK16_Pos)      /*!< 0x00010000 */
#define RISAB_RCFGLOCK_RLOCK16        RISAB_RCFGLOCK_RLOCK16_Msk
#define RISAB_RCFGLOCK_RLOCK17_Pos    (17U)
#define RISAB_RCFGLOCK_RLOCK17_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK17_Pos)      /*!< 0x00020000 */
#define RISAB_RCFGLOCK_RLOCK17        RISAB_RCFGLOCK_RLOCK17_Msk
#define RISAB_RCFGLOCK_RLOCK18_Pos    (18U)
#define RISAB_RCFGLOCK_RLOCK18_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK18_Pos)      /*!< 0x00040000 */
#define RISAB_RCFGLOCK_RLOCK18        RISAB_RCFGLOCK_RLOCK18_Msk
#define RISAB_RCFGLOCK_RLOCK19_Pos    (19U)
#define RISAB_RCFGLOCK_RLOCK19_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK19_Pos)      /*!< 0x00080000 */
#define RISAB_RCFGLOCK_RLOCK19        RISAB_RCFGLOCK_RLOCK19_Msk
#define RISAB_RCFGLOCK_RLOCK20_Pos    (20U)
#define RISAB_RCFGLOCK_RLOCK20_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK20_Pos)      /*!< 0x00100000 */
#define RISAB_RCFGLOCK_RLOCK20        RISAB_RCFGLOCK_RLOCK20_Msk
#define RISAB_RCFGLOCK_RLOCK21_Pos    (21U)
#define RISAB_RCFGLOCK_RLOCK21_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK21_Pos)      /*!< 0x00200000 */
#define RISAB_RCFGLOCK_RLOCK21        RISAB_RCFGLOCK_RLOCK21_Msk
#define RISAB_RCFGLOCK_RLOCK22_Pos    (22U)
#define RISAB_RCFGLOCK_RLOCK22_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK22_Pos)      /*!< 0x00400000 */
#define RISAB_RCFGLOCK_RLOCK22        RISAB_RCFGLOCK_RLOCK22_Msk
#define RISAB_RCFGLOCK_RLOCK23_Pos    (23U)
#define RISAB_RCFGLOCK_RLOCK23_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK23_Pos)      /*!< 0x00800000 */
#define RISAB_RCFGLOCK_RLOCK23        RISAB_RCFGLOCK_RLOCK23_Msk
#define RISAB_RCFGLOCK_RLOCK24_Pos    (24U)
#define RISAB_RCFGLOCK_RLOCK24_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK24_Pos)      /*!< 0x01000000 */
#define RISAB_RCFGLOCK_RLOCK24        RISAB_RCFGLOCK_RLOCK24_Msk
#define RISAB_RCFGLOCK_RLOCK25_Pos    (25U)
#define RISAB_RCFGLOCK_RLOCK25_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK25_Pos)      /*!< 0x02000000 */
#define RISAB_RCFGLOCK_RLOCK25        RISAB_RCFGLOCK_RLOCK25_Msk
#define RISAB_RCFGLOCK_RLOCK26_Pos    (26U)
#define RISAB_RCFGLOCK_RLOCK26_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK26_Pos)      /*!< 0x04000000 */
#define RISAB_RCFGLOCK_RLOCK26        RISAB_RCFGLOCK_RLOCK26_Msk
#define RISAB_RCFGLOCK_RLOCK27_Pos    (27U)
#define RISAB_RCFGLOCK_RLOCK27_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK27_Pos)      /*!< 0x08000000 */
#define RISAB_RCFGLOCK_RLOCK27        RISAB_RCFGLOCK_RLOCK27_Msk
#define RISAB_RCFGLOCK_RLOCK28_Pos    (28U)
#define RISAB_RCFGLOCK_RLOCK28_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK28_Pos)      /*!< 0x10000000 */
#define RISAB_RCFGLOCK_RLOCK28        RISAB_RCFGLOCK_RLOCK28_Msk
#define RISAB_RCFGLOCK_RLOCK29_Pos    (29U)
#define RISAB_RCFGLOCK_RLOCK29_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK29_Pos)      /*!< 0x20000000 */
#define RISAB_RCFGLOCK_RLOCK29        RISAB_RCFGLOCK_RLOCK29_Msk
#define RISAB_RCFGLOCK_RLOCK30_Pos    (30U)
#define RISAB_RCFGLOCK_RLOCK30_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK30_Pos)      /*!< 0x40000000 */
#define RISAB_RCFGLOCK_RLOCK30        RISAB_RCFGLOCK_RLOCK30_Msk
#define RISAB_RCFGLOCK_RLOCK31_Pos    (31U)
#define RISAB_RCFGLOCK_RLOCK31_Msk    (0x1U << RISAB_RCFGLOCK_RLOCK31_Pos)      /*!< 0x80000000 */
#define RISAB_RCFGLOCK_RLOCK31        RISAB_RCFGLOCK_RLOCK31_Msk
#else
/*******************  Bits definition for RISAB_RIFLOCKR register *************/
#define RISAB_RIFLOCKR_RLOCK0_Pos     (0U)
#define RISAB_RIFLOCKR_RLOCK0_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK0_Pos)       /*!< 0x00000001 */
#define RISAB_RIFLOCKR_RLOCK0         RISAB_RIFLOCKR_RLOCK0_Msk
#define RISAB_RIFLOCKR_RLOCK1_Pos     (1U)
#define RISAB_RIFLOCKR_RLOCK1_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK1_Pos)       /*!< 0x00000002 */
#define RISAB_RIFLOCKR_RLOCK1         RISAB_RIFLOCKR_RLOCK1_Msk
#define RISAB_RIFLOCKR_RLOCK2_Pos     (2U)
#define RISAB_RIFLOCKR_RLOCK2_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK2_Pos)       /*!< 0x00000004 */
#define RISAB_RIFLOCKR_RLOCK2         RISAB_RIFLOCKR_RLOCK2_Msk
#define RISAB_RIFLOCKR_RLOCK3_Pos     (3U)
#define RISAB_RIFLOCKR_RLOCK3_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK3_Pos)       /*!< 0x00000008 */
#define RISAB_RIFLOCKR_RLOCK3         RISAB_RIFLOCKR_RLOCK3_Msk
#define RISAB_RIFLOCKR_RLOCK4_Pos     (4U)
#define RISAB_RIFLOCKR_RLOCK4_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK4_Pos)       /*!< 0x00000010 */
#define RISAB_RIFLOCKR_RLOCK4         RISAB_RIFLOCKR_RLOCK4_Msk
#define RISAB_RIFLOCKR_RLOCK5_Pos     (5U)
#define RISAB_RIFLOCKR_RLOCK5_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK5_Pos)       /*!< 0x00000020 */
#define RISAB_RIFLOCKR_RLOCK5         RISAB_RIFLOCKR_RLOCK5_Msk
#define RISAB_RIFLOCKR_RLOCK6_Pos     (6U)
#define RISAB_RIFLOCKR_RLOCK6_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK6_Pos)       /*!< 0x00000040 */
#define RISAB_RIFLOCKR_RLOCK6         RISAB_RIFLOCKR_RLOCK6_Msk
#define RISAB_RIFLOCKR_RLOCK7_Pos     (7U)
#define RISAB_RIFLOCKR_RLOCK7_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK7_Pos)       /*!< 0x00000080 */
#define RISAB_RIFLOCKR_RLOCK7         RISAB_RIFLOCKR_RLOCK7_Msk
#define RISAB_RIFLOCKR_RLOCK8_Pos     (8U)
#define RISAB_RIFLOCKR_RLOCK8_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK8_Pos)       /*!< 0x00000100 */
#define RISAB_RIFLOCKR_RLOCK8         RISAB_RIFLOCKR_RLOCK8_Msk
#define RISAB_RIFLOCKR_RLOCK9_Pos     (9U)
#define RISAB_RIFLOCKR_RLOCK9_Msk     (0x1U << RISAB_RIFLOCKR_RLOCK9_Pos)       /*!< 0x00000200 */
#define RISAB_RIFLOCKR_RLOCK9         RISAB_RIFLOCKR_RLOCK9_Msk
#define RISAB_RIFLOCKR_RLOCK10_Pos    (10U)
#define RISAB_RIFLOCKR_RLOCK10_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK10_Pos)      /*!< 0x00000400 */
#define RISAB_RIFLOCKR_RLOCK10        RISAB_RIFLOCKR_RLOCK10_Msk
#define RISAB_RIFLOCKR_RLOCK11_Pos    (11U)
#define RISAB_RIFLOCKR_RLOCK11_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK11_Pos)      /*!< 0x00000800 */
#define RISAB_RIFLOCKR_RLOCK11        RISAB_RIFLOCKR_RLOCK11_Msk
#define RISAB_RIFLOCKR_RLOCK12_Pos    (12U)
#define RISAB_RIFLOCKR_RLOCK12_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK12_Pos)      /*!< 0x00001000 */
#define RISAB_RIFLOCKR_RLOCK12        RISAB_RIFLOCKR_RLOCK12_Msk
#define RISAB_RIFLOCKR_RLOCK13_Pos    (13U)
#define RISAB_RIFLOCKR_RLOCK13_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK13_Pos)      /*!< 0x00002000 */
#define RISAB_RIFLOCKR_RLOCK13        RISAB_RIFLOCKR_RLOCK13_Msk
#define RISAB_RIFLOCKR_RLOCK14_Pos    (14U)
#define RISAB_RIFLOCKR_RLOCK14_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK14_Pos)      /*!< 0x00004000 */
#define RISAB_RIFLOCKR_RLOCK14        RISAB_RIFLOCKR_RLOCK14_Msk
#define RISAB_RIFLOCKR_RLOCK15_Pos    (15U)
#define RISAB_RIFLOCKR_RLOCK15_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK15_Pos)      /*!< 0x00008000 */
#define RISAB_RIFLOCKR_RLOCK15        RISAB_RIFLOCKR_RLOCK15_Msk
#define RISAB_RIFLOCKR_RLOCK16_Pos    (16U)
#define RISAB_RIFLOCKR_RLOCK16_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK16_Pos)      /*!< 0x00010000 */
#define RISAB_RIFLOCKR_RLOCK16        RISAB_RIFLOCKR_RLOCK16_Msk
#define RISAB_RIFLOCKR_RLOCK17_Pos    (17U)
#define RISAB_RIFLOCKR_RLOCK17_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK17_Pos)      /*!< 0x00020000 */
#define RISAB_RIFLOCKR_RLOCK17        RISAB_RIFLOCKR_RLOCK17_Msk
#define RISAB_RIFLOCKR_RLOCK18_Pos    (18U)
#define RISAB_RIFLOCKR_RLOCK18_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK18_Pos)      /*!< 0x00040000 */
#define RISAB_RIFLOCKR_RLOCK18        RISAB_RIFLOCKR_RLOCK18_Msk
#define RISAB_RIFLOCKR_RLOCK19_Pos    (19U)
#define RISAB_RIFLOCKR_RLOCK19_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK19_Pos)      /*!< 0x00080000 */
#define RISAB_RIFLOCKR_RLOCK19        RISAB_RIFLOCKR_RLOCK19_Msk
#define RISAB_RIFLOCKR_RLOCK20_Pos    (20U)
#define RISAB_RIFLOCKR_RLOCK20_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK20_Pos)      /*!< 0x00100000 */
#define RISAB_RIFLOCKR_RLOCK20        RISAB_RIFLOCKR_RLOCK20_Msk
#define RISAB_RIFLOCKR_RLOCK21_Pos    (21U)
#define RISAB_RIFLOCKR_RLOCK21_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK21_Pos)      /*!< 0x00200000 */
#define RISAB_RIFLOCKR_RLOCK21        RISAB_RIFLOCKR_RLOCK21_Msk
#define RISAB_RIFLOCKR_RLOCK22_Pos    (22U)
#define RISAB_RIFLOCKR_RLOCK22_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK22_Pos)      /*!< 0x00400000 */
#define RISAB_RIFLOCKR_RLOCK22        RISAB_RIFLOCKR_RLOCK22_Msk
#define RISAB_RIFLOCKR_RLOCK23_Pos    (23U)
#define RISAB_RIFLOCKR_RLOCK23_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK23_Pos)      /*!< 0x00800000 */
#define RISAB_RIFLOCKR_RLOCK23        RISAB_RIFLOCKR_RLOCK23_Msk
#define RISAB_RIFLOCKR_RLOCK24_Pos    (24U)
#define RISAB_RIFLOCKR_RLOCK24_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK24_Pos)      /*!< 0x01000000 */
#define RISAB_RIFLOCKR_RLOCK24        RISAB_RIFLOCKR_RLOCK24_Msk
#define RISAB_RIFLOCKR_RLOCK25_Pos    (25U)
#define RISAB_RIFLOCKR_RLOCK25_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK25_Pos)      /*!< 0x02000000 */
#define RISAB_RIFLOCKR_RLOCK25        RISAB_RIFLOCKR_RLOCK25_Msk
#define RISAB_RIFLOCKR_RLOCK26_Pos    (26U)
#define RISAB_RIFLOCKR_RLOCK26_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK26_Pos)      /*!< 0x04000000 */
#define RISAB_RIFLOCKR_RLOCK26        RISAB_RIFLOCKR_RLOCK26_Msk
#define RISAB_RIFLOCKR_RLOCK27_Pos    (27U)
#define RISAB_RIFLOCKR_RLOCK27_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK27_Pos)      /*!< 0x08000000 */
#define RISAB_RIFLOCKR_RLOCK27        RISAB_RIFLOCKR_RLOCK27_Msk
#define RISAB_RIFLOCKR_RLOCK28_Pos    (28U)
#define RISAB_RIFLOCKR_RLOCK28_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK28_Pos)      /*!< 0x10000000 */
#define RISAB_RIFLOCKR_RLOCK28        RISAB_RIFLOCKR_RLOCK28_Msk
#define RISAB_RIFLOCKR_RLOCK29_Pos    (29U)
#define RISAB_RIFLOCKR_RLOCK29_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK29_Pos)      /*!< 0x20000000 */
#define RISAB_RIFLOCKR_RLOCK29        RISAB_RIFLOCKR_RLOCK29_Msk
#define RISAB_RIFLOCKR_RLOCK30_Pos    (30U)
#define RISAB_RIFLOCKR_RLOCK30_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK30_Pos)      /*!< 0x40000000 */
#define RISAB_RIFLOCKR_RLOCK30        RISAB_RIFLOCKR_RLOCK30_Msk
#define RISAB_RIFLOCKR_RLOCK31_Pos    (31U)
#define RISAB_RIFLOCKR_RLOCK31_Msk    (0x1U << RISAB_RIFLOCKR_RLOCK31_Pos)      /*!< 0x80000000 */
#define RISAB_RIFLOCKR_RLOCK31        RISAB_RIFLOCKR_RLOCK31_Msk
#endif

/*******************  Bits definition for RISAB_IAESR register ****************/
#define RISAB_IAESR_IACID_Pos         (0U)
#define RISAB_IAESR_IACID_Msk         (0x7U << RISAB_IAESR_IACID_Pos)           /*!< 0x00000007 */
#define RISAB_IAESR_IACID             RISAB_IAESR_IACID_Msk

#define RISAB_IAESR_IAPRIV_Pos        (4U)
#define RISAB_IAESR_IAPRIV_Msk        (0x1U << RISAB_IAESR_IAPRIV_Pos)          /*!< 0x00000010 */
#define RISAB_IAESR_IAPRIV            RISAB_IAESR_IAPRIV_Msk

#define RISAB_IAESR_IASEC_Pos         (5U)
#define RISAB_IAESR_IASEC_Msk         (0x1U << RISAB_IAESR_IASEC_Pos)           /*!< 0x00000020 */
#define RISAB_IAESR_IASEC             RISAB_IAESR_IASEC_Msk

#define RISAB_IAESR_IANRW_Pos         (7U)
#define RISAB_IAESR_IANRW_Msk         (0x1U << RISAB_IAESR_IANRW_Pos)           /*!< 0x00000080 */
#define RISAB_IAESR_IANRW             RISAB_IAESR_IANRW_Msk

/*******************  Bits definition for RISAB_IADDR register ****************/
#define RISAB_IADDR_IADD_Pos          (0U)
#define RISAB_IADDR_IADD_Msk          (0xFFFFFFFFU << RISAB_IADDR_IADD_Pos)     /*!< 0xFFFFFFFF */
#define RISAB_IADDR_IADD              RISAB_IADDR_IADD_Msk

/*******************  Bits definition for RISAB_PGx_SECCFGR register **********/
#define RISAB_PGSECCFGR_SEC_Pos       (0U)
#define RISAB_PGSECCFGR_SEC_Msk       (0xFFFFU << RISAB_PGSECCFGR_SEC_Pos)      /*!< 0x0000FFFF */
#define RISAB_PGSECCFGR_SEC           RISAB_PGSECCFGR_SEC_Msk
#define RISAB_PGSECCFGR_SEC0_Pos      (0U)
#define RISAB_PGSECCFGR_SEC0_Msk      (0x1U << RISAB_PGSECCFGR_SEC0_Pos)        /*!< 0x00000001 */
#define RISAB_PGSECCFGR_SEC0          RISAB_PGSECCFGR_SEC0_Msk
#define RISAB_PGSECCFGR_SEC1_Pos      (1U)
#define RISAB_PGSECCFGR_SEC1_Msk      (0x1U << RISAB_PGSECCFGR_SEC1_Pos)        /*!< 0x00000002 */
#define RISAB_PGSECCFGR_SEC1          RISAB_PGSECCFGR_SEC1_Msk
#define RISAB_PGSECCFGR_SEC2_Pos      (2U)
#define RISAB_PGSECCFGR_SEC2_Msk      (0x1U << RISAB_PGSECCFGR_SEC2_Pos)        /*!< 0x00000004 */
#define RISAB_PGSECCFGR_SEC2          RISAB_PGSECCFGR_SEC2_Msk
#define RISAB_PGSECCFGR_SEC3_Pos      (3U)
#define RISAB_PGSECCFGR_SEC3_Msk      (0x1U << RISAB_PGSECCFGR_SEC3_Pos)        /*!< 0x00000008 */
#define RISAB_PGSECCFGR_SEC3          RISAB_PGSECCFGR_SEC3_Msk
#define RISAB_PGSECCFGR_SEC4_Pos      (4U)
#define RISAB_PGSECCFGR_SEC4_Msk      (0x1U << RISAB_PGSECCFGR_SEC4_Pos)        /*!< 0x00000010 */
#define RISAB_PGSECCFGR_SEC4          RISAB_PGSECCFGR_SEC4_Msk
#define RISAB_PGSECCFGR_SEC5_Pos      (5U)
#define RISAB_PGSECCFGR_SEC5_Msk      (0x1U << RISAB_PGSECCFGR_SEC5_Pos)        /*!< 0x00000020 */
#define RISAB_PGSECCFGR_SEC5          RISAB_PGSECCFGR_SEC5_Msk
#define RISAB_PGSECCFGR_SEC6_Pos      (6U)
#define RISAB_PGSECCFGR_SEC6_Msk      (0x1U << RISAB_PGSECCFGR_SEC6_Pos)        /*!< 0x00000040 */
#define RISAB_PGSECCFGR_SEC6          RISAB_PGSECCFGR_SEC6_Msk
#define RISAB_PGSECCFGR_SEC7_Pos      (7U)
#define RISAB_PGSECCFGR_SEC7_Msk      (0x1U << RISAB_PGSECCFGR_SEC7_Pos)        /*!< 0x00000080 */
#define RISAB_PGSECCFGR_SEC7          RISAB_PGSECCFGR_SEC7_Msk
#if defined(STM32MP2XX_ASSY2_2_1)
#define RISAB_PGSECCFGR_SEC8_Pos      (8U)
#define RISAB_PGSECCFGR_SEC8_Msk      (0x1U << RISAB_PGSECCFGR_SEC8_Pos)        /*!< 0x00000100 */
#define RISAB_PGSECCFGR_SEC8          RISAB_PGSECCFGR_SEC8_Msk
#define RISAB_PGSECCFGR_SEC9_Pos      (9U)
#define RISAB_PGSECCFGR_SEC9_Msk      (0x1U << RISAB_PGSECCFGR_SEC9_Pos)        /*!< 0x00000200 */
#define RISAB_PGSECCFGR_SEC9          RISAB_PGSECCFGR_SEC9_Msk
#define RISAB_PGSECCFGR_SEC10_Pos     (10U)
#define RISAB_PGSECCFGR_SEC10_Msk     (0x1U << RISAB_PGSECCFGR_SEC10_Pos)       /*!< 0x00000400 */
#define RISAB_PGSECCFGR_SEC10         RISAB_PGSECCFGR_SEC10_Msk
#define RISAB_PGSECCFGR_SEC11_Pos     (11U)
#define RISAB_PGSECCFGR_SEC11_Msk     (0x1U << RISAB_PGSECCFGR_SEC11_Pos)       /*!< 0x00000800 */
#define RISAB_PGSECCFGR_SEC11         RISAB_PGSECCFGR_SEC11_Msk
#define RISAB_PGSECCFGR_SEC12_Pos     (12U)
#define RISAB_PGSECCFGR_SEC12_Msk     (0x1U << RISAB_PGSECCFGR_SEC12_Pos)       /*!< 0x00001000 */
#define RISAB_PGSECCFGR_SEC12         RISAB_PGSECCFGR_SEC12_Msk
#define RISAB_PGSECCFGR_SEC13_Pos     (13U)
#define RISAB_PGSECCFGR_SEC13_Msk     (0x1U << RISAB_PGSECCFGR_SEC13_Pos)       /*!< 0x00002000 */
#define RISAB_PGSECCFGR_SEC13         RISAB_PGSECCFGR_SEC13_Msk
#define RISAB_PGSECCFGR_SEC14_Pos     (14U)
#define RISAB_PGSECCFGR_SEC14_Msk     (0x1U << RISAB_PGSECCFGR_SEC14_Pos)       /*!< 0x00004000 */
#define RISAB_PGSECCFGR_SEC14         RISAB_PGSECCFGR_SEC14_Msk
#define RISAB_PGSECCFGR_SEC15_Pos     (15U)
#define RISAB_PGSECCFGR_SEC15_Msk     (0x1U << RISAB_PGSECCFGR_SEC15_Pos)       /*!< 0x00008000 */
#define RISAB_PGSECCFGR_SEC15         RISAB_SECCFGR_SEC15_Msk
#endif
/*******************  Bits definition for RISAB_PGx_PRIVCFGR register *********/
#define RISAB_PGPRIVCFGR_PRIV_Pos     (0U)
#define RISAB_PGPRIVCFGR_PRIV_Msk     (0xFFFFU << RISAB_PGPRIVCFGR_PRIV_Pos)    /*!< 0x0000FFFF */
#define RISAB_PGPRIVCFGR_PRIV         RISAB_PGPRIVCFGR_PRIV_Msk
#define RISAB_PGPRIVCFGR_PRIV0_Pos    (0U)
#define RISAB_PGPRIVCFGR_PRIV0_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV0_Pos)      /*!< 0x00000001 */
#define RISAB_PGPRIVCFGR_PRIV0        RISAB_PGPRIVCFGR_PRIV0_Msk
#define RISAB_PGPRIVCFGR_PRIV1_Pos    (1U)
#define RISAB_PGPRIVCFGR_PRIV1_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV1_Pos)      /*!< 0x00000002 */
#define RISAB_PGPRIVCFGR_PRIV1        RISAB_PGPRIVCFGR_PRIV1_Msk
#define RISAB_PGPRIVCFGR_PRIV2_Pos    (2U)
#define RISAB_PGPRIVCFGR_PRIV2_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV2_Pos)      /*!< 0x00000004 */
#define RISAB_PGPRIVCFGR_PRIV2        RISAB_PGPRIVCFGR_PRIV2_Msk
#define RISAB_PGPRIVCFGR_PRIV3_Pos    (3U)
#define RISAB_PGPRIVCFGR_PRIV3_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV3_Pos)      /*!< 0x00000008 */
#define RISAB_PGPRIVCFGR_PRIV3        RISAB_PGPRIVCFGR_PRIV3_Msk
#define RISAB_PGPRIVCFGR_PRIV4_Pos    (4U)
#define RISAB_PGPRIVCFGR_PRIV4_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV4_Pos)      /*!< 0x00000010 */
#define RISAB_PGPRIVCFGR_PRIV4        RISAB_PGPRIVCFGR_PRIV4_Msk
#define RISAB_PGPRIVCFGR_PRIV5_Pos    (5U)
#define RISAB_PGPRIVCFGR_PRIV5_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV5_Pos)      /*!< 0x00000020 */
#define RISAB_PGPRIVCFGR_PRIV5        RISAB_PGPRIVCFGR_PRIV5_Msk
#define RISAB_PGPRIVCFGR_PRIV6_Pos    (6U)
#define RISAB_PGPRIVCFGR_PRIV6_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV6_Pos)      /*!< 0x00000040 */
#define RISAB_PGPRIVCFGR_PRIV6        RISAB_PGPRIVCFGR_PRIV6_Msk
#define RISAB_PGPRIVCFGR_PRIV7_Pos    (7U)
#define RISAB_PGPRIVCFGR_PRIV7_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV7_Pos)      /*!< 0x00000080 */
#define RISAB_PGPRIVCFGR_PRIV7        RISAB_PGPRIVCFGR_PRIV7_Msk
#if defined(STM32MP2XX_ASSY2_2_1)
#define RISAB_PGPRIVCFGR_PRIV8_Pos    (8U)
#define RISAB_PGPRIVCFGR_PRIV8_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV8_Pos)      /*!< 0x00000100 */
#define RISAB_PGPRIVCFGR_PRIV8        RISAB_PGPRIVCFGR_PRIV8_Msk
#define RISAB_PGPRIVCFGR_PRIV9_Pos    (9U)
#define RISAB_PGPRIVCFGR_PRIV9_Msk    (0x1U << RISAB_PGPRIVCFGR_PRIV9_Pos)      /*!< 0x00000200 */
#define RISAB_PGPRIVCFGR_PRIV9        RISAB_PGPRIVCFGR_PRIV9_Msk
#define RISAB_PGPRIVCFGR_PRIV10_Pos   (10U)
#define RISAB_PGPRIVCFGR_PRIV10_Msk   (0x1U << RISAB_PGPRIVCFGR_PRIV10_Pos)     /*!< 0x00000400 */
#define RISAB_PGPRIVCFGR_PRIV10       RISAB_PGPRIVCFGR_PRIV10_Msk
#define RISAB_PGPRIVCFGR_PRIV11_Pos   (11U)
#define RISAB_PGPRIVCFGR_PRIV11_Msk   (0x1U << RISAB_PGPRIVCFGR_PRIV11_Pos)     /*!< 0x00000800 */
#define RISAB_PGPRIVCFGR_PRIV11       RISAB_PGPRIVCFGR_PRIV11_Msk
#define RISAB_PGPRIVCFGR_PRIV12_Pos   (12U)
#define RISAB_PGPRIVCFGR_PRIV12_Msk   (0x1U << RISAB_PGPRIVCFGR_PRIV12_Pos)     /*!< 0x00001000 */
#define RISAB_PGPRIVCFGR_PRIV12       RISAB_PGPRIVCFGR_PRIV12_Msk
#define RISAB_PGPRIVCFGR_PRIV13_Pos   (13U)
#define RISAB_PGPRIVCFGR_PRIV13_Msk   (0x1U << RISAB_PGPRIVCFGR_PRIV13_Pos)     /*!< 0x00002000 */
#define RISAB_PGPRIVCFGR_PRIV13       RISAB_PGPRIVCFGR_PRIV13_Msk
#define RISAB_PGPRIVCFGR_PRIV14_Pos   (14U)
#define RISAB_PGPRIVCFGR_PRIV14_Msk   (0x1U << RISAB_PGPRIVCFGR_PRIV14_Pos)     /*!< 0x00004000 */
#define RISAB_PGPRIVCFGR_PRIV14       RISAB_PGPRIVCFGR_PRIV14_Msk
#define RISAB_PGPRIVCFGR_PRIV15_Pos   (15U)
#define RISAB_PGPRIVCFGR_PRIV15_Msk   (0x1U << RISAB_PGPRIVCFGR_PRIV15_Pos)     /*!< 0x00008000 */
#define RISAB_PGPRIVCFGR_PRIV15       RISAB_PGPRIVCFGR_PRIV15_Msk
#endif
#if defined(STM32MP2XX_ASSY2_2_1)
/*******************  Bits definition for RISAB_PGx_CmPRIVCFGRx register ******/
#else
/*******************  Bits definition for RISAB_PGx_C2PRIVCFGRx register ******/
#endif
#define RISAB_PGC2PRIVCFGR_PRIV_Pos   (0U)
#define RISAB_PGC2PRIVCFGR_PRIV_Msk   (0xFFFFU << RISAB_PGC2PRIVCFGR_PRIV_Pos)  /*!< 0x0000FFFF */
#define RISAB_PGC2PRIVCFGR_PRIV       RISAB_PGC2PRIVCFGR_PRIV_Msk
#define RISAB_PGC2PRIVCFGR_PRIV0_Pos  (0U)
#define RISAB_PGC2PRIVCFGR_PRIV0_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV0_Pos)    /*!< 0x00000001 */
#define RISAB_PGC2PRIVCFGR_PRIV0      RISAB_PGC2PRIVCFGR_PRIV0_Msk
#define RISAB_PGC2PRIVCFGR_PRIV1_Pos  (1U)
#define RISAB_PGC2PRIVCFGR_PRIV1_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV1_Pos)    /*!< 0x00000002 */
#define RISAB_PGC2PRIVCFGR_PRIV1      RISAB_PGC2PRIVCFGR_PRIV1_Msk
#define RISAB_PGC2PRIVCFGR_PRIV2_Pos  (2U)
#define RISAB_PGC2PRIVCFGR_PRIV2_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV2_Pos)    /*!< 0x00000004 */
#define RISAB_PGC2PRIVCFGR_PRIV2      RISAB_PGC2PRIVCFGR_PRIV2_Msk
#define RISAB_PGC2PRIVCFGR_PRIV3_Pos  (3U)
#define RISAB_PGC2PRIVCFGR_PRIV3_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV3_Pos)    /*!< 0x00000008 */
#define RISAB_PGC2PRIVCFGR_PRIV3      RISAB_PGC2PRIVCFGR_PRIV3_Msk
#define RISAB_PGC2PRIVCFGR_PRIV4_Pos  (4U)
#define RISAB_PGC2PRIVCFGR_PRIV4_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV4_Pos)    /*!< 0x00000010 */
#define RISAB_PGC2PRIVCFGR_PRIV4      RISAB_PGC2PRIVCFGR_PRIV4_Msk
#define RISAB_PGC2PRIVCFGR_PRIV5_Pos  (5U)
#define RISAB_PGC2PRIVCFGR_PRIV5_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV5_Pos)    /*!< 0x00000020 */
#define RISAB_PGC2PRIVCFGR_PRIV5      RISAB_PGC2PRIVCFGR_PRIV5_Msk
#define RISAB_PGC2PRIVCFGR_PRIV6_Pos  (6U)
#define RISAB_PGC2PRIVCFGR_PRIV6_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV6_Pos)    /*!< 0x00000040 */
#define RISAB_PGC2PRIVCFGR_PRIV6      RISAB_PGC2PRIVCFGR_PRIV6_Msk
#define RISAB_PGC2PRIVCFGR_PRIV7_Pos  (7U)
#define RISAB_PGC2PRIVCFGR_PRIV7_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV7_Pos)    /*!< 0x00000080 */
#define RISAB_PGC2PRIVCFGR_PRIV7      RISAB_PGC2PRIVCFGR_PRIV7_Msk
#if defined(STM32MP2XX_ASSY2_2_1)
#define RISAB_PGC2PRIVCFGR_PRIV8_Pos  (8U)
#define RISAB_PGC2PRIVCFGR_PRIV8_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV8_Pos)    /*!< 0x00000100 */
#define RISAB_PGC2PRIVCFGR_PRIV8      RISAB_PGC2PRIVCFGR_PRIV8_Msk
#define RISAB_PGC2PRIVCFGR_PRIV9_Pos  (9U)
#define RISAB_PGC2PRIVCFGR_PRIV9_Msk  (0x1U << RISAB_PGC2PRIVCFGR_PRIV9_Pos)    /*!< 0x00000200 */
#define RISAB_PGC2PRIVCFGR_PRIV9      RISAB_PGC2PRIVCFGR_PRIV9_Msk
#define RISAB_PGC2PRIVCFGR_PRIV10_Pos (10U)
#define RISAB_PGC2PRIVCFGR_PRIV10_Msk (0x1U << RISAB_PGC2PRIVCFGR_PRIV10_Pos)   /*!< 0x00000400 */
#define RISAB_PGC2PRIVCFGR_PRIV10     RISAB_PGC2PRIVCFGR_PRIV10_Msk
#define RISAB_PGC2PRIVCFGR_PRIV11_Pos (11U)
#define RISAB_PGC2PRIVCFGR_PRIV11_Msk (0x1U << RISAB_PGC2PRIVCFGR_PRIV11_Pos)   /*!< 0x00000800 */
#define RISAB_PGC2PRIVCFGR_PRIV11     RISAB_PGC2PRIVCFGR_PRIV11_Msk
#define RISAB_PGC2PRIVCFGR_PRIV12_Pos (12U)
#define RISAB_PGC2PRIVCFGR_PRIV12_Msk (0x1U << RISAB_PGC2PRIVCFGR_PRIV12_Pos)   /*!< 0x00001000 */
#define RISAB_PGC2PRIVCFGR_PRIV12     RISAB_PGC2PRIVCFGR_PRIV12_Msk
#define RISAB_PGC2PRIVCFGR_PRIV13_Pos (13U)
#define RISAB_PGC2PRIVCFGR_PRIV13_Msk (0x1U << RISAB_PGC2PRIVCFGR_PRIV13_Pos)   /*!< 0x00002000 */
#define RISAB_PGC2PRIVCFGR_PRIV13     RISAB_PGC2PRIVCFGR_PRIV13_Msk
#define RISAB_PGC2PRIVCFGR_PRIV14_Pos (14U)
#define RISAB_PGC2PRIVCFGR_PRIV14_Msk (0x1U << RISAB_PGC2PRIVCFGR_PRIV14_Pos)   /*!< 0x00004000 */
#define RISAB_PGC2PRIVCFGR_PRIV14     RISAB_PGC2PRIVCFGR_PRIV14_Msk
#define RISAB_PGC2PRIVCFGR_PRIV15_Pos (15U)
#define RISAB_PGC2PRIVCFGR_PRIV15_Msk (0x1U << RISAB_PGC2PRIVCFGR_PRIV15_Pos)   /*!< 0x00008000 */
#define RISAB_PGC2PRIVCFGR_PRIV15     RISAB_PGC2PRIVCFGR_PRIV15_Msk
#endif
/*******************  Bits definition for RISAB_CIDxPRIVCFGR register *********/
#define RISAB_CIDPRIVCFGR_PPRIV0_Pos  (0U)
#define RISAB_CIDPRIVCFGR_PPRIV0_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV0_Pos)    /*!< 0x00000001 */
#define RISAB_CIDPRIVCFGR_PPRIV0      RISAB_CIDPRIVCFGR_PPRIV0_Msk
#define RISAB_CIDPRIVCFGR_PPRIV1_Pos  (1U)
#define RISAB_CIDPRIVCFGR_PPRIV1_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV1_Pos)    /*!< 0x00000002 */
#define RISAB_CIDPRIVCFGR_PPRIV1      RISAB_CIDPRIVCFGR_PPRIV1_Msk
#define RISAB_CIDPRIVCFGR_PPRIV2_Pos  (2U)
#define RISAB_CIDPRIVCFGR_PPRIV2_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV2_Pos)    /*!< 0x00000004 */
#define RISAB_CIDPRIVCFGR_PPRIV2      RISAB_CIDPRIVCFGR_PPRIV2_Msk
#define RISAB_CIDPRIVCFGR_PPRIV3_Pos  (3U)
#define RISAB_CIDPRIVCFGR_PPRIV3_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV3_Pos)    /*!< 0x00000008 */
#define RISAB_CIDPRIVCFGR_PPRIV3      RISAB_CIDPRIVCFGR_PPRIV3_Msk
#define RISAB_CIDPRIVCFGR_PPRIV4_Pos  (4U)
#define RISAB_CIDPRIVCFGR_PPRIV4_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV4_Pos)    /*!< 0x00000010 */
#define RISAB_CIDPRIVCFGR_PPRIV4      RISAB_CIDPRIVCFGR_PPRIV4_Msk
#define RISAB_CIDPRIVCFGR_PPRIV5_Pos  (5U)
#define RISAB_CIDPRIVCFGR_PPRIV5_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV5_Pos)    /*!< 0x00000020 */
#define RISAB_CIDPRIVCFGR_PPRIV5      RISAB_CIDPRIVCFGR_PPRIV5_Msk
#define RISAB_CIDPRIVCFGR_PPRIV6_Pos  (6U)
#define RISAB_CIDPRIVCFGR_PPRIV6_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV6_Pos)    /*!< 0x00000040 */
#define RISAB_CIDPRIVCFGR_PPRIV6      RISAB_CIDPRIVCFGR_PPRIV6_Msk
#define RISAB_CIDPRIVCFGR_PPRIV7_Pos  (7U)
#define RISAB_CIDPRIVCFGR_PPRIV7_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV7_Pos)    /*!< 0x00000080 */
#define RISAB_CIDPRIVCFGR_PPRIV7      RISAB_CIDPRIVCFGR_PPRIV7_Msk
#define RISAB_CIDPRIVCFGR_PPRIV8_Pos  (8U)
#define RISAB_CIDPRIVCFGR_PPRIV8_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV8_Pos)    /*!< 0x00000100 */
#define RISAB_CIDPRIVCFGR_PPRIV8      RISAB_CIDPRIVCFGR_PPRIV8_Msk
#define RISAB_CIDPRIVCFGR_PPRIV9_Pos  (9U)
#define RISAB_CIDPRIVCFGR_PPRIV9_Msk  (0x1U << RISAB_CIDPRIVCFGR_PPRIV9_Pos)    /*!< 0x00000200 */
#define RISAB_CIDPRIVCFGR_PPRIV9      RISAB_CIDPRIVCFGR_PPRIV9_Msk
#define RISAB_CIDPRIVCFGR_PPRIV10_Pos (10U)
#define RISAB_CIDPRIVCFGR_PPRIV10_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV10_Pos)   /*!< 0x00000400 */
#define RISAB_CIDPRIVCFGR_PPRIV10     RISAB_CIDPRIVCFGR_PPRIV10_Msk
#define RISAB_CIDPRIVCFGR_PPRIV11_Pos (11U)
#define RISAB_CIDPRIVCFGR_PPRIV11_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV11_Pos)   /*!< 0x00000800 */
#define RISAB_CIDPRIVCFGR_PPRIV11     RISAB_CIDPRIVCFGR_PPRIV11_Msk
#define RISAB_CIDPRIVCFGR_PPRIV12_Pos (12U)
#define RISAB_CIDPRIVCFGR_PPRIV12_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV12_Pos)   /*!< 0x00001000 */
#define RISAB_CIDPRIVCFGR_PPRIV12     RISAB_CIDPRIVCFGR_PPRIV12_Msk
#define RISAB_CIDPRIVCFGR_PPRIV13_Pos (13U)
#define RISAB_CIDPRIVCFGR_PPRIV13_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV13_Pos)   /*!< 0x00002000 */
#define RISAB_CIDPRIVCFGR_PPRIV13     RISAB_CIDPRIVCFGR_PPRIV13_Msk
#define RISAB_CIDPRIVCFGR_PPRIV14_Pos (14U)
#define RISAB_CIDPRIVCFGR_PPRIV14_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV14_Pos)   /*!< 0x00004000 */
#define RISAB_CIDPRIVCFGR_PPRIV14     RISAB_CIDPRIVCFGR_PPRIV14_Msk
#define RISAB_CIDPRIVCFGR_PPRIV15_Pos (15U)
#define RISAB_CIDPRIVCFGR_PPRIV15_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV15_Pos)   /*!< 0x00008000 */
#define RISAB_CIDPRIVCFGR_PPRIV15     RISAB_CIDPRIVCFGR_PPRIV15_Msk
#define RISAB_CIDPRIVCFGR_PPRIV16_Pos (16U)
#define RISAB_CIDPRIVCFGR_PPRIV16_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV16_Pos)   /*!< 0x00010000 */
#define RISAB_CIDPRIVCFGR_PPRIV16     RISAB_CIDPRIVCFGR_PPRIV16_Msk
#define RISAB_CIDPRIVCFGR_PPRIV17_Pos (17U)
#define RISAB_CIDPRIVCFGR_PPRIV17_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV17_Pos)   /*!< 0x00020000 */
#define RISAB_CIDPRIVCFGR_PPRIV17     RISAB_CIDPRIVCFGR_PPRIV17_Msk
#define RISAB_CIDPRIVCFGR_PPRIV18_Pos (18U)
#define RISAB_CIDPRIVCFGR_PPRIV18_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV18_Pos)   /*!< 0x00040000 */
#define RISAB_CIDPRIVCFGR_PPRIV18     RISAB_CIDPRIVCFGR_PPRIV18_Msk
#define RISAB_CIDPRIVCFGR_PPRIV19_Pos (19U)
#define RISAB_CIDPRIVCFGR_PPRIV19_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV19_Pos)   /*!< 0x00080000 */
#define RISAB_CIDPRIVCFGR_PPRIV19     RISAB_CIDPRIVCFGR_PPRIV19_Msk
#define RISAB_CIDPRIVCFGR_PPRIV20_Pos (20U)
#define RISAB_CIDPRIVCFGR_PPRIV20_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV20_Pos)   /*!< 0x00100000 */
#define RISAB_CIDPRIVCFGR_PPRIV20     RISAB_CIDPRIVCFGR_PPRIV20_Msk
#define RISAB_CIDPRIVCFGR_PPRIV21_Pos (21U)
#define RISAB_CIDPRIVCFGR_PPRIV21_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV21_Pos)   /*!< 0x00200000 */
#define RISAB_CIDPRIVCFGR_PPRIV21     RISAB_CIDPRIVCFGR_PPRIV21_Msk
#define RISAB_CIDPRIVCFGR_PPRIV22_Pos (22U)
#define RISAB_CIDPRIVCFGR_PPRIV22_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV22_Pos)   /*!< 0x00400000 */
#define RISAB_CIDPRIVCFGR_PPRIV22     RISAB_CIDPRIVCFGR_PPRIV22_Msk
#define RISAB_CIDPRIVCFGR_PPRIV23_Pos (23U)
#define RISAB_CIDPRIVCFGR_PPRIV23_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV23_Pos)   /*!< 0x00800000 */
#define RISAB_CIDPRIVCFGR_PPRIV23     RISAB_CIDPRIVCFGR_PPRIV23_Msk
#define RISAB_CIDPRIVCFGR_PPRIV24_Pos (24U)
#define RISAB_CIDPRIVCFGR_PPRIV24_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV24_Pos)   /*!< 0x01000000 */
#define RISAB_CIDPRIVCFGR_PPRIV24     RISAB_CIDPRIVCFGR_PPRIV24_Msk
#define RISAB_CIDPRIVCFGR_PPRIV25_Pos (25U)
#define RISAB_CIDPRIVCFGR_PPRIV25_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV25_Pos)   /*!< 0x02000000 */
#define RISAB_CIDPRIVCFGR_PPRIV25     RISAB_CIDPRIVCFGR_PPRIV25_Msk
#define RISAB_CIDPRIVCFGR_PPRIV26_Pos (26U)
#define RISAB_CIDPRIVCFGR_PPRIV26_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV26_Pos)   /*!< 0x04000000 */
#define RISAB_CIDPRIVCFGR_PPRIV26     RISAB_CIDPRIVCFGR_PPRIV26_Msk
#define RISAB_CIDPRIVCFGR_PPRIV27_Pos (27U)
#define RISAB_CIDPRIVCFGR_PPRIV27_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV27_Pos)   /*!< 0x08000000 */
#define RISAB_CIDPRIVCFGR_PPRIV27     RISAB_CIDPRIVCFGR_PPRIV27_Msk
#define RISAB_CIDPRIVCFGR_PPRIV28_Pos (28U)
#define RISAB_CIDPRIVCFGR_PPRIV28_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV28_Pos)   /*!< 0x10000000 */
#define RISAB_CIDPRIVCFGR_PPRIV28     RISAB_CIDPRIVCFGR_PPRIV28_Msk
#define RISAB_CIDPRIVCFGR_PPRIV29_Pos (29U)
#define RISAB_CIDPRIVCFGR_PPRIV29_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV29_Pos)   /*!< 0x20000000 */
#define RISAB_CIDPRIVCFGR_PPRIV29     RISAB_CIDPRIVCFGR_PPRIV29_Msk
#define RISAB_CIDPRIVCFGR_PPRIV30_Pos (30U)
#define RISAB_CIDPRIVCFGR_PPRIV30_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV30_Pos)   /*!< 0x40000000 */
#define RISAB_CIDPRIVCFGR_PPRIV30     RISAB_CIDPRIVCFGR_PPRIV30_Msk
#define RISAB_CIDPRIVCFGR_PPRIV31_Pos (31U)
#define RISAB_CIDPRIVCFGR_PPRIV31_Msk (0x1U << RISAB_CIDPRIVCFGR_PPRIV31_Pos)   /*!< 0x80000000 */
#define RISAB_CIDPRIVCFGR_PPRIV31     RISAB_CIDPRIVCFGR_PPRIV31_Msk

/*******************  Bits definition for RISAB_CIDxRDCFGR register ***********/
#define RISAB_CIDRDCFGR_PRDEN0_Pos    (0U)
#define RISAB_CIDRDCFGR_PRDEN0_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN0_Pos)      /*!< 0x00000001 */
#define RISAB_CIDRDCFGR_PRDEN0        RISAB_CIDRDCFGR_PRDEN0_Msk
#define RISAB_CIDRDCFGR_PRDEN1_Pos    (1U)
#define RISAB_CIDRDCFGR_PRDEN1_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN1_Pos)      /*!< 0x00000002 */
#define RISAB_CIDRDCFGR_PRDEN1         RISAB_CIDRDCFGR_PRDEN1_Msk
#define RISAB_CIDRDCFGR_PRDEN2_Pos    (2U)
#define RISAB_CIDRDCFGR_PRDEN2_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN2_Pos)      /*!< 0x00000004 */
#define RISAB_CIDRDCFGR_PRDEN2        RISAB_CIDRDCFGR_PRDEN2_Msk
#define RISAB_CIDRDCFGR_PRDEN3_Pos    (3U)
#define RISAB_CIDRDCFGR_PRDEN3_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN3_Pos)      /*!< 0x00000008 */
#define RISAB_CIDRDCFGR_PRDEN3        RISAB_CIDRDCFGR_PRDEN3_Msk
#define RISAB_CIDRDCFGR_PRDEN4_Pos    (4U)
#define RISAB_CIDRDCFGR_PRDEN4_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN4_Pos)      /*!< 0x00000010 */
#define RISAB_CIDRDCFGR_PRDEN4        RISAB_CIDRDCFGR_PRDEN4_Msk
#define RISAB_CIDRDCFGR_PRDEN5_Pos    (5U)
#define RISAB_CIDRDCFGR_PRDEN5_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN5_Pos)      /*!< 0x00000020 */
#define RISAB_CIDRDCFGR_PRDEN5        RISAB_CIDRDCFGR_PRDEN5_Msk
#define RISAB_CIDRDCFGR_PRDEN6_Pos    (6U)
#define RISAB_CIDRDCFGR_PRDEN6_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN6_Pos)      /*!< 0x00000040 */
#define RISAB_CIDRDCFGR_PRDEN6        RISAB_CIDRDCFGR_PRDEN6_Msk
#define RISAB_CIDRDCFGR_PRDEN7_Pos    (7U)
#define RISAB_CIDRDCFGR_PRDEN7_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN7_Pos)      /*!< 0x00000080 */
#define RISAB_CIDRDCFGR_PRDEN7        RISAB_CIDRDCFGR_PRDEN7_Msk
#define RISAB_CIDRDCFGR_PRDEN8_Pos    (8U)
#define RISAB_CIDRDCFGR_PRDEN8_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN8_Pos)      /*!< 0x00000100 */
#define RISAB_CIDRDCFGR_PRDEN8        RISAB_CIDRDCFGR_PRDEN8_Msk
#define RISAB_CIDRDCFGR_PRDEN9_Pos    (9U)
#define RISAB_CIDRDCFGR_PRDEN9_Msk    (0x1U << RISAB_CIDRDCFGR_PRDEN9_Pos)      /*!< 0x00000200 */
#define RISAB_CIDRDCFGR_PRDEN9        RISAB_CIDRDCFGR_PRDEN9_Msk
#define RISAB_CIDRDCFGR_PRDEN10_Pos   (10U)
#define RISAB_CIDRDCFGR_PRDEN10_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN10_Pos)     /*!< 0x00000400 */
#define RISAB_CIDRDCFGR_PRDEN10       RISAB_CIDRDCFGR_PRDEN10_Msk
#define RISAB_CIDRDCFGR_PRDEN11_Pos   (11U)
#define RISAB_CIDRDCFGR_PRDEN11_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN11_Pos)     /*!< 0x00000800 */
#define RISAB_CIDRDCFGR_PRDEN11       RISAB_CIDRDCFGR_PRDEN11_Msk
#define RISAB_CIDRDCFGR_PRDEN12_Pos   (12U)
#define RISAB_CIDRDCFGR_PRDEN12_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN12_Pos)     /*!< 0x00001000 */
#define RISAB_CIDRDCFGR_PRDEN12       RISAB_CIDRDCFGR_PRDEN12_Msk
#define RISAB_CIDRDCFGR_PRDEN13_Pos   (13U)
#define RISAB_CIDRDCFGR_PRDEN13_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN13_Pos)     /*!< 0x00002000 */
#define RISAB_CIDRDCFGR_PRDEN13       RISAB_CIDRDCFGR_PRDEN13_Msk
#define RISAB_CIDRDCFGR_PRDEN14_Pos   (14U)
#define RISAB_CIDRDCFGR_PRDEN14_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN14_Pos)     /*!< 0x00004000 */
#define RISAB_CIDRDCFGR_PRDEN14       RISAB_CIDRDCFGR_PRDEN14_Msk
#define RISAB_CIDRDCFGR_PRDEN15_Pos   (15U)
#define RISAB_CIDRDCFGR_PRDEN15_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN15_Pos)     /*!< 0x00008000 */
#define RISAB_CIDRDCFGR_PRDEN15       RISAB_CIDRDCFGR_PRDEN15_Msk
#define RISAB_CIDRDCFGR_PRDEN16_Pos   (16U)
#define RISAB_CIDRDCFGR_PRDEN16_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN16_Pos)     /*!< 0x00010000 */
#define RISAB_CIDRDCFGR_PRDEN16       RISAB_CIDRDCFGR_PRDEN16_Msk
#define RISAB_CIDRDCFGR_PRDEN17_Pos   (17U)
#define RISAB_CIDRDCFGR_PRDEN17_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN17_Pos)     /*!< 0x00020000 */
#define RISAB_CIDRDCFGR_PRDEN17       RISAB_CIDRDCFGR_PRDEN17_Msk
#define RISAB_CIDRDCFGR_PRDEN18_Pos   (18U)
#define RISAB_CIDRDCFGR_PRDEN18_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN18_Pos)     /*!< 0x00040000 */
#define RISAB_CIDRDCFGR_PRDEN18       RISAB_CIDRDCFGR_PRDEN18_Msk
#define RISAB_CIDRDCFGR_PRDEN19_Pos   (19U)
#define RISAB_CIDRDCFGR_PRDEN19_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN19_Pos)     /*!< 0x00080000 */
#define RISAB_CIDRDCFGR_PRDEN19       RISAB_CIDRDCFGR_PRDEN19_Msk
#define RISAB_CIDRDCFGR_PRDEN20_Pos   (20U)
#define RISAB_CIDRDCFGR_PRDEN20_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN20_Pos)     /*!< 0x00100000 */
#define RISAB_CIDRDCFGR_PRDEN20       RISAB_CIDRDCFGR_PRDEN20_Msk
#define RISAB_CIDRDCFGR_PRDEN21_Pos   (21U)
#define RISAB_CIDRDCFGR_PRDEN21_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN21_Pos)     /*!< 0x00200000 */
#define RISAB_CIDRDCFGR_PRDEN21       RISAB_CIDRDCFGR_PRDEN21_Msk
#define RISAB_CIDRDCFGR_PRDEN22_Pos   (22U)
#define RISAB_CIDRDCFGR_PRDEN22_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN22_Pos)     /*!< 0x00400000 */
#define RISAB_CIDRDCFGR_PRDEN22       RISAB_CIDRDCFGR_PRDEN22_Msk
#define RISAB_CIDRDCFGR_PRDEN23_Pos   (23U)
#define RISAB_CIDRDCFGR_PRDEN23_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN23_Pos)     /*!< 0x00800000 */
#define RISAB_CIDRDCFGR_PRDEN23       RISAB_CIDRDCFGR_PRDEN23_Msk
#define RISAB_CIDRDCFGR_PRDEN24_Pos   (24U)
#define RISAB_CIDRDCFGR_PRDEN24_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN24_Pos)     /*!< 0x01000000 */
#define RISAB_CIDRDCFGR_PRDEN24       RISAB_CIDRDCFGR_PRDEN24_Msk
#define RISAB_CIDRDCFGR_PRDEN25_Pos   (25U)
#define RISAB_CIDRDCFGR_PRDEN25_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN25_Pos)     /*!< 0x02000000 */
#define RISAB_CIDRDCFGR_PRDEN25       RISAB_CIDRDCFGR_PRDEN25_Msk
#define RISAB_CIDRDCFGR_PRDEN26_Pos   (26U)
#define RISAB_CIDRDCFGR_PRDEN26_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN26_Pos)     /*!< 0x04000000 */
#define RISAB_CIDRDCFGR_PRDEN26       RISAB_CIDRDCFGR_PRDEN26_Msk
#define RISAB_CIDRDCFGR_PRDEN27_Pos   (27U)
#define RISAB_CIDRDCFGR_PRDEN27_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN27_Pos)     /*!< 0x08000000 */
#define RISAB_CIDRDCFGR_PRDEN27       RISAB_CIDRDCFGR_PRDEN27_Msk
#define RISAB_CIDRDCFGR_PRDEN28_Pos   (28U)
#define RISAB_CIDRDCFGR_PRDEN28_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN28_Pos)     /*!< 0x10000000 */
#define RISAB_CIDRDCFGR_PRDEN28       RISAB_CIDRDCFGR_PRDEN28_Msk
#define RISAB_CIDRDCFGR_PRDEN29_Pos   (29U)
#define RISAB_CIDRDCFGR_PRDEN29_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN29_Pos)     /*!< 0x20000000 */
#define RISAB_CIDRDCFGR_PRDEN29       RISAB_CIDRDCFGR_PRDEN29_Msk
#define RISAB_CIDRDCFGR_PRDEN30_Pos   (30U)
#define RISAB_CIDRDCFGR_PRDEN30_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN30_Pos)     /*!< 0x40000000 */
#define RISAB_CIDRDCFGR_PRDEN30       RISAB_CIDRDCFGR_PRDEN30_Msk
#define RISAB_CIDRDCFGR_PRDEN31_Pos   (31U)
#define RISAB_CIDRDCFGR_PRDEN31_Msk   (0x1U << RISAB_CIDRDCFGR_PRDEN31_Pos)     /*!< 0x80000000 */
#define RISAB_CIDRDCFGR_PRDEN31       RISAB_CIDRDCFGR_PRDEN31_Msk

/*******************  Bits definition for RISAB_CIDxWRCFGR register ***********/
#define RISAB_CIDWRCFGR_PWREN0_Pos    (0U)
#define RISAB_CIDWRCFGR_PWREN0_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN0_Pos)      /*!< 0x00000001 */
#define RISAB_CIDWRCFGR_PWREN0        RISAB_CIDWRCFGR_PWREN0_Msk
#define RISAB_CIDWRCFGR_PWREN1_Pos    (1U)
#define RISAB_CIDWRCFGR_PWREN1_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN1_Pos)      /*!< 0x00000002 */
#define RISAB_CIDWRCFGR_PWREN1        RISAB_CIDWRCFGR_PWREN1_Msk
#define RISAB_CIDWRCFGR_PWREN2_Pos    (2U)
#define RISAB_CIDWRCFGR_PWREN2_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN2_Pos)      /*!< 0x00000004 */
#define RISAB_CIDWRCFGR_PWREN2        RISAB_CIDWRCFGR_PWREN2_Msk
#define RISAB_CIDWRCFGR_PWREN3_Pos    (3U)
#define RISAB_CIDWRCFGR_PWREN3_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN3_Pos)      /*!< 0x00000008 */
#define RISAB_CIDWRCFGR_PWREN3        RISAB_CIDWRCFGR_PWREN3_Msk
#define RISAB_CIDWRCFGR_PWREN4_Pos    (4U)
#define RISAB_CIDWRCFGR_PWREN4_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN4_Pos)      /*!< 0x00000010 */
#define RISAB_CIDWRCFGR_PWREN4        RISAB_CIDWRCFGR_PWREN4_Msk
#define RISAB_CIDWRCFGR_PWREN5_Pos    (5U)
#define RISAB_CIDWRCFGR_PWREN5_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN5_Pos)      /*!< 0x00000020 */
#define RISAB_CIDWRCFGR_PWREN5        RISAB_CIDWRCFGR_PWREN5_Msk
#define RISAB_CIDWRCFGR_PWREN6_Pos    (6U)
#define RISAB_CIDWRCFGR_PWREN6_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN6_Pos)      /*!< 0x00000040 */
#define RISAB_CIDWRCFGR_PWREN6        RISAB_CIDWRCFGR_PWREN6_Msk
#define RISAB_CIDWRCFGR_PWREN7_Pos    (7U)
#define RISAB_CIDWRCFGR_PWREN7_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN7_Pos)      /*!< 0x00000080 */
#define RISAB_CIDWRCFGR_PWREN7        RISAB_CIDWRCFGR_PWREN7_Msk
#define RISAB_CIDWRCFGR_PWREN8_Pos    (8U)
#define RISAB_CIDWRCFGR_PWREN8_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN8_Pos)      /*!< 0x00000100 */
#define RISAB_CIDWRCFGR_PWREN8        RISAB_CIDWRCFGR_PWREN8_Msk
#define RISAB_CIDWRCFGR_PWREN9_Pos    (9U)
#define RISAB_CIDWRCFGR_PWREN9_Msk    (0x1U << RISAB_CIDWRCFGR_PWREN9_Pos)      /*!< 0x00000200 */
#define RISAB_CIDWRCFGR_PWREN9        RISAB_CIDWRCFGR_PWREN9_Msk
#define RISAB_CIDWRCFGR_PWREN10_Pos   (10U)
#define RISAB_CIDWRCFGR_PWREN10_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN10_Pos)     /*!< 0x00000400 */
#define RISAB_CIDWRCFGR_PWREN10       RISAB_CIDWRCFGR_PWREN10_Msk
#define RISAB_CIDWRCFGR_PWREN11_Pos   (11U)
#define RISAB_CIDWRCFGR_PWREN11_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN11_Pos)     /*!< 0x00000800 */
#define RISAB_CIDWRCFGR_PWREN11       RISAB_CIDWRCFGR_PWREN11_Msk
#define RISAB_CIDWRCFGR_PWREN12_Pos   (12U)
#define RISAB_CIDWRCFGR_PWREN12_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN12_Pos)     /*!< 0x00001000 */
#define RISAB_CIDWRCFGR_PWREN12       RISAB_CIDWRCFGR_PWREN12_Msk
#define RISAB_CIDWRCFGR_PWREN13_Pos   (13U)
#define RISAB_CIDWRCFGR_PWREN13_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN13_Pos)     /*!< 0x00002000 */
#define RISAB_CIDWRCFGR_PWREN13       RISAB_CIDWRCFGR_PWREN13_Msk
#define RISAB_CIDWRCFGR_PWREN14_Pos   (14U)
#define RISAB_CIDWRCFGR_PWREN14_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN14_Pos)     /*!< 0x00004000 */
#define RISAB_CIDWRCFGR_PWREN14       RISAB_CIDWRCFGR_PWREN14_Msk
#define RISAB_CIDWRCFGR_PWREN15_Pos   (15U)
#define RISAB_CIDWRCFGR_PWREN15_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN15_Pos)     /*!< 0x00008000 */
#define RISAB_CIDWRCFGR_PWREN15       RISAB_CIDWRCFGR_PWREN15_Msk
#define RISAB_CIDWRCFGR_PWREN16_Pos   (16U)
#define RISAB_CIDWRCFGR_PWREN16_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN16_Pos)     /*!< 0x00010000 */
#define RISAB_CIDWRCFGR_PWREN16       RISAB_CIDWRCFGR_PWREN16_Msk
#define RISAB_CIDWRCFGR_PWREN17_Pos   (17U)
#define RISAB_CIDWRCFGR_PWREN17_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN17_Pos)     /*!< 0x00020000 */
#define RISAB_CIDWRCFGR_PWREN17       RISAB_CIDWRCFGR_PWREN17_Msk
#define RISAB_CIDWRCFGR_PWREN18_Pos   (18U)
#define RISAB_CIDWRCFGR_PWREN18_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN18_Pos)     /*!< 0x00040000 */
#define RISAB_CIDWRCFGR_PWREN18       RISAB_CIDWRCFGR_PWREN18_Msk
#define RISAB_CIDWRCFGR_PWREN19_Pos   (19U)
#define RISAB_CIDWRCFGR_PWREN19_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN19_Pos)     /*!< 0x00080000 */
#define RISAB_CIDWRCFGR_PWREN19       RISAB_CIDWRCFGR_PWREN19_Msk
#define RISAB_CIDWRCFGR_PWREN20_Pos   (20U)
#define RISAB_CIDWRCFGR_PWREN20_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN20_Pos)     /*!< 0x00100000 */
#define RISAB_CIDWRCFGR_PWREN20       RISAB_CIDWRCFGR_PWREN20_Msk
#define RISAB_CIDWRCFGR_PWREN21_Pos   (21U)
#define RISAB_CIDWRCFGR_PWREN21_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN21_Pos)     /*!< 0x00200000 */
#define RISAB_CIDWRCFGR_PWREN21       RISAB_CIDWRCFGR_PWREN21_Msk
#define RISAB_CIDWRCFGR_PWREN22_Pos   (22U)
#define RISAB_CIDWRCFGR_PWREN22_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN22_Pos)     /*!< 0x00400000 */
#define RISAB_CIDWRCFGR_PWREN22       RISAB_CIDWRCFGR_PWREN22_Msk
#define RISAB_CIDWRCFGR_PWREN23_Pos   (23U)
#define RISAB_CIDWRCFGR_PWREN23_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN23_Pos)     /*!< 0x00800000 */
#define RISAB_CIDWRCFGR_PWREN23       RISAB_CIDWRCFGR_PWREN23_Msk
#define RISAB_CIDWRCFGR_PWREN24_Pos   (24U)
#define RISAB_CIDWRCFGR_PWREN24_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN24_Pos)     /*!< 0x01000000 */
#define RISAB_CIDWRCFGR_PWREN24       RISAB_CIDWRCFGR_PWREN24_Msk
#define RISAB_CIDWRCFGR_PWREN25_Pos   (25U)
#define RISAB_CIDWRCFGR_PWREN25_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN25_Pos)     /*!< 0x02000000 */
#define RISAB_CIDWRCFGR_PWREN25       RISAB_CIDWRCFGR_PWREN25_Msk
#define RISAB_CIDWRCFGR_PWREN26_Pos   (26U)
#define RISAB_CIDWRCFGR_PWREN26_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN26_Pos)     /*!< 0x04000000 */
#define RISAB_CIDWRCFGR_PWREN26       RISAB_CIDWRCFGR_PWREN26_Msk
#define RISAB_CIDWRCFGR_PWREN27_Pos   (27U)
#define RISAB_CIDWRCFGR_PWREN27_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN27_Pos)     /*!< 0x08000000 */
#define RISAB_CIDWRCFGR_PWREN27       RISAB_CIDWRCFGR_PWREN27_Msk
#define RISAB_CIDWRCFGR_PWREN28_Pos   (28U)
#define RISAB_CIDWRCFGR_PWREN28_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN28_Pos)     /*!< 0x10000000 */
#define RISAB_CIDWRCFGR_PWREN28       RISAB_CIDWRCFGR_PWREN28_Msk
#define RISAB_CIDWRCFGR_PWREN29_Pos   (29U)
#define RISAB_CIDWRCFGR_PWREN29_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN29_Pos)     /*!< 0x20000000 */
#define RISAB_CIDWRCFGR_PWREN29       RISAB_CIDWRCFGR_PWREN29_Msk
#define RISAB_CIDWRCFGR_PWREN30_Pos   (30U)
#define RISAB_CIDWRCFGR_PWREN30_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN30_Pos)     /*!< 0x40000000 */
#define RISAB_CIDWRCFGR_PWREN30       RISAB_CIDWRCFGR_PWREN30_Msk
#define RISAB_CIDWRCFGR_PWREN31_Pos   (31U)
#define RISAB_CIDWRCFGR_PWREN31_Msk   (0x1U << RISAB_CIDWRCFGR_PWREN31_Pos)     /*!< 0x80000000 */
#define RISAB_CIDWRCFGR_PWREN31       RISAB_CIDWRCFGR_PWREN31_Msk

/*******************  Bits definition for RISAB_PGx_CIDCFGR register **********/
#define RISAB_PGCIDCFGR_CFEN_Pos      (0U)
#define RISAB_PGCIDCFGR_CFEN_Msk      (0x1U << RISAB_PGCIDCFGR_CFEN_Pos)        /*!< 0x00000001 */
#define RISAB_PGCIDCFGR_CFEN          RISAB_PGCIDCFGR_CFEN_Msk

#if defined(STM32MP2XX_ASSY2_2_1)
#define RISAB_PGCIDCFGR_SEMEN_Pos     (1U)
#define RISAB_PGCIDCFGR_SEMEN_Msk     (0x1U << RISAB_PGCIDCFGR_SEMEN_Pos)       /*!< 0x00000002 */
#define RISAB_PGCIDCFGR_SEMEN         RISAB_PGCIDCFGR_SEMEN_Msk
#endif

#define RISAB_PGCIDCFGR_GRANT_Pos     (16U)
#define RISAB_PGCIDCFGR_GRANT_Msk     (0xFFU << RISAB_PGCIDCFGR_GRANT_Pos)      /*!< 0x00FF0000 */
#define RISAB_PGCIDCFGR_GRANT         RISAB_PGCIDCFGR_GRANT_Msk
#define RISAB_PGCIDCFGR_GRANTC0       (0x1U << RISAB_PGCIDCFGR_GRANT_Pos)       /*!< 0x00010000 */
#define RISAB_PGCIDCFGR_GRANTC1       (0x2U << RISAB_PGCIDCFGR_GRANT_Pos)       /*!< 0x00020000 */
#define RISAB_PGCIDCFGR_GRANTC2       (0x4U << RISAB_PGCIDCFGR_GRANT_Pos)       /*!< 0x00040000 */
#define RISAB_PGCIDCFGR_GRANTC3       (0x8U << RISAB_PGCIDCFGR_GRANT_Pos)       /*!< 0x00080000 */
#define RISAB_PGCIDCFGR_GRANTC4       (0x10U << RISAB_PGCIDCFGR_GRANT_Pos)      /*!< 0x00100000 */
#define RISAB_PGCIDCFGR_GRANTC5       (0x20U << RISAB_PGCIDCFGR_GRANT_Pos)      /*!< 0x00200000 */
#define RISAB_PGCIDCFGR_GRANTC6       (0x40U << RISAB_PGCIDCFGR_GRANT_Pos)      /*!< 0x00400000 */
#define RISAB_PGCIDCFGR_GRANTC7       (0x80U << RISAB_PGCIDCFGR_GRANT_Pos)      /*!< 0x00800000 */

#if defined(STM32MP2XX_ASSY2_2_1)
/*******************  Bits definition for RISAB_PGx_SEMCR register ************/
#define RISAB_PGSEMCR_SEMMUTEX_Pos    (0U)
#define RISAB_PGSEMCR_SEMMUTEX_Msk    (0x1U << RISAB_PGSEMCR_SEMMUTEX_Pos)      /*!< 0x00000001 */
#define RISAB_PGSEMCR_SEMMUTEX        RISAB_PGSEMCR_SEMMUTEX_Msk

#define RISAB_PGSEMCR_SEMCID_Pos      (4U)
#define RISAB_PGSEMCR_SEMCID_Msk      (0x7U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000070 */
#define RISAB_PGSEMCR_SEMCID          RISAB_PGSEMCR_SEMCID_Msk
#define RISAB_PGSEMCR_SEMCID0         (0x0U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000000 */
#define RISAB_PGSEMCR_SEMCID1         (0x1U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000010 */
#define RISAB_PGSEMCR_SEMCID2         (0x2U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000020 */
#define RISAB_PGSEMCR_SEMCID3         (0x3U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000030 */
#define RISAB_PGSEMCR_SEMCID4         (0x4U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000040 */
#define RISAB_PGSEMCR_SEMCID5         (0x5U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000050 */
#define RISAB_PGSEMCR_SEMCID6         (0x6U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000060 */
#define RISAB_PGSEMCR_SEMCID7         (0x7U << RISAB_PGSEMCR_SEMCID_Pos)        /*!< 0x00000070 */
#endif
/*******************  Bits definition for RISAB_VERR register *****************/
#define RISAB_VERR_MINREV_Pos         (0U)
#define RISAB_VERR_MINREV_Msk         (0xFU << RISAB_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define RISAB_VERR_MINREV             RISAB_VERR_MINREV_Msk

#define RISAB_VERR_MAJREV_Pos         (4U)
#define RISAB_VERR_MAJREV_Msk         (0xFU << RISAB_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define RISAB_VERR_MAJREV             RISAB_VERR_MAJREV_Msk

/*******************  Bits definition for RISAB_IPIDR register ****************/
#define RISAB_IPIDR_ID_Pos            (0U)
#define RISAB_IPIDR_ID_Msk            (0xFFFFFFFFU << RISAB_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define RISAB_IPIDR_ID                RISAB_IPIDR_ID_Msk

/*******************  Bits definition for RISAB_SIDR register *****************/
#define RISAB_SIDR_SID_Pos            (0U)
#define RISAB_SIDR_SID_Msk            (0xFFFFFFFFU << RISAB_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define RISAB_SIDR_SID                RISAB_SIDR_SID_Msk

/*******************  Bits definition for RISAF_CR register *******************/
#define RISAF_CR_GLOCK_Pos            (0U)
#define RISAF_CR_GLOCK_Msk            (0x1U << RISAF_CR_GLOCK_Pos)              /*!< 0x00000001 */
#define RISAF_CR_GLOCK                RISAF_CR_GLOCK_Msk

/*******************  Bits definition for RISAF_SR register *******************/
#define RISAF_SR_KEYVALID_Pos         (0U)
#define RISAF_SR_KEYVALID_Msk         (0x1U << RISAF_SR_KEYVALID_Pos)           /*!< 0x00000001 */
#define RISAF_SR_KEYVALID             RISAF_SR_KEYVALID_Msk

#define RISAF_SR_KEYRDY_Pos           (1U)
#define RISAF_SR_KEYRDY_Msk           (0x1U << RISAF_SR_KEYRDY_Pos)             /*!< 0x00000002 */
#define RISAF_SR_KEYRDY               RISAF_SR_KEYRDY_Msk

/*******************  Bits definition for RISAF_IASR register *****************/
#define RISAF_IASR_CAEF_Pos           (0U)
#define RISAF_IASR_CAEF_Msk           (0x1U << RISAF_IASR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAF_IASR_CAEF               RISAF_IASR_CAEF_Msk

#define RISAF_IASR_IAEF0_Pos          (1U)
#define RISAF_IASR_IAEF0_Msk          (0x1U << RISAF_IASR_IAEF0_Pos)            /*!< 0x00000002 */
#define RISAF_IASR_IAEF0              RISAF_IASR_IAEF0_Msk

#define RISAF_IASR_IAEF1_Pos          (2U)
#define RISAF_IASR_IAEF1_Msk          (0x1U << RISAF_IASR_IAEF1_Pos)            /*!< 0x00000004 */
#define RISAF_IASR_IAEF1              RISAF_IASR_IAEF1_Msk

/*******************  Bits definition for RISAF_IACR register *****************/
#define RISAF_IACR_CAEF_Pos           (0U)
#define RISAF_IACR_CAEF_Msk           (0x1U << RISAF_IACR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAF_IACR_CAEF               RISAF_IACR_CAEF_Msk

#define RISAF_IACR_IAEF0_Pos          (1U)
#define RISAF_IACR_IAEF0_Msk          (0x1U << RISAF_IACR_IAEF0_Pos)            /*!< 0x00000002 */
#define RISAF_IACR_IAEF0              RISAF_IACR_IAEF0_Msk

#define RISAF_IACR_IAEF1_Pos          (2U)
#define RISAF_IACR_IAEF1_Msk          (0x1U << RISAF_IACR_IAEF1_Pos)            /*!< 0x00000004 */
#define RISAF_IACR_IAEF1              RISAF_IACR_IAEF1_Msk

/*******************  Bits definition for RISAF_IAESR register ****************/
#define RISAF_IAESR_IACID_Pos         (0U)
#define RISAF_IAESR_IACID_Msk         (0x7U << RISAF_IAESR_IACID_Pos)           /*!< 0x00000007 */
#define RISAF_IAESR_IACID             RISAF_IAESR_IACID_Msk

#define RISAF_IAESR_IAPRIV_Pos        (4U)
#define RISAF_IAESR_IAPRIV_Msk        (0x1U << RISAF_IAESR_IAPRIV_Pos)          /*!< 0x00000010 */
#define RISAF_IAESR_IAPRIV            RISAF_IAESR_IAPRIV_Msk

#define RISAF_IAESR_IASEC_Pos         (5U)
#define RISAF_IAESR_IASEC_Msk         (0x1U << RISAF_IAESR_IASEC_Pos)           /*!< 0x00000020 */
#define RISAF_IAESR_IASEC             RISAF_IAESR_IASEC_Msk

#define RISAF_IAESR_IANRW_Pos         (7U)
#define RISAF_IAESR_IANRW_Msk         (0x1U << RISAF_IAESR_IANRW_Pos)           /*!< 0x00000080 */
#define RISAF_IAESR_IANRW             RISAF_IAESR_IANRW_Msk

/*******************  Bits definition for RISAF_IADDR register ****************/
#define RISAF_IADDR_IADD_Pos          (0U)
#define RISAF_IADDR_IADD_Msk          (0xFFFFFFFFU << RISAF_IADDR_IADD_Pos)     /*!< 0xFFFFFFFF */
#define RISAF_IADDR_IADD              RISAF_IADDR_IADD_Msk

/*******************  Bits definition for RISAF_KEYR0 register ****************/
#define RISAF_KEYR0_KEY_Pos           (0U)
#define RISAF_KEYR0_KEY_Msk           (0xFFFFFFFFU << RISAF_KEYR0_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR0_KEY               RISAF_KEYR0_KEY_Msk

/*******************  Bits definition for RISAF_KEYR1 register ****************/
#define RISAF_KEYR1_KEY_Pos           (0U)
#define RISAF_KEYR1_KEY_Msk           (0xFFFFFFFFU << RISAF_KEYR1_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR1_KEY               RISAF_KEYR1_KEY_Msk

/*******************  Bits definition for RISAF_KEYR2 register ****************/
#define RISAF_KEYR2_KEY_Pos           (0U)
#define RISAF_KEYR2_KEY_Msk           (0xFFFFFFFFU << RISAF_KEYR2_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR2_KEY               RISAF_KEYR2_KEY_Msk

/*******************  Bits definition for RISAF_KEYR3 register ****************/
#define RISAF_KEYR3_KEY_Pos           (0U)
#define RISAF_KEYR3_KEY_Msk           (0xFFFFFFFFU << RISAF_KEYR3_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR3_KEY               RISAF_KEYR3_KEY_Msk

/*******************  Bits definition for RISAF_REGx_CFGR register ************/
#define RISAF_REGCFGR_BREN_Pos        (0U)
#define RISAF_REGCFGR_BREN_Msk        (0x1U << RISAF_REGCFGR_BREN_Pos)          /*!< 0x00000001 */
#define RISAF_REGCFGR_BREN            RISAF_REGCFGR_BREN_Msk

#define RISAF_REGCFGR_SEC_Pos         (8U)
#define RISAF_REGCFGR_SEC_Msk         (0x1U << RISAF_REGCFGR_SEC_Pos)           /*!< 0x00000100 */
#define RISAF_REGCFGR_SEC             RISAF_REGCFGR_SEC_Msk

#define RISAF_REGCFGR_ENC_Pos         (15U)
#define RISAF_REGCFGR_ENC_Msk         (0x1U << RISAF_REGCFGR_ENC_Pos)           /*!< 0x00008000 */
#define RISAF_REGCFGR_ENC             RISAF_REGCFGR_ENC_Msk

#define RISAF_REGCFGR_PRIV_Pos        (16U)
#define RISAF_REGCFGR_PRIV_Msk        (0xFFU << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00FF0000 */
#define RISAF_REGCFGR_PRIV            RISAF_REGCFGR_PRIV_Msk
#define RISAF_REGCFGR_PRIVC0          (0x1U << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00010000 */
#define RISAF_REGCFGR_PRIVC1          (0x2U << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00020000 */
#define RISAF_REGCFGR_PRIVC2          (0x4U << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00040000 */
#define RISAF_REGCFGR_PRIVC3          (0x8U << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00080000 */
#define RISAF_REGCFGR_PRIVC4          (0x10U << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00100000 */
#define RISAF_REGCFGR_PRIVC5          (0x20U << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00200000 */
#define RISAF_REGCFGR_PRIVC6          (0x40U << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00400000 */
#define RISAF_REGCFGR_PRIVC7          (0x80U << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00800000 */

/*******************  Bits definition for RISAF_REGx_STARTR register **********/
#define RISAF_REGSTARTR_BADDSTART_Pos (12U)
#define RISAF_REGSTARTR_BADDSTART_Msk (0xFFFFFEU << RISAF_REGSTARTR_BADDSTART_Pos)  /*!< 0xFFFFFE00 */
#define RISAF_REGSTARTR_BADDSTART     RISAF_REGSTARTR_BADDSTART_Msk

/*******************  Bits definition for RISAF_REGx_ENDR register ************/
#define RISAF_REGENDR_BADDEND_Pos     (12U)
#define RISAF_REGENDR_BADDEND_Msk     (0xFFFFFEU << RISAF_REGENDR_BADDEND_Pos)  /*!< 0xFFFFFE00 */
#define RISAF_REGENDR_BADDEND         RISAF_REGENDR_BADDEND_Msk

/*******************  Bits definition for RISAF_REGx_CIDCFGR register *********/
#define RISAF_REGCIDCFGR_RDEN_Pos     (0U)
#define RISAF_REGCIDCFGR_RDEN_Msk     (0xFFU << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000000 */
#define RISAF_REGCIDCFGR_RDEN         RISAF_REGCIDCFGR_RDEN_Msk
#define RISAF_REGCIDCFGR_RDENC0       (0x1U << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000001 */
#define RISAF_REGCIDCFGR_RDENC1       (0x2U << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000002 */
#define RISAF_REGCIDCFGR_RDENC2       (0x4U << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000004 */
#define RISAF_REGCIDCFGR_RDENC3       (0x8U << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000008 */
#define RISAF_REGCIDCFGR_RDENC4       (0x10U << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000010 */
#define RISAF_REGCIDCFGR_RDENC5       (0x20U << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000020 */
#define RISAF_REGCIDCFGR_RDENC6       (0x40U << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000040 */
#define RISAF_REGCIDCFGR_RDENC7       (0x80U << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000080 */

#define RISAF_REGCIDCFGR_WREN_Pos     (16U)
#define RISAF_REGCIDCFGR_WREN_Msk     (0xFFU << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00FF0000 */
#define RISAF_REGCIDCFGR_WREN         RISAF_REGCIDCFGR_WREN_Msk
#define RISAF_REGCIDCFGR_WRENC0       (0x1U << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00010000 */
#define RISAF_REGCIDCFGR_WRENC1       (0x2U << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00020000 */
#define RISAF_REGCIDCFGR_WRENC2       (0x4U << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00040000 */
#define RISAF_REGCIDCFGR_WRENC3       (0x8U << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00080000 */
#define RISAF_REGCIDCFGR_WRENC4       (0x10U << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00100000 */
#define RISAF_REGCIDCFGR_WRENC5       (0x20U << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00200000 */
#define RISAF_REGCIDCFGR_WRENC6       (0x40U << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00400000 */
#define RISAF_REGCIDCFGR_WRENC7       (0x80U << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00800000 */

/*******************  Bits definition for RISAF_REGx_zCFGR register ***********/
#define RISAF_REGZCFGR_SREN_Pos        (0U)
#define RISAF_REGZCFGR_SREN_Msk        (0x1U << RISAF_REGZCFGR_SREN_Pos)        /*!< 0x00000001 */
#define RISAF_REGZCFGR_SREN            RISAF_REGZCFGR_SREN_Msk

#define RISAF_REGZCFGR_RLOCK_Pos       (1U)
#define RISAF_REGZCFGR_RLOCK_Msk       (0x1U << RISAF_REGZCFGR_RLOCK_Pos)       /*!< 0x00000002 */
#define RISAF_REGZCFGR_RLOCK           RISAF_REGZCFGR_RLOCK_Msk

#define RISAF_REGZCFGR_SEC_Pos         (8U)
#define RISAF_REGZCFGR_SEC_Msk         (0x1U << RISAF_REGZCFGR_SEC_Pos)         /*!< 0x00000100 */
#define RISAF_REGZCFGR_SEC             RISAF_REGZCFGR_SEC_Msk

#define RISAF_REGZCFGR_PRIV_Pos        (9U)
#define RISAF_REGZCFGR_PRIV_Msk        (0x1U << RISAF_REGZCFGR_PRIV_Pos)        /*!< 0x00000200 */
#define RISAF_REGZCFGR_PRIV            RISAF_REGZCFGR_PRIV_Msk

#define RISAF_REGZCFGR_RDEN_Pos        (12U)
#define RISAF_REGZCFGR_RDEN_Msk        (0x1U << RISAF_REGZCFGR_RDEN_Pos)        /*!< 0x00001000 */
#define RISAF_REGZCFGR_RDEN            RISAF_REGZCFGR_RDEN_Msk

#define RISAF_REGZCFGR_WREN_Pos        (13U)
#define RISAF_REGZCFGR_WREN_Msk        (0x1U << RISAF_REGZCFGR_WREN_Pos)        /*!< 0x00002000 */
#define RISAF_REGZCFGR_WREN            RISAF_REGZCFGR_WREN_Msk

#define RISAF_REGZCFGR_ENC_Pos         (15U)
#define RISAF_REGZCFGR_ENC_Msk         (0x1U << RISAF_REGZCFGR_ENCRYPT_Pos)     /*!< 0x00008000 */
#define RISAF_REGZCFGR_ENC             RISAF_REGZCFGR_ENCRYPT_Msk

/*******************  Bits definition for RISAF_REGx_zSTARTR register *********/
#define RISAF_REGZSTARTR_SADDSTART_Pos (12U)
#define RISAF_REGZSTARTR_SADDSTART_Msk (0xFFFFFEU << RISAF_REGZSTARTR_SADDSTART_Pos) /*!< 0xFFFFFE00 */
#define RISAF_REGZSTARTR_SADDSTART     RISAF_REGZSTARTR_SADDSTART_Msk

/*******************  Bits definition for RISAF_REGx_zENDR register ***********/
#define RISAF_REGZENDR_SADDEND_Pos    (12U)
#define RISAF_REGZENDR_SADDEND_Msk    (0xFFFFFEU << RISAF_REGZENDR_SADDEND_Pos) /*!< 0xFFFFFE00 */
#define RISAF_REGZENDR_SADDEND        RISAF_REGZENDR_SADDEND_Msk

/*******************  Bits definition for RISAF_REGx_zNESTR register **********/
#define RISAF_REGZNESTR_SRVLD_Pos     (0U)
#define RISAF_REGZNESTR_SRVLD_Msk     (0x1U << RISAF_REGZNESTR_SRVLD_Pos)       /*!< 0x00000001 */
#define RISAF_REGZNESTR_SRVLD         RISAF_REGZNESTR_SRVLD_Msk

#define RISAF_REGZNESTR_SRCID_Pos     (4U)
#define RISAF_REGZNESTR_SRCID_Msk     (0x7U << RISAF_REGZNESTR_SRCID_Pos)       /*!< 0x00000070 */
#define RISAF_REGZNESTR_SRCID         RISAF_REGZNESTR_SRCID_Msk

#if !defined(STM32MP2XX_ASSY2_2_1)
#define RISAF_REGZNESTR_SEC_Pos       (8U)
#define RISAF_REGZNESTR_SEC_Msk       (0x7U << RISAF_REGZNESTR_SEC_Pos)         /*!< 0x00000100 */
#define RISAF_REGZNESTR_SEC           RISAF_REGZNESTR_SEC_Msk
#endif
/*******************  Bits definition for RISAF_VERR register *****************/
#define RISAF_VERR_MINREV_Pos         (0U)
#define RISAF_VERR_MINREV_Msk         (0xFU << RISAF_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define RISAF_VERR_MINREV             RISAF_VERR_MINREV_Msk

#define RISAF_VERR_MAJREV_Pos         (4U)
#define RISAF_VERR_MAJREV_Msk         (0xFU << RISAF_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define RISAF_VERR_MAJREV             RISAF_VERR_MAJREV_Msk

/*******************  Bits definition for RISAF_IPIDR register ****************/
#define RISAF_IPIDR_ID_Pos            (0U)
#define RISAF_IPIDR_ID_Msk            (0xFFFFFFFFU << RISAF_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define RISAF_IPIDR_ID                RISAF_IPIDR_ID_Msk

/*******************  Bits definition for RISAF_SIDR register *****************/
#define RISAF_SIDR_SID_Pos            (0U)
#define RISAF_SIDR_SID_Msk            (0xFFFFFFFFU << RISAF_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define RISAF_SIDR_SID                RISAF_SIDR_SID_Msk

/*******************  Bits definition for IAC_IER0 register *******************/
#define IAC_IER0_IAIE0_Pos            (0U)
#define IAC_IER0_IAIE0_Msk            (0x1U << IAC_IER0_IAIE0_Pos)              /*!< 0x00000001 */
#define IAC_IER0_IAIE0                IAC_IER0_IAIE0_Msk
#define IAC_IER0_IAIE1_Pos            (1U)
#define IAC_IER0_IAIE1_Msk            (0x1U << IAC_IER0_IAIE1_Pos)              /*!< 0x00000002 */
#define IAC_IER0_IAIE1                IAC_IER0_IAIE1_Msk
#define IAC_IER0_IAIE2_Pos            (2U)
#define IAC_IER0_IAIE2_Msk            (0x1U << IAC_IER0_IAIE2_Pos)              /*!< 0x00000004 */
#define IAC_IER0_IAIE2                IAC_IER0_IAIE2_Msk
#define IAC_IER0_IAIE3_Pos            (3U)
#define IAC_IER0_IAIE3_Msk            (0x1U << IAC_IER0_IAIE3_Pos)              /*!< 0x00000008 */
#define IAC_IER0_IAIE3                IAC_IER0_IAIE3_Msk
#define IAC_IER0_IAIE4_Pos            (4U)
#define IAC_IER0_IAIE4_Msk            (0x1U << IAC_IER0_IAIE4_Pos)              /*!< 0x00000010 */
#define IAC_IER0_IAIE4                IAC_IER0_IAIE4_Msk
#define IAC_IER0_IAIE5_Pos            (5U)
#define IAC_IER0_IAIE5_Msk            (0x1U << IAC_IER0_IAIE5_Pos)              /*!< 0x00000020 */
#define IAC_IER0_IAIE5                IAC_IER0_IAIE5_Msk
#define IAC_IER0_IAIE6_Pos            (6U)
#define IAC_IER0_IAIE6_Msk            (0x1U << IAC_IER0_IAIE6_Pos)              /*!< 0x00000040 */
#define IAC_IER0_IAIE6                IAC_IER0_IAIE6_Msk
#define IAC_IER0_IAIE7_Pos            (7U)
#define IAC_IER0_IAIE7_Msk            (0x1U << IAC_IER0_IAIE7_Pos)              /*!< 0x00000080 */
#define IAC_IER0_IAIE7                IAC_IER0_IAIE7_Msk
#define IAC_IER0_IAIE8_Pos            (8U)
#define IAC_IER0_IAIE8_Msk            (0x1U << IAC_IER0_IAIE8_Pos)              /*!< 0x00000100 */
#define IAC_IER0_IAIE8                IAC_IER0_IAIE8_Msk
#define IAC_IER0_IAIE9_Pos            (9U)
#define IAC_IER0_IAIE9_Msk            (0x1U << IAC_IER0_IAIE9_Pos)              /*!< 0x00000200 */
#define IAC_IER0_IAIE9                IAC_IER0_IAIE9_Msk
#define IAC_IER0_IAIE10_Pos           (10U)
#define IAC_IER0_IAIE10_Msk           (0x1U << IAC_IER0_IAIE10_Pos)             /*!< 0x00000400 */
#define IAC_IER0_IAIE10               IAC_IER0_IAIE10_Msk
#define IAC_IER0_IAIE11_Pos           (11U)
#define IAC_IER0_IAIE11_Msk           (0x1U << IAC_IER0_IAIE11_Pos)             /*!< 0x00000800 */
#define IAC_IER0_IAIE11               IAC_IER0_IAIE11_Msk
#define IAC_IER0_IAIE12_Pos           (12U)
#define IAC_IER0_IAIE12_Msk           (0x1U << IAC_IER0_IAIE12_Pos)             /*!< 0x00001000 */
#define IAC_IER0_IAIE12               IAC_IER0_IAIE12_Msk
#define IAC_IER0_IAIE13_Pos           (13U)
#define IAC_IER0_IAIE13_Msk           (0x1U << IAC_IER0_IAIE13_Pos)             /*!< 0x00002000 */
#define IAC_IER0_IAIE13               IAC_IER0_IAIE13_Msk
#define IAC_IER0_IAIE14_Pos           (14U)
#define IAC_IER0_IAIE14_Msk           (0x1U << IAC_IER0_IAIE14_Pos)             /*!< 0x00004000 */
#define IAC_IER0_IAIE14               IAC_IER0_IAIE14_Msk
#define IAC_IER0_IAIE15_Pos           (15U)
#define IAC_IER0_IAIE15_Msk           (0x1U << IAC_IER0_IAIE15_Pos)             /*!< 0x00008000 */
#define IAC_IER0_IAIE15               IAC_IER0_IAIE15_Msk
#define IAC_IER0_IAIE16_Pos           (16U)
#define IAC_IER0_IAIE16_Msk           (0x1U << IAC_IER0_IAIE16_Pos)             /*!< 0x00010000 */
#define IAC_IER0_IAIE16               IAC_IER0_IAIE16_Msk
#define IAC_IER0_IAIE17_Pos           (17U)
#define IAC_IER0_IAIE17_Msk           (0x1U << IAC_IER0_IAIE17_Pos)             /*!< 0x00020000 */
#define IAC_IER0_IAIE17               IAC_IER0_IAIE17_Msk
#define IAC_IER0_IAIE18_Pos           (18U)
#define IAC_IER0_IAIE18_Msk           (0x1U << IAC_IER0_IAIE18_Pos)             /*!< 0x00040000 */
#define IAC_IER0_IAIE18               IAC_IER0_IAIE18_Msk
#define IAC_IER0_IAIE19_Pos           (19U)
#define IAC_IER0_IAIE19_Msk           (0x1U << IAC_IER0_IAIE19_Pos)             /*!< 0x00080000 */
#define IAC_IER0_IAIE19               IAC_IER0_IAIE19_Msk
#define IAC_IER0_IAIE20_Pos           (20U)
#define IAC_IER0_IAIE20_Msk           (0x1U << IAC_IER0_IAIE20_Pos)             /*!< 0x00100000 */
#define IAC_IER0_IAIE20               IAC_IER0_IAIE20_Msk
#define IAC_IER0_IAIE21_Pos           (21U)
#define IAC_IER0_IAIE21_Msk           (0x1U << IAC_IER0_IAIE21_Pos)             /*!< 0x00200000 */
#define IAC_IER0_IAIE21               IAC_IER0_IAIE21_Msk
#define IAC_IER0_IAIE22_Pos           (22U)
#define IAC_IER0_IAIE22_Msk           (0x1U << IAC_IER0_IAIE22_Pos)             /*!< 0x00400000 */
#define IAC_IER0_IAIE22               IAC_IER0_IAIE22_Msk
#define IAC_IER0_IAIE23_Pos           (23U)
#define IAC_IER0_IAIE23_Msk           (0x1U << IAC_IER0_IAIE23_Pos)             /*!< 0x00800000 */
#define IAC_IER0_IAIE23               IAC_IER0_IAIE23_Msk
#define IAC_IER0_IAIE24_Pos           (24U)
#define IAC_IER0_IAIE24_Msk           (0x1U << IAC_IER0_IAIE24_Pos)             /*!< 0x01000000 */
#define IAC_IER0_IAIE24               IAC_IER0_IAIE24_Msk
#define IAC_IER0_IAIE25_Pos           (25U)
#define IAC_IER0_IAIE25_Msk           (0x1U << IAC_IER0_IAIE25_Pos)             /*!< 0x02000000 */
#define IAC_IER0_IAIE25               IAC_IER0_IAIE25_Msk
#define IAC_IER0_IAIE26_Pos           (26U)
#define IAC_IER0_IAIE26_Msk           (0x1U << IAC_IER0_IAIE26_Pos)             /*!< 0x04000000 */
#define IAC_IER0_IAIE26               IAC_IER0_IAIE26_Msk
#define IAC_IER0_IAIE27_Pos           (27U)
#define IAC_IER0_IAIE27_Msk           (0x1U << IAC_IER0_IAIE27_Pos)             /*!< 0x08000000 */
#define IAC_IER0_IAIE27               IAC_IER0_IAIE27_Msk
#define IAC_IER0_IAIE28_Pos           (28U)
#define IAC_IER0_IAIE28_Msk           (0x1U << IAC_IER0_IAIE28_Pos)             /*!< 0x10000000 */
#define IAC_IER0_IAIE28               IAC_IER0_IAIE28_Msk
#define IAC_IER0_IAIE29_Pos           (29U)
#define IAC_IER0_IAIE29_Msk           (0x1U << IAC_IER0_IAIE29_Pos)             /*!< 0x20000000 */
#define IAC_IER0_IAIE29               IAC_IER0_IAIE29_Msk
#define IAC_IER0_IAIE30_Pos           (30U)
#define IAC_IER0_IAIE30_Msk           (0x1U << IAC_IER0_IAIE30_Pos)             /*!< 0x40000000 */
#define IAC_IER0_IAIE30               IAC_IER0_IAIE30_Msk
#define IAC_IER0_IAIE31_Pos           (31U)
#define IAC_IER0_IAIE31_Msk           (0x1U << IAC_IER0_IAIE31_Pos)             /*!< 0x80000000 */
#define IAC_IER0_IAIE31               IAC_IER0_IAIE31_Msk

/*******************  Bits definition for IAC_IER1 register *******************/
#define IAC_IER1_IAIE32_Pos           (0U)
#define IAC_IER1_IAIE32_Msk           (0x1U << IAC_IER1_IAIE32_Pos)             /*!< 0x00000001 */
#define IAC_IER1_IAIE32               IAC_IER1_IAIE32_Msk
#define IAC_IER1_IAIE33_Pos           (1U)
#define IAC_IER1_IAIE33_Msk           (0x1U << IAC_IER1_IAIE33_Pos)             /*!< 0x00000002 */
#define IAC_IER1_IAIE33               IAC_IER1_IAIE33_Msk
#define IAC_IER1_IAIE34_Pos           (2U)
#define IAC_IER1_IAIE34_Msk           (0x1U << IAC_IER1_IAIE34_Pos)             /*!< 0x00000004 */
#define IAC_IER1_IAIE34               IAC_IER1_IAIE34_Msk
#define IAC_IER1_IAIE35_Pos           (3U)
#define IAC_IER1_IAIE35_Msk           (0x1U << IAC_IER1_IAIE35_Pos)             /*!< 0x00000008 */
#define IAC_IER1_IAIE35               IAC_IER1_IAIE35_Msk
#define IAC_IER1_IAIE36_Pos           (4U)
#define IAC_IER1_IAIE36_Msk           (0x1U << IAC_IER1_IAIE36_Pos)             /*!< 0x00000010 */
#define IAC_IER1_IAIE36               IAC_IER1_IAIE36_Msk
#define IAC_IER1_IAIE37_Pos           (5U)
#define IAC_IER1_IAIE37_Msk           (0x1U << IAC_IER1_IAIE37_Pos)             /*!< 0x00000020 */
#define IAC_IER1_IAIE37               IAC_IER1_IAIE37_Msk
#define IAC_IER1_IAIE38_Pos           (6U)
#define IAC_IER1_IAIE38_Msk           (0x1U << IAC_IER1_IAIE38_Pos)             /*!< 0x00000040 */
#define IAC_IER1_IAIE38               IAC_IER1_IAIE38_Msk
#define IAC_IER1_IAIE39_Pos           (7U)
#define IAC_IER1_IAIE39_Msk           (0x1U << IAC_IER1_IAIE39_Pos)             /*!< 0x00000080 */
#define IAC_IER1_IAIE39               IAC_IER1_IAIE39_Msk
#define IAC_IER1_IAIE40_Pos           (8U)
#define IAC_IER1_IAIE40_Msk           (0x1U << IAC_IER1_IAIE40_Pos)             /*!< 0x00000100 */
#define IAC_IER1_IAIE40               IAC_IER1_IAIE40_Msk
#define IAC_IER1_IAIE41_Pos           (9U)
#define IAC_IER1_IAIE41_Msk           (0x1U << IAC_IER1_IAIE41_Pos)             /*!< 0x00000200 */
#define IAC_IER1_IAIE41               IAC_IER1_IAIE41_Msk
#define IAC_IER1_IAIE42_Pos           (10U)
#define IAC_IER1_IAIE42_Msk           (0x1U << IAC_IER1_IAIE42_Pos)             /*!< 0x00000400 */
#define IAC_IER1_IAIE42               IAC_IER1_IAIE42_Msk
#define IAC_IER1_IAIE43_Pos           (11U)
#define IAC_IER1_IAIE43_Msk           (0x1U << IAC_IER1_IAIE43_Pos)             /*!< 0x00000800 */
#define IAC_IER1_IAIE43               IAC_IER1_IAIE43_Msk
#define IAC_IER1_IAIE44_Pos           (12U)
#define IAC_IER1_IAIE44_Msk           (0x1U << IAC_IER1_IAIE44_Pos)             /*!< 0x00001000 */
#define IAC_IER1_IAIE44               IAC_IER1_IAIE44_Msk
#define IAC_IER1_IAIE45_Pos           (13U)
#define IAC_IER1_IAIE45_Msk           (0x1U << IAC_IER1_IAIE45_Pos)             /*!< 0x00002000 */
#define IAC_IER1_IAIE45               IAC_IER1_IAIE45_Msk
#define IAC_IER1_IAIE46_Pos           (14U)
#define IAC_IER1_IAIE46_Msk           (0x1U << IAC_IER1_IAIE46_Pos)             /*!< 0x00004000 */
#define IAC_IER1_IAIE46               IAC_IER1_IAIE46_Msk
#define IAC_IER1_IAIE47_Pos           (15U)
#define IAC_IER1_IAIE47_Msk           (0x1U << IAC_IER1_IAIE47_Pos)             /*!< 0x00008000 */
#define IAC_IER1_IAIE47               IAC_IER1_IAIE47_Msk
#define IAC_IER1_IAIE48_Pos           (16U)
#define IAC_IER1_IAIE48_Msk           (0x1U << IAC_IER1_IAIE48_Pos)             /*!< 0x00010000 */
#define IAC_IER1_IAIE48               IAC_IER1_IAIE48_Msk
#define IAC_IER1_IAIE49_Pos           (17U)
#define IAC_IER1_IAIE49_Msk           (0x1U << IAC_IER1_IAIE49_Pos)             /*!< 0x00020000 */
#define IAC_IER1_IAIE49               IAC_IER1_IAIE49_Msk
#define IAC_IER1_IAIE50_Pos           (18U)
#define IAC_IER1_IAIE50_Msk           (0x1U << IAC_IER1_IAIE50_Pos)             /*!< 0x00040000 */
#define IAC_IER1_IAIE50               IAC_IER1_IAIE50_Msk
#define IAC_IER1_IAIE51_Pos           (19U)
#define IAC_IER1_IAIE51_Msk           (0x1U << IAC_IER1_IAIE51_Pos)             /*!< 0x00080000 */
#define IAC_IER1_IAIE51               IAC_IER1_IAIE51_Msk
#define IAC_IER1_IAIE52_Pos           (20U)
#define IAC_IER1_IAIE52_Msk           (0x1U << IAC_IER1_IAIE52_Pos)             /*!< 0x00100000 */
#define IAC_IER1_IAIE52               IAC_IER1_IAIE52_Msk
#define IAC_IER1_IAIE53_Pos           (21U)
#define IAC_IER1_IAIE53_Msk           (0x1U << IAC_IER1_IAIE53_Pos)             /*!< 0x00200000 */
#define IAC_IER1_IAIE53               IAC_IER1_IAIE53_Msk
#define IAC_IER1_IAIE54_Pos           (22U)
#define IAC_IER1_IAIE54_Msk           (0x1U << IAC_IER1_IAIE54_Pos)             /*!< 0x00400000 */
#define IAC_IER1_IAIE54               IAC_IER1_IAIE54_Msk
#define IAC_IER1_IAIE55_Pos           (23U)
#define IAC_IER1_IAIE55_Msk           (0x1U << IAC_IER1_IAIE55_Pos)             /*!< 0x00800000 */
#define IAC_IER1_IAIE55               IAC_IER1_IAIE55_Msk
#define IAC_IER1_IAIE56_Pos           (24U)
#define IAC_IER1_IAIE56_Msk           (0x1U << IAC_IER1_IAIE56_Pos)             /*!< 0x01000000 */
#define IAC_IER1_IAIE56               IAC_IER1_IAIE56_Msk
#define IAC_IER1_IAIE57_Pos           (25U)
#define IAC_IER1_IAIE57_Msk           (0x1U << IAC_IER1_IAIE57_Pos)             /*!< 0x02000000 */
#define IAC_IER1_IAIE57               IAC_IER1_IAIE57_Msk
#define IAC_IER1_IAIE58_Pos           (26U)
#define IAC_IER1_IAIE58_Msk           (0x1U << IAC_IER1_IAIE58_Pos)             /*!< 0x04000000 */
#define IAC_IER1_IAIE58               IAC_IER1_IAIE58_Msk
#define IAC_IER1_IAIE59_Pos           (27U)
#define IAC_IER1_IAIE59_Msk           (0x1U << IAC_IER1_IAIE59_Pos)             /*!< 0x08000000 */
#define IAC_IER1_IAIE59               IAC_IER1_IAIE59_Msk
#define IAC_IER1_IAIE60_Pos           (28U)
#define IAC_IER1_IAIE60_Msk           (0x1U << IAC_IER1_IAIE60_Pos)             /*!< 0x10000000 */
#define IAC_IER1_IAIE60               IAC_IER1_IAIE60_Msk
#define IAC_IER1_IAIE61_Pos           (29U)
#define IAC_IER1_IAIE61_Msk           (0x1U << IAC_IER1_IAIE61_Pos)             /*!< 0x20000000 */
#define IAC_IER1_IAIE61               IAC_IER1_IAIE61_Msk
#define IAC_IER1_IAIE62_Pos           (30U)
#define IAC_IER1_IAIE62_Msk           (0x1U << IAC_IER1_IAIE62_Pos)             /*!< 0x40000000 */
#define IAC_IER1_IAIE62               IAC_IER1_IAIE62_Msk
#define IAC_IER1_IAIE63_Pos           (31U)
#define IAC_IER1_IAIE63_Msk           (0x1U << IAC_IER1_IAIE63_Pos)             /*!< 0x80000000 */
#define IAC_IER1_IAIE63               IAC_IER1_IAIE63_Msk

/*******************  Bits definition for IAC_IER2 register *******************/
#define IAC_IER2_IAIE64_Pos           (0U)
#define IAC_IER2_IAIE64_Msk           (0x1U << IAC_IER2_IAIE64_Pos)             /*!< 0x00000001 */
#define IAC_IER2_IAIE64               IAC_IER2_IAIE64_Msk
#define IAC_IER2_IAIE65_Pos           (1U)
#define IAC_IER2_IAIE65_Msk           (0x1U << IAC_IER2_IAIE65_Pos)             /*!< 0x00000002 */
#define IAC_IER2_IAIE65               IAC_IER2_IAIE65_Msk
#define IAC_IER2_IAIE66_Pos           (2U)
#define IAC_IER2_IAIE66_Msk           (0x1U << IAC_IER2_IAIE66_Pos)             /*!< 0x00000004 */
#define IAC_IER2_IAIE66               IAC_IER2_IAIE66_Msk
#define IAC_IER2_IAIE67_Pos           (3U)
#define IAC_IER2_IAIE67_Msk           (0x1U << IAC_IER2_IAIE67_Pos)             /*!< 0x00000008 */
#define IAC_IER2_IAIE67               IAC_IER2_IAIE67_Msk
#define IAC_IER2_IAIE68_Pos           (4U)
#define IAC_IER2_IAIE68_Msk           (0x1U << IAC_IER2_IAIE68_Pos)             /*!< 0x00000010 */
#define IAC_IER2_IAIE68               IAC_IER2_IAIE68_Msk
#define IAC_IER2_IAIE69_Pos           (5U)
#define IAC_IER2_IAIE69_Msk           (0x1U << IAC_IER2_IAIE69_Pos)             /*!< 0x00000020 */
#define IAC_IER2_IAIE69               IAC_IER2_IAIE69_Msk
#define IAC_IER2_IAIE70_Pos           (6U)
#define IAC_IER2_IAIE70_Msk           (0x1U << IAC_IER2_IAIE70_Pos)             /*!< 0x00000040 */
#define IAC_IER2_IAIE70               IAC_IER2_IAIE70_Msk
#define IAC_IER2_IAIE71_Pos           (7U)
#define IAC_IER2_IAIE71_Msk           (0x1U << IAC_IER2_IAIE71_Pos)             /*!< 0x00000080 */
#define IAC_IER2_IAIE71                IAC_IER2_IAIE71_Msk
#define IAC_IER2_IAIE72_Pos           (8U)
#define IAC_IER2_IAIE72_Msk           (0x1U << IAC_IER2_IAIE72_Pos)             /*!< 0x00000100 */
#define IAC_IER2_IAIE72               IAC_IER2_IAIE72_Msk
#define IAC_IER2_IAIE73_Pos           (9U)
#define IAC_IER2_IAIE73_Msk           (0x1U << IAC_IER2_IAIE73_Pos)             /*!< 0x00000200 */
#define IAC_IER2_IAIE73               IAC_IER2_IAIE73_Msk
#define IAC_IER2_IAIE74_Pos           (10U)
#define IAC_IER2_IAIE74_Msk           (0x1U << IAC_IER2_IAIE74_Pos)             /*!< 0x00000400 */
#define IAC_IER2_IAIE74               IAC_IER2_IAIE74_Msk
#define IAC_IER2_IAIE75_Pos           (11U)
#define IAC_IER2_IAIE75_Msk           (0x1U << IAC_IER2_IAIE75_Pos)             /*!< 0x00000800 */
#define IAC_IER2_IAIE75               IAC_IER2_IAIE75_Msk
#define IAC_IER2_IAIE76_Pos           (12U)
#define IAC_IER2_IAIE76_Msk           (0x1U << IAC_IER2_IAIE76_Pos)             /*!< 0x00001000 */
#define IAC_IER2_IAIE76               IAC_IER2_IAIE76_Msk
#define IAC_IER2_IAIE77_Pos           (13U)
#define IAC_IER2_IAIE77_Msk           (0x1U << IAC_IER2_IAIE77_Pos)             /*!< 0x00002000 */
#define IAC_IER2_IAIE77               IAC_IER2_IAIE77_Msk
#define IAC_IER2_IAIE78_Pos           (14U)
#define IAC_IER2_IAIE78_Msk           (0x1U << IAC_IER2_IAIE78_Pos)             /*!< 0x00004000 */
#define IAC_IER2_IAIE78               IAC_IER2_IAIE78_Msk
#define IAC_IER2_IAIE79_Pos           (15U)
#define IAC_IER2_IAIE79_Msk           (0x1U << IAC_IER2_IAIE79_Pos)             /*!< 0x00008000 */
#define IAC_IER2_IAIE79               IAC_IER2_IAIE79_Msk
#define IAC_IER2_IAIE80_Pos           (16U)
#define IAC_IER2_IAIE80_Msk           (0x1U << IAC_IER2_IAIE80_Pos)             /*!< 0x00010000 */
#define IAC_IER2_IAIE80               IAC_IER2_IAIE80_Msk
#define IAC_IER2_IAIE81_Pos           (17U)
#define IAC_IER2_IAIE81_Msk           (0x1U << IAC_IER2_IAIE81_Pos)             /*!< 0x00020000 */
#define IAC_IER2_IAIE81               IAC_IER2_IAIE81_Msk
#define IAC_IER2_IAIE82_Pos           (18U)
#define IAC_IER2_IAIE82_Msk           (0x1U << IAC_IER2_IAIE82_Pos)             /*!< 0x00040000 */
#define IAC_IER2_IAIE82               IAC_IER2_IAIE82_Msk
#define IAC_IER2_IAIE83_Pos           (19U)
#define IAC_IER2_IAIE83_Msk           (0x1U << IAC_IER2_IAIE83_Pos)             /*!< 0x00080000 */
#define IAC_IER2_IAIE83               IAC_IER2_IAIE83_Msk
#define IAC_IER2_IAIE84_Pos           (20U)
#define IAC_IER2_IAIE84_Msk           (0x1U << IAC_IER2_IAIE84_Pos)             /*!< 0x00100000 */
#define IAC_IER2_IAIE84               IAC_IER2_IAIE84_Msk
#define IAC_IER2_IAIE85_Pos           (21U)
#define IAC_IER2_IAIE85_Msk           (0x1U << IAC_IER2_IAIE85_Pos)             /*!< 0x00200000 */
#define IAC_IER2_IAIE85               IAC_IER2_IAIE85_Msk
#define IAC_IER2_IAIE86_Pos           (22U)
#define IAC_IER2_IAIE86_Msk           (0x1U << IAC_IER2_IAIE86_Pos)             /*!< 0x00400000 */
#define IAC_IER2_IAIE86               IAC_IER2_IAIE86_Msk
#define IAC_IER2_IAIE87_Pos           (23U)
#define IAC_IER2_IAIE87_Msk           (0x1U << IAC_IER2_IAIE87_Pos)             /*!< 0x00800000 */
#define IAC_IER2_IAIE87               IAC_IER2_IAIE87_Msk
#define IAC_IER2_IAIE88_Pos           (24U)
#define IAC_IER2_IAIE88_Msk           (0x1U << IAC_IER2_IAIE88_Pos)             /*!< 0x01000000 */
#define IAC_IER2_IAIE88               IAC_IER2_IAIE88_Msk
#define IAC_IER2_IAIE89_Pos           (25U)
#define IAC_IER2_IAIE89_Msk           (0x1U << IAC_IER2_IAIE89_Pos)             /*!< 0x02000000 */
#define IAC_IER2_IAIE89               IAC_IER2_IAIE89_Msk
#define IAC_IER2_IAIE90_Pos           (26U)
#define IAC_IER2_IAIE90_Msk           (0x1U << IAC_IER2_IAIE90_Pos)             /*!< 0x04000000 */
#define IAC_IER2_IAIE90               IAC_IER2_IAIE90_Msk
#define IAC_IER2_IAIE91_Pos           (27U)
#define IAC_IER2_IAIE91_Msk           (0x1U << IAC_IER2_IAIE91_Pos)             /*!< 0x08000000 */
#define IAC_IER2_IAIE91               IAC_IER2_IAIE91_Msk
#define IAC_IER2_IAIE92_Pos           (28U)
#define IAC_IER2_IAIE92_Msk           (0x1U << IAC_IER2_IAIE92_Pos)             /*!< 0x10000000 */
#define IAC_IER2_IAIE92               IAC_IER2_IAIE92_Msk
#define IAC_IER2_IAIE93_Pos           (29U)
#define IAC_IER2_IAIE93_Msk           (0x1U << IAC_IER2_IAIE93_Pos)             /*!< 0x20000000 */
#define IAC_IER2_IAIE93               IAC_IER2_IAIE93_Msk
#define IAC_IER2_IAIE94_Pos           (30U)
#define IAC_IER2_IAIE94_Msk           (0x1U << IAC_IER2_IAIE94_Pos)             /*!< 0x40000000 */
#define IAC_IER2_IAIE94               IAC_IER2_IAIE94_Msk
#define IAC_IER2_IAIE95_Pos           (31U)
#define IAC_IER2_IAIE95_Msk           (0x1U << IAC_IER2_IAIE95_Pos)             /*!< 0x80000000 */
#define IAC_IER2_IAIE95               IAC_IER2_IAIE95_Msk

/*******************  Bits definition for IAC_IER3 register *******************/
#define IAC_IER3_IAIE96_Pos           (0U)
#define IAC_IER3_IAIE96_Msk           (0x1U << IAC_IER3_IAIE96_Pos)             /*!< 0x00000001 */
#define IAC_IER3_IAIE96               IAC_IER3_IAIE0_Msk
#define IAC_IER3_IAIE97_Pos           (1U)
#define IAC_IER3_IAIE97_Msk           (0x1U << IAC_IER3_IAIE97_Pos)             /*!< 0x00000002 */
#define IAC_IER3_IAIE97               IAC_IER3_IAIE97_Msk
#define IAC_IER3_IAIE98_Pos           (2U)
#define IAC_IER3_IAIE98_Msk           (0x1U << IAC_IER3_IAIE98_Pos)             /*!< 0x00000004 */
#define IAC_IER3_IAIE98               IAC_IER3_IAIE98_Msk
#define IAC_IER3_IAIE99_Pos           (3U)
#define IAC_IER3_IAIE99_Msk           (0x1U << IAC_IER3_IAIE99_Pos)             /*!< 0x00000008 */
#define IAC_IER3_IAIE99               IAC_IER3_IAIE99_Msk
#define IAC_IER3_IAIE100_Pos          (4U)
#define IAC_IER3_IAIE100_Msk          (0x1U << IAC_IER3_IAIE100_Pos)            /*!< 0x00000010 */
#define IAC_IER3_IAIE100              IAC_IER3_IAIE100_Msk
#define IAC_IER3_IAIE101_Pos          (5U)
#define IAC_IER3_IAIE101_Msk          (0x1U << IAC_IER3_IAIE101_Pos)            /*!< 0x00000020 */
#define IAC_IER3_IAIE101              IAC_IER3_IAIE101_Msk
#define IAC_IER3_IAIE102_Pos          (6U)
#define IAC_IER3_IAIE102_Msk          (0x1U << IAC_IER3_IAIE102_Pos)            /*!< 0x00000040 */
#define IAC_IER3_IAIE102              IAC_IER3_IAIE102_Msk
#define IAC_IER3_IAIE103_Pos          (7U)
#define IAC_IER3_IAIE103_Msk          (0x1U << IAC_IER3_IAIE103_Pos)            /*!< 0x00000080 */
#define IAC_IER3_IAIE103              IAC_IER3_IAIE103_Msk
#define IAC_IER3_IAIE104_Pos          (8U)
#define IAC_IER3_IAIE104_Msk          (0x1U << IAC_IER3_IAIE104_Pos)            /*!< 0x00000100 */
#define IAC_IER3_IAIE104              IAC_IER3_IAIE104_Msk
#define IAC_IER3_IAIE105_Pos          (9U)
#define IAC_IER3_IAIE105_Msk          (0x1U << IAC_IER3_IAIE105_Pos)            /*!< 0x00000200 */
#define IAC_IER3_IAIE105              IAC_IER3_IAIE105_Msk
#define IAC_IER3_IAIE106_Pos          (10U)
#define IAC_IER3_IAIE106_Msk          (0x1U << IAC_IER3_IAIE106_Pos)            /*!< 0x00000400 */
#define IAC_IER3_IAIE106              IAC_IER3_IAIE106_Msk
#define IAC_IER3_IAIE107_Pos          (11U)
#define IAC_IER3_IAIE107_Msk          (0x1U << IAC_IER3_IAIE107_Pos)            /*!< 0x00000800 */
#define IAC_IER3_IAIE107              IAC_IER3_IAIE107_Msk
#define IAC_IER3_IAIE108_Pos          (12U)
#define IAC_IER3_IAIE108_Msk          (0x1U << IAC_IER3_IAIE108_Pos)            /*!< 0x00001000 */
#define IAC_IER3_IAIE108              IAC_IER3_IAIE108_Msk
#define IAC_IER3_IAIE109_Pos          (13U)
#define IAC_IER3_IAIE109_Msk          (0x1U << IAC_IER3_IAIE109_Pos)            /*!< 0x00002000 */
#define IAC_IER3_IAIE109              IAC_IER3_IAIE109_Msk
#define IAC_IER3_IAIE110_Pos          (14U)
#define IAC_IER3_IAIE110_Msk          (0x1U << IAC_IER3_IAIE110_Pos)            /*!< 0x00004000 */
#define IAC_IER3_IAIE110              IAC_IER3_IAIE110_Msk
#define IAC_IER3_IAIE111_Pos          (15U)
#define IAC_IER3_IAIE111_Msk          (0x1U << IAC_IER3_IAIE111_Pos)            /*!< 0x00008000 */
#define IAC_IER3_IAIE111              IAC_IER3_IAIE111_Msk
#define IAC_IER3_IAIE112_Pos          (16U)
#define IAC_IER3_IAIE112_Msk          (0x1U << IAC_IER3_IAIE112_Pos)            /*!< 0x00010000 */
#define IAC_IER3_IAIE112              IAC_IER3_IAIE112_Msk
#define IAC_IER3_IAIE113_Pos          (17U)
#define IAC_IER3_IAIE113_Msk          (0x1U << IAC_IER3_IAIE113_Pos)            /*!< 0x00020000 */
#define IAC_IER3_IAIE113              IAC_IER3_IAIE113_Msk
#define IAC_IER3_IAIE114_Pos          (18U)
#define IAC_IER3_IAIE114_Msk          (0x1U << IAC_IER3_IAIE114_Pos)            /*!< 0x00040000 */
#define IAC_IER3_IAIE114              IAC_IER3_IAIE114_Msk
#define IAC_IER3_IAIE115_Pos          (19U)
#define IAC_IER3_IAIE115_Msk          (0x1U << IAC_IER3_IAIE115_Pos)            /*!< 0x00080000 */
#define IAC_IER3_IAIE115              IAC_IER3_IAIE115_Msk
#define IAC_IER3_IAIE116_Pos          (20U)
#define IAC_IER3_IAIE116_Msk          (0x1U << IAC_IER3_IAIE116_Pos)            /*!< 0x00100000 */
#define IAC_IER3_IAIE116              IAC_IER3_IAIE116_Msk
#define IAC_IER3_IAIE117_Pos          (21U)
#define IAC_IER3_IAIE117_Msk          (0x1U << IAC_IER3_IAIE117_Pos)            /*!< 0x00200000 */
#define IAC_IER3_IAIE117              IAC_IER3_IAIE117_Msk
#define IAC_IER3_IAIE118_Pos          (22U)
#define IAC_IER3_IAIE118_Msk          (0x1U << IAC_IER3_IAIE118_Pos)            /*!< 0x00400000 */
#define IAC_IER3_IAIE118              IAC_IER3_IAIE118_Msk
#define IAC_IER3_IAIE119_Pos          (23U)
#define IAC_IER3_IAIE119_Msk          (0x1U << IAC_IER3_IAIE119_Pos)            /*!< 0x00800000 */
#define IAC_IER3_IAIE119              IAC_IER3_IAIE119_Msk
#define IAC_IER3_IAIE120_Pos          (24U)
#define IAC_IER3_IAIE120_Msk          (0x1U << IAC_IER3_IAIE120_Pos)            /*!< 0x01000000 */
#define IAC_IER3_IAIE120              IAC_IER3_IAIE120_Msk
#define IAC_IER3_IAIE121_Pos          (25U)
#define IAC_IER3_IAIE121_Msk          (0x1U << IAC_IER3_IAIE121_Pos)            /*!< 0x02000000 */
#define IAC_IER3_IAIE121              IAC_IER3_IAIE121_Msk
#define IAC_IER3_IAIE122_Pos          (26U)
#define IAC_IER3_IAIE122_Msk          (0x1U << IAC_IER3_IAIE122_Pos)            /*!< 0x04000000 */
#define IAC_IER3_IAIE122              IAC_IER3_IAIE122_Msk
#define IAC_IER3_IAIE123_Pos          (27U)
#define IAC_IER3_IAIE123_Msk          (0x1U << IAC_IER3_IAIE123_Pos)            /*!< 0x08000000 */
#define IAC_IER3_IAIE123              IAC_IER3_IAIE123_Msk
#define IAC_IER3_IAIE124_Pos          (28U)
#define IAC_IER3_IAIE124_Msk          (0x1U << IAC_IER3_IAIE124_Pos)            /*!< 0x10000000 */
#define IAC_IER3_IAIE124              IAC_IER3_IAIE124_Msk
#define IAC_IER3_IAIE125_Pos          (29U)
#define IAC_IER3_IAIE125_Msk          (0x1U << IAC_IER3_IAIE125_Pos)            /*!< 0x20000000 */
#define IAC_IER3_IAIE125              IAC_IER3_IAIE125_Msk
#define IAC_IER3_IAIE126_Pos          (30U)
#define IAC_IER3_IAIE126_Msk          (0x1U << IAC_IER3_IAIE126_Pos)            /*!< 0x40000000 */
#define IAC_IER3_IAIE126              IAC_IER3_IAIE126_Msk
#define IAC_IER3_IAIE127_Pos          (31U)
#define IAC_IER3_IAIE127_Msk          (0x1U << IAC_IER3_IAIE127_Pos)            /*!< 0x80000000 */
#define IAC_IER3_IAIE127              IAC_IER3_IAIE127_Msk

/*******************  Bits definition for IAC_IER4 register *******************/
#define IAC_IER4_IAIE128_Pos          (0U)
#define IAC_IER4_IAIE128_Msk          (0x1U << IAC_IER4_IAIE128_Pos)            /*!< 0x00000001 */
#define IAC_IER4_IAIE128              IAC_IER4_IAIE128_Msk
#define IAC_IER4_IAIE129_Pos          (1U)
#define IAC_IER4_IAIE129_Msk          (0x1U << IAC_IER4_IAIE129_Pos)            /*!< 0x00000002 */
#define IAC_IER4_IAIE129              IAC_IER4_IAIE129_Msk
#define IAC_IER4_IAIE130_Pos          (2U)
#define IAC_IER4_IAIE130_Msk          (0x1U << IAC_IER4_IAIE130_Pos)            /*!< 0x00000004 */
#define IAC_IER4_IAIE130              IAC_IER4_IAIE130_Msk
#define IAC_IER4_IAIE131_Pos          (3U)
#define IAC_IER4_IAIE131_Msk          (0x1U << IAC_IER4_IAIE131_Pos)            /*!< 0x00000008 */
#define IAC_IER4_IAIE131              IAC_IER4_IAIE131_Msk
#define IAC_IER4_IAIE132_Pos          (4U)
#define IAC_IER4_IAIE132_Msk          (0x1U << IAC_IER4_IAIE132_Pos)            /*!< 0x00000010 */
#define IAC_IER4_IAIE132              IAC_IER4_IAIE132_Msk
#define IAC_IER4_IAIE133_Pos          (5U)
#define IAC_IER4_IAIE133_Msk          (0x1U << IAC_IER4_IAIE133_Pos)            /*!< 0x00000020 */
#define IAC_IER4_IAIE133              IAC_IER4_IAIE133_Msk
#define IAC_IER4_IAIE134_Pos          (6U)
#define IAC_IER4_IAIE134_Msk          (0x1U << IAC_IER4_IAIE134_Pos)            /*!< 0x00000040 */
#define IAC_IER4_IAIE134              IAC_IER4_IAIE134_Msk
#define IAC_IER4_IAIE135_Pos          (7U)
#define IAC_IER4_IAIE135_Msk          (0x1U << IAC_IER4_IAIE135_Pos)            /*!< 0x00000080 */
#define IAC_IER4_IAIE135              IAC_IER4_IAIE135_Msk
#define IAC_IER4_IAIE136_Pos          (8U)
#define IAC_IER4_IAIE136_Msk          (0x1U << IAC_IER4_IAIE136_Pos)            /*!< 0x00000100 */
#define IAC_IER4_IAIE136              IAC_IER4_IAIE136_Msk
#define IAC_IER4_IAIE137_Pos          (9U)
#define IAC_IER4_IAIE137_Msk          (0x1U << IAC_IER4_IAIE137_Pos)            /*!< 0x00000200 */
#define IAC_IER4_IAIE137              IAC_IER4_IAIE137_Msk
#define IAC_IER4_IAIE138_Pos          (10U)
#define IAC_IER4_IAIE138_Msk          (0x1U << IAC_IER4_IAIE138_Pos)            /*!< 0x00000400 */
#define IAC_IER4_IAIE138              IAC_IER4_IAIE138_Msk
#define IAC_IER4_IAIE139_Pos          (11U)
#define IAC_IER4_IAIE139_Msk          (0x1U << IAC_IER4_IAIE139_Pos)            /*!< 0x00000800 */
#define IAC_IER4_IAIE139              IAC_IER4_IAIE139_Msk
#define IAC_IER4_IAIE140_Pos          (12U)
#define IAC_IER4_IAIE140_Msk          (0x1U << IAC_IER4_IAIE140_Pos)            /*!< 0x00001000 */
#define IAC_IER4_IAIE140              IAC_IER4_IAIE140_Msk
#define IAC_IER4_IAIE141_Pos          (13U)
#define IAC_IER4_IAIE141_Msk          (0x1U << IAC_IER4_IAIE141_Pos)            /*!< 0x00002000 */
#define IAC_IER4_IAIE141              IAC_IER4_IAIE141_Msk
#define IAC_IER4_IAIE142_Pos          (14U)
#define IAC_IER4_IAIE142_Msk          (0x1U << IAC_IER4_IAIE142_Pos)            /*!< 0x00004000 */
#define IAC_IER4_IAIE142              IAC_IER4_IAIE142_Msk
#define IAC_IER4_IAIE143_Pos          (15U)
#define IAC_IER4_IAIE143_Msk          (0x1U << IAC_IER4_IAIE143_Pos)            /*!< 0x00008000 */
#define IAC_IER4_IAIE143              IAC_IER4_IAIE143_Msk
#define IAC_IER4_IAIE144_Pos          (16U)
#define IAC_IER4_IAIE144_Msk          (0x1U << IAC_IER4_IAIE144_Pos)            /*!< 0x00010000 */
#define IAC_IER4_IAIE144              IAC_IER4_IAIE144_Msk
#define IAC_IER4_IAIE145_Pos          (17U)
#define IAC_IER4_IAIE145_Msk          (0x1U << IAC_IER4_IAIE145_Pos)            /*!< 0x00020000 */
#define IAC_IER4_IAIE145              IAC_IER4_IAIE145_Msk
#define IAC_IER4_IAIE146_Pos          (18U)
#define IAC_IER4_IAIE146_Msk          (0x1U << IAC_IER4_IAIE146_Pos)            /*!< 0x00040000 */
#define IAC_IER4_IAIE146              IAC_IER4_IAIE146_Msk
#define IAC_IER4_IAIE147_Pos          (19U)
#define IAC_IER4_IAIE147_Msk          (0x1U << IAC_IER4_IAIE147_Pos)            /*!< 0x00080000 */
#define IAC_IER4_IAIE147              IAC_IER4_IAIE147_Msk
#define IAC_IER4_IAIE148_Pos          (20U)
#define IAC_IER4_IAIE148_Msk          (0x1U << IAC_IER4_IAIE148_Pos)            /*!< 0x00100000 */
#define IAC_IER4_IAIE148              IAC_IER4_IAIE148_Msk
#define IAC_IER4_IAIE149_Pos          (21U)
#define IAC_IER4_IAIE149_Msk          (0x1U << IAC_IER4_IAIE149_Pos)            /*!< 0x00200000 */
#define IAC_IER4_IAIE149              IAC_IER4_IAIE149_Msk
#define IAC_IER4_IAIE150_Pos          (22U)
#define IAC_IER4_IAIE150_Msk          (0x1U << IAC_IER4_IAIE150_Pos)            /*!< 0x00400000 */
#define IAC_IER4_IAIE150              IAC_IER4_IAIE150_Msk
#define IAC_IER4_IAIE151_Pos          (23U)
#define IAC_IER4_IAIE151_Msk          (0x1U << IAC_IER4_IAIE151_Pos)            /*!< 0x00800000 */
#define IAC_IER4_IAIE151              IAC_IER4_IAIE151_Msk
#define IAC_IER4_IAIE152_Pos          (24U)
#define IAC_IER4_IAIE152_Msk          (0x1U << IAC_IER4_IAIE152_Pos)            /*!< 0x01000000 */
#define IAC_IER4_IAIE152              IAC_IER4_IAIE152_Msk
#define IAC_IER4_IAIE153_Pos          (25U)
#define IAC_IER4_IAIE153_Msk          (0x1U << IAC_IER4_IAIE153_Pos)            /*!< 0x02000000 */
#define IAC_IER4_IAIE153              IAC_IER4_IAIE153_Msk
#define IAC_IER4_IAIE154_Pos          (26U)
#define IAC_IER4_IAIE154_Msk          (0x1U << IAC_IER4_IAIE154_Pos)            /*!< 0x04000000 */
#define IAC_IER4_IAIE154              IAC_IER4_IAIE154_Msk
#define IAC_IER4_IAIE155_Pos          (27U)
#define IAC_IER4_IAIE155_Msk          (0x1U << IAC_IER4_IAIE155_Pos)            /*!< 0x08000000 */
#define IAC_IER4_IAIE155              IAC_IER4_IAIE155_Msk
#define IAC_IER4_IAIE156_Pos          (28U)
#define IAC_IER4_IAIE156_Msk          (0x1U << IAC_IER4_IAIE156_Pos)            /*!< 0x10000000 */
#define IAC_IER4_IAIE156              IAC_IER4_IAIE156_Msk
#define IAC_IER4_IAIE157_Pos          (29U)
#define IAC_IER4_IAIE157_Msk          (0x1U << IAC_IER4_IAIE157_Pos)            /*!< 0x20000000 */
#define IAC_IER4_IAIE157              IAC_IER4_IAIE157_Msk
#define IAC_IER4_IAIE158_Pos          (30U)
#define IAC_IER4_IAIE158_Msk          (0x1U << IAC_IER4_IAIE158_Pos)            /*!< 0x40000000 */
#define IAC_IER4_IAIE158              IAC_IER4_IAIE158_Msk
#define IAC_IER4_IAIE159_Pos          (31U)
#define IAC_IER4_IAIE159_Msk          (0x1U << IAC_IER4_IAIE159_Pos)            /*!< 0x80000000 */
#define IAC_IER4_IAIE159              IAC_IER4_IAIE159_Msk

/*******************  Bits definition for IAC_IER5 register *******************/
#define IAC_IER5_IAIE160_Pos          (0U)
#define IAC_IER5_IAIE160_Msk          (0x1U << IAC_IER5_IAIE160_Pos)            /*!< 0x00000001 */
#define IAC_IER5_IAIE160              IAC_IER5_IAIE160_Msk
#define IAC_IER5_IAIE161_Pos          (1U)
#define IAC_IER5_IAIE161_Msk          (0x1U << IAC_IER5_IAIE161_Pos)            /*!< 0x00000002 */
#define IAC_IER5_IAIE161              IAC_IER5_IAIE161_Msk
#define IAC_IER5_IAIE162_Pos          (2U)
#define IAC_IER5_IAIE162_Msk          (0x1U << IAC_IER5_IAIE162_Pos)            /*!< 0x00000004 */
#define IAC_IER5_IAIE162              IAC_IER5_IAIE162_Msk
#define IAC_IER5_IAIE163_Pos          (3U)
#define IAC_IER5_IAIE163_Msk          (0x1U << IAC_IER5_IAIE163_Pos)            /*!< 0x00000008 */
#define IAC_IER5_IAIE163              IAC_IER5_IAIE163_Msk
#define IAC_IER5_IAIE164_Pos          (4U)
#define IAC_IER5_IAIE164_Msk          (0x1U << IAC_IER5_IAIE164_Pos)            /*!< 0x00000010 */
#define IAC_IER5_IAIE164              IAC_IER5_IAIE164_Msk
#define IAC_IER5_IAIE165_Pos          (5U)
#define IAC_IER5_IAIE165_Msk          (0x1U << IAC_IER5_IAIE165_Pos)            /*!< 0x00000020 */
#define IAC_IER5_IAIE165              IAC_IER5_IAIE165_Msk
#define IAC_IER5_IAIE166_Pos          (6U)
#define IAC_IER5_IAIE166_Msk          (0x1U << IAC_IER5_IAIE166_Pos)            /*!< 0x00000040 */
#define IAC_IER5_IAIE166              IAC_IER5_IAIE166_Msk
#define IAC_IER5_IAIE167_Pos          (7U)
#define IAC_IER5_IAIE167_Msk          (0x1U << IAC_IER5_IAIE167_Pos)            /*!< 0x00000080 */
#define IAC_IER5_IAIE167              IAC_IER5_IAIE167_Msk
#define IAC_IER5_IAIE168_Pos          (8U)
#define IAC_IER5_IAIE168_Msk          (0x1U << IAC_IER5_IAIE168_Pos)            /*!< 0x00000100 */
#define IAC_IER5_IAIE168              IAC_IER5_IAIE168_Msk
#define IAC_IER5_IAIE169_Pos          (9U)
#define IAC_IER5_IAIE169_Msk          (0x1U << IAC_IER5_IAIE169_Pos)            /*!< 0x00000200 */
#define IAC_IER5_IAIE169              IAC_IER5_IAIE169_Msk
#define IAC_IER5_IAIE170_Pos          (10U)
#define IAC_IER5_IAIE170_Msk          (0x1U << IAC_IER5_IAIE170_Pos)            /*!< 0x00000400 */
#define IAC_IER5_IAIE170              IAC_IER5_IAIE170_Msk
#define IAC_IER5_IAIE171_Pos          (11U)
#define IAC_IER5_IAIE171_Msk          (0x1U << IAC_IER5_IAIE171_Pos)            /*!< 0x00000800 */
#define IAC_IER5_IAIE171              IAC_IER5_IAIE171_Msk
#define IAC_IER5_IAIE172_Pos          (12U)
#define IAC_IER5_IAIE172_Msk          (0x1U << IAC_IER5_IAIE172_Pos)            /*!< 0x00001000 */
#define IAC_IER5_IAIE172              IAC_IER5_IAIE172_Msk
#define IAC_IER5_IAIE173_Pos          (13U)
#define IAC_IER5_IAIE173_Msk          (0x1U << IAC_IER5_IAIE173_Pos)            /*!< 0x00002000 */
#define IAC_IER5_IAIE173              IAC_IER5_IAIE173_Msk
#define IAC_IER5_IAIE174_Pos          (14U)
#define IAC_IER5_IAIE174_Msk          (0x1U << IAC_IER5_IAIE174_Pos)            /*!< 0x00004000 */
#define IAC_IER5_IAIE174              IAC_IER5_IAIE174_Msk
#define IAC_IER5_IAIE175_Pos          (15U)
#define IAC_IER5_IAIE175_Msk          (0x1U << IAC_IER5_IAIE175_Pos)            /*!< 0x00008000 */
#define IAC_IER5_IAIE175              IAC_IER5_IAIE175_Msk
#define IAC_IER5_IAIE176_Pos          (16U)
#define IAC_IER5_IAIE176_Msk          (0x1U << IAC_IER5_IAIE176_Pos)            /*!< 0x00010000 */
#define IAC_IER5_IAIE176              IAC_IER5_IAIE176_Msk
#define IAC_IER5_IAIE177_Pos          (17U)
#define IAC_IER5_IAIE177_Msk          (0x1U << IAC_IER5_IAIE177_Pos)            /*!< 0x00020000 */
#define IAC_IER5_IAIE177              IAC_IER5_IAIE177_Msk
#define IAC_IER5_IAIE178_Pos          (18U)
#define IAC_IER5_IAIE178_Msk          (0x1U << IAC_IER5_IAIE178_Pos)            /*!< 0x00040000 */
#define IAC_IER5_IAIE178              IAC_IER5_IAIE178_Msk
#define IAC_IER5_IAIE179_Pos          (19U)
#define IAC_IER5_IAIE179_Msk          (0x1U << IAC_IER5_IAIE179_Pos)            /*!< 0x00080000 */
#define IAC_IER5_IAIE179              IAC_IER5_IAIE179_Msk
#define IAC_IER5_IAIE180_Pos          (20U)
#define IAC_IER5_IAIE180_Msk          (0x1U << IAC_IER5_IAIE180_Pos)            /*!< 0x00100000 */
#define IAC_IER5_IAIE180              IAC_IER5_IAIE180_Msk
#define IAC_IER5_IAIE181_Pos          (21U)
#define IAC_IER5_IAIE181_Msk          (0x1U << IAC_IER5_IAIE181_Pos)            /*!< 0x00200000 */
#define IAC_IER5_IAIE181              IAC_IER5_IAIE181_Msk
#define IAC_IER5_IAIE182_Pos          (22U)
#define IAC_IER5_IAIE182_Msk          (0x1U << IAC_IER5_IAIE182_Pos)            /*!< 0x00400000 */
#define IAC_IER5_IAIE182              IAC_IER5_IAIE182_Msk
#define IAC_IER5_IAIE183_Pos          (23U)
#define IAC_IER5_IAIE183_Msk          (0x1U << IAC_IER5_IAIE183_Pos)            /*!< 0x00800000 */
#define IAC_IER5_IAIE183              IAC_IER5_IAIE183_Msk
#define IAC_IER5_IAIE184_Pos          (24U)
#define IAC_IER5_IAIE184_Msk          (0x1U << IAC_IER5_IAIE184_Pos)            /*!< 0x01000000 */
#define IAC_IER5_IAIE184              IAC_IER5_IAIE184_Msk
#define IAC_IER5_IAIE185_Pos          (25U)
#define IAC_IER5_IAIE185_Msk          (0x1U << IAC_IER5_IAIE185_Pos)            /*!< 0x02000000 */
#define IAC_IER5_IAIE185              IAC_IER5_IAIE185_Msk
#define IAC_IER5_IAIE186_Pos          (26U)
#define IAC_IER5_IAIE186_Msk          (0x1U << IAC_IER5_IAIE186_Pos)            /*!< 0x04000000 */
#define IAC_IER5_IAIE186              IAC_IER5_IAIE186_Msk
#define IAC_IER5_IAIE187_Pos          (27U)
#define IAC_IER5_IAIE187_Msk          (0x1U << IAC_IER5_IAIE187_Pos)            /*!< 0x08000000 */
#define IAC_IER5_IAIE187              IAC_IER5_IAIE187_Msk
#define IAC_IER5_IAIE188_Pos          (28U)
#define IAC_IER5_IAIE188_Msk          (0x1U << IAC_IER5_IAIE188_Pos)            /*!< 0x10000000 */
#define IAC_IER5_IAIE188              IAC_IER5_IAIE188_Msk
#define IAC_IER5_IAIE189_Pos          (29U)
#define IAC_IER5_IAIE189_Msk          (0x1U << IAC_IER5_IAIE189_Pos)            /*!< 0x20000000 */
#define IAC_IER5_IAIE189              IAC_IER5_IAIE189_Msk
#define IAC_IER5_IAIE190_Pos          (30U)
#define IAC_IER5_IAIE190_Msk          (0x1U << IAC_IER5_IAIE190_Pos)            /*!< 0x40000000 */
#define IAC_IER5_IAIE190              IAC_IER5_IAIE190_Msk
#define IAC_IER5_IAIE191_Pos          (31U)
#define IAC_IER5_IAIE191_Msk          (0x1U << IAC_IER5_IAIE191_Pos)            /*!< 0x80000000 */
#define IAC_IER5_IAIE191              IAC_IER5_IAIE191_Msk

/*******************  Bits definition for IAC_ISR0 register *******************/
#define IAC_ISR0_IAF0_Pos             (0U)
#define IAC_ISR0_IAF0_Msk             (0x1U << IAC_ISR0_IAF0_Pos)               /*!< 0x00000001 */
#define IAC_ISR0_IAF0                 IAC_ISR0_IAF0_Msk
#define IAC_ISR0_IAF1_Pos             (1U)
#define IAC_ISR0_IAF1_Msk             (0x1U << IAC_ISR0_IAF1_Pos)               /*!< 0x00000002 */
#define IAC_ISR0_IAF1                 IAC_ISR0_IAF1_Msk
#define IAC_ISR0_IAF2_Pos             (2U)
#define IAC_ISR0_IAF2_Msk             (0x1U << IAC_ISR0_IAF2_Pos)               /*!< 0x00000004 */
#define IAC_ISR0_IAF2                 IAC_ISR0_IAF2_Msk
#define IAC_ISR0_IAF3_Pos             (3U)
#define IAC_ISR0_IAF3_Msk             (0x1U << IAC_ISR0_IAF3_Pos)               /*!< 0x00000008 */
#define IAC_ISR0_IAF3                 IAC_ISR0_IAF3_Msk
#define IAC_ISR0_IAF4_Pos             (4U)
#define IAC_ISR0_IAF4_Msk             (0x1U << IAC_ISR0_IAF4_Pos)               /*!< 0x00000010 */
#define IAC_ISR0_IAF4                 IAC_ISR0_IAF4_Msk
#define IAC_ISR0_IAF5_Pos             (5U)
#define IAC_ISR0_IAF5_Msk             (0x1U << IAC_ISR0_IAF5_Pos)               /*!< 0x00000020 */
#define IAC_ISR0_IAF5                 IAC_ISR0_IAF5_Msk
#define IAC_ISR0_IAF6_Pos             (6U)
#define IAC_ISR0_IAF6_Msk             (0x1U << IAC_ISR0_IAF6_Pos)               /*!< 0x00000040 */
#define IAC_ISR0_IAF6                 IAC_ISR0_IAF6_Msk
#define IAC_ISR0_IAF7_Pos             (7U)
#define IAC_ISR0_IAF7_Msk             (0x1U << IAC_ISR0_IAF7_Pos)               /*!< 0x00000080 */
#define IAC_ISR0_IAF7                 IAC_ISR0_IAF7_Msk
#define IAC_ISR0_IAF8_Pos             (8U)
#define IAC_ISR0_IAF8_Msk             (0x1U << IAC_ISR0_IAF8_Pos)               /*!< 0x00000100 */
#define IAC_ISR0_IAF8                 IAC_ISR0_IAF8_Msk
#define IAC_ISR0_IAF9_Pos             (9U)
#define IAC_ISR0_IAF9_Msk             (0x1U << IAC_ISR0_IAF9_Pos)               /*!< 0x00000200 */
#define IAC_ISR0_IAF9                 IAC_ISR0_IAF9_Msk
#define IAC_ISR0_IAF10_Pos            (10U)
#define IAC_ISR0_IAF10_Msk            (0x1U << IAC_ISR0_IAF10_Pos)              /*!< 0x00000400 */
#define IAC_ISR0_IAF10                IAC_ISR0_IAF10_Msk
#define IAC_ISR0_IAF11_Pos            (11U)
#define IAC_ISR0_IAF11_Msk            (0x1U << IAC_ISR0_IAF11_Pos)              /*!< 0x00000800 */
#define IAC_ISR0_IAF11                IAC_ISR0_IAF11_Msk
#define IAC_ISR0_IAF12_Pos            (12U)
#define IAC_ISR0_IAF12_Msk            (0x1U << IAC_ISR0_IAF12_Pos)              /*!< 0x00001000 */
#define IAC_ISR0_IAF12                IAC_ISR0_IAF12_Msk
#define IAC_ISR0_IAF13_Pos            (13U)
#define IAC_ISR0_IAF13_Msk            (0x1U << IAC_ISR0_IAF13_Pos)              /*!< 0x00002000 */
#define IAC_ISR0_IAF13                IAC_ISR0_IAF13_Msk
#define IAC_ISR0_IAF14_Pos            (14U)
#define IAC_ISR0_IAF14_Msk            (0x1U << IAC_ISR0_IAF14_Pos)              /*!< 0x00004000 */
#define IAC_ISR0_IAF14                IAC_ISR0_IAF14_Msk
#define IAC_ISR0_IAF15_Pos            (15U)
#define IAC_ISR0_IAF15_Msk            (0x1U << IAC_ISR0_IAF15_Pos)              /*!< 0x00008000 */
#define IAC_ISR0_IAF15                IAC_ISR0_IAF15_Msk
#define IAC_ISR0_IAF16_Pos            (16U)
#define IAC_ISR0_IAF16_Msk            (0x1U << IAC_ISR0_IAF16_Pos)              /*!< 0x00010000 */
#define IAC_ISR0_IAF16                IAC_ISR0_IAF16_Msk
#define IAC_ISR0_IAF17_Pos            (17U)
#define IAC_ISR0_IAF17_Msk            (0x1U << IAC_ISR0_IAF17_Pos)              /*!< 0x00020000 */
#define IAC_ISR0_IAF17                IAC_ISR0_IAF17_Msk
#define IAC_ISR0_IAF18_Pos            (18U)
#define IAC_ISR0_IAF18_Msk            (0x1U << IAC_ISR0_IAF18_Pos)              /*!< 0x00040000 */
#define IAC_ISR0_IAF18                IAC_ISR0_IAF18_Msk
#define IAC_ISR0_IAF19_Pos            (19U)
#define IAC_ISR0_IAF19_Msk            (0x1U << IAC_ISR0_IAF19_Pos)              /*!< 0x00080000 */
#define IAC_ISR0_IAF19                IAC_ISR0_IAF19_Msk
#define IAC_ISR0_IAF20_Pos            (20U)
#define IAC_ISR0_IAF20_Msk            (0x1U << IAC_ISR0_IAF20_Pos)              /*!< 0x00100000 */
#define IAC_ISR0_IAF20                IAC_ISR0_IAF20_Msk
#define IAC_ISR0_IAF21_Pos            (21U)
#define IAC_ISR0_IAF21_Msk            (0x1U << IAC_ISR0_IAF21_Pos)              /*!< 0x00200000 */
#define IAC_ISR0_IAF21                IAC_ISR0_IAF21_Msk
#define IAC_ISR0_IAF22_Pos            (22U)
#define IAC_ISR0_IAF22_Msk            (0x1U << IAC_ISR0_IAF22_Pos)              /*!< 0x00400000 */
#define IAC_ISR0_IAF22                IAC_ISR0_IAF22_Msk
#define IAC_ISR0_IAF23_Pos            (23U)
#define IAC_ISR0_IAF23_Msk            (0x1U << IAC_ISR0_IAF23_Pos)              /*!< 0x00800000 */
#define IAC_ISR0_IAF23                IAC_ISR0_IAF23_Msk
#define IAC_ISR0_IAF24_Pos            (24U)
#define IAC_ISR0_IAF24_Msk            (0x1U << IAC_ISR0_IAF24_Pos)              /*!< 0x01000000 */
#define IAC_ISR0_IAF24                IAC_ISR0_IAF24_Msk
#define IAC_ISR0_IAF25_Pos            (25U)
#define IAC_ISR0_IAF25_Msk            (0x1U << IAC_ISR0_IAF25_Pos)              /*!< 0x02000000 */
#define IAC_ISR0_IAF25                IAC_ISR0_IAF25_Msk
#define IAC_ISR0_IAF26_Pos            (26U)
#define IAC_ISR0_IAF26_Msk            (0x1U << IAC_ISR0_IAF26_Pos)              /*!< 0x04000000 */
#define IAC_ISR0_IAF26                IAC_ISR0_IAF26_Msk
#define IAC_ISR0_IAF27_Pos            (27U)
#define IAC_ISR0_IAF27_Msk            (0x1U << IAC_ISR0_IAF27_Pos)              /*!< 0x08000000 */
#define IAC_ISR0_IAF27                IAC_ISR0_IAF27_Msk
#define IAC_ISR0_IAF28_Pos            (28U)
#define IAC_ISR0_IAF28_Msk            (0x1U << IAC_ISR0_IAF28_Pos)              /*!< 0x10000000 */
#define IAC_ISR0_IAF28                IAC_ISR0_IAF28_Msk
#define IAC_ISR0_IAF29_Pos            (29U)
#define IAC_ISR0_IAF29_Msk            (0x1U << IAC_ISR0_IAF29_Pos)              /*!< 0x20000000 */
#define IAC_ISR0_IAF29                IAC_ISR0_IAF29_Msk
#define IAC_ISR0_IAF30_Pos            (30U)
#define IAC_ISR0_IAF30_Msk            (0x1U << IAC_ISR0_IAF30_Pos)              /*!< 0x40000000 */
#define IAC_ISR0_IAF30                IAC_ISR0_IAF30_Msk
#define IAC_ISR0_IAF31_Pos            (31U)
#define IAC_ISR0_IAF31_Msk            (0x1U << IAC_ISR0_IAF31_Pos)              /*!< 0x80000000 */
#define IAC_ISR0_IAF31                IAC_ISR0_IAF31_Msk

/*******************  Bits definition for IAC_ISR1 register *******************/
#define IAC_ISR1_IAF32_Pos            (0U)
#define IAC_ISR1_IAF32_Msk            (0x1U << IAC_ISR1_IAF32_Pos)              /*!< 0x00000001 */
#define IAC_ISR1_IAF32                IAC_ISR1_IAF32_Msk
#define IAC_ISR1_IAF33_Pos            (1U)
#define IAC_ISR1_IAF33_Msk            (0x1U << IAC_ISR1_IAF33_Pos)              /*!< 0x00000002 */
#define IAC_ISR1_IAF33                IAC_ISR1_IAF33_Msk
#define IAC_ISR1_IAF34_Pos            (2U)
#define IAC_ISR1_IAF34_Msk            (0x1U << IAC_ISR1_IAF34_Pos)              /*!< 0x00000004 */
#define IAC_ISR1_IAF34                IAC_ISR1_IAF34_Msk
#define IAC_ISR1_IAF35_Pos            (3U)
#define IAC_ISR1_IAF35_Msk            (0x1U << IAC_ISR1_IAF35_Pos)              /*!< 0x00000008 */
#define IAC_ISR1_IAF35                IAC_ISR1_IAF35_Msk
#define IAC_ISR1_IAF36_Pos            (4U)
#define IAC_ISR1_IAF36_Msk            (0x1U << IAC_ISR1_IAF36_Pos)              /*!< 0x00000010 */
#define IAC_ISR1_IAF36                IAC_ISR1_IAF36_Msk
#define IAC_ISR1_IAF37_Pos            (5U)
#define IAC_ISR1_IAF37_Msk            (0x1U << IAC_ISR1_IAF37_Pos)              /*!< 0x00000020 */
#define IAC_ISR1_IAF37                IAC_ISR1_IAF37_Msk
#define IAC_ISR1_IAF38_Pos            (6U)
#define IAC_ISR1_IAF38_Msk            (0x1U << IAC_ISR1_IAF38_Pos)              /*!< 0x00000040 */
#define IAC_ISR1_IAF38                IAC_ISR1_IAF38_Msk
#define IAC_ISR1_IAF39_Pos            (7U)
#define IAC_ISR1_IAF39_Msk            (0x1U << IAC_ISR1_IAF39_Pos)              /*!< 0x00000080 */
#define IAC_ISR1_IAF39                IAC_ISR1_IAF39_Msk
#define IAC_ISR1_IAF40_Pos            (8U)
#define IAC_ISR1_IAF40_Msk            (0x1U << IAC_ISR1_IAF40_Pos)              /*!< 0x00000100 */
#define IAC_ISR1_IAF40                IAC_ISR1_IAF40_Msk
#define IAC_ISR1_IAF41_Pos            (9U)
#define IAC_ISR1_IAF41_Msk            (0x1U << IAC_ISR1_IAF41_Pos)              /*!< 0x00000200 */
#define IAC_ISR1_IAF41                IAC_ISR1_IAF41_Msk
#define IAC_ISR1_IAF42_Pos            (10U)
#define IAC_ISR1_IAF42_Msk            (0x1U << IAC_ISR1_IAF42_Pos)              /*!< 0x00000400 */
#define IAC_ISR1_IAF42                IAC_ISR1_IAF42_Msk
#define IAC_ISR1_IAF43_Pos            (11U)
#define IAC_ISR1_IAF43_Msk            (0x1U << IAC_ISR1_IAF43_Pos)              /*!< 0x00000800 */
#define IAC_ISR1_IAF43                IAC_ISR1_IAF43_Msk
#define IAC_ISR1_IAF44_Pos            (12U)
#define IAC_ISR1_IAF44_Msk            (0x1U << IAC_ISR1_IAF44_Pos)              /*!< 0x00001000 */
#define IAC_ISR1_IAF44                IAC_ISR1_IAF44_Msk
#define IAC_ISR1_IAF45_Pos            (13U)
#define IAC_ISR1_IAF45_Msk            (0x1U << IAC_ISR1_IAF45_Pos)              /*!< 0x00002000 */
#define IAC_ISR1_IAF45                IAC_ISR1_IAF45_Msk
#define IAC_ISR1_IAF46_Pos            (14U)
#define IAC_ISR1_IAF46_Msk            (0x1U << IAC_ISR1_IAF46_Pos)              /*!< 0x00004000 */
#define IAC_ISR1_IAF46                IAC_ISR1_IAF46_Msk
#define IAC_ISR1_IAF47_Pos            (15U)
#define IAC_ISR1_IAF47_Msk            (0x1U << IAC_ISR1_IAF47_Pos)              /*!< 0x00008000 */
#define IAC_ISR1_IAF47                IAC_ISR1_IAF47_Msk
#define IAC_ISR1_IAF48_Pos            (16U)
#define IAC_ISR1_IAF48_Msk            (0x1U << IAC_ISR1_IAF48_Pos)              /*!< 0x00010000 */
#define IAC_ISR1_IAF48                IAC_ISR1_IAF48_Msk
#define IAC_ISR1_IAF49_Pos            (17U)
#define IAC_ISR1_IAF49_Msk            (0x1U << IAC_ISR1_IAF49_Pos)              /*!< 0x00020000 */
#define IAC_ISR1_IAF49                IAC_ISR1_IAF49_Msk
#define IAC_ISR1_IAF50_Pos            (18U)
#define IAC_ISR1_IAF50_Msk            (0x1U << IAC_ISR1_IAF50_Pos)              /*!< 0x00040000 */
#define IAC_ISR1_IAF50                IAC_ISR1_IAF50_Msk
#define IAC_ISR1_IAF51_Pos            (19U)
#define IAC_ISR1_IAF51_Msk            (0x1U << IAC_ISR1_IAF51_Pos)              /*!< 0x00080000 */
#define IAC_ISR1_IAF51                IAC_ISR1_IAF51_Msk
#define IAC_ISR1_IAF52_Pos            (20U)
#define IAC_ISR1_IAF52_Msk            (0x1U << IAC_ISR1_IAF52_Pos)              /*!< 0x00100000 */
#define IAC_ISR1_IAF52                IAC_ISR1_IAF52_Msk
#define IAC_ISR1_IAF53_Pos            (21U)
#define IAC_ISR1_IAF53_Msk            (0x1U << IAC_ISR1_IAF53_Pos)              /*!< 0x00200000 */
#define IAC_ISR1_IAF53                IAC_ISR1_IAF53_Msk
#define IAC_ISR1_IAF54_Pos            (22U)
#define IAC_ISR1_IAF54_Msk            (0x1U << IAC_ISR1_IAF54_Pos)              /*!< 0x00400000 */
#define IAC_ISR1_IAF54                IAC_ISR1_IAF54_Msk
#define IAC_ISR1_IAF55_Pos            (23U)
#define IAC_ISR1_IAF55_Msk            (0x1U << IAC_ISR1_IAF55_Pos)              /*!< 0x00800000 */
#define IAC_ISR1_IAF55                IAC_ISR1_IAF55_Msk
#define IAC_ISR1_IAF56_Pos            (24U)
#define IAC_ISR1_IAF56_Msk            (0x1U << IAC_ISR1_IAF56_Pos)              /*!< 0x01000000 */
#define IAC_ISR1_IAF56                IAC_ISR1_IAF56_Msk
#define IAC_ISR1_IAF57_Pos            (25U)
#define IAC_ISR1_IAF57_Msk            (0x1U << IAC_ISR1_IAF57_Pos)              /*!< 0x02000000 */
#define IAC_ISR1_IAF57                IAC_ISR1_IAF57_Msk
#define IAC_ISR1_IAF58_Pos            (26U)
#define IAC_ISR1_IAF58_Msk            (0x1U << IAC_ISR1_IAF58_Pos)              /*!< 0x04000000 */
#define IAC_ISR1_IAF58                IAC_ISR1_IAF58_Msk
#define IAC_ISR1_IAF59_Pos            (27U)
#define IAC_ISR1_IAF59_Msk            (0x1U << IAC_ISR1_IAF59_Pos)              /*!< 0x08000000 */
#define IAC_ISR1_IAF59                IAC_ISR1_IAF59_Msk
#define IAC_ISR1_IAF60_Pos            (28U)
#define IAC_ISR1_IAF60_Msk            (0x1U << IAC_ISR1_IAF60_Pos)              /*!< 0x10000000 */
#define IAC_ISR1_IAF60                IAC_ISR1_IAF60_Msk
#define IAC_ISR1_IAF61_Pos            (29U)
#define IAC_ISR1_IAF61_Msk            (0x1U << IAC_ISR1_IAF61_Pos)              /*!< 0x20000000 */
#define IAC_ISR1_IAF61                IAC_ISR1_IAF61_Msk
#define IAC_ISR1_IAF62_Pos            (30U)
#define IAC_ISR1_IAF62_Msk            (0x1U << IAC_ISR1_IAF62_Pos)              /*!< 0x40000000 */
#define IAC_ISR1_IAF62                IAC_ISR1_IAF62_Msk
#define IAC_ISR1_IAF63_Pos            (31U)
#define IAC_ISR1_IAF63_Msk            (0x1U << IAC_ISR1_IAF63_Pos)              /*!< 0x80000000 */
#define IAC_ISR1_IAF63                IAC_ISR1_IAF63_Msk

/*******************  Bits definition for IAC_ISR2 register *******************/
#define IAC_ISR2_IAF64_Pos            (0U)
#define IAC_ISR2_IAF64_Msk            (0x1U << IAC_ISR2_IAF64_Pos)              /*!< 0x00000001 */
#define IAC_ISR2_IAF64                IAC_ISR2_IAF64_Msk
#define IAC_ISR2_IAF65_Pos            (1U)
#define IAC_ISR2_IAF65_Msk            (0x1U << IAC_ISR2_IAF65_Pos)              /*!< 0x00000002 */
#define IAC_ISR2_IAF65                IAC_ISR2_IAF65_Msk
#define IAC_ISR2_IAF66_Pos            (2U)
#define IAC_ISR2_IAF66_Msk            (0x1U << IAC_ISR2_IAF66_Pos)              /*!< 0x00000004 */
#define IAC_ISR2_IAF66                IAC_ISR2_IAF66_Msk
#define IAC_ISR2_IAF67_Pos            (3U)
#define IAC_ISR2_IAF67_Msk            (0x1U << IAC_ISR2_IAF67_Pos)              /*!< 0x00000008 */
#define IAC_ISR2_IAF67                IAC_ISR2_IAF67_Msk
#define IAC_ISR2_IAF68_Pos            (4U)
#define IAC_ISR2_IAF68_Msk            (0x1U << IAC_ISR2_IAF68_Pos)              /*!< 0x00000010 */
#define IAC_ISR2_IAF68                IAC_ISR2_IAF68_Msk
#define IAC_ISR2_IAF69_Pos            (5U)
#define IAC_ISR2_IAF69_Msk            (0x1U << IAC_ISR2_IAF69_Pos)              /*!< 0x00000020 */
#define IAC_ISR2_IAF69                IAC_ISR2_IAF69_Msk
#define IAC_ISR2_IAF70_Pos            (6U)
#define IAC_ISR2_IAF70_Msk            (0x1U << IAC_ISR2_IAF70_Pos)              /*!< 0x00000040 */
#define IAC_ISR2_IAF70                IAC_ISR2_IAF70_Msk
#define IAC_ISR2_IAF71_Pos            (7U)
#define IAC_ISR2_IAF71_Msk            (0x1U << IAC_ISR2_IAF71_Pos)              /*!< 0x00000080 */
#define IAC_ISR2_IAF71                 IAC_ISR2_IAF71_Msk
#define IAC_ISR2_IAF72_Pos            (8U)
#define IAC_ISR2_IAF72_Msk            (0x1U << IAC_ISR2_IAF72_Pos)              /*!< 0x00000100 */
#define IAC_ISR2_IAF72                IAC_ISR2_IAF72_Msk
#define IAC_ISR2_IAF73_Pos            (9U)
#define IAC_ISR2_IAF73_Msk            (0x1U << IAC_ISR2_IAF73_Pos)              /*!< 0x00000200 */
#define IAC_ISR2_IAF73                IAC_ISR2_IAF73_Msk
#define IAC_ISR2_IAF74_Pos            (10U)
#define IAC_ISR2_IAF74_Msk            (0x1U << IAC_ISR2_IAF74_Pos)              /*!< 0x00000400 */
#define IAC_ISR2_IAF74                IAC_ISR2_IAF74_Msk
#define IAC_ISR2_IAF75_Pos            (11U)
#define IAC_ISR2_IAF75_Msk            (0x1U << IAC_ISR2_IAF75_Pos)              /*!< 0x00000800 */
#define IAC_ISR2_IAF75                IAC_ISR2_IAF75_Msk
#define IAC_ISR2_IAF76_Pos            (12U)
#define IAC_ISR2_IAF76_Msk            (0x1U << IAC_ISR2_IAF76_Pos)              /*!< 0x00001000 */
#define IAC_ISR2_IAF76                IAC_ISR2_IAF76_Msk
#define IAC_ISR2_IAF77_Pos            (13U)
#define IAC_ISR2_IAF77_Msk            (0x1U << IAC_ISR2_IAF77_Pos)              /*!< 0x00002000 */
#define IAC_ISR2_IAF77                IAC_ISR2_IAF77_Msk
#define IAC_ISR2_IAF78_Pos            (14U)
#define IAC_ISR2_IAF78_Msk            (0x1U << IAC_ISR2_IAF78_Pos)              /*!< 0x00004000 */
#define IAC_ISR2_IAF78                IAC_ISR2_IAF78_Msk
#define IAC_ISR2_IAF79_Pos            (15U)
#define IAC_ISR2_IAF79_Msk            (0x1U << IAC_ISR2_IAF79_Pos)              /*!< 0x00008000 */
#define IAC_ISR2_IAF79                IAC_ISR2_IAF79_Msk
#define IAC_ISR2_IAF80_Pos            (16U)
#define IAC_ISR2_IAF80_Msk            (0x1U << IAC_ISR2_IAF80_Pos)              /*!< 0x00010000 */
#define IAC_ISR2_IAF80                IAC_ISR2_IAF80_Msk
#define IAC_ISR2_IAF81_Pos            (17U)
#define IAC_ISR2_IAF81_Msk            (0x1U << IAC_ISR2_IAF81_Pos)              /*!< 0x00020000 */
#define IAC_ISR2_IAF81                IAC_ISR2_IAF81_Msk
#define IAC_ISR2_IAF82_Pos            (18U)
#define IAC_ISR2_IAF82_Msk            (0x1U << IAC_ISR2_IAF82_Pos)              /*!< 0x00040000 */
#define IAC_ISR2_IAF82                IAC_ISR2_IAF82_Msk
#define IAC_ISR2_IAF83_Pos            (19U)
#define IAC_ISR2_IAF83_Msk            (0x1U << IAC_ISR2_IAF83_Pos)              /*!< 0x00080000 */
#define IAC_ISR2_IAF83                IAC_ISR2_IAF83_Msk
#define IAC_ISR2_IAF84_Pos            (20U)
#define IAC_ISR2_IAF84_Msk            (0x1U << IAC_ISR2_IAF84_Pos)              /*!< 0x00100000 */
#define IAC_ISR2_IAF84                IAC_ISR2_IAF84_Msk
#define IAC_ISR2_IAF85_Pos            (21U)
#define IAC_ISR2_IAF85_Msk            (0x1U << IAC_ISR2_IAF85_Pos)              /*!< 0x00200000 */
#define IAC_ISR2_IAF85                IAC_ISR2_IAF85_Msk
#define IAC_ISR2_IAF86_Pos            (22U)
#define IAC_ISR2_IAF86_Msk            (0x1U << IAC_ISR2_IAF86_Pos)              /*!< 0x00400000 */
#define IAC_ISR2_IAF86                IAC_ISR2_IAF86_Msk
#define IAC_ISR2_IAF87_Pos            (23U)
#define IAC_ISR2_IAF87_Msk            (0x1U << IAC_ISR2_IAF87_Pos)              /*!< 0x00800000 */
#define IAC_ISR2_IAF87                IAC_ISR2_IAF87_Msk
#define IAC_ISR2_IAF88_Pos            (24U)
#define IAC_ISR2_IAF88_Msk            (0x1U << IAC_ISR2_IAF88_Pos)              /*!< 0x01000000 */
#define IAC_ISR2_IAF88                IAC_ISR2_IAF88_Msk
#define IAC_ISR2_IAF89_Pos            (25U)
#define IAC_ISR2_IAF89_Msk            (0x1U << IAC_ISR2_IAF89_Pos)              /*!< 0x02000000 */
#define IAC_ISR2_IAF89                IAC_ISR2_IAF89_Msk
#define IAC_ISR2_IAF90_Pos            (26U)
#define IAC_ISR2_IAF90_Msk            (0x1U << IAC_ISR2_IAF90_Pos)              /*!< 0x04000000 */
#define IAC_ISR2_IAF90                IAC_ISR2_IAF90_Msk
#define IAC_ISR2_IAF91_Pos            (27U)
#define IAC_ISR2_IAF91_Msk            (0x1U << IAC_ISR2_IAF91_Pos)              /*!< 0x08000000 */
#define IAC_ISR2_IAF91                IAC_ISR2_IAF91_Msk
#define IAC_ISR2_IAF92_Pos            (28U)
#define IAC_ISR2_IAF92_Msk            (0x1U << IAC_ISR2_IAF92_Pos)              /*!< 0x10000000 */
#define IAC_ISR2_IAF92                IAC_ISR2_IAF92_Msk
#define IAC_ISR2_IAF93_Pos            (29U)
#define IAC_ISR2_IAF93_Msk            (0x1U << IAC_ISR2_IAF93_Pos)              /*!< 0x20000000 */
#define IAC_ISR2_IAF93                IAC_ISR2_IAF93_Msk
#define IAC_ISR2_IAF94_Pos            (30U)
#define IAC_ISR2_IAF94_Msk            (0x1U << IAC_ISR2_IAF94_Pos)              /*!< 0x40000000 */
#define IAC_ISR2_IAF94                IAC_ISR2_IAF94_Msk
#define IAC_ISR2_IAF95_Pos            (31U)
#define IAC_ISR2_IAF95_Msk            (0x1U << IAC_ISR2_IAF95_Pos)              /*!< 0x80000000 */
#define IAC_ISR2_IAF95                IAC_ISR2_IAF95_Msk

/*******************  Bits definition for IAC_ISR3 register *******************/
#define IAC_ISR3_IAF96_Pos            (0U)
#define IAC_ISR3_IAF96_Msk            (0x1U << IAC_ISR3_IAF96_Pos)              /*!< 0x00000001 */
#define IAC_ISR3_IAF96                IAC_ISR3_IAF0_Msk
#define IAC_ISR3_IAF97_Pos            (1U)
#define IAC_ISR3_IAF97_Msk            (0x1U << IAC_ISR3_IAF97_Pos)              /*!< 0x00000002 */
#define IAC_ISR3_IAF97                IAC_ISR3_IAF97_Msk
#define IAC_ISR3_IAF98_Pos            (2U)
#define IAC_ISR3_IAF98_Msk            (0x1U << IAC_ISR3_IAF98_Pos)              /*!< 0x00000004 */
#define IAC_ISR3_IAF98                IAC_ISR3_IAF98_Msk
#define IAC_ISR3_IAF99_Pos            (3U)
#define IAC_ISR3_IAF99_Msk            (0x1U << IAC_ISR3_IAF99_Pos)              /*!< 0x00000008 */
#define IAC_ISR3_IAF99                IAC_ISR3_IAF99_Msk
#define IAC_ISR3_IAF100_Pos           (4U)
#define IAC_ISR3_IAF100_Msk           (0x1U << IAC_ISR3_IAF100_Pos)             /*!< 0x00000010 */
#define IAC_ISR3_IAF100               IAC_ISR3_IAF100_Msk
#define IAC_ISR3_IAF101_Pos           (5U)
#define IAC_ISR3_IAF101_Msk           (0x1U << IAC_ISR3_IAF101_Pos)             /*!< 0x00000020 */
#define IAC_ISR3_IAF101               IAC_ISR3_IAF101_Msk
#define IAC_ISR3_IAF102_Pos           (6U)
#define IAC_ISR3_IAF102_Msk           (0x1U << IAC_ISR3_IAF102_Pos)             /*!< 0x00000040 */
#define IAC_ISR3_IAF102               IAC_ISR3_IAF102_Msk
#define IAC_ISR3_IAF103_Pos           (7U)
#define IAC_ISR3_IAF103_Msk           (0x1U << IAC_ISR3_IAF103_Pos)             /*!< 0x00000080 */
#define IAC_ISR3_IAF103               IAC_ISR3_IAF103_Msk
#define IAC_ISR3_IAF104_Pos           (8U)
#define IAC_ISR3_IAF104_Msk           (0x1U << IAC_ISR3_IAF104_Pos)             /*!< 0x00000100 */
#define IAC_ISR3_IAF104               IAC_ISR3_IAF104_Msk
#define IAC_ISR3_IAF105_Pos           (9U)
#define IAC_ISR3_IAF105_Msk           (0x1U << IAC_ISR3_IAF105_Pos)             /*!< 0x00000200 */
#define IAC_ISR3_IAF105               IAC_ISR3_IAF105_Msk
#define IAC_ISR3_IAF106_Pos           (10U)
#define IAC_ISR3_IAF106_Msk           (0x1U << IAC_ISR3_IAF106_Pos)             /*!< 0x00000400 */
#define IAC_ISR3_IAF106               IAC_ISR3_IAF106_Msk
#define IAC_ISR3_IAF107_Pos           (11U)
#define IAC_ISR3_IAF107_Msk           (0x1U << IAC_ISR3_IAF107_Pos)             /*!< 0x00000800 */
#define IAC_ISR3_IAF107               IAC_ISR3_IAF107_Msk
#define IAC_ISR3_IAF108_Pos           (12U)
#define IAC_ISR3_IAF108_Msk           (0x1U << IAC_ISR3_IAF108_Pos)             /*!< 0x00001000 */
#define IAC_ISR3_IAF108               IAC_ISR3_IAF108_Msk
#define IAC_ISR3_IAF109_Pos           (13U)
#define IAC_ISR3_IAF109_Msk           (0x1U << IAC_ISR3_IAF109_Pos)             /*!< 0x00002000 */
#define IAC_ISR3_IAF109               IAC_ISR3_IAF109_Msk
#define IAC_ISR3_IAF110_Pos           (14U)
#define IAC_ISR3_IAF110_Msk           (0x1U << IAC_ISR3_IAF110_Pos)             /*!< 0x00004000 */
#define IAC_ISR3_IAF110               IAC_ISR3_IAF110_Msk
#define IAC_ISR3_IAF111_Pos           (15U)
#define IAC_ISR3_IAF111_Msk           (0x1U << IAC_ISR3_IAF111_Pos)             /*!< 0x00008000 */
#define IAC_ISR3_IAF111               IAC_ISR3_IAF111_Msk
#define IAC_ISR3_IAF112_Pos           (16U)
#define IAC_ISR3_IAF112_Msk           (0x1U << IAC_ISR3_IAF112_Pos)             /*!< 0x00010000 */
#define IAC_ISR3_IAF112               IAC_ISR3_IAF112_Msk
#define IAC_ISR3_IAF113_Pos           (17U)
#define IAC_ISR3_IAF113_Msk           (0x1U << IAC_ISR3_IAF113_Pos)             /*!< 0x00020000 */
#define IAC_ISR3_IAF113               IAC_ISR3_IAF113_Msk
#define IAC_ISR3_IAF114_Pos           (18U)
#define IAC_ISR3_IAF114_Msk           (0x1U << IAC_ISR3_IAF114_Pos)             /*!< 0x00040000 */
#define IAC_ISR3_IAF114               IAC_ISR3_IAF114_Msk
#define IAC_ISR3_IAF115_Pos           (19U)
#define IAC_ISR3_IAF115_Msk           (0x1U << IAC_ISR3_IAF115_Pos)             /*!< 0x00080000 */
#define IAC_ISR3_IAF115               IAC_ISR3_IAF115_Msk
#define IAC_ISR3_IAF116_Pos           (20U)
#define IAC_ISR3_IAF116_Msk           (0x1U << IAC_ISR3_IAF116_Pos)             /*!< 0x00100000 */
#define IAC_ISR3_IAF116               IAC_ISR3_IAF116_Msk
#define IAC_ISR3_IAF117_Pos           (21U)
#define IAC_ISR3_IAF117_Msk           (0x1U << IAC_ISR3_IAF117_Pos)             /*!< 0x00200000 */
#define IAC_ISR3_IAF117               IAC_ISR3_IAF117_Msk
#define IAC_ISR3_IAF118_Pos           (22U)
#define IAC_ISR3_IAF118_Msk           (0x1U << IAC_ISR3_IAF118_Pos)             /*!< 0x00400000 */
#define IAC_ISR3_IAF118               IAC_ISR3_IAF118_Msk
#define IAC_ISR3_IAF119_Pos           (23U)
#define IAC_ISR3_IAF119_Msk           (0x1U << IAC_ISR3_IAF119_Pos)             /*!< 0x00800000 */
#define IAC_ISR3_IAF119               IAC_ISR3_IAF119_Msk
#define IAC_ISR3_IAF120_Pos           (24U)
#define IAC_ISR3_IAF120_Msk           (0x1U << IAC_ISR3_IAF120_Pos)             /*!< 0x01000000 */
#define IAC_ISR3_IAF120               IAC_ISR3_IAF120_Msk
#define IAC_ISR3_IAF121_Pos           (25U)
#define IAC_ISR3_IAF121_Msk           (0x1U << IAC_ISR3_IAF121_Pos)             /*!< 0x02000000 */
#define IAC_ISR3_IAF121               IAC_ISR3_IAF121_Msk
#define IAC_ISR3_IAF122_Pos           (26U)
#define IAC_ISR3_IAF122_Msk           (0x1U << IAC_ISR3_IAF122_Pos)             /*!< 0x04000000 */
#define IAC_ISR3_IAF122               IAC_ISR3_IAF122_Msk
#define IAC_ISR3_IAF123_Pos           (27U)
#define IAC_ISR3_IAF123_Msk           (0x1U << IAC_ISR3_IAF123_Pos)             /*!< 0x08000000 */
#define IAC_ISR3_IAF123               IAC_ISR3_IAF123_Msk
#define IAC_ISR3_IAF124_Pos           (28U)
#define IAC_ISR3_IAF124_Msk           (0x1U << IAC_ISR3_IAF124_Pos)             /*!< 0x10000000 */
#define IAC_ISR3_IAF124               IAC_ISR3_IAF124_Msk
#define IAC_ISR3_IAF125_Pos           (29U)
#define IAC_ISR3_IAF125_Msk           (0x1U << IAC_ISR3_IAF125_Pos)             /*!< 0x20000000 */
#define IAC_ISR3_IAF125               IAC_ISR3_IAF125_Msk
#define IAC_ISR3_IAF126_Pos           (30U)
#define IAC_ISR3_IAF126_Msk           (0x1U << IAC_ISR3_IAF126_Pos)             /*!< 0x40000000 */
#define IAC_ISR3_IAF126               IAC_ISR3_IAF126_Msk
#define IAC_ISR3_IAF127_Pos           (31U)
#define IAC_ISR3_IAF127_Msk           (0x1U << IAC_ISR3_IAF127_Pos)             /*!< 0x80000000 */
#define IAC_ISR3_IAF127               IAC_ISR3_IAF127_Msk

/*******************  Bits definition for IAC_ISR4 register *******************/
#define IAC_ISR4_IAF128_Pos           (0U)
#define IAC_ISR4_IAF128_Msk           (0x1U << IAC_ISR4_IAF128_Pos)             /*!< 0x00000001 */
#define IAC_ISR4_IAF128               IAC_ISR4_IAF128_Msk
#define IAC_ISR4_IAF129_Pos           (1U)
#define IAC_ISR4_IAF129_Msk           (0x1U << IAC_ISR4_IAF129_Pos)             /*!< 0x00000002 */
#define IAC_ISR4_IAF129               IAC_ISR4_IAF129_Msk
#define IAC_ISR4_IAF130_Pos           (2U)
#define IAC_ISR4_IAF130_Msk           (0x1U << IAC_ISR4_IAF130_Pos)             /*!< 0x00000004 */
#define IAC_ISR4_IAF130               IAC_ISR4_IAF130_Msk
#define IAC_ISR4_IAF131_Pos           (3U)
#define IAC_ISR4_IAF131_Msk           (0x1U << IAC_ISR4_IAF131_Pos)             /*!< 0x00000008 */
#define IAC_ISR4_IAF131               IAC_ISR4_IAF131_Msk
#define IAC_ISR4_IAF132_Pos           (4U)
#define IAC_ISR4_IAF132_Msk           (0x1U << IAC_ISR4_IAF132_Pos)             /*!< 0x00000010 */
#define IAC_ISR4_IAF132               IAC_ISR4_IAF132_Msk
#define IAC_ISR4_IAF133_Pos           (5U)
#define IAC_ISR4_IAF133_Msk           (0x1U << IAC_ISR4_IAF133_Pos)             /*!< 0x00000020 */
#define IAC_ISR4_IAF133               IAC_ISR4_IAF133_Msk
#define IAC_ISR4_IAF134_Pos           (6U)
#define IAC_ISR4_IAF134_Msk           (0x1U << IAC_ISR4_IAF134_Pos)             /*!< 0x00000040 */
#define IAC_ISR4_IAF134               IAC_ISR4_IAF134_Msk
#define IAC_ISR4_IAF135_Pos           (7U)
#define IAC_ISR4_IAF135_Msk           (0x1U << IAC_ISR4_IAF135_Pos)             /*!< 0x00000080 */
#define IAC_ISR4_IAF135               IAC_ISR4_IAF135_Msk
#define IAC_ISR4_IAF136_Pos           (8U)
#define IAC_ISR4_IAF136_Msk           (0x1U << IAC_ISR4_IAF136_Pos)             /*!< 0x00000100 */
#define IAC_ISR4_IAF136               IAC_ISR4_IAF136_Msk
#define IAC_ISR4_IAF137_Pos           (9U)
#define IAC_ISR4_IAF137_Msk           (0x1U << IAC_ISR4_IAF137_Pos)             /*!< 0x00000200 */
#define IAC_ISR4_IAF137               IAC_ISR4_IAF137_Msk
#define IAC_ISR4_IAF138_Pos           (10U)
#define IAC_ISR4_IAF138_Msk           (0x1U << IAC_ISR4_IAF138_Pos)             /*!< 0x00000400 */
#define IAC_ISR4_IAF138               IAC_ISR4_IAF138_Msk
#define IAC_ISR4_IAF139_Pos           (11U)
#define IAC_ISR4_IAF139_Msk           (0x1U << IAC_ISR4_IAF139_Pos)             /*!< 0x00000800 */
#define IAC_ISR4_IAF139               IAC_ISR4_IAF139_Msk
#define IAC_ISR4_IAF140_Pos           (12U)
#define IAC_ISR4_IAF140_Msk           (0x1U << IAC_ISR4_IAF140_Pos)             /*!< 0x00001000 */
#define IAC_ISR4_IAF140               IAC_ISR4_IAF140_Msk
#define IAC_ISR4_IAF141_Pos           (13U)
#define IAC_ISR4_IAF141_Msk           (0x1U << IAC_ISR4_IAF141_Pos)             /*!< 0x00002000 */
#define IAC_ISR4_IAF141               IAC_ISR4_IAF141_Msk
#define IAC_ISR4_IAF142_Pos           (14U)
#define IAC_ISR4_IAF142_Msk           (0x1U << IAC_ISR4_IAF142_Pos)             /*!< 0x00004000 */
#define IAC_ISR4_IAF142               IAC_ISR4_IAF142_Msk
#define IAC_ISR4_IAF143_Pos           (15U)
#define IAC_ISR4_IAF143_Msk           (0x1U << IAC_ISR4_IAF143_Pos)             /*!< 0x00008000 */
#define IAC_ISR4_IAF143               IAC_ISR4_IAF143_Msk
#define IAC_ISR4_IAF144_Pos           (16U)
#define IAC_ISR4_IAF144_Msk           (0x1U << IAC_ISR4_IAF144_Pos)             /*!< 0x00010000 */
#define IAC_ISR4_IAF144               IAC_ISR4_IAF144_Msk
#define IAC_ISR4_IAF145_Pos           (17U)
#define IAC_ISR4_IAF145_Msk           (0x1U << IAC_ISR4_IAF145_Pos)             /*!< 0x00020000 */
#define IAC_ISR4_IAF145               IAC_ISR4_IAF145_Msk
#define IAC_ISR4_IAF146_Pos           (18U)
#define IAC_ISR4_IAF146_Msk           (0x1U << IAC_ISR4_IAF146_Pos)             /*!< 0x00040000 */
#define IAC_ISR4_IAF146               IAC_ISR4_IAF146_Msk
#define IAC_ISR4_IAF147_Pos           (19U)
#define IAC_ISR4_IAF147_Msk           (0x1U << IAC_ISR4_IAF147_Pos)             /*!< 0x00080000 */
#define IAC_ISR4_IAF147               IAC_ISR4_IAF147_Msk
#define IAC_ISR4_IAF148_Pos           (20U)
#define IAC_ISR4_IAF148_Msk           (0x1U << IAC_ISR4_IAF148_Pos)             /*!< 0x00100000 */
#define IAC_ISR4_IAF148               IAC_ISR4_IAF148_Msk
#define IAC_ISR4_IAF149_Pos           (21U)
#define IAC_ISR4_IAF149_Msk           (0x1U << IAC_ISR4_IAF149_Pos)             /*!< 0x00200000 */
#define IAC_ISR4_IAF149               IAC_ISR4_IAF149_Msk
#define IAC_ISR4_IAF150_Pos           (22U)
#define IAC_ISR4_IAF150_Msk           (0x1U << IAC_ISR4_IAF150_Pos)             /*!< 0x00400000 */
#define IAC_ISR4_IAF150               IAC_ISR4_IAF150_Msk
#define IAC_ISR4_IAF151_Pos           (23U)
#define IAC_ISR4_IAF151_Msk           (0x1U << IAC_ISR4_IAF151_Pos)             /*!< 0x00800000 */
#define IAC_ISR4_IAF151               IAC_ISR4_IAF151_Msk
#define IAC_ISR4_IAF152_Pos           (24U)
#define IAC_ISR4_IAF152_Msk           (0x1U << IAC_ISR4_IAF152_Pos)             /*!< 0x01000000 */
#define IAC_ISR4_IAF152               IAC_ISR4_IAF152_Msk
#define IAC_ISR4_IAF153_Pos           (25U)
#define IAC_ISR4_IAF153_Msk           (0x1U << IAC_ISR4_IAF153_Pos)             /*!< 0x02000000 */
#define IAC_ISR4_IAF153               IAC_ISR4_IAF153_Msk
#define IAC_ISR4_IAF154_Pos           (26U)
#define IAC_ISR4_IAF154_Msk           (0x1U << IAC_ISR4_IAF154_Pos)             /*!< 0x04000000 */
#define IAC_ISR4_IAF154               IAC_ISR4_IAF154_Msk
#define IAC_ISR4_IAF155_Pos           (27U)
#define IAC_ISR4_IAF155_Msk           (0x1U << IAC_ISR4_IAF155_Pos)             /*!< 0x08000000 */
#define IAC_ISR4_IAF155               IAC_ISR4_IAF155_Msk
#define IAC_ISR4_IAF156_Pos           (28U)
#define IAC_ISR4_IAF156_Msk           (0x1U << IAC_ISR4_IAF156_Pos)             /*!< 0x10000000 */
#define IAC_ISR4_IAF156               IAC_ISR4_IAF156_Msk
#define IAC_ISR4_IAF157_Pos           (29U)
#define IAC_ISR4_IAF157_Msk           (0x1U << IAC_ISR4_IAF157_Pos)             /*!< 0x20000000 */
#define IAC_ISR4_IAF157               IAC_ISR4_IAF157_Msk
#define IAC_ISR4_IAF158_Pos           (30U)
#define IAC_ISR4_IAF158_Msk           (0x1U << IAC_ISR4_IAF158_Pos)             /*!< 0x40000000 */
#define IAC_ISR4_IAF158               IAC_ISR4_IAF158_Msk
#define IAC_ISR4_IAF159_Pos           (31U)
#define IAC_ISR4_IAF159_Msk           (0x1U << IAC_ISR4_IAF159_Pos)             /*!< 0x80000000 */
#define IAC_ISR4_IAF159               IAC_ISR4_IAF159_Msk

/*******************  Bits definition for IAC_ISR5 register *******************/
#define IAC_ISR5_IAF160_Pos           (0U)
#define IAC_ISR5_IAF160_Msk           (0x1U << IAC_ISR5_IAF160_Pos)             /*!< 0x00000001 */
#define IAC_ISR5_IAF160               IAC_ISR5_IAF160_Msk
#define IAC_ISR5_IAF161_Pos           (1U)
#define IAC_ISR5_IAF161_Msk           (0x1U << IAC_ISR5_IAF161_Pos)             /*!< 0x00000002 */
#define IAC_ISR5_IAF161               IAC_ISR5_IAF161_Msk
#define IAC_ISR5_IAF162_Pos           (2U)
#define IAC_ISR5_IAF162_Msk           (0x1U << IAC_ISR5_IAF162_Pos)             /*!< 0x00000004 */
#define IAC_ISR5_IAF162               IAC_ISR5_IAF162_Msk
#define IAC_ISR5_IAF163_Pos           (3U)
#define IAC_ISR5_IAF163_Msk           (0x1U << IAC_ISR5_IAF163_Pos)             /*!< 0x00000008 */
#define IAC_ISR5_IAF163               IAC_ISR5_IAF163_Msk
#define IAC_ISR5_IAF164_Pos           (4U)
#define IAC_ISR5_IAF164_Msk           (0x1U << IAC_ISR5_IAF164_Pos)             /*!< 0x00000010 */
#define IAC_ISR5_IAF164               IAC_ISR5_IAF164_Msk
#define IAC_ISR5_IAF165_Pos           (5U)
#define IAC_ISR5_IAF165_Msk           (0x1U << IAC_ISR5_IAF165_Pos)             /*!< 0x00000020 */
#define IAC_ISR5_IAF165               IAC_ISR5_IAF165_Msk
#define IAC_ISR5_IAF166_Pos           (6U)
#define IAC_ISR5_IAF166_Msk           (0x1U << IAC_ISR5_IAF166_Pos)             /*!< 0x00000040 */
#define IAC_ISR5_IAF166               IAC_ISR5_IAF166_Msk
#define IAC_ISR5_IAF167_Pos           (7U)
#define IAC_ISR5_IAF167_Msk           (0x1U << IAC_ISR5_IAF167_Pos)             /*!< 0x00000080 */
#define IAC_ISR5_IAF167               IAC_ISR5_IAF167_Msk
#define IAC_ISR5_IAF168_Pos           (8U)
#define IAC_ISR5_IAF168_Msk           (0x1U << IAC_ISR5_IAF168_Pos)             /*!< 0x00000100 */
#define IAC_ISR5_IAF168               IAC_ISR5_IAF168_Msk
#define IAC_ISR5_IAF169_Pos           (9U)
#define IAC_ISR5_IAF169_Msk           (0x1U << IAC_ISR5_IAF169_Pos)             /*!< 0x00000200 */
#define IAC_ISR5_IAF169               IAC_ISR5_IAF169_Msk
#define IAC_ISR5_IAF170_Pos           (10U)
#define IAC_ISR5_IAF170_Msk           (0x1U << IAC_ISR5_IAF170_Pos)             /*!< 0x00000400 */
#define IAC_ISR5_IAF170               IAC_ISR5_IAF170_Msk
#define IAC_ISR5_IAF171_Pos           (11U)
#define IAC_ISR5_IAF171_Msk           (0x1U << IAC_ISR5_IAF171_Pos)             /*!< 0x00000800 */
#define IAC_ISR5_IAF171               IAC_ISR5_IAF171_Msk
#define IAC_ISR5_IAF172_Pos           (12U)
#define IAC_ISR5_IAF172_Msk           (0x1U << IAC_ISR5_IAF172_Pos)             /*!< 0x00001000 */
#define IAC_ISR5_IAF172               IAC_ISR5_IAF172_Msk
#define IAC_ISR5_IAF173_Pos           (13U)
#define IAC_ISR5_IAF173_Msk           (0x1U << IAC_ISR5_IAF173_Pos)             /*!< 0x00002000 */
#define IAC_ISR5_IAF173               IAC_ISR5_IAF173_Msk
#define IAC_ISR5_IAF174_Pos           (14U)
#define IAC_ISR5_IAF174_Msk           (0x1U << IAC_ISR5_IAF174_Pos)             /*!< 0x00004000 */
#define IAC_ISR5_IAF174               IAC_ISR5_IAF174_Msk
#define IAC_ISR5_IAF175_Pos           (15U)
#define IAC_ISR5_IAF175_Msk           (0x1U << IAC_ISR5_IAF175_Pos)             /*!< 0x00008000 */
#define IAC_ISR5_IAF175               IAC_ISR5_IAF175_Msk
#define IAC_ISR5_IAF176_Pos           (16U)
#define IAC_ISR5_IAF176_Msk           (0x1U << IAC_ISR5_IAF176_Pos)             /*!< 0x00010000 */
#define IAC_ISR5_IAF176               IAC_ISR5_IAF176_Msk
#define IAC_ISR5_IAF177_Pos           (17U)
#define IAC_ISR5_IAF177_Msk           (0x1U << IAC_ISR5_IAF177_Pos)             /*!< 0x00020000 */
#define IAC_ISR5_IAF177               IAC_ISR5_IAF177_Msk
#define IAC_ISR5_IAF178_Pos           (18U)
#define IAC_ISR5_IAF178_Msk           (0x1U << IAC_ISR5_IAF178_Pos)             /*!< 0x00040000 */
#define IAC_ISR5_IAF178               IAC_ISR5_IAF178_Msk
#define IAC_ISR5_IAF179_Pos           (19U)
#define IAC_ISR5_IAF179_Msk           (0x1U << IAC_ISR5_IAF179_Pos)             /*!< 0x00080000 */
#define IAC_ISR5_IAF179               IAC_ISR5_IAF179_Msk
#define IAC_ISR5_IAF180_Pos           (20U)
#define IAC_ISR5_IAF180_Msk           (0x1U << IAC_ISR5_IAF180_Pos)             /*!< 0x00100000 */
#define IAC_ISR5_IAF180               IAC_ISR5_IAF180_Msk
#define IAC_ISR5_IAF181_Pos           (21U)
#define IAC_ISR5_IAF181_Msk           (0x1U << IAC_ISR5_IAF181_Pos)             /*!< 0x00200000 */
#define IAC_ISR5_IAF181               IAC_ISR5_IAF181_Msk
#define IAC_ISR5_IAF182_Pos           (22U)
#define IAC_ISR5_IAF182_Msk           (0x1U << IAC_ISR5_IAF182_Pos)             /*!< 0x00400000 */
#define IAC_ISR5_IAF182               IAC_ISR5_IAF182_Msk
#define IAC_ISR5_IAF183_Pos           (23U)
#define IAC_ISR5_IAF183_Msk           (0x1U << IAC_ISR5_IAF183_Pos)             /*!< 0x00800000 */
#define IAC_ISR5_IAF183               IAC_ISR5_IAF183_Msk
#define IAC_ISR5_IAF184_Pos           (24U)
#define IAC_ISR5_IAF184_Msk           (0x1U << IAC_ISR5_IAF184_Pos)             /*!< 0x01000000 */
#define IAC_ISR5_IAF184               IAC_ISR5_IAF184_Msk
#define IAC_ISR5_IAF185_Pos           (25U)
#define IAC_ISR5_IAF185_Msk           (0x1U << IAC_ISR5_IAF185_Pos)             /*!< 0x02000000 */
#define IAC_ISR5_IAF185               IAC_ISR5_IAF185_Msk
#define IAC_ISR5_IAF186_Pos           (26U)
#define IAC_ISR5_IAF186_Msk           (0x1U << IAC_ISR5_IAF186_Pos)             /*!< 0x04000000 */
#define IAC_ISR5_IAF186               IAC_ISR5_IAF186_Msk
#define IAC_ISR5_IAF187_Pos           (27U)
#define IAC_ISR5_IAF187_Msk           (0x1U << IAC_ISR5_IAF187_Pos)             /*!< 0x08000000 */
#define IAC_ISR5_IAF187               IAC_ISR5_IAF187_Msk
#define IAC_ISR5_IAF188_Pos           (28U)
#define IAC_ISR5_IAF188_Msk           (0x1U << IAC_ISR5_IAF188_Pos)             /*!< 0x10000000 */
#define IAC_ISR5_IAF188               IAC_ISR5_IAF188_Msk
#define IAC_ISR5_IAF189_Pos           (29U)
#define IAC_ISR5_IAF189_Msk           (0x1U << IAC_ISR5_IAF189_Pos)             /*!< 0x20000000 */
#define IAC_ISR5_IAF189               IAC_ISR5_IAF189_Msk
#define IAC_ISR5_IAF190_Pos           (30U)
#define IAC_ISR5_IAF190_Msk           (0x1U << IAC_ISR5_IAF190_Pos)             /*!< 0x40000000 */
#define IAC_ISR5_IAF190               IAC_ISR5_IAF190_Msk
#define IAC_ISR5_IAF191_Pos           (31U)
#define IAC_ISR5_IAF191_Msk           (0x1U << IAC_ISR5_IAF191_Pos)             /*!< 0x80000000 */
#define IAC_ISR5_IAF191               IAC_ISR5_IAF191_Msk

/*******************  Bits definition for IAC_ICR0 register *******************/
#define IAC_ICR0_IAF0_Pos             (0U)
#define IAC_ICR0_IAF0_Msk             (0x1U << IAC_ICR0_IAF0_Pos)               /*!< 0x00000001 */
#define IAC_ICR0_IAF0                 IAC_ICR0_IAF0_Msk
#define IAC_ICR0_IAF1_Pos             (1U)
#define IAC_ICR0_IAF1_Msk             (0x1U << IAC_ICR0_IAF1_Pos)               /*!< 0x00000002 */
#define IAC_ICR0_IAF1                 IAC_ICR0_IAF1_Msk
#define IAC_ICR0_IAF2_Pos             (2U)
#define IAC_ICR0_IAF2_Msk             (0x1U << IAC_ICR0_IAF2_Pos)               /*!< 0x00000004 */
#define IAC_ICR0_IAF2                 IAC_ICR0_IAF2_Msk
#define IAC_ICR0_IAF3_Pos             (3U)
#define IAC_ICR0_IAF3_Msk             (0x1U << IAC_ICR0_IAF3_Pos)               /*!< 0x00000008 */
#define IAC_ICR0_IAF3                 IAC_ICR0_IAF3_Msk
#define IAC_ICR0_IAF4_Pos             (4U)
#define IAC_ICR0_IAF4_Msk             (0x1U << IAC_ICR0_IAF4_Pos)               /*!< 0x00000010 */
#define IAC_ICR0_IAF4                 IAC_ICR0_IAF4_Msk
#define IAC_ICR0_IAF5_Pos             (5U)
#define IAC_ICR0_IAF5_Msk             (0x1U << IAC_ICR0_IAF5_Pos)               /*!< 0x00000020 */
#define IAC_ICR0_IAF5                 IAC_ICR0_IAF5_Msk
#define IAC_ICR0_IAF6_Pos             (6U)
#define IAC_ICR0_IAF6_Msk             (0x1U << IAC_ICR0_IAF6_Pos)               /*!< 0x00000040 */
#define IAC_ICR0_IAF6                 IAC_ICR0_IAF6_Msk
#define IAC_ICR0_IAF7_Pos             (7U)
#define IAC_ICR0_IAF7_Msk             (0x1U << IAC_ICR0_IAF7_Pos)               /*!< 0x00000080 */
#define IAC_ICR0_IAF7                 IAC_ICR0_IAF7_Msk
#define IAC_ICR0_IAF8_Pos             (8U)
#define IAC_ICR0_IAF8_Msk             (0x1U << IAC_ICR0_IAF8_Pos)               /*!< 0x00000100 */
#define IAC_ICR0_IAF8                 IAC_ICR0_IAF8_Msk
#define IAC_ICR0_IAF9_Pos             (9U)
#define IAC_ICR0_IAF9_Msk             (0x1U << IAC_ICR0_IAF9_Pos)               /*!< 0x00000200 */
#define IAC_ICR0_IAF9                 IAC_ICR0_IAF9_Msk
#define IAC_ICR0_IAF10_Pos            (10U)
#define IAC_ICR0_IAF10_Msk            (0x1U << IAC_ICR0_IAF10_Pos)              /*!< 0x00000400 */
#define IAC_ICR0_IAF10                IAC_ICR0_IAF10_Msk
#define IAC_ICR0_IAF11_Pos            (11U)
#define IAC_ICR0_IAF11_Msk            (0x1U << IAC_ICR0_IAF11_Pos)              /*!< 0x00000800 */
#define IAC_ICR0_IAF11                IAC_ICR0_IAF11_Msk
#define IAC_ICR0_IAF12_Pos            (12U)
#define IAC_ICR0_IAF12_Msk            (0x1U << IAC_ICR0_IAF12_Pos)              /*!< 0x00001000 */
#define IAC_ICR0_IAF12                IAC_ICR0_IAF12_Msk
#define IAC_ICR0_IAF13_Pos            (13U)
#define IAC_ICR0_IAF13_Msk            (0x1U << IAC_ICR0_IAF13_Pos)              /*!< 0x00002000 */
#define IAC_ICR0_IAF13                IAC_ICR0_IAF13_Msk
#define IAC_ICR0_IAF14_Pos            (14U)
#define IAC_ICR0_IAF14_Msk            (0x1U << IAC_ICR0_IAF14_Pos)              /*!< 0x00004000 */
#define IAC_ICR0_IAF14                IAC_ICR0_IAF14_Msk
#define IAC_ICR0_IAF15_Pos            (15U)
#define IAC_ICR0_IAF15_Msk            (0x1U << IAC_ICR0_IAF15_Pos)              /*!< 0x00008000 */
#define IAC_ICR0_IAF15                IAC_ICR0_IAF15_Msk
#define IAC_ICR0_IAF16_Pos            (16U)
#define IAC_ICR0_IAF16_Msk            (0x1U << IAC_ICR0_IAF16_Pos)              /*!< 0x00010000 */
#define IAC_ICR0_IAF16                IAC_ICR0_IAF16_Msk
#define IAC_ICR0_IAF17_Pos            (17U)
#define IAC_ICR0_IAF17_Msk            (0x1U << IAC_ICR0_IAF17_Pos)              /*!< 0x00020000 */
#define IAC_ICR0_IAF17                IAC_ICR0_IAF17_Msk
#define IAC_ICR0_IAF18_Pos            (18U)
#define IAC_ICR0_IAF18_Msk            (0x1U << IAC_ICR0_IAF18_Pos)              /*!< 0x00040000 */
#define IAC_ICR0_IAF18                IAC_ICR0_IAF18_Msk
#define IAC_ICR0_IAF19_Pos            (19U)
#define IAC_ICR0_IAF19_Msk            (0x1U << IAC_ICR0_IAF19_Pos)              /*!< 0x00080000 */
#define IAC_ICR0_IAF19                IAC_ICR0_IAF19_Msk
#define IAC_ICR0_IAF20_Pos            (20U)
#define IAC_ICR0_IAF20_Msk            (0x1U << IAC_ICR0_IAF20_Pos)              /*!< 0x00100000 */
#define IAC_ICR0_IAF20                IAC_ICR0_IAF20_Msk
#define IAC_ICR0_IAF21_Pos            (21U)
#define IAC_ICR0_IAF21_Msk            (0x1U << IAC_ICR0_IAF21_Pos)              /*!< 0x00200000 */
#define IAC_ICR0_IAF21                IAC_ICR0_IAF21_Msk
#define IAC_ICR0_IAF22_Pos            (22U)
#define IAC_ICR0_IAF22_Msk            (0x1U << IAC_ICR0_IAF22_Pos)              /*!< 0x00400000 */
#define IAC_ICR0_IAF22                IAC_ICR0_IAF22_Msk
#define IAC_ICR0_IAF23_Pos            (23U)
#define IAC_ICR0_IAF23_Msk            (0x1U << IAC_ICR0_IAF23_Pos)              /*!< 0x00800000 */
#define IAC_ICR0_IAF23                IAC_ICR0_IAF23_Msk
#define IAC_ICR0_IAF24_Pos            (24U)
#define IAC_ICR0_IAF24_Msk            (0x1U << IAC_ICR0_IAF24_Pos)              /*!< 0x01000000 */
#define IAC_ICR0_IAF24                IAC_ICR0_IAF24_Msk
#define IAC_ICR0_IAF25_Pos            (25U)
#define IAC_ICR0_IAF25_Msk            (0x1U << IAC_ICR0_IAF25_Pos)              /*!< 0x02000000 */
#define IAC_ICR0_IAF25                IAC_ICR0_IAF25_Msk
#define IAC_ICR0_IAF26_Pos            (26U)
#define IAC_ICR0_IAF26_Msk            (0x1U << IAC_ICR0_IAF26_Pos)              /*!< 0x04000000 */
#define IAC_ICR0_IAF26                IAC_ICR0_IAF26_Msk
#define IAC_ICR0_IAF27_Pos            (27U)
#define IAC_ICR0_IAF27_Msk            (0x1U << IAC_ICR0_IAF27_Pos)              /*!< 0x08000000 */
#define IAC_ICR0_IAF27                IAC_ICR0_IAF27_Msk
#define IAC_ICR0_IAF28_Pos            (28U)
#define IAC_ICR0_IAF28_Msk            (0x1U << IAC_ICR0_IAF28_Pos)              /*!< 0x10000000 */
#define IAC_ICR0_IAF28                IAC_ICR0_IAF28_Msk
#define IAC_ICR0_IAF29_Pos            (29U)
#define IAC_ICR0_IAF29_Msk            (0x1U << IAC_ICR0_IAF29_Pos)              /*!< 0x20000000 */
#define IAC_ICR0_IAF29                IAC_ICR0_IAF29_Msk
#define IAC_ICR0_IAF30_Pos            (30U)
#define IAC_ICR0_IAF30_Msk            (0x1U << IAC_ICR0_IAF30_Pos)              /*!< 0x40000000 */
#define IAC_ICR0_IAF30                IAC_ICR0_IAF30_Msk
#define IAC_ICR0_IAF31_Pos            (31U)
#define IAC_ICR0_IAF31_Msk            (0x1U << IAC_ICR0_IAF31_Pos)              /*!< 0x80000000 */
#define IAC_ICR0_IAF31                IAC_ICR0_IAF31_Msk

/*******************  Bits definition for IAC_ICR1 register *******************/
#define IAC_ICR1_IAF32_Pos            (0U)
#define IAC_ICR1_IAF32_Msk            (0x1U << IAC_ICR1_IAF32_Pos)              /*!< 0x00000001 */
#define IAC_ICR1_IAF32                IAC_ICR1_IAF32_Msk
#define IAC_ICR1_IAF33_Pos            (1U)
#define IAC_ICR1_IAF33_Msk            (0x1U << IAC_ICR1_IAF33_Pos)              /*!< 0x00000002 */
#define IAC_ICR1_IAF33                IAC_ICR1_IAF33_Msk
#define IAC_ICR1_IAF34_Pos            (2U)
#define IAC_ICR1_IAF34_Msk            (0x1U << IAC_ICR1_IAF34_Pos)              /*!< 0x00000004 */
#define IAC_ICR1_IAF34                IAC_ICR1_IAF34_Msk
#define IAC_ICR1_IAF35_Pos            (3U)
#define IAC_ICR1_IAF35_Msk            (0x1U << IAC_ICR1_IAF35_Pos)              /*!< 0x00000008 */
#define IAC_ICR1_IAF35                IAC_ICR1_IAF35_Msk
#define IAC_ICR1_IAF36_Pos            (4U)
#define IAC_ICR1_IAF36_Msk            (0x1U << IAC_ICR1_IAF36_Pos)              /*!< 0x00000010 */
#define IAC_ICR1_IAF36                IAC_ICR1_IAF36_Msk
#define IAC_ICR1_IAF37_Pos            (5U)
#define IAC_ICR1_IAF37_Msk            (0x1U << IAC_ICR1_IAF37_Pos)              /*!< 0x00000020 */
#define IAC_ICR1_IAF37                IAC_ICR1_IAF37_Msk
#define IAC_ICR1_IAF38_Pos            (6U)
#define IAC_ICR1_IAF38_Msk            (0x1U << IAC_ICR1_IAF38_Pos)              /*!< 0x00000040 */
#define IAC_ICR1_IAF38                IAC_ICR1_IAF38_Msk
#define IAC_ICR1_IAF39_Pos            (7U)
#define IAC_ICR1_IAF39_Msk            (0x1U << IAC_ICR1_IAF39_Pos)              /*!< 0x00000080 */
#define IAC_ICR1_IAF39                IAC_ICR1_IAF39_Msk
#define IAC_ICR1_IAF40_Pos            (8U)
#define IAC_ICR1_IAF40_Msk            (0x1U << IAC_ICR1_IAF40_Pos)              /*!< 0x00000100 */
#define IAC_ICR1_IAF40                IAC_ICR1_IAF40_Msk
#define IAC_ICR1_IAF41_Pos            (9U)
#define IAC_ICR1_IAF41_Msk            (0x1U << IAC_ICR1_IAF41_Pos)              /*!< 0x00000200 */
#define IAC_ICR1_IAF41                IAC_ICR1_IAF41_Msk
#define IAC_ICR1_IAF42_Pos            (10U)
#define IAC_ICR1_IAF42_Msk            (0x1U << IAC_ICR1_IAF42_Pos)              /*!< 0x00000400 */
#define IAC_ICR1_IAF42                IAC_ICR1_IAF42_Msk
#define IAC_ICR1_IAF43_Pos            (11U)
#define IAC_ICR1_IAF43_Msk            (0x1U << IAC_ICR1_IAF43_Pos)              /*!< 0x00000800 */
#define IAC_ICR1_IAF43                IAC_ICR1_IAF43_Msk
#define IAC_ICR1_IAF44_Pos            (12U)
#define IAC_ICR1_IAF44_Msk            (0x1U << IAC_ICR1_IAF44_Pos)              /*!< 0x00001000 */
#define IAC_ICR1_IAF44                IAC_ICR1_IAF44_Msk
#define IAC_ICR1_IAF45_Pos            (13U)
#define IAC_ICR1_IAF45_Msk            (0x1U << IAC_ICR1_IAF45_Pos)              /*!< 0x00002000 */
#define IAC_ICR1_IAF45                IAC_ICR1_IAF45_Msk
#define IAC_ICR1_IAF46_Pos            (14U)
#define IAC_ICR1_IAF46_Msk            (0x1U << IAC_ICR1_IAF46_Pos)              /*!< 0x00004000 */
#define IAC_ICR1_IAF46                IAC_ICR1_IAF46_Msk
#define IAC_ICR1_IAF47_Pos            (15U)
#define IAC_ICR1_IAF47_Msk            (0x1U << IAC_ICR1_IAF47_Pos)              /*!< 0x00008000 */
#define IAC_ICR1_IAF47                IAC_ICR1_IAF47_Msk
#define IAC_ICR1_IAF48_Pos            (16U)
#define IAC_ICR1_IAF48_Msk            (0x1U << IAC_ICR1_IAF48_Pos)              /*!< 0x00010000 */
#define IAC_ICR1_IAF48                IAC_ICR1_IAF48_Msk
#define IAC_ICR1_IAF49_Pos            (17U)
#define IAC_ICR1_IAF49_Msk            (0x1U << IAC_ICR1_IAF49_Pos)              /*!< 0x00020000 */
#define IAC_ICR1_IAF49                IAC_ICR1_IAF49_Msk
#define IAC_ICR1_IAF50_Pos            (18U)
#define IAC_ICR1_IAF50_Msk            (0x1U << IAC_ICR1_IAF50_Pos)              /*!< 0x00040000 */
#define IAC_ICR1_IAF50                IAC_ICR1_IAF50_Msk
#define IAC_ICR1_IAF51_Pos            (19U)
#define IAC_ICR1_IAF51_Msk            (0x1U << IAC_ICR1_IAF51_Pos)              /*!< 0x00080000 */
#define IAC_ICR1_IAF51                IAC_ICR1_IAF51_Msk
#define IAC_ICR1_IAF52_Pos            (20U)
#define IAC_ICR1_IAF52_Msk            (0x1U << IAC_ICR1_IAF52_Pos)              /*!< 0x00100000 */
#define IAC_ICR1_IAF52                IAC_ICR1_IAF52_Msk
#define IAC_ICR1_IAF53_Pos            (21U)
#define IAC_ICR1_IAF53_Msk            (0x1U << IAC_ICR1_IAF53_Pos)              /*!< 0x00200000 */
#define IAC_ICR1_IAF53                IAC_ICR1_IAF53_Msk
#define IAC_ICR1_IAF54_Pos            (22U)
#define IAC_ICR1_IAF54_Msk            (0x1U << IAC_ICR1_IAF54_Pos)              /*!< 0x00400000 */
#define IAC_ICR1_IAF54                IAC_ICR1_IAF54_Msk
#define IAC_ICR1_IAF55_Pos            (23U)
#define IAC_ICR1_IAF55_Msk            (0x1U << IAC_ICR1_IAF55_Pos)              /*!< 0x00800000 */
#define IAC_ICR1_IAF55                IAC_ICR1_IAF55_Msk
#define IAC_ICR1_IAF56_Pos            (24U)
#define IAC_ICR1_IAF56_Msk            (0x1U << IAC_ICR1_IAF56_Pos)              /*!< 0x01000000 */
#define IAC_ICR1_IAF56                IAC_ICR1_IAF56_Msk
#define IAC_ICR1_IAF57_Pos            (25U)
#define IAC_ICR1_IAF57_Msk            (0x1U << IAC_ICR1_IAF57_Pos)              /*!< 0x02000000 */
#define IAC_ICR1_IAF57                IAC_ICR1_IAF57_Msk
#define IAC_ICR1_IAF58_Pos            (26U)
#define IAC_ICR1_IAF58_Msk            (0x1U << IAC_ICR1_IAF58_Pos)              /*!< 0x04000000 */
#define IAC_ICR1_IAF58                IAC_ICR1_IAF58_Msk
#define IAC_ICR1_IAF59_Pos            (27U)
#define IAC_ICR1_IAF59_Msk            (0x1U << IAC_ICR1_IAF59_Pos)              /*!< 0x08000000 */
#define IAC_ICR1_IAF59                IAC_ICR1_IAF59_Msk
#define IAC_ICR1_IAF60_Pos            (28U)
#define IAC_ICR1_IAF60_Msk            (0x1U << IAC_ICR1_IAF60_Pos)              /*!< 0x10000000 */
#define IAC_ICR1_IAF60                IAC_ICR1_IAF60_Msk
#define IAC_ICR1_IAF61_Pos            (29U)
#define IAC_ICR1_IAF61_Msk            (0x1U << IAC_ICR1_IAF61_Pos)              /*!< 0x20000000 */
#define IAC_ICR1_IAF61                IAC_ICR1_IAF61_Msk
#define IAC_ICR1_IAF62_Pos            (30U)
#define IAC_ICR1_IAF62_Msk            (0x1U << IAC_ICR1_IAF62_Pos)              /*!< 0x40000000 */
#define IAC_ICR1_IAF62                IAC_ICR1_IAF62_Msk
#define IAC_ICR1_IAF63_Pos            (31U)
#define IAC_ICR1_IAF63_Msk            (0x1U << IAC_ICR1_IAF63_Pos)              /*!< 0x80000000 */
#define IAC_ICR1_IAF63                IAC_ICR1_IAF63_Msk

/*******************  Bits definition for IAC_ICR2 register *******************/
#define IAC_ICR2_IAF64_Pos            (0U)
#define IAC_ICR2_IAF64_Msk            (0x1U << IAC_ICR2_IAF64_Pos)              /*!< 0x00000001 */
#define IAC_ICR2_IAF64                IAC_ICR2_IAF64_Msk
#define IAC_ICR2_IAF65_Pos            (1U)
#define IAC_ICR2_IAF65_Msk            (0x1U << IAC_ICR2_IAF65_Pos)              /*!< 0x00000002 */
#define IAC_ICR2_IAF65                IAC_ICR2_IAF65_Msk
#define IAC_ICR2_IAF66_Pos            (2U)
#define IAC_ICR2_IAF66_Msk            (0x1U << IAC_ICR2_IAF66_Pos)              /*!< 0x00000004 */
#define IAC_ICR2_IAF66                IAC_ICR2_IAF66_Msk
#define IAC_ICR2_IAF67_Pos            (3U)
#define IAC_ICR2_IAF67_Msk            (0x1U << IAC_ICR2_IAF67_Pos)              /*!< 0x00000008 */
#define IAC_ICR2_IAF67                IAC_ICR2_IAF67_Msk
#define IAC_ICR2_IAF68_Pos            (4U)
#define IAC_ICR2_IAF68_Msk            (0x1U << IAC_ICR2_IAF68_Pos)              /*!< 0x00000010 */
#define IAC_ICR2_IAF68                IAC_ICR2_IAF68_Msk
#define IAC_ICR2_IAF69_Pos            (5U)
#define IAC_ICR2_IAF69_Msk            (0x1U << IAC_ICR2_IAF69_Pos)              /*!< 0x00000020 */
#define IAC_ICR2_IAF69                IAC_ICR2_IAF69_Msk
#define IAC_ICR2_IAF70_Pos            (6U)
#define IAC_ICR2_IAF70_Msk            (0x1U << IAC_ICR2_IAF70_Pos)              /*!< 0x00000040 */
#define IAC_ICR2_IAF70                IAC_ICR2_IAF70_Msk
#define IAC_ICR2_IAF71_Pos            (7U)
#define IAC_ICR2_IAF71_Msk            (0x1U << IAC_ICR2_IAF71_Pos)              /*!< 0x00000080 */
#define IAC_ICR2_IAF71                 IAC_ICR2_IAF71_Msk
#define IAC_ICR2_IAF72_Pos            (8U)
#define IAC_ICR2_IAF72_Msk            (0x1U << IAC_ICR2_IAF72_Pos)              /*!< 0x00000100 */
#define IAC_ICR2_IAF72                IAC_ICR2_IAF72_Msk
#define IAC_ICR2_IAF73_Pos            (9U)
#define IAC_ICR2_IAF73_Msk            (0x1U << IAC_ICR2_IAF73_Pos)              /*!< 0x00000200 */
#define IAC_ICR2_IAF73                IAC_ICR2_IAF73_Msk
#define IAC_ICR2_IAF74_Pos            (10U)
#define IAC_ICR2_IAF74_Msk            (0x1U << IAC_ICR2_IAF74_Pos)              /*!< 0x00000400 */
#define IAC_ICR2_IAF74                IAC_ICR2_IAF74_Msk
#define IAC_ICR2_IAF75_Pos            (11U)
#define IAC_ICR2_IAF75_Msk            (0x1U << IAC_ICR2_IAF75_Pos)              /*!< 0x00000800 */
#define IAC_ICR2_IAF75                IAC_ICR2_IAF75_Msk
#define IAC_ICR2_IAF76_Pos            (12U)
#define IAC_ICR2_IAF76_Msk            (0x1U << IAC_ICR2_IAF76_Pos)              /*!< 0x00001000 */
#define IAC_ICR2_IAF76                IAC_ICR2_IAF76_Msk
#define IAC_ICR2_IAF77_Pos            (13U)
#define IAC_ICR2_IAF77_Msk            (0x1U << IAC_ICR2_IAF77_Pos)              /*!< 0x00002000 */
#define IAC_ICR2_IAF77                IAC_ICR2_IAF77_Msk
#define IAC_ICR2_IAF78_Pos            (14U)
#define IAC_ICR2_IAF78_Msk            (0x1U << IAC_ICR2_IAF78_Pos)              /*!< 0x00004000 */
#define IAC_ICR2_IAF78                IAC_ICR2_IAF78_Msk
#define IAC_ICR2_IAF79_Pos            (15U)
#define IAC_ICR2_IAF79_Msk            (0x1U << IAC_ICR2_IAF79_Pos)              /*!< 0x00008000 */
#define IAC_ICR2_IAF79                IAC_ICR2_IAF79_Msk
#define IAC_ICR2_IAF80_Pos            (16U)
#define IAC_ICR2_IAF80_Msk            (0x1U << IAC_ICR2_IAF80_Pos)              /*!< 0x00010000 */
#define IAC_ICR2_IAF80                IAC_ICR2_IAF80_Msk
#define IAC_ICR2_IAF81_Pos            (17U)
#define IAC_ICR2_IAF81_Msk            (0x1U << IAC_ICR2_IAF81_Pos)              /*!< 0x00020000 */
#define IAC_ICR2_IAF81                IAC_ICR2_IAF81_Msk
#define IAC_ICR2_IAF82_Pos            (18U)
#define IAC_ICR2_IAF82_Msk            (0x1U << IAC_ICR2_IAF82_Pos)              /*!< 0x00040000 */
#define IAC_ICR2_IAF82                IAC_ICR2_IAF82_Msk
#define IAC_ICR2_IAF83_Pos            (19U)
#define IAC_ICR2_IAF83_Msk            (0x1U << IAC_ICR2_IAF83_Pos)              /*!< 0x00080000 */
#define IAC_ICR2_IAF83                IAC_ICR2_IAF83_Msk
#define IAC_ICR2_IAF84_Pos            (20U)
#define IAC_ICR2_IAF84_Msk            (0x1U << IAC_ICR2_IAF84_Pos)              /*!< 0x00100000 */
#define IAC_ICR2_IAF84                IAC_ICR2_IAF84_Msk
#define IAC_ICR2_IAF85_Pos            (21U)
#define IAC_ICR2_IAF85_Msk            (0x1U << IAC_ICR2_IAF85_Pos)              /*!< 0x00200000 */
#define IAC_ICR2_IAF85                IAC_ICR2_IAF85_Msk
#define IAC_ICR2_IAF86_Pos            (22U)
#define IAC_ICR2_IAF86_Msk            (0x1U << IAC_ICR2_IAF86_Pos)              /*!< 0x00400000 */
#define IAC_ICR2_IAF86                IAC_ICR2_IAF86_Msk
#define IAC_ICR2_IAF87_Pos            (23U)
#define IAC_ICR2_IAF87_Msk            (0x1U << IAC_ICR2_IAF87_Pos)              /*!< 0x00800000 */
#define IAC_ICR2_IAF87                IAC_ICR2_IAF87_Msk
#define IAC_ICR2_IAF88_Pos            (24U)
#define IAC_ICR2_IAF88_Msk            (0x1U << IAC_ICR2_IAF88_Pos)              /*!< 0x01000000 */
#define IAC_ICR2_IAF88                IAC_ICR2_IAF88_Msk
#define IAC_ICR2_IAF89_Pos            (25U)
#define IAC_ICR2_IAF89_Msk            (0x1U << IAC_ICR2_IAF89_Pos)              /*!< 0x02000000 */
#define IAC_ICR2_IAF89                IAC_ICR2_IAF89_Msk
#define IAC_ICR2_IAF90_Pos            (26U)
#define IAC_ICR2_IAF90_Msk            (0x1U << IAC_ICR2_IAF90_Pos)              /*!< 0x04000000 */
#define IAC_ICR2_IAF90                IAC_ICR2_IAF90_Msk
#define IAC_ICR2_IAF91_Pos            (27U)
#define IAC_ICR2_IAF91_Msk            (0x1U << IAC_ICR2_IAF91_Pos)              /*!< 0x08000000 */
#define IAC_ICR2_IAF91                IAC_ICR2_IAF91_Msk
#define IAC_ICR2_IAF92_Pos            (28U)
#define IAC_ICR2_IAF92_Msk            (0x1U << IAC_ICR2_IAF92_Pos)              /*!< 0x10000000 */
#define IAC_ICR2_IAF92                IAC_ICR2_IAF92_Msk
#define IAC_ICR2_IAF93_Pos            (29U)
#define IAC_ICR2_IAF93_Msk            (0x1U << IAC_ICR2_IAF93_Pos)              /*!< 0x20000000 */
#define IAC_ICR2_IAF93                IAC_ICR2_IAF93_Msk
#define IAC_ICR2_IAF94_Pos            (30U)
#define IAC_ICR2_IAF94_Msk            (0x1U << IAC_ICR2_IAF94_Pos)              /*!< 0x40000000 */
#define IAC_ICR2_IAF94                IAC_ICR2_IAF94_Msk
#define IAC_ICR2_IAF95_Pos            (31U)
#define IAC_ICR2_IAF95_Msk            (0x1U << IAC_ICR2_IAF95_Pos)              /*!< 0x80000000 */
#define IAC_ICR2_IAF95                IAC_ICR2_IAF95_Msk

/*******************  Bits definition for IAC_ICR3 register *******************/
#define IAC_ICR3_IAF96_Pos            (0U)
#define IAC_ICR3_IAF96_Msk            (0x1U << IAC_ICR3_IAF96_Pos)              /*!< 0x00000001 */
#define IAC_ICR3_IAF96                IAC_ICR3_IAF0_Msk
#define IAC_ICR3_IAF97_Pos            (1U)
#define IAC_ICR3_IAF97_Msk            (0x1U << IAC_ICR3_IAF97_Pos)              /*!< 0x00000002 */
#define IAC_ICR3_IAF97                IAC_ICR3_IAF97_Msk
#define IAC_ICR3_IAF98_Pos            (2U)
#define IAC_ICR3_IAF98_Msk            (0x1U << IAC_ICR3_IAF98_Pos)              /*!< 0x00000004 */
#define IAC_ICR3_IAF98                IAC_ICR3_IAF98_Msk
#define IAC_ICR3_IAF99_Pos            (3U)
#define IAC_ICR3_IAF99_Msk            (0x1U << IAC_ICR3_IAF99_Pos)              /*!< 0x00000008 */
#define IAC_ICR3_IAF99                IAC_ICR3_IAF99_Msk
#define IAC_ICR3_IAF100_Pos           (4U)
#define IAC_ICR3_IAF100_Msk           (0x1U << IAC_ICR3_IAF100_Pos)             /*!< 0x00000010 */
#define IAC_ICR3_IAF100               IAC_ICR3_IAF100_Msk
#define IAC_ICR3_IAF101_Pos           (5U)
#define IAC_ICR3_IAF101_Msk           (0x1U << IAC_ICR3_IAF101_Pos)             /*!< 0x00000020 */
#define IAC_ICR3_IAF101               IAC_ICR3_IAF101_Msk
#define IAC_ICR3_IAF102_Pos           (6U)
#define IAC_ICR3_IAF102_Msk           (0x1U << IAC_ICR3_IAF102_Pos)             /*!< 0x00000040 */
#define IAC_ICR3_IAF102               IAC_ICR3_IAF102_Msk
#define IAC_ICR3_IAF103_Pos           (7U)
#define IAC_ICR3_IAF103_Msk           (0x1U << IAC_ICR3_IAF103_Pos)             /*!< 0x00000080 */
#define IAC_ICR3_IAF103               IAC_ICR3_IAF103_Msk
#define IAC_ICR3_IAF104_Pos           (8U)
#define IAC_ICR3_IAF104_Msk           (0x1U << IAC_ICR3_IAF104_Pos)             /*!< 0x00000100 */
#define IAC_ICR3_IAF104               IAC_ICR3_IAF104_Msk
#define IAC_ICR3_IAF105_Pos           (9U)
#define IAC_ICR3_IAF105_Msk           (0x1U << IAC_ICR3_IAF105_Pos)             /*!< 0x00000200 */
#define IAC_ICR3_IAF105               IAC_ICR3_IAF105_Msk
#define IAC_ICR3_IAF106_Pos           (10U)
#define IAC_ICR3_IAF106_Msk           (0x1U << IAC_ICR3_IAF106_Pos)             /*!< 0x00000400 */
#define IAC_ICR3_IAF106               IAC_ICR3_IAF106_Msk
#define IAC_ICR3_IAF107_Pos           (11U)
#define IAC_ICR3_IAF107_Msk           (0x1U << IAC_ICR3_IAF107_Pos)             /*!< 0x00000800 */
#define IAC_ICR3_IAF107               IAC_ICR3_IAF107_Msk
#define IAC_ICR3_IAF108_Pos           (12U)
#define IAC_ICR3_IAF108_Msk           (0x1U << IAC_ICR3_IAF108_Pos)             /*!< 0x00001000 */
#define IAC_ICR3_IAF108               IAC_ICR3_IAF108_Msk
#define IAC_ICR3_IAF109_Pos           (13U)
#define IAC_ICR3_IAF109_Msk           (0x1U << IAC_ICR3_IAF109_Pos)             /*!< 0x00002000 */
#define IAC_ICR3_IAF109               IAC_ICR3_IAF109_Msk
#define IAC_ICR3_IAF110_Pos           (14U)
#define IAC_ICR3_IAF110_Msk           (0x1U << IAC_ICR3_IAF110_Pos)             /*!< 0x00004000 */
#define IAC_ICR3_IAF110               IAC_ICR3_IAF110_Msk
#define IAC_ICR3_IAF111_Pos           (15U)
#define IAC_ICR3_IAF111_Msk           (0x1U << IAC_ICR3_IAF111_Pos)             /*!< 0x00008000 */
#define IAC_ICR3_IAF111               IAC_ICR3_IAF111_Msk
#define IAC_ICR3_IAF112_Pos           (16U)
#define IAC_ICR3_IAF112_Msk           (0x1U << IAC_ICR3_IAF112_Pos)             /*!< 0x00010000 */
#define IAC_ICR3_IAF112               IAC_ICR3_IAF112_Msk
#define IAC_ICR3_IAF113_Pos           (17U)
#define IAC_ICR3_IAF113_Msk           (0x1U << IAC_ICR3_IAF113_Pos)             /*!< 0x00020000 */
#define IAC_ICR3_IAF113               IAC_ICR3_IAF113_Msk
#define IAC_ICR3_IAF114_Pos           (18U)
#define IAC_ICR3_IAF114_Msk           (0x1U << IAC_ICR3_IAF114_Pos)             /*!< 0x00040000 */
#define IAC_ICR3_IAF114               IAC_ICR3_IAF114_Msk
#define IAC_ICR3_IAF115_Pos           (19U)
#define IAC_ICR3_IAF115_Msk           (0x1U << IAC_ICR3_IAF115_Pos)             /*!< 0x00080000 */
#define IAC_ICR3_IAF115               IAC_ICR3_IAF115_Msk
#define IAC_ICR3_IAF116_Pos           (20U)
#define IAC_ICR3_IAF116_Msk           (0x1U << IAC_ICR3_IAF116_Pos)             /*!< 0x00100000 */
#define IAC_ICR3_IAF116               IAC_ICR3_IAF116_Msk
#define IAC_ICR3_IAF117_Pos           (21U)
#define IAC_ICR3_IAF117_Msk           (0x1U << IAC_ICR3_IAF117_Pos)             /*!< 0x00200000 */
#define IAC_ICR3_IAF117               IAC_ICR3_IAF117_Msk
#define IAC_ICR3_IAF118_Pos           (22U)
#define IAC_ICR3_IAF118_Msk           (0x1U << IAC_ICR3_IAF118_Pos)             /*!< 0x00400000 */
#define IAC_ICR3_IAF118               IAC_ICR3_IAF118_Msk
#define IAC_ICR3_IAF119_Pos           (23U)
#define IAC_ICR3_IAF119_Msk           (0x1U << IAC_ICR3_IAF119_Pos)             /*!< 0x00800000 */
#define IAC_ICR3_IAF119               IAC_ICR3_IAF119_Msk
#define IAC_ICR3_IAF120_Pos           (24U)
#define IAC_ICR3_IAF120_Msk           (0x1U << IAC_ICR3_IAF120_Pos)             /*!< 0x01000000 */
#define IAC_ICR3_IAF120               IAC_ICR3_IAF120_Msk
#define IAC_ICR3_IAF121_Pos           (25U)
#define IAC_ICR3_IAF121_Msk           (0x1U << IAC_ICR3_IAF121_Pos)             /*!< 0x02000000 */
#define IAC_ICR3_IAF121               IAC_ICR3_IAF121_Msk
#define IAC_ICR3_IAF122_Pos           (26U)
#define IAC_ICR3_IAF122_Msk           (0x1U << IAC_ICR3_IAF122_Pos)             /*!< 0x04000000 */
#define IAC_ICR3_IAF122               IAC_ICR3_IAF122_Msk
#define IAC_ICR3_IAF123_Pos           (27U)
#define IAC_ICR3_IAF123_Msk           (0x1U << IAC_ICR3_IAF123_Pos)             /*!< 0x08000000 */
#define IAC_ICR3_IAF123               IAC_ICR3_IAF123_Msk
#define IAC_ICR3_IAF124_Pos           (28U)
#define IAC_ICR3_IAF124_Msk           (0x1U << IAC_ICR3_IAF124_Pos)             /*!< 0x10000000 */
#define IAC_ICR3_IAF124               IAC_ICR3_IAF124_Msk
#define IAC_ICR3_IAF125_Pos           (29U)
#define IAC_ICR3_IAF125_Msk           (0x1U << IAC_ICR3_IAF125_Pos)             /*!< 0x20000000 */
#define IAC_ICR3_IAF125               IAC_ICR3_IAF125_Msk
#define IAC_ICR3_IAF126_Pos           (30U)
#define IAC_ICR3_IAF126_Msk           (0x1U << IAC_ICR3_IAF126_Pos)             /*!< 0x40000000 */
#define IAC_ICR3_IAF126               IAC_ICR3_IAF126_Msk
#define IAC_ICR3_IAF127_Pos           (31U)
#define IAC_ICR3_IAF127_Msk           (0x1U << IAC_ICR3_IAF127_Pos)             /*!< 0x80000000 */
#define IAC_ICR3_IAF127               IAC_ICR3_IAF127_Msk

/*******************  Bits definition for IAC_ICR4 register *******************/
#define IAC_ICR4_IAF128_Pos           (0U)
#define IAC_ICR4_IAF128_Msk           (0x1U << IAC_ICR4_IAF128_Pos)             /*!< 0x00000001 */
#define IAC_ICR4_IAF128               IAC_ICR4_IAF128_Msk
#define IAC_ICR4_IAF129_Pos           (1U)
#define IAC_ICR4_IAF129_Msk           (0x1U << IAC_ICR4_IAF129_Pos)             /*!< 0x00000002 */
#define IAC_ICR4_IAF129               IAC_ICR4_IAF129_Msk
#define IAC_ICR4_IAF130_Pos           (2U)
#define IAC_ICR4_IAF130_Msk           (0x1U << IAC_ICR4_IAF130_Pos)             /*!< 0x00000004 */
#define IAC_ICR4_IAF130               IAC_ICR4_IAF130_Msk
#define IAC_ICR4_IAF131_Pos           (3U)
#define IAC_ICR4_IAF131_Msk           (0x1U << IAC_ICR4_IAF131_Pos)             /*!< 0x00000008 */
#define IAC_ICR4_IAF131               IAC_ICR4_IAF131_Msk
#define IAC_ICR4_IAF132_Pos           (4U)
#define IAC_ICR4_IAF132_Msk           (0x1U << IAC_ICR4_IAF132_Pos)             /*!< 0x00000010 */
#define IAC_ICR4_IAF132               IAC_ICR4_IAF132_Msk
#define IAC_ICR4_IAF133_Pos           (5U)
#define IAC_ICR4_IAF133_Msk           (0x1U << IAC_ICR4_IAF133_Pos)             /*!< 0x00000020 */
#define IAC_ICR4_IAF133               IAC_ICR4_IAF133_Msk
#define IAC_ICR4_IAF134_Pos           (6U)
#define IAC_ICR4_IAF134_Msk           (0x1U << IAC_ICR4_IAF134_Pos)             /*!< 0x00000040 */
#define IAC_ICR4_IAF134               IAC_ICR4_IAF134_Msk
#define IAC_ICR4_IAF135_Pos           (7U)
#define IAC_ICR4_IAF135_Msk           (0x1U << IAC_ICR4_IAF135_Pos)             /*!< 0x00000080 */
#define IAC_ICR4_IAF135               IAC_ICR4_IAF135_Msk
#define IAC_ICR4_IAF136_Pos           (8U)
#define IAC_ICR4_IAF136_Msk           (0x1U << IAC_ICR4_IAF136_Pos)             /*!< 0x00000100 */
#define IAC_ICR4_IAF136               IAC_ICR4_IAF136_Msk
#define IAC_ICR4_IAF137_Pos           (9U)
#define IAC_ICR4_IAF137_Msk           (0x1U << IAC_ICR4_IAF137_Pos)             /*!< 0x00000200 */
#define IAC_ICR4_IAF137               IAC_ICR4_IAF137_Msk
#define IAC_ICR4_IAF138_Pos           (10U)
#define IAC_ICR4_IAF138_Msk           (0x1U << IAC_ICR4_IAF138_Pos)             /*!< 0x00000400 */
#define IAC_ICR4_IAF138               IAC_ICR4_IAF138_Msk
#define IAC_ICR4_IAF139_Pos           (11U)
#define IAC_ICR4_IAF139_Msk           (0x1U << IAC_ICR4_IAF139_Pos)             /*!< 0x00000800 */
#define IAC_ICR4_IAF139               IAC_ICR4_IAF139_Msk
#define IAC_ICR4_IAF140_Pos           (12U)
#define IAC_ICR4_IAF140_Msk           (0x1U << IAC_ICR4_IAF140_Pos)             /*!< 0x00001000 */
#define IAC_ICR4_IAF140               IAC_ICR4_IAF140_Msk
#define IAC_ICR4_IAF141_Pos           (13U)
#define IAC_ICR4_IAF141_Msk           (0x1U << IAC_ICR4_IAF141_Pos)             /*!< 0x00002000 */
#define IAC_ICR4_IAF141               IAC_ICR4_IAF141_Msk
#define IAC_ICR4_IAF142_Pos           (14U)
#define IAC_ICR4_IAF142_Msk           (0x1U << IAC_ICR4_IAF142_Pos)             /*!< 0x00004000 */
#define IAC_ICR4_IAF142               IAC_ICR4_IAF142_Msk
#define IAC_ICR4_IAF143_Pos           (15U)
#define IAC_ICR4_IAF143_Msk           (0x1U << IAC_ICR4_IAF143_Pos)             /*!< 0x00008000 */
#define IAC_ICR4_IAF143               IAC_ICR4_IAF143_Msk
#define IAC_ICR4_IAF144_Pos           (16U)
#define IAC_ICR4_IAF144_Msk           (0x1U << IAC_ICR4_IAF144_Pos)             /*!< 0x00010000 */
#define IAC_ICR4_IAF144               IAC_ICR4_IAF144_Msk
#define IAC_ICR4_IAF145_Pos           (17U)
#define IAC_ICR4_IAF145_Msk           (0x1U << IAC_ICR4_IAF145_Pos)             /*!< 0x00020000 */
#define IAC_ICR4_IAF145               IAC_ICR4_IAF145_Msk
#define IAC_ICR4_IAF146_Pos           (18U)
#define IAC_ICR4_IAF146_Msk           (0x1U << IAC_ICR4_IAF146_Pos)             /*!< 0x00040000 */
#define IAC_ICR4_IAF146               IAC_ICR4_IAF146_Msk
#define IAC_ICR4_IAF147_Pos           (19U)
#define IAC_ICR4_IAF147_Msk           (0x1U << IAC_ICR4_IAF147_Pos)             /*!< 0x00080000 */
#define IAC_ICR4_IAF147               IAC_ICR4_IAF147_Msk
#define IAC_ICR4_IAF148_Pos           (20U)
#define IAC_ICR4_IAF148_Msk           (0x1U << IAC_ICR4_IAF148_Pos)             /*!< 0x00100000 */
#define IAC_ICR4_IAF148               IAC_ICR4_IAF148_Msk
#define IAC_ICR4_IAF149_Pos           (21U)
#define IAC_ICR4_IAF149_Msk           (0x1U << IAC_ICR4_IAF149_Pos)             /*!< 0x00200000 */
#define IAC_ICR4_IAF149               IAC_ICR4_IAF149_Msk
#define IAC_ICR4_IAF150_Pos           (22U)
#define IAC_ICR4_IAF150_Msk           (0x1U << IAC_ICR4_IAF150_Pos)             /*!< 0x00400000 */
#define IAC_ICR4_IAF150               IAC_ICR4_IAF150_Msk
#define IAC_ICR4_IAF151_Pos           (23U)
#define IAC_ICR4_IAF151_Msk           (0x1U << IAC_ICR4_IAF151_Pos)             /*!< 0x00800000 */
#define IAC_ICR4_IAF151               IAC_ICR4_IAF151_Msk
#define IAC_ICR4_IAF152_Pos           (24U)
#define IAC_ICR4_IAF152_Msk           (0x1U << IAC_ICR4_IAF152_Pos)             /*!< 0x01000000 */
#define IAC_ICR4_IAF152               IAC_ICR4_IAF152_Msk
#define IAC_ICR4_IAF153_Pos           (25U)
#define IAC_ICR4_IAF153_Msk           (0x1U << IAC_ICR4_IAF153_Pos)             /*!< 0x02000000 */
#define IAC_ICR4_IAF153               IAC_ICR4_IAF153_Msk
#define IAC_ICR4_IAF154_Pos           (26U)
#define IAC_ICR4_IAF154_Msk           (0x1U << IAC_ICR4_IAF154_Pos)             /*!< 0x04000000 */
#define IAC_ICR4_IAF154               IAC_ICR4_IAF154_Msk
#define IAC_ICR4_IAF155_Pos           (27U)
#define IAC_ICR4_IAF155_Msk           (0x1U << IAC_ICR4_IAF155_Pos)             /*!< 0x08000000 */
#define IAC_ICR4_IAF155               IAC_ICR4_IAF155_Msk
#define IAC_ICR4_IAF156_Pos           (28U)
#define IAC_ICR4_IAF156_Msk           (0x1U << IAC_ICR4_IAF156_Pos)             /*!< 0x10000000 */
#define IAC_ICR4_IAF156               IAC_ICR4_IAF156_Msk
#define IAC_ICR4_IAF157_Pos           (29U)
#define IAC_ICR4_IAF157_Msk           (0x1U << IAC_ICR4_IAF157_Pos)             /*!< 0x20000000 */
#define IAC_ICR4_IAF157               IAC_ICR4_IAF157_Msk
#define IAC_ICR4_IAF158_Pos           (30U)
#define IAC_ICR4_IAF158_Msk           (0x1U << IAC_ICR4_IAF158_Pos)             /*!< 0x40000000 */
#define IAC_ICR4_IAF158               IAC_ICR4_IAF158_Msk
#define IAC_ICR4_IAF159_Pos           (31U)
#define IAC_ICR4_IAF159_Msk           (0x1U << IAC_ICR4_IAF159_Pos)             /*!< 0x80000000 */
#define IAC_ICR4_IAF159               IAC_ICR4_IAF159_Msk

/*******************  Bits definition for IAC_ICR5 register *******************/
#define IAC_ICR5_IAF160_Pos           (0U)
#define IAC_ICR5_IAF160_Msk           (0x1U << IAC_ICR5_IAF160_Pos)             /*!< 0x00000001 */
#define IAC_ICR5_IAF160               IAC_ICR5_IAF160_Msk
#define IAC_ICR5_IAF161_Pos           (1U)
#define IAC_ICR5_IAF161_Msk           (0x1U << IAC_ICR5_IAF161_Pos)             /*!< 0x00000002 */
#define IAC_ICR5_IAF161               IAC_ICR5_IAF161_Msk
#define IAC_ICR5_IAF162_Pos           (2U)
#define IAC_ICR5_IAF162_Msk           (0x1U << IAC_ICR5_IAF162_Pos)             /*!< 0x00000004 */
#define IAC_ICR5_IAF162               IAC_ICR5_IAF162_Msk
#define IAC_ICR5_IAF163_Pos           (3U)
#define IAC_ICR5_IAF163_Msk           (0x1U << IAC_ICR5_IAF163_Pos)             /*!< 0x00000008 */
#define IAC_ICR5_IAF163               IAC_ICR5_IAF163_Msk
#define IAC_ICR5_IAF164_Pos           (4U)
#define IAC_ICR5_IAF164_Msk           (0x1U << IAC_ICR5_IAF164_Pos)             /*!< 0x00000010 */
#define IAC_ICR5_IAF164               IAC_ICR5_IAF164_Msk
#define IAC_ICR5_IAF165_Pos           (5U)
#define IAC_ICR5_IAF165_Msk           (0x1U << IAC_ICR5_IAF165_Pos)             /*!< 0x00000020 */
#define IAC_ICR5_IAF165               IAC_ICR5_IAF165_Msk
#define IAC_ICR5_IAF166_Pos           (6U)
#define IAC_ICR5_IAF166_Msk           (0x1U << IAC_ICR5_IAF166_Pos)             /*!< 0x00000040 */
#define IAC_ICR5_IAF166               IAC_ICR5_IAF166_Msk
#define IAC_ICR5_IAF167_Pos           (7U)
#define IAC_ICR5_IAF167_Msk           (0x1U << IAC_ICR5_IAF167_Pos)             /*!< 0x00000080 */
#define IAC_ICR5_IAF167               IAC_ICR5_IAF167_Msk
#define IAC_ICR5_IAF168_Pos           (8U)
#define IAC_ICR5_IAF168_Msk           (0x1U << IAC_ICR5_IAF168_Pos)             /*!< 0x00000100 */
#define IAC_ICR5_IAF168               IAC_ICR5_IAF168_Msk
#define IAC_ICR5_IAF169_Pos           (9U)
#define IAC_ICR5_IAF169_Msk           (0x1U << IAC_ICR5_IAF169_Pos)             /*!< 0x00000200 */
#define IAC_ICR5_IAF169               IAC_ICR5_IAF169_Msk
#define IAC_ICR5_IAF170_Pos           (10U)
#define IAC_ICR5_IAF170_Msk           (0x1U << IAC_ICR5_IAF170_Pos)             /*!< 0x00000400 */
#define IAC_ICR5_IAF170               IAC_ICR5_IAF170_Msk
#define IAC_ICR5_IAF171_Pos           (11U)
#define IAC_ICR5_IAF171_Msk           (0x1U << IAC_ICR5_IAF171_Pos)             /*!< 0x00000800 */
#define IAC_ICR5_IAF171               IAC_ICR5_IAF171_Msk
#define IAC_ICR5_IAF172_Pos           (12U)
#define IAC_ICR5_IAF172_Msk           (0x1U << IAC_ICR5_IAF172_Pos)             /*!< 0x00001000 */
#define IAC_ICR5_IAF172               IAC_ICR5_IAF172_Msk
#define IAC_ICR5_IAF173_Pos           (13U)
#define IAC_ICR5_IAF173_Msk           (0x1U << IAC_ICR5_IAF173_Pos)             /*!< 0x00002000 */
#define IAC_ICR5_IAF173               IAC_ICR5_IAF173_Msk
#define IAC_ICR5_IAF174_Pos           (14U)
#define IAC_ICR5_IAF174_Msk           (0x1U << IAC_ICR5_IAF174_Pos)             /*!< 0x00004000 */
#define IAC_ICR5_IAF174               IAC_ICR5_IAF174_Msk
#define IAC_ICR5_IAF175_Pos           (15U)
#define IAC_ICR5_IAF175_Msk           (0x1U << IAC_ICR5_IAF175_Pos)             /*!< 0x00008000 */
#define IAC_ICR5_IAF175               IAC_ICR5_IAF175_Msk
#define IAC_ICR5_IAF176_Pos           (16U)
#define IAC_ICR5_IAF176_Msk           (0x1U << IAC_ICR5_IAF176_Pos)             /*!< 0x00010000 */
#define IAC_ICR5_IAF176               IAC_ICR5_IAF176_Msk
#define IAC_ICR5_IAF177_Pos           (17U)
#define IAC_ICR5_IAF177_Msk           (0x1U << IAC_ICR5_IAF177_Pos)             /*!< 0x00020000 */
#define IAC_ICR5_IAF177               IAC_ICR5_IAF177_Msk
#define IAC_ICR5_IAF178_Pos           (18U)
#define IAC_ICR5_IAF178_Msk           (0x1U << IAC_ICR5_IAF178_Pos)             /*!< 0x00040000 */
#define IAC_ICR5_IAF178               IAC_ICR5_IAF178_Msk
#define IAC_ICR5_IAF179_Pos           (19U)
#define IAC_ICR5_IAF179_Msk           (0x1U << IAC_ICR5_IAF179_Pos)             /*!< 0x00080000 */
#define IAC_ICR5_IAF179               IAC_ICR5_IAF179_Msk
#define IAC_ICR5_IAF180_Pos           (20U)
#define IAC_ICR5_IAF180_Msk           (0x1U << IAC_ICR5_IAF180_Pos)             /*!< 0x00100000 */
#define IAC_ICR5_IAF180               IAC_ICR5_IAF180_Msk
#define IAC_ICR5_IAF181_Pos           (21U)
#define IAC_ICR5_IAF181_Msk           (0x1U << IAC_ICR5_IAF181_Pos)             /*!< 0x00200000 */
#define IAC_ICR5_IAF181               IAC_ICR5_IAF181_Msk
#define IAC_ICR5_IAF182_Pos           (22U)
#define IAC_ICR5_IAF182_Msk           (0x1U << IAC_ICR5_IAF182_Pos)             /*!< 0x00400000 */
#define IAC_ICR5_IAF182               IAC_ICR5_IAF182_Msk
#define IAC_ICR5_IAF183_Pos           (23U)
#define IAC_ICR5_IAF183_Msk           (0x1U << IAC_ICR5_IAF183_Pos)             /*!< 0x00800000 */
#define IAC_ICR5_IAF183               IAC_ICR5_IAF183_Msk
#define IAC_ICR5_IAF184_Pos           (24U)
#define IAC_ICR5_IAF184_Msk           (0x1U << IAC_ICR5_IAF184_Pos)             /*!< 0x01000000 */
#define IAC_ICR5_IAF184               IAC_ICR5_IAF184_Msk
#define IAC_ICR5_IAF185_Pos           (25U)
#define IAC_ICR5_IAF185_Msk           (0x1U << IAC_ICR5_IAF185_Pos)             /*!< 0x02000000 */
#define IAC_ICR5_IAF185               IAC_ICR5_IAF185_Msk
#define IAC_ICR5_IAF186_Pos           (26U)
#define IAC_ICR5_IAF186_Msk           (0x1U << IAC_ICR5_IAF186_Pos)             /*!< 0x04000000 */
#define IAC_ICR5_IAF186               IAC_ICR5_IAF186_Msk
#define IAC_ICR5_IAF187_Pos           (27U)
#define IAC_ICR5_IAF187_Msk           (0x1U << IAC_ICR5_IAF187_Pos)             /*!< 0x08000000 */
#define IAC_ICR5_IAF187               IAC_ICR5_IAF187_Msk
#define IAC_ICR5_IAF188_Pos           (28U)
#define IAC_ICR5_IAF188_Msk           (0x1U << IAC_ICR5_IAF188_Pos)             /*!< 0x10000000 */
#define IAC_ICR5_IAF188               IAC_ICR5_IAF188_Msk
#define IAC_ICR5_IAF189_Pos           (29U)
#define IAC_ICR5_IAF189_Msk           (0x1U << IAC_ICR5_IAF189_Pos)             /*!< 0x20000000 */
#define IAC_ICR5_IAF189               IAC_ICR5_IAF189_Msk
#define IAC_ICR5_IAF190_Pos           (30U)
#define IAC_ICR5_IAF190_Msk           (0x1U << IAC_ICR5_IAF190_Pos)             /*!< 0x40000000 */
#define IAC_ICR5_IAF190               IAC_ICR5_IAF190_Msk
#define IAC_ICR5_IAF191_Pos           (31U)
#define IAC_ICR5_IAF191_Msk           (0x1U << IAC_ICR5_IAF191_Pos)             /*!< 0x80000000 */
#define IAC_ICR5_IAF191               IAC_ICR5_IAF191_Msk

/*******************  Bits definition for IAC_ESR register ********************/
#define IAC_ESR_IACID_Pos             (0U)
#define IAC_ESR_IACID_Msk             (0x7U << IAC_ESR_IACID_Pos)               /*!< 0x00000007 */
#define IAC_ESR_IACID                 IAC_ESR_IACID_Msk

#define IAC_ESR_PERR_Pos              (4U)
#define IAC_ESR_PERR_Msk              (0x1U << IAC_ESR_PERR_Pos)                /*!< 0x00000010 */
#define IAC_ESR_PERR                  IAC_ESR_PERR_Msk

#define IAC_ESR_SERR_Pos              (5U)
#define IAC_ESR_SERR_Msk              (0x1U << IAC_ESR_SERR_Pos)                /*!< 0x00000020 */
#define IAC_ESR_SERR                  IAC_ESR_SERR_Msk

#define IAC_ESR_CERR_Pos              (6U)
#define IAC_ESR_CERR_Msk              (0x1U << IAC_ESR_CERR_Pos)                /*!< 0x00000040 */
#define IAC_ESR_CERR                  IAC_ESR_CERR_Msk

/*******************  Bits definition for IAC_VERR register *******************/
#define IAC_VERR_MINREV_Pos           (0U)
#define IAC_VERR_MINREV_Msk           (0xFU << IAC_VERR_MINREV_Pos)             /*!< 0x0000000F */
#define IAC_VERR_MINREV               IAC_VERR_MINREV_Msk

#define IAC_VERR_MAJREV_Pos           (4U)
#define IAC_VERR_MAJREV_Msk           (0xFU << IAC_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define IAC_VERR_MAJREV               IAC_VERR_MAJREV_Msk

/*******************  Bits definition for IAC_IPIDR register ******************/
#define IAC_IPIDR_ID_Pos              (0U)
#define IAC_IPIDR_ID_Msk              (0xFFFFFFFFU << IAC_IPIDR_ID_Pos)         /*!< 0xFFFFFFFF */
#define IAC_IPIDR_ID                  IAC_IPIDR_ID_Msk

/*******************  Bits definition for IAC_SIDR register *******************/
#define IAC_SIDR_SID_Pos              (0U)
#define IAC_SIDR_SID_Msk              (0xFFFFFFFFU << IAC_SIDR_SID_Pos)         /*!< 0xFFFFFFFF */
#define IAC_SIDR_SID                  IAC_SIDR_SID_Msk

/******************************************************************************/
/*                                                                            */
/*                                    RNG                                     */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for RNG_CR register  *******************/
#define RNG_CR_AFOEN_Pos        (0U)
#define RNG_CR_AFOEN_Msk        (0x1U << RNG_CR_AFOEN_Pos)              /*!< 0x00000001 */
#define RNG_CR_AFOEN            RNG_CR_AFOEN_Msk

#define RNG_CR_RNGEN_Pos        (2U)
#define RNG_CR_RNGEN_Msk        (0x1U << RNG_CR_RNGEN_Pos)              /*!< 0x00000004 */
#define RNG_CR_RNGEN            RNG_CR_RNGEN_Msk

#define RNG_CR_IE_Pos           (3U)
#define RNG_CR_IE_Msk           (0x1U << RNG_CR_IE_Pos)                 /*!< 0x00000008 */
#define RNG_CR_IE               RNG_CR_IE_Msk

#define RNG_CR_LFSR_Pos         (4U)
#define RNG_CR_LFSR_Msk         (0x1U << RNG_CR_LFSR_Pos)               /*!< 0x00000010 */
#define RNG_CR_LFSR             RNG_CR_LFSR_Msk

#define RNG_CR_CED_Pos          (5U)
#define RNG_CR_CED_Msk          (0x1U << RNG_CR_CED_Pos)                /*!< 0x00000020 */
#define RNG_CR_CED              RNG_CR_CED_Msk

#define RNG_CR_BYP_Pos          (6U)
#define RNG_CR_BYP_Msk          (0x1U << RNG_CR_BYP_Pos)                /*!< 0x00000040 */
#define RNG_CR_BYP              RNG_CR_BYP_Msk

#define RNG_CR_RNG_CONFIG3_Pos  (8U)                                    /* RNG_CONFIG3 include PPLOOP and PPRT */
#define RNG_CR_RNG_CONFIG3_Msk  (0xFUL << RNG_CR_RNG_CONFIG3_Pos)       /*!< 0x00000F00 */
#define RNG_CR_RNG_CONFIG3      RNG_CR_RNG_CONFIG3_Msk

#define RNG_CR_PPLOOP_Pos       (8U)
#define RNG_CR_PPLOOP_Msk       (0x3U << RNG_CR_PPLOOP_Pos)             /*!< 0x00000300 */
#define RNG_CR_PPLOOP           RNG_CR_PPLOOP_Msk.
#define RNG_CR_PPLOOP_0         (0x1U << RNG_CR_PPLOOP_Pos)             /*!< 0x00000100 */
#define RNG_CR_PPLOOP_1         (0x2U << RNG_CR_PPLOOP_Pos)             /*!< 0x00000200 */

#define RNG_CR_PPRT_Pos         (10U)
#define RNG_CR_PPRT_Msk         (0x3U << RNG_CR_PPRT_Pos)               /*!< 0x00000C00 */
#define RNG_CR_PPRT             RNG_CR_PPRT_Msk
#define RNG_CR_PPRT_0           (0x1U << RNG_CR_PPRT_Pos)               /*!< 0x00000400 */
#define RNG_CR_PPRT_1           (0x2U << RNG_CR_PPRT_Pos)               /*!< 0x00000800 */

#define RNG_CR_NISTN_Pos        (12U)
#define RNG_CR_NISTN_Msk        (0x1U << RNG_CR_NISTN_Pos)              /*!< 0x00001000 */
#define RNG_CR_NISTN            RNG_CR_NISTN_Msk

#define RNG_CR_RNG_CONFIG2_Pos  (13U)                                   /* RNG_CONFIG2 include DLPDIS, ALPEN and SEQEN */
#define RNG_CR_RNG_CONFIG2_Msk  (0x7UL << RNG_CR_RNG_CONFIG2_Pos)       /*!< 0x0000E000 */
#define RNG_CR_RNG_CONFIG2      RNG_CR_RNG_CONFIG2_Msk

#define RNG_CR_DLPDIS_Pos       (13U)
#define RNG_CR_DLPDIS_Msk       (0x1U << RNG_CR_DLPDIS_Pos)             /*!< 0x00002000 */
#define RNG_CR_DLPDIS           RNG_CR_DLPDIS_Msk

#define RNG_CR_ALPEN_Pos        (14U)
#define RNG_CR_ALPEN_Msk        (0x1U << RNG_CR_ALPEN_Pos)              /*!< 0x00004000 */
#define RNG_CR_ALPEN            RNG_CR_ALPEN_Msk

#define RNG_CR_SEQEN_Pos        (15U)
#define RNG_CR_SEQEN_Msk        (0x1U << RNG_CR_SEQEN_Pos)              /*!< 0x00008000 */
#define RNG_CR_SEQEN            RNG_CR_SEQEN_Msk

#define RNG_CR_CLKDIV_Pos       (16U)
#define RNG_CR_CLKDIV_Msk       (0xFU << RNG_CR_CLKDIV_Pos)             /*!< 0x000F0000 */
#define RNG_CR_CLKDIV           RNG_CR_CLKDIV_Msk
#define RNG_CR_CLKDIV_0         (0x1U << RNG_CR_CLKDIV_Pos)             /*!< 0x00010000 */
#define RNG_CR_CLKDIV_1         (0x2U << RNG_CR_CLKDIV_Pos)             /*!< 0x00020000 */
#define RNG_CR_CLKDIV_2         (0x4U << RNG_CR_CLKDIV_Pos)             /*!< 0x00040000 */
#define RNG_CR_CLKDIV_3         (0x8U << RNG_CR_CLKDIV_Pos)             /*!< 0x00080000 */

#define RNG_CR_RNG_CONFIG1_Pos  (20U)                                   /* RNG_CONFIG2 include OSD, NORMEN and VNEN */
#define RNG_CR_RNG_CONFIG1_Msk  (0x3FUL << RNG_CR_RNG_CONFIG1_Pos)      /*!< 0x03F00000 */
#define RNG_CR_RNG_CONFIG1      RNG_CR_RNG_CONFIG1_Msk

#define RNG_CR_OSD_Pos          (20U)
#define RNG_CR_OSD_Msk          (0xFU << RNG_CR_OSD_Pos)                /*!< 0x00F00000 */
#define RNG_CR_OSD              RNG_CR_OSD_Msk
#define RNG_CR_OSD_0            (0x1U << RNG_CR_OSD_Pos)                /*!< 0x00100000 */
#define RNG_CR_OSD_1            (0x2U << RNG_CR_OSD_Pos)                /*!< 0x00200000 */
#define RNG_CR_OSD_2            (0x4U << RNG_CR_OSD_Pos)                /*!< 0x00400000 */
#define RNG_CR_OSD_3            (0x8U << RNG_CR_OSD_Pos)                /*!< 0x00800000 */

#define RNG_CR_NORMEN_Pos       (24U)
#define RNG_CR_NORMEN_Msk       (0x1U << RNG_CR_NORMEN_Pos)             /*!< 0x01000000 */
#define RNG_CR_NORMEN           RNG_CR_NORMEN_Msk

#define RNG_CR_VNEN_Pos         (25U)
#define RNG_CR_VNEN_Msk         (0x1U << RNG_CR_VNEN_Pos)               /*!< 0x02000000 */
#define RNG_CR_VNEN             RNG_CR_VNEN_Msk

#define RNG_CR_CONDRST_Pos      (30U)
#define RNG_CR_CONDRST_Msk      (0x1U << RNG_CR_CONDRST_Pos)            /*!< 0x40000000 */
#define RNG_CR_CONDRST          RNG_CR_CONDRST_Msk

#define RNG_CR_CONFIGLOCK_Pos   (31U)
#define RNG_CR_CONFIGLOCK_Msk   (0x1U << RNG_CR_CONFIGLOCK_Pos)         /*!< 0x80000000 */
#define RNG_CR_CONFIGLOCK       RNG_CR_CONFIGLOCK_Msk

/********************  Bits definition for RNG_SR register  *******************/
#define RNG_SR_DRDY_Pos     (0U)
#define RNG_SR_DRDY_Msk     (0x1U << RNG_SR_DRDY_Pos)                          /*!< 0x00000001 */
#define RNG_SR_DRDY         RNG_SR_DRDY_Msk
#define RNG_SR_CECS_Pos     (1U)
#define RNG_SR_CECS_Msk     (0x1U << RNG_SR_CECS_Pos)                          /*!< 0x00000002 */
#define RNG_SR_CECS         RNG_SR_CECS_Msk
#define RNG_SR_SECS_Pos     (2U)
#define RNG_SR_SECS_Msk     (0x1U << RNG_SR_SECS_Pos)                          /*!< 0x00000004 */
#define RNG_SR_SECS         RNG_SR_SECS_Msk
#define RNG_SR_CEIS_Pos     (5U)
#define RNG_SR_CEIS_Msk     (0x1U << RNG_SR_CEIS_Pos)                          /*!< 0x00000020 */
#define RNG_SR_CEIS         RNG_SR_CEIS_Msk
#define RNG_SR_SEIS_Pos     (6U)
#define RNG_SR_SEIS_Msk     (0x1U << RNG_SR_SEIS_Pos)                          /*!< 0x00000040 */
#define RNG_SR_SEIS         RNG_SR_SEIS_Msk

/******************************************************************************/
/*                                                                            */
/*                           Real-Time Clock (RTC)                            */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for RTC_TR register  *******************/
#define RTC_TR_SU_Pos                (0U)
#define RTC_TR_SU_Msk                (0xFU << RTC_TR_SU_Pos)                            /*!< 0x0000000F */
#define RTC_TR_SU                    RTC_TR_SU_Msk
#define RTC_TR_SU_0                  (0x1U << RTC_TR_SU_Pos)                            /*!< 0x00000001 */
#define RTC_TR_SU_1                  (0x2U << RTC_TR_SU_Pos)                            /*!< 0x00000002 */
#define RTC_TR_SU_2                  (0x4U << RTC_TR_SU_Pos)                            /*!< 0x00000004 */
#define RTC_TR_SU_3                  (0x8U << RTC_TR_SU_Pos)                            /*!< 0x00000008 */
#define RTC_TR_ST_Pos                (4U)
#define RTC_TR_ST_Msk                (0x7U << RTC_TR_ST_Pos)                            /*!< 0x00000070 */
#define RTC_TR_ST                    RTC_TR_ST_Msk
#define RTC_TR_ST_0                  (0x1U << RTC_TR_ST_Pos)                            /*!< 0x00000010 */
#define RTC_TR_ST_1                  (0x2U << RTC_TR_ST_Pos)                            /*!< 0x00000020 */
#define RTC_TR_ST_2                  (0x4U << RTC_TR_ST_Pos)                            /*!< 0x00000040 */
#define RTC_TR_MNU_Pos               (8U)
#define RTC_TR_MNU_Msk               (0xFU << RTC_TR_MNU_Pos)                           /*!< 0x00000F00 */
#define RTC_TR_MNU                   RTC_TR_MNU_Msk
#define RTC_TR_MNU_0                 (0x1U << RTC_TR_MNU_Pos)                           /*!< 0x00000100 */
#define RTC_TR_MNU_1                 (0x2U << RTC_TR_MNU_Pos)                           /*!< 0x00000200 */
#define RTC_TR_MNU_2                 (0x4U << RTC_TR_MNU_Pos)                           /*!< 0x00000400 */
#define RTC_TR_MNU_3                 (0x8U << RTC_TR_MNU_Pos)                           /*!< 0x00000800 */
#define RTC_TR_MNT_Pos               (12U)
#define RTC_TR_MNT_Msk               (0x7U << RTC_TR_MNT_Pos)                           /*!< 0x00007000 */
#define RTC_TR_MNT                   RTC_TR_MNT_Msk
#define RTC_TR_MNT_0                 (0x1U << RTC_TR_MNT_Pos)                           /*!< 0x00001000 */
#define RTC_TR_MNT_1                 (0x2U << RTC_TR_MNT_Pos)                           /*!< 0x00002000 */
#define RTC_TR_MNT_2                 (0x4U << RTC_TR_MNT_Pos)                           /*!< 0x00004000 */
#define RTC_TR_HU_Pos                (16U)
#define RTC_TR_HU_Msk                (0xFU << RTC_TR_HU_Pos)                            /*!< 0x000F0000 */
#define RTC_TR_HU                    RTC_TR_HU_Msk
#define RTC_TR_HU_0                  (0x1U << RTC_TR_HU_Pos)                            /*!< 0x00010000 */
#define RTC_TR_HU_1                  (0x2U << RTC_TR_HU_Pos)                            /*!< 0x00020000 */
#define RTC_TR_HU_2                  (0x4U << RTC_TR_HU_Pos)                            /*!< 0x00040000 */
#define RTC_TR_HU_3                  (0x8U << RTC_TR_HU_Pos)                            /*!< 0x00080000 */
#define RTC_TR_HT_Pos                (20U)
#define RTC_TR_HT_Msk                (0x3U << RTC_TR_HT_Pos)                            /*!< 0x00300000 */
#define RTC_TR_HT                    RTC_TR_HT_Msk
#define RTC_TR_HT_0                  (0x1U << RTC_TR_HT_Pos)                            /*!< 0x00100000 */
#define RTC_TR_HT_1                  (0x2U << RTC_TR_HT_Pos)                            /*!< 0x00200000 */
#define RTC_TR_PM_Pos                (22U)
#define RTC_TR_PM_Msk                (0x1U << RTC_TR_PM_Pos)                            /*!< 0x00400000 */
#define RTC_TR_PM                    RTC_TR_PM_Msk

/********************  Bits definition for RTC_DR register  *******************/
#define RTC_DR_DU_Pos                (0U)
#define RTC_DR_DU_Msk                (0xFU << RTC_DR_DU_Pos)                            /*!< 0x0000000F */
#define RTC_DR_DU                    RTC_DR_DU_Msk
#define RTC_DR_DU_0                  (0x1U << RTC_DR_DU_Pos)                            /*!< 0x00000001 */
#define RTC_DR_DU_1                  (0x2U << RTC_DR_DU_Pos)                            /*!< 0x00000002 */
#define RTC_DR_DU_2                  (0x4U << RTC_DR_DU_Pos)                            /*!< 0x00000004 */
#define RTC_DR_DU_3                  (0x8U << RTC_DR_DU_Pos)                            /*!< 0x00000008 */
#define RTC_DR_DT_Pos                (4U)
#define RTC_DR_DT_Msk                (0x3U << RTC_DR_DT_Pos)                            /*!< 0x00000030 */
#define RTC_DR_DT                    RTC_DR_DT_Msk
#define RTC_DR_DT_0                  (0x1U << RTC_DR_DT_Pos)                            /*!< 0x00000010 */
#define RTC_DR_DT_1                  (0x2U << RTC_DR_DT_Pos)                            /*!< 0x00000020 */
#define RTC_DR_MU_Pos                (8U)
#define RTC_DR_MU_Msk                (0xFU << RTC_DR_MU_Pos)                            /*!< 0x00000F00 */
#define RTC_DR_MU                    RTC_DR_MU_Msk
#define RTC_DR_MU_0                  (0x1U << RTC_DR_MU_Pos)                            /*!< 0x00000100 */
#define RTC_DR_MU_1                  (0x2U << RTC_DR_MU_Pos)                            /*!< 0x00000200 */
#define RTC_DR_MU_2                  (0x4U << RTC_DR_MU_Pos)                            /*!< 0x00000400 */
#define RTC_DR_MU_3                  (0x8U << RTC_DR_MU_Pos)                            /*!< 0x00000800 */
#define RTC_DR_MT_Pos                (12U)
#define RTC_DR_MT_Msk                (0x1U << RTC_DR_MT_Pos)                            /*!< 0x00001000 */
#define RTC_DR_MT                    RTC_DR_MT_Msk
#define RTC_DR_WDU_Pos               (13U)
#define RTC_DR_WDU_Msk               (0x7U << RTC_DR_WDU_Pos)                           /*!< 0x0000E000 */
#define RTC_DR_WDU                   RTC_DR_WDU_Msk
#define RTC_DR_WDU_0                 (0x1U << RTC_DR_WDU_Pos)                           /*!< 0x00002000 */
#define RTC_DR_WDU_1                 (0x2U << RTC_DR_WDU_Pos)                           /*!< 0x00004000 */
#define RTC_DR_WDU_2                 (0x4U << RTC_DR_WDU_Pos)                           /*!< 0x00008000 */
#define RTC_DR_YU_Pos                (16U)
#define RTC_DR_YU_Msk                (0xFU << RTC_DR_YU_Pos)                            /*!< 0x000F0000 */
#define RTC_DR_YU                    RTC_DR_YU_Msk
#define RTC_DR_YU_0                  (0x1U << RTC_DR_YU_Pos)                            /*!< 0x00010000 */
#define RTC_DR_YU_1                  (0x2U << RTC_DR_YU_Pos)                            /*!< 0x00020000 */
#define RTC_DR_YU_2                  (0x4U << RTC_DR_YU_Pos)                            /*!< 0x00040000 */
#define RTC_DR_YU_3                  (0x8U << RTC_DR_YU_Pos)                            /*!< 0x00080000 */
#define RTC_DR_YT_Pos                (20U)
#define RTC_DR_YT_Msk                (0xFU << RTC_DR_YT_Pos)                            /*!< 0x00F00000 */
#define RTC_DR_YT                    RTC_DR_YT_Msk
#define RTC_DR_YT_0                  (0x1U << RTC_DR_YT_Pos)                            /*!< 0x00100000 */
#define RTC_DR_YT_1                  (0x2U << RTC_DR_YT_Pos)                            /*!< 0x00200000 */
#define RTC_DR_YT_2                  (0x4U << RTC_DR_YT_Pos)                            /*!< 0x00400000 */
#define RTC_DR_YT_3                  (0x8U << RTC_DR_YT_Pos)                            /*!< 0x00800000 */

/********************  Bits definition for RTC_SSR register  ******************/
#define RTC_SSR_SS_Pos               (0U)
#define RTC_SSR_SS_Msk               (0xFFFFFFFFUL << RTC_SSR_SS_Pos)                        /*!< 0xFFFFFFFF */
#define RTC_SSR_SS                   RTC_SSR_SS_Msk

/********************  Bits definition for RTC_ICSR register  ******************/
#define RTC_ICSR_WUTWF_Pos           (2U)
#define RTC_ICSR_WUTWF_Msk           (0x1UL << RTC_ICSR_WUTWF_Pos)             /*!< 0x00000004 */
#define RTC_ICSR_WUTWF               RTC_ICSR_WUTWF_Msk
#define RTC_ICSR_SHPF_Pos            (3U)
#define RTC_ICSR_SHPF_Msk            (0x1UL << RTC_ICSR_SHPF_Pos)              /*!< 0x00000008 */
#define RTC_ICSR_SHPF                RTC_ICSR_SHPF_Msk
#define RTC_ICSR_INITS_Pos           (4U)
#define RTC_ICSR_INITS_Msk           (0x1UL << RTC_ICSR_INITS_Pos)             /*!< 0x00000010 */
#define RTC_ICSR_INITS               RTC_ICSR_INITS_Msk
#define RTC_ICSR_RSF_Pos             (5U)
#define RTC_ICSR_RSF_Msk             (0x1UL << RTC_ICSR_RSF_Pos)               /*!< 0x00000020 */
#define RTC_ICSR_RSF                 RTC_ICSR_RSF_Msk
#define RTC_ICSR_INITF_Pos           (6U)
#define RTC_ICSR_INITF_Msk           (0x1UL << RTC_ICSR_INITF_Pos)             /*!< 0x00000040 */
#define RTC_ICSR_INITF               RTC_ICSR_INITF_Msk
#define RTC_ICSR_INIT_Pos            (7U)
#define RTC_ICSR_INIT_Msk            (0x1UL << RTC_ICSR_INIT_Pos)              /*!< 0x00000080 */
#define RTC_ICSR_INIT                RTC_ICSR_INIT_Msk
#define RTC_ICSR_BIN_Pos             (8U)
#define RTC_ICSR_BIN_Msk             (0x3UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000300 */
#define RTC_ICSR_BIN                 RTC_ICSR_BIN_Msk
#define RTC_ICSR_BIN_0               (0x1UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000100 */
#define RTC_ICSR_BIN_1               (0x2UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000200 */
#define RTC_ICSR_BCDU_Pos            (10U)
#define RTC_ICSR_BCDU_Msk            (0x7UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00001C00 */
#define RTC_ICSR_BCDU                RTC_ICSR_BCDU_Msk
#define RTC_ICSR_BCDU_0              (0x1UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00000400 */
#define RTC_ICSR_BCDU_1              (0x2UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00000800 */
#define RTC_ICSR_BCDU_2              (0x4UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00001000 */
#define RTC_ICSR_RECALPF_Pos         (16U)
#define RTC_ICSR_RECALPF_Msk         (0x1UL << RTC_ICSR_RECALPF_Pos)           /*!< 0x00010000 */
#define RTC_ICSR_RECALPF             RTC_ICSR_RECALPF_Msk

/********************  Bits definition for RTC_PRER register  *****************/
#define RTC_PRER_PREDIV_S_Pos        (0U)
#define RTC_PRER_PREDIV_S_Msk        (0x7FFFU << RTC_PRER_PREDIV_S_Pos)                 /*!< 0x00007FFF */
#define RTC_PRER_PREDIV_S            RTC_PRER_PREDIV_S_Msk
#define RTC_PRER_PREDIV_A_Pos        (16U)
#define RTC_PRER_PREDIV_A_Msk        (0x7FU << RTC_PRER_PREDIV_A_Pos)                   /*!< 0x007F0000 */
#define RTC_PRER_PREDIV_A            RTC_PRER_PREDIV_A_Msk

/********************  Bits definition for RTC_WUTR register  *****************/
#define RTC_WUTR_WUT_Pos             (0U)
#define RTC_WUTR_WUT_Msk             (0xFFFFU << RTC_WUTR_WUT_Pos)                      /*!< 0x0000FFFF */
#define RTC_WUTR_WUT                 RTC_WUTR_WUT_Msk
#define RTC_WUTR_WUTOCLR_Pos         (16U)
#define RTC_WUTR_WUTOCLR_Msk         (0xFFFFU << RTC_WUTR_WUTOCLR_Pos)                  /*!< 0x0000FFFF */
#define RTC_WUTR_WUTOCLR             RTC_WUTR_WUTOCLR_Msk

/********************  Bits definition for RTC_CR register  *******************/
#define RTC_CR_WUCKSEL_Pos           (0U)
#define RTC_CR_WUCKSEL_Msk           (0x7U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000007 */
#define RTC_CR_WUCKSEL               RTC_CR_WUCKSEL_Msk
#define RTC_CR_WUCKSEL_0             (0x1U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000001 */
#define RTC_CR_WUCKSEL_1             (0x2U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000002 */
#define RTC_CR_WUCKSEL_2             (0x4U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000004 */
#define RTC_CR_TSEDGE_Pos            (3U)
#define RTC_CR_TSEDGE_Msk            (0x1U << RTC_CR_TSEDGE_Pos)                        /*!< 0x00000008 */
#define RTC_CR_TSEDGE                RTC_CR_TSEDGE_Msk
#define RTC_CR_REFCKON_Pos           (4U)
#define RTC_CR_REFCKON_Msk           (0x1U << RTC_CR_REFCKON_Pos)                       /*!< 0x00000010 */
#define RTC_CR_REFCKON               RTC_CR_REFCKON_Msk
#define RTC_CR_BYPSHAD_Pos           (5U)
#define RTC_CR_BYPSHAD_Msk           (0x1U << RTC_CR_BYPSHAD_Pos)                       /*!< 0x00000020 */
#define RTC_CR_BYPSHAD               RTC_CR_BYPSHAD_Msk
#define RTC_CR_FMT_Pos               (6U)
#define RTC_CR_FMT_Msk               (0x1U << RTC_CR_FMT_Pos)                           /*!< 0x00000040 */
#define RTC_CR_FMT                   RTC_CR_FMT_Msk
#define RTC_CR_SSRUIE_Pos            (7U)
#define RTC_CR_SSRUIE_Msk            (0x1UL << RTC_CR_SSRUIE_Pos)                      /*!< 0x00000080 */
#define RTC_CR_SSRUIE                RTC_CR_SSRUIE_Msk
#define RTC_CR_ALRAE_Pos             (8U)
#define RTC_CR_ALRAE_Msk             (0x1U << RTC_CR_ALRAE_Pos)                         /*!< 0x00000100 */
#define RTC_CR_ALRAE                 RTC_CR_ALRAE_Msk
#define RTC_CR_ALRBE_Pos             (9U)
#define RTC_CR_ALRBE_Msk             (0x1U << RTC_CR_ALRBE_Pos)                         /*!< 0x00000200 */
#define RTC_CR_ALRBE                 RTC_CR_ALRBE_Msk
#define RTC_CR_WUTE_Pos              (10U)
#define RTC_CR_WUTE_Msk              (0x1U << RTC_CR_WUTE_Pos)                          /*!< 0x00000400 */
#define RTC_CR_WUTE                  RTC_CR_WUTE_Msk
#define RTC_CR_TSE_Pos               (11U)
#define RTC_CR_TSE_Msk               (0x1U << RTC_CR_TSE_Pos)                           /*!< 0x00000800 */
#define RTC_CR_TSE                   RTC_CR_TSE_Msk
#define RTC_CR_ALRAIE_Pos            (12U)
#define RTC_CR_ALRAIE_Msk            (0x1U << RTC_CR_ALRAIE_Pos)                        /*!< 0x00001000 */
#define RTC_CR_ALRAIE                RTC_CR_ALRAIE_Msk
#define RTC_CR_ALRBIE_Pos            (13U)
#define RTC_CR_ALRBIE_Msk            (0x1U << RTC_CR_ALRBIE_Pos)                        /*!< 0x00002000 */
#define RTC_CR_ALRBIE                RTC_CR_ALRBIE_Msk
#define RTC_CR_WUTIE_Pos             (14U)
#define RTC_CR_WUTIE_Msk             (0x1U << RTC_CR_WUTIE_Pos)                         /*!< 0x00004000 */
#define RTC_CR_WUTIE                 RTC_CR_WUTIE_Msk
#define RTC_CR_TSIE_Pos              (15U)
#define RTC_CR_TSIE_Msk              (0x1U << RTC_CR_TSIE_Pos)                          /*!< 0x00008000 */
#define RTC_CR_TSIE                  RTC_CR_TSIE_Msk
#define RTC_CR_ADD1H_Pos             (16U)
#define RTC_CR_ADD1H_Msk             (0x1U << RTC_CR_ADD1H_Pos)                         /*!< 0x00010000 */
#define RTC_CR_ADD1H                 RTC_CR_ADD1H_Msk
#define RTC_CR_SUB1H_Pos             (17U)
#define RTC_CR_SUB1H_Msk             (0x1U << RTC_CR_SUB1H_Pos)                         /*!< 0x00020000 */
#define RTC_CR_SUB1H                 RTC_CR_SUB1H_Msk
#define RTC_CR_BKP_Pos               (18U)
#define RTC_CR_BKP_Msk               (0x1U << RTC_CR_BKP_Pos)                           /*!< 0x00040000 */
#define RTC_CR_BKP                   RTC_CR_BKP_Msk
#define RTC_CR_COSEL_Pos             (19U)
#define RTC_CR_COSEL_Msk             (0x1U << RTC_CR_COSEL_Pos)                         /*!< 0x00080000 */
#define RTC_CR_COSEL                 RTC_CR_COSEL_Msk
#define RTC_CR_POL_Pos               (20U)
#define RTC_CR_POL_Msk               (0x1U << RTC_CR_POL_Pos)                           /*!< 0x00100000 */
#define RTC_CR_POL                   RTC_CR_POL_Msk
#define RTC_CR_OSEL_Pos              (21U)
#define RTC_CR_OSEL_Msk              (0x3U << RTC_CR_OSEL_Pos)                          /*!< 0x00600000 */
#define RTC_CR_OSEL                  RTC_CR_OSEL_Msk
#define RTC_CR_OSEL_0                (0x1U << RTC_CR_OSEL_Pos)                          /*!< 0x00200000 */
#define RTC_CR_OSEL_1                (0x2U << RTC_CR_OSEL_Pos)                          /*!< 0x00400000 */
#define RTC_CR_COE_Pos               (23U)
#define RTC_CR_COE_Msk               (0x1U << RTC_CR_COE_Pos)                           /*!< 0x00800000 */
#define RTC_CR_COE                   RTC_CR_COE_Msk
#define RTC_CR_ITSE_Pos              (24U)
#define RTC_CR_ITSE_Msk              (0x1U << RTC_CR_ITSE_Pos)                          /*!< 0x01000000 */
#define RTC_CR_ITSE                  RTC_CR_ITSE_Msk                                    /*!<Timestamp on internal event enable  */
#define RTC_CR_TAMPTS_Pos            (25U)
#define RTC_CR_TAMPTS_Msk            (0x1U << RTC_CR_TAMPTS_Pos)                        /*!< 0x02000000 */
#define RTC_CR_TAMPTS                RTC_CR_TAMPTS_Msk                                  /*!<Activate timestamp on tamper detection event  */
#define RTC_CR_TAMPOE_Pos            (26U)
#define RTC_CR_TAMPOE_Msk            (0x1U << RTC_CR_TAMPOE_Pos)                        /*!< 0x04000000 */
#define RTC_CR_TAMPOE                RTC_CR_TAMPOE_Msk                                  /*!<Tamper detection output enable on TAMPALARM  */
#define RTC_CR_ALRACLR_Pos           (27U)
#define RTC_CR_ALRACLR_Msk           (0x1U << RTC_CR_ALRAMSK_Pos)                       /*!< 0x8000000 */
#define RTC_CR_ALRACLR               RTC_CR_ALRAMSK_Msk                                 /*!<Alarm A mask */
#define RTC_CR_ALRBCLR_Pos           (28U)
#define RTC_CR_ALRBCLR_Msk           (0x1U << RTC_CR_ALRBMSK_Pos)                       /*!< 0x10000000 */
#define RTC_CR_ALRBCLR               RTC_CR_ALRBMSK_Msk                                 /*!<Alarm B mask */
#define RTC_CR_TAMPALRM_PU_Pos       (29U)
#define RTC_CR_TAMPALRM_PU_Msk       (0x1U << RTC_CR_TAMPALRM_PU_Pos)                   /*!< 0x20000000 */
#define RTC_CR_TAMPALRM_PU           RTC_CR_TAMPALRM_PU_Msk                             /*!<TAMPALARM output pull-up config */
#define RTC_CR_TAMPALRM_TYPE_Pos     (30U)
#define RTC_CR_TAMPALRM_TYPE_Msk     (0x1U << RTC_CR_TAMPALRM_TYPE_Pos)                 /*!< 0x40000000 */
#define RTC_CR_TAMPALRM_TYPE         RTC_CR_TAMPALRM_TYPE_Msk                           /*!<TAMPALARM output type  */
#define RTC_CR_OUT2EN_Pos            (31U)
#define RTC_CR_OUT2EN_Msk            (0x1UL << RTC_CR_OUT2EN_Pos)                        /*!< 0x80000000 */
#define RTC_CR_OUT2EN                RTC_CR_OUT2EN_Msk                                  /*!<RTC_OUT2 output enable */

/********************  Bits definition for RTC_PRIVCR register  *****************/
#define RTC_PRIVCR_ALRAPRIV_Pos      (0U)
#define RTC_PRIVCR_ALRAPRIV_Msk      (0x1U << RTC_PRIVCR_ALRAPRIV_Pos)                  /*!< 0x00000001 */
#define RTC_PRIVCR_ALRAPRIV          RTC_PRIVCR_ALRAPRIV_Msk
#define RTC_PRIVCR_ALRBPRIV_Pos      (1U)
#define RTC_PRIVCR_ALRBPRIV_Msk      (0x1U << RTC_PRIVCR_ALRBPRIV_Pos)                  /*!< 0x00000002 */
#define RTC_PRIVCR_ALRBPRIV          RTC_PRIVCR_ALRBPRIV_Msk
#define RTC_PRIVCR_WUTPRIV_Pos       (2U)
#define RTC_PRIVCR_WUTPRIV_Msk       (0x1U << RTC_PRIVCR_WUTPRIV_Pos)                   /*!< 0x00000004 */
#define RTC_PRIVCR_WUTPRIV           RTC_PRIVCR_WUTPRIV_Msk
#define RTC_PRIVCR_TSPRIV_Pos        (3U)
#define RTC_PRIVCR_TSPRIV_Msk        (0x1U << RTC_PRIVCR_TSPRIV_Pos)                    /*!< 0x00000008 */
#define RTC_PRIVCR_TSPRIV            RTC_PRIVCR_TSPRIV_Msk
#define RTC_PRIVCR_CALPRIV_Pos       (13U)
#define RTC_PRIVCR_CALPRIV_Msk       (0x1U << RTC_PRIVCR_CALPRIV_Pos)                   /*!< 0x00002000 */
#define RTC_PRIVCR_CALPRIV           RTC_PRIVCR_CALPRIV_Msk
#define RTC_PRIVCR_INITPRIV_Pos      (14U)
#define RTC_PRIVCR_INITPRIV_Msk      (0x1U << RTC_PRIVCR_INITPRIV_Pos)                  /*!< 0x00004000 */
#define RTC_PRIVCR_INITPRIV          RTC_PRIVCR_INITPRIV_Msk
#define RTC_PRIVCR_PRIV_Pos          (15U)
#define RTC_PRIVCR_PRIV_Msk          (0x1U << RTC_PRIVCR_PRIV_Pos)                      /*!< 0x00008000 */
#define RTC_PRIVCR_PRIV              RTC_PRIVCR_PRIV_Msk

/********************  Bits definition for RTC_SECCFGR register  ******************/
#define RTC_SECCFGR_ALRASEC_Pos       (0U)
#define RTC_SECCFGR_ALRASEC_Msk       (0x1U << RTC_SECCFGR_ALRASEC_Pos)                   /*!< 0x00000001 */
#define RTC_SECCFGR_ALRASEC           RTC_SECCFGR_ALRASEC_Msk
#define RTC_SECCFGR_ALRBSEC_Pos       (1U)
#define RTC_SECCFGR_ALRBSEC_Msk       (0x1U << RTC_SECCFGR_ALRBSEC_Pos)                   /*!< 0x00000002 */
#define RTC_SECCFGR_ALRBSEC           RTC_SECCFGR_ALRBSEC_Msk
#define RTC_SECCFGR_WUTSEC_Pos        (2U)
#define RTC_SECCFGR_WUTSEC_Msk        (0x1U << RTC_SECCFGR_WUTSEC_Pos)                    /*!< 0x00000004 */
#define RTC_SECCFGR_WUTSEC            RTC_SECCFGR_WUTSEC_Msk
#define RTC_SECCFGR_TSSEC_Pos         (3U)
#define RTC_SECCFGR_TSSEC_Msk         (0x1U << RTC_SECCFGR_TSSEC_Pos)                     /*!< 0x00000008 */
#define RTC_SECCFGR_TSSEC             RTC_SECCFGR_TSSEC_Msk
#define RTC_SECCFGR_CALSEC_Pos        (13U)
#define RTC_SECCFGR_CALSEC_Msk        (0x1U << RTC_SECCFGR_CALSEC_Pos)                    /*!< 0x00002000 */
#define RTC_SECCFGR_CALSEC            RTC_SECCFGR_CALSEC_Msk
#define RTC_SECCFGR_INITSEC_Pos       (14U)
#define RTC_SECCFGR_INITSEC_Msk       (0x1U << RTC_SECCFGR_INITSEC_Pos)                   /*!< 0x00004000 */
#define RTC_SECCFGR_INITSEC           RTC_SECCFGR_INITSEC_Msk
#define RTC_SECCFGR_SEC_Pos           (15U)
#define RTC_SECCFGR_SEC_Msk           (0x1U << RTC_SECCFGR_SEC_Pos)                       /*!< 0x00008000 */
#define RTC_SECCFGR_SEC               RTC_SECCFGR_SEC_Msk

/********************  Bits definition for RTC_WPR register  ******************/
#define RTC_WPR_KEY_Pos              (0U)
#define RTC_WPR_KEY_Msk              (0xFFU << RTC_WPR_KEY_Pos)                         /*!< 0x000000FF */
#define RTC_WPR_KEY                  RTC_WPR_KEY_Msk

/********************  Bits definition for RTC_CALR register  *****************/
#define RTC_CALR_CALM_Pos            (0U)
#define RTC_CALR_CALM_Msk            (0x1FFU << RTC_CALR_CALM_Pos)                      /*!< 0x000001FF */
#define RTC_CALR_CALM                RTC_CALR_CALM_Msk
#define RTC_CALR_CALM_0              (0x001U << RTC_CALR_CALM_Pos)                      /*!< 0x00000001 */
#define RTC_CALR_CALM_1              (0x002U << RTC_CALR_CALM_Pos)                      /*!< 0x00000002 */
#define RTC_CALR_CALM_2              (0x004U << RTC_CALR_CALM_Pos)                      /*!< 0x00000004 */
#define RTC_CALR_CALM_3              (0x008U << RTC_CALR_CALM_Pos)                      /*!< 0x00000008 */
#define RTC_CALR_CALM_4              (0x010U << RTC_CALR_CALM_Pos)                      /*!< 0x00000010 */
#define RTC_CALR_CALM_5              (0x020U << RTC_CALR_CALM_Pos)                      /*!< 0x00000020 */
#define RTC_CALR_CALM_6              (0x040U << RTC_CALR_CALM_Pos)                      /*!< 0x00000040 */
#define RTC_CALR_CALM_7              (0x080U << RTC_CALR_CALM_Pos)                      /*!< 0x00000080 */
#define RTC_CALR_CALM_8              (0x100U << RTC_CALR_CALM_Pos)                      /*!< 0x00000100 */
#define RTC_CALR_LPCAL_Pos           (12U)
#define RTC_CALR_LPCAL_Msk           (0x1U << RTC_CALR_LPCAL_Pos)                       /*!< 0x00001000 */
#define RTC_CALR_LPCAL               RTC_CALR_LPCAL_Msk
#define RTC_CALR_CALW16_Pos          (13U)
#define RTC_CALR_CALW16_Msk          (0x1U << RTC_CALR_CALW16_Pos)                      /*!< 0x00002000 */
#define RTC_CALR_CALW16              RTC_CALR_CALW16_Msk
#define RTC_CALR_CALW8_Pos           (14U)
#define RTC_CALR_CALW8_Msk           (0x1U << RTC_CALR_CALW8_Pos)                       /*!< 0x00004000 */
#define RTC_CALR_CALW8               RTC_CALR_CALW8_Msk
#define RTC_CALR_CALP_Pos            (15U)
#define RTC_CALR_CALP_Msk            (0x1U << RTC_CALR_CALP_Pos)                        /*!< 0x00008000 */
#define RTC_CALR_CALP                RTC_CALR_CALP_Msk

/********************  Bits definition for RTC_SHIFTR register  ***************/
#define RTC_SHIFTR_SUBFS_Pos         (0U)
#define RTC_SHIFTR_SUBFS_Msk         (0x7FFFU << RTC_SHIFTR_SUBFS_Pos)                  /*!< 0x00007FFF */
#define RTC_SHIFTR_SUBFS             RTC_SHIFTR_SUBFS_Msk
#define RTC_SHIFTR_ADD1S_Pos         (31U)
#define RTC_SHIFTR_ADD1S_Msk         (0x1U << RTC_SHIFTR_ADD1S_Pos)                     /*!< 0x80000000 */
#define RTC_SHIFTR_ADD1S             RTC_SHIFTR_ADD1S_Msk

/********************  Bits definition for RTC_TSTR register  *****************/
#define RTC_TSTR_SU_Pos              (0U)
#define RTC_TSTR_SU_Msk              (0xFU << RTC_TSTR_SU_Pos)                          /*!< 0x0000000F */
#define RTC_TSTR_SU                  RTC_TSTR_SU_Msk
#define RTC_TSTR_SU_0                (0x1U << RTC_TSTR_SU_Pos)                          /*!< 0x00000001 */
#define RTC_TSTR_SU_1                (0x2U << RTC_TSTR_SU_Pos)                          /*!< 0x00000002 */
#define RTC_TSTR_SU_2                (0x4U << RTC_TSTR_SU_Pos)                          /*!< 0x00000004 */
#define RTC_TSTR_SU_3                (0x8U << RTC_TSTR_SU_Pos)                          /*!< 0x00000008 */
#define RTC_TSTR_ST_Pos              (4U)
#define RTC_TSTR_ST_Msk              (0x7U << RTC_TSTR_ST_Pos)                          /*!< 0x00000070 */
#define RTC_TSTR_ST                  RTC_TSTR_ST_Msk
#define RTC_TSTR_ST_0                (0x1U << RTC_TSTR_ST_Pos)                          /*!< 0x00000010 */
#define RTC_TSTR_ST_1                (0x2U << RTC_TSTR_ST_Pos)                          /*!< 0x00000020 */
#define RTC_TSTR_ST_2                (0x4U << RTC_TSTR_ST_Pos)                          /*!< 0x00000040 */
#define RTC_TSTR_MNU_Pos             (8U)
#define RTC_TSTR_MNU_Msk             (0xFU << RTC_TSTR_MNU_Pos)                         /*!< 0x00000F00 */
#define RTC_TSTR_MNU                 RTC_TSTR_MNU_Msk
#define RTC_TSTR_MNU_0               (0x1U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000100 */
#define RTC_TSTR_MNU_1               (0x2U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000200 */
#define RTC_TSTR_MNU_2               (0x4U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000400 */
#define RTC_TSTR_MNU_3               (0x8U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000800 */
#define RTC_TSTR_MNT_Pos             (12U)
#define RTC_TSTR_MNT_Msk             (0x7U << RTC_TSTR_MNT_Pos)                         /*!< 0x00007000 */
#define RTC_TSTR_MNT                 RTC_TSTR_MNT_Msk
#define RTC_TSTR_MNT_0               (0x1U << RTC_TSTR_MNT_Pos)                         /*!< 0x00001000 */
#define RTC_TSTR_MNT_1               (0x2U << RTC_TSTR_MNT_Pos)                         /*!< 0x00002000 */
#define RTC_TSTR_MNT_2               (0x4U << RTC_TSTR_MNT_Pos)                         /*!< 0x00004000 */
#define RTC_TSTR_HU_Pos              (16U)
#define RTC_TSTR_HU_Msk              (0xFU << RTC_TSTR_HU_Pos)                          /*!< 0x000F0000 */
#define RTC_TSTR_HU                  RTC_TSTR_HU_Msk
#define RTC_TSTR_HU_0                (0x1U << RTC_TSTR_HU_Pos)                          /*!< 0x00010000 */
#define RTC_TSTR_HU_1                (0x2U << RTC_TSTR_HU_Pos)                          /*!< 0x00020000 */
#define RTC_TSTR_HU_2                (0x4U << RTC_TSTR_HU_Pos)                          /*!< 0x00040000 */
#define RTC_TSTR_HU_3                (0x8U << RTC_TSTR_HU_Pos)                          /*!< 0x00080000 */
#define RTC_TSTR_HT_Pos              (20U)
#define RTC_TSTR_HT_Msk              (0x3U << RTC_TSTR_HT_Pos)                          /*!< 0x00300000 */
#define RTC_TSTR_HT                  RTC_TSTR_HT_Msk
#define RTC_TSTR_HT_0                (0x1U << RTC_TSTR_HT_Pos)                          /*!< 0x00100000 */
#define RTC_TSTR_HT_1                (0x2U << RTC_TSTR_HT_Pos)                          /*!< 0x00200000 */
#define RTC_TSTR_PM_Pos              (22U)
#define RTC_TSTR_PM_Msk              (0x1U << RTC_TSTR_PM_Pos)                          /*!< 0x00400000 */
#define RTC_TSTR_PM                  RTC_TSTR_PM_Msk                                    /*!< TBD - config 1 > */

/********************  Bits definition for RTC_TSDR register  *****************/
#define RTC_TSDR_DU_Pos              (0U)
#define RTC_TSDR_DU_Msk              (0xFU << RTC_TSDR_DU_Pos)                          /*!< 0x0000000F */
#define RTC_TSDR_DU                  RTC_TSDR_DU_Msk
#define RTC_TSDR_DU_0                (0x1U << RTC_TSDR_DU_Pos)                          /*!< 0x00000001 */
#define RTC_TSDR_DU_1                (0x2U << RTC_TSDR_DU_Pos)                          /*!< 0x00000002 */
#define RTC_TSDR_DU_2                (0x4U << RTC_TSDR_DU_Pos)                          /*!< 0x00000004 */
#define RTC_TSDR_DU_3                (0x8U << RTC_TSDR_DU_Pos)                          /*!< 0x00000008 */
#define RTC_TSDR_DT_Pos              (4U)
#define RTC_TSDR_DT_Msk              (0x3U << RTC_TSDR_DT_Pos)                          /*!< 0x00000030 */
#define RTC_TSDR_DT                  RTC_TSDR_DT_Msk
#define RTC_TSDR_DT_0                (0x1U << RTC_TSDR_DT_Pos)                          /*!< 0x00000010 */
#define RTC_TSDR_DT_1                (0x2U << RTC_TSDR_DT_Pos)                          /*!< 0x00000020 */
#define RTC_TSDR_MU_Pos              (8U)
#define RTC_TSDR_MU_Msk              (0xFU << RTC_TSDR_MU_Pos)                          /*!< 0x00000F00 */
#define RTC_TSDR_MU                  RTC_TSDR_MU_Msk
#define RTC_TSDR_MU_0                (0x1U << RTC_TSDR_MU_Pos)                          /*!< 0x00000100 */
#define RTC_TSDR_MU_1                (0x2U << RTC_TSDR_MU_Pos)                          /*!< 0x00000200 */
#define RTC_TSDR_MU_2                (0x4U << RTC_TSDR_MU_Pos)                          /*!< 0x00000400 */
#define RTC_TSDR_MU_3                (0x8U << RTC_TSDR_MU_Pos)                          /*!< 0x00000800 */
#define RTC_TSDR_MT_Pos              (12U)
#define RTC_TSDR_MT_Msk              (0x1U << RTC_TSDR_MT_Pos)                          /*!< 0x00001000 */
#define RTC_TSDR_MT                  RTC_TSDR_MT_Msk
#define RTC_TSDR_WDU_Pos             (13U)
#define RTC_TSDR_WDU_Msk             (0x7U << RTC_TSDR_WDU_Pos)                         /*!< 0x0000E000 */
#define RTC_TSDR_WDU                 RTC_TSDR_WDU_Msk                                   /*!< TBD - config 1 > */
#define RTC_TSDR_WDU_0               (0x1U << RTC_TSDR_WDU_Pos)                         /*!< 0x00002000 */
#define RTC_TSDR_WDU_1               (0x2U << RTC_TSDR_WDU_Pos)                         /*!< 0x00004000 */
#define RTC_TSDR_WDU_2               (0x4U << RTC_TSDR_WDU_Pos)                         /*!< 0x00008000 */

/********************  Bits definition for RTC_TSSSR register  ****************/
#define RTC_TSSSR_SS_Pos             (0U)
#define RTC_TSSSR_SS_Msk             (0xFFFFFFFFUL << RTC_TSSSR_SS_Pos)            /*!< 0xFFFFFFFF */
#define RTC_TSSSR_SS                 RTC_TSSSR_SS_Msk                             /*!< rtc timestamp sub second > */

/********************  Bits definition for RTC_ALRMAR register  ***************/
#define RTC_ALRMAR_SU_Pos            (0U)
#define RTC_ALRMAR_SU_Msk            (0xFU << RTC_ALRMAR_SU_Pos)                        /*!< 0x0000000F */
#define RTC_ALRMAR_SU                RTC_ALRMAR_SU_Msk
#define RTC_ALRMAR_SU_0              (0x1U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000001 */
#define RTC_ALRMAR_SU_1              (0x2U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000002 */
#define RTC_ALRMAR_SU_2              (0x4U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000004 */
#define RTC_ALRMAR_SU_3              (0x8U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000008 */
#define RTC_ALRMAR_ST_Pos            (4U)
#define RTC_ALRMAR_ST_Msk            (0x7U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000070 */
#define RTC_ALRMAR_ST                RTC_ALRMAR_ST_Msk
#define RTC_ALRMAR_ST_0              (0x1U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000010 */
#define RTC_ALRMAR_ST_1              (0x2U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000020 */
#define RTC_ALRMAR_ST_2              (0x4U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000040 */
#define RTC_ALRMAR_MSK1_Pos          (7U)
#define RTC_ALRMAR_MSK1_Msk          (0x1U << RTC_ALRMAR_MSK1_Pos)                      /*!< 0x00000080 */
#define RTC_ALRMAR_MSK1              RTC_ALRMAR_MSK1_Msk
#define RTC_ALRMAR_MNU_Pos           (8U)
#define RTC_ALRMAR_MNU_Msk           (0xFU << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000F00 */
#define RTC_ALRMAR_MNU               RTC_ALRMAR_MNU_Msk
#define RTC_ALRMAR_MNU_0             (0x1U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000100 */
#define RTC_ALRMAR_MNU_1             (0x2U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000200 */
#define RTC_ALRMAR_MNU_2             (0x4U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000400 */
#define RTC_ALRMAR_MNU_3             (0x8U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000800 */
#define RTC_ALRMAR_MNT_Pos           (12U)
#define RTC_ALRMAR_MNT_Msk           (0x7U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00007000 */
#define RTC_ALRMAR_MNT               RTC_ALRMAR_MNT_Msk
#define RTC_ALRMAR_MNT_0             (0x1U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00001000 */
#define RTC_ALRMAR_MNT_1             (0x2U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00002000 */
#define RTC_ALRMAR_MNT_2             (0x4U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00004000 */
#define RTC_ALRMAR_MSK2_Pos          (15U)
#define RTC_ALRMAR_MSK2_Msk          (0x1U << RTC_ALRMAR_MSK2_Pos)                      /*!< 0x00008000 */
#define RTC_ALRMAR_MSK2              RTC_ALRMAR_MSK2_Msk
#define RTC_ALRMAR_HU_Pos            (16U)
#define RTC_ALRMAR_HU_Msk            (0xFU << RTC_ALRMAR_HU_Pos)                        /*!< 0x000F0000 */
#define RTC_ALRMAR_HU                RTC_ALRMAR_HU_Msk
#define RTC_ALRMAR_HU_0              (0x1U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00010000 */
#define RTC_ALRMAR_HU_1              (0x2U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00020000 */
#define RTC_ALRMAR_HU_2              (0x4U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00040000 */
#define RTC_ALRMAR_HU_3              (0x8U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00080000 */
#define RTC_ALRMAR_HT_Pos            (20U)
#define RTC_ALRMAR_HT_Msk            (0x3U << RTC_ALRMAR_HT_Pos)                        /*!< 0x00300000 */
#define RTC_ALRMAR_HT                RTC_ALRMAR_HT_Msk
#define RTC_ALRMAR_HT_0              (0x1U << RTC_ALRMAR_HT_Pos)                        /*!< 0x00100000 */
#define RTC_ALRMAR_HT_1              (0x2U << RTC_ALRMAR_HT_Pos)                        /*!< 0x00200000 */
#define RTC_ALRMAR_PM_Pos            (22U)
#define RTC_ALRMAR_PM_Msk            (0x1U << RTC_ALRMAR_PM_Pos)                        /*!< 0x00400000 */
#define RTC_ALRMAR_PM                RTC_ALRMAR_PM_Msk
#define RTC_ALRMAR_MSK3_Pos          (23U)
#define RTC_ALRMAR_MSK3_Msk          (0x1U << RTC_ALRMAR_MSK3_Pos)                      /*!< 0x00800000 */
#define RTC_ALRMAR_MSK3              RTC_ALRMAR_MSK3_Msk
#define RTC_ALRMAR_DU_Pos            (24U)
#define RTC_ALRMAR_DU_Msk            (0xFU << RTC_ALRMAR_DU_Pos)                        /*!< 0x0F000000 */
#define RTC_ALRMAR_DU                RTC_ALRMAR_DU_Msk
#define RTC_ALRMAR_DU_0              (0x1U << RTC_ALRMAR_DU_Pos)                        /*!< 0x01000000 */
#define RTC_ALRMAR_DU_1              (0x2U << RTC_ALRMAR_DU_Pos)                        /*!< 0x02000000 */
#define RTC_ALRMAR_DU_2              (0x4U << RTC_ALRMAR_DU_Pos)                        /*!< 0x04000000 */
#define RTC_ALRMAR_DU_3              (0x8U << RTC_ALRMAR_DU_Pos)                        /*!< 0x08000000 */
#define RTC_ALRMAR_DT_Pos            (28U)
#define RTC_ALRMAR_DT_Msk            (0x3U << RTC_ALRMAR_DT_Pos)                        /*!< 0x30000000 */
#define RTC_ALRMAR_DT                RTC_ALRMAR_DT_Msk
#define RTC_ALRMAR_DT_0              (0x1U << RTC_ALRMAR_DT_Pos)                        /*!< 0x10000000 */
#define RTC_ALRMAR_DT_1              (0x2U << RTC_ALRMAR_DT_Pos)                        /*!< 0x20000000 */
#define RTC_ALRMAR_WDSEL_Pos         (30U)
#define RTC_ALRMAR_WDSEL_Msk         (0x1U << RTC_ALRMAR_WDSEL_Pos)                     /*!< 0x40000000 */
#define RTC_ALRMAR_WDSEL             RTC_ALRMAR_WDSEL_Msk
#define RTC_ALRMAR_MSK4_Pos          (31U)
#define RTC_ALRMAR_MSK4_Msk          (0x1U << RTC_ALRMAR_MSK4_Pos)                      /*!< 0x80000000 */
#define RTC_ALRMAR_MSK4              RTC_ALRMAR_MSK4_Msk

/********************  Bits definition for RTC_ALRMASSR register  *************/
#define RTC_ALRMASSR_SS_Pos          (0U)
#define RTC_ALRMASSR_SS_Msk          (0x7FFFU << RTC_ALRMASSR_SS_Pos)                   /*!< 0x00007FFF */
#define RTC_ALRMASSR_SS              RTC_ALRMASSR_SS_Msk
#define RTC_ALRMASSR_MASKSS_Pos      (24U)
#define RTC_ALRMASSR_MASKSS_Msk      (0x3FU << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x3F000000 */
#define RTC_ALRMASSR_MASKSS          RTC_ALRMASSR_MASKSS_Msk
#define RTC_ALRMASSR_MASKSS_0        (0x1U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x01000000 */
#define RTC_ALRMASSR_MASKSS_1        (0x2U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x02000000 */
#define RTC_ALRMASSR_MASKSS_2        (0x4U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x04000000 */
#define RTC_ALRMASSR_MASKSS_3        (0x8U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x08000000 */
#define RTC_ALRMASSR_MASKSS_4        (0x10U << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMASSR_MASKSS_5        (0x20U << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMASSR_SSCLR_Pos       (31U)
#define RTC_ALRMASSR_SSCLR_Msk       (0x1UL << RTC_ALRMASSR_SSCLR_Pos)                  /*!< 0x80000000 */
#define RTC_ALRMASSR_SSCLR           RTC_ALRMASSR_SSCLR_Msk

/********************  Bits definition for RTC_ALRMBR register  ***************/
#define RTC_ALRMBR_SU_Pos            (0U)
#define RTC_ALRMBR_SU_Msk            (0xFU << RTC_ALRMBR_SU_Pos)                        /*!< 0x0000000F */
#define RTC_ALRMBR_SU                RTC_ALRMBR_SU_Msk
#define RTC_ALRMBR_SU_0              (0x1U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000001 */
#define RTC_ALRMBR_SU_1              (0x2U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000002 */
#define RTC_ALRMBR_SU_2              (0x4U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000004 */
#define RTC_ALRMBR_SU_3              (0x8U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000008 */
#define RTC_ALRMBR_ST_Pos            (4U)
#define RTC_ALRMBR_ST_Msk            (0x7U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000070 */
#define RTC_ALRMBR_ST                RTC_ALRMBR_ST_Msk
#define RTC_ALRMBR_ST_0              (0x1U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000010 */
#define RTC_ALRMBR_ST_1              (0x2U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000020 */
#define RTC_ALRMBR_ST_2              (0x4U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000040 */
#define RTC_ALRMBR_MSK1_Pos          (7U)
#define RTC_ALRMBR_MSK1_Msk          (0x1U << RTC_ALRMBR_MSK1_Pos)                      /*!< 0x00000080 */
#define RTC_ALRMBR_MSK1              RTC_ALRMBR_MSK1_Msk
#define RTC_ALRMBR_MNU_Pos           (8U)
#define RTC_ALRMBR_MNU_Msk           (0xFU << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000F00 */
#define RTC_ALRMBR_MNU               RTC_ALRMBR_MNU_Msk
#define RTC_ALRMBR_MNU_0             (0x1U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000100 */
#define RTC_ALRMBR_MNU_1             (0x2U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000200 */
#define RTC_ALRMBR_MNU_2             (0x4U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000400 */
#define RTC_ALRMBR_MNU_3             (0x8U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000800 */
#define RTC_ALRMBR_MNT_Pos           (12U)
#define RTC_ALRMBR_MNT_Msk           (0x7U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00007000 */
#define RTC_ALRMBR_MNT               RTC_ALRMBR_MNT_Msk
#define RTC_ALRMBR_MNT_0             (0x1U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00001000 */
#define RTC_ALRMBR_MNT_1             (0x2U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00002000 */
#define RTC_ALRMBR_MNT_2             (0x4U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00004000 */
#define RTC_ALRMBR_MSK2_Pos          (15U)
#define RTC_ALRMBR_MSK2_Msk          (0x1U << RTC_ALRMBR_MSK2_Pos)                      /*!< 0x00008000 */
#define RTC_ALRMBR_MSK2              RTC_ALRMBR_MSK2_Msk
#define RTC_ALRMBR_HU_Pos            (16U)
#define RTC_ALRMBR_HU_Msk            (0xFU << RTC_ALRMBR_HU_Pos)                        /*!< 0x000F0000 */
#define RTC_ALRMBR_HU                RTC_ALRMBR_HU_Msk
#define RTC_ALRMBR_HU_0              (0x1U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00010000 */
#define RTC_ALRMBR_HU_1              (0x2U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00020000 */
#define RTC_ALRMBR_HU_2              (0x4U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00040000 */
#define RTC_ALRMBR_HU_3              (0x8U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00080000 */
#define RTC_ALRMBR_HT_Pos            (20U)
#define RTC_ALRMBR_HT_Msk            (0x3U << RTC_ALRMBR_HT_Pos)                        /*!< 0x00300000 */
#define RTC_ALRMBR_HT                RTC_ALRMBR_HT_Msk
#define RTC_ALRMBR_HT_0              (0x1U << RTC_ALRMBR_HT_Pos)                        /*!< 0x00100000 */
#define RTC_ALRMBR_HT_1              (0x2U << RTC_ALRMBR_HT_Pos)                        /*!< 0x00200000 */
#define RTC_ALRMBR_PM_Pos            (22U)
#define RTC_ALRMBR_PM_Msk            (0x1U << RTC_ALRMBR_PM_Pos)                        /*!< 0x00400000 */
#define RTC_ALRMBR_PM                RTC_ALRMBR_PM_Msk
#define RTC_ALRMBR_MSK3_Pos          (23U)
#define RTC_ALRMBR_MSK3_Msk          (0x1U << RTC_ALRMBR_MSK3_Pos)                      /*!< 0x00800000 */
#define RTC_ALRMBR_MSK3              RTC_ALRMBR_MSK3_Msk
#define RTC_ALRMBR_DU_Pos            (24U)
#define RTC_ALRMBR_DU_Msk            (0xFU << RTC_ALRMBR_DU_Pos)                        /*!< 0x0F000000 */
#define RTC_ALRMBR_DU                RTC_ALRMBR_DU_Msk
#define RTC_ALRMBR_DU_0              (0x1U << RTC_ALRMBR_DU_Pos)                        /*!< 0x01000000 */
#define RTC_ALRMBR_DU_1              (0x2U << RTC_ALRMBR_DU_Pos)                        /*!< 0x02000000 */
#define RTC_ALRMBR_DU_2              (0x4U << RTC_ALRMBR_DU_Pos)                        /*!< 0x04000000 */
#define RTC_ALRMBR_DU_3              (0x8U << RTC_ALRMBR_DU_Pos)                        /*!< 0x08000000 */
#define RTC_ALRMBR_DT_Pos            (28U)
#define RTC_ALRMBR_DT_Msk            (0x3U << RTC_ALRMBR_DT_Pos)                        /*!< 0x30000000 */
#define RTC_ALRMBR_DT                RTC_ALRMBR_DT_Msk
#define RTC_ALRMBR_DT_0              (0x1U << RTC_ALRMBR_DT_Pos)                        /*!< 0x10000000 */
#define RTC_ALRMBR_DT_1              (0x2U << RTC_ALRMBR_DT_Pos)                        /*!< 0x20000000 */
#define RTC_ALRMBR_WDSEL_Pos         (30U)
#define RTC_ALRMBR_WDSEL_Msk         (0x1U << RTC_ALRMBR_WDSEL_Pos)                     /*!< 0x40000000 */
#define RTC_ALRMBR_WDSEL             RTC_ALRMBR_WDSEL_Msk
#define RTC_ALRMBR_MSK4_Pos          (31U)
#define RTC_ALRMBR_MSK4_Msk          (0x1U << RTC_ALRMBR_MSK4_Pos)                      /*!< 0x80000000 */
#define RTC_ALRMBR_MSK4              RTC_ALRMBR_MSK4_Msk

/********************  Bits definition for RTC_ALRMBSSR register  *************/
#define RTC_ALRMBSSR_SS_Pos          (0U)
#define RTC_ALRMBSSR_SS_Msk          (0x7FFFU << RTC_ALRMBSSR_SS_Pos)                   /*!< 0x00007FFF */
#define RTC_ALRMBSSR_SS              RTC_ALRMBSSR_SS_Msk
#define RTC_ALRMBSSR_MASKSS_Pos      (24U)
#define RTC_ALRMBSSR_MASKSS_Msk      (0x3FU << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x3F000000 */
#define RTC_ALRMBSSR_MASKSS          RTC_ALRMBSSR_MASKSS_Msk
#define RTC_ALRMBSSR_MASKSS_0        (0x1U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x01000000 */
#define RTC_ALRMBSSR_MASKSS_1        (0x2U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x02000000 */
#define RTC_ALRMBSSR_MASKSS_2        (0x4U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x04000000 */
#define RTC_ALRMBSSR_MASKSS_3        (0x8U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x08000000 */
#define RTC_ALRMBSSR_MASKSS_4        (0x10U << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMBSSR_MASKSS_5        (0x20U << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMBSSR_SSCLR_Pos       (31U)
#define RTC_ALRMBSSR_SSCLR_Msk       (0x1UL << RTC_ALRMBSSR_SSCLR_Pos)                  /*!< 0x80000000 */
#define RTC_ALRMBSSR_SSCLR           RTC_ALRMBSSR_SSCLR_Msk

/********************  Bits definition for RTC_SR register  *******************/
#define RTC_SR_ALRAF_Pos             (0U)
#define RTC_SR_ALRAF_Msk             (0x1U << RTC_SR_ALRAF_Pos)                         /*!< 0x00000001 */
#define RTC_SR_ALRAF                 RTC_SR_ALRAF_Msk
#define RTC_SR_ALRBF_Pos             (1U)
#define RTC_SR_ALRBF_Msk             (0x1U << RTC_SR_ALRBF_Pos)                         /*!< 0x00000002 */
#define RTC_SR_ALRBF                 RTC_SR_ALRBF_Msk
#define RTC_SR_WUTF_Pos              (2U)
#define RTC_SR_WUTF_Msk              (0x1U << RTC_SR_WUTF_Pos)                          /*!< 0x00000004 */
#define RTC_SR_WUTF                  RTC_SR_WUTF_Msk
#define RTC_SR_TSF_Pos               (3U)
#define RTC_SR_TSF_Msk               (0x1U << RTC_SR_TSF_Pos)                           /*!< 0x00000008 */
#define RTC_SR_TSF                   RTC_SR_TSF_Msk
#define RTC_SR_TSOVF_Pos             (4U)
#define RTC_SR_TSOVF_Msk             (0x1U << RTC_SR_TSOVF_Pos)                         /*!< 0x00000010 */
#define RTC_SR_TSOVF                 RTC_SR_TSOVF_Msk
#define RTC_SR_ITSF_Pos              (5U)
#define RTC_SR_ITSF_Msk              (0x1U << RTC_SR_ITSF_Pos)                          /*!< 0x00000020 */
#define RTC_SR_ITSF                  RTC_SR_ITSF_Msk
#define RTC_SR_SSRUF_Pos             (6U)
#define RTC_SR_SSRUF_Msk             (0x1UL << RTC_SR_SSRUF_Pos)                       /*!< 0x00000040 */
#define RTC_SR_SSRUF                 RTC_SR_SSRUF_Msk

/********************  Bits definition for RTC_MISR register  *****************/
#define RTC_MISR_ALRAMF_Pos          (0U)
#define RTC_MISR_ALRAMF_Msk          (0x1U << RTC_MISR_ALRAMF_Pos)                      /*!< 0x00000001 */
#define RTC_MISR_ALRAMF              RTC_MISR_ALRAMF_Msk
#define RTC_MISR_ALRBMF_Pos          (1U)
#define RTC_MISR_ALRBMF_Msk          (0x1U << RTC_MISR_ALRBMF_Pos)                      /*!< 0x00000002 */
#define RTC_MISR_ALRBMF              RTC_MISR_ALRBMF_Msk
#define RTC_MISR_WUTMF_Pos           (2U)
#define RTC_MISR_WUTMF_Msk           (0x1U << RTC_MISR_WUTMF_Pos)                       /*!< 0x00000004 */
#define RTC_MISR_WUTMF               RTC_MISR_WUTMF_Msk
#define RTC_MISR_TSMF_Pos            (3U)
#define RTC_MISR_TSMF_Msk            (0x1U << RTC_MISR_TSMF_Pos)                        /*!< 0x00000008 */
#define RTC_MISR_TSMF                RTC_MISR_TSMF_Msk
#define RTC_MISR_TSOVMF_Pos          (4U)
#define RTC_MISR_TSOVMF_Msk          (0x1U << RTC_MISR_TSOVMF_Pos)                      /*!< 0x00000010 */
#define RTC_MISR_TSOVMF              RTC_MISR_TSOVMF_Msk
#define RTC_MISR_ITSMF_Pos           (5U)
#define RTC_MISR_ITSMF_Msk           (0x1U << RTC_MISR_ITSMF_Pos)                       /*!< 0x00000020 */
#define RTC_MISR_ITSMF               RTC_MISR_ITSMF_Msk
#define RTC_MISR_SSRUMF_Pos          (6U)
#define RTC_MISR_SSRUMF_Msk          (0x1UL << RTC_MISR_SSRUMF_Pos)            /*!< 0x00000040 */
#define RTC_MISR_SSRUMF              RTC_MISR_SSRUMF_Msk

/********************  Bits definition for RTC_SMISR register  *****************/
#define RTC_SMISR_ALRAMF_Pos         (0U)
#define RTC_SMISR_ALRAMF_Msk         (0x1U << RTC_SMISR_ALRAMF_Pos)                     /*!< 0x00000001 */
#define RTC_SMISR_ALRAMF             RTC_SMISR_ALRAMF_Msk
#define RTC_SMISR_ALRBMF_Pos         (1U)
#define RTC_SMISR_ALRBMF_Msk         (0x1U << RTC_SMISR_ALRBMF_Pos)                     /*!< 0x00000002 */
#define RTC_SMISR_ALRBMF             RTC_SMISR_ALRBMF_Msk
#define RTC_SMISR_WUTMF_Pos          (2U)
#define RTC_SMISR_WUTMF_Msk          (0x1U << RTC_SMISR_WUTMF_Pos)                      /*!< 0x00000004 */
#define RTC_SMISR_WUTMF              RTC_SMISR_WUTMF_Msk
#define RTC_SMISR_TSMF_Pos           (3U)
#define RTC_SMISR_TSMF_Msk           (0x1U << RTC_SMISR_TSMF_Pos)                       /*!< 0x00000008 */
#define RTC_SMISR_TSMF               RTC_SMISR_TSMF_Msk
#define RTC_SMISR_TSOVMF_Pos         (4U)
#define RTC_SMISR_TSOVMF_Msk         (0x1U << RTC_SMISR_TSOVMF_Pos)                     /*!< 0x00000010 */
#define RTC_SMISR_TSOVMF             RTC_SMISR_TSOVMF_Msk
#define RTC_SMISR_ITSMF_Pos          (5U)
#define RTC_SMISR_ITSMF_Msk          (0x1U << RTC_SMISR_ITSMF_Pos)                      /*!< 0x00000020 */
#define RTC_SMISR_ITSMF              RTC_SMISR_ITSMF_Msk
#define RTC_SMISR_SSRUMF_Pos         (6U)
#define RTC_SMISR_SSRUMF_Msk         (0x1UL << RTC_SMISR_SSRUMF_Pos)                   /*!< 0x00000040 */
#define RTC_SMISR_SSRUMF             RTC_SMISR_SSRUMF_Msk

/********************  Bits definition for RTC_SCR register  ******************/
#define RTC_SCR_CALRAF_Pos           (0U)
#define RTC_SCR_CALRAF_Msk           (0x1U << RTC_SCR_CALRAF_Pos)                       /*!< 0x00000001 */
#define RTC_SCR_CALRAF               RTC_SCR_CALRAF_Msk
#define RTC_SCR_CALRBF_Pos           (1U)
#define RTC_SCR_CALRBF_Msk           (0x1U << RTC_SCR_CALRBF_Pos)                       /*!< 0x00000002 */
#define RTC_SCR_CALRBF               RTC_SCR_CALRBF_Msk
#define RTC_SCR_CWUTF_Pos            (2U)
#define RTC_SCR_CWUTF_Msk            (0x1U << RTC_SCR_CWUTF_Pos)                        /*!< 0x00000004 */
#define RTC_SCR_CWUTF                RTC_SCR_CWUTF_Msk
#define RTC_SCR_CTSF_Pos             (3U)
#define RTC_SCR_CTSF_Msk             (0x1U << RTC_SCR_CTSF_Pos)                         /*!< 0x00000008 */
#define RTC_SCR_CTSF                 RTC_SCR_CTSF_Msk
#define RTC_SCR_CTSOVF_Pos           (4U)
#define RTC_SCR_CTSOVF_Msk           (0x1U << RTC_SCR_CTSOVF_Pos)                       /*!< 0x00000010 */
#define RTC_SCR_CTSOVF               RTC_SCR_CTSOVF_Msk
#define RTC_SCR_CITSF_Pos            (5U)
#define RTC_SCR_CITSF_Msk            (0x1U << RTC_SCR_CITSF_Pos)                        /*!< 0x00000020 */
#define RTC_SCR_CITSF                RTC_SCR_CITSF_Msk
#define RTC_SCR_CSSRUF_Pos           (6U)
#define RTC_SCR_CSSRUF_Msk           (0x1UL << RTC_SCR_CSSRUF_Pos)                      /*!< 0x00000040 */
#define RTC_SCR_CSSRUF               RTC_SCR_CSSRUF_Msk

/*******************  Bits definition for RTC_CFGR register  ******************/
#define RTC_CFGR_OUT2_RMP_Pos        (0U)
#define RTC_CFGR_OUT2_RMP_Msk        (0x1U << RTC_CFGR_OUT2_RMP_Pos)                    /*!< 0x00000001 */
#define RTC_CFGR_OUT2_RMP            RTC_CFGR_OUT2_RMP_Msk

/********************  Bits definition for RTC_ALRABINR register  ******************/
#define RTC_ALRABINR_SS_Pos          (0U)
#define RTC_ALRABINR_SS_Msk          (0xFFFFFFFFUL << RTC_ALRABINR_SS_Pos)              /*!< 0xFFFFFFFF */
#define RTC_ALRABINR_SS              RTC_ALRABINR_SS_Msk

/********************  Bits definition for RTC_ALRBBINR register  ******************/
#define RTC_ALRBBINR_SS_Pos          (0U)
#define RTC_ALRBBINR_SS_Msk          (0xFFFFFFFFUL << RTC_ALRBBINR_SS_Pos)              /*!< 0xFFFFFFFF */
#define RTC_ALRBBINR_SS              RTC_ALRBBINR_SS_Msk

/********************  Bits definition for RTC_RCIDCFGR register  ******************/
#define RTC_RCIDCFGR_CFEN_Pos          (0U)
#define RTC_RCIDCFGR_CFEN_Msk          (0x1UL << RTC_RCIDCFGR_CFEN_Pos)                 /*!< 0xFFFFFFFF */
#define RTC_RCIDCFGR_CFEN              RTC_RCIDCFGR_CFEN_Msk
#define RTC_RCIDCFGR_CID_Pos           (4U)
#define RTC_RCIDCFGR_CID_Msk           (0xFUL << RTC_RCIDCFGR_CID_Pos)                  /*!< 0x000000F0 */
#define RTC_RCIDCFGR_CID               RTC_RCIDCFGR_CID_Msk

/********************  Bits definition for RTC_HWCFGR register  ******************/
#define RTC_HWCFGR_ALARMB_Pos          (0U)
#define RTC_HWCFGR_ALARMB_Msk          (0xFUL << RTC_HWCFGR_ALARMB_Pos)                 /*!< 0x0000000F */
#define RTC_HWCFGR_ALARMB              RTC_HWCFGR_ALARMB_Msk
#define RTC_HWCFGR_WAKEUP_Pos          (4U)
#define RTC_HWCFGR_WAKEUP_Msk          (0xFUL << RTC_HWCFGR_WAKEUP_Pos)                 /*!< 0x000000F0 */
#define RTC_HWCFGR_WAKEUP              RTC_HWCFGR_WAKEUP_Msk
#define RTC_HWCFGR_SMOOTH_CALIB_Pos    (8U)
#define RTC_HWCFGR_SMOOTH_CALIB_Msk    (0xFUL << RTC_HWCFGR_SMOOTH_CALIB_Pos)           /*!< 0x00000F00 */
#define RTC_HWCFGR_SMOOTH_CALIB        RTC_HWCFGR_SMOOTH_CALIB_Msk
#define RTC_HWCFGR_TIMESTAMP_Pos       (12U)
#define RTC_HWCFGR_TIMESTAMP_Msk       (0xFUL << RTC_HWCFGR_TIMESTAMP_Pos)              /*!< 0x00000F000 */
#define RTC_HWCFGR_TIMESTAMP           RTC_HWCFGR_TIMESTAMP_Msk
#define RTC_HWCFGR_OPTIONREG_OUT_Pos   (16U)
#define RTC_HWCFGR_OPTIONREG_OUT_Msk   (0xFFUL << RTC_HWCFGR_OPTIONREG_OUT_Pos)         /*!< 0x00FF0000 */
#define RTC_HWCFGR_OPTIONREG_OUT       RTC_HWCFGR_OPTIONREG_OUT_Msk
#define RTC_HWCFGR_TRUST_ZONE_Pos      (24U)
#define RTC_HWCFGR_TRUST_ZONE_Msk      (0xFUL << RTC_HWCFGR_TRUST_ZONE_Pos)             /*!< 0x0F000000 */
#define RTC_HWCFGR_TRUST_ZONE          RTC_HWCFGR_TRUST_ZONE_Msk
#define RTC_HWCFGR_RIF_Pos             (24U)
#define RTC_HWCFGR_RIF_Msk             (0xFUL << RTC_HWCFGR_RIF_Pos)                    /*!< 0xF0000000 */
#define RTC_HWCFGR_RIF                 RTC_HWCFGR_RIF_Msk

/*******************  Bits definition for RTC_VERR register  **************/
#define RTC_VERR_MINREV_Pos            (0U)
#define RTC_VERR_MINREV_Msk            (0x4UL << RTC_VERR_MINREV_Pos)                   /*!< 0x0000000F */
#define RTC_VERR_MINREV                RTC_VERR_MINREV_Msk                              /*!< RTC Minor version */
#define RTC_VERR_MAJREV_Pos            (4U)
#define RTC_VERR_MAJREV_Msk            (0x4UL << RTC_VERR_MAJREV_Pos)                   /*!< 0x000000F0 */
#define RTC_VERR_MAJREV                RTC_VERR_MAJREV_Msk                              /*!< RTC Major version */

/*******************  Bits definition for RTC_IPIDR register  **************/
#define RTC_IPIDR_ID_Pos               (0U)
#define RTC_IPIDR_ID_Msk               (0xFFFFFFFFUL << RTC_IPIDR_ID_Pos)               /*!< 0xFFFFFFFF */
#define RTC_IPIDR_ID                   RTC_IPIDR_ID_Msk                                 /*!< RTC ID */

/*******************  Bits definition for RTC_SIDR register  **************/
#define RTC_SIDR_SID_Pos               (0U)
#define RTC_SIDR_SID_Msk               (0xFFFFFFFFUL << RTC_SIDR_SID_Pos)               /*!< 0xFFFFFFFF */
#define RTC_SIDR_SID                   RTC_SIDR_SID_Msk                                 /*!< RTC Size ID */

/******************************************************************************/
/*                                                                            */
/*                          Serial Audio Interface                            */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for SAI_GCR register  *******************/
#define SAI_GCR_SYNCIN_Pos         (0U)
#define SAI_GCR_SYNCIN_Msk         (0x3UL << SAI_GCR_SYNCIN_Pos)                /*!< 0x00000003 */
#define SAI_GCR_SYNCIN             SAI_GCR_SYNCIN_Msk                           /*!<SYNCIN[1:0] bits (Synchronization Inputs)   */
#define SAI_GCR_SYNCIN_0           (0x1UL << SAI_GCR_SYNCIN_Pos)                /*!< 0x00000001 */
#define SAI_GCR_SYNCIN_1           (0x2UL << SAI_GCR_SYNCIN_Pos)                /*!< 0x00000002 */

#define SAI_GCR_SYNCOUT_Pos        (4U)
#define SAI_GCR_SYNCOUT_Msk        (0x3UL << SAI_GCR_SYNCOUT_Pos)               /*!< 0x00000030 */
#define SAI_GCR_SYNCOUT            SAI_GCR_SYNCOUT_Msk                          /*!<SYNCOUT[1:0] bits (Synchronization Outputs) */
#define SAI_GCR_SYNCOUT_0          (0x1UL << SAI_GCR_SYNCOUT_Pos)               /*!< 0x00000010 */
#define SAI_GCR_SYNCOUT_1          (0x2UL << SAI_GCR_SYNCOUT_Pos)               /*!< 0x00000020 */

/*******************  Bit definition for SAI_xCR1 register  *******************/
#define SAI_xCR1_MODE_Pos          (0U)
#define SAI_xCR1_MODE_Msk          (0x3UL << SAI_xCR1_MODE_Pos)                 /*!< 0x00000003 */
#define SAI_xCR1_MODE              SAI_xCR1_MODE_Msk                            /*!<MODE[1:0] bits (Audio Block Mode)           */
#define SAI_xCR1_MODE_0            (0x1UL << SAI_xCR1_MODE_Pos)                 /*!< 0x00000001 */
#define SAI_xCR1_MODE_1            (0x2UL << SAI_xCR1_MODE_Pos)                 /*!< 0x00000002 */

#define SAI_xCR1_PRTCFG_Pos        (2U)
#define SAI_xCR1_PRTCFG_Msk        (0x3UL << SAI_xCR1_PRTCFG_Pos)               /*!< 0x0000000C */
#define SAI_xCR1_PRTCFG            SAI_xCR1_PRTCFG_Msk                          /*!<PRTCFG[1:0] bits (Protocol Configuration)   */
#define SAI_xCR1_PRTCFG_0          (0x1UL << SAI_xCR1_PRTCFG_Pos)               /*!< 0x00000004 */
#define SAI_xCR1_PRTCFG_1          (0x2UL << SAI_xCR1_PRTCFG_Pos)               /*!< 0x00000008 */

#define SAI_xCR1_DS_Pos            (5U)
#define SAI_xCR1_DS_Msk            (0x7UL << SAI_xCR1_DS_Pos)                   /*!< 0x000000E0 */
#define SAI_xCR1_DS                SAI_xCR1_DS_Msk                              /*!<DS[1:0] bits (Data Size) */
#define SAI_xCR1_DS_0              (0x1UL << SAI_xCR1_DS_Pos)                   /*!< 0x00000020 */
#define SAI_xCR1_DS_1              (0x2UL << SAI_xCR1_DS_Pos)                   /*!< 0x00000040 */
#define SAI_xCR1_DS_2              (0x4UL << SAI_xCR1_DS_Pos)                   /*!< 0x00000080 */

#define SAI_xCR1_LSBFIRST_Pos      (8U)
#define SAI_xCR1_LSBFIRST_Msk      (0x1UL << SAI_xCR1_LSBFIRST_Pos)             /*!< 0x00000100 */
#define SAI_xCR1_LSBFIRST          SAI_xCR1_LSBFIRST_Msk                        /*!<LSB First Configuration  */
#define SAI_xCR1_CKSTR_Pos         (9U)
#define SAI_xCR1_CKSTR_Msk         (0x1UL << SAI_xCR1_CKSTR_Pos)                /*!< 0x00000200 */
#define SAI_xCR1_CKSTR             SAI_xCR1_CKSTR_Msk                           /*!<ClocK STRobing edge      */

#define SAI_xCR1_SYNCEN_Pos        (10U)
#define SAI_xCR1_SYNCEN_Msk        (0x3UL << SAI_xCR1_SYNCEN_Pos)               /*!< 0x00000C00 */
#define SAI_xCR1_SYNCEN            SAI_xCR1_SYNCEN_Msk                          /*!<SYNCEN[1:0](SYNChronization ENable) */
#define SAI_xCR1_SYNCEN_0          (0x1UL << SAI_xCR1_SYNCEN_Pos)               /*!< 0x00000400 */
#define SAI_xCR1_SYNCEN_1          (0x2UL << SAI_xCR1_SYNCEN_Pos)               /*!< 0x00000800 */

#define SAI_xCR1_MONO_Pos          (12U)
#define SAI_xCR1_MONO_Msk          (0x1UL << SAI_xCR1_MONO_Pos)                 /*!< 0x00001000 */
#define SAI_xCR1_MONO              SAI_xCR1_MONO_Msk                            /*!<Mono mode                  */
#define SAI_xCR1_OUTDRIV_Pos       (13U)
#define SAI_xCR1_OUTDRIV_Msk       (0x1UL << SAI_xCR1_OUTDRIV_Pos)              /*!< 0x00002000 */
#define SAI_xCR1_OUTDRIV           SAI_xCR1_OUTDRIV_Msk                         /*!<Output Drive               */
#define SAI_xCR1_SAIEN_Pos         (16U)
#define SAI_xCR1_SAIEN_Msk         (0x1UL << SAI_xCR1_SAIEN_Pos)                /*!< 0x00010000 */
#define SAI_xCR1_SAIEN             SAI_xCR1_SAIEN_Msk                           /*!<Audio Block enable         */
#define SAI_xCR1_DMAEN_Pos         (17U)
#define SAI_xCR1_DMAEN_Msk         (0x1UL << SAI_xCR1_DMAEN_Pos)                /*!< 0x00020000 */
#define SAI_xCR1_DMAEN             SAI_xCR1_DMAEN_Msk                           /*!<DMA enable                 */
#define SAI_xCR1_NODIV_Pos         (19U)
#define SAI_xCR1_NODIV_Msk         (0x1UL << SAI_xCR1_NODIV_Pos)                /*!< 0x00080000 */
#define SAI_xCR1_NODIV             SAI_xCR1_NODIV_Msk                           /*!<No Divider Configuration   */

#define SAI_xCR1_MCKDIV_Pos        (20U)
#define SAI_xCR1_MCKDIV_Msk        (0x3FUL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x03F00000 */
#define SAI_xCR1_MCKDIV            SAI_xCR1_MCKDIV_Msk                          /*!<MCKDIV[5:0] (Master ClocK Divider)  */
#define SAI_xCR1_MCKDIV_0          (0x01UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00100000 */
#define SAI_xCR1_MCKDIV_1          (0x02UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00200000 */
#define SAI_xCR1_MCKDIV_2          (0x04UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00400000 */
#define SAI_xCR1_MCKDIV_3          (0x08UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00800000 */
#define SAI_xCR1_MCKDIV_4          (0x10UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x01000000 */
#define SAI_xCR1_MCKDIV_5          (0x20UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x02000000 */

#define SAI_xCR1_MCKEN_Pos         (27U)
#define SAI_xCR1_MCKEN_Msk         (0x1UL << SAI_xCR1_MCKEN_Pos)                /*!< 0x08000000 */
#define SAI_xCR1_MCKEN             SAI_xCR1_MCKEN_Msk                           /*!<Master ClocK enable */

#define SAI_xCR1_OSR_Pos           (26U)
#define SAI_xCR1_OSR_Msk           (0x1UL << SAI_xCR1_OSR_Pos)                  /*!< 0x04000000 */
#define SAI_xCR1_OSR               SAI_xCR1_OSR_Msk                             /*!<OverSampling Ratio for master clock  */

/* Legacy define */
#define  SAI_xCR1_NOMCK               SAI_xCR1_NODIV

/*******************  Bit definition for SAI_xCR2 register  *******************/
#define SAI_xCR2_FTH_Pos           (0U)
#define SAI_xCR2_FTH_Msk           (0x7UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000007 */
#define SAI_xCR2_FTH               SAI_xCR2_FTH_Msk                             /*!<FTH[2:0](Fifo THreshold)  */
#define SAI_xCR2_FTH_0             (0x1UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000001 */
#define SAI_xCR2_FTH_1             (0x2UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000002 */
#define SAI_xCR2_FTH_2             (0x4UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000004 */

#define SAI_xCR2_FFLUSH_Pos        (3U)
#define SAI_xCR2_FFLUSH_Msk        (0x1UL << SAI_xCR2_FFLUSH_Pos)               /*!< 0x00000008 */
#define SAI_xCR2_FFLUSH            SAI_xCR2_FFLUSH_Msk                          /*!<Fifo FLUSH                       */
#define SAI_xCR2_TRIS_Pos          (4U)
#define SAI_xCR2_TRIS_Msk          (0x1UL << SAI_xCR2_TRIS_Pos)                 /*!< 0x00000010 */
#define SAI_xCR2_TRIS              SAI_xCR2_TRIS_Msk                            /*!<TRIState Management on data line */
#define SAI_xCR2_MUTE_Pos          (5U)
#define SAI_xCR2_MUTE_Msk          (0x1UL << SAI_xCR2_MUTE_Pos)                 /*!< 0x00000020 */
#define SAI_xCR2_MUTE              SAI_xCR2_MUTE_Msk                            /*!<Mute mode                        */
#define SAI_xCR2_MUTEVAL_Pos       (6U)
#define SAI_xCR2_MUTEVAL_Msk       (0x1UL << SAI_xCR2_MUTEVAL_Pos)              /*!< 0x00000040 */
#define SAI_xCR2_MUTEVAL           SAI_xCR2_MUTEVAL_Msk                         /*!<Muate value                      */

#define SAI_xCR2_MUTECNT_Pos       (7U)
#define SAI_xCR2_MUTECNT_Msk       (0x3FUL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00001F80 */
#define SAI_xCR2_MUTECNT           SAI_xCR2_MUTECNT_Msk                         /*!<MUTECNT[5:0] (MUTE counter) */
#define SAI_xCR2_MUTECNT_0         (0x01UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000080 */
#define SAI_xCR2_MUTECNT_1         (0x02UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000100 */
#define SAI_xCR2_MUTECNT_2         (0x04UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000200 */
#define SAI_xCR2_MUTECNT_3         (0x08UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000400 */
#define SAI_xCR2_MUTECNT_4         (0x10UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000800 */
#define SAI_xCR2_MUTECNT_5         (0x20UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00001000 */

#define SAI_xCR2_CPL_Pos           (13U)
#define SAI_xCR2_CPL_Msk           (0x1UL << SAI_xCR2_CPL_Pos)                  /*!< 0x00002000 */
#define SAI_xCR2_CPL               SAI_xCR2_CPL_Msk                             /*!< Complement Bit             */

#define SAI_xCR2_COMP_Pos          (14U)
#define SAI_xCR2_COMP_Msk          (0x3UL << SAI_xCR2_COMP_Pos)                 /*!< 0x0000C000 */
#define SAI_xCR2_COMP              SAI_xCR2_COMP_Msk                            /*!<COMP[1:0] (Companding mode) */
#define SAI_xCR2_COMP_0            (0x1UL << SAI_xCR2_COMP_Pos)                 /*!< 0x00004000 */
#define SAI_xCR2_COMP_1            (0x2UL << SAI_xCR2_COMP_Pos)                 /*!< 0x00008000 */

/******************  Bit definition for SAI_xFRCR register  *******************/
#define SAI_xFRCR_FRL_Pos          (0U)
#define SAI_xFRCR_FRL_Msk          (0xFFUL << SAI_xFRCR_FRL_Pos)                /*!< 0x000000FF */
#define SAI_xFRCR_FRL              SAI_xFRCR_FRL_Msk                            /*!<FRL[7:0](FRame Length)  */
#define SAI_xFRCR_FRL_0            (0x01UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000001 */
#define SAI_xFRCR_FRL_1            (0x02UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000002 */
#define SAI_xFRCR_FRL_2            (0x04UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000004 */
#define SAI_xFRCR_FRL_3            (0x08UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000008 */
#define SAI_xFRCR_FRL_4            (0x10UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000010 */
#define SAI_xFRCR_FRL_5            (0x20UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000020 */
#define SAI_xFRCR_FRL_6            (0x40UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000040 */
#define SAI_xFRCR_FRL_7            (0x80UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000080 */

#define SAI_xFRCR_FSALL_Pos        (8U)
#define SAI_xFRCR_FSALL_Msk        (0x7FUL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00007F00 */
#define SAI_xFRCR_FSALL            SAI_xFRCR_FSALL_Msk                          /*!<FSALL[6:0] (Frame Synchronization Active Level Length)  */
#define SAI_xFRCR_FSALL_0          (0x01UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000100 */
#define SAI_xFRCR_FSALL_1          (0x02UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000200 */
#define SAI_xFRCR_FSALL_2          (0x04UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000400 */
#define SAI_xFRCR_FSALL_3          (0x08UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000800 */
#define SAI_xFRCR_FSALL_4          (0x10UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00001000 */
#define SAI_xFRCR_FSALL_5          (0x20UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00002000 */
#define SAI_xFRCR_FSALL_6          (0x40UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00004000 */

#define SAI_xFRCR_FSDEF_Pos        (16U)
#define SAI_xFRCR_FSDEF_Msk        (0x1UL << SAI_xFRCR_FSDEF_Pos)               /*!< 0x00010000 */
#define SAI_xFRCR_FSDEF            SAI_xFRCR_FSDEF_Msk                          /*!<Frame Synchronization Definition  */
#define SAI_xFRCR_FSPOL_Pos        (17U)
#define SAI_xFRCR_FSPOL_Msk        (0x1UL << SAI_xFRCR_FSPOL_Pos)               /*!< 0x00020000 */
#define SAI_xFRCR_FSPOL            SAI_xFRCR_FSPOL_Msk                          /*!<Frame Synchronization POLarity    */
#define SAI_xFRCR_FSOFF_Pos        (18U)
#define SAI_xFRCR_FSOFF_Msk        (0x1UL << SAI_xFRCR_FSOFF_Pos)               /*!< 0x00040000 */
#define SAI_xFRCR_FSOFF            SAI_xFRCR_FSOFF_Msk                          /*!<Frame Synchronization OFFset      */

/* Legacy define */
#define  SAI_xFRCR_FSPO                      SAI_xFRCR_FSPOL

/******************  Bit definition for SAI_xSLOTR register  *******************/
#define SAI_xSLOTR_FBOFF_Pos       (0U)
#define SAI_xSLOTR_FBOFF_Msk       (0x1FUL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x0000001F */
#define SAI_xSLOTR_FBOFF           SAI_xSLOTR_FBOFF_Msk                         /*!<FBOFF[4:0](First Bit Offset)  */
#define SAI_xSLOTR_FBOFF_0         (0x01UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000001 */
#define SAI_xSLOTR_FBOFF_1         (0x02UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000002 */
#define SAI_xSLOTR_FBOFF_2         (0x04UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000004 */
#define SAI_xSLOTR_FBOFF_3         (0x08UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000008 */
#define SAI_xSLOTR_FBOFF_4         (0x10UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000010 */

#define SAI_xSLOTR_SLOTSZ_Pos      (6U)
#define SAI_xSLOTR_SLOTSZ_Msk      (0x3UL << SAI_xSLOTR_SLOTSZ_Pos)             /*!< 0x000000C0 */
#define SAI_xSLOTR_SLOTSZ          SAI_xSLOTR_SLOTSZ_Msk                        /*!<SLOTSZ[1:0] (Slot size)  */
#define SAI_xSLOTR_SLOTSZ_0        (0x1UL << SAI_xSLOTR_SLOTSZ_Pos)             /*!< 0x00000040 */
#define SAI_xSLOTR_SLOTSZ_1        (0x2UL << SAI_xSLOTR_SLOTSZ_Pos)             /*!< 0x00000080 */

#define SAI_xSLOTR_NBSLOT_Pos      (8U)
#define SAI_xSLOTR_NBSLOT_Msk      (0xFUL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000F00 */
#define SAI_xSLOTR_NBSLOT          SAI_xSLOTR_NBSLOT_Msk                        /*!<NBSLOT[3:0] (Number of Slot in audio Frame)  */
#define SAI_xSLOTR_NBSLOT_0        (0x1UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000100 */
#define SAI_xSLOTR_NBSLOT_1        (0x2UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000200 */
#define SAI_xSLOTR_NBSLOT_2        (0x4UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000400 */
#define SAI_xSLOTR_NBSLOT_3        (0x8UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000800 */

#define SAI_xSLOTR_SLOTEN_Pos      (16U)
#define SAI_xSLOTR_SLOTEN_Msk      (0xFFFFUL << SAI_xSLOTR_SLOTEN_Pos)          /*!< 0xFFFF0000 */
#define SAI_xSLOTR_SLOTEN          SAI_xSLOTR_SLOTEN_Msk                        /*!<SLOTEN[15:0] (Slot Enable)  */

/*******************  Bit definition for SAI_xIMR register  *******************/
#define SAI_xIMR_OVRUDRIE_Pos      (0U)
#define SAI_xIMR_OVRUDRIE_Msk      (0x1UL << SAI_xIMR_OVRUDRIE_Pos)             /*!< 0x00000001 */
#define SAI_xIMR_OVRUDRIE          SAI_xIMR_OVRUDRIE_Msk                        /*!<Overrun underrun interrupt enable                              */
#define SAI_xIMR_MUTEDETIE_Pos     (1U)
#define SAI_xIMR_MUTEDETIE_Msk     (0x1UL << SAI_xIMR_MUTEDETIE_Pos)            /*!< 0x00000002 */
#define SAI_xIMR_MUTEDETIE         SAI_xIMR_MUTEDETIE_Msk                       /*!<Mute detection interrupt enable                                */
#define SAI_xIMR_WCKCFGIE_Pos      (2U)
#define SAI_xIMR_WCKCFGIE_Msk      (0x1UL << SAI_xIMR_WCKCFGIE_Pos)             /*!< 0x00000004 */
#define SAI_xIMR_WCKCFGIE          SAI_xIMR_WCKCFGIE_Msk                        /*!<Wrong Clock Configuration interrupt enable                     */
#define SAI_xIMR_FREQIE_Pos        (3U)
#define SAI_xIMR_FREQIE_Msk        (0x1UL << SAI_xIMR_FREQIE_Pos)               /*!< 0x00000008 */
#define SAI_xIMR_FREQIE            SAI_xIMR_FREQIE_Msk                          /*!<FIFO request interrupt enable                                  */
#define SAI_xIMR_CNRDYIE_Pos       (4U)
#define SAI_xIMR_CNRDYIE_Msk       (0x1UL << SAI_xIMR_CNRDYIE_Pos)              /*!< 0x00000010 */
#define SAI_xIMR_CNRDYIE           SAI_xIMR_CNRDYIE_Msk                         /*!<Codec not ready interrupt enable                               */
#define SAI_xIMR_AFSDETIE_Pos      (5U)
#define SAI_xIMR_AFSDETIE_Msk      (0x1UL << SAI_xIMR_AFSDETIE_Pos)             /*!< 0x00000020 */
#define SAI_xIMR_AFSDETIE          SAI_xIMR_AFSDETIE_Msk                        /*!<Anticipated frame synchronization detection interrupt enable   */
#define SAI_xIMR_LFSDETIE_Pos      (6U)
#define SAI_xIMR_LFSDETIE_Msk      (0x1UL << SAI_xIMR_LFSDETIE_Pos)             /*!< 0x00000040 */
#define SAI_xIMR_LFSDETIE          SAI_xIMR_LFSDETIE_Msk                        /*!<Late frame synchronization detection interrupt enable          */

/********************  Bit definition for SAI_xSR register  *******************/
#define SAI_xSR_OVRUDR_Pos         (0U)
#define SAI_xSR_OVRUDR_Msk         (0x1UL << SAI_xSR_OVRUDR_Pos)                /*!< 0x00000001 */
#define SAI_xSR_OVRUDR             SAI_xSR_OVRUDR_Msk                           /*!<Overrun underrun                               */
#define SAI_xSR_MUTEDET_Pos        (1U)
#define SAI_xSR_MUTEDET_Msk        (0x1UL << SAI_xSR_MUTEDET_Pos)               /*!< 0x00000002 */
#define SAI_xSR_MUTEDET            SAI_xSR_MUTEDET_Msk                          /*!<Mute detection                                 */
#define SAI_xSR_WCKCFG_Pos         (2U)
#define SAI_xSR_WCKCFG_Msk         (0x1UL << SAI_xSR_WCKCFG_Pos)                /*!< 0x00000004 */
#define SAI_xSR_WCKCFG             SAI_xSR_WCKCFG_Msk                           /*!<Wrong Clock Configuration                      */
#define SAI_xSR_FREQ_Pos           (3U)
#define SAI_xSR_FREQ_Msk           (0x1UL << SAI_xSR_FREQ_Pos)                  /*!< 0x00000008 */
#define SAI_xSR_FREQ               SAI_xSR_FREQ_Msk                             /*!<FIFO request                                   */
#define SAI_xSR_CNRDY_Pos          (4U)
#define SAI_xSR_CNRDY_Msk          (0x1UL << SAI_xSR_CNRDY_Pos)                 /*!< 0x00000010 */
#define SAI_xSR_CNRDY              SAI_xSR_CNRDY_Msk                            /*!<Codec not ready                                */
#define SAI_xSR_AFSDET_Pos         (5U)
#define SAI_xSR_AFSDET_Msk         (0x1UL << SAI_xSR_AFSDET_Pos)                /*!< 0x00000020 */
#define SAI_xSR_AFSDET             SAI_xSR_AFSDET_Msk                           /*!<Anticipated frame synchronization detection    */
#define SAI_xSR_LFSDET_Pos         (6U)
#define SAI_xSR_LFSDET_Msk         (0x1UL << SAI_xSR_LFSDET_Pos)                /*!< 0x00000040 */
#define SAI_xSR_LFSDET             SAI_xSR_LFSDET_Msk                           /*!<Late frame synchronization detection           */

#define SAI_xSR_FLVL_Pos           (16U)
#define SAI_xSR_FLVL_Msk           (0x7UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00070000 */
#define SAI_xSR_FLVL               SAI_xSR_FLVL_Msk                             /*!<FLVL[2:0] (FIFO Level Threshold)               */
#define SAI_xSR_FLVL_0             (0x1UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00010000 */
#define SAI_xSR_FLVL_1             (0x2UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00020000 */
#define SAI_xSR_FLVL_2             (0x4UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00040000 */

/******************  Bit definition for SAI_xCLRFR register  ******************/
#define SAI_xCLRFR_COVRUDR_Pos     (0U)
#define SAI_xCLRFR_COVRUDR_Msk     (0x1UL << SAI_xCLRFR_COVRUDR_Pos)            /*!< 0x00000001 */
#define SAI_xCLRFR_COVRUDR         SAI_xCLRFR_COVRUDR_Msk                       /*!<Clear Overrun underrun                               */
#define SAI_xCLRFR_CMUTEDET_Pos    (1U)
#define SAI_xCLRFR_CMUTEDET_Msk    (0x1UL << SAI_xCLRFR_CMUTEDET_Pos)           /*!< 0x00000002 */
#define SAI_xCLRFR_CMUTEDET        SAI_xCLRFR_CMUTEDET_Msk                      /*!<Clear Mute detection                                 */
#define SAI_xCLRFR_CWCKCFG_Pos     (2U)
#define SAI_xCLRFR_CWCKCFG_Msk     (0x1UL << SAI_xCLRFR_CWCKCFG_Pos)            /*!< 0x00000004 */
#define SAI_xCLRFR_CWCKCFG         SAI_xCLRFR_CWCKCFG_Msk                       /*!<Clear Wrong Clock Configuration                      */
#define SAI_xCLRFR_CFREQ_Pos       (3U)
#define SAI_xCLRFR_CFREQ_Msk       (0x1UL << SAI_xCLRFR_CFREQ_Pos)              /*!< 0x00000008 */
#define SAI_xCLRFR_CFREQ           SAI_xCLRFR_CFREQ_Msk                         /*!<Clear FIFO request                                   */
#define SAI_xCLRFR_CCNRDY_Pos      (4U)
#define SAI_xCLRFR_CCNRDY_Msk      (0x1UL << SAI_xCLRFR_CCNRDY_Pos)             /*!< 0x00000010 */
#define SAI_xCLRFR_CCNRDY          SAI_xCLRFR_CCNRDY_Msk                        /*!<Clear Codec not ready                                */
#define SAI_xCLRFR_CAFSDET_Pos     (5U)
#define SAI_xCLRFR_CAFSDET_Msk     (0x1UL << SAI_xCLRFR_CAFSDET_Pos)            /*!< 0x00000020 */
#define SAI_xCLRFR_CAFSDET         SAI_xCLRFR_CAFSDET_Msk                       /*!<Clear Anticipated frame synchronization detection    */
#define SAI_xCLRFR_CLFSDET_Pos     (6U)
#define SAI_xCLRFR_CLFSDET_Msk     (0x1UL << SAI_xCLRFR_CLFSDET_Pos)            /*!< 0x00000040 */
#define SAI_xCLRFR_CLFSDET         SAI_xCLRFR_CLFSDET_Msk                       /*!<Clear Late frame synchronization detection           */

/******************  Bit definition for SAI_xDR register  *********************/
#define SAI_xDR_DATA_Pos           (0U)
#define SAI_xDR_DATA_Msk           (0xFFFFFFFFUL << SAI_xDR_DATA_Pos)           /*!< 0xFFFFFFFF */
#define SAI_xDR_DATA               SAI_xDR_DATA_Msk

/*******************  Bit definition for SAI_PDMCR register  ******************/
#define SAI_PDMCR_PDMEN_Pos        (0U)
#define SAI_PDMCR_PDMEN_Msk        (0x1UL << SAI_PDMCR_PDMEN_Pos)               /*!< 0x00000001 */
#define SAI_PDMCR_PDMEN            SAI_PDMCR_PDMEN_Msk                          /*!<PDM Enable                                          */

#define SAI_PDMCR_MICNBR_Pos       (4U)
#define SAI_PDMCR_MICNBR_Msk       (0x3UL << SAI_PDMCR_MICNBR_Pos)              /*!< 0x00000030 */
#define SAI_PDMCR_MICNBR           SAI_PDMCR_MICNBR_Msk                         /*!<Number of microphones                               */
#define SAI_PDMCR_MICNBR_0         (0x1UL << SAI_PDMCR_MICNBR_Pos)              /*!< 0x00000010 */
#define SAI_PDMCR_MICNBR_1         (0x2UL << SAI_PDMCR_MICNBR_Pos)              /*!< 0x00000020 */

#define SAI_PDMCR_CKEN1_Pos        (8U)
#define SAI_PDMCR_CKEN1_Msk        (0x1UL << SAI_PDMCR_CKEN1_Pos)               /*!< 0x00000100 */
#define SAI_PDMCR_CKEN1            SAI_PDMCR_CKEN1_Msk                          /*!<Clock enable of bitstream clock number 1            */
#define SAI_PDMCR_CKEN2_Pos        (9U)
#define SAI_PDMCR_CKEN2_Msk        (0x1UL << SAI_PDMCR_CKEN2_Pos)               /*!< 0x00000200 */
#define SAI_PDMCR_CKEN2            SAI_PDMCR_CKEN2_Msk                          /*!<Clock enable of bitstream clock number 2            */
#define SAI_PDMCR_CKEN3_Pos        (10U)
#define SAI_PDMCR_CKEN3_Msk        (0x1UL << SAI_PDMCR_CKEN3_Pos)               /*!< 0x00000400 */
#define SAI_PDMCR_CKEN3            SAI_PDMCR_CKEN3_Msk                          /*!<Clock enable of bitstream clock number 3            */
#define SAI_PDMCR_CKEN4_Pos        (11U)
#define SAI_PDMCR_CKEN4_Msk        (0x1UL << SAI_PDMCR_CKEN4_Pos)               /*!< 0x00000800 */
#define SAI_PDMCR_CKEN4            SAI_PDMCR_CKEN4_Msk                          /*!<Clock enable of bitstream clock number 4            */

/******************  Bit definition for SAI_PDMDLY register  ******************/
#define SAI_PDMDLY_DLYM1L_Pos      (0U)
#define SAI_PDMDLY_DLYM1L_Msk      (0x7UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000007 */
#define SAI_PDMDLY_DLYM1L          SAI_PDMDLY_DLYM1L_Msk                        /*!<DLYM1L[2:0] (Delay line adjust for left microphone of pair 1) */
#define SAI_PDMDLY_DLYM1L_0        (0x1UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000001 */
#define SAI_PDMDLY_DLYM1L_1        (0x2UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000002 */
#define SAI_PDMDLY_DLYM1L_2        (0x4UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000004 */

#define SAI_PDMDLY_DLYM1R_Pos      (4U)
#define SAI_PDMDLY_DLYM1R_Msk      (0x7UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000070 */
#define SAI_PDMDLY_DLYM1R          SAI_PDMDLY_DLYM1R_Msk                        /*!<DLYM1R[2:0] (Delay line adjust for right microphone of pair 1) */
#define SAI_PDMDLY_DLYM1R_0        (0x1UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000010 */
#define SAI_PDMDLY_DLYM1R_1        (0x2UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000020 */
#define SAI_PDMDLY_DLYM1R_2        (0x4UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000040 */

#define SAI_PDMDLY_DLYM2L_Pos      (8U)
#define SAI_PDMDLY_DLYM2L_Msk      (0x7UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000700 */
#define SAI_PDMDLY_DLYM2L          SAI_PDMDLY_DLYM2L_Msk                        /*!<DLYM2L[2:0] (Delay line adjust for left microphone of pair 2) */
#define SAI_PDMDLY_DLYM2L_0        (0x1UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000100 */
#define SAI_PDMDLY_DLYM2L_1        (0x2UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000200 */
#define SAI_PDMDLY_DLYM2L_2        (0x4UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000400 */

#define SAI_PDMDLY_DLYM2R_Pos      (12U)
#define SAI_PDMDLY_DLYM2R_Msk      (0x7UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00007000 */
#define SAI_PDMDLY_DLYM2R          SAI_PDMDLY_DLYM2R_Msk                        /*!<DLYM2R[2:0] (Delay line adjust for right microphone of pair 2)*/
#define SAI_PDMDLY_DLYM2R_0        (0x1UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00001000 */
#define SAI_PDMDLY_DLYM2R_1        (0x2UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00002000 */
#define SAI_PDMDLY_DLYM2R_2        (0x4UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00004000 */

#define SAI_PDMDLY_DLYM3L_Pos      (16U)
#define SAI_PDMDLY_DLYM3L_Msk      (0x7UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00070000 */
#define SAI_PDMDLY_DLYM3L          SAI_PDMDLY_DLYM3L_Msk                        /*!<DLYM3L[2:0] (Delay line adjust for left microphone of pair 3)*/
#define SAI_PDMDLY_DLYM3L_0        (0x1UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00010000 */
#define SAI_PDMDLY_DLYM3L_1        (0x2UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00020000 */
#define SAI_PDMDLY_DLYM3L_2        (0x4UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00040000 */

#define SAI_PDMDLY_DLYM3R_Pos      (20U)
#define SAI_PDMDLY_DLYM3R_Msk      (0x7UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00700000 */
#define SAI_PDMDLY_DLYM3R          SAI_PDMDLY_DLYM3R_Msk                        /*!<DLYM3R[2:0] (Delay line adjust for right microphone of pair 3)*/
#define SAI_PDMDLY_DLYM3R_0        (0x1UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00100000 */
#define SAI_PDMDLY_DLYM3R_1        (0x2UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00200000 */
#define SAI_PDMDLY_DLYM3R_2        (0x4UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00400000 */

#define SAI_PDMDLY_DLYM4L_Pos      (24U)
#define SAI_PDMDLY_DLYM4L_Msk      (0x7UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x07000000 */
#define SAI_PDMDLY_DLYM4L          SAI_PDMDLY_DLYM4L_Msk                        /*!<DLYM4L[2:0] (Delay line adjust for left microphone of pair 4)*/
#define SAI_PDMDLY_DLYM4L_0        (0x1UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x01000000 */
#define SAI_PDMDLY_DLYM4L_1        (0x2UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x02000000 */
#define SAI_PDMDLY_DLYM4L_2        (0x4UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x04000000 */

#define SAI_PDMDLY_DLYM4R_Pos      (28U)
#define SAI_PDMDLY_DLYM4R_Msk      (0x7UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x70000000 */
#define SAI_PDMDLY_DLYM4R          SAI_PDMDLY_DLYM4R_Msk                        /*!<DLYM4R[2:0] (Delay line adjust for right microphone of pair 4)*/
#define SAI_PDMDLY_DLYM4R_0        (0x1UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x10000000 */
#define SAI_PDMDLY_DLYM4R_1        (0x2UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x20000000 */
#define SAI_PDMDLY_DLYM4R_2        (0x4UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x40000000 */

/**********************  Bit definition for SAI_HWCFGR register  **************/
#define SAI_HWCFGR_FIFO_SIZE_Pos      (0U)
#define SAI_HWCFGR_FIFO_SIZE_Msk      (0xFFUL << SAI_HWCFGR_FIFO_SIZE_Pos)      /*!< 0x000000FF */
#define SAI_HWCFGR_FIFO_SIZE          SAI_HWCFGR_FIFO_SIZE_Msk                  /*!< FIFO size for SAIA and SAIB */
#define SAI_HWCFGR_SPDIF_PDM_Pos      (8U)
#define SAI_HWCFGR_SPDIF_PDM_Msk      (0xFUL << SAI_HWCFGR_SPDIF_PDM_Pos)       /*!< 0x00000F00 */
#define SAI_HWCFGR_SPDIF_PDM          SAI_HWCFGR_SPDIF_PDM_Msk                  /*!< Support of SPDIF-OUT and PDM interfaces */
#define SAI_HWCFGR_OPTION_REGOUT_Pos  (12U)
#define SAI_HWCFGR_OPTION_REGOUT_Msk  (0xFFUL << SAI_HWCFGR_OPTION_REGOUT_Pos)  /*!< 0x000FF000 */
#define SAI_HWCFGR_OPTION_REGOUT      SAI_HWCFGR_OPTION_REGOUT_Msk              /*!< Support of SAI_IOR register */

/**********************  Bit definition for SAI_VERR register  ****************/
#define SAI_VERR_MINREV_Pos      (0U)
#define SAI_VERR_MINREV_Msk      (0xFUL << SAI_VERR_MINREV_Pos)                 /*!< 0x0000000F */
#define SAI_VERR_MINREV          SAI_VERR_MINREV_Msk                            /*!< Minor Revision number */
#define SAI_VERR_MAJREV_Pos      (4U)
#define SAI_VERR_MAJREV_Msk      (0xFUL << SAI_VERR_MAJREV_Pos)                 /*!< 0x000000F0 */
#define SAI_VERR_MAJREV          SAI_VERR_MAJREV_Msk                            /*!< Major Revision number */

/**********************  Bit definition for SAI_IPIDR register  ***************/
#define SAI_IPIDR_IPID_Pos       (0U)
#define SAI_IPIDR_IPID_Msk       (0xFFFFFFFFUL << SAI_IPIDR_IPID_Pos)           /*!< 0xFFFFFFFF */
#define SAI_IPIDR_IPID           SAI_IPIDR_IPID_Msk                             /*!< IP Identification */

/**********************  Bit definition for SAI_SIDR register  ****************/
#define SAI_SIDR_SID_Pos         (0U)
#define SAI_SIDR_SID_Msk         (0xFFFFFFFFUL << SAI_SIDR_SID_Pos)             /*!< 0xFFFFFFFF */
#define SAI_SIDR_SID             SAI_SIDR_SID_Msk                               /*!< IP size identification */

/******************************************************************************/
/*                                                                            */
/*                           SDMMC Interface                                  */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for SDMMC_POWER register  ******************/
#define SDMMC_POWER_PWRCTRL_Pos          (0U)
#define SDMMC_POWER_PWRCTRL_Msk          (0x3UL << SDMMC_POWER_PWRCTRL_Pos)    /*!< 0x00000003 */
#define SDMMC_POWER_PWRCTRL              SDMMC_POWER_PWRCTRL_Msk               /*!<PWRCTRL[1:0] bits (Power supply control bits) */
#define SDMMC_POWER_PWRCTRL_0            (0x1UL << SDMMC_POWER_PWRCTRL_Pos)    /*!< 0x00000001 */
#define SDMMC_POWER_PWRCTRL_1            (0x2UL << SDMMC_POWER_PWRCTRL_Pos)    /*!< 0x00000002 */
#define SDMMC_POWER_VSWITCH_Pos          (2U)
#define SDMMC_POWER_VSWITCH_Msk          (0x1UL << SDMMC_POWER_VSWITCH_Pos)    /*!< 0x00000004 */
#define SDMMC_POWER_VSWITCH              SDMMC_POWER_VSWITCH_Msk               /*!<Voltage switch sequence start */
#define SDMMC_POWER_VSWITCHEN_Pos        (3U)
#define SDMMC_POWER_VSWITCHEN_Msk        (0x1UL << SDMMC_POWER_VSWITCHEN_Pos)  /*!< 0x00000008 */
#define SDMMC_POWER_VSWITCHEN            SDMMC_POWER_VSWITCHEN_Msk             /*!<Voltage switch procedure enable */
#define SDMMC_POWER_DIRPOL_Pos           (4U)
#define SDMMC_POWER_DIRPOL_Msk           (0x1UL << SDMMC_POWER_DIRPOL_Pos)     /*!< 0x00000010 */
#define SDMMC_POWER_DIRPOL               SDMMC_POWER_DIRPOL_Msk                /*!<Data and Command direction signals polarity selection */

/******************  Bit definition for SDMMC_CLKCR register  ******************/
#define SDMMC_CLKCR_CLKDIV_Pos           (0U)
#define SDMMC_CLKCR_CLKDIV_Msk           (0x3FFUL << SDMMC_CLKCR_CLKDIV_Pos)   /*!< 0x000003FF */
#define SDMMC_CLKCR_CLKDIV               SDMMC_CLKCR_CLKDIV_Msk                /*!<Clock divide factor             */
#define SDMMC_CLKCR_PWRSAV_Pos           (12U)
#define SDMMC_CLKCR_PWRSAV_Msk           (0x1UL << SDMMC_CLKCR_PWRSAV_Pos)     /*!< 0x00001000 */
#define SDMMC_CLKCR_PWRSAV               SDMMC_CLKCR_PWRSAV_Msk                /*!<Power saving configuration bit  */

#define SDMMC_CLKCR_WIDBUS_Pos           (14U)
#define SDMMC_CLKCR_WIDBUS_Msk           (0x3UL << SDMMC_CLKCR_WIDBUS_Pos)     /*!< 0x0000C000 */
#define SDMMC_CLKCR_WIDBUS               SDMMC_CLKCR_WIDBUS_Msk                /*!<WIDBUS[1:0] bits (Wide bus mode enable bit) */
#define SDMMC_CLKCR_WIDBUS_0             (0x1UL << SDMMC_CLKCR_WIDBUS_Pos)     /*!< 0x00004000 */
#define SDMMC_CLKCR_WIDBUS_1             (0x2UL << SDMMC_CLKCR_WIDBUS_Pos)     /*!< 0x00008000 */

#define SDMMC_CLKCR_NEGEDGE_Pos          (16U)
#define SDMMC_CLKCR_NEGEDGE_Msk          (0x1UL << SDMMC_CLKCR_NEGEDGE_Pos)    /*!< 0x00010000 */
#define SDMMC_CLKCR_NEGEDGE              SDMMC_CLKCR_NEGEDGE_Msk               /*!<SDMMC_CK dephasing selection bit */
#define SDMMC_CLKCR_HWFC_EN_Pos          (17U)
#define SDMMC_CLKCR_HWFC_EN_Msk          (0x1UL << SDMMC_CLKCR_HWFC_EN_Pos)    /*!< 0x00020000 */
#define SDMMC_CLKCR_HWFC_EN              SDMMC_CLKCR_HWFC_EN_Msk               /*!<HW Flow Control enable           */
#define SDMMC_CLKCR_DDR_Pos              (18U)
#define SDMMC_CLKCR_DDR_Msk              (0x1UL << SDMMC_CLKCR_DDR_Pos)        /*!< 0x00040000 */
#define SDMMC_CLKCR_DDR                  SDMMC_CLKCR_DDR_Msk                   /*!<Data rate signaling selection    */
#define SDMMC_CLKCR_BUSSPEED_Pos         (19U)
#define SDMMC_CLKCR_BUSSPEED_Msk         (0x1UL << SDMMC_CLKCR_BUSSPEED_Pos)   /*!< 0x00080000 */
#define SDMMC_CLKCR_BUSSPEED             SDMMC_CLKCR_BUSSPEED_Msk              /*!<Bus speed mode selection         */
#define SDMMC_CLKCR_SELCLKRX_Pos         (20U)
#define SDMMC_CLKCR_SELCLKRX_Msk         (0x3UL << SDMMC_CLKCR_SELCLKRX_Pos)   /*!< 0x00300000 */
#define SDMMC_CLKCR_SELCLKRX             SDMMC_CLKCR_SELCLKRX_Msk              /*!<SELCLKRX[1:0] bits (Receive clock selection) */
#define SDMMC_CLKCR_SELCLKRX_0           (0x1UL << SDMMC_CLKCR_SELCLKRX_Pos)   /*!< 0x00100000 */
#define SDMMC_CLKCR_SELCLKRX_1           (0x2UL << SDMMC_CLKCR_SELCLKRX_Pos)   /*!< 0x00200000 */

/*******************  Bit definition for SDMMC_ARG register  *******************/
#define SDMMC_ARG_CMDARG_Pos             (0U)
#define SDMMC_ARG_CMDARG_Msk             (0xFFFFFFFFUL << SDMMC_ARG_CMDARG_Pos)/*!< 0xFFFFFFFF */
#define SDMMC_ARG_CMDARG                 SDMMC_ARG_CMDARG_Msk                  /*!<Command argument */

/*******************  Bit definition for SDMMC_CMD register  *******************/
#define SDMMC_CMD_CMDINDEX_Pos           (0U)
#define SDMMC_CMD_CMDINDEX_Msk           (0x3FUL << SDMMC_CMD_CMDINDEX_Pos)    /*!< 0x0000003F */
#define SDMMC_CMD_CMDINDEX               SDMMC_CMD_CMDINDEX_Msk                /*!<Command Index                               */
#define SDMMC_CMD_CMDTRANS_Pos           (6U)
#define SDMMC_CMD_CMDTRANS_Msk           (0x1UL << SDMMC_CMD_CMDTRANS_Pos)     /*!< 0x00000040 */
#define SDMMC_CMD_CMDTRANS               SDMMC_CMD_CMDTRANS_Msk                /*!<CPSM Treats command as a Data Transfer      */
#define SDMMC_CMD_CMDSTOP_Pos            (7U)
#define SDMMC_CMD_CMDSTOP_Msk            (0x1UL << SDMMC_CMD_CMDSTOP_Pos)      /*!< 0x00000080 */
#define SDMMC_CMD_CMDSTOP                SDMMC_CMD_CMDSTOP_Msk                 /*!<CPSM Treats command as a Stop               */

#define SDMMC_CMD_WAITRESP_Pos           (8U)
#define SDMMC_CMD_WAITRESP_Msk           (0x3UL << SDMMC_CMD_WAITRESP_Pos)     /*!< 0x00000300 */
#define SDMMC_CMD_WAITRESP               SDMMC_CMD_WAITRESP_Msk                /*!<WAITRESP[1:0] bits (Wait for response bits) */
#define SDMMC_CMD_WAITRESP_0             (0x1UL << SDMMC_CMD_WAITRESP_Pos)     /*!< 0x00000100 */
#define SDMMC_CMD_WAITRESP_1             (0x2UL << SDMMC_CMD_WAITRESP_Pos)     /*!< 0x00000200 */

#define SDMMC_CMD_WAITINT_Pos            (10U)
#define SDMMC_CMD_WAITINT_Msk            (0x1UL << SDMMC_CMD_WAITINT_Pos)      /*!< 0x00000400 */
#define SDMMC_CMD_WAITINT                SDMMC_CMD_WAITINT_Msk                 /*!<CPSM Waits for Interrupt Request                               */
#define SDMMC_CMD_WAITPEND_Pos           (11U)
#define SDMMC_CMD_WAITPEND_Msk           (0x1UL << SDMMC_CMD_WAITPEND_Pos)     /*!< 0x00000800 */
#define SDMMC_CMD_WAITPEND               SDMMC_CMD_WAITPEND_Msk                /*!<CPSM Waits for ends of data transfer (CmdPend internal signal) */
#define SDMMC_CMD_CPSMEN_Pos             (12U)
#define SDMMC_CMD_CPSMEN_Msk             (0x1UL << SDMMC_CMD_CPSMEN_Pos)       /*!< 0x00001000 */
#define SDMMC_CMD_CPSMEN                 SDMMC_CMD_CPSMEN_Msk                  /*!<Command path state machine (CPSM) Enable bit                   */
#define SDMMC_CMD_DTHOLD_Pos             (13U)
#define SDMMC_CMD_DTHOLD_Msk             (0x1UL << SDMMC_CMD_DTHOLD_Pos)       /*!< 0x00002000 */
#define SDMMC_CMD_DTHOLD                 SDMMC_CMD_DTHOLD_Msk                  /*!<Hold new data block transmission and reception in the DPSM     */
#define SDMMC_CMD_BOOTMODE_Pos           (14U)
#define SDMMC_CMD_BOOTMODE_Msk           (0x1UL << SDMMC_CMD_BOOTMODE_Pos)     /*!< 0x00004000 */
#define SDMMC_CMD_BOOTMODE               SDMMC_CMD_BOOTMODE_Msk                /*!<Boot mode                                                      */
#define SDMMC_CMD_BOOTEN_Pos             (15U)
#define SDMMC_CMD_BOOTEN_Msk             (0x1UL << SDMMC_CMD_BOOTEN_Pos)       /*!< 0x00008000 */
#define SDMMC_CMD_BOOTEN                 SDMMC_CMD_BOOTEN_Msk                  /*!<Enable Boot mode procedure                                     */
#define SDMMC_CMD_CMDSUSPEND_Pos         (16U)
#define SDMMC_CMD_CMDSUSPEND_Msk         (0x1UL << SDMMC_CMD_CMDSUSPEND_Pos)   /*!< 0x00010000 */
#define SDMMC_CMD_CMDSUSPEND             SDMMC_CMD_CMDSUSPEND_Msk              /*!<CPSM Treats command as a Suspend or Resume command             */

/*****************  Bit definition for SDMMC_RESPCMD register  *****************/
#define SDMMC_RESPCMD_RESPCMD_Pos        (0U)
#define SDMMC_RESPCMD_RESPCMD_Msk        (0x3FUL << SDMMC_RESPCMD_RESPCMD_Pos) /*!< 0x0000003F */
#define SDMMC_RESPCMD_RESPCMD            SDMMC_RESPCMD_RESPCMD_Msk             /*!<Response command index */

/******************  Bit definition for SDMMC_RESP1 register  ******************/
#define SDMMC_RESP1_CARDSTATUS1_Pos      (0U)
#define SDMMC_RESP1_CARDSTATUS1_Msk      (0xFFFFFFFFUL << SDMMC_RESP1_CARDSTATUS1_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP1_CARDSTATUS1          SDMMC_RESP1_CARDSTATUS1_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_RESP2 register  ******************/
#define SDMMC_RESP2_CARDSTATUS2_Pos      (0U)
#define SDMMC_RESP2_CARDSTATUS2_Msk      (0xFFFFFFFFUL << SDMMC_RESP2_CARDSTATUS2_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP2_CARDSTATUS2          SDMMC_RESP2_CARDSTATUS2_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_RESP3 register  ******************/
#define SDMMC_RESP3_CARDSTATUS3_Pos      (0U)
#define SDMMC_RESP3_CARDSTATUS3_Msk      (0xFFFFFFFFUL << SDMMC_RESP3_CARDSTATUS3_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP3_CARDSTATUS3          SDMMC_RESP3_CARDSTATUS3_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_RESP4 register  ******************/
#define SDMMC_RESP4_CARDSTATUS4_Pos      (0U)
#define SDMMC_RESP4_CARDSTATUS4_Msk      (0xFFFFFFFFUL << SDMMC_RESP4_CARDSTATUS4_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP4_CARDSTATUS4          SDMMC_RESP4_CARDSTATUS4_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_DTIMER register  *****************/
#define SDMMC_DTIMER_DATATIME_Pos        (0U)
#define SDMMC_DTIMER_DATATIME_Msk        (0xFFFFFFFFUL << SDMMC_DTIMER_DATATIME_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_DTIMER_DATATIME            SDMMC_DTIMER_DATATIME_Msk             /*!<Data timeout period. */

/******************  Bit definition for SDMMC_DLEN register  *******************/
#define SDMMC_DLEN_DATALENGTH_Pos        (0U)
#define SDMMC_DLEN_DATALENGTH_Msk        (0x1FFFFFFUL << SDMMC_DLEN_DATALENGTH_Pos) /*!< 0x01FFFFFF */
#define SDMMC_DLEN_DATALENGTH            SDMMC_DLEN_DATALENGTH_Msk             /*!<Data length value    */

/******************  Bit definition for SDMMC_DCTRL register  ******************/
#define SDMMC_DCTRL_DTEN_Pos             (0U)
#define SDMMC_DCTRL_DTEN_Msk             (0x1UL << SDMMC_DCTRL_DTEN_Pos)       /*!< 0x00000001 */
#define SDMMC_DCTRL_DTEN                 SDMMC_DCTRL_DTEN_Msk                  /*!<Data transfer enabled bit                */
#define SDMMC_DCTRL_DTDIR_Pos            (1U)
#define SDMMC_DCTRL_DTDIR_Msk            (0x1UL << SDMMC_DCTRL_DTDIR_Pos)      /*!< 0x00000002 */
#define SDMMC_DCTRL_DTDIR                SDMMC_DCTRL_DTDIR_Msk                 /*!<Data transfer direction selection        */
#define SDMMC_DCTRL_DTMODE_Pos           (2U)
#define SDMMC_DCTRL_DTMODE_Msk           (0x3UL << SDMMC_DCTRL_DTMODE_Pos)     /*!< 0x0000000C */
#define SDMMC_DCTRL_DTMODE               SDMMC_DCTRL_DTMODE_Msk                /*!<DTMODE[1:0] Data transfer mode selection */
#define SDMMC_DCTRL_DTMODE_0             (0x1UL << SDMMC_DCTRL_DTMODE_Pos)     /*!< 0x00000004 */
#define SDMMC_DCTRL_DTMODE_1             (0x2UL << SDMMC_DCTRL_DTMODE_Pos)     /*!< 0x00000008 */

#define SDMMC_DCTRL_DBLOCKSIZE_Pos       (4U)
#define SDMMC_DCTRL_DBLOCKSIZE_Msk       (0xFUL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x000000F0 */
#define SDMMC_DCTRL_DBLOCKSIZE           SDMMC_DCTRL_DBLOCKSIZE_Msk            /*!<DBLOCKSIZE[3:0] bits (Data block size) */
#define SDMMC_DCTRL_DBLOCKSIZE_0         (0x1UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000010 */
#define SDMMC_DCTRL_DBLOCKSIZE_1         (0x2UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000020 */
#define SDMMC_DCTRL_DBLOCKSIZE_2         (0x4UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000040 */
#define SDMMC_DCTRL_DBLOCKSIZE_3         (0x8UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000080 */

#define SDMMC_DCTRL_RWSTART_Pos          (8U)
#define SDMMC_DCTRL_RWSTART_Msk          (0x1UL << SDMMC_DCTRL_RWSTART_Pos)    /*!< 0x00000100 */
#define SDMMC_DCTRL_RWSTART              SDMMC_DCTRL_RWSTART_Msk               /*!<Read wait start                                 */
#define SDMMC_DCTRL_RWSTOP_Pos           (9U)
#define SDMMC_DCTRL_RWSTOP_Msk           (0x1UL << SDMMC_DCTRL_RWSTOP_Pos)     /*!< 0x00000200 */
#define SDMMC_DCTRL_RWSTOP               SDMMC_DCTRL_RWSTOP_Msk                /*!<Read wait stop                                  */
#define SDMMC_DCTRL_RWMOD_Pos            (10U)
#define SDMMC_DCTRL_RWMOD_Msk            (0x1UL << SDMMC_DCTRL_RWMOD_Pos)      /*!< 0x00000400 */
#define SDMMC_DCTRL_RWMOD                SDMMC_DCTRL_RWMOD_Msk                 /*!<Read wait mode                                  */
#define SDMMC_DCTRL_SDIOEN_Pos           (11U)
#define SDMMC_DCTRL_SDIOEN_Msk           (0x1UL << SDMMC_DCTRL_SDIOEN_Pos)     /*!< 0x00000800 */
#define SDMMC_DCTRL_SDIOEN               SDMMC_DCTRL_SDIOEN_Msk                /*!<SD I/O enable functions                         */
#define SDMMC_DCTRL_BOOTACKEN_Pos        (12U)
#define SDMMC_DCTRL_BOOTACKEN_Msk        (0x1UL << SDMMC_DCTRL_BOOTACKEN_Pos)  /*!< 0x00001000 */
#define SDMMC_DCTRL_BOOTACKEN            SDMMC_DCTRL_BOOTACKEN_Msk             /*!<Enable the reception of the Boot Acknowledgment */
#define SDMMC_DCTRL_FIFORST_Pos          (13U)
#define SDMMC_DCTRL_FIFORST_Msk          (0x1UL << SDMMC_DCTRL_FIFORST_Pos)    /*!< 0x00002000 */
#define SDMMC_DCTRL_FIFORST              SDMMC_DCTRL_FIFORST_Msk               /*!<FIFO reset                                      */

/******************  Bit definition for SDMMC_DCOUNT register  *****************/
#define SDMMC_DCOUNT_DATACOUNT_Pos       (0U)
#define SDMMC_DCOUNT_DATACOUNT_Msk       (0x1FFFFFFUL << SDMMC_DCOUNT_DATACOUNT_Pos) /*!< 0x01FFFFFF */
#define SDMMC_DCOUNT_DATACOUNT           SDMMC_DCOUNT_DATACOUNT_Msk            /*!<Data count value */

/******************  Bit definition for SDMMC_STA register  ********************/
#define SDMMC_STA_CCRCFAIL_Pos           (0U)
#define SDMMC_STA_CCRCFAIL_Msk           (0x1UL << SDMMC_STA_CCRCFAIL_Pos)     /*!< 0x00000001 */
#define SDMMC_STA_CCRCFAIL               SDMMC_STA_CCRCFAIL_Msk                /*!<Command response received (CRC check failed)  */
#define SDMMC_STA_DCRCFAIL_Pos           (1U)
#define SDMMC_STA_DCRCFAIL_Msk           (0x1UL << SDMMC_STA_DCRCFAIL_Pos)     /*!< 0x00000002 */
#define SDMMC_STA_DCRCFAIL               SDMMC_STA_DCRCFAIL_Msk                /*!<Data block sent/received (CRC check failed)   */
#define SDMMC_STA_CTIMEOUT_Pos           (2U)
#define SDMMC_STA_CTIMEOUT_Msk           (0x1UL << SDMMC_STA_CTIMEOUT_Pos)     /*!< 0x00000004 */
#define SDMMC_STA_CTIMEOUT               SDMMC_STA_CTIMEOUT_Msk                /*!<Command response timeout                      */
#define SDMMC_STA_DTIMEOUT_Pos           (3U)
#define SDMMC_STA_DTIMEOUT_Msk           (0x1UL << SDMMC_STA_DTIMEOUT_Pos)     /*!< 0x00000008 */
#define SDMMC_STA_DTIMEOUT               SDMMC_STA_DTIMEOUT_Msk                /*!<Data timeout                                  */
#define SDMMC_STA_TXUNDERR_Pos           (4U)
#define SDMMC_STA_TXUNDERR_Msk           (0x1UL << SDMMC_STA_TXUNDERR_Pos)     /*!< 0x00000010 */
#define SDMMC_STA_TXUNDERR               SDMMC_STA_TXUNDERR_Msk                /*!<Transmit FIFO underrun error                  */
#define SDMMC_STA_RXOVERR_Pos            (5U)
#define SDMMC_STA_RXOVERR_Msk            (0x1UL << SDMMC_STA_RXOVERR_Pos)      /*!< 0x00000020 */
#define SDMMC_STA_RXOVERR                SDMMC_STA_RXOVERR_Msk                 /*!<Received FIFO overrun error                   */
#define SDMMC_STA_CMDREND_Pos            (6U)
#define SDMMC_STA_CMDREND_Msk            (0x1UL << SDMMC_STA_CMDREND_Pos)      /*!< 0x00000040 */
#define SDMMC_STA_CMDREND                SDMMC_STA_CMDREND_Msk                 /*!<Command response received (CRC check passed)  */
#define SDMMC_STA_CMDSENT_Pos            (7U)
#define SDMMC_STA_CMDSENT_Msk            (0x1UL << SDMMC_STA_CMDSENT_Pos)      /*!< 0x00000080 */
#define SDMMC_STA_CMDSENT                SDMMC_STA_CMDSENT_Msk                 /*!<Command sent (no response required)           */
#define SDMMC_STA_DATAEND_Pos            (8U)
#define SDMMC_STA_DATAEND_Msk            (0x1UL << SDMMC_STA_DATAEND_Pos)      /*!< 0x00000100 */
#define SDMMC_STA_DATAEND                SDMMC_STA_DATAEND_Msk                 /*!<Data end (data counter, SDIDCOUNT, is zero)   */
#define SDMMC_STA_DHOLD_Pos              (9U)
#define SDMMC_STA_DHOLD_Msk              (0x1UL << SDMMC_STA_DHOLD_Pos)        /*!< 0x00000200 */
#define SDMMC_STA_DHOLD                  SDMMC_STA_DHOLD_Msk                   /*!<Data transfer Hold                                                      */
#define SDMMC_STA_DBCKEND_Pos            (10U)
#define SDMMC_STA_DBCKEND_Msk            (0x1UL << SDMMC_STA_DBCKEND_Pos)      /*!< 0x00000400 */
#define SDMMC_STA_DBCKEND                SDMMC_STA_DBCKEND_Msk                 /*!<Data block sent/received (CRC check passed)   */
#define SDMMC_STA_DABORT_Pos             (11U)
#define SDMMC_STA_DABORT_Msk             (0x1UL << SDMMC_STA_DABORT_Pos)       /*!< 0x00000800 */
#define SDMMC_STA_DABORT                 SDMMC_STA_DABORT_Msk                  /*!<Data transfer aborted by CMD12                                          */
#define SDMMC_STA_DPSMACT_Pos            (12U)
#define SDMMC_STA_DPSMACT_Msk            (0x1UL << SDMMC_STA_DPSMACT_Pos)      /*!< 0x00001000 */
#define SDMMC_STA_DPSMACT                SDMMC_STA_DPSMACT_Msk                 /*!<Data path state machine active                                       */
#define SDMMC_STA_CPSMACT_Pos            (13U)
#define SDMMC_STA_CPSMACT_Msk            (0x1UL << SDMMC_STA_CPSMACT_Pos)      /*!< 0x00002000 */
#define SDMMC_STA_CPSMACT                SDMMC_STA_CPSMACT_Msk                 /*!<Command path state machine active                                          */
#define SDMMC_STA_TXFIFOHE_Pos           (14U)
#define SDMMC_STA_TXFIFOHE_Msk           (0x1UL << SDMMC_STA_TXFIFOHE_Pos)     /*!< 0x00004000 */
#define SDMMC_STA_TXFIFOHE               SDMMC_STA_TXFIFOHE_Msk                /*!<Transmit FIFO Half Empty: at least 8 words can be written into the FIFO */
#define SDMMC_STA_RXFIFOHF_Pos           (15U)
#define SDMMC_STA_RXFIFOHF_Msk           (0x1UL << SDMMC_STA_RXFIFOHF_Pos)     /*!< 0x00008000 */
#define SDMMC_STA_RXFIFOHF               SDMMC_STA_RXFIFOHF_Msk                /*!<Receive FIFO Half Full: there are at least 8 words in the FIFO */
#define SDMMC_STA_TXFIFOF_Pos            (16U)
#define SDMMC_STA_TXFIFOF_Msk            (0x1UL << SDMMC_STA_TXFIFOF_Pos)      /*!< 0x00010000 */
#define SDMMC_STA_TXFIFOF                SDMMC_STA_TXFIFOF_Msk                 /*!<Transmit FIFO full                            */
#define SDMMC_STA_RXFIFOF_Pos            (17U)
#define SDMMC_STA_RXFIFOF_Msk            (0x1UL << SDMMC_STA_RXFIFOF_Pos)      /*!< 0x00020000 */
#define SDMMC_STA_RXFIFOF                SDMMC_STA_RXFIFOF_Msk                 /*!<Receive FIFO full                             */
#define SDMMC_STA_TXFIFOE_Pos            (18U)
#define SDMMC_STA_TXFIFOE_Msk            (0x1UL << SDMMC_STA_TXFIFOE_Pos)      /*!< 0x00040000 */
#define SDMMC_STA_TXFIFOE                SDMMC_STA_TXFIFOE_Msk                 /*!<Transmit FIFO empty                           */
#define SDMMC_STA_RXFIFOE_Pos            (19U)
#define SDMMC_STA_RXFIFOE_Msk            (0x1UL << SDMMC_STA_RXFIFOE_Pos)      /*!< 0x00080000 */
#define SDMMC_STA_RXFIFOE                SDMMC_STA_RXFIFOE_Msk                 /*!<Receive FIFO empty                            */
#define SDMMC_STA_BUSYD0_Pos             (20U)
#define SDMMC_STA_BUSYD0_Msk             (0x1UL << SDMMC_STA_BUSYD0_Pos)       /*!< 0x00100000 */
#define SDMMC_STA_BUSYD0                 SDMMC_STA_BUSYD0_Msk                  /*!<Inverted value of SDMMC_D0 line (Busy)                                  */
#define SDMMC_STA_BUSYD0END_Pos          (21U)
#define SDMMC_STA_BUSYD0END_Msk          (0x1UL << SDMMC_STA_BUSYD0END_Pos)    /*!< 0x00200000 */
#define SDMMC_STA_BUSYD0END              SDMMC_STA_BUSYD0END_Msk               /*!<End of SDMMC_D0 Busy following a CMD response detected                  */
#define SDMMC_STA_SDIOIT_Pos             (22U)
#define SDMMC_STA_SDIOIT_Msk             (0x1UL << SDMMC_STA_SDIOIT_Pos)       /*!< 0x00400000 */
#define SDMMC_STA_SDIOIT                 SDMMC_STA_SDIOIT_Msk                  /*!<SDIO interrupt received                                                 */
#define SDMMC_STA_ACKFAIL_Pos            (23U)
#define SDMMC_STA_ACKFAIL_Msk            (0x1UL << SDMMC_STA_ACKFAIL_Pos)      /*!< 0x00800000 */
#define SDMMC_STA_ACKFAIL                SDMMC_STA_ACKFAIL_Msk                 /*!<Boot Acknowledgment received (BootAck check fail)                       */
#define SDMMC_STA_ACKTIMEOUT_Pos         (24U)
#define SDMMC_STA_ACKTIMEOUT_Msk         (0x1UL << SDMMC_STA_ACKTIMEOUT_Pos)   /*!< 0x01000000 */
#define SDMMC_STA_ACKTIMEOUT             SDMMC_STA_ACKTIMEOUT_Msk              /*!<Boot Acknowledgment timeout                                             */
#define SDMMC_STA_VSWEND_Pos             (25U)
#define SDMMC_STA_VSWEND_Msk             (0x1UL << SDMMC_STA_VSWEND_Pos)       /*!< 0x02000000 */
#define SDMMC_STA_VSWEND                 SDMMC_STA_VSWEND_Msk                  /*!<Voltage switch critical timing section completion                       */
#define SDMMC_STA_CKSTOP_Pos             (26U)
#define SDMMC_STA_CKSTOP_Msk             (0x1UL << SDMMC_STA_CKSTOP_Pos)       /*!< 0x04000000 */
#define SDMMC_STA_CKSTOP                 SDMMC_STA_CKSTOP_Msk                  /*!<SDMMC_CK stopped in Voltage switch procedure                            */
#define SDMMC_STA_IDMATE_Pos             (27U)
#define SDMMC_STA_IDMATE_Msk             (0x1UL << SDMMC_STA_IDMATE_Pos)       /*!< 0x08000000 */
#define SDMMC_STA_IDMATE                 SDMMC_STA_IDMATE_Msk                  /*!<IDMA transfer error                                                     */
#define SDMMC_STA_IDMABTC_Pos            (28U)
#define SDMMC_STA_IDMABTC_Msk            (0x1UL << SDMMC_STA_IDMABTC_Pos)      /*!< 0x10000000 */
#define SDMMC_STA_IDMABTC                SDMMC_STA_IDMABTC_Msk                 /*!<IDMA buffer transfer complete                                           */

/*******************  Bit definition for SDMMC_ICR register  *******************/
#define SDMMC_ICR_CCRCFAILC_Pos          (0U)
#define SDMMC_ICR_CCRCFAILC_Msk          (0x1UL << SDMMC_ICR_CCRCFAILC_Pos)    /*!< 0x00000001 */
#define SDMMC_ICR_CCRCFAILC              SDMMC_ICR_CCRCFAILC_Msk               /*!<CCRCFAIL flag clear bit */
#define SDMMC_ICR_DCRCFAILC_Pos          (1U)
#define SDMMC_ICR_DCRCFAILC_Msk          (0x1UL << SDMMC_ICR_DCRCFAILC_Pos)    /*!< 0x00000002 */
#define SDMMC_ICR_DCRCFAILC              SDMMC_ICR_DCRCFAILC_Msk               /*!<DCRCFAIL flag clear bit */
#define SDMMC_ICR_CTIMEOUTC_Pos          (2U)
#define SDMMC_ICR_CTIMEOUTC_Msk          (0x1UL << SDMMC_ICR_CTIMEOUTC_Pos)    /*!< 0x00000004 */
#define SDMMC_ICR_CTIMEOUTC              SDMMC_ICR_CTIMEOUTC_Msk               /*!<CTIMEOUT flag clear bit */
#define SDMMC_ICR_DTIMEOUTC_Pos          (3U)
#define SDMMC_ICR_DTIMEOUTC_Msk          (0x1UL << SDMMC_ICR_DTIMEOUTC_Pos)    /*!< 0x00000008 */
#define SDMMC_ICR_DTIMEOUTC              SDMMC_ICR_DTIMEOUTC_Msk               /*!<DTIMEOUT flag clear bit */
#define SDMMC_ICR_TXUNDERRC_Pos          (4U)
#define SDMMC_ICR_TXUNDERRC_Msk          (0x1UL << SDMMC_ICR_TXUNDERRC_Pos)    /*!< 0x00000010 */
#define SDMMC_ICR_TXUNDERRC              SDMMC_ICR_TXUNDERRC_Msk               /*!<TXUNDERR flag clear bit */
#define SDMMC_ICR_RXOVERRC_Pos           (5U)
#define SDMMC_ICR_RXOVERRC_Msk           (0x1UL << SDMMC_ICR_RXOVERRC_Pos)     /*!< 0x00000020 */
#define SDMMC_ICR_RXOVERRC               SDMMC_ICR_RXOVERRC_Msk                /*!<RXOVERR flag clear bit  */
#define SDMMC_ICR_CMDRENDC_Pos           (6U)
#define SDMMC_ICR_CMDRENDC_Msk           (0x1UL << SDMMC_ICR_CMDRENDC_Pos)     /*!< 0x00000040 */
#define SDMMC_ICR_CMDRENDC               SDMMC_ICR_CMDRENDC_Msk                /*!<CMDREND flag clear bit  */
#define SDMMC_ICR_CMDSENTC_Pos           (7U)
#define SDMMC_ICR_CMDSENTC_Msk           (0x1UL << SDMMC_ICR_CMDSENTC_Pos)     /*!< 0x00000080 */
#define SDMMC_ICR_CMDSENTC               SDMMC_ICR_CMDSENTC_Msk                /*!<CMDSENT flag clear bit  */
#define SDMMC_ICR_DATAENDC_Pos           (8U)
#define SDMMC_ICR_DATAENDC_Msk           (0x1UL << SDMMC_ICR_DATAENDC_Pos)     /*!< 0x00000100 */
#define SDMMC_ICR_DATAENDC               SDMMC_ICR_DATAENDC_Msk                /*!<DATAEND flag clear bit  */
#define SDMMC_ICR_DHOLDC_Pos             (9U)
#define SDMMC_ICR_DHOLDC_Msk             (0x1UL << SDMMC_ICR_DHOLDC_Pos)       /*!< 0x00000200 */
#define SDMMC_ICR_DHOLDC                 SDMMC_ICR_DHOLDC_Msk                  /*!<DHOLD flag clear bit       */
#define SDMMC_ICR_DBCKENDC_Pos           (10U)
#define SDMMC_ICR_DBCKENDC_Msk           (0x1UL << SDMMC_ICR_DBCKENDC_Pos)     /*!< 0x00000400 */
#define SDMMC_ICR_DBCKENDC               SDMMC_ICR_DBCKENDC_Msk                /*!<DBCKEND flag clear bit  */
#define SDMMC_ICR_DABORTC_Pos            (11U)
#define SDMMC_ICR_DABORTC_Msk            (0x1UL << SDMMC_ICR_DABORTC_Pos)      /*!< 0x00000800 */
#define SDMMC_ICR_DABORTC                SDMMC_ICR_DABORTC_Msk                 /*!<DABORTC flag clear bit     */
#define SDMMC_ICR_BUSYD0ENDC_Pos         (21U)
#define SDMMC_ICR_BUSYD0ENDC_Msk         (0x1UL << SDMMC_ICR_BUSYD0ENDC_Pos)   /*!< 0x00200000 */
#define SDMMC_ICR_BUSYD0ENDC             SDMMC_ICR_BUSYD0ENDC_Msk              /*!<BUSYD0ENDC flag clear bit  */
#define SDMMC_ICR_SDIOITC_Pos            (22U)
#define SDMMC_ICR_SDIOITC_Msk            (0x1UL << SDMMC_ICR_SDIOITC_Pos)      /*!< 0x00400000 */
#define SDMMC_ICR_SDIOITC                SDMMC_ICR_SDIOITC_Msk                 /*!<SDIOIT flag clear bit      */
#define SDMMC_ICR_ACKFAILC_Pos           (23U)
#define SDMMC_ICR_ACKFAILC_Msk           (0x1UL << SDMMC_ICR_ACKFAILC_Pos)     /*!< 0x00800000 */
#define SDMMC_ICR_ACKFAILC               SDMMC_ICR_ACKFAILC_Msk                /*!<ACKFAILC flag clear bit    */
#define SDMMC_ICR_ACKTIMEOUTC_Pos        (24U)
#define SDMMC_ICR_ACKTIMEOUTC_Msk        (0x1UL << SDMMC_ICR_ACKTIMEOUTC_Pos)  /*!< 0x01000000 */
#define SDMMC_ICR_ACKTIMEOUTC            SDMMC_ICR_ACKTIMEOUTC_Msk             /*!<ACKTIMEOUTC flag clear bit */
#define SDMMC_ICR_VSWENDC_Pos            (25U)
#define SDMMC_ICR_VSWENDC_Msk            (0x1UL << SDMMC_ICR_VSWENDC_Pos)      /*!< 0x02000000 */
#define SDMMC_ICR_VSWENDC                SDMMC_ICR_VSWENDC_Msk                 /*!<VSWENDC flag clear bit     */
#define SDMMC_ICR_CKSTOPC_Pos            (26U)
#define SDMMC_ICR_CKSTOPC_Msk            (0x1UL << SDMMC_ICR_CKSTOPC_Pos)      /*!< 0x04000000 */
#define SDMMC_ICR_CKSTOPC                SDMMC_ICR_CKSTOPC_Msk                 /*!<CKSTOPC flag clear bit     */
#define SDMMC_ICR_IDMATEC_Pos            (27U)
#define SDMMC_ICR_IDMATEC_Msk            (0x1UL << SDMMC_ICR_IDMATEC_Pos)      /*!< 0x08000000 */
#define SDMMC_ICR_IDMATEC                SDMMC_ICR_IDMATEC_Msk                 /*!<IDMATEC flag clear bit     */
#define SDMMC_ICR_IDMABTCC_Pos           (28U)
#define SDMMC_ICR_IDMABTCC_Msk           (0x1UL << SDMMC_ICR_IDMABTCC_Pos)     /*!< 0x10000000 */
#define SDMMC_ICR_IDMABTCC               SDMMC_ICR_IDMABTCC_Msk                /*!<IDMABTCC flag clear bit    */

/******************  Bit definition for SDMMC_MASK register  *******************/
#define SDMMC_MASK_CCRCFAILIE_Pos        (0U)
#define SDMMC_MASK_CCRCFAILIE_Msk        (0x1UL << SDMMC_MASK_CCRCFAILIE_Pos)  /*!< 0x00000001 */
#define SDMMC_MASK_CCRCFAILIE            SDMMC_MASK_CCRCFAILIE_Msk             /*!<Command CRC Fail Interrupt Enable          */
#define SDMMC_MASK_DCRCFAILIE_Pos        (1U)
#define SDMMC_MASK_DCRCFAILIE_Msk        (0x1UL << SDMMC_MASK_DCRCFAILIE_Pos)  /*!< 0x00000002 */
#define SDMMC_MASK_DCRCFAILIE            SDMMC_MASK_DCRCFAILIE_Msk             /*!<Data CRC Fail Interrupt Enable             */
#define SDMMC_MASK_CTIMEOUTIE_Pos        (2U)
#define SDMMC_MASK_CTIMEOUTIE_Msk        (0x1UL << SDMMC_MASK_CTIMEOUTIE_Pos)  /*!< 0x00000004 */
#define SDMMC_MASK_CTIMEOUTIE            SDMMC_MASK_CTIMEOUTIE_Msk             /*!<Command TimeOut Interrupt Enable           */
#define SDMMC_MASK_DTIMEOUTIE_Pos        (3U)
#define SDMMC_MASK_DTIMEOUTIE_Msk        (0x1UL << SDMMC_MASK_DTIMEOUTIE_Pos)  /*!< 0x00000008 */
#define SDMMC_MASK_DTIMEOUTIE            SDMMC_MASK_DTIMEOUTIE_Msk             /*!<Data TimeOut Interrupt Enable              */
#define SDMMC_MASK_TXUNDERRIE_Pos        (4U)
#define SDMMC_MASK_TXUNDERRIE_Msk        (0x1UL << SDMMC_MASK_TXUNDERRIE_Pos)  /*!< 0x00000010 */
#define SDMMC_MASK_TXUNDERRIE            SDMMC_MASK_TXUNDERRIE_Msk             /*!<Tx FIFO UnderRun Error Interrupt Enable    */
#define SDMMC_MASK_RXOVERRIE_Pos         (5U)
#define SDMMC_MASK_RXOVERRIE_Msk         (0x1UL << SDMMC_MASK_RXOVERRIE_Pos)   /*!< 0x00000020 */
#define SDMMC_MASK_RXOVERRIE             SDMMC_MASK_RXOVERRIE_Msk              /*!<Rx FIFO OverRun Error Interrupt Enable     */
#define SDMMC_MASK_CMDRENDIE_Pos         (6U)
#define SDMMC_MASK_CMDRENDIE_Msk         (0x1UL << SDMMC_MASK_CMDRENDIE_Pos)   /*!< 0x00000040 */
#define SDMMC_MASK_CMDRENDIE             SDMMC_MASK_CMDRENDIE_Msk              /*!<Command Response Received Interrupt Enable */
#define SDMMC_MASK_CMDSENTIE_Pos         (7U)
#define SDMMC_MASK_CMDSENTIE_Msk         (0x1UL << SDMMC_MASK_CMDSENTIE_Pos)   /*!< 0x00000080 */
#define SDMMC_MASK_CMDSENTIE             SDMMC_MASK_CMDSENTIE_Msk              /*!<Command Sent Interrupt Enable              */
#define SDMMC_MASK_DATAENDIE_Pos         (8U)
#define SDMMC_MASK_DATAENDIE_Msk         (0x1UL << SDMMC_MASK_DATAENDIE_Pos)   /*!< 0x00000100 */
#define SDMMC_MASK_DATAENDIE             SDMMC_MASK_DATAENDIE_Msk              /*!<Data End Interrupt Enable                  */
#define SDMMC_MASK_DHOLDIE_Pos           (9U)
#define SDMMC_MASK_DHOLDIE_Msk           (0x1UL << SDMMC_MASK_DHOLDIE_Pos)     /*!< 0x00000200 */
#define SDMMC_MASK_DHOLDIE               SDMMC_MASK_DHOLDIE_Msk                /*!<Data Hold Interrupt Enable                 */
#define SDMMC_MASK_DBCKENDIE_Pos         (10U)
#define SDMMC_MASK_DBCKENDIE_Msk         (0x1UL << SDMMC_MASK_DBCKENDIE_Pos)   /*!< 0x00000400 */
#define SDMMC_MASK_DBCKENDIE             SDMMC_MASK_DBCKENDIE_Msk              /*!<Data Block End Interrupt Enable            */
#define SDMMC_MASK_DABORTIE_Pos          (11U)
#define SDMMC_MASK_DABORTIE_Msk          (0x1UL << SDMMC_MASK_DABORTIE_Pos)    /*!< 0x00000800 */
#define SDMMC_MASK_DABORTIE              SDMMC_MASK_DABORTIE_Msk               /*!<Data transfer aborted interrupt enable     */

#define SDMMC_MASK_TXFIFOHEIE_Pos        (14U)
#define SDMMC_MASK_TXFIFOHEIE_Msk        (0x1UL << SDMMC_MASK_TXFIFOHEIE_Pos)  /*!< 0x00004000 */
#define SDMMC_MASK_TXFIFOHEIE            SDMMC_MASK_TXFIFOHEIE_Msk             /*!<Tx FIFO Half Empty interrupt Enable        */
#define SDMMC_MASK_RXFIFOHFIE_Pos        (15U)
#define SDMMC_MASK_RXFIFOHFIE_Msk        (0x1UL << SDMMC_MASK_RXFIFOHFIE_Pos)  /*!< 0x00008000 */
#define SDMMC_MASK_RXFIFOHFIE            SDMMC_MASK_RXFIFOHFIE_Msk             /*!<Rx FIFO Half Full interrupt Enable         */

#define SDMMC_MASK_RXFIFOFIE_Pos         (17U)
#define SDMMC_MASK_RXFIFOFIE_Msk         (0x1UL << SDMMC_MASK_RXFIFOFIE_Pos)   /*!< 0x00020000 */
#define SDMMC_MASK_RXFIFOFIE             SDMMC_MASK_RXFIFOFIE_Msk              /*!<Rx FIFO Full interrupt Enable              */
#define SDMMC_MASK_TXFIFOEIE_Pos         (18U)
#define SDMMC_MASK_TXFIFOEIE_Msk         (0x1UL << SDMMC_MASK_TXFIFOEIE_Pos)   /*!< 0x00040000 */
#define SDMMC_MASK_TXFIFOEIE             SDMMC_MASK_TXFIFOEIE_Msk              /*!<Tx FIFO Empty interrupt Enable             */

#define SDMMC_MASK_BUSYD0ENDIE_Pos       (21U)
#define SDMMC_MASK_BUSYD0ENDIE_Msk       (0x1UL << SDMMC_MASK_BUSYD0ENDIE_Pos) /*!< 0x00200000 */
#define SDMMC_MASK_BUSYD0ENDIE           SDMMC_MASK_BUSYD0ENDIE_Msk            /*!<BUSYD0ENDIE interrupt Enable */
#define SDMMC_MASK_SDIOITIE_Pos          (22U)
#define SDMMC_MASK_SDIOITIE_Msk          (0x1UL << SDMMC_MASK_SDIOITIE_Pos)    /*!< 0x00400000 */
#define SDMMC_MASK_SDIOITIE              SDMMC_MASK_SDIOITIE_Msk               /*!<SDMMC Mode Interrupt Received interrupt Enable */
#define SDMMC_MASK_ACKFAILIE_Pos         (23U)
#define SDMMC_MASK_ACKFAILIE_Msk         (0x1UL << SDMMC_MASK_ACKFAILIE_Pos)   /*!< 0x00800000 */
#define SDMMC_MASK_ACKFAILIE             SDMMC_MASK_ACKFAILIE_Msk              /*!<Acknowledgment Fail Interrupt Enable */
#define SDMMC_MASK_ACKTIMEOUTIE_Pos      (24U)
#define SDMMC_MASK_ACKTIMEOUTIE_Msk      (0x1UL << SDMMC_MASK_ACKTIMEOUTIE_Pos) /*!< 0x01000000 */
#define SDMMC_MASK_ACKTIMEOUTIE          SDMMC_MASK_ACKTIMEOUTIE_Msk           /*!<Acknowledgment timeout Interrupt Enable */
#define SDMMC_MASK_VSWENDIE_Pos          (25U)
#define SDMMC_MASK_VSWENDIE_Msk          (0x1UL << SDMMC_MASK_VSWENDIE_Pos)    /*!< 0x02000000 */
#define SDMMC_MASK_VSWENDIE              SDMMC_MASK_VSWENDIE_Msk               /*!<Voltage switch critical timing section completion Interrupt Enable */
#define SDMMC_MASK_CKSTOPIE_Pos          (26U)
#define SDMMC_MASK_CKSTOPIE_Msk          (0x1UL << SDMMC_MASK_CKSTOPIE_Pos)    /*!< 0x04000000 */
#define SDMMC_MASK_CKSTOPIE              SDMMC_MASK_CKSTOPIE_Msk               /*!<Voltage Switch clock stopped Interrupt Enable */
#define SDMMC_MASK_IDMABTCIE_Pos         (28U)
#define SDMMC_MASK_IDMABTCIE_Msk         (0x1UL << SDMMC_MASK_IDMABTCIE_Pos)   /*!< 0x10000000 */
#define SDMMC_MASK_IDMABTCIE             SDMMC_MASK_IDMABTCIE_Msk              /*!<IDMA buffer transfer complete Interrupt Enable */

/*****************  Bit definition for SDMMC_ACKTIME register  *****************/
#define SDMMC_ACKTIME_ACKTIME_Pos        (0U)
#define SDMMC_ACKTIME_ACKTIME_Msk        (0x1FFFFFFUL << SDMMC_ACKTIME_ACKTIME_Pos) /*!< 0x01FFFFFF */
#define SDMMC_ACKTIME_ACKTIME            SDMMC_ACKTIME_ACKTIME_Msk             /*!<Boot acknowledgment timeout period */

/******************  Bit definition for SDMMC_FIFO register  *******************/
#define SDMMC_FIFO_FIFODATA_Pos          (0U)
#define SDMMC_FIFO_FIFODATA_Msk          (0xFFFFFFFFUL << SDMMC_FIFO_FIFODATA_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_FIFO_FIFODATA              SDMMC_FIFO_FIFODATA_Msk               /*!<Receive and transmit FIFO data */

/******************  Bit definition for SDMMC_IDMACTRL register ****************/
#define SDMMC_IDMA_IDMAEN_Pos            (0U)
#define SDMMC_IDMA_IDMAEN_Msk            (0x1UL << SDMMC_IDMA_IDMAEN_Pos)      /*!< 0x00000001 */
#define SDMMC_IDMA_IDMAEN                SDMMC_IDMA_IDMAEN_Msk                 /*!< Enable the internal DMA of the SDMMC peripheral */
#define SDMMC_IDMA_IDMABMODE_Pos         (1U)
#define SDMMC_IDMA_IDMABMODE_Msk         (0x1UL << SDMMC_IDMA_IDMABMODE_Pos)   /*!< 0x00000002 */
#define SDMMC_IDMA_IDMABMODE             SDMMC_IDMA_IDMABMODE_Msk              /*!< Enable Linked List mode for IDMA */

/*****************  Bit definition for SDMMC_IDMABSIZER register  **************/
#define SDMMC_IDMABSIZE_IDMABNDT_Pos     (5U)
#define SDMMC_IDMABSIZE_IDMABNDT_Msk     (0xFFFL << SDMMC_IDMABSIZE_IDMABNDT_Pos) /*!< 0x0001FFE0 */
#define SDMMC_IDMABSIZE_IDMABNDT         SDMMC_IDMABSIZE_IDMABNDT_Msk          /*!< Number of bytes per buffer */

/*****************  Bit definition for SDMMC_IDMABASER register  ***************/
#define SDMMC_IDMABASER_IDMABASE0_Pos    (0U)
#define SDMMC_IDMABASER_IDMABASE0_Msk    (0xFFFFFFFFUL << SDMMC_IDMABASER_IDMABASE0_Pos)/*!< 0xFFFFFFFF */
#define SDMMC_IDMABASER_IDMABASE0        SDMMC_IDMABASER_IDMABASE0_Msk         /*!< Memory base address register */

/*****************  Bit definition for SDMMC_IDMALAR register  ***************/
#define SDMMC_IDMALAR_IDMALAR_Pos        (2U)
#define SDMMC_IDMALAR_IDMALAR_Msk        (0x3FFFL << SDMMC_IDMALAR_IDMALA_Pos) /*!< 0x0000FFFC */
#define SDMMC_IDMALAR_IDMALAR            SDMMC_IDMALAR_IDMALA_Msk              /*!< Linked list address offset */
#define SDMMC_IDMALAR_ABR_Pos            (29U)
#define SDMMC_IDMALAR_ABR_Msk            (0x1UL << SDMMC_IDMALAR_ABR_Pos)      /*!< 0x20000000 */
#define SDMMC_IDMALAR_ABR                SDMMC_IDMALAR_ABR_Msk                 /*!< Acknowledge linked list buffer ready */
#define SDMMC_IDMALAR_ULS_Pos            (30U)
#define SDMMC_IDMALAR_ULS_Msk            (0x1UL << SDMMC_IDMALAR_ULS_Pos)      /*!< 0x40000000 */
#define SDMMC_IDMALAR_ULS                SDMMC_IDMALAR_ULS_Msk                 /*!< Update SDMMC_IDMABSIZE from linked list */
#define SDMMC_IDMALAR_ULA_Pos            (31U)
#define SDMMC_IDMALAR_ULA_Msk            (0x1UL << SDMMC_IDMALAR_ULS_Pos)      /*!< 0x80000000 */
#define SDMMC_IDMALAR_ULA                SDMMC_IDMALAR_ULA_Msk                 /*!< Update SDMMC_IDMALAR from linked list */

/*****************  Bit definition for SDMMC_IDMABAR register  ***************/
#define SDMMC_IDMABAR_IDMABAR_Pos        (0U)
#define SDMMC_IDMABAR_IDMABAR_Msk        (0xFFFFFFFFUL << SDMMC_IDMABAR_IDMABAR_Pos)/*!< 0xFFFFFFFF */
#define SDMMC_IDMABAR_IDMABAR            SDMMC_IDMABAR_IDMABAR_Msk             /*!< linked list memory base register */

/******************************************************************************/
/*                                                                            */
/*                              SPDIF-RX Interface                            */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for SPDIF_CR register  ******************/
#define SPDIFRX_CR_SPDIFEN_Pos      (0U)
#define SPDIFRX_CR_SPDIFEN_Msk      (0x3UL << SPDIFRX_CR_SPDIFEN_Pos)          /*!< 0x00000003 */
#define SPDIFRX_CR_SPDIFEN          SPDIFRX_CR_SPDIFEN_Msk                     /*!<Peripheral Block Enable                      */
#define SPDIFRX_CR_RXDMAEN_Pos      (2U)
#define SPDIFRX_CR_RXDMAEN_Msk      (0x1UL << SPDIFRX_CR_RXDMAEN_Pos)          /*!< 0x00000004 */
#define SPDIFRX_CR_RXDMAEN          SPDIFRX_CR_RXDMAEN_Msk                     /*!<Receiver DMA Enable for data flow            */
#define SPDIFRX_CR_RXSTEO_Pos       (3U)
#define SPDIFRX_CR_RXSTEO_Msk       (0x1UL << SPDIFRX_CR_RXSTEO_Pos)           /*!< 0x00000008 */
#define SPDIFRX_CR_RXSTEO           SPDIFRX_CR_RXSTEO_Msk                      /*!<Stereo Mode                                  */
#define SPDIFRX_CR_DRFMT_Pos        (4U)
#define SPDIFRX_CR_DRFMT_Msk        (0x3UL << SPDIFRX_CR_DRFMT_Pos)            /*!< 0x00000030 */
#define SPDIFRX_CR_DRFMT            SPDIFRX_CR_DRFMT_Msk                       /*!<RX Data format                               */
#define SPDIFRX_CR_PMSK_Pos         (6U)
#define SPDIFRX_CR_PMSK_Msk         (0x1UL << SPDIFRX_CR_PMSK_Pos)             /*!< 0x00000040 */
#define SPDIFRX_CR_PMSK             SPDIFRX_CR_PMSK_Msk                        /*!<Mask Parity error bit                        */
#define SPDIFRX_CR_VMSK_Pos         (7U)
#define SPDIFRX_CR_VMSK_Msk         (0x1UL << SPDIFRX_CR_VMSK_Pos)             /*!< 0x00000080 */
#define SPDIFRX_CR_VMSK             SPDIFRX_CR_VMSK_Msk                        /*!<Mask of Validity bit                         */
#define SPDIFRX_CR_CUMSK_Pos        (8U)
#define SPDIFRX_CR_CUMSK_Msk        (0x1UL << SPDIFRX_CR_CUMSK_Pos)            /*!< 0x00000100 */
#define SPDIFRX_CR_CUMSK            SPDIFRX_CR_CUMSK_Msk                       /*!<Mask of channel status and user bits         */
#define SPDIFRX_CR_PTMSK_Pos        (9U)
#define SPDIFRX_CR_PTMSK_Msk        (0x1UL << SPDIFRX_CR_PTMSK_Pos)            /*!< 0x00000200 */
#define SPDIFRX_CR_PTMSK            SPDIFRX_CR_PTMSK_Msk                       /*!<Mask of Preamble Type bits                   */
#define SPDIFRX_CR_CBDMAEN_Pos      (10U)
#define SPDIFRX_CR_CBDMAEN_Msk      (0x1UL << SPDIFRX_CR_CBDMAEN_Pos)          /*!< 0x00000400 */
#define SPDIFRX_CR_CBDMAEN          SPDIFRX_CR_CBDMAEN_Msk                     /*!<Control Buffer DMA ENable for control flow   */
#define SPDIFRX_CR_CHSEL_Pos        (11U)
#define SPDIFRX_CR_CHSEL_Msk        (0x1UL << SPDIFRX_CR_CHSEL_Pos)            /*!< 0x00000800 */
#define SPDIFRX_CR_CHSEL            SPDIFRX_CR_CHSEL_Msk                       /*!<Channel Selection                            */
#define SPDIFRX_CR_NBTR_Pos         (12U)
#define SPDIFRX_CR_NBTR_Msk         (0x3UL << SPDIFRX_CR_NBTR_Pos)             /*!< 0x00003000 */
#define SPDIFRX_CR_NBTR             SPDIFRX_CR_NBTR_Msk                        /*!<Maximum allowed re-tries during synchronization phase */
#define SPDIFRX_CR_WFA_Pos          (14U)
#define SPDIFRX_CR_WFA_Msk          (0x1UL << SPDIFRX_CR_WFA_Pos)              /*!< 0x00004000 */
#define SPDIFRX_CR_WFA              SPDIFRX_CR_WFA_Msk                         /*!<Wait For Activity     */
#define SPDIFRX_CR_INSEL_Pos        (16U)
#define SPDIFRX_CR_INSEL_Msk        (0x7UL << SPDIFRX_CR_INSEL_Pos)            /*!< 0x00070000 */
#define SPDIFRX_CR_INSEL            SPDIFRX_CR_INSEL_Msk                       /*!<SPDIF input selection */
#define SPDIFRX_CR_CKSEN_Pos        (20U)
#define SPDIFRX_CR_CKSEN_Msk        (0x1UL << SPDIFRX_CR_CKSEN_Pos)            /*!< 0x00100000 */
#define SPDIFRX_CR_CKSEN            SPDIFRX_CR_CKSEN_Msk                       /*!<Symbol Clock Enable */
#define SPDIFRX_CR_CKSBKPEN_Pos     (21U)
#define SPDIFRX_CR_CKSBKPEN_Msk     (0x1UL << SPDIFRX_CR_CKSBKPEN_Pos)         /*!< 0x00200000 */
#define SPDIFRX_CR_CKSBKPEN         SPDIFRX_CR_CKSBKPEN_Msk                    /*!<Backup Symbol Clock Enable */

/*******************  Bit definition for SPDIFRX_IMR register  *******************/
#define SPDIFRX_IMR_RXNEIE_Pos      (0U)
#define SPDIFRX_IMR_RXNEIE_Msk      (0x1UL << SPDIFRX_IMR_RXNEIE_Pos)          /*!< 0x00000001 */
#define SPDIFRX_IMR_RXNEIE          SPDIFRX_IMR_RXNEIE_Msk                     /*!<RXNE interrupt enable                              */
#define SPDIFRX_IMR_CSRNEIE_Pos     (1U)
#define SPDIFRX_IMR_CSRNEIE_Msk     (0x1UL << SPDIFRX_IMR_CSRNEIE_Pos)         /*!< 0x00000002 */
#define SPDIFRX_IMR_CSRNEIE         SPDIFRX_IMR_CSRNEIE_Msk                    /*!<Control Buffer Ready Interrupt Enable              */
#define SPDIFRX_IMR_PERRIE_Pos      (2U)
#define SPDIFRX_IMR_PERRIE_Msk      (0x1UL << SPDIFRX_IMR_PERRIE_Pos)          /*!< 0x00000004 */
#define SPDIFRX_IMR_PERRIE          SPDIFRX_IMR_PERRIE_Msk                     /*!<Parity error interrupt enable                      */
#define SPDIFRX_IMR_OVRIE_Pos       (3U)
#define SPDIFRX_IMR_OVRIE_Msk       (0x1UL << SPDIFRX_IMR_OVRIE_Pos)           /*!< 0x00000008 */
#define SPDIFRX_IMR_OVRIE           SPDIFRX_IMR_OVRIE_Msk                      /*!<Overrun error Interrupt Enable                     */
#define SPDIFRX_IMR_SBLKIE_Pos      (4U)
#define SPDIFRX_IMR_SBLKIE_Msk      (0x1UL << SPDIFRX_IMR_SBLKIE_Pos)          /*!< 0x00000010 */
#define SPDIFRX_IMR_SBLKIE          SPDIFRX_IMR_SBLKIE_Msk                     /*!<Synchronization Block Detected Interrupt Enable    */
#define SPDIFRX_IMR_SYNCDIE_Pos     (5U)
#define SPDIFRX_IMR_SYNCDIE_Msk     (0x1UL << SPDIFRX_IMR_SYNCDIE_Pos)         /*!< 0x00000020 */
#define SPDIFRX_IMR_SYNCDIE         SPDIFRX_IMR_SYNCDIE_Msk                    /*!<Synchronization Done                               */
#define SPDIFRX_IMR_IFEIE_Pos       (6U)
#define SPDIFRX_IMR_IFEIE_Msk       (0x1UL << SPDIFRX_IMR_IFEIE_Pos)           /*!< 0x00000040 */
#define SPDIFRX_IMR_IFEIE           SPDIFRX_IMR_IFEIE_Msk                      /*!<Serial Interface Error Interrupt Enable            */

/*******************  Bit definition for SPDIFRX_SR register  *******************/
#define SPDIFRX_SR_RXNE_Pos         (0U)
#define SPDIFRX_SR_RXNE_Msk         (0x1UL << SPDIFRX_SR_RXNE_Pos)             /*!< 0x00000001 */
#define SPDIFRX_SR_RXNE             SPDIFRX_SR_RXNE_Msk                        /*!<Read data register not empty                          */
#define SPDIFRX_SR_CSRNE_Pos        (1U)
#define SPDIFRX_SR_CSRNE_Msk        (0x1UL << SPDIFRX_SR_CSRNE_Pos)            /*!< 0x00000002 */
#define SPDIFRX_SR_CSRNE            SPDIFRX_SR_CSRNE_Msk                       /*!<The Control Buffer register is not empty              */
#define SPDIFRX_SR_PERR_Pos         (2U)
#define SPDIFRX_SR_PERR_Msk         (0x1UL << SPDIFRX_SR_PERR_Pos)             /*!< 0x00000004 */
#define SPDIFRX_SR_PERR             SPDIFRX_SR_PERR_Msk                        /*!<Parity error                                          */
#define SPDIFRX_SR_OVR_Pos          (3U)
#define SPDIFRX_SR_OVR_Msk          (0x1UL << SPDIFRX_SR_OVR_Pos)              /*!< 0x00000008 */
#define SPDIFRX_SR_OVR              SPDIFRX_SR_OVR_Msk                         /*!<Overrun error                                         */
#define SPDIFRX_SR_SBD_Pos          (4U)
#define SPDIFRX_SR_SBD_Msk          (0x1UL << SPDIFRX_SR_SBD_Pos)              /*!< 0x00000010 */
#define SPDIFRX_SR_SBD              SPDIFRX_SR_SBD_Msk                         /*!<Synchronization Block Detected                        */
#define SPDIFRX_SR_SYNCD_Pos        (5U)
#define SPDIFRX_SR_SYNCD_Msk        (0x1UL << SPDIFRX_SR_SYNCD_Pos)            /*!< 0x00000020 */
#define SPDIFRX_SR_SYNCD            SPDIFRX_SR_SYNCD_Msk                       /*!<Synchronization Done                                  */
#define SPDIFRX_SR_FERR_Pos         (6U)
#define SPDIFRX_SR_FERR_Msk         (0x1UL << SPDIFRX_SR_FERR_Pos)             /*!< 0x00000040 */
#define SPDIFRX_SR_FERR             SPDIFRX_SR_FERR_Msk                        /*!<Framing error                                         */
#define SPDIFRX_SR_SERR_Pos         (7U)
#define SPDIFRX_SR_SERR_Msk         (0x1UL << SPDIFRX_SR_SERR_Pos)             /*!< 0x00000080 */
#define SPDIFRX_SR_SERR             SPDIFRX_SR_SERR_Msk                        /*!<Synchronization error                                 */
#define SPDIFRX_SR_TERR_Pos         (8U)
#define SPDIFRX_SR_TERR_Msk         (0x1UL << SPDIFRX_SR_TERR_Pos)             /*!< 0x00000100 */
#define SPDIFRX_SR_TERR             SPDIFRX_SR_TERR_Msk                        /*!<Time-out error                                        */
#define SPDIFRX_SR_WIDTH5_Pos       (16U)
#define SPDIFRX_SR_WIDTH5_Msk       (0x7FFFUL << SPDIFRX_SR_WIDTH5_Pos)        /*!< 0x7FFF0000 */
#define SPDIFRX_SR_WIDTH5           SPDIFRX_SR_WIDTH5_Msk                      /*!<Duration of 5 symbols counted with spdif_clk          */

/*******************  Bit definition for SPDIFRX_IFCR register  *******************/
#define SPDIFRX_IFCR_PERRCF_Pos     (2U)
#define SPDIFRX_IFCR_PERRCF_Msk     (0x1UL << SPDIFRX_IFCR_PERRCF_Pos)         /*!< 0x00000004 */
#define SPDIFRX_IFCR_PERRCF         SPDIFRX_IFCR_PERRCF_Msk                    /*!<Clears the Parity error flag                         */
#define SPDIFRX_IFCR_OVRCF_Pos      (3U)
#define SPDIFRX_IFCR_OVRCF_Msk      (0x1UL << SPDIFRX_IFCR_OVRCF_Pos)          /*!< 0x00000008 */
#define SPDIFRX_IFCR_OVRCF          SPDIFRX_IFCR_OVRCF_Msk                     /*!<Clears the Overrun error flag                        */
#define SPDIFRX_IFCR_SBDCF_Pos      (4U)
#define SPDIFRX_IFCR_SBDCF_Msk      (0x1UL << SPDIFRX_IFCR_SBDCF_Pos)          /*!< 0x00000010 */
#define SPDIFRX_IFCR_SBDCF          SPDIFRX_IFCR_SBDCF_Msk                     /*!<Clears the Synchronization Block Detected flag       */
#define SPDIFRX_IFCR_SYNCDCF_Pos    (5U)
#define SPDIFRX_IFCR_SYNCDCF_Msk    (0x1UL << SPDIFRX_IFCR_SYNCDCF_Pos)        /*!< 0x00000020 */
#define SPDIFRX_IFCR_SYNCDCF        SPDIFRX_IFCR_SYNCDCF_Msk                   /*!<Clears the Synchronization Done flag                 */

/*******************  Bit definition for SPDIFRX_DR register  (DRFMT = 0b00 case) *******************/
#define SPDIFRX_DR0_DR_Pos          (0U)
#define SPDIFRX_DR0_DR_Msk          (0xFFFFFFUL << SPDIFRX_DR0_DR_Pos)         /*!< 0x00FFFFFF */
#define SPDIFRX_DR0_DR              SPDIFRX_DR0_DR_Msk                         /*!<Data value            */
#define SPDIFRX_DR0_PE_Pos          (24U)
#define SPDIFRX_DR0_PE_Msk          (0x1UL << SPDIFRX_DR0_PE_Pos)              /*!< 0x01000000 */
#define SPDIFRX_DR0_PE              SPDIFRX_DR0_PE_Msk                         /*!<Parity Error bit      */
#define SPDIFRX_DR0_V_Pos           (25U)
#define SPDIFRX_DR0_V_Msk           (0x1UL << SPDIFRX_DR0_V_Pos)               /*!< 0x02000000 */
#define SPDIFRX_DR0_V               SPDIFRX_DR0_V_Msk                          /*!<Validity bit          */
#define SPDIFRX_DR0_U_Pos           (26U)
#define SPDIFRX_DR0_U_Msk           (0x1UL << SPDIFRX_DR0_U_Pos)               /*!< 0x04000000 */
#define SPDIFRX_DR0_U               SPDIFRX_DR0_U_Msk                          /*!<User bit              */
#define SPDIFRX_DR0_C_Pos           (27U)
#define SPDIFRX_DR0_C_Msk           (0x1UL << SPDIFRX_DR0_C_Pos)               /*!< 0x08000000 */
#define SPDIFRX_DR0_C               SPDIFRX_DR0_C_Msk                          /*!<Channel Status bit    */
#define SPDIFRX_DR0_PT_Pos          (28U)
#define SPDIFRX_DR0_PT_Msk          (0x3UL << SPDIFRX_DR0_PT_Pos)              /*!< 0x30000000 */
#define SPDIFRX_DR0_PT              SPDIFRX_DR0_PT_Msk                         /*!<Preamble Type         */

/*******************  Bit definition for SPDIFRX_DR register  (DRFMT = 0b01 case) *******************/
#define SPDIFRX_DR1_DR_Pos          (8U)
#define SPDIFRX_DR1_DR_Msk          (0xFFFFFFUL << SPDIFRX_DR1_DR_Pos)         /*!< 0xFFFFFF00 */
#define SPDIFRX_DR1_DR              SPDIFRX_DR1_DR_Msk                         /*!<Data value            */
#define SPDIFRX_DR1_PT_Pos          (4U)
#define SPDIFRX_DR1_PT_Msk          (0x3UL << SPDIFRX_DR1_PT_Pos)              /*!< 0x00000030 */
#define SPDIFRX_DR1_PT              SPDIFRX_DR1_PT_Msk                         /*!<Preamble Type         */
#define SPDIFRX_DR1_C_Pos           (3U)
#define SPDIFRX_DR1_C_Msk           (0x1UL << SPDIFRX_DR1_C_Pos)               /*!< 0x00000008 */
#define SPDIFRX_DR1_C               SPDIFRX_DR1_C_Msk                          /*!<Channel Status bit    */
#define SPDIFRX_DR1_U_Pos           (2U)
#define SPDIFRX_DR1_U_Msk           (0x1UL << SPDIFRX_DR1_U_Pos)               /*!< 0x00000004 */
#define SPDIFRX_DR1_U               SPDIFRX_DR1_U_Msk                          /*!<User bit              */
#define SPDIFRX_DR1_V_Pos           (1U)
#define SPDIFRX_DR1_V_Msk           (0x1UL << SPDIFRX_DR1_V_Pos)               /*!< 0x00000002 */
#define SPDIFRX_DR1_V               SPDIFRX_DR1_V_Msk                          /*!<Validity bit          */
#define SPDIFRX_DR1_PE_Pos          (0U)
#define SPDIFRX_DR1_PE_Msk          (0x1UL << SPDIFRX_DR1_PE_Pos)              /*!< 0x00000001 */
#define SPDIFRX_DR1_PE              SPDIFRX_DR1_PE_Msk                         /*!<Parity Error bit      */

/*******************  Bit definition for SPDIFRX_DR register  (DRFMT = 0b10 case) *******************/
#define SPDIFRX_DR1_DRNL1_Pos       (16U)
#define SPDIFRX_DR1_DRNL1_Msk       (0xFFFFUL << SPDIFRX_DR1_DRNL1_Pos)        /*!< 0xFFFF0000 */
#define SPDIFRX_DR1_DRNL1           SPDIFRX_DR1_DRNL1_Msk                      /*!<Data value Channel B      */
#define SPDIFRX_DR1_DRNL2_Pos       (0U)
#define SPDIFRX_DR1_DRNL2_Msk       (0xFFFFUL << SPDIFRX_DR1_DRNL2_Pos)        /*!< 0x0000FFFF */
#define SPDIFRX_DR1_DRNL2           SPDIFRX_DR1_DRNL2_Msk                      /*!<Data value Channel A      */

/*******************  Bit definition for SPDIFRX_CSR register   *******************/
#define SPDIFRX_CSR_USR_Pos         (0U)
#define SPDIFRX_CSR_USR_Msk         (0xFFFFUL << SPDIFRX_CSR_USR_Pos)          /*!< 0x0000FFFF */
#define SPDIFRX_CSR_USR             SPDIFRX_CSR_USR_Msk                        /*!<User data information           */
#define SPDIFRX_CSR_CS_Pos          (16U)
#define SPDIFRX_CSR_CS_Msk          (0xFFUL << SPDIFRX_CSR_CS_Pos)             /*!< 0x00FF0000 */
#define SPDIFRX_CSR_CS              SPDIFRX_CSR_CS_Msk                         /*!<Channel A status information    */
#define SPDIFRX_CSR_SOB_Pos         (24U)
#define SPDIFRX_CSR_SOB_Msk         (0x1UL << SPDIFRX_CSR_SOB_Pos)             /*!< 0x01000000 */
#define SPDIFRX_CSR_SOB             SPDIFRX_CSR_SOB_Msk                        /*!<Start Of Block                  */

/*******************  Bit definition for SPDIFRX_DIR register    *******************/
#define SPDIFRX_DIR_THI_Pos         (0U)
#define SPDIFRX_DIR_THI_Msk         (0x1FFFUL << SPDIFRX_DIR_THI_Pos)          /*!< 0x00001FFF */
#define SPDIFRX_DIR_THI             SPDIFRX_DIR_THI_Msk                        /*!<Threshold LOW      */
#define SPDIFRX_DIR_TLO_Pos         (16U)
#define SPDIFRX_DIR_TLO_Msk         (0x1FFFUL << SPDIFRX_DIR_TLO_Pos)          /*!< 0x1FFF0000 */
#define SPDIFRX_DIR_TLO             SPDIFRX_DIR_TLO_Msk                        /*!<Threshold HIGH     */

/*******************  Bit definition for SPDIFRX_VERR register    *******************/
#define SPDIFRX_VERR_MINREV_Pos     (0U)
#define SPDIFRX_VERR_MINREV_Msk     (0xFUL << SPDIFRX_VERR_MINREV_Pos)         /*!< 0x0000000F */
#define SPDIFRX_VERR_MINREV         SPDIFRX_VERR_MINREV_Msk                    /*!<SPDIFRX Minor revision     */
#define SPDIFRX_VERR_MAJREV_Pos     (4U)
#define SPDIFRX_VERR_MAJREV_Msk     (0xFUL << SPDIFRX_VERR_MAJREV_Pos)         /*!< 0x000000F0 */
#define SPDIFRX_VERR_MAJREV         SPDIFRX_VERR_MAJREV_Msk                    /*!<SPDIFRX Major revision     */

/*******************  Bit definition for SPDIFRX_IDR register    *******************/
#define SPDIFRX_IDR_ID_Pos          (0U)
#define SPDIFRX_IDR_ID_Msk          (0xFFFFFFFFUL << SPDIFRX_IDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define SPDIFRX_IDR_ID              SPDIFRX_IDR_ID_Msk                         /*!<SPDIFRX identifier     */

/*******************  Bit definition for SPDIFRX_SIDR register    *******************/
#define SPDIFRX_SIDR_SID_Pos        (0U)
#define SPDIFRX_SIDR_SID_Msk        (0xFFFFFFFFUL << SPDIFRX_SIDR_SID_Pos)     /*!< 0xFFFFFFFF */
#define SPDIFRX_SIDR_SID            SPDIFRX_SIDR_SID_Msk                       /*!<Size of the memory region allocated to SPDIFRX registers */

/******************************************************************************/
/*                                                                            */
/*                 System configuration controller (SYSCFG)                   */
/*                                                                            */
/******************************************************************************/
/****************  Bit definition for SYSCFG_BOOTSR register  *****************/
#define SYSCFG_BOOTSR_BOOT0_Pos                                         (0U)
#define SYSCFG_BOOTSR_BOOT0_Msk                                         (0x1U << SYSCFG_BOOTSR_BOOT0_Pos)                                           /*!< 0x00000001 */
#define SYSCFG_BOOTSR_BOOT0                                             SYSCFG_BOOTSR_BOOT0_Msk                                                     /*!< BOOT0 pin value */
#define SYSCFG_BOOTSR_BOOT1_Pos                                         (1U)
#define SYSCFG_BOOTSR_BOOT1_Msk                                         (0x1U << SYSCFG_BOOTSR_BOOT1_Pos)                                           /*!< 0x00000002 */
#define SYSCFG_BOOTSR_BOOT1                                             SYSCFG_BOOTSR_BOOT1_Msk                                                     /*!< BOOT1 pin value */
#define SYSCFG_BOOTSR_BOOT2_Pos                                         (2U)
#define SYSCFG_BOOTSR_BOOT2_Msk                                         (0x1U << SYSCFG_BOOTSR_BOOT2_Pos)                                           /*!< 0x00000004 */
#define SYSCFG_BOOTSR_BOOT2                                             SYSCFG_BOOTSR_BOOT2_Msk                                                     /*!< BOOT2 pin value */
#define SYSCFG_BOOTSR_BOOT3_Pos                                         (3U)
#define SYSCFG_BOOTSR_BOOT3_Msk                                         (0x1U << SYSCFG_BOOTSR_BOOT3_Pos)                                           /*!< 0x00000008 */
#define SYSCFG_BOOTSR_BOOT3                                             SYSCFG_BOOTSR_BOOT3_Msk                                                     /*!< BOOT2 pin value */

/****************  Bit definition for SYSCFG_BOOTCR register  *****************/
#define SYSCFG_BOOTCR_BOOT0_PD_Pos                                      (0U)
#define SYSCFG_BOOTCR_BOOT0_PD_Msk                                      (0x1U << SYSCFG_BOOTCR_BOOT0_PD_Pos)                                        /*!< 0x00000001 */
#define SYSCFG_BOOTCR_BOOT0_PD                                          SYSCFG_BOOTCR_BOOT0_PD_Msk                                                  /*!< BOOT0 pin pull-down disable. This is used to save power in case the BOOT0 pin is connected to VDD */
#define SYSCFG_BOOTCR_BOOT1_PD_Pos                                      (1U)
#define SYSCFG_BOOTCR_BOOT1_PD_Msk                                      (0x1U << SYSCFG_BOOTCR_BOOT1_PD_Pos)                                        /*!< 0x00000002 */
#define SYSCFG_BOOTCR_BOOT1_PD                                          SYSCFG_BOOTCR_BOOT1_PD_Msk                                                  /*!< BOOT1 pin pull-down disable. This is used to save power in case the BOOT1 pin is connected to VDD */
#define SYSCFG_BOOTCR_BOOT2_PD_Pos                                      (2U)
#define SYSCFG_BOOTCR_BOOT2_PD_Msk                                      (0x1U << SYSCFG_BOOTCR_BOOT2_PD_Pos)                                        /*!< 0x00000004 */
#define SYSCFG_BOOTCR_BOOT2_PD                                          SYSCFG_BOOTCR_BOOT2_PD_Msk                                                  /*!< BOOT2 pin pull-down disable. This is used to save power in case the BOOT2 pin is connected to VDD. */
#define SYSCFG_BOOTCR_BOOT3_PD_Pos                                      (3U)
#define SYSCFG_BOOTCR_BOOT3_PD_Msk                                      (0x1U << SYSCFG_BOOTCR_BOOT3_PD_Pos)                                        /*!< 0x00000008 */
#define SYSCFG_BOOTCR_BOOT3_PD                                          SYSCFG_BOOTCR_BOOT3_PD_Msk                                                  /*!< BOOT3 pin pull-down disable. This is used to save power in case the BOOT3 pin is connected to VDD. */

/**************  Bit definition for SYSCFG_SDMMC1DLLCR register  **************/
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_EN_Pos                            (0U)
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_EN_Msk                            (0x1U << SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_EN_Pos)                              /*!< 0x00000001 */
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_EN                                SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_EN_Msk                                        /*!< When 1, DLL is enabled. */
#define SYSCFG_SDMMC1DLLCR_SDMMC1_RX_TAP_SEL_Pos                        (1U)
#define SYSCFG_SDMMC1DLLCR_SDMMC1_RX_TAP_SEL_Msk                        (0x1FU << SYSCFG_SDMMC1DLLCR_SDMMC1_RX_TAP_SEL_Pos)                         /*!< 0x0000003E */
#define SYSCFG_SDMMC1DLLCR_SDMMC1_RX_TAP_SEL                            SYSCFG_SDMMC1DLLCR_SDMMC1_RX_TAP_SEL_Msk                                    /*!< selection of TAP number for RX clock. Exact encoding to be detailed. */
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_EN_Pos                        (16U)
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_EN_Msk                        (0x1U << SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_EN_Pos)                          /*!< 0x00010000 */
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_EN                            SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_EN_Msk                                    /*!< When 1, DLL bypass mode is enabled. In bypass mode the DLL is used in pure delay mode and there is no VT compensation. The command applied to every delay unit is set by DLL_BYP_CMD[4:0] and a tap value must be selected with RX_TAP_SEL[4:0]. In bypass mode, the total delay is given by (delay unit) x tap number selected. */
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_CMD_Pos                       (17U)
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_CMD_Msk                       (0x1FU << SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_CMD_Pos)                        /*!< 0x003E0000 */
#define SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_CMD                           SYSCFG_SDMMC1DLLCR_SDMMC1_DLL_BYP_CMD_Msk                                   /*!< value of the delay unit when in DLL bypass mode. */

/**************  Bit definition for SYSCFG_SDMMC1DLLSR register  **************/
#define SYSCFG_SDMMC1DLLSR_SDMMC1_DLL_LOCK_Pos                          (0U)
#define SYSCFG_SDMMC1DLLSR_SDMMC1_DLL_LOCK_Msk                          (0x1U << SYSCFG_SDMMC1DLLSR_SDMMC1_DLL_LOCK_Pos)                            /*!< 0x00000001 */
#define SYSCFG_SDMMC1DLLSR_SDMMC1_DLL_LOCK                              SYSCFG_SDMMC1DLLSR_SDMMC1_DLL_LOCK_Msk                                      /*!< When 1, DLL is locked */
#define SYSCFG_SDMMC1DLLSR_SDMMC1_RX_TAP_SEL_ACK_Pos                    (1U)
#define SYSCFG_SDMMC1DLLSR_SDMMC1_RX_TAP_SEL_ACK_Msk                    (0x1U << SYSCFG_SDMMC1DLLSR_SDMMC1_RX_TAP_SEL_ACK_Pos)                      /*!< 0x00000002 */
#define SYSCFG_SDMMC1DLLSR_SDMMC1_RX_TAP_SEL_ACK                        SYSCFG_SDMMC1DLLSR_SDMMC1_RX_TAP_SEL_ACK_Msk                                /*!< When '1', the RX delay has switched to the tap value specified in RX_TAP_SEL[4:0]. */

/***************  Bit definition for SYSCFG_SDMMC1CR register  ****************/
#define SYSCFG_SDMMC1CR_SDMMC1_VSEL_Pos                                 (0U)
#define SYSCFG_SDMMC1CR_SDMMC1_VSEL_Msk                                 (0x1U << SYSCFG_SDMMC1CR_SDMMC1_VSEL_Pos)                                   /*!< 0x00000001 */
#define SYSCFG_SDMMC1CR_SDMMC1_VSEL                                     SYSCFG_SDMMC1CR_SDMMC1_VSEL_Msk                                             /*!< Voltage Selection */
#define SYSCFG_SDMMC1CR_HSLVEN_SDMMC1_Pos                               (1U)
#define SYSCFG_SDMMC1CR_HSLVEN_SDMMC1_Msk                               (0x1U << SYSCFG_SDMMC1CR_HSLVEN_SDMMC1_Pos)                                 /*!< 0x00000002 */
#define SYSCFG_SDMMC1CR_HSLVEN_SDMMC1                                   SYSCFG_SDMMC1CR_HSLVEN_SDMMC1_Msk                                           /*!< High Speed Low Voltage Pad mode Enable. */

/**************  Bit definition for SYSCFG_SDMMC2DLLCR register  **************/
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_EN_Pos                            (0U)
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_EN_Msk                            (0x1U << SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_EN_Pos)                              /*!< 0x00000001 */
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_EN                                SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_EN_Msk                                        /*!< When 1, DLL is enabled. */
#define SYSCFG_SDMMC2DLLCR_SDMMC2_RX_TAP_SEL_Pos                        (1U)
#define SYSCFG_SDMMC2DLLCR_SDMMC2_RX_TAP_SEL_Msk                        (0x1FU << SYSCFG_SDMMC2DLLCR_SDMMC2_RX_TAP_SEL_Pos)                         /*!< 0x0000003E */
#define SYSCFG_SDMMC2DLLCR_SDMMC2_RX_TAP_SEL                            SYSCFG_SDMMC2DLLCR_SDMMC2_RX_TAP_SEL_Msk                                    /*!< selection of TAP delay for RX clock. Exact encoding to be detailed. */
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_EN_Pos                        (16U)
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_EN_Msk                        (0x1U << SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_EN_Pos)                          /*!< 0x00010000 */
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_EN                            SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_EN_Msk                                    /*!< When 1, DLL bypass mode is enabled. In bypass mode the DLL is used in pure delay mode and there is no VT compensation. The command applied to every delay unit is set by DLL_BYP_CMD[4:0] and a tap value must be selected with RX_TAP_SEL[4:0]. In */
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_CMD_Pos                       (17U)
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_CMD_Msk                       (0x1FU << SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_CMD_Pos)                        /*!< 0x003E0000 */
#define SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_CMD                           SYSCFG_SDMMC2DLLCR_SDMMC2_DLL_BYP_CMD_Msk                                   /*!< value of the delay unit when in DLL bypass mode. */

/**************  Bit definition for SYSCFG_SDMMC2DLLSR register  **************/
#define SYSCFG_SDMMC2DLLSR_SDMMC2_DLL_LOCK_Pos                          (0U)
#define SYSCFG_SDMMC2DLLSR_SDMMC2_DLL_LOCK_Msk                          (0x1U << SYSCFG_SDMMC2DLLSR_SDMMC2_DLL_LOCK_Pos)                            /*!< 0x00000001 */
#define SYSCFG_SDMMC2DLLSR_SDMMC2_DLL_LOCK                              SYSCFG_SDMMC2DLLSR_SDMMC2_DLL_LOCK_Msk                                      /*!< When 1, DLL is locked */
#define SYSCFG_SDMMC2DLLSR_SDMMC2_RX_TAP_SEL_ACK_Pos                    (1U)
#define SYSCFG_SDMMC2DLLSR_SDMMC2_RX_TAP_SEL_ACK_Msk                    (0x1U << SYSCFG_SDMMC2DLLSR_SDMMC2_RX_TAP_SEL_ACK_Pos)                      /*!< 0x00000002 */
#define SYSCFG_SDMMC2DLLSR_SDMMC2_RX_TAP_SEL_ACK                        SYSCFG_SDMMC2DLLSR_SDMMC2_RX_TAP_SEL_ACK_Msk                                /*!< When '1', the RX delay has switched to the tap value specified in RX_TAP_SEL[4:0]. */

/***************  Bit definition for SYSCFG_SDMMC2CR register  ****************/
#define SYSCFG_SDMMC2CR_SDMMC2_VSEL_Pos                                 (0U)
#define SYSCFG_SDMMC2CR_SDMMC2_VSEL_Msk                                 (0x1U << SYSCFG_SDMMC2CR_SDMMC2_VSEL_Pos)                                   /*!< 0x00000001 */
#define SYSCFG_SDMMC2CR_SDMMC2_VSEL                                     SYSCFG_SDMMC2CR_SDMMC2_VSEL_Msk                                             /*!< Voltage Selection */
#define SYSCFG_SDMMC2CR_HSLVEN_SDMMC2_Pos                               (1U)
#define SYSCFG_SDMMC2CR_HSLVEN_SDMMC2_Msk                               (0x1U << SYSCFG_SDMMC2CR_HSLVEN_SDMMC2_Pos)                                 /*!< 0x00000002 */
#define SYSCFG_SDMMC2CR_HSLVEN_SDMMC2                                   SYSCFG_SDMMC2CR_HSLVEN_SDMMC2_Msk                                           /*!< High Speed Low Voltage Pad mode Enable. */

/**************  Bit definition for SYSCFG_SDMMC3DLLCR register  **************/
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_EN_Pos                            (0U)
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_EN_Msk                            (0x1U << SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_EN_Pos)                              /*!< 0x00000001 */
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_EN                                SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_EN_Msk                                        /*!< When 1, DLL is enabled. */
#define SYSCFG_SDMMC3DLLCR_SDMMC3_RX_TAP_SEL_Pos                        (1U)
#define SYSCFG_SDMMC3DLLCR_SDMMC3_RX_TAP_SEL_Msk                        (0x1FU << SYSCFG_SDMMC3DLLCR_SDMMC3_RX_TAP_SEL_Pos)                         /*!< 0x0000003E */
#define SYSCFG_SDMMC3DLLCR_SDMMC3_RX_TAP_SEL                            SYSCFG_SDMMC3DLLCR_SDMMC3_RX_TAP_SEL_Msk                                    /*!< selection of TAP delay for RX clock. Exact encoding to be detailed. */
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_EN_Pos                        (16U)
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_EN_Msk                        (0x1U << SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_EN_Pos)                          /*!< 0x00010000 */
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_EN                            SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_EN_Msk                                    /*!< When 1, DLL bypass mode is enabled. In bypass mode the DLL is used in pure delay mode and there is no VT compensation. The command applied to every delay unit is set by DLL_BYP_CMD[4:0] and a tap value must be selected with RX_TAP_SEL[4:0]. In */
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_CMD_Pos                       (17U)
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_CMD_Msk                       (0x1FU << SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_CMD_Pos)                        /*!< 0x003E0000 */
#define SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_CMD                           SYSCFG_SDMMC3DLLCR_SDMMC3_DLL_BYP_CMD_Msk                                   /*!< value of the delay unit when in DLL bypass mode. */

/**************  Bit definition for SYSCFG_SDMMC3DLLSR register  **************/
#define SYSCFG_SDMMC3DLLSR_SDMMC3_DLL_LOCK_Pos                          (0U)
#define SYSCFG_SDMMC3DLLSR_SDMMC3_DLL_LOCK_Msk                          (0x1U << SYSCFG_SDMMC3DLLSR_SDMMC3_DLL_LOCK_Pos)                            /*!< 0x00000001 */
#define SYSCFG_SDMMC3DLLSR_SDMMC3_DLL_LOCK                              SYSCFG_SDMMC3DLLSR_SDMMC3_DLL_LOCK_Msk                                      /*!< When 1, DLL is locked */
#define SYSCFG_SDMMC3DLLSR_SDMMC3_RX_TAP_SEL_ACK_Pos                    (1U)
#define SYSCFG_SDMMC3DLLSR_SDMMC3_RX_TAP_SEL_ACK_Msk                    (0x1U << SYSCFG_SDMMC3DLLSR_SDMMC3_RX_TAP_SEL_ACK_Pos)                      /*!< 0x00000002 */
#define SYSCFG_SDMMC3DLLSR_SDMMC3_RX_TAP_SEL_ACK                        SYSCFG_SDMMC3DLLSR_SDMMC3_RX_TAP_SEL_ACK_Msk                                /*!< When '1', the RX delay has switched to the tap value specified in RX_TAP_SEL[4:0]. */

/**************  Bit definition for SYSCFG_OCTOSPI1CR register  ***************/

/*************  Bit definition for SYSCFG_OCTOSPI1DLLCR register  *************/
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_EN_Pos                        (0U)
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_EN_Msk                        (0x1U << SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_EN_Pos)                          /*!< 0x00000001 */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_EN                            SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_EN_Msk                                    /*!< When 1, DLL is enabled. */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_RX_TAP_SEL_Pos                    (1U)
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_RX_TAP_SEL_Msk                    (0x1FU << SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_RX_TAP_SEL_Pos)                     /*!< 0x0000003E */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_RX_TAP_SEL                        SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_RX_TAP_SEL_Msk                                /*!< selection of TAP delay for RX clock. Exact encoding to be detailed. */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_TX_TAP_SEL_Pos                    (6U)
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_TX_TAP_SEL_Msk                    (0x1FU << SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_TX_TAP_SEL_Pos)                     /*!< 0x000007C0 */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_TX_TAP_SEL                        SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_TX_TAP_SEL_Msk                                /*!< selection of TAP delay for TX clock. Exact encoding to be detailed. */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_EN_Pos                    (16U)
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_EN_Msk                    (0x1U << SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_EN_Pos)                      /*!< 0x00010000 */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_EN                        SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_EN_Msk                                /*!< When 1, DLL bypass mode is enabled. In bypass mode the DLL is used in pure delay mode and there is no VT compensation. The command applied to every delay unit is set by DLL_BYP_CMD[4:0] and a tap value must be selected with RX_TAP_SEL[4:0]. In */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_CMD_Pos                   (17U)
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_CMD_Msk                   (0x1FU << SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_CMD_Pos)                    /*!< 0x003E0000 */
#define SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_CMD                       SYSCFG_OCTOSPI1DLLCR_OCTOSPI1_DLL_BYP_CMD_Msk                               /*!< value of the delay unit when in DLL bypass mode. */

/*************  Bit definition for SYSCFG_OCTOSPI1DLLSR register  *************/
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_DLL_LOCK_Pos                      (0U)
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_DLL_LOCK_Msk                      (0x1U << SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_DLL_LOCK_Pos)                        /*!< 0x00000001 */
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_DLL_LOCK                          SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_DLL_LOCK_Msk                                  /*!< When 1, DLL is locked */
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_RX_TAP_SEL_ACK_Pos                (1U)
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_RX_TAP_SEL_ACK_Msk                (0x1U << SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_RX_TAP_SEL_ACK_Pos)                  /*!< 0x00000002 */
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_RX_TAP_SEL_ACK                    SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_RX_TAP_SEL_ACK_Msk                            /*!< When '1', the RX delay has switched to the tap value specified in RX_TAP_SEL[4:0]. */
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_TX_TAP_SEL_ACK_Pos                (2U)
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_TX_TAP_SEL_ACK_Msk                (0x1U << SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_TX_TAP_SEL_ACK_Pos)                  /*!< 0x00000004 */
#define SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_TX_TAP_SEL_ACK                    SYSCFG_OCTOSPI1DLLSR_OCTOSPI1_TX_TAP_SEL_ACK_Msk                            /*!< When '1', the TX delay has switched to the tap value specified in TX_TAP_SEL[4:0]. */

/**************  Bit definition for SYSCFG_OCTOSPI2CR register  ***************/

/*************  Bit definition for SYSCFG_OCTOSPI2DLLCR register  *************/
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_EN_Pos                        (0U)
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_EN_Msk                        (0x1U << SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_EN_Pos)                          /*!< 0x00000001 */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_EN                            SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_EN_Msk                                    /*!< When 1, DLL is enabled. */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_RX_TAP_SEL_Pos                    (1U)
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_RX_TAP_SEL_Msk                    (0x1FU << SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_RX_TAP_SEL_Pos)                     /*!< 0x0000003E */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_RX_TAP_SEL                        SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_RX_TAP_SEL_Msk                                /*!< selection of TAP delay for RX clock. Exact encoding to be detailed. */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_TX_TAP_SEL_Pos                    (6U)
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_TX_TAP_SEL_Msk                    (0x1FU << SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_TX_TAP_SEL_Pos)                     /*!< 0x000007C0 */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_TX_TAP_SEL                        SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_TX_TAP_SEL_Msk                                /*!< selection of TAP delay for TX clock. Exact encoding to be detailed. */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_EN_Pos                    (16U)
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_EN_Msk                    (0x1U << SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_EN_Pos)                      /*!< 0x00010000 */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_EN                        SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_EN_Msk                                /*!< DLL bypass mode is enabled. In bypass mode the DLL is used in pure delay mode and there is no VT compensation. The command applied to every delay unit is set by DLL_BYP_CMD[4:0] and a tap value must be selected with RX_TAP_SEL[4:0]. In */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_CMD_Pos                   (17U)
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_CMD_Msk                   (0x1FU << SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_CMD_Pos)                    /*!< 0x003E0000 */
#define SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_CMD                       SYSCFG_OCTOSPI2DLLCR_OCTOSPI2_DLL_BYP_CMD_Msk                               /*!< value of the delay unit when in DLL bypass mode. */

/*************  Bit definition for SYSCFG_OCTOSPI2DLLSR register  *************/
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_DLL_LOCK_Pos                      (0U)
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_DLL_LOCK_Msk                      (0x1U << SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_DLL_LOCK_Pos)                        /*!< 0x00000001 */
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_DLL_LOCK                          SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_DLL_LOCK_Msk                                  /*!< When 1, DLL is locked */
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_RX_TAP_SEL_ACK_Pos                (1U)
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_RX_TAP_SEL_ACK_Msk                (0x1U << SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_RX_TAP_SEL_ACK_Pos)                  /*!< 0x00000002 */
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_RX_TAP_SEL_ACK                    SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_RX_TAP_SEL_ACK_Msk                            /*!< When '1', the RX delay has switched to the tap value specified in RX_TAP_SEL[4:0]. */
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_TX_TAP_SEL_ACK_Pos                (2U)
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_TX_TAP_SEL_ACK_Msk                (0x1U << SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_TX_TAP_SEL_ACK_Pos)                  /*!< 0x00000004 */
#define SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_TX_TAP_SEL_ACK                    SYSCFG_OCTOSPI2DLLSR_OCTOSPI2_TX_TAP_SEL_ACK_Msk                            /*!< When '1', the TX delay has switched to the tap value specified in TX_TAP_SEL[4:0]. */

/***************  Bit definition for SYSCFG_VDERAMCR register  ****************/
#define SYSCFG_VDERAMCR_VDERAM_EN_Pos                                   (0U)
#define SYSCFG_VDERAMCR_VDERAM_EN_Msk                                   (0x1U << SYSCFG_VDERAMCR_VDERAM_EN_Pos)                                     /*!< 0x00000001 */
#define SYSCFG_VDERAMCR_VDERAM_EN                                       SYSCFG_VDERAMCR_VDERAM_EN_Msk                                               /*!< To be completed */

/****************  Bit definition for SYSCFG_M33SSCR register  ****************/
#define SYSCFG_M33SSCR_FPU_IT_EN_Pos                                    (0U)
#define SYSCFG_M33SSCR_FPU_IT_EN_Msk                                    (0x3FU << SYSCFG_M33SSCR_FPU_IT_EN_Pos)                                     /*!< 0x0000003F */
#define SYSCFG_M33SSCR_FPU_IT_EN                                        SYSCFG_M33SSCR_FPU_IT_EN_Msk                                                /*!< Enable FPU exception */
#define SYSCFG_M33SSCR_LOCKSVTAIRCR_Pos                                 (16U)
#define SYSCFG_M33SSCR_LOCKSVTAIRCR_Msk                                 (0x1U << SYSCFG_M33SSCR_LOCKSVTAIRCR_Pos)                                   /*!< 0x00010000 */
#define SYSCFG_M33SSCR_LOCKSVTAIRCR                                     SYSCFG_M33SSCR_LOCKSVTAIRCR_Msk                                             /*!< Prevent changes to: */
#define SYSCFG_M33SSCR_LOCKNSVTOR_Pos                                   (17U)
#define SYSCFG_M33SSCR_LOCKNSVTOR_Msk                                   (0x1U << SYSCFG_M33SSCR_LOCKNSVTOR_Pos)                                     /*!< 0x00020000 */
#define SYSCFG_M33SSCR_LOCKNSVTOR                                       SYSCFG_M33SSCR_LOCKNSVTOR_Msk                                               /*!<  Prevent changes to the Non-secure vector table base address. */
#define SYSCFG_M33SSCR_LOCKSMPU_Pos                                     (18U)
#define SYSCFG_M33SSCR_LOCKSMPU_Msk                                     (0x1U << SYSCFG_M33SSCR_LOCKSMPU_Pos)                                       /*!< 0x00040000 */
#define SYSCFG_M33SSCR_LOCKSMPU                                         SYSCFG_M33SSCR_LOCKSMPU_Msk                                                 /*!<  Prevent changes to programmed Secure MPU memory regions. */
#define SYSCFG_M33SSCR_LOCKNSMPU_Pos                                    (19U)
#define SYSCFG_M33SSCR_LOCKNSMPU_Msk                                    (0x1U << SYSCFG_M33SSCR_LOCKNSMPU_Pos)                                      /*!< 0x00080000 */
#define SYSCFG_M33SSCR_LOCKNSMPU                                        SYSCFG_M33SSCR_LOCKNSMPU_Msk                                                /*!<  Prevent changes to Nonsecure MPU memory regions already programmed. */
#define SYSCFG_M33SSCR_LOCKSAU_Pos                                      (20U)
#define SYSCFG_M33SSCR_LOCKSAU_Msk                                      (0x1U << SYSCFG_M33SSCR_LOCKSAU_Pos)                                        /*!< 0x00100000 */
#define SYSCFG_M33SSCR_LOCKSAU                                          SYSCFG_M33SSCR_LOCKSAU_Msk                                                  /*!<  Prevent changes to Secure SAU memory regions already programmed. */

/****************  Bit definition for SYSCFG_AXIQOS1 register  ****************/
#define SYSCFG_AXIQOS1_GPU_AR_QOS_Pos                                   (0U)
#define SYSCFG_AXIQOS1_GPU_AR_QOS_Msk                                   (0xFU << SYSCFG_AXIQOS1_GPU_AR_QOS_Pos)                                     /*!< 0x0000000F */
#define SYSCFG_AXIQOS1_GPU_AR_QOS                                       SYSCFG_AXIQOS1_GPU_AR_QOS_Msk                                               /*!< GPU read channel QoS setting. */
#define SYSCFG_AXIQOS1_GPU_AW_QOS_Pos                                   (4U)
#define SYSCFG_AXIQOS1_GPU_AW_QOS_Msk                                   (0xFU << SYSCFG_AXIQOS1_GPU_AW_QOS_Pos)                                     /*!< 0x000000F0 */
#define SYSCFG_AXIQOS1_GPU_AW_QOS                                       SYSCFG_AXIQOS1_GPU_AW_QOS_Msk                                               /*!< GPU write channel QoS setting. */
#define SYSCFG_AXIQOS1_USBDRD_AR_QOS_Pos                                (8U)
#define SYSCFG_AXIQOS1_USBDRD_AR_QOS_Msk                                (0xFU << SYSCFG_AXIQOS1_USBDRD_AR_QOS_Pos)                                  /*!< 0x00000F00 */
#define SYSCFG_AXIQOS1_USBDRD_AR_QOS                                    SYSCFG_AXIQOS1_USBDRD_AR_QOS_Msk                                            /*!< USBDRD read channel QoS setting. */
#define SYSCFG_AXIQOS1_USBDRD_AW_QOS_Pos                                (12U)
#define SYSCFG_AXIQOS1_USBDRD_AW_QOS_Msk                                (0xFU << SYSCFG_AXIQOS1_USBDRD_AW_QOS_Pos)                                  /*!< 0x0000F000 */
#define SYSCFG_AXIQOS1_USBDRD_AW_QOS                                    SYSCFG_AXIQOS1_USBDRD_AW_QOS_Msk                                            /*!< USBDRD write channel QoS setting. */
#define SYSCFG_AXIQOS1_VENC_AR_QOS_Pos                                  (16U)
#define SYSCFG_AXIQOS1_VENC_AR_QOS_Msk                                  (0xFU << SYSCFG_AXIQOS1_VENC_AR_QOS_Pos)                                    /*!< 0x000F0000 */
#define SYSCFG_AXIQOS1_VENC_AR_QOS                                      SYSCFG_AXIQOS1_VENC_AR_QOS_Msk                                              /*!< VENC read channel QoS setting. */
#define SYSCFG_AXIQOS1_VENC_AW_QOS_Pos                                  (20U)
#define SYSCFG_AXIQOS1_VENC_AW_QOS_Msk                                  (0xFU << SYSCFG_AXIQOS1_VENC_AW_QOS_Pos)                                    /*!< 0x00F00000 */
#define SYSCFG_AXIQOS1_VENC_AW_QOS                                      SYSCFG_AXIQOS1_VENC_AW_QOS_Msk                                              /*!< VENC write channel QoS setting. */
#define SYSCFG_AXIQOS1_VDEC_AR_QOS_Pos                                  (24U)
#define SYSCFG_AXIQOS1_VDEC_AR_QOS_Msk                                  (0xFU << SYSCFG_AXIQOS1_VDEC_AR_QOS_Pos)                                    /*!< 0x0F000000 */
#define SYSCFG_AXIQOS1_VDEC_AR_QOS                                      SYSCFG_AXIQOS1_VDEC_AR_QOS_Msk                                              /*!< VDEC read channel QoS setting. */
#define SYSCFG_AXIQOS1_VDEC_AW_QOS_Pos                                  (28U)
#define SYSCFG_AXIQOS1_VDEC_AW_QOS_Msk                                  (0xFU << SYSCFG_AXIQOS1_VDEC_AW_QOS_Pos)                                    /*!< 0xF0000000 */
#define SYSCFG_AXIQOS1_VDEC_AW_QOS                                      SYSCFG_AXIQOS1_VDEC_AW_QOS_Msk                                              /*!< VDEC write channel QoS setting. */

/****************  Bit definition for SYSCFG_AXIQOS2 register  ****************/
#define SYSCFG_AXIQOS2_HPDMA1_AR_QOS_Pos                                (0U)
#define SYSCFG_AXIQOS2_HPDMA1_AR_QOS_Msk                                (0xFU << SYSCFG_AXIQOS2_HPDMA1_AR_QOS_Pos)                                  /*!< 0x0000000F */
#define SYSCFG_AXIQOS2_HPDMA1_AR_QOS                                    SYSCFG_AXIQOS2_HPDMA1_AR_QOS_Msk                                            /*!< HPDMA1 read channel QoS setting. */
#define SYSCFG_AXIQOS2_HPDMA1_AW_QOS_Pos                                (4U)
#define SYSCFG_AXIQOS2_HPDMA1_AW_QOS_Msk                                (0xFU << SYSCFG_AXIQOS2_HPDMA1_AW_QOS_Pos)                                  /*!< 0x000000F0 */
#define SYSCFG_AXIQOS2_HPDMA1_AW_QOS                                    SYSCFG_AXIQOS2_HPDMA1_AW_QOS_Msk                                            /*!< HPDMA1 write channel QoS setting. */
#define SYSCFG_AXIQOS2_HPDMA2_AR_QOS_Pos                                (8U)
#define SYSCFG_AXIQOS2_HPDMA2_AR_QOS_Msk                                (0xFU << SYSCFG_AXIQOS2_HPDMA2_AR_QOS_Pos)                                  /*!< 0x00000F00 */
#define SYSCFG_AXIQOS2_HPDMA2_AR_QOS                                    SYSCFG_AXIQOS2_HPDMA2_AR_QOS_Msk                                            /*!< HPDMA2 read channel QoS setting. */
#define SYSCFG_AXIQOS2_HPDMA2_AW_QOS_Pos                                (12U)
#define SYSCFG_AXIQOS2_HPDMA2_AW_QOS_Msk                                (0xFU << SYSCFG_AXIQOS2_HPDMA2_AW_QOS_Pos)                                  /*!< 0x0000F000 */
#define SYSCFG_AXIQOS2_HPDMA2_AW_QOS                                    SYSCFG_AXIQOS2_HPDMA2_AW_QOS_Msk                                            /*!< HPDMA2 write channel QoS setting. */
#define SYSCFG_AXIQOS2_HPDMA3_AR_QOS_Pos                                (16U)
#define SYSCFG_AXIQOS2_HPDMA3_AR_QOS_Msk                                (0xFU << SYSCFG_AXIQOS2_HPDMA3_AR_QOS_Pos)                                  /*!< 0x000F0000 */
#define SYSCFG_AXIQOS2_HPDMA3_AR_QOS                                    SYSCFG_AXIQOS2_HPDMA3_AR_QOS_Msk                                            /*!< HPDMA3 read channel QoS setting. */
#define SYSCFG_AXIQOS2_HPDMA3_AW_QOS_Pos                                (20U)
#define SYSCFG_AXIQOS2_HPDMA3_AW_QOS_Msk                                (0xFU << SYSCFG_AXIQOS2_HPDMA3_AW_QOS_Pos)                                  /*!< 0x00F00000 */
#define SYSCFG_AXIQOS2_HPDMA3_AW_QOS                                    SYSCFG_AXIQOS2_HPDMA3_AW_QOS_Msk                                            /*!< HPDMA3 write channel QoS setting. */

/****************  Bit definition for SYSCFG_AXICGCR register  ****************/
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DDR_Pos                        (0U)
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DDR_Msk                        (0x1U << SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DDR_Pos)                          /*!< 0x00000001 */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DDR                            SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DDR_Msk                                    /*!< When set to '1', STNoc clock gating on clk_icn_ddr domain is OFF  */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Pos                    (1U)
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Msk                    (0x1U << SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Pos)                      /*!< 0x00000002 */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DISPLAY                        SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Msk                                /*!< When set to '1', STNoc clock gating on clk_icn_display domain is OFF  */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_HSL_Pos                        (2U)
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_HSL_Msk                        (0x1U << SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_HSL_Pos)                          /*!< 0x00000004 */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_HSL                            SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_HSL_Msk                                    /*!< When set to '1', STNoc clock gating on clk_icn_hsl domain is OFF  */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_MCU_Pos                        (3U)
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_MCU_Msk                        (0x1U << SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_MCU_Pos)                          /*!< 0x00000008 */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_MCU                            SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_MCU_Msk                                    /*!< When set to '1', STNoc clock gating on clk_icn_mcu domain is OFF  */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SYSATB_Pos                     (4U)
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SYSATB_Msk                     (0x1U << SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SYSATB_Pos)                       /*!< 0x00000010 */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SYSATB                         SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SYSATB_Msk                                 /*!< When set to '1', STNoc clock gating on clk_icn_sysatb domain is OFF  */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SDMMC_Pos                      (5U)
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SDMMC_Msk                      (0x1U << SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SDMMC_Pos)                        /*!< 0x00000020 */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SDMMC                          SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_SDMMC_Msk                                  /*!< When set to '1', STNoc clock gating on clk_icn_sdmmc domain is OFF  */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Pos                   (6U)
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Msk                   (0x1U << SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Pos)                     /*!< 0x00000040 */
#define SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_BUSPERFM                       SYSCFG_AXICGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Msk                               /*!< When set to '1', STNoc clock gating on clk_icn_busperfm domain is OFF  */

/**************  Bit definition for SYSCFG_USB2PHY1CR register  ***************/
#define SYSCFG_USB2PHY1CR_RETENABLEN1_Pos                               (0U)
#define SYSCFG_USB2PHY1CR_RETENABLEN1_Msk                               (0x1U << SYSCFG_USB2PHY1CR_RETENABLEN1_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_USB2PHY1CR_RETENABLEN1                                   SYSCFG_USB2PHY1CR_RETENABLEN1_Msk                                           /*!< Retention mode enable (active low) */
#define SYSCFG_USB2PHY1CR_AUTORSMENB1_Pos                               (1U)
#define SYSCFG_USB2PHY1CR_AUTORSMENB1_Msk                               (0x1U << SYSCFG_USB2PHY1CR_AUTORSMENB1_Pos)                                 /*!< 0x00000002 */
#define SYSCFG_USB2PHY1CR_AUTORSMENB1                                   SYSCFG_USB2PHY1CR_AUTORSMENB1_Msk                                           /*!< Auto-resume mode enable. Enables auto-resume logic in femtoPHY so that the PHY automatically responds to a remote wake-up without initial involvement of the Host controller. */
#define SYSCFG_USB2PHY1CR_USB2PHY1CMN_Pos                               (2U)
#define SYSCFG_USB2PHY1CR_USB2PHY1CMN_Msk                               (0x1U << SYSCFG_USB2PHY1CR_USB2PHY1CMN_Pos)                                 /*!< 0x00000004 */
#define SYSCFG_USB2PHY1CR_USB2PHY1CMN                                   SYSCFG_USB2PHY1CR_USB2PHY1CMN_Msk                                           /*!< Controls the power down of analog blocks during Suspend and Sleep. */
#define SYSCFG_USB2PHY1CR_USB2PHY1SEL_Pos                               (4U)
#define SYSCFG_USB2PHY1CR_USB2PHY1SEL_Msk                               (0x7U << SYSCFG_USB2PHY1CR_USB2PHY1SEL_Pos)                                 /*!< 0x00000070 */
#define SYSCFG_USB2PHY1CR_USB2PHY1SEL                                   SYSCFG_USB2PHY1CR_USB2PHY1SEL_Msk                                           /*!< PHY refclk speed setting: */

/*************  Bit definition for SYSCFG_USB2PHY1BCCR register  **************/
#define SYSCFG_USB2PHY1BCCR_H_CDPEN_Pos                                 (0U)
#define SYSCFG_USB2PHY1BCCR_H_CDPEN_Msk                                 (0x1U << SYSCFG_USB2PHY1BCCR_H_CDPEN_Pos)                                   /*!< 0x00000001 */
#define SYSCFG_USB2PHY1BCCR_H_CDPEN                                     SYSCFG_USB2PHY1BCCR_H_CDPEN_Msk                                             /*!< Enable CDP behavior for Host port */
#define SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Pos                              (1U)
#define SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Msk                              (0x1U << SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Pos)                                /*!< 0x00000002 */
#define SYSCFG_USB2PHY1BCCR_H_CDPDETEN                                  SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Msk                                          /*!< Enable of voltage detector on DP for CDP port */
#define SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Pos                              (2U)
#define SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Msk                              (0x1U << SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Pos)                                /*!< 0x00000004 */
#define SYSCFG_USB2PHY1BCCR_H_VDMSRCEN                                  SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Msk                                          /*!< Enable of voltage source on DM for CDP port */

/*************  Bit definition for SYSCFG_USB2PHY1BCSR register  **************/
#define SYSCFG_USB2PHY1BCSR_CHGDET_Pos                                  (0U)
#define SYSCFG_USB2PHY1BCSR_CHGDET_Msk                                  (0x1U << SYSCFG_USB2PHY1BCSR_CHGDET_Pos)                                    /*!< 0x00000001 */
#define SYSCFG_USB2PHY1BCSR_CHGDET                                      SYSCFG_USB2PHY1BCSR_CHGDET_Msk                                              /*!< Comparison of voltage on DP with VDAT_REF threshold as defined in BC v1.2 standard */
#define SYSCFG_USB2PHY1BCSR_FSVPLUS_Pos                                 (1U)
#define SYSCFG_USB2PHY1BCSR_FSVPLUS_Msk                                 (0x1U << SYSCFG_USB2PHY1BCSR_FSVPLUS_Pos)                                   /*!< 0x00000002 */
#define SYSCFG_USB2PHY1BCSR_FSVPLUS                                     SYSCFG_USB2PHY1BCSR_FSVPLUS_Msk                                             /*!< Voltage level on DP (also output of the comparison with VLGC threshold as defined in BC v1.2 standard) */
#define SYSCFG_USB2PHY1BCSR_FSVMINUS_Pos                                (2U)
#define SYSCFG_USB2PHY1BCSR_FSVMINUS_Msk                                (0x1U << SYSCFG_USB2PHY1BCSR_FSVMINUS_Pos)                                  /*!< 0x00000004 */
#define SYSCFG_USB2PHY1BCSR_FSVMINUS                                    SYSCFG_USB2PHY1BCSR_FSVMINUS_Msk                                            /*!< voltage level on DM (also output of the comparison with VLGC threshold as defined in BC v1.2 standard) */

/*************  Bit definition for SYSCFG_USB2PHY1TRIM1 register  *************/
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLITUNE_Pos                       (0U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLITUNE_Msk                       (0x3U << SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLITUNE_Pos)                         /*!< 0x00000003 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLITUNE                           SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLITUNE_Msk                                   /*!< PLL Integral Path Tune */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLPTUNE_Pos                       (2U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLPTUNE_Msk                       (0xFU << SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLPTUNE_Pos)                         /*!< 0x0000003C */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLPTUNE                           SYSCFG_USB2PHY1TRIM1_USB2PHY1PLLPTUNE_Msk                                   /*!< PLL Proportional Path Tune */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1COMPDISTUNE_Pos                    (6U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1COMPDISTUNE_Msk                    (0x7U << SYSCFG_USB2PHY1TRIM1_USB2PHY1COMPDISTUNE_Pos)                      /*!< 0x000001C0 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1COMPDISTUNE                        SYSCFG_USB2PHY1TRIM1_USB2PHY1COMPDISTUNE_Msk                                /*!< Disconnect Threshold Adjustment. It adjusts the voltage level for the threshold used to detect a disconnect event at the Host. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1SQRXTUNE_Pos                       (9U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1SQRXTUNE_Msk                       (0x7U << SYSCFG_USB2PHY1TRIM1_USB2PHY1SQRXTUNE_Pos)                         /*!< 0x00000E00 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1SQRXTUNE                           SYSCFG_USB2PHY1TRIM1_USB2PHY1SQRXTUNE_Msk                                   /*!< Squelch Threshold Adjustment. It adjusts the voltage level for the threshold used to detect valid high speed data. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1VDATREFTUNE_Pos                    (12U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1VDATREFTUNE_Msk                    (0x3U << SYSCFG_USB2PHY1TRIM1_USB2PHY1VDATREFTUNE_Pos)                      /*!< 0x00003000 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1VDATREFTUNE                        SYSCFG_USB2PHY1TRIM1_USB2PHY1VDATREFTUNE_Msk                                /*!< Data Detect Voltage Adjustment. It adjusts the threshold voltage level (Vdat_ref) used to detect data during charger type detection. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1OTGTUNE_Pos                        (14U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1OTGTUNE_Msk                        (0x7U << SYSCFG_USB2PHY1TRIM1_USB2PHY1OTGTUNE_Pos)                          /*!< 0x0001C000 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1OTGTUNE                            SYSCFG_USB2PHY1TRIM1_USB2PHY1OTGTUNE_Msk                                    /*!< VBUS Valid Threshold Adjustment. It adjusts the voltage level for the VBUS Valid threshold. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXHSXVTUNE_Pos                     (17U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXHSXVTUNE_Msk                     (0x3U << SYSCFG_USB2PHY1TRIM1_USB2PHY1TXHSXVTUNE_Pos)                       /*!< 0x00060000 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXHSXVTUNE                         SYSCFG_USB2PHY1TRIM1_USB2PHY1TXHSXVTUNE_Msk                                 /*!< Transmitter High Speed Crossover Adjustment. It adjusts the voltage at which DP and DM signals cross while transmitting in High Speed mode. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXFSLSTUNE_Pos                     (19U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXFSLSTUNE_Msk                     (0xFU << SYSCFG_USB2PHY1TRIM1_USB2PHY1TXFSLSTUNE_Pos)                       /*!< 0x00780000 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXFSLSTUNE                         SYSCFG_USB2PHY1TRIM1_USB2PHY1TXFSLSTUNE_Msk                                 /*!< FS/LS Source Impedance Adjustment. It adjusts the low and full speed single-ended source impedance while driving high. The following adjustment values are based on nominal process, voltage and temperature. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXVREFTUNE_Pos                     (23U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXVREFTUNE_Msk                     (0xFU << SYSCFG_USB2PHY1TRIM1_USB2PHY1TXVREFTUNE_Pos)                       /*!< 0x07800000 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXVREFTUNE                         SYSCFG_USB2PHY1TRIM1_USB2PHY1TXVREFTUNE_Msk                                 /*!< HS DC Voltage Level Adjustment. It adjusts the high speed DC level voltage. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRISETUNE_Pos                     (27U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRISETUNE_Msk                     (0x3U << SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRISETUNE_Pos)                       /*!< 0x18000000 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRISETUNE                         SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRISETUNE_Msk                                 /*!< HS Transmitter Rise/Fall Time  Adjustment. It adjusts the rise/fall times of the High Speed waveform. */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRESTUNE_Pos                      (29U)
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRESTUNE_Msk                      (0x3U << SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRESTUNE_Pos)                        /*!< 0x60000000 */
#define SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRESTUNE                          SYSCFG_USB2PHY1TRIM1_USB2PHY1TXRESTUNE_Msk                                  /*!< USB Source Impedance  Adjustment. In some applications there can be significant series resistance on the DP and DM paths between the transceiver and cable. This bitfield adjusts the driver source impedance to compensate for added series resistance on the USB. Note : any setting other than the default one can result in source impedance variation accross process, voltage and temperature that does not meet USB2.0 specifications limits. */

/*************  Bit definition for SYSCFG_USB2PHY1TRIM2 register  *************/
#define SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPAMPTUNE_Pos                (0U)
#define SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPAMPTUNE_Msk                (0x3U << SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPAMPTUNE_Pos)                  /*!< 0x00000003 */
#define SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPAMPTUNE                    SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPAMPTUNE_Msk                            /*!< HS Transmitter Pre Emphasis Current Control. This bitfield controls the amount of current sourced to DP and DM after a J-to-K or K-to-J transition. The HS Transmitter pre-emphasis current is defined in terms of unit amounts. One unit amount is approximately 600 uA and is defined as 1x pre-emphasis current. */
#define SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPPULSETUNE_Pos              (2U)
#define SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPPULSETUNE_Msk              (0x1U << SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPPULSETUNE_Pos)                /*!< 0x00000004 */
#define SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPPULSETUNE                  SYSCFG_USB2PHY1TRIM2_USB2PHY1TXPREEMPPULSETUNE_Msk                          /*!< HS Transmitter Pre Emphasis Duration Control. This bit controls the duration for which the HS pre-emphasis current is sourced onto DM or DP. The HS Transmitter pre-emphasis duration is defined in terms of unit amounts. One unit of pre-emphasis duration is approximately 580ps and is defined as 1x pre-emphasis duration. This bit is valid only if TXPREEMPAMPTUNE[0] or TXPREEMPAMPTUNE[1] is set to 1. */

/**************  Bit definition for SYSCFG_USB2PHY2CR register  ***************/
#define SYSCFG_USB2PHY2CR_RETENABLEN2_Pos                               (0U)
#define SYSCFG_USB2PHY2CR_RETENABLEN2_Msk                               (0x1U << SYSCFG_USB2PHY2CR_RETENABLEN2_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_USB2PHY2CR_RETENABLEN2                                   SYSCFG_USB2PHY2CR_RETENABLEN2_Msk                                           /*!< Retention mode enable (active low) */
#define SYSCFG_USB2PHY2CR_AUTORSMENB2_Pos                               (1U)
#define SYSCFG_USB2PHY2CR_AUTORSMENB2_Msk                               (0x1U << SYSCFG_USB2PHY2CR_AUTORSMENB2_Pos)                                 /*!< 0x00000002 */
#define SYSCFG_USB2PHY2CR_AUTORSMENB2                                   SYSCFG_USB2PHY2CR_AUTORSMENB2_Msk                                           /*!< Auto-resume mode enable. Enables auto-resume logic in femtoPHY so that the PHY automatically responds to a remote wake-up without initial involvement of the Host controller. */
#define SYSCFG_USB2PHY2CR_USB2PHY2CMN_Pos                               (2U)
#define SYSCFG_USB2PHY2CR_USB2PHY2CMN_Msk                               (0x1U << SYSCFG_USB2PHY2CR_USB2PHY2CMN_Pos)                                 /*!< 0x00000004 */
#define SYSCFG_USB2PHY2CR_USB2PHY2CMN                                   SYSCFG_USB2PHY2CR_USB2PHY2CMN_Msk                                           /*!< Controls the power down of analog blocks during Suspend and Sleep. */
#define SYSCFG_USB2PHY2CR_IDPULLUP_Pos                                  (3U)
#define SYSCFG_USB2PHY2CR_IDPULLUP_Msk                                  (0x1U << SYSCFG_USB2PHY2CR_IDPULLUP_Pos)                                    /*!< 0x00000008 */
#define SYSCFG_USB2PHY2CR_IDPULLUP                                      SYSCFG_USB2PHY2CR_IDPULLUP_Msk                                              /*!< Controls ID line sampling */
#define SYSCFG_USB2PHY2CR_VBUSVALID_Pos                                 (4U)
#define SYSCFG_USB2PHY2CR_VBUSVALID_Msk                                 (0x1U << SYSCFG_USB2PHY2CR_VBUSVALID_Pos)                                   /*!< 0x00000010 */
#define SYSCFG_USB2PHY2CR_VBUSVALID                                     SYSCFG_USB2PHY2CR_VBUSVALID_Msk                                             /*!< Controls vbus valid input of USB3 DRD controller when in Host mode */
#define SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_Pos                             (5U)
#define SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_Msk                             (0x1U << SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_Pos)                               /*!< 0x00000020 */
#define SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL                                 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_Msk                                         /*!< Selects VBUS valid comparator that is used when USB3 DRD controller is in Device mode */
#define SYSCFG_USB2PHY2CR_VBUSVLDEXT_Pos                                (6U)
#define SYSCFG_USB2PHY2CR_VBUSVLDEXT_Msk                                (0x1U << SYSCFG_USB2PHY2CR_VBUSVLDEXT_Pos)                                  /*!< 0x00000040 */
#define SYSCFG_USB2PHY2CR_VBUSVLDEXT                                    SYSCFG_USB2PHY2CR_VBUSVLDEXT_Msk                                            /*!< Voltage comparison result when an external voltage comparator is used */
#define SYSCFG_USB2PHY2CR_FILTER_BYPASS_Pos                             (7U)
#define SYSCFG_USB2PHY2CR_FILTER_BYPASS_Msk                             (0xFU << SYSCFG_USB2PHY2CR_FILTER_BYPASS_Pos)                               /*!< 0x00000780 */
#define SYSCFG_USB2PHY2CR_FILTER_BYPASS                                 SYSCFG_USB2PHY2CR_FILTER_BYPASS_Msk                                         /*!< 0: internal debounce logic is enabled (default). [Bit0: applies to utmiotg_vbusvalid, Bit1: applies to pipe3_PowerPresent, Bit2: applies to utmisrp_bvalid, Bit3: applies to utmiotg_iddig]. (default) */
#define SYSCFG_USB2PHY2CR_USB2PHY2SEL_Pos                               (12U)
#define SYSCFG_USB2PHY2CR_USB2PHY2SEL_Msk                               (0x7U << SYSCFG_USB2PHY2CR_USB2PHY2SEL_Pos)                                 /*!< 0x00007000 */
#define SYSCFG_USB2PHY2CR_USB2PHY2SEL                                   SYSCFG_USB2PHY2CR_USB2PHY2SEL_Msk                                           /*!< PHY refclk speed setting: */

/**************  Bit definition for SYSCFG_USB2PHY2SR register  ***************/
#define SYSCFG_USB2PHY2SR_USB_CONN_ID_Pos                               (0U)
#define SYSCFG_USB2PHY2SR_USB_CONN_ID_Msk                               (0x1U << SYSCFG_USB2PHY2SR_USB_CONN_ID_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_USB2PHY2SR_USB_CONN_ID                                   SYSCFG_USB2PHY2SR_USB_CONN_ID_Msk                                           /*!< Mini A/B plug indicator. Only valid if IDPULLUP is set to '1'. */

/*************  Bit definition for SYSCFG_USB2PHY2TRIM1 register  *************/
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLITUNE_Pos                       (0U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLITUNE_Msk                       (0x3U << SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLITUNE_Pos)                         /*!< 0x00000003 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLITUNE                           SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLITUNE_Msk                                   /*!< PLL Integral Path Tune */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLPTUNE_Pos                       (2U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLPTUNE_Msk                       (0xFU << SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLPTUNE_Pos)                         /*!< 0x0000003C */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLPTUNE                           SYSCFG_USB2PHY2TRIM1_USB2PHY2PLLPTUNE_Msk                                   /*!< PLL Proportional Path Tune */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2COMPDISTUNE_Pos                    (6U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2COMPDISTUNE_Msk                    (0x7U << SYSCFG_USB2PHY2TRIM1_USB2PHY2COMPDISTUNE_Pos)                      /*!< 0x000001C0 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2COMPDISTUNE                        SYSCFG_USB2PHY2TRIM1_USB2PHY2COMPDISTUNE_Msk                                /*!< Disconnect Threshold Adjustment. It adjusts the voltage level for the threshold used to detect a disconnect event at the Host. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2SQRXTUNE_Pos                       (9U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2SQRXTUNE_Msk                       (0x7U << SYSCFG_USB2PHY2TRIM1_USB2PHY2SQRXTUNE_Pos)                         /*!< 0x00000E00 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2SQRXTUNE                           SYSCFG_USB2PHY2TRIM1_USB2PHY2SQRXTUNE_Msk                                   /*!< Squelch Threshold Adjustment. It adjusts the voltage level for the threshold used to detect valid high speed data. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2VDATREFTUNE_Pos                    (12U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2VDATREFTUNE_Msk                    (0x3U << SYSCFG_USB2PHY2TRIM1_USB2PHY2VDATREFTUNE_Pos)                      /*!< 0x00003000 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2VDATREFTUNE                        SYSCFG_USB2PHY2TRIM1_USB2PHY2VDATREFTUNE_Msk                                /*!< Data Detect Voltage Adjustment. It adjusts the threshold voltage level (Vdat_ref) used to detect data during charger type detection. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2OTGTUNE_Pos                        (14U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2OTGTUNE_Msk                        (0x7U << SYSCFG_USB2PHY2TRIM1_USB2PHY2OTGTUNE_Pos)                          /*!< 0x0001C000 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2OTGTUNE                            SYSCFG_USB2PHY2TRIM1_USB2PHY2OTGTUNE_Msk                                    /*!< VBUS Valid Threshold Adjustment. It adjusts the voltage level for the VBUS Valid threshold. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXHSXVTUNE_Pos                     (17U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXHSXVTUNE_Msk                     (0x3U << SYSCFG_USB2PHY2TRIM1_USB2PHY2TXHSXVTUNE_Pos)                       /*!< 0x00060000 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXHSXVTUNE                         SYSCFG_USB2PHY2TRIM1_USB2PHY2TXHSXVTUNE_Msk                                 /*!< Transmitter High Speed Crossover Adjustment. It adjusts the voltage at which DP and DM signals cross while transmitting in High Speed mode. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXFSLSTUNE_Pos                     (19U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXFSLSTUNE_Msk                     (0xFU << SYSCFG_USB2PHY2TRIM1_USB2PHY2TXFSLSTUNE_Pos)                       /*!< 0x00780000 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXFSLSTUNE                         SYSCFG_USB2PHY2TRIM1_USB2PHY2TXFSLSTUNE_Msk                                 /*!< FS/LS Source Impedance Adjustment. It adjusts the low and full speed single-ended source impedance while driving high. The following adjustment values are based on nominal process, voltage and temperature. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXVREFTUNE_Pos                     (23U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXVREFTUNE_Msk                     (0xFU << SYSCFG_USB2PHY2TRIM1_USB2PHY2TXVREFTUNE_Pos)                       /*!< 0x07800000 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXVREFTUNE                         SYSCFG_USB2PHY2TRIM1_USB2PHY2TXVREFTUNE_Msk                                 /*!< HS DC Voltage Level Adjustment. It adjusts the high speed DC level voltage. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRISETUNE_Pos                     (27U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRISETUNE_Msk                     (0x3U << SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRISETUNE_Pos)                       /*!< 0x18000000 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRISETUNE                         SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRISETUNE_Msk                                 /*!< HS Transmitter Rise/Fall Time  Adjustment. It adjusts the rise/fall times of the High Speed waveform. */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRESTUNE_Pos                      (29U)
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRESTUNE_Msk                      (0x3U << SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRESTUNE_Pos)                        /*!< 0x60000000 */
#define SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRESTUNE                          SYSCFG_USB2PHY2TRIM1_USB2PHY2TXRESTUNE_Msk                                  /*!< USB Source Impedance  Adjustment. In some applications there can be significant series resistance on the DP and DM paths between the transceiver and cable. This bitfield adjusts the driver source impedance to compensate for added series resistance on the USB. Note : any setting other than the default one can result in source impedance variation accross process, voltage and temperature that does not meet USB2.0 specifications limits. */

/*************  Bit definition for SYSCFG_USB2PHY2TRIM2 register  *************/
#define SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPAMPTUNE_Pos                (0U)
#define SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPAMPTUNE_Msk                (0x3U << SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPAMPTUNE_Pos)                  /*!< 0x00000003 */
#define SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPAMPTUNE                    SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPAMPTUNE_Msk                            /*!< HS Transmitter Pre Emphasis Current Control. This bitfield controls the amount of current sourced to DP and DM after a J-to-K or K-to-J transition. The HS Transmitter pre-emphasis current is defined in terms of unit amounts. One unit amount is approximately 600 uA and is defined as 1x pre-emphasis current. */
#define SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPPULSETUNE_Pos              (2U)
#define SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPPULSETUNE_Msk              (0x1U << SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPPULSETUNE_Pos)                /*!< 0x00000004 */
#define SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPPULSETUNE                  SYSCFG_USB2PHY2TRIM2_USB2PHY2TXPREEMPPULSETUNE_Msk                          /*!< HS Transmitter Pre Emphasis Duration Control. This bit controls the duration for which the HS pre-emphasis current is sourced onto DM or DP. The HS Transmitter pre-emphasis duration is defined in terms of unit amounts. One unit of pre-emphasis duration is approximately 580ps and is defined as 1x pre-emphasis duration. This bit is valid only if TXPREEMPAMPTUNE[0] or TXPREEMPAMPTUNE[1] is set to 1. */

/*****************  Bit definition for SYSCFG_PMCR1 register  *****************/
#define SYSCFG_PMCR1_OCTOSPI_ADDRESS_MAPPING_Pos                        (0U)
#define SYSCFG_PMCR1_OCTOSPI_ADDRESS_MAPPING_Msk                        (0x7U << SYSCFG_PMCR1_OCTOSPI_ADDRESS_MAPPING_Pos)                          /*!< 0x00000007 */
#define SYSCFG_PMCR1_OCTOSPI_ADDRESS_MAPPING                            SYSCFG_PMCR1_OCTOSPI_ADDRESS_MAPPING_Msk                                    /*!< OCTOSPI1 and OCTOSPI2 address mapping */

/****************  Bit definition for SYSCFG_ETH1CR register  *****************/
#define SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Pos                              (0U)
#define SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Msk                              (0x1U << SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Pos)                                /*!< 0x00000001 */
#define SYSCFG_ETH1CR_ETH1_REF_CLK_SEL                                  SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Msk                                          /*!< ETH1_REF_CLK_SEL: Ethernet 50MHz RMII clock selection. */
#define SYSCFG_ETH1CR_ETH1_SEL_Pos                                      (4U)
#define SYSCFG_ETH1CR_ETH1_SEL_Msk                                      (0x7U << SYSCFG_ETH1CR_ETH1_SEL_Pos)                                        /*!< 0x00000070 */
#define SYSCFG_ETH1CR_ETH1_SEL                                          SYSCFG_ETH1CR_ETH1_SEL_Msk                                                  /*!< Ethernet 1 PHY interface selection. */
#define SYSCFG_ETH1CR_ETH1_DIRECT_Pos                                   (31U)
#define SYSCFG_ETH1CR_ETH1_DIRECT_Msk                                   (0x1U << SYSCFG_ETH1CR_ETH1_DIRECT_Pos)                                     /*!< 0x80000000 */
#define SYSCFG_ETH1CR_ETH1_DIRECT                                       SYSCFG_ETH1CR_ETH1_DIRECT_Msk                                               /*!< Connect ETH1 directly to PHY (bypass ETHSW). */

/****************  Bit definition for SYSCFG_ETH2CR register  *****************/
#define SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Pos                              (0U)
#define SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Msk                              (0x1U << SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Pos)                                /*!< 0x00000001 */
#define SYSCFG_ETH2CR_ETH2_REF_CLK_SEL                                  SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Msk                                          /*!< ETH2_REF_CLK_SEL: Ethernet 50MHz RMII clock selection. */
#define SYSCFG_ETH2CR_ETH2_SEL_Pos                                      (4U)
#define SYSCFG_ETH2CR_ETH2_SEL_Msk                                      (0x7U << SYSCFG_ETH2CR_ETH2_SEL_Pos)                                        /*!< 0x00000070 */
#define SYSCFG_ETH2CR_ETH2_SEL                                          SYSCFG_ETH2CR_ETH2_SEL_Msk                                                  /*!< Ethernet 2 PHY interface selection. */

/*****************  Bit definition for SYSCFG_IOCR register  ******************/
#define SYSCFG_IOCR_HSLVEN_TRACE_Pos                                    (0U)
#define SYSCFG_IOCR_HSLVEN_TRACE_Msk                                    (0x1U << SYSCFG_IOCR_HSLVEN_TRACE_Pos)                                      /*!< 0x00000001 */
#define SYSCFG_IOCR_HSLVEN_TRACE                                        SYSCFG_IOCR_HSLVEN_TRACE_Msk                                                /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_LTDC_Pos                                     (1U)
#define SYSCFG_IOCR_HSLVEN_LTDC_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_LTDC_Pos)                                       /*!< 0x00000002 */
#define SYSCFG_IOCR_HSLVEN_LTDC                                         SYSCFG_IOCR_HSLVEN_LTDC_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_OCTOSPI1_Pos                                 (2U)
#define SYSCFG_IOCR_HSLVEN_OCTOSPI1_Msk                                 (0x1U << SYSCFG_IOCR_HSLVEN_OCTOSPI1_Pos)                                   /*!< 0x00000004 */
#define SYSCFG_IOCR_HSLVEN_OCTOSPI1                                     SYSCFG_IOCR_HSLVEN_OCTOSPI1_Msk                                             /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_OCTOSPI2_Pos                                 (3U)
#define SYSCFG_IOCR_HSLVEN_OCTOSPI2_Msk                                 (0x1U << SYSCFG_IOCR_HSLVEN_OCTOSPI2_Pos)                                   /*!< 0x00000008 */
#define SYSCFG_IOCR_HSLVEN_OCTOSPI2                                     SYSCFG_IOCR_HSLVEN_OCTOSPI2_Msk                                             /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_ETH1_Pos                                     (4U)
#define SYSCFG_IOCR_HSLVEN_ETH1_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_ETH1_Pos)                                       /*!< 0x00000010 */
#define SYSCFG_IOCR_HSLVEN_ETH1                                         SYSCFG_IOCR_HSLVEN_ETH1_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_ETH2_Pos                                     (5U)
#define SYSCFG_IOCR_HSLVEN_ETH2_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_ETH2_Pos)                                       /*!< 0x00000020 */
#define SYSCFG_IOCR_HSLVEN_ETH2                                         SYSCFG_IOCR_HSLVEN_ETH2_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SDMMC3_Pos                                   (6U)
#define SYSCFG_IOCR_HSLVEN_SDMMC3_Msk                                   (0x1U << SYSCFG_IOCR_HSLVEN_SDMMC3_Pos)                                     /*!< 0x00000040 */
#define SYSCFG_IOCR_HSLVEN_SDMMC3                                       SYSCFG_IOCR_HSLVEN_SDMMC3_Msk                                               /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI1_Pos                                     (7U)
#define SYSCFG_IOCR_HSLVEN_SPI1_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI1_Pos)                                       /*!< 0x00000080 */
#define SYSCFG_IOCR_HSLVEN_SPI1                                         SYSCFG_IOCR_HSLVEN_SPI1_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI2_Pos                                     (8U)
#define SYSCFG_IOCR_HSLVEN_SPI2_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI2_Pos)                                       /*!< 0x00000100 */
#define SYSCFG_IOCR_HSLVEN_SPI2                                         SYSCFG_IOCR_HSLVEN_SPI2_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI3_Pos                                     (9U)
#define SYSCFG_IOCR_HSLVEN_SPI3_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI3_Pos)                                       /*!< 0x00000200 */
#define SYSCFG_IOCR_HSLVEN_SPI3                                         SYSCFG_IOCR_HSLVEN_SPI3_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI4_Pos                                     (10U)
#define SYSCFG_IOCR_HSLVEN_SPI4_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI4_Pos)                                       /*!< 0x00000400 */
#define SYSCFG_IOCR_HSLVEN_SPI4                                         SYSCFG_IOCR_HSLVEN_SPI4_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI5_Pos                                     (11U)
#define SYSCFG_IOCR_HSLVEN_SPI5_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI5_Pos)                                       /*!< 0x00000800 */
#define SYSCFG_IOCR_HSLVEN_SPI5                                         SYSCFG_IOCR_HSLVEN_SPI5_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI6_Pos                                     (12U)
#define SYSCFG_IOCR_HSLVEN_SPI6_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI6_Pos)                                       /*!< 0x00001000 */
#define SYSCFG_IOCR_HSLVEN_SPI6                                         SYSCFG_IOCR_HSLVEN_SPI6_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI7_Pos                                     (13U)
#define SYSCFG_IOCR_HSLVEN_SPI7_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI7_Pos)                                       /*!< 0x00002000 */
#define SYSCFG_IOCR_HSLVEN_SPI7                                         SYSCFG_IOCR_HSLVEN_SPI7_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_HSLVEN_SPI8_Pos                                     (14U)
#define SYSCFG_IOCR_HSLVEN_SPI8_Msk                                     (0x1U << SYSCFG_IOCR_HSLVEN_SPI8_Pos)                                       /*!< 0x00004000 */
#define SYSCFG_IOCR_HSLVEN_SPI8                                         SYSCFG_IOCR_HSLVEN_SPI8_Msk                                                 /*!< High Speed Low Voltage Pad mode Enable. */
#define SYSCFG_IOCR_ANA0_SEL_Pos                                        (30U)
#define SYSCFG_IOCR_ANA0_SEL_Msk                                        (0x1U << SYSCFG_IOCR_ANA0_SEL_Pos)                                          /*!< 0x40000000 */
#define SYSCFG_IOCR_ANA0_SEL                                            SYSCFG_IOCR_ANA0_SEL_Msk                                                    /*!< controls analog connection between ANA0 and PA0 pin. */
#define SYSCFG_IOCR_ANA1_SEL_Pos                                        (31U)
#define SYSCFG_IOCR_ANA1_SEL_Msk                                        (0x1U << SYSCFG_IOCR_ANA1_SEL_Pos)                                          /*!< 0x80000000 */
#define SYSCFG_IOCR_ANA1_SEL                                            SYSCFG_IOCR_ANA1_SEL_Msk                                                    /*!< controls analog connection between the ANA1 and PA1 pin. */

/****************  Bit definition for SYSCFG_CMPCR1 register  *****************/
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_RANSRC_Pos                           (0U)
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_RANSRC_Msk                           (0xFU << SYSCFG_CMPCR1_CMP_OCTOSPI1_RANSRC_Pos)                             /*!< 0x0000000F */
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_RANSRC                               SYSCFG_CMPCR1_CMP_OCTOSPI1_RANSRC_Msk                                       /*!< NMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_RAPSRC_Pos                           (4U)
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_RAPSRC_Msk                           (0xFU << SYSCFG_CMPCR1_CMP_OCTOSPI1_RAPSRC_Pos)                             /*!< 0x000000F0 */
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_RAPSRC                               SYSCFG_CMPCR1_CMP_OCTOSPI1_RAPSRC_Msk                                       /*!< PMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_PD_Pos                               (8U)
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_PD_Msk                               (0x1U << SYSCFG_CMPCR1_CMP_OCTOSPI1_PD_Pos)                                 /*!< 0x00000100 */
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_PD                                   SYSCFG_CMPCR1_CMP_OCTOSPI1_PD_Msk                                           /*!< Compensation cell power-down */
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_SW_CTRL_Pos                          (9U)
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_SW_CTRL_Msk                          (0x1U << SYSCFG_CMPCR1_CMP_OCTOSPI1_SW_CTRL_Pos)                            /*!< 0x00000200 */
#define SYSCFG_CMPCR1_CMP_OCTOSPI1_SW_CTRL                              SYSCFG_CMPCR1_CMP_OCTOSPI1_SW_CTRL_Msk                                      /*!< Compensation Software Control */

/****************  Bit definition for SYSCFG_CMPSR1 register  *****************/
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_ANSRC_Pos                            (0U)
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_ANSRC_Msk                            (0xFU << SYSCFG_CMPSR1_CMP_OCTOSPI1_ANSRC_Pos)                              /*!< 0x0000000F */
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_ANSRC                                SYSCFG_CMPSR1_CMP_OCTOSPI1_ANSRC_Msk                                        /*!< NMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_APSRC_Pos                            (4U)
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_APSRC_Msk                            (0xFU << SYSCFG_CMPSR1_CMP_OCTOSPI1_APSRC_Pos)                              /*!< 0x000000F0 */
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_APSRC                                SYSCFG_CMPSR1_CMP_OCTOSPI1_APSRC_Msk                                        /*!< APSRC[3:0]: PMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_READY_Pos                            (8U)
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_READY_Msk                            (0x1U << SYSCFG_CMPSR1_CMP_OCTOSPI1_READY_Pos)                              /*!< 0x00000100 */
#define SYSCFG_CMPSR1_CMP_OCTOSPI1_READY                                SYSCFG_CMPSR1_CMP_OCTOSPI1_READY_Msk                                        /*!< Compensation cell ready flag */

/****************  Bit definition for SYSCFG_CMPCR2 register  *****************/
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_RANSRC_Pos                           (0U)
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_RANSRC_Msk                           (0xFU << SYSCFG_CMPCR2_CMP_OCTOSPI2_RANSRC_Pos)                             /*!< 0x0000000F */
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_RANSRC                               SYSCFG_CMPCR2_CMP_OCTOSPI2_RANSRC_Msk                                       /*!< NMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_RAPSRC_Pos                           (4U)
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_RAPSRC_Msk                           (0xFU << SYSCFG_CMPCR2_CMP_OCTOSPI2_RAPSRC_Pos)                             /*!< 0x000000F0 */
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_RAPSRC                               SYSCFG_CMPCR2_CMP_OCTOSPI2_RAPSRC_Msk                                       /*!< PMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_PD_Pos                               (8U)
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_PD_Msk                               (0x1U << SYSCFG_CMPCR2_CMP_OCTOSPI2_PD_Pos)                                 /*!< 0x00000100 */
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_PD                                   SYSCFG_CMPCR2_CMP_OCTOSPI2_PD_Msk                                           /*!< Compensation cell power-down */
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_SW_CTRL_Pos                          (9U)
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_SW_CTRL_Msk                          (0x1U << SYSCFG_CMPCR2_CMP_OCTOSPI2_SW_CTRL_Pos)                            /*!< 0x00000200 */
#define SYSCFG_CMPCR2_CMP_OCTOSPI2_SW_CTRL                              SYSCFG_CMPCR2_CMP_OCTOSPI2_SW_CTRL_Msk                                      /*!< Compensation Software Control */

/****************  Bit definition for SYSCFG_CMPSR2 register  *****************/
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_ANSRC_Pos                            (0U)
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_ANSRC_Msk                            (0xFU << SYSCFG_CMPSR2_CMP_OCTOSPI2_ANSRC_Pos)                              /*!< 0x0000000F */
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_ANSRC                                SYSCFG_CMPSR2_CMP_OCTOSPI2_ANSRC_Msk                                        /*!< NMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_APSRC_Pos                            (4U)
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_APSRC_Msk                            (0xFU << SYSCFG_CMPSR2_CMP_OCTOSPI2_APSRC_Pos)                              /*!< 0x000000F0 */
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_APSRC                                SYSCFG_CMPSR2_CMP_OCTOSPI2_APSRC_Msk                                        /*!< APSRC[3:0]: PMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_READY_Pos                            (8U)
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_READY_Msk                            (0x1U << SYSCFG_CMPSR2_CMP_OCTOSPI2_READY_Pos)                              /*!< 0x00000100 */
#define SYSCFG_CMPSR2_CMP_OCTOSPI2_READY                                SYSCFG_CMPSR2_CMP_OCTOSPI2_READY_Msk                                        /*!< Compensation cell ready flag */

/****************  Bit definition for SYSCFG_CMPCR3 register  *****************/
#define SYSCFG_CMPCR3_CMP_VDDCORE_RANSRC_Pos                            (0U)
#define SYSCFG_CMPCR3_CMP_VDDCORE_RANSRC_Msk                            (0xFU << SYSCFG_CMPCR3_CMP_VDDCORE_RANSRC_Pos)                              /*!< 0x0000000F */
#define SYSCFG_CMPCR3_CMP_VDDCORE_RANSRC                                SYSCFG_CMPCR3_CMP_VDDCORE_RANSRC_Msk                                        /*!< NMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR3_CMP_VDDCORE_RAPSRC_Pos                            (4U)
#define SYSCFG_CMPCR3_CMP_VDDCORE_RAPSRC_Msk                            (0xFU << SYSCFG_CMPCR3_CMP_VDDCORE_RAPSRC_Pos)                              /*!< 0x000000F0 */
#define SYSCFG_CMPCR3_CMP_VDDCORE_RAPSRC                                SYSCFG_CMPCR3_CMP_VDDCORE_RAPSRC_Msk                                        /*!< PMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR3_CMP_VDDCORE_PD_Pos                                (8U)
#define SYSCFG_CMPCR3_CMP_VDDCORE_PD_Msk                                (0x1U << SYSCFG_CMPCR3_CMP_VDDCORE_PD_Pos)                                  /*!< 0x00000100 */
#define SYSCFG_CMPCR3_CMP_VDDCORE_PD                                    SYSCFG_CMPCR3_CMP_VDDCORE_PD_Msk                                            /*!< Compensation cell power-down */
#define SYSCFG_CMPCR3_CMP_VDDCORE_SW_CTRL_Pos                           (9U)
#define SYSCFG_CMPCR3_CMP_VDDCORE_SW_CTRL_Msk                           (0x1U << SYSCFG_CMPCR3_CMP_VDDCORE_SW_CTRL_Pos)                             /*!< 0x00000200 */
#define SYSCFG_CMPCR3_CMP_VDDCORE_SW_CTRL                               SYSCFG_CMPCR3_CMP_VDDCORE_SW_CTRL_Msk                                       /*!< Compensation Software Control */

/****************  Bit definition for SYSCFG_CMPSR3 register  *****************/
#define SYSCFG_CMPSR3_CMP_VDDCORE_ANSRC_Pos                             (0U)
#define SYSCFG_CMPSR3_CMP_VDDCORE_ANSRC_Msk                             (0xFU << SYSCFG_CMPSR3_CMP_VDDCORE_ANSRC_Pos)                               /*!< 0x0000000F */
#define SYSCFG_CMPSR3_CMP_VDDCORE_ANSRC                                 SYSCFG_CMPSR3_CMP_VDDCORE_ANSRC_Msk                                         /*!< NMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR3_CMP_VDDCORE_APSRC_Pos                             (4U)
#define SYSCFG_CMPSR3_CMP_VDDCORE_APSRC_Msk                             (0xFU << SYSCFG_CMPSR3_CMP_VDDCORE_APSRC_Pos)                               /*!< 0x000000F0 */
#define SYSCFG_CMPSR3_CMP_VDDCORE_APSRC                                 SYSCFG_CMPSR3_CMP_VDDCORE_APSRC_Msk                                         /*!< APSRC[3:0]: PMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR3_CMP_VDDCORE_READY_Pos                             (8U)
#define SYSCFG_CMPSR3_CMP_VDDCORE_READY_Msk                             (0x1U << SYSCFG_CMPSR3_CMP_VDDCORE_READY_Pos)                               /*!< 0x00000100 */
#define SYSCFG_CMPSR3_CMP_VDDCORE_READY                                 SYSCFG_CMPSR3_CMP_VDDCORE_READY_Msk                                         /*!< Compensation cell ready flag */

/****************  Bit definition for SYSCFG_CMPCR4 register  *****************/
#define SYSCFG_CMPCR4_CMP_EMMC_RANSRC_Pos                               (0U)
#define SYSCFG_CMPCR4_CMP_EMMC_RANSRC_Msk                               (0xFU << SYSCFG_CMPCR4_CMP_EMMC_RANSRC_Pos)                                 /*!< 0x0000000F */
#define SYSCFG_CMPCR4_CMP_EMMC_RANSRC                                   SYSCFG_CMPCR4_CMP_EMMC_RANSRC_Msk                                           /*!< NMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR4_CMP_EMMC_RAPSRC_Pos                               (4U)
#define SYSCFG_CMPCR4_CMP_EMMC_RAPSRC_Msk                               (0xFU << SYSCFG_CMPCR4_CMP_EMMC_RAPSRC_Pos)                                 /*!< 0x000000F0 */
#define SYSCFG_CMPCR4_CMP_EMMC_RAPSRC                                   SYSCFG_CMPCR4_CMP_EMMC_RAPSRC_Msk                                           /*!< PMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR4_CMP_EMMC_PD_Pos                                   (8U)
#define SYSCFG_CMPCR4_CMP_EMMC_PD_Msk                                   (0x1U << SYSCFG_CMPCR4_CMP_EMMC_PD_Pos)                                     /*!< 0x00000100 */
#define SYSCFG_CMPCR4_CMP_EMMC_PD                                       SYSCFG_CMPCR4_CMP_EMMC_PD_Msk                                               /*!< Compensation cell power-down */
#define SYSCFG_CMPCR4_CMP_EMMC_SW_CTRL_Pos                              (9U)
#define SYSCFG_CMPCR4_CMP_EMMC_SW_CTRL_Msk                              (0x1U << SYSCFG_CMPCR4_CMP_EMMC_SW_CTRL_Pos)                                /*!< 0x00000200 */
#define SYSCFG_CMPCR4_CMP_EMMC_SW_CTRL                                  SYSCFG_CMPCR4_CMP_EMMC_SW_CTRL_Msk                                          /*!< Compensation Software Control */

/****************  Bit definition for SYSCFG_CMPSR4 register  *****************/
#define SYSCFG_CMPSR4_CMP_EMMC_ANSRC_Pos                                (0U)
#define SYSCFG_CMPSR4_CMP_EMMC_ANSRC_Msk                                (0xFU << SYSCFG_CMPSR4_CMP_EMMC_ANSRC_Pos)                                  /*!< 0x0000000F */
#define SYSCFG_CMPSR4_CMP_EMMC_ANSRC                                    SYSCFG_CMPSR4_CMP_EMMC_ANSRC_Msk                                            /*!< NMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR4_CMP_EMMC_APSRC_Pos                                (4U)
#define SYSCFG_CMPSR4_CMP_EMMC_APSRC_Msk                                (0xFU << SYSCFG_CMPSR4_CMP_EMMC_APSRC_Pos)                                  /*!< 0x000000F0 */
#define SYSCFG_CMPSR4_CMP_EMMC_APSRC                                    SYSCFG_CMPSR4_CMP_EMMC_APSRC_Msk                                            /*!< APSRC[3:0]: PMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR4_CMP_EMMC_READY_Pos                                (8U)
#define SYSCFG_CMPSR4_CMP_EMMC_READY_Msk                                (0x1U << SYSCFG_CMPSR4_CMP_EMMC_READY_Pos)                                  /*!< 0x00000100 */
#define SYSCFG_CMPSR4_CMP_EMMC_READY                                    SYSCFG_CMPSR4_CMP_EMMC_READY_Msk                                            /*!< Compensation cell ready flag */

/****************  Bit definition for SYSCFG_CMPCR5 register  *****************/
#define SYSCFG_CMPCR5_CMP_SD_RANSRC_Pos                                 (0U)
#define SYSCFG_CMPCR5_CMP_SD_RANSRC_Msk                                 (0xFU << SYSCFG_CMPCR5_CMP_SD_RANSRC_Pos)                                   /*!< 0x0000000F */
#define SYSCFG_CMPCR5_CMP_SD_RANSRC                                     SYSCFG_CMPCR5_CMP_SD_RANSRC_Msk                                             /*!< NMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR5_CMP_SD_RAPSRC_Pos                                 (4U)
#define SYSCFG_CMPCR5_CMP_SD_RAPSRC_Msk                                 (0xFU << SYSCFG_CMPCR5_CMP_SD_RAPSRC_Pos)                                   /*!< 0x000000F0 */
#define SYSCFG_CMPCR5_CMP_SD_RAPSRC                                     SYSCFG_CMPCR5_CMP_SD_RAPSRC_Msk                                             /*!< PMOS I/O Compensation value sent to IOs when SW_CTRL = 1 */
#define SYSCFG_CMPCR5_CMP_SD_PD_Pos                                     (8U)
#define SYSCFG_CMPCR5_CMP_SD_PD_Msk                                     (0x1U << SYSCFG_CMPCR5_CMP_SD_PD_Pos)                                       /*!< 0x00000100 */
#define SYSCFG_CMPCR5_CMP_SD_PD                                         SYSCFG_CMPCR5_CMP_SD_PD_Msk                                                 /*!< Compensation cell power-down */
#define SYSCFG_CMPCR5_CMP_SD_SW_CTRL_Pos                                (9U)
#define SYSCFG_CMPCR5_CMP_SD_SW_CTRL_Msk                                (0x1U << SYSCFG_CMPCR5_CMP_SD_SW_CTRL_Pos)                                  /*!< 0x00000200 */
#define SYSCFG_CMPCR5_CMP_SD_SW_CTRL                                    SYSCFG_CMPCR5_CMP_SD_SW_CTRL_Msk                                            /*!< Compensation Software Control */

/****************  Bit definition for SYSCFG_CMPSR5 register  *****************/
#define SYSCFG_CMPSR5_CMP_SD_ANSRC_Pos                                  (0U)
#define SYSCFG_CMPSR5_CMP_SD_ANSRC_Msk                                  (0xFU << SYSCFG_CMPSR5_CMP_SD_ANSRC_Pos)                                    /*!< 0x0000000F */
#define SYSCFG_CMPSR5_CMP_SD_ANSRC                                      SYSCFG_CMPSR5_CMP_SD_ANSRC_Msk                                              /*!< NMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR5_CMP_SD_APSRC_Pos                                  (4U)
#define SYSCFG_CMPSR5_CMP_SD_APSRC_Msk                                  (0xFU << SYSCFG_CMPSR5_CMP_SD_APSRC_Pos)                                    /*!< 0x000000F0 */
#define SYSCFG_CMPSR5_CMP_SD_APSRC                                      SYSCFG_CMPSR5_CMP_SD_APSRC_Msk                                              /*!< APSRC[3:0]: PMOS I/O Compensation value provided by compensation cell. */
#define SYSCFG_CMPSR5_CMP_SD_READY_Pos                                  (8U)
#define SYSCFG_CMPSR5_CMP_SD_READY_Msk                                  (0x1U << SYSCFG_CMPSR5_CMP_SD_READY_Pos)                                    /*!< 0x00000100 */
#define SYSCFG_CMPSR5_CMP_SD_READY                                      SYSCFG_CMPSR5_CMP_SD_READY_Msk                                              /*!< Compensation cell ready flag */

/******************  Bit definition for SYSCFG_CBR register  ******************/
#define SYSCFG_CBR_CLL_Pos                                              (0U)
#define SYSCFG_CBR_CLL_Msk                                              (0x1U << SYSCFG_CBR_CLL_Pos)                                                /*!< 0x00000001 */
#define SYSCFG_CBR_CLL                                                  SYSCFG_CBR_CLL_Msk                                                          /*!< Cortex-M33 LOCKUP (Hardfault) output enable bit */
#define SYSCFG_CBR_PVDL_Pos                                             (2U)
#define SYSCFG_CBR_PVDL_Msk                                             (0x1U << SYSCFG_CBR_PVDL_Pos)                                               /*!< 0x00000004 */
#define SYSCFG_CBR_PVDL                                                 SYSCFG_CBR_PVDL_Msk                                                         /*!< PVD lock enable bit */
#define SYSCFG_CBR_BKRAML_Pos                                           (3U)
#define SYSCFG_CBR_BKRAML_Msk                                           (0x1U << SYSCFG_CBR_BKRAML_Pos)                                             /*!< 0x00000008 */
#define SYSCFG_CBR_BKRAML                                               SYSCFG_CBR_BKRAML_Msk                                                       /*!< Backup SRAM double ECC error lock bit */
#define SYSCFG_CBR_RETRAML_Pos                                          (4U)
#define SYSCFG_CBR_RETRAML_Msk                                          (0x1U << SYSCFG_CBR_RETRAML_Pos)                                            /*!< 0x00000010 */
#define SYSCFG_CBR_RETRAML                                              SYSCFG_CBR_RETRAML_Msk                                                      /*!< Retention SRAM double ECC error lock bit */

/****************  Bit definition for SYSCFG_USB3CR register  *****************/
#define SYSCFG_USB3CR_USB3_HOST_PORT_POWER_CONTROL_PRESENT_Pos          (0U)
#define SYSCFG_USB3CR_USB3_HOST_PORT_POWER_CONTROL_PRESENT_Msk          (0x1U << SYSCFG_USB3CR_USB3_HOST_PORT_POWER_CONTROL_PRESENT_Pos)            /*!< 0x00000001 */
#define SYSCFG_USB3CR_USB3_HOST_PORT_POWER_CONTROL_PRESENT              SYSCFG_USB3CR_USB3_HOST_PORT_POWER_CONTROL_PRESENT_Msk                      /*!< This port defines the bit [3] of Capability Parameters (HCCPARAMS). This indicates whether the host controller implementation includes port power control. */

/****************  Bit definition for SYSCFG_USB3SR register  *****************/
#define SYSCFG_USB3SR_USB3_CLK_GATE_CTRL_Pos                            (0U)
#define SYSCFG_USB3SR_USB3_CLK_GATE_CTRL_Msk                            (0x7U << SYSCFG_USB3SR_USB3_CLK_GATE_CTRL_Pos)                              /*!< 0x00000007 */
#define SYSCFG_USB3SR_USB3_CLK_GATE_CTRL                                SYSCFG_USB3SR_USB3_CLK_GATE_CTRL_Msk                                        /*!< USB3 Debug register - Clock gating control */

/**************  Bit definition for SYSCFG_COMBOPHYCR1 register  **************/
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFUSEPAD_Pos                       (0U)
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFUSEPAD_Msk                       (0x1U << SYSCFG_COMBOPHYCR1_COMBOPHY_REFUSEPAD_Pos)                         /*!< 0x00000001 */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFUSEPAD                           SYSCFG_COMBOPHYCR1_COMBOPHY_REFUSEPAD_Msk                                   /*!< Selection of the source of the COMBOPHY reference clock */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_MPLLMULTIPLIER_Pos                  (1U)
#define SYSCFG_COMBOPHYCR1_COMBOPHY_MPLLMULTIPLIER_Msk                  (0x7FU << SYSCFG_COMBOPHYCR1_COMBOPHY_MPLLMULTIPLIER_Pos)                   /*!< 0x000000FE */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_MPLLMULTIPLIER                      SYSCFG_COMBOPHYCR1_COMBOPHY_MPLLMULTIPLIER_Msk                              /*!< Parameter for the frequency selection of the reference clock */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCREFCLKSEL_Pos                    (8U)
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCREFCLKSEL_Msk                    (0x1FFU << SYSCFG_COMBOPHYCR1_COMBOPHY_SSCREFCLKSEL_Pos)                    /*!< 0x0001FF00 */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCREFCLKSEL                        SYSCFG_COMBOPHYCR1_COMBOPHY_SSCREFCLKSEL_Msk                                /*!< Parameter for the frequency selection of the reference clock */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFCLKDIV2_Pos                      (17U)
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFCLKDIV2_Msk                      (0x1U << SYSCFG_COMBOPHYCR1_COMBOPHY_REFCLKDIV2_Pos)                        /*!< 0x00020000 */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFCLKDIV2                          SYSCFG_COMBOPHYCR1_COMBOPHY_REFCLKDIV2_Msk                                  /*!< Parameter for the frequency selection of the reference clock */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFSSPEN_Pos                        (18U)
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFSSPEN_Msk                        (0x1U << SYSCFG_COMBOPHYCR1_COMBOPHY_REFSSPEN_Pos)                          /*!< 0x00040000 */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_REFSSPEN                            SYSCFG_COMBOPHYCR1_COMBOPHY_REFSSPEN_Msk                                    /*!< Reference clock enable */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCEN_Pos                           (19U)
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCEN_Msk                           (0x1U << SYSCFG_COMBOPHYCR1_COMBOPHY_SSCEN_Pos)                             /*!< 0x00080000 */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCEN                               SYSCFG_COMBOPHYCR1_COMBOPHY_SSCEN_Msk                                       /*!< Spread Spectrum enable */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCRANGE_Pos                        (20U)
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCRANGE_Msk                        (0x7U << SYSCFG_COMBOPHYCR1_COMBOPHY_SSCRANGE_Pos)                          /*!< 0x00700000 */
#define SYSCFG_COMBOPHYCR1_COMBOPHY_SSCRANGE                            SYSCFG_COMBOPHYCR1_COMBOPHY_SSCRANGE_Msk                                    /*!< Selects the range of the Spread Spectrum modulation */

/**************  Bit definition for SYSCFG_COMBOPHYCR2 register  **************/
#define SYSCFG_COMBOPHYCR2_COMBOPHY_MODESEL_Pos                         (0U)
#define SYSCFG_COMBOPHYCR2_COMBOPHY_MODESEL_Msk                         (0x3U << SYSCFG_COMBOPHYCR2_COMBOPHY_MODESEL_Pos)                           /*!< 0x00000003 */
#define SYSCFG_COMBOPHYCR2_COMBOPHY_MODESEL                             SYSCFG_COMBOPHYCR2_COMBOPHY_MODESEL_Msk                                     /*!< Selection of the COMBOPHY mode */
#define SYSCFG_COMBOPHYCR2_COMBOPHY_TEST_POWERDOWN_Pos                  (31U)
#define SYSCFG_COMBOPHYCR2_COMBOPHY_TEST_POWERDOWN_Msk                  (0x1U << SYSCFG_COMBOPHYCR2_COMBOPHY_TEST_POWERDOWN_Pos)                    /*!< 0x80000000 */
#define SYSCFG_COMBOPHYCR2_COMBOPHY_TEST_POWERDOWN                      SYSCFG_COMBOPHYCR2_COMBOPHY_TEST_POWERDOWN_Msk                              /*!< Force the entire PHY into its lowest power state by turning everything off. */

/**************  Bit definition for SYSCFG_COMBOPHYCR3 register  **************/
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSRXLOSMASKVAL_Pos                 (0U)
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSRXLOSMASKVAL_Msk                 (0x3FFU << SYSCFG_COMBOPHYCR3_COMBOPHY_PCSRXLOSMASKVAL_Pos)                 /*!< 0x000003FF */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSRXLOSMASKVAL                     SYSCFG_COMBOPHYCR3_COMBOPHY_PCSRXLOSMASKVAL_Msk                             /*!< Masks the incoming LFPS for the number of reference clock cycles equal to the value of this bitfield. This control filters out short, non compliant, LFPS glitches sent by a non compliant partner. Setting this bitfield to 0 disables the masking. */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH3P5DB_Pos                (10U)
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH3P5DB_Msk                (0x3FU << SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH3P5DB_Pos)                 /*!< 0x0000FC00 */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH3P5DB                    SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH3P5DB_Msk                            /*!< TX De-emphasis at 3.5 dB (USB3 use case) */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH6DB_Pos                  (16U)
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH6DB_Msk                  (0x3FU << SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH6DB_Pos)                   /*!< 0x003F0000 */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH6DB                      SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXDEEMPH6DB_Msk                              /*!< TX De-emphasis at 6 dB (USB3 use case) */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXSWINGFULL_Pos                  (22U)
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXSWINGFULL_Msk                  (0x7FU << SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXSWINGFULL_Pos)                   /*!< 0x1FC00000 */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXSWINGFULL                      SYSCFG_COMBOPHYCR3_COMBOPHY_PCSTXSWINGFULL_Msk                              /*!< TX amplitude (full swing mode) (USB3 and PCIe use cases) */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_RXLOSLFPSEN_Pos                     (29U)
#define SYSCFG_COMBOPHYCR3_COMBOPHY_RXLOSLFPSEN_Msk                     (0x1U << SYSCFG_COMBOPHYCR3_COMBOPHY_RXLOSLFPSEN_Pos)                       /*!< 0x20000000 */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_RXLOSLFPSEN                         SYSCFG_COMBOPHYCR3_COMBOPHY_RXLOSLFPSEN_Msk                                 /*!< Enables the RX LOS LFPS mode. */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_RTUNE_REQ_Pos                       (30U)
#define SYSCFG_COMBOPHYCR3_COMBOPHY_RTUNE_REQ_Msk                       (0x1U << SYSCFG_COMBOPHYCR3_COMBOPHY_RTUNE_REQ_Pos)                         /*!< 0x40000000 */
#define SYSCFG_COMBOPHYCR3_COMBOPHY_RTUNE_REQ                           SYSCFG_COMBOPHYCR3_COMBOPHY_RTUNE_REQ_Msk                                   /*!< Instructs the combo PHY to perform a termination calibration. The calibration has completed when combophy_RTUNE_ACK is set. Combophy_RTUNE_REQ must be written to 0 after the calibration has completed. */

/**************  Bit definition for SYSCFG_COMBOPHYCR4 register  **************/
#define SYSCFG_COMBOPHYCR4_COMBOPHY_RX0_EQ_Pos                          (0U)
#define SYSCFG_COMBOPHYCR4_COMBOPHY_RX0_EQ_Msk                          (0x7U << SYSCFG_COMBOPHYCR4_COMBOPHY_RX0_EQ_Pos)                            /*!< 0x00000007 */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_RX0_EQ                              SYSCFG_COMBOPHYCR4_COMBOPHY_RX0_EQ_Msk                                      /*!< RX Equalizer Setting */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_LEVEL_Pos                       (3U)
#define SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_LEVEL_Msk                       (0x1FU << SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_LEVEL_Pos)                        /*!< 0x000000F8 */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_LEVEL                           SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_LEVEL_Msk                                   /*!< Loss-of-Signal Detector Sensitivity Level Control */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_BIAS_Pos                        (8U)
#define SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_BIAS_Msk                        (0x7U << SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_BIAS_Pos)                          /*!< 0x00000700 */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_BIAS                            SYSCFG_COMBOPHYCR4_COMBOPHY_LOS_BIAS_Msk                                    /*!< Loss-of-Signal Detector Threshold Level Control */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_DEEMPH_GEN1_Pos              (11U)
#define SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_DEEMPH_GEN1_Msk              (0x3FU << SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_DEEMPH_GEN1_Pos)               /*!< 0x0001F800 */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_DEEMPH_GEN1                  SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_DEEMPH_GEN1_Msk                          /*!< TX De-emphasis at 3.5 dB (PCIe gen1 use case) */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_SWING_LOW_Pos                (17U)
#define SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_SWING_LOW_Msk                (0x7FU << SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_SWING_LOW_Pos)                 /*!< 0x00FE0000 */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_SWING_LOW                    SYSCFG_COMBOPHYCR4_COMBOPHY_PCS_TX_SWING_LOW_Msk                            /*!< TX amplitude (low swing mode) (PCIe use case) */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_TX_TERM_OFFSET_Pos                  (24U)
#define SYSCFG_COMBOPHYCR4_COMBOPHY_TX_TERM_OFFSET_Msk                  (0x1FU << SYSCFG_COMBOPHYCR4_COMBOPHY_TX_TERM_OFFSET_Pos)                   /*!< 0x1F000000 */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_TX_TERM_OFFSET                      SYSCFG_COMBOPHYCR4_COMBOPHY_TX_TERM_OFFSET_Msk                              /*!< Transmitter termination offset. Enables adjustment of the transmitter termination value from the default value of 50 ohms. This is a signed offset from -16 to +15. */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_TX_VBOOST_LEVEL_Pos                 (29U)
#define SYSCFG_COMBOPHYCR4_COMBOPHY_TX_VBOOST_LEVEL_Msk                 (0x7U << SYSCFG_COMBOPHYCR4_COMBOPHY_TX_VBOOST_LEVEL_Pos)                   /*!< 0xE0000000 */
#define SYSCFG_COMBOPHYCR4_COMBOPHY_TX_VBOOST_LEVEL                     SYSCFG_COMBOPHYCR4_COMBOPHY_TX_VBOOST_LEVEL_Msk                             /*!< TX voltage boost level. */

/**************  Bit definition for SYSCFG_COMBOPHYCR5 register  **************/
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_3P5DB_Pos        (0U)
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_3P5DB_Msk        (0x3FU << SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_3P5DB_Pos)         /*!< 0x0000003F */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_3P5DB            SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_3P5DB_Msk                    /*!< TX De-emphasis at 3.5 dB (PCIe gen2 use case) */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_6DB_Pos          (6U)
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_6DB_Msk          (0x3FU << SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_6DB_Pos)           /*!< 0x00000FC0 */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_6DB              SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_TX_DEEMPH_GEN2_6DB_Msk                      /*!< TX De-emphasis at 6 dB (PCIe gen2 use case) */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_COMMON_CLOCKS_Pos               (12U)
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_COMMON_CLOCKS_Msk               (0x1U << SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_COMMON_CLOCKS_Pos)                 /*!< 0x00001000 */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_COMMON_CLOCKS                   SYSCFG_COMBOPHYCR5_COMBOPHY_PCS_COMMON_CLOCKS_Msk                           /*!< Select Common Clock Mode for PCIe Receive Datapath. When both ends of a PCIe link share a common reference clock, the latency through the receiver's elasticity buffer can be shorter, because no frequency offset exists between the two ends of the link. */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_EXT_PCLK_REQ_Pos              (13U)
#define SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_EXT_PCLK_REQ_Msk              (0x1U << SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_EXT_PCLK_REQ_Pos)                /*!< 0x00002000 */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_EXT_PCLK_REQ                  SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_EXT_PCLK_REQ_Msk                          /*!< USB3 use case : external PIPE clock enable request. When asserted, this signal enables the pipeX_pclk output regardless of power state. */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_TX2RX_LOOPBK_Pos              (14U)
#define SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_TX2RX_LOOPBK_Msk              (0x1U << SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_TX2RX_LOOPBK_Pos)                /*!< 0x00004000 */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_TX2RX_LOOPBK                  SYSCFG_COMBOPHYCR5_COMBOPHY_LANE0_TX2RX_LOOPBK_Msk                          /*!< USB3 use case : when this bit is equal to 1, data from the transmit predriver is looped back to the receive slicers. This is for debug only. Must be equal to 0 in functional mode. */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PIPE0_TX2RX_LOOPBK_Pos              (15U)
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PIPE0_TX2RX_LOOPBK_Msk              (0x1U << SYSCFG_COMBOPHYCR5_COMBOPHY_PIPE0_TX2RX_LOOPBK_Pos)                /*!< 0x00008000 */
#define SYSCFG_COMBOPHYCR5_COMBOPHY_PIPE0_TX2RX_LOOPBK                  SYSCFG_COMBOPHYCR5_COMBOPHY_PIPE0_TX2RX_LOOPBK_Msk                          /*!< PCIe use case : when this bit is equal to 1, data from the transmit predriver is looped back to the receive slicers. This is for debug only. Must be equal to 0 in functional mode. */

/**************  Bit definition for SYSCFG_COMBOPHYSR register  ***************/
#define SYSCFG_COMBOPHYSR_COMBOPHY_RTUNE_ACK_Pos                        (0U)
#define SYSCFG_COMBOPHYSR_COMBOPHY_RTUNE_ACK_Msk                        (0x1U << SYSCFG_COMBOPHYSR_COMBOPHY_RTUNE_ACK_Pos)                          /*!< 0x00000001 */
#define SYSCFG_COMBOPHYSR_COMBOPHY_RTUNE_ACK                            SYSCFG_COMBOPHYSR_COMBOPHY_RTUNE_ACK_Msk                                    /*!< Indicates the end of the termination calibration step */

/*************  Bit definition for SYSCFG_DISPLAYCLKCR register  **************/
#define SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Pos                           (0U)
#define SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Msk                           (0x3U << SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Pos)                             /*!< 0x00000003 */
#define SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL                               SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Msk                                       /*!< Control of pixel clock output selection */

/****************  Bit definition for SYSCFG_PCIECR register  *****************/
#define SYSCFG_PCIECR_PCIE_1_APP_INIT_RST_Pos                           (1U)
#define SYSCFG_PCIECR_PCIE_1_APP_INIT_RST_Msk                           (0x1U << SYSCFG_PCIECR_PCIE_1_APP_INIT_RST_Pos)                             /*!< 0x00000002 */
#define SYSCFG_PCIECR_PCIE_1_APP_INIT_RST                               SYSCFG_PCIECR_PCIE_1_APP_INIT_RST_Msk                                       /*!< Request from the application to send a Hot Reset to the downstream device. Only for RootComplex. */
#define SYSCFG_PCIECR_PCIE_1_APP_LTSSM_ENABLE_Pos                       (2U)
#define SYSCFG_PCIECR_PCIE_1_APP_LTSSM_ENABLE_Msk                       (0x1U << SYSCFG_PCIECR_PCIE_1_APP_LTSSM_ENABLE_Pos)                         /*!< 0x00000004 */
#define SYSCFG_PCIECR_PCIE_1_APP_LTSSM_ENABLE                           SYSCFG_PCIECR_PCIE_1_APP_LTSSM_ENABLE_Msk                                   /*!< After application has finished initializing the core configuration registers, it should assert app_ltssm_enable to allow the LTSSM to continue Link establishment. */
#define SYSCFG_PCIECR_PCIE_1_APP_REQ_RETRY_EN_Pos                       (3U)
#define SYSCFG_PCIECR_PCIE_1_APP_REQ_RETRY_EN_Msk                       (0x1U << SYSCFG_PCIECR_PCIE_1_APP_REQ_RETRY_EN_Pos)                         /*!< 0x00000008 */
#define SYSCFG_PCIECR_PCIE_1_APP_REQ_RETRY_EN                           SYSCFG_PCIECR_PCIE_1_APP_REQ_RETRY_EN_Msk                                   /*!< Provides a capability to defer incoming Configuration Requests until initialization is complete. Only for End Point. */
#define SYSCFG_PCIECR_PCIE_1_SYS_INT_Pos                                (4U)
#define SYSCFG_PCIECR_PCIE_1_SYS_INT_Msk                                (0x1U << SYSCFG_PCIECR_PCIE_1_SYS_INT_Pos)                                  /*!< 0x00000010 */
#define SYSCFG_PCIECR_PCIE_1_SYS_INT                                    SYSCFG_PCIECR_PCIE_1_SYS_INT_Msk                                            /*!< When pcie_sys_int goes from low to high, the core generates an Assert_INTx Message. */
#define SYSCFG_PCIECR_PCIE_1_DEBUG_BUS_SEL_Pos                          (5U)
#define SYSCFG_PCIECR_PCIE_1_DEBUG_BUS_SEL_Msk                          (0x3U << SYSCFG_PCIECR_PCIE_1_DEBUG_BUS_SEL_Pos)                            /*!< 0x00000060 */
#define SYSCFG_PCIECR_PCIE_1_DEBUG_BUS_SEL                              SYSCFG_PCIECR_PCIE_1_DEBUG_BUS_SEL_Msk                                      /*!< selection of PCIe observation points */
#define SYSCFG_PCIECR_PCIE_1_APP_CLK_REQ_N_Pos                          (7U)
#define SYSCFG_PCIECR_PCIE_1_APP_CLK_REQ_N_Msk                          (0x1U << SYSCFG_PCIECR_PCIE_1_APP_CLK_REQ_N_Pos)                            /*!< 0x00000080 */
#define SYSCFG_PCIECR_PCIE_1_APP_CLK_REQ_N                              SYSCFG_PCIECR_PCIE_1_APP_CLK_REQ_N_Msk                                      /*!< If the application does not want to remove the reference clock it should set this signal to 0. */
#define SYSCFG_PCIECR_PCIE_1_DEVICE_TYPE_Pos                            (8U)
#define SYSCFG_PCIECR_PCIE_1_DEVICE_TYPE_Msk                            (0xFU << SYSCFG_PCIECR_PCIE_1_DEVICE_TYPE_Pos)                              /*!< 0x00000F00 */
#define SYSCFG_PCIECR_PCIE_1_DEVICE_TYPE                                SYSCFG_PCIECR_PCIE_1_DEVICE_TYPE_Msk                                        /*!< Device/port type. Defined encodings are: */
#define SYSCFG_PCIECR_PCIE_1_APP_DEV_NUM_Pos                            (12U)
#define SYSCFG_PCIECR_PCIE_1_APP_DEV_NUM_Msk                            (0x1FU << SYSCFG_PCIECR_PCIE_1_APP_DEV_NUM_Pos)                             /*!< 0x0001F000 */
#define SYSCFG_PCIECR_PCIE_1_APP_DEV_NUM                                SYSCFG_PCIECR_PCIE_1_APP_DEV_NUM_Msk                                        /*!< The device number in the Requester ID for an RC port. */
#define SYSCFG_PCIECR_PCIE_1_APP_BUS_NUM_Pos                            (17U)
#define SYSCFG_PCIECR_PCIE_1_APP_BUS_NUM_Msk                            (0xFFU << SYSCFG_PCIECR_PCIE_1_APP_BUS_NUM_Pos)                             /*!< 0x01FE0000 */
#define SYSCFG_PCIECR_PCIE_1_APP_BUS_NUM                                SYSCFG_PCIECR_PCIE_1_APP_BUS_NUM_Msk                                        /*!< The bus number in the Requester ID for RC port. */
#define SYSCFG_PCIECR_PCIE_1_APP_DBI_RO_WR_DISABLE_Pos                  (25U)
#define SYSCFG_PCIECR_PCIE_1_APP_DBI_RO_WR_DISABLE_Msk                  (0x1U << SYSCFG_PCIECR_PCIE_1_APP_DBI_RO_WR_DISABLE_Pos)                    /*!< 0x02000000 */
#define SYSCFG_PCIECR_PCIE_1_APP_DBI_RO_WR_DISABLE                      SYSCFG_PCIECR_PCIE_1_APP_DBI_RO_WR_DISABLE_Msk                              /*!< DBI Read-only Write Disable */

/*************  Bit definition for SYSCFG_PCIEPMEMSICR register  **************/
#define SYSCFG_PCIEPMEMSICR_PCIE_1_RST_CFG_PME_MSI_INT_Pos              (0U)
#define SYSCFG_PCIEPMEMSICR_PCIE_1_RST_CFG_PME_MSI_INT_Msk              (0x1U << SYSCFG_PCIEPMEMSICR_PCIE_1_RST_CFG_PME_MSI_INT_Pos)                /*!< 0x00000001 */
#define SYSCFG_PCIEPMEMSICR_PCIE_1_RST_CFG_PME_MSI_INT                  SYSCFG_PCIEPMEMSICR_PCIE_1_RST_CFG_PME_MSI_INT_Msk                          /*!< Reset the pcie_cfg_pme_msi  interrupt logic */

/************  Bit definition for SYSCFG_PCIEAERRCMSICR register  *************/
#define SYSCFG_PCIEAERRCMSICR_PCIE_1_RST_CFG_AER_RC_ERR_MSI_INT_Pos     (0U)
#define SYSCFG_PCIEAERRCMSICR_PCIE_1_RST_CFG_AER_RC_ERR_MSI_INT_Msk     (0x1U << SYSCFG_PCIEAERRCMSICR_PCIE_1_RST_CFG_AER_RC_ERR_MSI_INT_Pos)       /*!< 0x00000001 */
#define SYSCFG_PCIEAERRCMSICR_PCIE_1_RST_CFG_AER_RC_ERR_MSI_INT         SYSCFG_PCIEAERRCMSICR_PCIE_1_RST_CFG_AER_RC_ERR_MSI_INT_Msk                 /*!< Reset the pcie_cfg_aer_rc_err_msi  interrupt logic */

/**************  Bit definition for SYSCFG_PCIESYSRCCR register  **************/
#define SYSCFG_PCIESYSRCCR_PCIE_1_RST_CFG_SYS_ERR_RC_INT_Pos            (0U)
#define SYSCFG_PCIESYSRCCR_PCIE_1_RST_CFG_SYS_ERR_RC_INT_Msk            (0x1U << SYSCFG_PCIESYSRCCR_PCIE_1_RST_CFG_SYS_ERR_RC_INT_Pos)              /*!< 0x00000001 */
#define SYSCFG_PCIESYSRCCR_PCIE_1_RST_CFG_SYS_ERR_RC_INT                SYSCFG_PCIESYSRCCR_PCIE_1_RST_CFG_SYS_ERR_RC_INT_Msk                        /*!< Reset the pcie_cfg_sys_err_rc  interrupt logic */

/***************  Bit definition for SYSCFG_PCIEPRGCR register  ***************/
#define SYSCFG_PCIEPRGCR_PCIE_PRG_IMP_CTRL_Pos                          (1U)
#define SYSCFG_PCIEPRGCR_PCIE_PRG_IMP_CTRL_Msk                          (0x1FU << SYSCFG_PCIEPRGCR_PCIE_PRG_IMP_CTRL_Pos)                           /*!< 0x0000003E */
#define SYSCFG_PCIEPRGCR_PCIE_PRG_IMP_CTRL                              SYSCFG_PCIEPRGCR_PCIE_PRG_IMP_CTRL_Msk                                      /*!< Control of the impedance of the 100 MHz differential output buffer */

/****************  Bit definition for SYSCFG_PCIESR1 register  ****************/
#define SYSCFG_PCIESR1_PCIE_1_PM_DSTATE_Pos                             (0U)
#define SYSCFG_PCIESR1_PCIE_1_PM_DSTATE_Msk                             (0x7U << SYSCFG_PCIESR1_PCIE_1_PM_DSTATE_Pos)                               /*!< 0x00000007 */
#define SYSCFG_PCIESR1_PCIE_1_PM_DSTATE                                 SYSCFG_PCIESR1_PCIE_1_PM_DSTATE_Msk                                         /*!< Power Management D-state. */
#define SYSCFG_PCIESR1_PCIE_1_SMLH_LINK_UP_Pos                          (3U)
#define SYSCFG_PCIESR1_PCIE_1_SMLH_LINK_UP_Msk                          (0x1U << SYSCFG_PCIESR1_PCIE_1_SMLH_LINK_UP_Pos)                            /*!< 0x00000008 */
#define SYSCFG_PCIESR1_PCIE_1_SMLH_LINK_UP                              SYSCFG_PCIESR1_PCIE_1_SMLH_LINK_UP_Msk                                      /*!< PHY link is up. Status for RC application. */
#define SYSCFG_PCIESR1_PCIE_1_CFG_HW_AUTO_SP_DIS_Pos                    (4U)
#define SYSCFG_PCIESR1_PCIE_1_CFG_HW_AUTO_SP_DIS_Msk                    (0x1U << SYSCFG_PCIESR1_PCIE_1_CFG_HW_AUTO_SP_DIS_Pos)                      /*!< 0x00000010 */
#define SYSCFG_PCIESR1_PCIE_1_CFG_HW_AUTO_SP_DIS                        SYSCFG_PCIESR1_PCIE_1_CFG_HW_AUTO_SP_DIS_Msk                                /*!< H/W autonomous speed disable. Used in downstream ports only. */
#define SYSCFG_PCIESR1_PCIE_1_RDLH_LINK_UP_Pos                          (5U)
#define SYSCFG_PCIESR1_PCIE_1_RDLH_LINK_UP_Msk                          (0x1U << SYSCFG_PCIESR1_PCIE_1_RDLH_LINK_UP_Pos)                            /*!< 0x00000020 */
#define SYSCFG_PCIESR1_PCIE_1_RDLH_LINK_UP                              SYSCFG_PCIESR1_PCIE_1_RDLH_LINK_UP_Msk                                      /*!< Data link layer is up. Status for RC application. */
#define SYSCFG_PCIESR1_PCIE_1_MSI_CTRL_INT_Pos                          (6U)
#define SYSCFG_PCIESR1_PCIE_1_MSI_CTRL_INT_Msk                          (0x1U << SYSCFG_PCIESR1_PCIE_1_MSI_CTRL_INT_Pos)                            /*!< 0x00000040 */
#define SYSCFG_PCIESR1_PCIE_1_MSI_CTRL_INT                              SYSCFG_PCIESR1_PCIE_1_MSI_CTRL_INT_Msk                                      /*!< pcie_1_msi_ctrl_int interrupt */
#define SYSCFG_PCIESR1_PCIE_1_LINK_RST_INT_Pos                          (7U)
#define SYSCFG_PCIESR1_PCIE_1_LINK_RST_INT_Msk                          (0x1U << SYSCFG_PCIESR1_PCIE_1_LINK_RST_INT_Pos)                            /*!< 0x00000080 */
#define SYSCFG_PCIESR1_PCIE_1_LINK_RST_INT                              SYSCFG_PCIESR1_PCIE_1_LINK_RST_INT_Msk                                      /*!< pcie_1_link_rst_int interrupt */
#define SYSCFG_PCIESR1_PCIE_1_INTD_INTERRUPT_Pos                        (8U)
#define SYSCFG_PCIESR1_PCIE_1_INTD_INTERRUPT_Msk                        (0x1U << SYSCFG_PCIESR1_PCIE_1_INTD_INTERRUPT_Pos)                          /*!< 0x00000100 */
#define SYSCFG_PCIESR1_PCIE_1_INTD_INTERRUPT                            SYSCFG_PCIESR1_PCIE_1_INTD_INTERRUPT_Msk                                    /*!< pcie_1_intd interrupt */
#define SYSCFG_PCIESR1_PCIE_1_INTC_INTERRUPT_Pos                        (9U)
#define SYSCFG_PCIESR1_PCIE_1_INTC_INTERRUPT_Msk                        (0x1U << SYSCFG_PCIESR1_PCIE_1_INTC_INTERRUPT_Pos)                          /*!< 0x00000200 */
#define SYSCFG_PCIESR1_PCIE_1_INTC_INTERRUPT                            SYSCFG_PCIESR1_PCIE_1_INTC_INTERRUPT_Msk                                    /*!< pcie_1_intc interrupt */
#define SYSCFG_PCIESR1_PCIE_1_INTB_INTERRUPT_Pos                        (10U)
#define SYSCFG_PCIESR1_PCIE_1_INTB_INTERRUPT_Msk                        (0x1U << SYSCFG_PCIESR1_PCIE_1_INTB_INTERRUPT_Pos)                          /*!< 0x00000400 */
#define SYSCFG_PCIESR1_PCIE_1_INTB_INTERRUPT                            SYSCFG_PCIESR1_PCIE_1_INTB_INTERRUPT_Msk                                    /*!< pcie_1_intb interrupt */
#define SYSCFG_PCIESR1_PCIE_1_INTA_INTERRUPT_Pos                        (11U)
#define SYSCFG_PCIESR1_PCIE_1_INTA_INTERRUPT_Msk                        (0x1U << SYSCFG_PCIESR1_PCIE_1_INTA_INTERRUPT_Pos)                          /*!< 0x00000800 */
#define SYSCFG_PCIESR1_PCIE_1_INTA_INTERRUPT                            SYSCFG_PCIESR1_PCIE_1_INTA_INTERRUPT_Msk                                    /*!< pcie_1_inta interrupt */
#define SYSCFG_PCIESR1_PCIE_1_CFG_PME_INT_Pos                           (12U)
#define SYSCFG_PCIESR1_PCIE_1_CFG_PME_INT_Msk                           (0x1U << SYSCFG_PCIESR1_PCIE_1_CFG_PME_INT_Pos)                             /*!< 0x00001000 */
#define SYSCFG_PCIESR1_PCIE_1_CFG_PME_INT                               SYSCFG_PCIESR1_PCIE_1_CFG_PME_INT_Msk                                       /*!< pcie_1_cfg_pme interrupt */
#define SYSCFG_PCIESR1_PCIE_1_CFG_AER_RC_ERR_INT_Pos                    (13U)
#define SYSCFG_PCIESR1_PCIE_1_CFG_AER_RC_ERR_INT_Msk                    (0x1U << SYSCFG_PCIESR1_PCIE_1_CFG_AER_RC_ERR_INT_Pos)                      /*!< 0x00002000 */
#define SYSCFG_PCIESR1_PCIE_1_CFG_AER_RC_ERR_INT                        SYSCFG_PCIESR1_PCIE_1_CFG_AER_RC_ERR_INT_Msk                                /*!< pcie_1_cfg_aer_rc_err interrupt */
#define SYSCFG_PCIESR1_PCIE_1_RADM_Q_NOT_EMPTY_Pos                      (14U)
#define SYSCFG_PCIESR1_PCIE_1_RADM_Q_NOT_EMPTY_Msk                      (0x1U << SYSCFG_PCIESR1_PCIE_1_RADM_Q_NOT_EMPTY_Pos)                        /*!< 0x00004000 */
#define SYSCFG_PCIESR1_PCIE_1_RADM_Q_NOT_EMPTY                          SYSCFG_PCIESR1_PCIE_1_RADM_Q_NOT_EMPTY_Msk                                  /*!< Level HIGH indicates that the receive queues contain TLP header/data. */
#define SYSCFG_PCIESR1_PCIE_1_RADM_QOVERFLOW_Pos                        (15U)
#define SYSCFG_PCIESR1_PCIE_1_RADM_QOVERFLOW_Msk                        (0x1U << SYSCFG_PCIESR1_PCIE_1_RADM_QOVERFLOW_Pos)                          /*!< 0x00008000 */
#define SYSCFG_PCIESR1_PCIE_1_RADM_QOVERFLOW                            SYSCFG_PCIESR1_PCIE_1_RADM_QOVERFLOW_Msk                                    /*!< Pulse indicating that one or more of the P/NP/CPL receive queues has overflowed. */

/****************  Bit definition for SYSCFG_PCIESR2 register  ****************/
#define SYSCFG_PCIESR2_PCIE_1_CFG_PME_MSI_INT_STS_Pos                   (0U)
#define SYSCFG_PCIESR2_PCIE_1_CFG_PME_MSI_INT_STS_Msk                   (0x1U << SYSCFG_PCIESR2_PCIE_1_CFG_PME_MSI_INT_STS_Pos)                     /*!< 0x00000001 */
#define SYSCFG_PCIESR2_PCIE_1_CFG_PME_MSI_INT_STS                       SYSCFG_PCIESR2_PCIE_1_CFG_PME_MSI_INT_STS_Msk                               /*!< Indicates status of PCIe cfg_pme_msi interrupt */
#define SYSCFG_PCIESR2_PCIE_1_CFG_AER_RC_ERR_MSI_INT_STS_Pos            (1U)
#define SYSCFG_PCIESR2_PCIE_1_CFG_AER_RC_ERR_MSI_INT_STS_Msk            (0x1U << SYSCFG_PCIESR2_PCIE_1_CFG_AER_RC_ERR_MSI_INT_STS_Pos)              /*!< 0x00000002 */
#define SYSCFG_PCIESR2_PCIE_1_CFG_AER_RC_ERR_MSI_INT_STS                SYSCFG_PCIESR2_PCIE_1_CFG_AER_RC_ERR_MSI_INT_STS_Msk                        /*!< Indicates status of PCIe cfg_aer_rc_err_msi interrupt */
#define SYSCFG_PCIESR2_PCIE_1_CFG_SYS_ERR_RC_INT_STS_Pos                (2U)
#define SYSCFG_PCIESR2_PCIE_1_CFG_SYS_ERR_RC_INT_STS_Msk                (0x1U << SYSCFG_PCIESR2_PCIE_1_CFG_SYS_ERR_RC_INT_STS_Pos)                  /*!< 0x00000004 */
#define SYSCFG_PCIESR2_PCIE_1_CFG_SYS_ERR_RC_INT_STS                    SYSCFG_PCIESR2_PCIE_1_CFG_SYS_ERR_RC_INT_STS_Msk                            /*!< Indicates status of PCIe cfg_sys_err_rc interrupt */

/*****************  Bit definition for SYSCFG_VERR register  ******************/
#define SYSCFG_VERR_MINREV_Pos                                          (0U)
#define SYSCFG_VERR_MINREV_Msk                                          (0xFU << SYSCFG_VERR_MINREV_Pos)                                            /*!< 0x0000000F */
#define SYSCFG_VERR_MINREV                                              SYSCFG_VERR_MINREV_Msk                                                      /*!< Minor revision */
#define SYSCFG_VERR_MAJREV_Pos                                          (4U)
#define SYSCFG_VERR_MAJREV_Msk                                          (0xFU << SYSCFG_VERR_MAJREV_Pos)                                            /*!< 0x000000F0 */
#define SYSCFG_VERR_MAJREV                                              SYSCFG_VERR_MAJREV_Msk                                                      /*!< Major revision */

/*****************  Bit definition for SYSCFG_IPIDR register  *****************/
#define SYSCFG_IPIDR_ID_Pos                                             (0U)
#define SYSCFG_IPIDR_ID_Msk                                             (0xFFFFFFFFU << SYSCFG_IPIDR_ID_Pos)                                        /*!< 0xFFFFFFFF */
#define SYSCFG_IPIDR_ID                                                 SYSCFG_IPIDR_ID_Msk                                                         /*!< SYSCFG identifier */

/*****************  Bit definition for SYSCFG_SIDR register  ******************/
#define SYSCFG_SIDR_SID_Pos                                             (0U)
#define SYSCFG_SIDR_SID_Msk                                             (0xFFFFFFFFU << SYSCFG_SIDR_SID_Pos)                                        /*!< 0xFFFFFFFF */
#define SYSCFG_SIDR_SID                                                 SYSCFG_SIDR_SID_Msk                                                          /*!< Size identification */

/******************************************************************************/
/*                                                                            */
/*                     Tamper and backup register (TAMP)                      */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for TAMP_CR1 register  *****************/
#define TAMP_CR1_TAMP1E_Pos          (0U)
#define TAMP_CR1_TAMP1E_Msk          (0x1U << TAMP_CR1_TAMP1E_Pos)                      /*!< 0x00000001 */
#define TAMP_CR1_TAMP1E              TAMP_CR1_TAMP1E_Msk
#define TAMP_CR1_TAMP2E_Pos          (1U)
#define TAMP_CR1_TAMP2E_Msk          (0x1U << TAMP_CR1_TAMP2E_Pos)                      /*!< 0x00000002 */
#define TAMP_CR1_TAMP2E              TAMP_CR1_TAMP2E_Msk
#define TAMP_CR1_TAMP3E_Pos          (2U)
#define TAMP_CR1_TAMP3E_Msk          (0x1U << TAMP_CR1_TAMP3E_Pos)                      /*!< 0x00000004 */
#define TAMP_CR1_TAMP3E              TAMP_CR1_TAMP3E_Msk
#define TAMP_CR1_TAMP4E_Pos          (3U)
#define TAMP_CR1_TAMP4E_Msk          (0x1U << TAMP_CR1_TAMP4E_Pos)                      /*!< 0x00000008 */
#define TAMP_CR1_TAMP4E              TAMP_CR1_TAMP4E_Msk
#define TAMP_CR1_TAMP5E_Pos          (4U)
#define TAMP_CR1_TAMP5E_Msk          (0x1U << TAMP_CR1_TAMP5E_Pos)                      /*!< 0x00000010 */
#define TAMP_CR1_TAMP5E              TAMP_CR1_TAMP5E_Msk
#define TAMP_CR1_TAMP6E_Pos          (5U)
#define TAMP_CR1_TAMP6E_Msk          (0x1U << TAMP_CR1_TAMP6E_Pos)                      /*!< 0x00000020 */
#define TAMP_CR1_TAMP6E              TAMP_CR1_TAMP6E_Msk
#define TAMP_CR1_TAMP7E_Pos          (6U)
#define TAMP_CR1_TAMP7E_Msk          (0x1U << TAMP_CR1_TAMP7E_Pos)                      /*!< 0x00000040 */
#define TAMP_CR1_TAMP7E              TAMP_CR1_TAMP7E_Msk
#define TAMP_CR1_TAMP8E_Pos          (7U)
#define TAMP_CR1_TAMP8E_Msk          (0x1U << TAMP_CR1_TAMP8E_Pos)                      /*!< 0x00000080 */
#define TAMP_CR1_TAMP8E              TAMP_CR1_TAMP8E_Msk
#define TAMP_CR1_ITAMP1E_Pos         (16U)
#define TAMP_CR1_ITAMP1E_Msk         (0x1U << TAMP_CR1_ITAMP1E_Pos)                     /*!< 0x00010000 */
#define TAMP_CR1_ITAMP1E             TAMP_CR1_ITAMP1E_Msk
#define TAMP_CR1_ITAMP2E_Pos         (17U)
#define TAMP_CR1_ITAMP2E_Msk         (0x1U << TAMP_CR1_ITAMP2E_Pos)                     /*!< 0x00040000 */
#define TAMP_CR1_ITAMP2E             TAMP_CR1_ITAMP2E_Msk
#define TAMP_CR1_ITAMP3E_Pos         (18U)
#define TAMP_CR1_ITAMP3E_Msk         (0x1U << TAMP_CR1_ITAMP3E_Pos)                     /*!< 0x00040000 */
#define TAMP_CR1_ITAMP3E             TAMP_CR1_ITAMP3E_Msk
#define TAMP_CR1_ITAMP5E_Pos         (20U)
#define TAMP_CR1_ITAMP5E_Msk         (0x1U << TAMP_CR1_ITAMP5E_Pos)                     /*!< 0x00100000 */
#define TAMP_CR1_ITAMP5E             TAMP_CR1_ITAMP5E_Msk
#define TAMP_CR1_ITAMP6E_Pos         (21U)
#define TAMP_CR1_ITAMP6E_Msk         (0x1U << TAMP_CR1_ITAMP6E_Pos)                     /*!< 0x00200000 */
#define TAMP_CR1_ITAMP6E             TAMP_CR1_ITAMP6E_Msk
#define TAMP_CR1_ITAMP7E_Pos         (22U)
#define TAMP_CR1_ITAMP7E_Msk         (0x1U << TAMP_CR1_ITAMP7E_Pos)                     /*!< 0x00400000 */
#define TAMP_CR1_ITAMP7E             TAMP_CR1_ITAMP7E_Msk
#define TAMP_CR1_ITAMP8E_Pos         (23U)
#define TAMP_CR1_ITAMP8E_Msk         (0x1U << TAMP_CR1_ITAMP8E_Pos)                     /*!< 0x00800000 */
#define TAMP_CR1_ITAMP8E             TAMP_CR1_ITAMP8E_Msk
#define TAMP_CR1_ITAMP9E_Pos         (24U)
#define TAMP_CR1_ITAMP9E_Msk         (0x1U << TAMP_CR1_ITAMP9E_Pos)                     /*!< 0x01000000 */
#define TAMP_CR1_ITAMP9E             TAMP_CR1_ITAMP9E_Msk
#define TAMP_CR1_ITAMP10E_Pos        (25U)
#define TAMP_CR1_ITAMP10E_Msk        (0x1U << TAMP_CR1_ITAMP10E_Pos)                    /*!< 0x02000000 */
#define TAMP_CR1_ITAMP10E            TAMP_CR1_ITAMP10E_Msk

/********************  Bits definition for TAMP_CR2 register  *****************/
#define TAMP_CR2_TAMP1NOER_Pos       (0U)
#define TAMP_CR2_TAMP1NOER_Msk       (0x1U << TAMP_CR2_TAMP1NOER_Pos)                   /*!< 0x00000001 */
#define TAMP_CR2_TAMP1NOER           TAMP_CR2_TAMP1NOER_Msk
#define TAMP_CR2_TAMP2NOER_Pos       (1U)
#define TAMP_CR2_TAMP2NOER_Msk       (0x1U << TAMP_CR2_TAMP2NOER_Pos)                   /*!< 0x00000002 */
#define TAMP_CR2_TAMP2NOER           TAMP_CR2_TAMP2NOER_Msk
#define TAMP_CR2_TAMP3NOER_Pos       (2U)
#define TAMP_CR2_TAMP3NOER_Msk       (0x1U << TAMP_CR2_TAMP3NOER_Pos)                   /*!< 0x00000004 */
#define TAMP_CR2_TAMP3NOER           TAMP_CR2_TAMP3NOER_Msk
#define TAMP_CR2_TAMP4NOER_Pos       (3U)
#define TAMP_CR2_TAMP4NOER_Msk       (0x1U << TAMP_CR2_TAMP4NOER_Pos)                   /*!< 0x00000008 */
#define TAMP_CR2_TAMP4NOER           TAMP_CR2_TAMP4NOER_Msk
#define TAMP_CR2_TAMP5NOER_Pos       (4U)
#define TAMP_CR2_TAMP5NOER_Msk       (0x1U << TAMP_CR2_TAMP5NOER_Pos)                   /*!< 0x00000010 */
#define TAMP_CR2_TAMP5NOER           TAMP_CR2_TAMP5NOER_Msk
#define TAMP_CR2_TAMP6NOER_Pos       (5U)
#define TAMP_CR2_TAMP6NOER_Msk       (0x1U << TAMP_CR2_TAMP6NOER_Pos)                   /*!< 0x00000020 */
#define TAMP_CR2_TAMP6NOER           TAMP_CR2_TAMP6NOER_Msk
#define TAMP_CR2_TAMP7NOER_Pos       (6U)
#define TAMP_CR2_TAMP7NOER_Msk       (0x1U << TAMP_CR2_TAMP7NOER_Pos)                   /*!< 0x00000040 */
#define TAMP_CR2_TAMP7NOER           TAMP_CR2_TAMP7NOER_Msk
#define TAMP_CR2_TAMP8NOER_Pos       (7U)
#define TAMP_CR2_TAMP8NOER_Msk       (0x1U << TAMP_CR2_TAMP8NOER_Pos)                   /*!< 0x00000080 */
#define TAMP_CR2_TAMP8NOER           TAMP_CR2_TAMP8NOER_Msk
#define TAMP_CR2_TAMP1MSK_Pos        (16U)
#define TAMP_CR2_TAMP1MSK_Msk        (0x1U << TAMP_CR2_TAMP1MSK_Pos)                    /*!< 0x00010000 */
#define TAMP_CR2_TAMP1MSK            TAMP_CR2_TAMP1MSK_Msk
#define TAMP_CR2_TAMP2MSK_Pos        (17U)
#define TAMP_CR2_TAMP2MSK_Msk        (0x1U << TAMP_CR2_TAMP2MSK_Pos)                    /*!< 0x00020000 */
#define TAMP_CR2_TAMP2MSK            TAMP_CR2_TAMP2MSK_Msk
#define TAMP_CR2_TAMP3MSK_Pos        (18U)
#define TAMP_CR2_TAMP3MSK_Msk        (0x1U << TAMP_CR2_TAMP3MSK_Pos)                    /*!< 0x00040000 */
#define TAMP_CR2_TAMP3MSK            TAMP_CR2_TAMP3MSK_Msk
#define TAMP_CR2_BKERASE_Pos         (23U)
#define TAMP_CR2_BKERASE_Msk         (0x1U << TAMP_CR2_BKERASE_Pos)                     /*!< 0x00800000 */
#define TAMP_CR2_BKERASE             TAMP_CR2_BKERASE_Msk
#define TAMP_CR2_TAMP1TRG_Pos        (24U)
#define TAMP_CR2_TAMP1TRG_Msk        (0x1U << TAMP_CR2_TAMP1TRG_Pos)                    /*!< 0x01000000 */
#define TAMP_CR2_TAMP1TRG            TAMP_CR2_TAMP1TRG_Msk
#define TAMP_CR2_TAMP2TRG_Pos        (25U)
#define TAMP_CR2_TAMP2TRG_Msk        (0x1U << TAMP_CR2_TAMP2TRG_Pos)                    /*!< 0x02000000 */
#define TAMP_CR2_TAMP2TRG            TAMP_CR2_TAMP2TRG_Msk
#define TAMP_CR2_TAMP3TRG_Pos        (26U)
#define TAMP_CR2_TAMP3TRG_Msk        (0x1U << TAMP_CR2_TAMP3TRG_Pos)                    /*!< 0x04000000 */
#define TAMP_CR2_TAMP3TRG            TAMP_CR2_TAMP3TRG_Msk
#define TAMP_CR2_TAMP4TRG_Pos        (27U)
#define TAMP_CR2_TAMP4TRG_Msk        (0x1U << TAMP_CR2_TAMP4TRG_Pos)                    /*!< 0x08000000 */
#define TAMP_CR2_TAMP4TRG            TAMP_CR2_TAMP4TRG_Msk
#define TAMP_CR2_TAMP5TRG_Pos        (28U)
#define TAMP_CR2_TAMP5TRG_Msk        (0x1U << TAMP_CR2_TAMP5TRG_Pos)                    /*!< 0x10000000 */
#define TAMP_CR2_TAMP5TRG            TAMP_CR2_TAMP5TRG_Msk
#define TAMP_CR2_TAMP6TRG_Pos        (29U)
#define TAMP_CR2_TAMP6TRG_Msk        (0x1U << TAMP_CR2_TAMP6TRG_Pos)                    /*!< 0x20000000 */
#define TAMP_CR2_TAMP6TRG            TAMP_CR2_TAMP6TRG_Msk
#define TAMP_CR2_TAMP7TRG_Pos        (30U)
#define TAMP_CR2_TAMP7TRG_Msk        (0x1U << TAMP_CR2_TAMP7TRG_Pos)                    /*!< 0x40000000 */
#define TAMP_CR2_TAMP7TRG            TAMP_CR2_TAMP7TRG_Msk
#define TAMP_CR2_TAMP8TRG_Pos        (31U)
#define TAMP_CR2_TAMP8TRG_Msk        (0x1U << TAMP_CR2_TAMP8TRG_Pos)                    /*!< 0x80000000 */
#define TAMP_CR2_TAMP8TRG            TAMP_CR2_TAMP8TRG_Msk

/********************  Bits definition for TAMP_CR3 register  *****************/
#define TAMP_CR3_ITAMP1NOER_Pos      (0U)
#define TAMP_CR3_ITAMP1NOER_Msk      (0x1U << TAMP_CR3_ITAMP1NOER_Pos)                  /*!< 0x00000001 */
#define TAMP_CR3_ITAMP1NOER          TAMP_CR3_ITAMP1NOER_Msk
#define TAMP_CR3_ITAMP2NOER_Pos      (1U)
#define TAMP_CR3_ITAMP2NOER_Msk      (0x1U << TAMP_CR3_ITAMP2NOER_Pos)                  /*!< 0x00000002 */
#define TAMP_CR3_ITAMP2NOER          TAMP_CR3_ITAMP2NOER_Msk
#define TAMP_CR3_ITAMP3NOER_Pos      (2U)
#define TAMP_CR3_ITAMP3NOER_Msk      (0x1U << TAMP_CR3_ITAMP3NOER_Pos)                  /*!< 0x00000004 */
#define TAMP_CR3_ITAMP3NOER          TAMP_CR3_ITAMP3NOER_Msk
#define TAMP_CR3_ITAMP5NOER_Pos      (4U)
#define TAMP_CR3_ITAMP5NOER_Msk      (0x1U << TAMP_CR3_ITAMP5NOER_Pos)                  /*!< 0x00000010 */
#define TAMP_CR3_ITAMP5NOER          TAMP_CR3_ITAMP5NOER_Msk
#define TAMP_CR3_ITAMP6NOER_Pos      (5U)
#define TAMP_CR3_ITAMP6NOER_Msk      (0x1U << TAMP_CR3_ITAMP6NOER_Pos)                  /*!< 0x00000020 */
#define TAMP_CR3_ITAMP6NOER          TAMP_CR3_ITAMP6NOER_Msk
#define TAMP_CR3_ITAMP7NOER_Pos      (6U)
#define TAMP_CR3_ITAMP7NOER_Msk      (0x1U << TAMP_CR3_ITAMP7NOER)
#define TAMP_CR3_ITAMP7NOER          TAMP_CR3_ITAMP7NOER_Msk
#define TAMP_CR3_ITAMP8NOER_Pos      (7U)
#define TAMP_CR3_ITAMP8NOER_Msk      (0x1U << TAMP_CR3_ITAMP8NOER_Pos)                  /*!< 0x00000040 */
#define TAMP_CR3_ITAMP8NOER          TAMP_CR3_ITAMP8NOER_Msk
#define TAMP_CR3_ITAMP9NOER_Pos      (8U)
#define TAMP_CR3_ITAMP9NOER_Msk      (0x1U << TAMP_CR3_ITAMP9NOER_Pos)                  /*!< 0x00000100 */
#define TAMP_CR3_ITAMP9NOER          TAMP_CR3_ITAMP9NOER_Msk
#define TAMP_CR3_ITAMP10NOER_Pos     (9U)
#define TAMP_CR3_ITAMP10NOER_Msk     (0x1U << TAMP_CR3_ITAMP10NOER_Pos)                 /*!< 0x00000200 */
#define TAMP_CR3_ITAMP10NOER         TAMP_CR3_ITAMP10NOER_Msk

/********************  Bits definition for TAMP_FLTCR register  ***************/
#define TAMP_FLTCR_TAMPFREQ_Pos      (0U)
#define TAMP_FLTCR_TAMPFREQ_Msk      (0x7U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000007 */
#define TAMP_FLTCR_TAMPFREQ          TAMP_FLTCR_TAMPFREQ_Msk
#define TAMP_FLTCR_TAMPFREQ_0        (0x1U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000001 */
#define TAMP_FLTCR_TAMPFREQ_1        (0x2U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000002 */
#define TAMP_FLTCR_TAMPFREQ_2        (0x4U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000004 */
#define TAMP_FLTCR_TAMPFLT_Pos       (3U)
#define TAMP_FLTCR_TAMPFLT_Msk       (0x3U << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000018 */
#define TAMP_FLTCR_TAMPFLT           TAMP_FLTCR_TAMPFLT_Msk
#define TAMP_FLTCR_TAMPFLT_0         (0x1U << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000008 */
#define TAMP_FLTCR_TAMPFLT_1         (0x2U << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000010 */
#define TAMP_FLTCR_TAMPPRCH_Pos      (5U)
#define TAMP_FLTCR_TAMPPRCH_Msk      (0x3U << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000060 */
#define TAMP_FLTCR_TAMPPRCH          TAMP_FLTCR_TAMPPRCH_Msk
#define TAMP_FLTCR_TAMPPRCH_0        (0x1U << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000020 */
#define TAMP_FLTCR_TAMPPRCH_1        (0x2U << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000040 */
#define TAMP_FLTCR_TAMPPUDIS_Pos     (7U)
#define TAMP_FLTCR_TAMPPUDIS_Msk     (0x1U << TAMP_FLTCR_TAMPPUDIS_Pos)                 /*!< 0x00000080 */
#define TAMP_FLTCR_TAMPPUDIS         TAMP_FLTCR_TAMPPUDIS_Msk

/********************  Bits definition for TAMP_ATCR1 register  ***************/
#define TAMP_ATCR1_TAMP1AM_Pos       (0U)
#define TAMP_ATCR1_TAMP1AM_Msk       (0x1U<<TAMP_ATCR1_TAMP1AM_Pos)                     /*!< 0x00000001 */
#define TAMP_ATCR1_TAMP1AM           TAMP_ATCR1_TAMP1AM_Msk
#define TAMP_ATCR1_TAMP2AM_Pos       (1U)
#define TAMP_ATCR1_TAMP2AM_Msk       (0x1U<<TAMP_ATCR1_TAMP2AM_Pos)                     /*!< 0x00000002 */
#define TAMP_ATCR1_TAMP2AM           TAMP_ATCR1_TAMP2AM_Msk
#define TAMP_ATCR1_TAMP3AM_Pos       (2U)
#define TAMP_ATCR1_TAMP3AM_Msk       (0x1U<<TAMP_ATCR1_TAMP3AM_Pos)                     /*!< 0x00000004 */
#define TAMP_ATCR1_TAMP3AM           TAMP_ATCR1_TAMP3AM_Msk
#define TAMP_ATCR1_TAMP4AM_Pos       (3U)
#define TAMP_ATCR1_TAMP4AM_Msk       (0x1U<<TAMP_ATCR1_TAMP4AM_Pos)                     /*!< 0x00000008 */
#define TAMP_ATCR1_TAMP4AM           TAMP_ATCR1_TAMP4AM_Msk
#define TAMP_ATCR1_TAMP5AM_Pos       (4U)
#define TAMP_ATCR1_TAMP5AM_Msk       (0x1U<<TAMP_ATCR1_TAMP5AM_Pos)                     /*!< 0x00000010 */
#define TAMP_ATCR1_TAMP5AM           TAMP_ATCR1_TAMP5AM_Msk
#define TAMP_ATCR1_TAMP6AM_Pos       (5U)
#define TAMP_ATCR1_TAMP6AM_Msk       (0x1U<<TAMP_ATCR1_TAMP6AM_Pos)                     /*!< 0x00000010 */
#define TAMP_ATCR1_TAMP6AM           TAMP_ATCR1_TAMP6AM_Msk
#define TAMP_ATCR1_TAMP7AM_Pos       (6U)
#define TAMP_ATCR1_TAMP7AM_Msk       (0x1U<<TAMP_ATCR1_TAMP7AM_Pos)                     /*!< 0x00000040 */
#define TAMP_ATCR1_TAMP7AM           TAMP_ATCR1_TAMP7AM_Msk
#define TAMP_ATCR1_TAMP8AM_Pos       (7U)
#define TAMP_ATCR1_TAMP8AM_Msk       (0x1U<<TAMP_ATCR1_TAMP8AM_Pos)                     /*!< 0x00000080 */
#define TAMP_ATCR1_TAMP8AM           TAMP_ATCR1_TAMP8AM_Msk
#define TAMP_ATCR1_ATOSEL1_Pos       (8U)
#define TAMP_ATCR1_ATOSEL1_Msk       (0x3U<<TAMP_ATCR1_ATOSEL1_Pos)                     /*!< 0x00000300 */
#define TAMP_ATCR1_ATOSEL1            TAMP_ATCR1_ATOSEL1_Msk
#define TAMP_ATCR1_ATOSEL1_0         (0x1U << TAMP_ATCR1_ATOSEL1_Pos)                   /*!< 0x00000100 */
#define TAMP_ATCR1_ATOSEL1_1         (0x2U << TAMP_ATCR1_ATOSEL1_Pos)                   /*!< 0x00000200 */
#define TAMP_ATCR1_ATOSEL2_Pos       (10U)
#define TAMP_ATCR1_ATOSEL2_Msk       (0x3U<<TAMP_ATCR1_ATOSEL2_Pos)                     /*!< 0x00000C00 */
#define TAMP_ATCR1_ATOSEL2            TAMP_ATCR1_ATOSEL2_Msk
#define TAMP_ATCR1_ATOSEL2_0         (0x1U << TAMP_ATCR1_ATOSEL2_Pos)                   /*!< 0x00000400 */
#define TAMP_ATCR1_ATOSEL2_1         (0x2U << TAMP_ATCR1_ATOSEL2_Pos)                   /*!< 0x00000800 */
#define TAMP_ATCR1_ATOSEL3_Pos       (12U)
#define TAMP_ATCR1_ATOSEL3_Msk       (0x3U<<TAMP_ATCR1_ATOSEL3_Pos)                     /*!< 0x00003000 */
#define TAMP_ATCR1_ATOSEL3            TAMP_ATCR1_ATOSEL3_Msk
#define TAMP_ATCR1_ATOSEL3_0         (0x1U << TAMP_ATCR1_ATOSEL3_Pos)                   /*!< 0x00001000 */
#define TAMP_ATCR1_ATOSEL3_1         (0x2U << TAMP_ATCR1_ATOSEL3_Pos)                   /*!< 0x00002000 */
#define TAMP_ATCR1_ATOSEL4_Pos       (14U)
#define TAMP_ATCR1_ATOSEL4_Msk       (0x3U<<TAMP_ATCR1_ATOSEL4_Pos)                     /*!< 0x0000C000 */
#define TAMP_ATCR1_ATOSEL4            TAMP_ATCR1_ATOSEL4_Msk
#define TAMP_ATCR1_ATOSEL4_0         (0x1U << TAMP_ATCR1_ATOSEL4_Pos)                   /*!< 0x00004000 */
#define TAMP_ATCR1_ATOSEL4_1         (0x2U << TAMP_ATCR1_ATOSEL4_Pos)                   /*!< 0x00008000 */
#define TAMP_ATCR1_ATCKSEL_Pos       (16U)
#define TAMP_ATCR1_ATCKSEL_Msk       (0x7U<<TAMP_ATCR1_ATCKSEL_Pos)                     /*!< 0x00070000 */
#define TAMP_ATCR1_ATCKSEL            TAMP_ATCR1_ATCKSEL_Msk
#define TAMP_ATCR1_ATCKSEL_0         (0x1U << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00010000 */
#define TAMP_ATCR1_ATCKSEL_1         (0x2U << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00020000 */
#define TAMP_ATCR1_ATCKSEL_2         (0x4U << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00040000 */
#define TAMP_ATCR1_ATPER_Pos         (24U)
#define TAMP_ATCR1_ATPER_Msk         (0x7U<<TAMP_ATCR1_ATPER_Pos)                       /*!< 0x07000000 */
#define TAMP_ATCR1_ATPER              TAMP_ATCR1_ATPER_Msk
#define TAMP_ATCR1_ATPER_0           (0x1U << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x01000000 */
#define TAMP_ATCR1_ATPER_1           (0x2U << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x02000000 */
#define TAMP_ATCR1_ATPER_2           (0x4U << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x04000000 */
#define TAMP_ATCR1_ATOSHARE_Pos      (30U)
#define TAMP_ATCR1_ATOSHARE_Msk      (0x1U<<TAMP_ATCR1_ATOSHARE_Pos)                    /*!< 0x40000000 */
#define TAMP_ATCR1_ATOSHARE          TAMP_ATCR1_ATOSHARE_Msk
#define TAMP_ATCR1_FLTEN_Pos         (31U)
#define TAMP_ATCR1_FLTEN_Msk         (0x1U<<TAMP_ATCR1_FLTEN_Pos)                       /*!< 0x80000000 */
#define TAMP_ATCR1_FLTEN             TAMP_ATCR1_FLTEN_Msk

/********************  Bits definition for TAMP_ATSEEDR register  ******************/
#define TAMP_ATSEEDR_SEED_Pos        (0U)
#define TAMP_ATSEEDR_SEED_Msk        (0xFFFFFFFFU << TAMP_ATSEEDR_SEED_Pos)             /*!< 0xFFFFFFFF */
#define TAMP_ATSEEDR_SEED            TAMP_ATSEEDR_SEED_Msk

/********************  Bits definition for TAMP_ATOR register  ******************/
#define TAMP_ATOR_PRNG_Pos           (0U)
#define TAMP_ATOR_PRNG_Msk           (0xFF << TAMP_ATOR_PRNG_Pos)                      /*!< 0x000000FF */
#define TAMP_ATOR_PRNG               TAMP_ATOR_PRNG_Msk
#define TAMP_ATOR_PRNG_0             (0x1U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000001 */
#define TAMP_ATOR_PRNG_1             (0x2U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000002 */
#define TAMP_ATOR_PRNG_2             (0x4U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000004 */
#define TAMP_ATOR_PRNG_3             (0x8U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000008 */
#define TAMP_ATOR_PRNG_4             (0x10U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000010 */
#define TAMP_ATOR_PRNG_5             (0x20U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000020 */
#define TAMP_ATOR_PRNG_6             (0x40U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000040 */
#define TAMP_ATOR_PRNG_7             (0x80U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000080 */
#define TAMP_ATOR_SEEDF_Pos          (14U)
#define TAMP_ATOR_SEEDF_Msk          (1U << TAMP_ATOR_SEEDF_Pos)                       /*!< 0x00004000 */
#define TAMP_ATOR_SEEDF              TAMP_ATOR_SEEDF_Msk
#define TAMP_ATOR_INITS_Pos          (15U)
#define TAMP_ATOR_INITS_Msk          (1U << TAMP_ATOR_INITS_Pos)                       /*!< 0x00008000 */
#define TAMP_ATOR_INITS              TAMP_ATOR_INITS_Msk

/********************  Bits definition for TAMP_ATCR2 register  ***************/
#define TAMP_ATCR2_ATOSEL1_Pos       (8U)
#define TAMP_ATCR2_ATOSEL1_Msk       (0x7U<<TAMP_ATCR2_ATOSEL1_Pos)                    /*!< 0x00000700 */
#define TAMP_ATCR2_ATOSEL1            TAMP_ATCR2_ATOSEL1_Msk
#define TAMP_ATCR2_ATOSEL1_0         (0x1U << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000100 */
#define TAMP_ATCR2_ATOSEL1_1         (0x2U << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000200 */
#define TAMP_ATCR2_ATOSEL1_2         (0x4U << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000400 */
#define TAMP_ATCR2_ATOSEL2_Pos       (11U)
#define TAMP_ATCR2_ATOSEL2_Msk       (0x7U<<TAMP_ATCR2_ATOSEL2_Pos)                    /*!< 0x00003800 */
#define TAMP_ATCR2_ATOSEL2            TAMP_ATCR2_ATOSEL2_Msk
#define TAMP_ATCR2_ATOSEL2_0         (0x1U << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00000800 */
#define TAMP_ATCR2_ATOSEL2_1         (0x2U << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00001000 */
#define TAMP_ATCR2_ATOSEL2_2         (0x4U << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00002000 */
#define TAMP_ATCR2_ATOSEL3_Pos       (14U)
#define TAMP_ATCR2_ATOSEL3_Msk       (0x7U<<TAMP_ATCR2_ATOSEL3_Pos)                    /*!< 0x0001C000 */
#define TAMP_ATCR2_ATOSEL3            TAMP_ATCR2_ATOSEL3_Msk
#define TAMP_ATCR2_ATOSEL3_0         (0x1U << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00004000 */
#define TAMP_ATCR2_ATOSEL3_1         (0x2U << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00008000 */
#define TAMP_ATCR2_ATOSEL3_2         (0x4U << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00010000 */
#define TAMP_ATCR2_ATOSEL4_Pos       (17U)
#define TAMP_ATCR2_ATOSEL4_Msk       (0x7U<<TAMP_ATCR2_ATOSEL4_Pos)                    /*!< 0x000E0000 */
#define TAMP_ATCR2_ATOSEL4            TAMP_ATCR2_ATOSEL4_Msk
#define TAMP_ATCR2_ATOSEL4_0         (0x1U << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00020000 */
#define TAMP_ATCR2_ATOSEL4_1         (0x2U << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00040000 */
#define TAMP_ATCR2_ATOSEL4_2         (0x4U << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00080000 */
#define TAMP_ATCR2_ATOSEL5_Pos       (20U)
#define TAMP_ATCR2_ATOSEL5_Msk       (0x7U<<TAMP_ATCR2_ATOSEL5_Pos)                    /*!< 0x00700000 */
#define TAMP_ATCR2_ATOSEL5            TAMP_ATCR2_ATOSEL5_Msk
#define TAMP_ATCR2_ATOSEL5_0         (0x1U << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00100000 */
#define TAMP_ATCR2_ATOSEL5_1         (0x2U << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00200000 */
#define TAMP_ATCR2_ATOSEL5_2         (0x4U << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00400000 */
#define TAMP_ATCR2_ATOSEL6_Pos       (23U)
#define TAMP_ATCR2_ATOSEL6_Msk       (0x7U<<TAMP_ATCR2_ATOSEL6_Pos)                    /*!< 0x03800000 */
#define TAMP_ATCR2_ATOSEL6            TAMP_ATCR2_ATOSEL6_Msk
#define TAMP_ATCR2_ATOSEL6_0         (0x1U << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x00800000 */
#define TAMP_ATCR2_ATOSEL6_1         (0x2U << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x01000000 */
#define TAMP_ATCR2_ATOSEL6_2         (0x4U << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x02000000 */
#define TAMP_ATCR2_ATOSEL7_Pos       (26U)
#define TAMP_ATCR2_ATOSEL7_Msk       (0x7U<<TAMP_ATCR2_ATOSEL7_Pos)                    /*!< 0x1C000000 */
#define TAMP_ATCR2_ATOSEL7            TAMP_ATCR2_ATOSEL7_Msk
#define TAMP_ATCR2_ATOSEL7_0         (0x1U << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x04000000 */
#define TAMP_ATCR2_ATOSEL7_1         (0x2U << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x08000000 */
#define TAMP_ATCR2_ATOSEL7_2         (0x4U << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x10000000 */
#define TAMP_ATCR2_ATOSEL8_Pos       (29U)
#define TAMP_ATCR2_ATOSEL8_Msk       (0x7U<<TAMP_ATCR2_ATOSEL8_Pos)                    /*!< 0xE0000000 */
#define TAMP_ATCR2_ATOSEL8            TAMP_ATCR2_ATOSEL8_Msk
#define TAMP_ATCR2_ATOSEL8_0         (0x1U << TAMP_ATCR2_ATOSEL8_Pos)                  /*!< 0x20000000 */
#define TAMP_ATCR2_ATOSEL8_1         (0x2U << TAMP_ATCR2_ATOSEL8_Pos)                  /*!< 0x40000000 */
#define TAMP_ATCR2_ATOSEL8_2         (0x4U << TAMP_ATCR2_ATOSEL8_Pos)                  /*!< 0x80000000 */

/********************  Bits definition for TAMP_SECCFGR register  *************/
#define TAMP_SECCFGR_BKPRWSEC_Pos     (0U)
#define TAMP_SECCFGR_BKPRWSEC_Msk     (0xFF << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x000000FF */
#define TAMP_SECCFGR_BKPRWSEC         TAMP_SECCFGR_BKPRWSEC_Msk
#define TAMP_SECCFGR_BKPRWSEC_0       (0x1U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000001 */
#define TAMP_SECCFGR_BKPRWSEC_1       (0x2U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000002 */
#define TAMP_SECCFGR_BKPRWSEC_2       (0x4U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000004 */
#define TAMP_SECCFGR_BKPRWSEC_3       (0x8U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000008 */
#define TAMP_SECCFGR_BKPRWSEC_4       (0x1U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000010 */
#define TAMP_SECCFGR_BKPRWSEC_5       (0x20U << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000020 */
#define TAMP_SECCFGR_BKPRWSEC_6       (0x40U << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000040 */
#define TAMP_SECCFGR_BKPRWSEC_7       (0x80U << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000080 */
#define TAMP_SECCFGR_CNT2SEC_Pos      (14U)
#define TAMP_SECCFGR_CNT2SEC_Msk      (0x1 << TAMP_SECCFGR_CNT2SEC_Pos)                  /*!< 0x00004000 */
#define TAMP_SECCFGR_CNT2SEC          TAMP_SECCFGR_CNT2SEC_Msk
#define TAMP_SECCFGR_CNT1SEC_Pos      (15U)
#define TAMP_SECCFGR_CNT1SEC_Msk      (0x1 << TAMP_SECCFGR_CNT1SEC_Pos)                  /*!< 0x00008000 */
#define TAMP_SECCFGR_CNT1SEC          TAMP_SECCFGR_CNT1SEC_Msk
#define TAMP_SECCFGR_BKPWSEC_Pos      (16U)
#define TAMP_SECCFGR_BKPWSEC_Msk      (0xFF << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00FF0000 */
#define TAMP_SECCFGR_BKPWSEC          TAMP_SECCFGR_BKPWSEC_Msk
#define TAMP_SECCFGR_BKPWSEC_0        (0x1U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00010000 */
#define TAMP_SECCFGR_BKPWSEC_1        (0x2U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00020000 */
#define TAMP_SECCFGR_BKPWSEC_2        (0x4U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00040000 */
#define TAMP_SECCFGR_BKPWSEC_3        (0x8U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00080000 */
#define TAMP_SECCFGR_BKPWSEC_4        (0x1U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00100000 */
#define TAMP_SECCFGR_BKPWSEC_5        (0x20U << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00200000 */
#define TAMP_SECCFGR_BKPWSEC_6        (0x40U << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00400000 */
#define TAMP_SECCFGR_BKPWSEC_7        (0x80U << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00800000 */
#define TAMP_SECCFGR_SMKLOCK_Pos      (30U)
#define TAMP_SECCFGR_SMKLOCK_Msk      (0x1U << TAMP_SECCFGR_SMKLOCK_Pos)                 /*!< 0x40000000 */
#define TAMP_SECCFGR_SMKLOCK          TAMP_SECCFGR_SMKLOCK_Msk
#define TAMP_SECCFGR_TAMPSEC_Pos      (31U)
#define TAMP_SECCFGR_TAMPSEC_Msk      (0x1U << TAMP_SECCFGR_TAMPSEC_Pos)                 /*!< 0x80000000 */
#define TAMP_SECCFGR_TAMPSEC          TAMP_SECCFGR_TAMPSEC_Msk

/********************  Bits definition for TAMP_PRIVCR register  ************/
#define TAMP_PRIVCR_CNT2PRIV_Pos    (15U)
#define TAMP_PRIVCR_CNT2PRIV_Msk    (0x1 << TAMP_PRIVCR_CNT2PRIV_Pos)                /*!< 0x00004000 */
#define TAMP_PRIVCR_CNT2PRIV        TAMP_PRIVCR_CNT2PRIV_Msk
#define TAMP_PRIVCR_CNT1PRIV_Pos    (15U)
#define TAMP_PRIVCR_CNT1PRIV_Msk    (0x1 << TAMP_PRIVCR_CNT1PRIV_Pos)                /*!< 0x00008000 */
#define TAMP_PRIVCR_CNT1PRIV        TAMP_PRIVCR_CNT1PRIV_Msk
#define TAMP_PRIVCR_BKPRWPRIV_Pos   (29U)
#define TAMP_PRIVCR_BKPRWPRIV_Msk   (0x1 << TAMP_PRIVCR_BKPRWPRIV_Pos)               /*!< 0x20000000 */
#define TAMP_PRIVCR_BKPRWPRIV       TAMP_PRIVCR_BKPRWPRIV_Msk
#define TAMP_PRIVCR_BKPWPRIV_Pos    (30U)
#define TAMP_PRIVCR_BKPWPRIV_Msk    (0x1 << TAMP_PRIVCR_BKPWPRIV_Pos)                /*!< 0x40000000 */
#define TAMP_PRIVCR_BKPWPRIV        TAMP_PRIVCR_BKPWPRIV_Msk
#define TAMP_PRIVCR_TAMPPRIV_Pos    (31U)
#define TAMP_PRIVCR_TAMPPRIV_Msk    (0x1 << TAMP_PRIVCR_TAMPPRIV_Pos)                /*!< 0x80000000 */
#define TAMP_PRIVCR_TAMPPRIV        TAMP_PRIVCR_TAMPPRIV_Msk

/********************  Bits definition for TAMP_IER register  *****************/
#define TAMP_IER_TAMP1IE_Pos         (0U)
#define TAMP_IER_TAMP1IE_Msk         (0x1U << TAMP_IER_TAMP1IE_Pos)                    /*!< 0x00000001 */
#define TAMP_IER_TAMP1IE             TAMP_IER_TAMP1IE_Msk
#define TAMP_IER_TAMP2IE_Pos         (1U)
#define TAMP_IER_TAMP2IE_Msk         (0x1U << TAMP_IER_TAMP2IE_Pos)                    /*!< 0x00000002 */
#define TAMP_IER_TAMP2IE             TAMP_IER_TAMP2IE_Msk
#define TAMP_IER_TAMP3IE_Pos         (2U)
#define TAMP_IER_TAMP3IE_Msk         (0x1U << TAMP_IER_TAMP3IE_Pos)                    /*!< 0x00000004 */
#define TAMP_IER_TAMP3IE             TAMP_IER_TAMP3IE_Msk
#define TAMP_IER_TAMP4IE_Pos         (3U)
#define TAMP_IER_TAMP4IE_Msk         (0x1U << TAMP_IER_TAMP4IE_Pos)                    /*!< 0x00000008 */
#define TAMP_IER_TAMP4IE             TAMP_IER_TAMP4IE_Msk
#define TAMP_IER_TAMP5IE_Pos         (4U)
#define TAMP_IER_TAMP5IE_Msk         (0x1U << TAMP_IER_TAMP5IE_Pos)                    /*!< 0x00000010 */
#define TAMP_IER_TAMP5IE             TAMP_IER_TAMP5IE_Msk
#define TAMP_IER_TAMP6IE_Pos         (5U)
#define TAMP_IER_TAMP6IE_Msk         (0x1U << TAMP_IER_TAMP6IE_Pos)                    /*!< 0x00000020 */
#define TAMP_IER_TAMP6IE             TAMP_IER_TAMP6IE_Msk
#define TAMP_IER_TAMP7IE_Pos         (6U)
#define TAMP_IER_TAMP7IE_Msk         (0x1U << TAMP_IER_TAMP7IE_Pos)                    /*!< 0x00000040 */
#define TAMP_IER_TAMP7IE             TAMP_IER_TAMP7IE_Msk
#define TAMP_IER_TAMP8IE_Pos         (7U)
#define TAMP_IER_TAMP8IE_Msk         (0x1U << TAMP_IER_TAMP8IE_Pos)                    /*!< 0x00000080 */
#define TAMP_IER_TAMP8IE             TAMP_IER_TAMP8IE_Msk
#define TAMP_IER_ITAMP1IE_Pos        (16U)
#define TAMP_IER_ITAMP1IE_Msk        (0x1U << TAMP_IER_ITAMP1IE_Pos)                   /*!< 0x00010000 */
#define TAMP_IER_ITAMP1IE            TAMP_IER_ITAMP1IE_Msk
#define TAMP_IER_ITAMP2IE_Pos        (17U)
#define TAMP_IER_ITAMP2IE_Msk        (0x1U << TAMP_IER_ITAMP2IE_Pos)                   /*!< 0x00020000 */
#define TAMP_IER_ITAMP2IE            TAMP_IER_ITAMP2IE_Msk
#define TAMP_IER_ITAMP3IE_Pos        (18U)
#define TAMP_IER_ITAMP3IE_Msk        (0x1U << TAMP_IER_ITAMP3IE_Pos)                   /*!< 0x00040000 */
#define TAMP_IER_ITAMP3IE            TAMP_IER_ITAMP3IE_Msk
#define TAMP_IER_ITAMP5IE_Pos        (20U)
#define TAMP_IER_ITAMP5IE_Msk        (0x1U << TAMP_IER_ITAMP5IE_Pos)                   /*!< 0x00100000 */
#define TAMP_IER_ITAMP5IE            TAMP_IER_ITAMP5IE_Msk
#define TAMP_IER_ITAMP6IE_Pos        (21U)
#define TAMP_IER_ITAMP6IE_Msk        (0x1U << TAMP_IER_ITAMP6IE_Pos)                   /*!< 0x00200000 */
#define TAMP_IER_ITAMP6IE            TAMP_IER_ITAMP6IE_Msk
#define TAMP_IER_ITAMP7IE_Pos        (22U)
#define TAMP_IER_ITAMP7IE_Msk        (0x1U << TAMP_IER_ITAMP7IE_Pos)                   /*!< 0x00400000 */
#define TAMP_IER_ITAMP7IE            TAMP_IER_ITAMP7IE_Msk
#define TAMP_IER_ITAMP8IE_Pos        (23U)
#define TAMP_IER_ITAMP8IE_Msk        (0x1U << TAMP_IER_ITAMP8IE_Pos)                   /*!< 0x00800000 */
#define TAMP_IER_ITAMP8IE            TAMP_IER_ITAMP8IE_Msk
#define TAMP_IER_ITAMP9IE_Pos        (24U)
#define TAMP_IER_ITAMP9IE_Msk        (0x1U << TAMP_IER_ITAMP9IE_Pos)                   /*!< 0x01000000 */
#define TAMP_IER_ITAMP9IE            TAMP_IER_ITAMP9IE_Msk
#define TAMP_IER_ITAMP10IE_Pos       (25U)
#define TAMP_IER_ITAMP10IE_Msk       (0x1U << TAMP_IER_ITAMP10IE_Pos)                  /*!< 0x02000000 */
#define TAMP_IER_ITAMP10IE           TAMP_IER_ITAMP10IE_Msk

/********************  Bits definition for TAMP_SR register  *****************/
#define TAMP_SR_TAMP1F_Pos           (0U)
#define TAMP_SR_TAMP1F_Msk           (0x1U << TAMP_SR_TAMP1F_Pos)                      /*!< 0x00000001 */
#define TAMP_SR_TAMP1F               TAMP_SR_TAMP1F_Msk
#define TAMP_SR_TAMP2F_Pos           (1U)
#define TAMP_SR_TAMP2F_Msk           (0x1U << TAMP_SR_TAMP2F_Pos)                      /*!< 0x00000002 */
#define TAMP_SR_TAMP2F               TAMP_SR_TAMP2F_Msk
#define TAMP_SR_TAMP3F_Pos           (2U)
#define TAMP_SR_TAMP3F_Msk           (0x1U << TAMP_SR_TAMP3F_Pos)                      /*!< 0x00000004 */
#define TAMP_SR_TAMP3F               TAMP_SR_TAMP3F_Msk
#define TAMP_SR_TAMP4F_Pos           (3U)
#define TAMP_SR_TAMP4F_Msk           (0x1U << TAMP_SR_TAMP4F_Pos)                      /*!< 0x00000008 */
#define TAMP_SR_TAMP4F               TAMP_SR_TAMP4F_Msk
#define TAMP_SR_TAMP5F_Pos           (4U)
#define TAMP_SR_TAMP5F_Msk           (0x1U << TAMP_SR_TAMP5F_Pos)                      /*!< 0x00000010 */
#define TAMP_SR_TAMP5F               TAMP_SR_TAMP5F_Msk
#define TAMP_SR_TAMP6F_Pos           (5U)
#define TAMP_SR_TAMP6F_Msk           (0x1U << TAMP_SR_TAMP6F_Pos)                      /*!< 0x00000020 */
#define TAMP_SR_TAMP6F               TAMP_SR_TAMP6F_Msk
#define TAMP_SR_TAMP7F_Pos           (6U)
#define TAMP_SR_TAMP7F_Msk           (0x1U << TAMP_SR_TAMP7F_Pos)                      /*!< 0x00000040 */
#define TAMP_SR_TAMP7F               TAMP_SR_TAMP7F_Msk
#define TAMP_SR_TAMP8F_Pos           (7U)
#define TAMP_SR_TAMP8F_Msk           (0x1U << TAMP_SR_TAMP8F_Pos)                      /*!< 0x00000080 */
#define TAMP_SR_TAMP8F               TAMP_SR_TAMP8F_Msk
#define TAMP_SR_ITAMP1F_Pos          (16U)
#define TAMP_SR_ITAMP1F_Msk          (0x1U << TAMP_SR_ITAMP1F_Pos)                     /*!< 0x00010000 */
#define TAMP_SR_ITAMP1F              TAMP_SR_ITAMP1F_Msk
#define TAMP_SR_ITAMP2F_Pos          (17U)
#define TAMP_SR_ITAMP2F_Msk          (0x1U << TAMP_SR_ITAMP2F_Pos)                     /*!< 0x00020000 */
#define TAMP_SR_ITAMP2F              TAMP_SR_ITAMP2F_Msk
#define TAMP_SR_ITAMP3F_Pos          (18U)
#define TAMP_SR_ITAMP3F_Msk          (0x1U << TAMP_SR_ITAMP3F_Pos)                     /*!< 0x00040000 */
#define TAMP_SR_ITAMP3F              TAMP_SR_ITAMP3F_Msk
#define TAMP_SR_ITAMP5F_Pos          (20U)
#define TAMP_SR_ITAMP5F_Msk          (0x1U << TAMP_SR_ITAMP5F_Pos)                     /*!< 0x00100000 */
#define TAMP_SR_ITAMP5F              TAMP_SR_ITAMP5F_Msk
#define TAMP_SR_ITAMP6F_Pos          (21U)
#define TAMP_SR_ITAMP6F_Msk          (0x1U << TAMP_SR_ITAMP6F_Pos)                     /*!< 0x00200000 */
#define TAMP_SR_ITAMP6F              TAMP_SR_ITAMP6F_Msk
#define TAMP_SR_ITAMP7F_Pos          (22U)
#define TAMP_SR_ITAMP7F_Msk          (0x1U << TAMP_SR_ITAMP7F_Pos)                     /*!< 0x00400000 */
#define TAMP_SR_ITAMP7F              TAMP_SR_ITAMP7F_Msk
#define TAMP_SR_ITAMP8F_Pos          (23U)
#define TAMP_SR_ITAMP8F_Msk          (0x1U << TAMP_SR_ITAMP8F_Pos)                     /*!< 0x00800000 */
#define TAMP_SR_ITAMP8F              TAMP_SR_ITAMP8F_Msk
#define TAMP_SR_ITAMP9F_Pos          (24U)
#define TAMP_SR_ITAMP9F_Msk          (0x1U << TAMP_SR_ITAMP9F_Pos)                     /*!< 0x01000000 */
#define TAMP_SR_ITAMP9F              TAMP_SR_ITAMP9F_Msk
#define TAMP_SR_ITAMP10F_Pos         (25U)
#define TAMP_SR_ITAMP10F_Msk         (0x1U << TAMP_SR_ITAMP10F_Pos)                    /*!< 0x02000000 */
#define TAMP_SR_ITAMP10F             TAMP_SR_ITAMP10F_Msk

/********************  Bits definition for TAMP_MISR register  ****************/
#define TAMP_MISR_TAMP1MF_Pos        (0U)
#define TAMP_MISR_TAMP1MF_Msk        (0x1U << TAMP_MISR_TAMP1MF_Pos)                   /*!< 0x00000001 */
#define TAMP_MISR_TAMP1MF            TAMP_MISR_TAMP1MF_Msk
#define TAMP_MISR_TAMP2MF_Pos        (1U)
#define TAMP_MISR_TAMP2MF_Msk        (0x1U << TAMP_MISR_TAMP2MF_Pos)                   /*!< 0x00000002 */
#define TAMP_MISR_TAMP2MF            TAMP_MISR_TAMP2MF_Msk
#define TAMP_MISR_TAMP3MF_Pos        (2U)
#define TAMP_MISR_TAMP3MF_Msk        (0x1U << TAMP_MISR_TAMP3MF_Pos)                   /*!< 0x00000004 */
#define TAMP_MISR_TAMP3MF            TAMP_MISR_TAMP3MF_Msk
#define TAMP_MISR_TAMP4MF_Pos        (3U)
#define TAMP_MISR_TAMP4MF_Msk        (0x1U << TAMP_MISR_TAMP4MF_Pos)                   /*!< 0x00000008 */
#define TAMP_MISR_TAMP4MF            TAMP_MISR_TAMP4MF_Msk
#define TAMP_MISR_TAMP5MF_Pos        (4U)
#define TAMP_MISR_TAMP5MF_Msk        (0x1U << TAMP_MISR_TAMP5MF_Pos)                   /*!< 0x00000010 */
#define TAMP_MISR_TAMP5MF            TAMP_MISR_TAMP5MF_Msk
#define TAMP_MISR_TAMP6MF_Pos        (5U)
#define TAMP_MISR_TAMP6MF_Msk        (0x1U << TAMP_MISR_TAMP6MF_Pos)                   /*!< 0x00000020 */
#define TAMP_MISR_TAMP6MF            TAMP_MISR_TAMP6MF_Msk
#define TAMP_MISR_TAMP7MF_Pos        (6U)
#define TAMP_MISR_TAMP7MF_Msk        (0x1U << TAMP_MISR_TAMP7MF_Pos)                   /*!< 0x00000040 */
#define TAMP_MISR_TAMP7MF            TAMP_MISR_TAMP7MF_Msk
#define TAMP_MISR_TAMP8MF_Pos        (7U)
#define TAMP_MISR_TAMP8MF_Msk        (0x1U << TAMP_MISR_TAMP8MF_Pos)                   /*!< 0x00000080 */
#define TAMP_MISR_TAMP8MF            TAMP_MISR_TAMP8MF_Msk
#define TAMP_MISR_ITAMP1MF_Pos       (16U)
#define TAMP_MISR_ITAMP1MF_Msk       (0x1U << TAMP_MISR_ITAMP1MF_Pos)                  /*!< 0x00010000 */
#define TAMP_MISR_ITAMP1MF           TAMP_MISR_ITAMP1MF_Msk
#define TAMP_MISR_ITAMP2MF_Pos       (17U)
#define TAMP_MISR_ITAMP2MF_Msk       (0x1U << TAMP_MISR_ITAMP2MF_Pos)                  /*!< 0x00020000 */
#define TAMP_MISR_ITAMP2MF           TAMP_MISR_ITAMP2MF_Msk
#define TAMP_MISR_ITAMP3MF_Pos       (18U)
#define TAMP_MISR_ITAMP3MF_Msk       (0x1U << TAMP_MISR_ITAMP3MF_Pos)                  /*!< 0x00040000 */
#define TAMP_MISR_ITAMP3MF           TAMP_MISR_ITAMP3MF_Msk
#define TAMP_MISR_ITAMP5MF_Pos       (20U)
#define TAMP_MISR_ITAMP5MF_Msk       (0x1U << TAMP_MISR_ITAMP5MF_Pos)                  /*!< 0x00100000 */
#define TAMP_MISR_ITAMP5MF           TAMP_MISR_ITAMP5MF_Msk
#define TAMP_MISR_ITAMP6MF_Pos       (21U)
#define TAMP_MISR_ITAMP6MF_Msk       (0x1U << TAMP_MISR_ITAMP6MF_Pos)                  /*!< 0x00200000 */
#define TAMP_MISR_ITAMP6MF           TAMP_MISR_ITAMP6MF_Msk
#define TAMP_MISR_ITAMP7MF_Pos       (22U)
#define TAMP_MISR_ITAMP7MF_Msk       (0x1U << TAMP_MISR_ITAMP7MF_Pos)                  /*!< 0x00400000 */
#define TAMP_MISR_ITAMP7MF           TAMP_MISR_ITAMP7MF_Msk
#define TAMP_MISR_ITAMP8MF_Pos       (23U)
#define TAMP_MISR_ITAMP8MF_Msk       (0x1U << TAMP_MISR_ITAMP8MF_Pos)                  /*!< 0x00800000 */
#define TAMP_MISR_ITAMP8MF           TAMP_MISR_ITAMP8MF_Msk
#define TAMP_MISR_ITAMP9MF_Pos       (24U)
#define TAMP_MISR_ITAMP9MF_Msk       (0x1U << TAMP_MISR_ITAMP9MF_Pos)                  /*!< 0x01000000 */
#define TAMP_MISR_ITAMP9MF           TAMP_MISR_ITAMP9MF_Msk
#define TAMP_MISR_ITAMP10MF_Pos      (25U)
#define TAMP_MISR_ITAMP10MF_Msk      (0x1U << TAMP_MISR_ITAMP10MF_Pos)                 /*!< 0x02000000 */
#define TAMP_MISR_ITAMP10MF          TAMP_MISR_ITAMP10MF_Msk

/********************  Bits definition for TAMP_SMISR register  ************ *****/
#define TAMP_SMISR_TAMP1MF_Pos       (0U)
#define TAMP_SMISR_TAMP1MF_Msk       (0x1U << TAMP_SMISR_TAMP1MF_Pos)                  /*!< 0x00000001 */
#define TAMP_SMISR_TAMP1MF           TAMP_SMISR_TAMP1MF_Msk
#define TAMP_SMISR_TAMP2MF_Pos       (1U)
#define TAMP_SMISR_TAMP2MF_Msk       (0x1U << TAMP_SMISR_TAMP2MF_Pos)                  /*!< 0x00000002 */
#define TAMP_SMISR_TAMP2MF           TAMP_SMISR_TAMP2MF_Msk
#define TAMP_SMISR_TAMP3MF_Pos       (2U)
#define TAMP_SMISR_TAMP3MF_Msk       (0x1U << TAMP_SMISR_TAMP3MF_Pos)                  /*!< 0x00000004 */
#define TAMP_SMISR_TAMP3MF           TAMP_SMISR_TAMP3MF_Msk
#define TAMP_SMISR_TAMP4MF_Pos       (3U)
#define TAMP_SMISR_TAMP4MF_Msk       (0x1U << TAMP_SMISR_TAMP4MF_Pos)                  /*!< 0x00000008 */
#define TAMP_SMISR_TAMP4MF           TAMP_SMISR_TAMP4MF_Msk
#define TAMP_SMISR_TAMP5MF_Pos       (4U)
#define TAMP_SMISR_TAMP5MF_Msk       (0x1U << TAMP_SMISR_TAMP5MF_Pos)                  /*!< 0x00000010 */
#define TAMP_SMISR_TAMP5MF           TAMP_SMISR_TAMP5MF_Msk
#define TAMP_SMISR_TAMP6MF_Pos       (5U)
#define TAMP_SMISR_TAMP6MF_Msk       (0x1U << TAMP_SMISR_TAMP6MF_Pos)                  /*!< 0x00000020 */
#define TAMP_SMISR_TAMP6MF           TAMP_SMISR_TAMP6MF_Msk
#define TAMP_SMISR_TAMP7MF_Pos       (6U)
#define TAMP_SMISR_TAMP7MF_Msk       (0x1U << TAMP_SMISR_TAMP7MF_Pos)                  /*!< 0x00000040 */
#define TAMP_SMISR_TAMP7MF           TAMP_SMISR_TAMP7MF_Msk
#define TAMP_SMISR_TAMP8MF_Pos       (7U)
#define TAMP_SMISR_TAMP8MF_Msk       (0x1U << TAMP_SMISR_TAMP8MF_Pos)                  /*!< 0x00000080 */
#define TAMP_SMISR_TAMP8MF           TAMP_SMISR_TAMP8MF_Msk
#define TAMP_SMISR_ITAMP1MF_Pos      (16U)
#define TAMP_SMISR_ITAMP1MF_Msk      (0x1U << TAMP_SMISR_ITAMP1MF_Pos)                 /*!< 0x00010000 */
#define TAMP_SMISR_ITAMP1MF          TAMP_SMISR_ITAMP1MF_Msk
#define TAMP_SMISR_ITAMP2MF_Pos      (17U)
#define TAMP_SMISR_ITAMP2MF_Msk      (0x1U << TAMP_SMISR_ITAMP2MF_Pos)                 /*!< 0x00020000 */
#define TAMP_SMISR_ITAMP2MF          TAMP_SMISR_ITAMP2MF_Msk
#define TAMP_SMISR_ITAMP3MF_Pos      (18U)
#define TAMP_SMISR_ITAMP3MF_Msk      (0x1U << TAMP_SMISR_ITAMP3MF_Pos)                 /*!< 0x00040000 */
#define TAMP_SMISR_ITAMP3MF          TAMP_SMISR_ITAMP3MF_Msk
#define TAMP_SMISR_ITAMP5MF_Pos      (20U)
#define TAMP_SMISR_ITAMP5MF_Msk      (0x1U << TAMP_SMISR_ITAMP5MF_Pos)                 /*!< 0x00100000 */
#define TAMP_SMISR_ITAMP5MF          TAMP_SMISR_ITAMP5MF_Msk
#define TAMP_SMISR_ITAMP6MF_Pos      (21U)
#define TAMP_SMISR_ITAMP6MF_Msk      (0x1U << TAMP_SMISR_ITAMP6MF_Pos)                 /*!< 0x00200000 */
#define TAMP_SMISR_ITAMP6MF          TAMP_SMISR_ITAMP6MF_Msk
#define TAMP_SMISR_ITAMP7MF_Pos      (22U)
#define TAMP_SMISR_ITAMP7MF_Msk      (0x1U << TAMP_SMISR_ITAMP7MF_Pos)                 /*!< 0x00400000 */
#define TAMP_SMISR_ITAMP7MF          TAMP_SMISR_ITAMP7MF_Msk
#define TAMP_SMISR_ITAMP8MF_Pos      (23U)
#define TAMP_SMISR_ITAMP8MF_Msk      (0x1U << TAMP_SMISR_ITAMP8MF_Pos)                 /*!< 0x00800000 */
#define TAMP_SMISR_ITAMP8MF          TAMP_SMISR_ITAMP8MF_Msk
#define TAMP_SMISR_ITAMP9MF_Pos      (24U)
#define TAMP_SMISR_ITAMP9MF_Msk      (0x1U << TAMP_SMISR_ITAMP9MF_Pos)                 /*!< 0x01000000 */
#define TAMP_SMISR_ITAMP9MF          TAMP_SMISR_ITAMP9MF_Msk
#define TAMP_SMISR_ITAMP10MF_Pos     (25U)
#define TAMP_SMISR_ITAMP10MF_Msk     (0x1U << TAMP_SMISR_ITAMP10MF_Pos)                /*!< 0x020400000 */
#define TAMP_SMISR_ITAMP10MF         TAMP_SMISR_ITAMP10MF_Msk

/********************  Bits definition for TAMP_SCR register  *****************/
#define TAMP_SCR_CTAMP1F_Pos         (0U)
#define TAMP_SCR_CTAMP1F_Msk         (0x1U << TAMP_SCR_CTAMP1F_Pos)                    /*!< 0x00000001 */
#define TAMP_SCR_CTAMP1F             TAMP_SCR_CTAMP1F_Msk
#define TAMP_SCR_CTAMP2F_Pos         (1U)
#define TAMP_SCR_CTAMP2F_Msk         (0x1U << TAMP_SCR_CTAMP2F_Pos)                    /*!< 0x00000002 */
#define TAMP_SCR_CTAMP2F             TAMP_SCR_CTAMP2F_Msk
#define TAMP_SCR_CTAMP3F_Pos         (2U)
#define TAMP_SCR_CTAMP3F_Msk         (0x1U << TAMP_SCR_CTAMP3F_Pos)                    /*!< 0x00000004 */
#define TAMP_SCR_CTAMP3F             TAMP_SCR_CTAMP3F_Msk
#define TAMP_SCR_CTAMP4F_Pos         (3U)
#define TAMP_SCR_CTAMP4F_Msk         (0x1U << TAMP_SCR_CTAMP4F_Pos)                    /*!< 0x00000008 */
#define TAMP_SCR_CTAMP4F             TAMP_SCR_CTAMP4F_Msk
#define TAMP_SCR_CTAMP5F_Pos         (4U)
#define TAMP_SCR_CTAMP5F_Msk         (0x1U << TAMP_SCR_CTAMP5F_Pos)                    /*!< 0x00000010 */
#define TAMP_SCR_CTAMP5F             TAMP_SCR_CTAMP5F_Msk
#define TAMP_SCR_CTAMP6F_Pos         (5U)
#define TAMP_SCR_CTAMP6F_Msk         (0x1U << TAMP_SCR_CTAMP6F_Pos)                    /*!< 0x00000020 */
#define TAMP_SCR_CTAMP6F             TAMP_SCR_CTAMP6F_Msk
#define TAMP_SCR_CTAMP7F_Pos         (6U)
#define TAMP_SCR_CTAMP7F_Msk         (0x1U << TAMP_SCR_CTAMP7F_Pos)                    /*!< 0x00000040 */
#define TAMP_SCR_CTAMP7F             TAMP_SCR_CTAMP7F_Msk
#define TAMP_SCR_CTAMP8F_Pos         (7U)
#define TAMP_SCR_CTAMP8F_Msk         (0x1U << TAMP_SCR_CTAMP8F_Pos)                    /*!< 0x00000080 */
#define TAMP_SCR_CTAMP8F             TAMP_SCR_CTAMP8F_Msk
#define TAMP_SCR_CITAMP1F_Pos        (16U)
#define TAMP_SCR_CITAMP1F_Msk        (0x1U << TAMP_SCR_CITAMP1F_Pos)                   /*!< 0x00010000 */
#define TAMP_SCR_CITAMP1F            TAMP_SCR_CITAMP1F_Msk
#define TAMP_SCR_CITAMP2F_Pos        (17U)
#define TAMP_SCR_CITAMP2F_Msk        (0x1U << TAMP_SCR_CITAMP2F_Pos)                   /*!< 0x00020000 */
#define TAMP_SCR_CITAMP2F            TAMP_SCR_CITAMP2F_Msk
#define TAMP_SCR_CITAMP3F_Pos        (18U)
#define TAMP_SCR_CITAMP3F_Msk        (0x1U << TAMP_SCR_CITAMP3F_Pos)                   /*!< 0x00040000 */
#define TAMP_SCR_CITAMP3F            TAMP_SCR_CITAMP3F_Msk
#define TAMP_SCR_CITAMP5F_Pos        (20U)
#define TAMP_SCR_CITAMP5F_Msk        (0x1U << TAMP_SCR_CITAMP5F_Pos)                   /*!< 0x00100000 */
#define TAMP_SCR_CITAMP5F            TAMP_SCR_CITAMP5F_Msk
#define TAMP_SCR_CITAMP6F_Pos        (21U)
#define TAMP_SCR_CITAMP6F_Msk        (0x1U << TAMP_SCR_CITAMP6F_Pos)                   /*!< 0x00200000 */
#define TAMP_SCR_CITAMP6F            TAMP_SCR_CITAMP6F_Msk
#define TAMP_SCR_CITAMP7F_Pos        (22U)
#define TAMP_SCR_CITAMP7F_Msk        (0x1U << TAMP_SCR_CITAMP7F_Pos)                   /*!< 0x00400000 */
#define TAMP_SCR_CITAMP7F            TAMP_SCR_CITAMP7F_Msk
#define TAMP_SCR_CITAMP8F_Pos        (23U)
#define TAMP_SCR_CITAMP8F_Msk        (0x1U << TAMP_SCR_CITAMP8F_Pos)                   /*!< 0x00800000 */
#define TAMP_SCR_CITAMP8F            TAMP_SCR_CITAMP8F_Msk
#define TAMP_SCR_CITAMP9F_Pos        (24U)
#define TAMP_SCR_CITAMP9F_Msk        (0x1U << TAMP_SCR_CITAMP9F_Pos)                   /*!< 0x01000000 */
#define TAMP_SCR_CITAMP9F            TAMP_SCR_CITAMP9F_Msk
#define TAMP_SCR_CITAMP10F_Pos       (26U)
#define TAMP_SCR_CITAMP10F_Msk       (0x1U << TAMP_SCR_CITAMP10F_Pos)                  /*!< 0x00200000 */
#define TAMP_SCR_CITAMP10F           TAMP_SCR_CITAMP10F_Msk

/*******************  Bits definition for TAMP_COUNT1R register  **************/
#define TAMP_COUNT1R_Pos              (0U)
#define TAMP_COUNT1R_Msk              (0xFFFFFFFFUL << TAMP_COUNT1R_Pos)               /*!< 0xFFFFFFFF */
#define TAMP_COUNT1R                  TAMP_COUNT1R_Msk

/*******************  Bits definition for TAMP_COUNT2R register  **************/
#define TAMP_COUNT2R_Pos              (0U)
#define TAMP_COUNT2R_Msk              (0xFFFFFFFFUL << TAMP_COUNT2R_Pos)               /*!< 0xFFFFFFFF */
#define TAMP_COUNT2R                  TAMP_COUNT2R_Msk

/*******************  Bits definition for TAMP_BKPRIFR1 register  *************/
#define TAMP_BKPRIFR1_BKPRWRIF_Pos    (0U)
#define TAMP_BKPRIFR1_BKPRWRIF_Msk    (0xFFU << TAMP_BKPRIFR1_BKPRWRIF_Pos)            /*!< 0x000000FF */
#define TAMP_BKPRIFR1_BKPRWRIF        TAMP_BKPRIFR1_BKPRWRIF_Msk

/*******************  Bits definition for TAMP_BKPRIFR2 register  *************/
#define TAMP_BKPRIFR2_BKPRWRIF_Pos    (0U)
#define TAMP_BKPRIFR2_BKPRWRIF_Msk    (0xFFU << TAMP_BKPRIFR2_BKPRWRIF_Pos)            /*!< 0x000000FF */
#define TAMP_BKPRIFR2_BKPRWRIF        TAMP_BKPRIFR2_BKPRWRIF_Msk

/*******************  Bits definition for TAMP_BKPRIFR3 register  *************/
#define TAMP_BKPRIFR3_BKPRWRIF1_Pos   (0U)
#define TAMP_BKPRIFR3_BKPRWRIF1_Msk   (0xFFU << TAMP_BKPRIFR3_BKPRWRIF1_Pos)            /*!< 0x000000FF */
#define TAMP_BKPRIFR3_BKPRWRIF1       TAMP_BKPRIFR3_BKPRWRIF1_Msk
#define TAMP_BKPRIFR3_BKPRWRIF2_Pos   (16U)
#define TAMP_BKPRIFR3_BKPRWRIF2_Msk   (0xFFU << TAMP_BKPRIFR3_BKPRWRIF2_Pos)            /*!< 0x00FF0000 */
#define TAMP_BKPRIFR3_BKPRWRIF2       TAMP_BKPRIFR3_BKPRWRIF2_Msk

/*******************  Bits definition for TAMP_RCIDCFGR register  *************/
#define TAMP_RCIDCFGR_CFEN_Pos       (0U)
#define TAMP_RCIDCFGR_CFEN_Msk       (0x1U << TAMP_RCIDCFGR_CFEN_Pos)                   /*!< 0x00000001 */
#define TAMP_RCIDCFGR_CFEN           TAMP_RCIDCFGR_CFEN_Msk
#define TAMP_RCIDCFGR_CID_Pos       (4U)
#define TAMP_RCIDCFGR_CID_Msk       (0xFU << TAMP_RCIDCFGR_CID_Pos)                     /*!< 0x000000F0 */
#define TAMP_RCIDCFGR_CID           TAMP_RCIDCFGR_CID_Msk

/********************  Bits definition for TAMP_BKP0R register  ***************/
#define TAMP_BKP0R_Pos               (0U)
#define TAMP_BKP0R_Msk               (0xFFFFFFFFU << TAMP_BKP0R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP0R                   TAMP_BKP0R_Msk

/********************  Bits definition for TAMP_BKP1R register  ****************/
#define TAMP_BKP1R_Pos               (0U)
#define TAMP_BKP1R_Msk               (0xFFFFFFFFU << TAMP_BKP1R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP1R                   TAMP_BKP1R_Msk

/********************  Bits definition for TAMP_BKP2R register  ****************/
#define TAMP_BKP2R_Pos               (0U)
#define TAMP_BKP2R_Msk               (0xFFFFFFFFU << TAMP_BKP2R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP2R                   TAMP_BKP2R_Msk

/********************  Bits definition for TAMP_BKP3R register  ****************/
#define TAMP_BKP3R_Pos               (0U)
#define TAMP_BKP3R_Msk               (0xFFFFFFFFU << TAMP_BKP3R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP3R                   TAMP_BKP3R_Msk

/********************  Bits definition for TAMP_BKP4R register  ****************/
#define TAMP_BKP4R_Pos               (0U)
#define TAMP_BKP4R_Msk               (0xFFFFFFFFU << TAMP_BKP4R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP4R                   TAMP_BKP4R_Msk

/********************  Bits definition for TAMP_BKP5R register  ****************/
#define TAMP_BKP5R_Pos               (0U)
#define TAMP_BKP5R_Msk               (0xFFFFFFFFU << TAMP_BKP5R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP5R                   TAMP_BKP5R_Msk

/********************  Bits definition for TAMP_BKP6R register  ****************/
#define TAMP_BKP6R_Pos               (0U)
#define TAMP_BKP6R_Msk               (0xFFFFFFFFU << TAMP_BKP6R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP6R                   TAMP_BKP6R_Msk

/********************  Bits definition for TAMP_BKP7R register  ****************/
#define TAMP_BKP7R_Pos               (0U)
#define TAMP_BKP7R_Msk               (0xFFFFFFFFU << TAMP_BKP7R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP7R                   TAMP_BKP7R_Msk

/********************  Bits definition for TAMP_BKP8R register  ****************/
#define TAMP_BKP8R_Pos               (0U)
#define TAMP_BKP8R_Msk               (0xFFFFFFFFU << TAMP_BKP8R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP8R                   TAMP_BKP8R_Msk

/********************  Bits definition for TAMP_BKP9R register  ****************/
#define TAMP_BKP9R_Pos               (0U)
#define TAMP_BKP9R_Msk               (0xFFFFFFFFU << TAMP_BKP9R_Pos)                   /*!< 0xFFFFFFFF */
#define TAMP_BKP9R                   TAMP_BKP9R_Msk

/********************  Bits definition for TAMP_BKP10R register  ***************/
#define TAMP_BKP10R_Pos              (0U)
#define TAMP_BKP10R_Msk              (0xFFFFFFFFU << TAMP_BKP10R_Pos)                  /*!< 0xFFFFFFFF */
#define TAMP_BKP10R                  TAMP_BKP10R_Msk

/********************  Bits definition for TAMP_BKP11R register  ***************/
#define TAMP_BKP11R_Pos              (0U)
#define TAMP_BKP11R_Msk              (0xFFFFFFFFU << TAMP_BKP11R_Pos)                  /*!< 0xFFFFFFFF */
#define TAMP_BKP11R                  TAMP_BKP11R_Msk

/********************  Bits definition for TAMP_BKP12R register  ***************/
#define TAMP_BKP12R_Pos              (0U)
#define TAMP_BKP12R_Msk              (0xFFFFFFFFU << TAMP_BKP12R_Pos)                  /*!< 0xFFFFFFFF */
#define TAMP_BKP12R                  TAMP_BKP12R_Msk

/********************  Bits definition for TAMP_BKP13R register  ***************/
#define TAMP_BKP13R_Pos              (0U)
#define TAMP_BKP13R_Msk              (0xFFFFFFFFU << TAMP_BKP13R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP13R                  TAMP_BKP13R_Msk

/********************  Bits definition for TAMP_BKP14R register  ***************/
#define TAMP_BKP14R_Pos              (0U)
#define TAMP_BKP14R_Msk              (0xFFFFFFFFU << TAMP_BKP14R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP14R                  TAMP_BKP14R_Msk

/********************  Bits definition for TAMP_BKP15R register  ***************/
#define TAMP_BKP15R_Pos              (0U)
#define TAMP_BKP15R_Msk              (0xFFFFFFFFU << TAMP_BKP15R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP15R                  TAMP_BKP15R_Msk

/********************  Bits definition for TAMP_BKP16R register  ***************/
#define TAMP_BKP16R_Pos              (0U)
#define TAMP_BKP16R_Msk              (0xFFFFFFFFU << TAMP_BKP16R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP16R                  TAMP_BKP16R_Msk

/********************  Bits definition for TAMP_BKP17R register  ***************/
#define TAMP_BKP17R_Pos              (0U)
#define TAMP_BKP17R_Msk              (0xFFFFFFFFU << TAMP_BKP17R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP17R                  TAMP_BKP17R_Msk

/********************  Bits definition for TAMP_BKP18R register  ***************/
#define TAMP_BKP18R_Pos              (0U)
#define TAMP_BKP18R_Msk              (0xFFFFFFFFU << TAMP_BKP18R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP18R                  TAMP_BKP18R_Msk

/********************  Bits definition for TAMP_BKP19R register  ***************/
#define TAMP_BKP19R_Pos              (0U)
#define TAMP_BKP19R_Msk              (0xFFFFFFFFU << TAMP_BKP19R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP19R                  TAMP_BKP19R_Msk

/********************  Bits definition for TAMP_BKP20R register  ***************/
#define TAMP_BKP20R_Pos              (0U)
#define TAMP_BKP20R_Msk              (0xFFFFFFFFU << TAMP_BKP20R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP20R                  TAMP_BKP20R_Msk

/********************  Bits definition for TAMP_BKP21R register  ***************/
#define TAMP_BKP21R_Pos              (0U)
#define TAMP_BKP21R_Msk              (0xFFFFFFFFU << TAMP_BKP21R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP21R                  TAMP_BKP21R_Msk

/********************  Bits definition for TAMP_BKP22R register  ***************/
#define TAMP_BKP22R_Pos              (0U)
#define TAMP_BKP22R_Msk              (0xFFFFFFFFU << TAMP_BKP22R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP22R                  TAMP_BKP22R_Msk

/********************  Bits definition for TAMP_BKP23R register  ***************/
#define TAMP_BKP23R_Pos              (0U)
#define TAMP_BKP23R_Msk              (0xFFFFFFFFU << TAMP_BKP23R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP23R                  TAMP_BKP23R_Msk

/********************  Bits definition for TAMP_BKP24R register  ***************/
#define TAMP_BKP24R_Pos              (0U)
#define TAMP_BKP24R_Msk              (0xFFFFFFFFU << TAMP_BKP24R_Pos)                 /*!< 0xFFFFFFFF */
#define TAMP_BKP24R                  TAMP_BKP24R_Msk

/********************  Bits definition for TAMP_BKP25R register  ***************/
#define TAMP_BKP25R_Pos              (0U)
#define TAMP_BKP25R_Msk              (0xFFFFFFFFU << TAMP_BKP25R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP25R                  TAMP_BKP25R_Msk

/********************  Bits definition for TAMP_BKP26R register  ***************/
#define TAMP_BKP26R_Pos              (0U)
#define TAMP_BKP26R_Msk              (0xFFFFFFFFU << TAMP_BKP26R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP26R                  TAMP_BKP26R_Msk

/********************  Bits definition for TAMP_BKP27R register  ***************/
#define TAMP_BKP27R_Pos              (0U)
#define TAMP_BKP27R_Msk              (0xFFFFFFFFU << TAMP_BKP27R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP27R                  TAMP_BKP27R_Msk

/********************  Bits definition for TAMP_BKP28R register  ***************/
#define TAMP_BKP28R_Pos              (0U)
#define TAMP_BKP28R_Msk              (0xFFFFFFFFU << TAMP_BKP28R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP28R                  TAMP_BKP28R_Msk

/********************  Bits definition for TAMP_BKP29R register  ***************/
#define TAMP_BKP29R_Pos              (0U)
#define TAMP_BKP29R_Msk              (0xFFFFFFFFU << TAMP_BKP29R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP29R                  TAMP_BKP29R_Msk

/********************  Bits definition for TAMP_BKP30R register  ***************/
#define TAMP_BKP30R_Pos              (0U)
#define TAMP_BKP30R_Msk              (0xFFFFFFFFU << TAMP_BKP30R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP30R                  TAMP_BKP30R_Msk

/********************  Bits definition for TAMP_BKP31R register  ***************/
#define TAMP_BKP31R_Pos              (0U)
#define TAMP_BKP31R_Msk              (0xFFFFFFFFU << TAMP_BKP31R_Pos)                /*!< 0xFFFFFFFF */
#define TAMP_BKP31R                  TAMP_BKP31R_Msk

/****  Bits definition for TAMP_BKP32R to 128 not added because never user ****/

/********************  Bits definition for TAMP_HWCFGR register  ******************/
#define TAMP_HWCFGR2_OPTIONREG_OUT_Pos  (0U)
#define TAMP_HWCFGR2_OPTIONREG_OUT_Msk  (0xFFUL << TAMP_HWCFGR2_OPTIONREG_OUT_Pos)   /*!< 0x000000FF */
#define TAMP_HWCFGR2_OPTIONREG_OUT      TAMP_HWCFGR2_OPTIONREG_OUT_Msk
#define TAMP_HWCFGR2_TRUST_ZONE_Pos     (8U)
#define TAMP_HWCFGR2_TRUST_ZONE_Msk     (0xFUL << TAMP_HWCFGR2_TRUST_ZONE_Pos)       /*!< 0x00000F00 */
#define TAMP_HWCFGR2_TRUST_ZONE         TAMP_HWCFGR2_TRUST_ZONE_Msk
#define TAMP_HWCFGR2_RIF_Pos            (12)
#define TAMP_HWCFGR2_RIF_Msk            (0xFUL << TAMP_HWCFGR2_RIF_Pos)              /*!< 0x0000F000 */
#define TAMP_HWCFGR2_RIF                TAMP_HWCFGR2_RIF_Msk

/********************  Bits definition for TAMP_HWCFGR register  ******************/
#define TAMP_HWCFGR1_BACKUP_REGS_Pos    (0U)
#define TAMP_HWCFGR1_BACKUP_REGS_Msk    (0xFFUL << TAMP_HWCFGR1_BACKUP_REGS_Pos)     /*!< 0x000000FF */
#define TAMP_HWCFGR1_BACKUP_REGS        TAMP_HWCFGR1_BACKUP_REGS_Msk
#define TAMP_HWCFGR1_TAMPER_Pos         (8U)
#define TAMP_HWCFGR1_TAMPER_Msk         (0xFUL << TAMP_HWCFGR1_TAMPER_Pos)           /*!< 0x00000F00 */
#define TAMP_HWCFGR1_TAMPER             TAMP_HWCFGR1_TAMPER_Msk
#define TAMP_HWCFGR1_ACTIVE_TAMPER_Pos  (12U)
#define TAMP_HWCFGR1_ACTIVE_TAMPER_Msk  (0xFUL << TAMP_HWCFGR1_ACTIVE_TAMPER_Pos)    /*!< 0x0000F000 */
#define TAMP_HWCFGR1_ACTIVE_TAMPER      TAMP_HWCFGR1_ACTIVE_TAMPER_Msk
#define TAMP_HWCFGR1_INT_TAMPER_Pos     (8U)
#define TAMP_HWCFGR1_INT_TAMPER_Msk     (0xFUL << TAMP_HWCFGR1_ACTIVE_TAMPER_Pos)    /*!< 0xFFFF0000 */
#define TAMP_HWCFGR1_INT_TAMPER         TAMP_HWCFGR1_ACTIVE_TAMPER_Msk

/*******************  Bits definition for TAMP_VERR register  **************/
#define TAMP_VERR_MINREV_Pos            (0U)
#define TAMP_VERR_MINREV_Msk            (0x4UL << TAMP_VERR_MINREV_Pos)              /*!< 0x0000000F */
#define TAMP_VERR_MINREV                TAMP_VERR_MINREV_Msk                         /*!< TAMP Minor version */
#define TAMP_VERR_MAJREV_Pos            (4U)
#define TAMP_VERR_MAJREV_Msk            (0x4UL << TAMPC_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define TAMP_VERR_MAJREV                TAMP_VERR_MAJREV_Msk                         /*!< TAMP Major version */

/*******************  Bits definition for TAMP_IPIDR register  **************/
#define TAMP_IPIDR_ID_Pos               (0U)
#define TAMP_IPIDR_ID_Msk               (0xFFFFFFFFUL << TAMP_IPIDR_ID_Pos)          /*!< 0xFFFFFFFF */
#define TAMP_IPIDR_ID                   TAMP_IPIDR_ID_Msk                            /*!< TAMP ID */

/*******************  Bits definition for TAMP_SIDR register  **************/
#define TAMP_SIDR_SID_Pos               (0U)
#define TAMP_SIDR_SID_Msk               (0xFFFFFFFFUL << TAMP_SIDR_SID_Pos)          /*!< 0xFFFFFFFF */
#define TAMP_SIDR_SID                   TAMP_SIDR_SID_Msk                            /*!< TAMP Size ID */

/******************************************************************************/
/*                                                                            */
/*                                Timer (TIM)                                 */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for TIM_CR1 register  ********************/
#define TIM_CR1_CEN_Pos           (0U)
#define TIM_CR1_CEN_Msk           (0x1UL << TIM_CR1_CEN_Pos)                   /*!< 0x00000001 */
#define TIM_CR1_CEN               TIM_CR1_CEN_Msk                              /*!< Counter enable */
#define TIM_CR1_UDIS_Pos          (1U)
#define TIM_CR1_UDIS_Msk          (0x1UL << TIM_CR1_UDIS_Pos)                  /*!< 0x00000002 */
#define TIM_CR1_UDIS              TIM_CR1_UDIS_Msk                             /*!< Update disable */
#define TIM_CR1_URS_Pos           (2U)
#define TIM_CR1_URS_Msk           (0x1UL << TIM_CR1_URS_Pos)                   /*!< 0x00000004 */
#define TIM_CR1_URS               TIM_CR1_URS_Msk                              /*!< Update request source */
#define TIM_CR1_OPM_Pos           (3U)
#define TIM_CR1_OPM_Msk           (0x1UL << TIM_CR1_OPM_Pos)                   /*!< 0x00000008 */
#define TIM_CR1_OPM               TIM_CR1_OPM_Msk                              /*!< One pulse mode */
#define TIM_CR1_DIR_Pos           (4U)
#define TIM_CR1_DIR_Msk           (0x1UL << TIM_CR1_DIR_Pos)                   /*!< 0x00000010 */
#define TIM_CR1_DIR               TIM_CR1_DIR_Msk                              /*!< Direction */
#define TIM_CR1_CMS_Pos           (5U)
#define TIM_CR1_CMS_Msk           (0x3UL << TIM_CR1_CMS_Pos)                   /*!< 0x00000060 */
#define TIM_CR1_CMS               TIM_CR1_CMS_Msk                              /*!< CMS[1:0] bits (Center-aligned mode selection) */
#define TIM_CR1_CMS_0             (0x1UL << TIM_CR1_CMS_Pos)                   /*!< 0x00000020 */
#define TIM_CR1_CMS_1             (0x2UL << TIM_CR1_CMS_Pos)                   /*!< 0x00000040 */
#define TIM_CR1_ARPE_Pos          (7U)
#define TIM_CR1_ARPE_Msk          (0x1UL << TIM_CR1_ARPE_Pos)                  /*!< 0x00000080 */
#define TIM_CR1_ARPE              TIM_CR1_ARPE_Msk                             /*!< Auto-reload preload enable */
#define TIM_CR1_CKD_Pos           (8U)
#define TIM_CR1_CKD_Msk           (0x3UL << TIM_CR1_CKD_Pos)                   /*!< 0x00000300 */
#define TIM_CR1_CKD               TIM_CR1_CKD_Msk                              /*!< CKD[1:0] bits (clock division) */
#define TIM_CR1_CKD_0             (0x1UL << TIM_CR1_CKD_Pos)                   /*!< 0x00000100 */
#define TIM_CR1_CKD_1             (0x2UL << TIM_CR1_CKD_Pos)                   /*!< 0x00000200 */
#define TIM_CR1_UIFREMAP_Pos      (11U)
#define TIM_CR1_UIFREMAP_Msk      (0x1UL << TIM_CR1_UIFREMAP_Pos)              /*!< 0x00000800 */
#define TIM_CR1_UIFREMAP          TIM_CR1_UIFREMAP_Msk                         /*!< Update interrupt flag remap */
#define TIM_CR1_DITHEN_Pos        (12U)
#define TIM_CR1_DITHEN_Msk        (0x1UL << TIM_CR1_DITHEN_Pos)                /*!< 0x00001000 */
#define TIM_CR1_DITHEN            TIM_CR1_DITHEN_Msk                           /*!< Dithering enable */

/*******************  Bit definition for TIM_CR2 register  ********************/
#define TIM_CR2_CCPC_Pos          (0U)
#define TIM_CR2_CCPC_Msk          (0x1UL << TIM_CR2_CCPC_Pos)                  /*!< 0x00000001 */
#define TIM_CR2_CCPC              TIM_CR2_CCPC_Msk                             /*!< Capture/Compare Preloaded Control */
#define TIM_CR2_CCUS_Pos          (2U)
#define TIM_CR2_CCUS_Msk          (0x1UL << TIM_CR2_CCUS_Pos)                  /*!< 0x00000004 */
#define TIM_CR2_CCUS              TIM_CR2_CCUS_Msk                             /*!< Capture/Compare Control Update Selection */
#define TIM_CR2_CCDS_Pos          (3U)
#define TIM_CR2_CCDS_Msk          (0x1UL << TIM_CR2_CCDS_Pos)                  /*!< 0x00000008 */
#define TIM_CR2_CCDS              TIM_CR2_CCDS_Msk                             /*!< Capture/Compare DMA Selection */
#define TIM_CR2_MMS_Pos           (4U)
#define TIM_CR2_MMS_Msk           (0x200007UL << TIM_CR2_MMS_Pos)              /*!< 0x02000070 */
#define TIM_CR2_MMS               TIM_CR2_MMS_Msk                              /*!< MMS[3:0] bits (Master Mode Selection) */
#define TIM_CR2_MMS_0             (0x000001UL << TIM_CR2_MMS_Pos)              /*!< 0x00000010 */
#define TIM_CR2_MMS_1             (0x000002UL << TIM_CR2_MMS_Pos)              /*!< 0x00000020 */
#define TIM_CR2_MMS_2             (0x000004UL << TIM_CR2_MMS_Pos)              /*!< 0x00000040 */
#define TIM_CR2_MMS_3             (0x200000UL << TIM_CR2_MMS_Pos)              /*!< 0x02000000 */
#define TIM_CR2_TI1S_Pos          (7U)
#define TIM_CR2_TI1S_Msk          (0x1UL << TIM_CR2_TI1S_Pos)                  /*!< 0x00000080 */
#define TIM_CR2_TI1S              TIM_CR2_TI1S_Msk                             /*!< TI1 Selection */
#define TIM_CR2_OIS1_Pos          (8U)
#define TIM_CR2_OIS1_Msk          (0x1UL << TIM_CR2_OIS1_Pos)                  /*!< 0x00000100 */
#define TIM_CR2_OIS1              TIM_CR2_OIS1_Msk                             /*!< Output Idle state 1 (OC1 output) */
#define TIM_CR2_OIS1N_Pos         (9U)
#define TIM_CR2_OIS1N_Msk         (0x1UL << TIM_CR2_OIS1N_Pos)                 /*!< 0x00000200 */
#define TIM_CR2_OIS1N             TIM_CR2_OIS1N_Msk                            /*!< Output Idle state 1 (OC1N output) */
#define TIM_CR2_OIS2_Pos          (10U)
#define TIM_CR2_OIS2_Msk          (0x1UL << TIM_CR2_OIS2_Pos)                  /*!< 0x00000400 */
#define TIM_CR2_OIS2              TIM_CR2_OIS2_Msk                             /*!< Output Idle state 2 (OC2 output) */
#define TIM_CR2_OIS2N_Pos         (11U)
#define TIM_CR2_OIS2N_Msk         (0x1UL << TIM_CR2_OIS2N_Pos)                 /*!< 0x00000800 */
#define TIM_CR2_OIS2N             TIM_CR2_OIS2N_Msk                            /*!< Output Idle state 2 (OC2N output) */
#define TIM_CR2_OIS3_Pos          (12U)
#define TIM_CR2_OIS3_Msk          (0x1UL << TIM_CR2_OIS3_Pos)                  /*!< 0x00001000 */
#define TIM_CR2_OIS3              TIM_CR2_OIS3_Msk                             /*!< Output Idle state 3 (OC3 output) */
#define TIM_CR2_OIS3N_Pos         (13U)
#define TIM_CR2_OIS3N_Msk         (0x1UL << TIM_CR2_OIS3N_Pos)                 /*!< 0x00002000 */
#define TIM_CR2_OIS3N             TIM_CR2_OIS3N_Msk                            /*!< Output Idle state 3 (OC3N output) */
#define TIM_CR2_OIS4_Pos          (14U)
#define TIM_CR2_OIS4_Msk          (0x1UL << TIM_CR2_OIS4_Pos)                  /*!< 0x00004000 */
#define TIM_CR2_OIS4              TIM_CR2_OIS4_Msk                             /*!< Output Idle state 4 (OC4 output) */
#define TIM_CR2_OIS4N_Pos         (15U)
#define TIM_CR2_OIS4N_Msk         (0x1UL << TIM_CR2_OIS4N_Pos)                 /*!< 0x00008000 */
#define TIM_CR2_OIS4N             TIM_CR2_OIS4N_Msk                            /*!< Output Idle state 4 (OC4N output) */
#define TIM_CR2_OIS5_Pos          (16U)
#define TIM_CR2_OIS5_Msk          (0x1UL << TIM_CR2_OIS5_Pos)                  /*!< 0x00010000 */
#define TIM_CR2_OIS5              TIM_CR2_OIS5_Msk                             /*!< Output Idle state 5 (OC5 output) */
#define TIM_CR2_OIS6_Pos          (18U)
#define TIM_CR2_OIS6_Msk          (0x1UL << TIM_CR2_OIS6_Pos)                  /*!< 0x00040000 */
#define TIM_CR2_OIS6              TIM_CR2_OIS6_Msk                             /*!< Output Idle state 6 (OC6 output) */
#define TIM_CR2_MMS2_Pos          (20U)
#define TIM_CR2_MMS2_Msk          (0xFUL << TIM_CR2_MMS2_Pos)                  /*!< 0x00F00000 */
#define TIM_CR2_MMS2              TIM_CR2_MMS2_Msk                             /*!< MMS[2:0] bits (Master Mode Selection) */
#define TIM_CR2_MMS2_0            (0x1UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00100000 */
#define TIM_CR2_MMS2_1            (0x2UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00200000 */
#define TIM_CR2_MMS2_2            (0x4UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00400000 */
#define TIM_CR2_MMS2_3            (0x8UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00800000 */

/*******************  Bit definition for TIM_SMCR register  *******************/
#define TIM_SMCR_SMS_Pos          (0U)
#define TIM_SMCR_SMS_Msk          (0x10007UL << TIM_SMCR_SMS_Pos)              /*!< 0x00010007 */
#define TIM_SMCR_SMS              TIM_SMCR_SMS_Msk                             /*!< SMS[2:0] bits (Slave mode selection) */
#define TIM_SMCR_SMS_0            (0x00001UL << TIM_SMCR_SMS_Pos)              /*!< 0x00000001 */
#define TIM_SMCR_SMS_1            (0x00002UL << TIM_SMCR_SMS_Pos)              /*!< 0x00000002 */
#define TIM_SMCR_SMS_2            (0x00004UL << TIM_SMCR_SMS_Pos)              /*!< 0x00000004 */
#define TIM_SMCR_SMS_3            (0x10000UL << TIM_SMCR_SMS_Pos)              /*!< 0x00010000 */
#define TIM_SMCR_TS_Pos           (4U)
#define TIM_SMCR_TS_Msk           (0x30007UL << TIM_SMCR_TS_Pos)               /*!< 0x00300070 */
#define TIM_SMCR_TS               TIM_SMCR_TS_Msk                              /*!< TS[2:0] bits (Trigger selection) */
#define TIM_SMCR_TS_0             (0x00001UL << TIM_SMCR_TS_Pos)               /*!< 0x00000010 */
#define TIM_SMCR_TS_1             (0x00002UL << TIM_SMCR_TS_Pos)               /*!< 0x00000020 */
#define TIM_SMCR_TS_2             (0x00004UL << TIM_SMCR_TS_Pos)               /*!< 0x00000040 */
#define TIM_SMCR_TS_3             (0x10000UL << TIM_SMCR_TS_Pos)               /*!< 0x00100000 */
#define TIM_SMCR_TS_4             (0x20000UL << TIM_SMCR_TS_Pos)               /*!< 0x00200000 */
#define TIM_SMCR_MSM_Pos          (7U)
#define TIM_SMCR_MSM_Msk          (0x1UL << TIM_SMCR_MSM_Pos)                  /*!< 0x00000080 */
#define TIM_SMCR_MSM              TIM_SMCR_MSM_Msk                             /*!< Master/slave mode */
#define TIM_SMCR_ETF_Pos          (8U)
#define TIM_SMCR_ETF_Msk          (0xFUL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000F00 */
#define TIM_SMCR_ETF              TIM_SMCR_ETF_Msk                             /*!< ETF[3:0] bits (External trigger filter) */
#define TIM_SMCR_ETF_0            (0x1UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000100 */
#define TIM_SMCR_ETF_1            (0x2UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000200 */
#define TIM_SMCR_ETF_2            (0x4UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000400 */
#define TIM_SMCR_ETF_3            (0x8UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000800 */
#define TIM_SMCR_ETPS_Pos         (12U)
#define TIM_SMCR_ETPS_Msk         (0x3UL << TIM_SMCR_ETPS_Pos)                 /*!< 0x00003000 */
#define TIM_SMCR_ETPS             TIM_SMCR_ETPS_Msk                            /*!< ETPS[1:0] bits (External trigger prescaler) */
#define TIM_SMCR_ETPS_0           (0x1UL << TIM_SMCR_ETPS_Pos)                 /*!< 0x00001000 */
#define TIM_SMCR_ETPS_1           (0x2UL << TIM_SMCR_ETPS_Pos)                 /*!< 0x00002000 */
#define TIM_SMCR_ECE_Pos          (14U)
#define TIM_SMCR_ECE_Msk          (0x1UL << TIM_SMCR_ECE_Pos)                  /*!< 0x00004000 */
#define TIM_SMCR_ECE              TIM_SMCR_ECE_Msk                             /*!< External clock enable */
#define TIM_SMCR_ETP_Pos          (15U)
#define TIM_SMCR_ETP_Msk          (0x1UL << TIM_SMCR_ETP_Pos)                  /*!< 0x00008000 */
#define TIM_SMCR_ETP              TIM_SMCR_ETP_Msk                             /*!< External trigger polarity */
#define TIM_SMCR_SMSPE_Pos        (24U)
#define TIM_SMCR_SMSPE_Msk        (0x1UL << TIM_SMCR_SMSPE_Pos)                /*!< 0x02000000 */
#define TIM_SMCR_SMSPE            TIM_SMCR_SMSPE_Msk                           /*!< SMS preload enable */
#define TIM_SMCR_SMSPS_Pos        (25U)
#define TIM_SMCR_SMSPS_Msk        (0x1UL << TIM_SMCR_SMSPS_Pos)                /*!< 0x04000000 */
#define TIM_SMCR_SMSPS            TIM_SMCR_SMSPS_Msk                           /*!< SMS preload source */

/*******************  Bit definition for TIM_DIER register  *******************/
#define TIM_DIER_UIE_Pos          (0U)
#define TIM_DIER_UIE_Msk          (0x1UL << TIM_DIER_UIE_Pos)                  /*!< 0x00000001 */
#define TIM_DIER_UIE              TIM_DIER_UIE_Msk                             /*!< Update interrupt enable */
#define TIM_DIER_CC1IE_Pos        (1U)
#define TIM_DIER_CC1IE_Msk        (0x1UL << TIM_DIER_CC1IE_Pos)                /*!< 0x00000002 */
#define TIM_DIER_CC1IE            TIM_DIER_CC1IE_Msk                           /*!< Capture/Compare 1 interrupt enable */
#define TIM_DIER_CC2IE_Pos        (2U)
#define TIM_DIER_CC2IE_Msk        (0x1UL << TIM_DIER_CC2IE_Pos)                /*!< 0x00000004 */
#define TIM_DIER_CC2IE            TIM_DIER_CC2IE_Msk                           /*!< Capture/Compare 2 interrupt enable */
#define TIM_DIER_CC3IE_Pos        (3U)
#define TIM_DIER_CC3IE_Msk        (0x1UL << TIM_DIER_CC3IE_Pos)                /*!< 0x00000008 */
#define TIM_DIER_CC3IE            TIM_DIER_CC3IE_Msk                           /*!< Capture/Compare 3 interrupt enable */
#define TIM_DIER_CC4IE_Pos        (4U)
#define TIM_DIER_CC4IE_Msk        (0x1UL << TIM_DIER_CC4IE_Pos)                /*!< 0x00000010 */
#define TIM_DIER_CC4IE            TIM_DIER_CC4IE_Msk                           /*!< Capture/Compare 4 interrupt enable */
#define TIM_DIER_COMIE_Pos        (5U)
#define TIM_DIER_COMIE_Msk        (0x1UL << TIM_DIER_COMIE_Pos)                /*!< 0x00000020 */
#define TIM_DIER_COMIE            TIM_DIER_COMIE_Msk                           /*!< COM interrupt enable */
#define TIM_DIER_TIE_Pos          (6U)
#define TIM_DIER_TIE_Msk          (0x1UL << TIM_DIER_TIE_Pos)                  /*!< 0x00000040 */
#define TIM_DIER_TIE              TIM_DIER_TIE_Msk                             /*!< Trigger interrupt enable */
#define TIM_DIER_BIE_Pos          (7U)
#define TIM_DIER_BIE_Msk          (0x1UL << TIM_DIER_BIE_Pos)                  /*!< 0x00000080 */
#define TIM_DIER_BIE              TIM_DIER_BIE_Msk                             /*!< Break interrupt enable */
#define TIM_DIER_UDE_Pos          (8U)
#define TIM_DIER_UDE_Msk          (0x1UL << TIM_DIER_UDE_Pos)                  /*!< 0x00000100 */
#define TIM_DIER_UDE              TIM_DIER_UDE_Msk                             /*!< Update DMA request enable */
#define TIM_DIER_CC1DE_Pos        (9U)
#define TIM_DIER_CC1DE_Msk        (0x1UL << TIM_DIER_CC1DE_Pos)                /*!< 0x00000200 */
#define TIM_DIER_CC1DE            TIM_DIER_CC1DE_Msk                           /*!< Capture/Compare 1 DMA request enable */
#define TIM_DIER_CC2DE_Pos        (10U)
#define TIM_DIER_CC2DE_Msk        (0x1UL << TIM_DIER_CC2DE_Pos)                /*!< 0x00000400 */
#define TIM_DIER_CC2DE            TIM_DIER_CC2DE_Msk                           /*!< Capture/Compare 2 DMA request enable */
#define TIM_DIER_CC3DE_Pos        (11U)
#define TIM_DIER_CC3DE_Msk        (0x1UL << TIM_DIER_CC3DE_Pos)                /*!< 0x00000800 */
#define TIM_DIER_CC3DE            TIM_DIER_CC3DE_Msk                           /*!< Capture/Compare 3 DMA request enable */
#define TIM_DIER_CC4DE_Pos        (12U)
#define TIM_DIER_CC4DE_Msk        (0x1UL << TIM_DIER_CC4DE_Pos)                /*!< 0x00001000 */
#define TIM_DIER_CC4DE            TIM_DIER_CC4DE_Msk                           /*!< Capture/Compare 4 DMA request enable */
#define TIM_DIER_COMDE_Pos        (13U)
#define TIM_DIER_COMDE_Msk        (0x1UL << TIM_DIER_COMDE_Pos)                /*!< 0x00002000 */
#define TIM_DIER_COMDE            TIM_DIER_COMDE_Msk                           /*!< COM DMA request enable */
#define TIM_DIER_TDE_Pos          (14U)
#define TIM_DIER_TDE_Msk          (0x1UL << TIM_DIER_TDE_Pos)                  /*!< 0x00004000 */
#define TIM_DIER_TDE              TIM_DIER_TDE_Msk                             /*!< Trigger DMA request enable */
#define TIM_DIER_IDXIE_Pos        (20U)
#define TIM_DIER_IDXIE_Msk        (0x1UL << TIM_DIER_IDXIE_Pos)                /*!< 0x00100000 */
#define TIM_DIER_IDXIE            TIM_DIER_IDXIE_Msk                           /*!< Encoder index interrupt enable */
#define TIM_DIER_DIRIE_Pos        (21U)
#define TIM_DIER_DIRIE_Msk        (0x1UL << TIM_DIER_DIRIE_Pos)                /*!< 0x00200000 */
#define TIM_DIER_DIRIE            TIM_DIER_DIRIE_Msk                           /*!< Encoder direction change interrupt enable */
#define TIM_DIER_IERRIE_Pos       (22U)
#define TIM_DIER_IERRIE_Msk       (0x1UL << TIM_DIER_IERRIE_Pos)               /*!< 0x00400000 */
#define TIM_DIER_IERRIE           TIM_DIER_IERRIE_Msk                          /*!< Encoder index error enable */
#define TIM_DIER_TERRIE_Pos       (23U)
#define TIM_DIER_TERRIE_Msk       (0x1UL << TIM_DIER_TERRIE_Pos)               /*!< 0x00800000 */
#define TIM_DIER_TERRIE           TIM_DIER_TERRIE_Msk                          /*!< Encoder transition error enable */

/********************  Bit definition for TIM_SR register  ********************/
#define TIM_SR_UIF_Pos            (0U)
#define TIM_SR_UIF_Msk            (0x1UL << TIM_SR_UIF_Pos)                    /*!< 0x00000001 */
#define TIM_SR_UIF                TIM_SR_UIF_Msk                               /*!< Update interrupt Flag */
#define TIM_SR_CC1IF_Pos          (1U)
#define TIM_SR_CC1IF_Msk          (0x1UL << TIM_SR_CC1IF_Pos)                  /*!< 0x00000002 */
#define TIM_SR_CC1IF              TIM_SR_CC1IF_Msk                             /*!< Capture/Compare 1 interrupt Flag */
#define TIM_SR_CC2IF_Pos          (2U)
#define TIM_SR_CC2IF_Msk          (0x1UL << TIM_SR_CC2IF_Pos)                  /*!< 0x00000004 */
#define TIM_SR_CC2IF              TIM_SR_CC2IF_Msk                             /*!< Capture/Compare 2 interrupt Flag */
#define TIM_SR_CC3IF_Pos          (3U)
#define TIM_SR_CC3IF_Msk          (0x1UL << TIM_SR_CC3IF_Pos)                  /*!< 0x00000008 */
#define TIM_SR_CC3IF              TIM_SR_CC3IF_Msk                             /*!< Capture/Compare 3 interrupt Flag */
#define TIM_SR_CC4IF_Pos          (4U)
#define TIM_SR_CC4IF_Msk          (0x1UL << TIM_SR_CC4IF_Pos)                  /*!< 0x00000010 */
#define TIM_SR_CC4IF              TIM_SR_CC4IF_Msk                             /*!< Capture/Compare 4 interrupt Flag */
#define TIM_SR_COMIF_Pos          (5U)
#define TIM_SR_COMIF_Msk          (0x1UL << TIM_SR_COMIF_Pos)                  /*!< 0x00000020 */
#define TIM_SR_COMIF              TIM_SR_COMIF_Msk                             /*!< COM interrupt Flag */
#define TIM_SR_TIF_Pos            (6U)
#define TIM_SR_TIF_Msk            (0x1UL << TIM_SR_TIF_Pos)                    /*!< 0x00000040 */
#define TIM_SR_TIF                TIM_SR_TIF_Msk                               /*!< Trigger interrupt Flag */
#define TIM_SR_BIF_Pos            (7U)
#define TIM_SR_BIF_Msk            (0x1UL << TIM_SR_BIF_Pos)                    /*!< 0x00000080 */
#define TIM_SR_BIF                TIM_SR_BIF_Msk                               /*!< Break interrupt Flag */
#define TIM_SR_B2IF_Pos           (8U)
#define TIM_SR_B2IF_Msk           (0x1UL << TIM_SR_B2IF_Pos)                   /*!< 0x00000100 */
#define TIM_SR_B2IF               TIM_SR_B2IF_Msk                              /*!< Break 2 interrupt Flag */
#define TIM_SR_CC1OF_Pos          (9U)
#define TIM_SR_CC1OF_Msk          (0x1UL << TIM_SR_CC1OF_Pos)                  /*!< 0x00000200 */
#define TIM_SR_CC1OF              TIM_SR_CC1OF_Msk                             /*!< Capture/Compare 1 Overcapture Flag */
#define TIM_SR_CC2OF_Pos          (10U)
#define TIM_SR_CC2OF_Msk          (0x1UL << TIM_SR_CC2OF_Pos)                  /*!< 0x00000400 */
#define TIM_SR_CC2OF              TIM_SR_CC2OF_Msk                             /*!< Capture/Compare 2 Overcapture Flag */
#define TIM_SR_CC3OF_Pos          (11U)
#define TIM_SR_CC3OF_Msk          (0x1UL << TIM_SR_CC3OF_Pos)                  /*!< 0x00000800 */
#define TIM_SR_CC3OF              TIM_SR_CC3OF_Msk                             /*!< Capture/Compare 3 Overcapture Flag */
#define TIM_SR_CC4OF_Pos          (12U)
#define TIM_SR_CC4OF_Msk          (0x1UL << TIM_SR_CC4OF_Pos)                  /*!< 0x00001000 */
#define TIM_SR_CC4OF              TIM_SR_CC4OF_Msk                             /*!< Capture/Compare 4 Overcapture Flag */
#define TIM_SR_SBIF_Pos           (13U)
#define TIM_SR_SBIF_Msk           (0x1UL << TIM_SR_SBIF_Pos)                   /*!< 0x00002000 */
#define TIM_SR_SBIF               TIM_SR_SBIF_Msk                              /*!< System Break interrupt Flag */
#define TIM_SR_CC5IF_Pos          (16U)
#define TIM_SR_CC5IF_Msk          (0x1UL << TIM_SR_CC5IF_Pos)                  /*!< 0x00010000 */
#define TIM_SR_CC5IF              TIM_SR_CC5IF_Msk                             /*!< Capture/Compare 5 interrupt Flag */
#define TIM_SR_CC6IF_Pos          (17U)
#define TIM_SR_CC6IF_Msk          (0x1UL << TIM_SR_CC6IF_Pos)                  /*!< 0x00020000 */
#define TIM_SR_CC6IF              TIM_SR_CC6IF_Msk                             /*!< Capture/Compare 6 interrupt Flag */
#define TIM_SR_IDXF_Pos           (20U)
#define TIM_SR_IDXF_Msk           (0x1UL << TIM_SR_IDXF_Pos)                   /*!< 0x00100000 */
#define TIM_SR_IDXF               TIM_SR_IDXF_Msk                              /*!< Encoder index interrupt flag */
#define TIM_SR_DIRF_Pos           (21U)
#define TIM_SR_DIRF_Msk           (0x1UL << TIM_SR_DIRF_Pos)                   /*!< 0x00200000 */
#define TIM_SR_DIRF               TIM_SR_DIRF_Msk                              /*!< Encoder direction change interrupt flag */
#define TIM_SR_IERRF_Pos          (22U)
#define TIM_SR_IERRF_Msk          (0x1UL << TIM_SR_IERRF_Pos)                  /*!< 0x00400000 */
#define TIM_SR_IERRF              TIM_SR_IERRF_Msk                             /*!< Encoder index error flag */
#define TIM_SR_TERRF_Pos          (23U)
#define TIM_SR_TERRF_Msk          (0x1UL << TIM_SR_TERRF_Pos)                  /*!< 0x00800000 */
#define TIM_SR_TERRF              TIM_SR_TERRF_Msk                             /*!< Encoder transition error flag */

/*******************  Bit definition for TIM_EGR register  ********************/
#define TIM_EGR_UG_Pos            (0U)
#define TIM_EGR_UG_Msk            (0x1UL << TIM_EGR_UG_Pos)                    /*!< 0x00000001 */
#define TIM_EGR_UG                TIM_EGR_UG_Msk                               /*!< Update Generation */
#define TIM_EGR_CC1G_Pos          (1U)
#define TIM_EGR_CC1G_Msk          (0x1UL << TIM_EGR_CC1G_Pos)                  /*!< 0x00000002 */
#define TIM_EGR_CC1G              TIM_EGR_CC1G_Msk                             /*!< Capture/Compare 1 Generation */
#define TIM_EGR_CC2G_Pos          (2U)
#define TIM_EGR_CC2G_Msk          (0x1UL << TIM_EGR_CC2G_Pos)                  /*!< 0x00000004 */
#define TIM_EGR_CC2G              TIM_EGR_CC2G_Msk                             /*!< Capture/Compare 2 Generation */
#define TIM_EGR_CC3G_Pos          (3U)
#define TIM_EGR_CC3G_Msk          (0x1UL << TIM_EGR_CC3G_Pos)                  /*!< 0x00000008 */
#define TIM_EGR_CC3G              TIM_EGR_CC3G_Msk                             /*!< Capture/Compare 3 Generation */
#define TIM_EGR_CC4G_Pos          (4U)
#define TIM_EGR_CC4G_Msk          (0x1UL << TIM_EGR_CC4G_Pos)                  /*!< 0x00000010 */
#define TIM_EGR_CC4G              TIM_EGR_CC4G_Msk                             /*!< Capture/Compare 4 Generation */
#define TIM_EGR_COMG_Pos          (5U)
#define TIM_EGR_COMG_Msk          (0x1UL << TIM_EGR_COMG_Pos)                  /*!< 0x00000020 */
#define TIM_EGR_COMG              TIM_EGR_COMG_Msk                             /*!< Capture/Compare Control Update Generation */
#define TIM_EGR_TG_Pos            (6U)
#define TIM_EGR_TG_Msk            (0x1UL << TIM_EGR_TG_Pos)                    /*!< 0x00000040 */
#define TIM_EGR_TG                TIM_EGR_TG_Msk                               /*!< Trigger Generation */
#define TIM_EGR_BG_Pos            (7U)
#define TIM_EGR_BG_Msk            (0x1UL << TIM_EGR_BG_Pos)                    /*!< 0x00000080 */
#define TIM_EGR_BG                TIM_EGR_BG_Msk                               /*!< Break Generation */
#define TIM_EGR_B2G_Pos           (8U)
#define TIM_EGR_B2G_Msk           (0x1UL << TIM_EGR_B2G_Pos)                   /*!< 0x00000100 */
#define TIM_EGR_B2G               TIM_EGR_B2G_Msk                              /*!< Break 2 Generation */

/******************  Bit definition for TIM_CCMR1 register  *******************/
/*---------------------------------- Common ----------------------------------*/
#define TIM_CCMR1_CC1S_Pos        (0U)
#define TIM_CCMR1_CC1S_Msk        (0x3UL << TIM_CCMR1_CC1S_Pos)                /*!< 0x00000003 */
#define TIM_CCMR1_CC1S            TIM_CCMR1_CC1S_Msk                           /*!< CC1S[1:0] bits (Capture/Compare 1 Selection) */
#define TIM_CCMR1_CC1S_0          (0x1UL << TIM_CCMR1_CC1S_Pos)                /*!< 0x00000001 */
#define TIM_CCMR1_CC1S_1          (0x2UL << TIM_CCMR1_CC1S_Pos)                /*!< 0x00000002 */
#define TIM_CCMR1_CC2S_Pos        (8U)
#define TIM_CCMR1_CC2S_Msk        (0x3UL << TIM_CCMR1_CC2S_Pos)                /*!< 0x00000300 */
#define TIM_CCMR1_CC2S            TIM_CCMR1_CC2S_Msk                           /*!< CC2S[1:0] bits (Capture/Compare 2 Selection) */
#define TIM_CCMR1_CC2S_0          (0x1UL << TIM_CCMR1_CC2S_Pos)                /*!< 0x00000100 */
#define TIM_CCMR1_CC2S_1          (0x2UL << TIM_CCMR1_CC2S_Pos)                /*!< 0x00000200 */

/*---------------------------- Input capture mode ----------------------------*/
#define TIM_CCMR1_IC1PSC_Pos      (2U)
#define TIM_CCMR1_IC1PSC_Msk      (0x3UL << TIM_CCMR1_IC1PSC_Pos)              /*!< 0x0000000C */
#define TIM_CCMR1_IC1PSC          TIM_CCMR1_IC1PSC_Msk                         /*!< IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
#define TIM_CCMR1_IC1PSC_0        (0x1UL << TIM_CCMR1_IC1PSC_Pos)              /*!< 0x00000004 */
#define TIM_CCMR1_IC1PSC_1        (0x2UL << TIM_CCMR1_IC1PSC_Pos)              /*!< 0x00000008 */
#define TIM_CCMR1_IC1F_Pos        (4U)
#define TIM_CCMR1_IC1F_Msk        (0xFUL << TIM_CCMR1_IC1F_Pos)                /*!< 0x000000F0 */
#define TIM_CCMR1_IC1F            TIM_CCMR1_IC1F_Msk                           /*!< IC1F[3:0] bits (Input Capture 1 Filter) */
#define TIM_CCMR1_IC1F_0          (0x1UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000010 */
#define TIM_CCMR1_IC1F_1          (0x2UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000020 */
#define TIM_CCMR1_IC1F_2          (0x4UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000040 */
#define TIM_CCMR1_IC1F_3          (0x8UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000080 */
#define TIM_CCMR1_IC2PSC_Pos      (10U)
#define TIM_CCMR1_IC2PSC_Msk      (0x3UL << TIM_CCMR1_IC2PSC_Pos)              /*!< 0x00000C00 */
#define TIM_CCMR1_IC2PSC          TIM_CCMR1_IC2PSC_Msk                         /*!< IC2PSC[1:0] bits (Input Capture 2 Prescaler) */
#define TIM_CCMR1_IC2PSC_0        (0x1UL << TIM_CCMR1_IC2PSC_Pos)              /*!< 0x00000400 */
#define TIM_CCMR1_IC2PSC_1        (0x2UL << TIM_CCMR1_IC2PSC_Pos)              /*!< 0x00000800 */
#define TIM_CCMR1_IC2F_Pos        (12U)
#define TIM_CCMR1_IC2F_Msk        (0xFUL << TIM_CCMR1_IC2F_Pos)                /*!< 0x0000F000 */
#define TIM_CCMR1_IC2F            TIM_CCMR1_IC2F_Msk                           /*!< IC2F[3:0] bits (Input Capture 2 Filter) */
#define TIM_CCMR1_IC2F_0          (0x1UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00001000 */
#define TIM_CCMR1_IC2F_1          (0x2UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00002000 */
#define TIM_CCMR1_IC2F_2          (0x4UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00004000 */
#define TIM_CCMR1_IC2F_3          (0x8UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00008000 */

/*---------------------------- Output compare mode ---------------------------*/
#define TIM_CCMR1_OC1FE_Pos       (2U)
#define TIM_CCMR1_OC1FE_Msk       (0x1UL << TIM_CCMR1_OC1FE_Pos)               /*!< 0x00000004 */
#define TIM_CCMR1_OC1FE           TIM_CCMR1_OC1FE_Msk                          /*!< Output Compare 1 Fast enable */
#define TIM_CCMR1_OC1PE_Pos       (3U)
#define TIM_CCMR1_OC1PE_Msk       (0x1UL << TIM_CCMR1_OC1PE_Pos)               /*!< 0x00000008 */
#define TIM_CCMR1_OC1PE           TIM_CCMR1_OC1PE_Msk                          /*!< Output Compare 1 Preload enable */
#define TIM_CCMR1_OC1M_Pos        (4U)
#define TIM_CCMR1_OC1M_Msk        (0x1007UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00010070 */
#define TIM_CCMR1_OC1M            TIM_CCMR1_OC1M_Msk                           /*!< OC1M[2:0] bits (Output Compare 1 Mode) */
#define TIM_CCMR1_OC1M_0          (0x0001UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00000010 */
#define TIM_CCMR1_OC1M_1          (0x0002UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00000020 */
#define TIM_CCMR1_OC1M_2          (0x0004UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00000040 */
#define TIM_CCMR1_OC1M_3          (0x1000UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00010000 */
#define TIM_CCMR1_OC1CE_Pos       (7U)
#define TIM_CCMR1_OC1CE_Msk       (0x1UL << TIM_CCMR1_OC1CE_Pos)               /*!< 0x00000080 */
#define TIM_CCMR1_OC1CE           TIM_CCMR1_OC1CE_Msk                          /*!< Output Compare 1 Clear Enable */
#define TIM_CCMR1_OC2FE_Pos       (10U)
#define TIM_CCMR1_OC2FE_Msk       (0x1UL << TIM_CCMR1_OC2FE_Pos)               /*!< 0x00000400 */
#define TIM_CCMR1_OC2FE           TIM_CCMR1_OC2FE_Msk                          /*!< Output Compare 2 Fast enable */
#define TIM_CCMR1_OC2PE_Pos       (11U)
#define TIM_CCMR1_OC2PE_Msk       (0x1UL << TIM_CCMR1_OC2PE_Pos)               /*!< 0x00000800 */
#define TIM_CCMR1_OC2PE           TIM_CCMR1_OC2PE_Msk                          /*!< Output Compare 2 Preload enable */
#define TIM_CCMR1_OC2M_Pos        (12U)
#define TIM_CCMR1_OC2M_Msk        (0x1007UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x01007000 */
#define TIM_CCMR1_OC2M            TIM_CCMR1_OC2M_Msk                           /*!< OC2M[2:0] bits (Output Compare 2 Mode) */
#define TIM_CCMR1_OC2M_0          (0x0001UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x00001000 */
#define TIM_CCMR1_OC2M_1          (0x0002UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x00002000 */
#define TIM_CCMR1_OC2M_2          (0x0004UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x00004000 */
#define TIM_CCMR1_OC2M_3          (0x1000UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x01000000 */
#define TIM_CCMR1_OC2CE_Pos       (15U)
#define TIM_CCMR1_OC2CE_Msk       (0x1UL << TIM_CCMR1_OC2CE_Pos)               /*!< 0x00008000 */
#define TIM_CCMR1_OC2CE           TIM_CCMR1_OC2CE_Msk                          /*!< Output Compare 2 Clear Enable */

/******************  Bit definition for TIM_CCMR2 register  *******************/
/*---------------------------------- Common ----------------------------------*/
#define TIM_CCMR2_CC3S_Pos        (0U)
#define TIM_CCMR2_CC3S_Msk        (0x3UL << TIM_CCMR2_CC3S_Pos)                /*!< 0x00000003 */
#define TIM_CCMR2_CC3S            TIM_CCMR2_CC3S_Msk                           /*!< CC3S[1:0] bits (Capture/Compare 3 Selection) */
#define TIM_CCMR2_CC3S_0          (0x1UL << TIM_CCMR2_CC3S_Pos)                /*!< 0x00000001 */
#define TIM_CCMR2_CC3S_1          (0x2UL << TIM_CCMR2_CC3S_Pos)                /*!< 0x00000002 */
#define TIM_CCMR2_CC4S_Pos        (8U)
#define TIM_CCMR2_CC4S_Msk        (0x3UL << TIM_CCMR2_CC4S_Pos)                /*!< 0x00000300 */
#define TIM_CCMR2_CC4S            TIM_CCMR2_CC4S_Msk                           /*!< CC4S[1:0] bits (Capture/Compare 4 Selection) */
#define TIM_CCMR2_CC4S_0          (0x1UL << TIM_CCMR2_CC4S_Pos)                /*!< 0x00000100 */
#define TIM_CCMR2_CC4S_1          (0x2UL << TIM_CCMR2_CC4S_Pos)                /*!< 0x00000200 */

/*---------------------------- Input capture mode ----------------------------*/
#define TIM_CCMR2_IC3PSC_Pos      (2U)
#define TIM_CCMR2_IC3PSC_Msk      (0x3UL << TIM_CCMR2_IC3PSC_Pos)              /*!< 0x0000000C */
#define TIM_CCMR2_IC3PSC          TIM_CCMR2_IC3PSC_Msk                         /*!< IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
#define TIM_CCMR2_IC3PSC_0        (0x1UL << TIM_CCMR2_IC3PSC_Pos)              /*!< 0x00000004 */
#define TIM_CCMR2_IC3PSC_1        (0x2UL << TIM_CCMR2_IC3PSC_Pos)              /*!< 0x00000008 */
#define TIM_CCMR2_IC3F_Pos        (4U)
#define TIM_CCMR2_IC3F_Msk        (0xFUL << TIM_CCMR2_IC3F_Pos)                /*!< 0x000000F0 */
#define TIM_CCMR2_IC3F            TIM_CCMR2_IC3F_Msk                           /*!< IC3F[3:0] bits (Input Capture 3 Filter) */
#define TIM_CCMR2_IC3F_0          (0x1UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000010 */
#define TIM_CCMR2_IC3F_1          (0x2UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000020 */
#define TIM_CCMR2_IC3F_2          (0x4UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000040 */
#define TIM_CCMR2_IC3F_3          (0x8UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000080 */
#define TIM_CCMR2_IC4PSC_Pos      (10U)
#define TIM_CCMR2_IC4PSC_Msk      (0x3UL << TIM_CCMR2_IC4PSC_Pos)              /*!< 0x00000C00 */
#define TIM_CCMR2_IC4PSC          TIM_CCMR2_IC4PSC_Msk                         /*!< IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
#define TIM_CCMR2_IC4PSC_0        (0x1UL << TIM_CCMR2_IC4PSC_Pos)              /*!< 0x00000400 */
#define TIM_CCMR2_IC4PSC_1        (0x2UL << TIM_CCMR2_IC4PSC_Pos)              /*!< 0x00000800 */
#define TIM_CCMR2_IC4F_Pos        (12U)
#define TIM_CCMR2_IC4F_Msk        (0xFUL << TIM_CCMR2_IC4F_Pos)                /*!< 0x0000F000 */
#define TIM_CCMR2_IC4F            TIM_CCMR2_IC4F_Msk                           /*!< IC4F[3:0] bits (Input Capture 4 Filter) */
#define TIM_CCMR2_IC4F_0          (0x1UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00001000 */
#define TIM_CCMR2_IC4F_1          (0x2UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00002000 */
#define TIM_CCMR2_IC4F_2          (0x4UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00004000 */
#define TIM_CCMR2_IC4F_3          (0x8UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00008000 */

/*---------------------------- Output compare mode ---------------------------*/
#define TIM_CCMR2_OC3FE_Pos       (2U)
#define TIM_CCMR2_OC3FE_Msk       (0x1UL << TIM_CCMR2_OC3FE_Pos)               /*!< 0x00000004 */
#define TIM_CCMR2_OC3FE           TIM_CCMR2_OC3FE_Msk                          /*!< Output Compare 3 Fast enable */
#define TIM_CCMR2_OC3PE_Pos       (3U)
#define TIM_CCMR2_OC3PE_Msk       (0x1UL << TIM_CCMR2_OC3PE_Pos)               /*!< 0x00000008 */
#define TIM_CCMR2_OC3PE           TIM_CCMR2_OC3PE_Msk                          /*!< Output Compare 3 Preload enable */
#define TIM_CCMR2_OC3M_Pos        (4U)
#define TIM_CCMR2_OC3M_Msk        (0x1007UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00010070 */
#define TIM_CCMR2_OC3M            TIM_CCMR2_OC3M_Msk                           /*!< OC3M[2:0] bits (Output Compare 3 Mode) */
#define TIM_CCMR2_OC3M_0          (0x0001UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00000010 */
#define TIM_CCMR2_OC3M_1          (0x0002UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00000020 */
#define TIM_CCMR2_OC3M_2          (0x0004UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00000040 */
#define TIM_CCMR2_OC3M_3          (0x1000UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00010000 */
#define TIM_CCMR2_OC3CE_Pos       (7U)
#define TIM_CCMR2_OC3CE_Msk       (0x1UL << TIM_CCMR2_OC3CE_Pos)               /*!< 0x00000080 */
#define TIM_CCMR2_OC3CE           TIM_CCMR2_OC3CE_Msk                          /*!< Output Compare 3 Clear Enable */
#define TIM_CCMR2_OC4FE_Pos       (10U)
#define TIM_CCMR2_OC4FE_Msk       (0x1UL << TIM_CCMR2_OC4FE_Pos)               /*!< 0x00000400 */
#define TIM_CCMR2_OC4FE           TIM_CCMR2_OC4FE_Msk                          /*!< Output Compare 4 Fast enable */
#define TIM_CCMR2_OC4PE_Pos       (11U)
#define TIM_CCMR2_OC4PE_Msk       (0x1UL << TIM_CCMR2_OC4PE_Pos)               /*!< 0x00000800 */
#define TIM_CCMR2_OC4PE           TIM_CCMR2_OC4PE_Msk                          /*!< Output Compare 4 Preload enable */
#define TIM_CCMR2_OC4M_Pos        (12U)
#define TIM_CCMR2_OC4M_Msk        (0x1007UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x01007000 */
#define TIM_CCMR2_OC4M            TIM_CCMR2_OC4M_Msk                           /*!< OC4M[2:0] bits (Output Compare 4 Mode) */
#define TIM_CCMR2_OC4M_0          (0x0001UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x00001000 */
#define TIM_CCMR2_OC4M_1          (0x0002UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x00002000 */
#define TIM_CCMR2_OC4M_2          (0x0004UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x00004000 */
#define TIM_CCMR2_OC4M_3          (0x1000UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x01000000 */
#define TIM_CCMR2_OC4CE_Pos       (15U)
#define TIM_CCMR2_OC4CE_Msk       (0x1UL << TIM_CCMR2_OC4CE_Pos)               /*!< 0x00008000 */
#define TIM_CCMR2_OC4CE           TIM_CCMR2_OC4CE_Msk                          /*!< Output Compare 4 Clear Enable */

/*******************  Bit definition for TIM_CCER register  *******************/
#define TIM_CCER_CC1E_Pos         (0U)
#define TIM_CCER_CC1E_Msk         (0x1UL << TIM_CCER_CC1E_Pos)                 /*!< 0x00000001 */
#define TIM_CCER_CC1E             TIM_CCER_CC1E_Msk                            /*!< Capture/Compare 1 output enable */
#define TIM_CCER_CC1P_Pos         (1U)
#define TIM_CCER_CC1P_Msk         (0x1UL << TIM_CCER_CC1P_Pos)                 /*!< 0x00000002 */
#define TIM_CCER_CC1P             TIM_CCER_CC1P_Msk                            /*!< Capture/Compare 1 output Polarity */
#define TIM_CCER_CC1NE_Pos        (2U)
#define TIM_CCER_CC1NE_Msk        (0x1UL << TIM_CCER_CC1NE_Pos)                /*!< 0x00000004 */
#define TIM_CCER_CC1NE            TIM_CCER_CC1NE_Msk                           /*!< Capture/Compare 1 Complementary output enable */
#define TIM_CCER_CC1NP_Pos        (3U)
#define TIM_CCER_CC1NP_Msk        (0x1UL << TIM_CCER_CC1NP_Pos)                /*!< 0x00000008 */
#define TIM_CCER_CC1NP            TIM_CCER_CC1NP_Msk                           /*!< Capture/Compare 1 Complementary output Polarity */
#define TIM_CCER_CC2E_Pos         (4U)
#define TIM_CCER_CC2E_Msk         (0x1UL << TIM_CCER_CC2E_Pos)                 /*!< 0x00000010 */
#define TIM_CCER_CC2E             TIM_CCER_CC2E_Msk                            /*!< Capture/Compare 2 output enable */
#define TIM_CCER_CC2P_Pos         (5U)
#define TIM_CCER_CC2P_Msk         (0x1UL << TIM_CCER_CC2P_Pos)                 /*!< 0x00000020 */
#define TIM_CCER_CC2P             TIM_CCER_CC2P_Msk                            /*!< Capture/Compare 2 output Polarity */
#define TIM_CCER_CC2NE_Pos        (6U)
#define TIM_CCER_CC2NE_Msk        (0x1UL << TIM_CCER_CC2NE_Pos)                /*!< 0x00000040 */
#define TIM_CCER_CC2NE            TIM_CCER_CC2NE_Msk                           /*!< Capture/Compare 2 Complementary output enable */
#define TIM_CCER_CC2NP_Pos        (7U)
#define TIM_CCER_CC2NP_Msk        (0x1UL << TIM_CCER_CC2NP_Pos)                /*!< 0x00000080 */
#define TIM_CCER_CC2NP            TIM_CCER_CC2NP_Msk                           /*!< Capture/Compare 2 Complementary output Polarity */
#define TIM_CCER_CC3E_Pos         (8U)
#define TIM_CCER_CC3E_Msk         (0x1UL << TIM_CCER_CC3E_Pos)                 /*!< 0x00000100 */
#define TIM_CCER_CC3E             TIM_CCER_CC3E_Msk                            /*!< apture/Compare 3 output enable */
#define TIM_CCER_CC3P_Pos         (9U)
#define TIM_CCER_CC3P_Msk         (0x1UL << TIM_CCER_CC3P_Pos)                 /*!< 0x00000200 */
#define TIM_CCER_CC3P             TIM_CCER_CC3P_Msk                            /*!< Capture/Compare 3 output Polarity */
#define TIM_CCER_CC3NE_Pos        (10U)
#define TIM_CCER_CC3NE_Msk        (0x1UL << TIM_CCER_CC3NE_Pos)                /*!< 0x00000400 */
#define TIM_CCER_CC3NE            TIM_CCER_CC3NE_Msk                           /*!< Capture/Compare 3 Complementary output enable */
#define TIM_CCER_CC3NP_Pos        (11U)
#define TIM_CCER_CC3NP_Msk        (0x1UL << TIM_CCER_CC3NP_Pos)                /*!< 0x00000800 */
#define TIM_CCER_CC3NP            TIM_CCER_CC3NP_Msk                           /*!< Capture/Compare 3 Complementary output Polarity */
#define TIM_CCER_CC4E_Pos         (12U)
#define TIM_CCER_CC4E_Msk         (0x1UL << TIM_CCER_CC4E_Pos)                 /*!< 0x00001000 */
#define TIM_CCER_CC4E             TIM_CCER_CC4E_Msk                            /*!< Capture/Compare 4 output enable */
#define TIM_CCER_CC4P_Pos         (13U)
#define TIM_CCER_CC4P_Msk         (0x1UL << TIM_CCER_CC4P_Pos)                 /*!< 0x00002000 */
#define TIM_CCER_CC4P             TIM_CCER_CC4P_Msk                            /*!< Capture/Compare 4 output Polarity */
#define TIM_CCER_CC4NE_Pos        (14U)
#define TIM_CCER_CC4NE_Msk        (0x1UL << TIM_CCER_CC4NE_Pos)                /*!< 0x00004000 */
#define TIM_CCER_CC4NE            TIM_CCER_CC4NE_Msk                           /*!< Capture/Compare 4 Complementary output enable */
#define TIM_CCER_CC4NP_Pos        (15U)
#define TIM_CCER_CC4NP_Msk        (0x1UL << TIM_CCER_CC4NP_Pos)                /*!< 0x00008000 */
#define TIM_CCER_CC4NP            TIM_CCER_CC4NP_Msk                           /*!< Capture/Compare 4 Complementary output Polarity */
#define TIM_CCER_CC5E_Pos         (16U)
#define TIM_CCER_CC5E_Msk         (0x1UL << TIM_CCER_CC5E_Pos)                 /*!< 0x00010000 */
#define TIM_CCER_CC5E             TIM_CCER_CC5E_Msk                            /*!< Capture/Compare 5 output enable */
#define TIM_CCER_CC5P_Pos         (17U)
#define TIM_CCER_CC5P_Msk         (0x1UL << TIM_CCER_CC5P_Pos)                 /*!< 0x00020000 */
#define TIM_CCER_CC5P             TIM_CCER_CC5P_Msk                            /*!< Capture/Compare 5 output Polarity */
#define TIM_CCER_CC6E_Pos         (20U)
#define TIM_CCER_CC6E_Msk         (0x1UL << TIM_CCER_CC6E_Pos)                 /*!< 0x00100000 */
#define TIM_CCER_CC6E             TIM_CCER_CC6E_Msk                            /*!< Capture/Compare 6 output enable */
#define TIM_CCER_CC6P_Pos         (21U)
#define TIM_CCER_CC6P_Msk         (0x1UL << TIM_CCER_CC6P_Pos)                 /*!< 0x00200000 */
#define TIM_CCER_CC6P             TIM_CCER_CC6P_Msk                            /*!< Capture/Compare 6 output Polarity */

/*******************  Bit definition for TIM_CNT register  ********************/
#define TIM_CNT_CNT_Pos           (0U)
#define TIM_CNT_CNT_Msk           (0xFFFFFFFFUL << TIM_CNT_CNT_Pos)            /*!< 0xFFFFFFFF */
#define TIM_CNT_CNT               TIM_CNT_CNT_Msk                              /*!< Counter Value */
#define TIM_CNT_UIFCPY_Pos        (31U)
#define TIM_CNT_UIFCPY_Msk        (0x1UL << TIM_CNT_UIFCPY_Pos)                /*!< 0x80000000 */
#define TIM_CNT_UIFCPY            TIM_CNT_UIFCPY_Msk                           /*!< Update interrupt flag copy (if UIFREMAP=1) */

/*******************  Bit definition for TIM_PSC register  ********************/
#define TIM_PSC_PSC_Pos           (0U)
#define TIM_PSC_PSC_Msk           (0xFFFFUL << TIM_PSC_PSC_Pos)                /*!< 0x0000FFFF */
#define TIM_PSC_PSC               TIM_PSC_PSC_Msk                              /*!< Prescaler Value */

/*******************  Bit definition for TIM_ARR register  ********************/
#define TIM_ARR_ARR_Pos           (0U)
#define TIM_ARR_ARR_Msk           (0xFFFFFFFFUL << TIM_ARR_ARR_Pos)            /*!< 0xFFFFFFFF */
#define TIM_ARR_ARR               TIM_ARR_ARR_Msk                              /*!< Actual auto-reload Value */

/*******************  Bit definition for TIM_RCR register  ********************/
#define TIM_RCR_REP_Pos           (0U)
#define TIM_RCR_REP_Msk           (0xFFFFUL << TIM_RCR_REP_Pos)                /*!< 0x0000FFFF */
#define TIM_RCR_REP               TIM_RCR_REP_Msk                              /*!< Repetition Counter Value */

/*******************  Bit definition for TIM_CCR1 register  *******************/
#define TIM_CCR1_CCR1_Pos         (0U)
#define TIM_CCR1_CCR1_Msk         (0xFFFFFFFFUL << TIM_CCR1_CCR1_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR1_CCR1             TIM_CCR1_CCR1_Msk                            /*!< Capture/Compare 1 Value */

/*******************  Bit definition for TIM_CCR2 register  *******************/
#define TIM_CCR2_CCR2_Pos         (0U)
#define TIM_CCR2_CCR2_Msk         (0xFFFFFFFFUL << TIM_CCR2_CCR2_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR2_CCR2             TIM_CCR2_CCR2_Msk                            /*!< Capture/Compare 2 Value */

/*******************  Bit definition for TIM_CCR3 register  *******************/
#define TIM_CCR3_CCR3_Pos         (0U)
#define TIM_CCR3_CCR3_Msk         (0xFFFFFFFFUL << TIM_CCR3_CCR3_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR3_CCR3             TIM_CCR3_CCR3_Msk                            /*!< Capture/Compare 3 Value */

/*******************  Bit definition for TIM_CCR4 register  *******************/
#define TIM_CCR4_CCR4_Pos         (0U)
#define TIM_CCR4_CCR4_Msk         (0xFFFFFFFFUL << TIM_CCR4_CCR4_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR4_CCR4             TIM_CCR4_CCR4_Msk                            /*!< apture/Compare 4 Value */

/*******************  Bit definition for TIM_BDTR register  *******************/
#define TIM_BDTR_DTG_Pos          (0U)
#define TIM_BDTR_DTG_Msk          (0xFFUL << TIM_BDTR_DTG_Pos)                 /*!< 0x000000FF */
#define TIM_BDTR_DTG              TIM_BDTR_DTG_Msk                             /*!< DTG[0:7] bits (Dead-Time Generator set-up) */
#define TIM_BDTR_DTG_0            (0x01UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000001 */
#define TIM_BDTR_DTG_1            (0x02UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000002 */
#define TIM_BDTR_DTG_2            (0x04UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000004 */
#define TIM_BDTR_DTG_3            (0x08UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000008 */
#define TIM_BDTR_DTG_4            (0x10UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000010 */
#define TIM_BDTR_DTG_5            (0x20UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000020 */
#define TIM_BDTR_DTG_6            (0x40UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000040 */
#define TIM_BDTR_DTG_7            (0x80UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000080 */
#define TIM_BDTR_LOCK_Pos         (8U)
#define TIM_BDTR_LOCK_Msk         (0x3UL << TIM_BDTR_LOCK_Pos)                 /*!< 0x00000300 */
#define TIM_BDTR_LOCK             TIM_BDTR_LOCK_Msk                            /*!< LOCK[1:0] bits (Lock Configuration) */
#define TIM_BDTR_LOCK_0           (0x1UL << TIM_BDTR_LOCK_Pos)                 /*!< 0x00000100 */
#define TIM_BDTR_LOCK_1           (0x2UL << TIM_BDTR_LOCK_Pos)                 /*!< 0x00000200 */
#define TIM_BDTR_OSSI_Pos         (10U)
#define TIM_BDTR_OSSI_Msk         (0x1UL << TIM_BDTR_OSSI_Pos)                 /*!< 0x00000400 */
#define TIM_BDTR_OSSI             TIM_BDTR_OSSI_Msk                            /*!<Off-State Selection for Idle mode */
#define TIM_BDTR_OSSR_Pos         (11U)
#define TIM_BDTR_OSSR_Msk         (0x1UL << TIM_BDTR_OSSR_Pos)                 /*!< 0x00000800 */
#define TIM_BDTR_OSSR             TIM_BDTR_OSSR_Msk                            /*!< Off-State Selection for Run mode */
#define TIM_BDTR_BKE_Pos          (12U)
#define TIM_BDTR_BKE_Msk          (0x1UL << TIM_BDTR_BKE_Pos)                  /*!< 0x00001000 */
#define TIM_BDTR_BKE              TIM_BDTR_BKE_Msk                             /*!< Break enable for Break 1 */
#define TIM_BDTR_BKP_Pos          (13U)
#define TIM_BDTR_BKP_Msk          (0x1UL << TIM_BDTR_BKP_Pos)                  /*!< 0x00002000 */
#define TIM_BDTR_BKP              TIM_BDTR_BKP_Msk                             /*!< Break Polarity for Break 1 */
#define TIM_BDTR_AOE_Pos          (14U)
#define TIM_BDTR_AOE_Msk          (0x1UL << TIM_BDTR_AOE_Pos)                  /*!< 0x00004000 */
#define TIM_BDTR_AOE              TIM_BDTR_AOE_Msk                             /*!< Automatic Output enable */
#define TIM_BDTR_MOE_Pos          (15U)
#define TIM_BDTR_MOE_Msk          (0x1UL << TIM_BDTR_MOE_Pos)                  /*!< 0x00008000 */
#define TIM_BDTR_MOE              TIM_BDTR_MOE_Msk                             /*!< Main Output enable */
#define TIM_BDTR_BKF_Pos          (16U)
#define TIM_BDTR_BKF_Msk          (0xFUL << TIM_BDTR_BKF_Pos)                  /*!< 0x000F0000 */
#define TIM_BDTR_BKF              TIM_BDTR_BKF_Msk                             /*!< Break Filter for Break 1 */
#define TIM_BDTR_BK2F_Pos         (20U)
#define TIM_BDTR_BK2F_Msk         (0xFUL << TIM_BDTR_BK2F_Pos)                 /*!< 0x00F00000 */
#define TIM_BDTR_BK2F             TIM_BDTR_BK2F_Msk                            /*!< Break Filter for Break 2 */
#define TIM_BDTR_BK2E_Pos         (24U)
#define TIM_BDTR_BK2E_Msk         (0x1UL << TIM_BDTR_BK2E_Pos)                 /*!< 0x01000000 */
#define TIM_BDTR_BK2E             TIM_BDTR_BK2E_Msk                            /*!< Break enable for Break 2 */
#define TIM_BDTR_BK2P_Pos         (25U)
#define TIM_BDTR_BK2P_Msk         (0x1UL << TIM_BDTR_BK2P_Pos)                 /*!< 0x02000000 */
#define TIM_BDTR_BK2P             TIM_BDTR_BK2P_Msk                            /*!< Break Polarity for Break 2 */
#define TIM_BDTR_BKDSRM_Pos       (26U)
#define TIM_BDTR_BKDSRM_Msk       (0x1UL << TIM_BDTR_BKDSRM_Pos)               /*!< 0x04000000 */
#define TIM_BDTR_BKDSRM           TIM_BDTR_BKDSRM_Msk                          /*!< Break disarming/re-arming */
#define TIM_BDTR_BK2DSRM_Pos      (27U)
#define TIM_BDTR_BK2DSRM_Msk      (0x1UL << TIM_BDTR_BK2DSRM_Pos)              /*!< 0x08000000 */
#define TIM_BDTR_BK2DSRM          TIM_BDTR_BK2DSRM_Msk                         /*!< Break2 disarming/re-arming */
#define TIM_BDTR_BKBID_Pos        (28U)
#define TIM_BDTR_BKBID_Msk        (0x1UL << TIM_BDTR_BKBID_Pos)                /*!< 0x10000000 */
#define TIM_BDTR_BKBID            TIM_BDTR_BKBID_Msk                           /*!< Break BIDirectional */
#define TIM_BDTR_BK2BID_Pos       (29U)
#define TIM_BDTR_BK2BID_Msk       (0x1UL << TIM_BDTR_BK2BID_Pos)               /*!< 0x20000000 */
#define TIM_BDTR_BK2BID           TIM_BDTR_BK2BID_Msk                          /*!< Break2 BIDirectional */

/*******************  Bit definition for TIM_CCR5 register  *******************/
#define TIM_CCR5_CCR5_Pos         (0U)
#define TIM_CCR5_CCR5_Msk         (0xFFFFFUL << TIM_CCR5_CCR5_Pos)             /*!< 0x000FFFFF */
#define TIM_CCR5_CCR5             TIM_CCR5_CCR5_Msk                            /*!< Capture/Compare 5 Value */
#define TIM_CCR5_GC5C1_Pos        (29U)
#define TIM_CCR5_GC5C1_Msk        (0x1UL << TIM_CCR5_GC5C1_Pos)                /*!< 0x20000000 */
#define TIM_CCR5_GC5C1            TIM_CCR5_GC5C1_Msk                           /*!< Group Channel 5 and Channel 1 */
#define TIM_CCR5_GC5C2_Pos        (30U)
#define TIM_CCR5_GC5C2_Msk        (0x1UL << TIM_CCR5_GC5C2_Pos)                /*!< 0x40000000 */
#define TIM_CCR5_GC5C2            TIM_CCR5_GC5C2_Msk                           /*!< Group Channel 5 and Channel 2 */
#define TIM_CCR5_GC5C3_Pos        (31U)
#define TIM_CCR5_GC5C3_Msk        (0x1UL << TIM_CCR5_GC5C3_Pos)                /*!< 0x80000000 */
#define TIM_CCR5_GC5C3            TIM_CCR5_GC5C3_Msk                           /*!< Group Channel 5 and Channel 3 */

/*******************  Bit definition for TIM_CCR6 register  *******************/
#define TIM_CCR6_CCR6_Pos         (0U)
#define TIM_CCR6_CCR6_Msk         (0xFFFFFUL << TIM_CCR6_CCR6_Pos)             /*!< 0x000FFFFF */
#define TIM_CCR6_CCR6             TIM_CCR6_CCR6_Msk                            /*!< Capture/Compare 6 Value */

/******************  Bit definition for TIM_CCMR3 register  *******************/
#define TIM_CCMR3_OC5FE_Pos       (2U)
#define TIM_CCMR3_OC5FE_Msk       (0x1UL << TIM_CCMR3_OC5FE_Pos)               /*!< 0x00000004 */
#define TIM_CCMR3_OC5FE           TIM_CCMR3_OC5FE_Msk                          /*!< Output Compare 5 Fast enable */
#define TIM_CCMR3_OC5PE_Pos       (3U)
#define TIM_CCMR3_OC5PE_Msk       (0x1UL << TIM_CCMR3_OC5PE_Pos)               /*!< 0x00000008 */
#define TIM_CCMR3_OC5PE           TIM_CCMR3_OC5PE_Msk                          /*!< Output Compare 5 Preload enable */
#define TIM_CCMR3_OC5M_Pos        (4U)
#define TIM_CCMR3_OC5M_Msk        (0x1007UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00010070 */
#define TIM_CCMR3_OC5M            TIM_CCMR3_OC5M_Msk                           /*!< OC5M[3:0] bits (Output Compare 5 Mode) */
#define TIM_CCMR3_OC5M_0          (0x0001UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00000010 */
#define TIM_CCMR3_OC5M_1          (0x0002UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00000020 */
#define TIM_CCMR3_OC5M_2          (0x0004UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00000040 */
#define TIM_CCMR3_OC5M_3          (0x1000UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00010000 */
#define TIM_CCMR3_OC5CE_Pos       (7U)
#define TIM_CCMR3_OC5CE_Msk       (0x1UL << TIM_CCMR3_OC5CE_Pos)               /*!< 0x00000080 */
#define TIM_CCMR3_OC5CE           TIM_CCMR3_OC5CE_Msk                          /*!< Output Compare 5 Clear Enable */
#define TIM_CCMR3_OC6FE_Pos       (10U)
#define TIM_CCMR3_OC6FE_Msk       (0x1UL << TIM_CCMR3_OC6FE_Pos)               /*!< 0x00000400 */
#define TIM_CCMR3_OC6FE           TIM_CCMR3_OC6FE_Msk                          /*!< Output Compare 6 Fast enable */
#define TIM_CCMR3_OC6PE_Pos       (11U)
#define TIM_CCMR3_OC6PE_Msk       (0x1UL << TIM_CCMR3_OC6PE_Pos)               /*!< 0x00000800 */
#define TIM_CCMR3_OC6PE           TIM_CCMR3_OC6PE_Msk                          /*!< Output Compare 6 Preload enable */
#define TIM_CCMR3_OC6M_Pos        (12U)
#define TIM_CCMR3_OC6M_Msk        (0x1007UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x01007000 */
#define TIM_CCMR3_OC6M            TIM_CCMR3_OC6M_Msk                           /*!< OC6M[3:0] bits (Output Compare 6 Mode) */
#define TIM_CCMR3_OC6M_0          (0x0001UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x00001000 */
#define TIM_CCMR3_OC6M_1          (0x0002UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x00002000 */
#define TIM_CCMR3_OC6M_2          (0x0004UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x00004000 */
#define TIM_CCMR3_OC6M_3          (0x1000UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x01000000 */
#define TIM_CCMR3_OC6CE_Pos       (15U)
#define TIM_CCMR3_OC6CE_Msk       (0x1UL << TIM_CCMR3_OC6CE_Pos)               /*!< 0x00008000 */
#define TIM_CCMR3_OC6CE           TIM_CCMR3_OC6CE_Msk                          /*!< Output Compare 6 Clear Enable */

/*******************  Bit definition for TIM_DTR2 register  *******************/
#define TIM_DTR2_DTGF_Pos      (0U)
#define TIM_DTR2_DTGF_Msk      (0xFFUL << TIM_DTR2_DTGF_Pos)                   /*!< 0x0000000F */
#define TIM_DTR2_DTGF          TIM_DTR2_DTGF_Msk                               /*!< DTGF[7:0] bits (Deadtime falling edge generator setup)*/
#define TIM_DTR2_DTGF_0        (0x01UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000001 */
#define TIM_DTR2_DTGF_1        (0x02UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000002 */
#define TIM_DTR2_DTGF_2        (0x04UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000004 */
#define TIM_DTR2_DTGF_3        (0x08UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000008 */
#define TIM_DTR2_DTGF_4        (0x10UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000010 */
#define TIM_DTR2_DTGF_5        (0x20UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000020 */
#define TIM_DTR2_DTGF_6        (0x40UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000040 */
#define TIM_DTR2_DTGF_7        (0x80UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000080 */
#define TIM_DTR2_DTAE_Pos      (16U)
#define TIM_DTR2_DTAE_Msk      (0x1UL << TIM_DTR2_DTAE_Pos)                    /*!< 0x00004000 */
#define TIM_DTR2_DTAE          TIM_DTR2_DTAE_Msk                               /*!< Deadtime asymmetric enable */
#define TIM_DTR2_DTPE_Pos      (17U)
#define TIM_DTR2_DTPE_Msk      (0x1UL << TIM_DTR2_DTPE_Pos)                    /*!< 0x00008000 */
#define TIM_DTR2_DTPE          TIM_DTR2_DTPE_Msk                               /*!< Deadtime prelaod enable */

/*******************  Bit definition for TIM_ECR register  ********************/
#define TIM_ECR_IE_Pos       (0U)
#define TIM_ECR_IE_Msk       (0x1UL << TIM_ECR_IE_Pos)                         /*!< 0x00000001 */
#define TIM_ECR_IE           TIM_ECR_IE_Msk                                    /*!< Index enable */
#define TIM_ECR_IDIR_Pos     (1U)
#define TIM_ECR_IDIR_Msk     (0x3UL << TIM_ECR_IDIR_Pos)                       /*!< 0x00000006 */
#define TIM_ECR_IDIR         TIM_ECR_IDIR_Msk                                  /*!< IDIR[1:0] bits (Index direction)*/
#define TIM_ECR_IDIR_0       (0x01UL << TIM_ECR_IDIR_Pos)                      /*!< 0x00000002 */
#define TIM_ECR_IDIR_1       (0x02UL << TIM_ECR_IDIR_Pos)                      /*!< 0x00000004 */
#define TIM_ECR_IBLK_Pos     (3U)
#define TIM_ECR_IBLK_Msk     (0x3UL << TIM_ECR_IBLK_Pos)                       /*!< 0x00000018 */
#define TIM_ECR_IBLK         TIM_ECR_IBLK_Msk                                  /*!< IBLK[1:0] bits (Index blanking)*/
#define TIM_ECR_IBLK_0       (0x01UL << TIM_ECR_IDIR_Pos)                      /*!< 0x00000008 */
#define TIM_ECR_IBLK_1       (0x02UL << TIM_ECR_IDIR_Pos)                      /*!< 0x00000010 */
#define TIM_ECR_FIDX_Pos     (5U)
#define TIM_ECR_FIDX_Msk     (0x1UL << TIM_ECR_FIDX_Pos)                       /*!< 0x00000020 */
#define TIM_ECR_FIDX         TIM_ECR_FIDX_Msk                                  /*!< First index enable */
#define TIM_ECR_IPOS_Pos     (6U)
#define TIM_ECR_IPOS_Msk     (0x3UL << TIM_ECR_IPOS_Pos)                       /*!< 0x0000000C0 */
#define TIM_ECR_IPOS         TIM_ECR_IPOS_Msk                                  /*!< IPOS[1:0] bits (Index positioning)*/
#define TIM_ECR_IPOS_0       (0x01UL << TIM_ECR_IPOS_Pos)                      /*!< 0x00000001 */
#define TIM_ECR_IPOS_1       (0x02UL << TIM_ECR_IPOS_Pos)                      /*!< 0x00000002 */
#define TIM_ECR_PW_Pos       (16U)
#define TIM_ECR_PW_Msk       (0xFFUL << TIM_ECR_PW_Pos)                        /*!< 0x00FF0000 */
#define TIM_ECR_PW           TIM_ECR_PW_Msk                                    /*!< PW[7:0] bits (Pulse width)*/
#define TIM_ECR_PW_0         (0x01UL << TIM_ECR_PW_Pos)                        /*!< 0x00010000 */
#define TIM_ECR_PW_1         (0x02UL << TIM_ECR_PW_Pos)                        /*!< 0x00020000 */
#define TIM_ECR_PW_2         (0x04UL << TIM_ECR_PW_Pos)                        /*!< 0x00040000 */
#define TIM_ECR_PW_3         (0x08UL << TIM_ECR_PW_Pos)                        /*!< 0x00080000 */
#define TIM_ECR_PW_4         (0x10UL << TIM_ECR_PW_Pos)                        /*!< 0x00100000 */
#define TIM_ECR_PW_5         (0x20UL << TIM_ECR_PW_Pos)                        /*!< 0x00200000 */
#define TIM_ECR_PW_6         (0x40UL << TIM_ECR_PW_Pos)                        /*!< 0x00400000 */
#define TIM_ECR_PW_7         (0x80UL << TIM_ECR_PW_Pos)                        /*!< 0x00800000 */
#define TIM_ECR_PWPRSC_Pos   (24U)
#define TIM_ECR_PWPRSC_Msk   (0x7UL << TIM_ECR_PWPRSC_Pos)                     /*!< 0x07000000 */
#define TIM_ECR_PWPRSC       TIM_ECR_PWPRSC_Msk                                /*!< PWPRSC[2:0] bits (Pulse width prescaler)*/
#define TIM_ECR_PWPRSC_0     (0x01UL << TIM_ECR_PWPRSC_Pos)                    /*!< 0x01000000 */
#define TIM_ECR_PWPRSC_1     (0x02UL << TIM_ECR_PWPRSC_Pos)                    /*!< 0x02000000 */
#define TIM_ECR_PWPRSC_2     (0x04UL << TIM_ECR_PWPRSC_Pos)                    /*!< 0x04000000 */

/*******************  Bit definition for TIM_TISEL register  ******************/
#define TIM_TISEL_TI1SEL_Pos      (0U)
#define TIM_TISEL_TI1SEL_Msk      (0xFUL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x0000000F */
#define TIM_TISEL_TI1SEL          TIM_TISEL_TI1SEL_Msk                         /*!< TI1SEL[3:0] bits (TIM1 TI1 SEL)*/
#define TIM_TISEL_TI1SEL_0        (0x1UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000001 */
#define TIM_TISEL_TI1SEL_1        (0x2UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000002 */
#define TIM_TISEL_TI1SEL_2        (0x4UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000004 */
#define TIM_TISEL_TI1SEL_3        (0x8UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000008 */
#define TIM_TISEL_TI2SEL_Pos      (8U)
#define TIM_TISEL_TI2SEL_Msk      (0xFUL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000F00 */
#define TIM_TISEL_TI2SEL          TIM_TISEL_TI2SEL_Msk                         /*!< TI2SEL[3:0] bits (TIM1 TI2 SEL)*/
#define TIM_TISEL_TI2SEL_0        (0x1UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000100 */
#define TIM_TISEL_TI2SEL_1        (0x2UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000200 */
#define TIM_TISEL_TI2SEL_2        (0x4UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000400 */
#define TIM_TISEL_TI2SEL_3        (0x8UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000800 */
#define TIM_TISEL_TI3SEL_Pos      (16U)
#define TIM_TISEL_TI3SEL_Msk      (0xFUL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x000F0000 */
#define TIM_TISEL_TI3SEL          TIM_TISEL_TI3SEL_Msk                         /*!< TI3SEL[3:0] bits (TIM1 TI3 SEL)*/
#define TIM_TISEL_TI3SEL_0        (0x1UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00010000 */
#define TIM_TISEL_TI3SEL_1        (0x2UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00020000 */
#define TIM_TISEL_TI3SEL_2        (0x4UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00040000 */
#define TIM_TISEL_TI3SEL_3        (0x8UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00080000 */
#define TIM_TISEL_TI4SEL_Pos      (24U)
#define TIM_TISEL_TI4SEL_Msk      (0xFUL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x0F000000 */
#define TIM_TISEL_TI4SEL          TIM_TISEL_TI4SEL_Msk                         /*!< TI4SEL[3:0] bits (TIM1 TI4 SEL)*/
#define TIM_TISEL_TI4SEL_0        (0x1UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x01000000 */
#define TIM_TISEL_TI4SEL_1        (0x2UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x02000000 */
#define TIM_TISEL_TI4SEL_2        (0x4UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x04000000 */
#define TIM_TISEL_TI4SEL_3        (0x8UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x08000000 */

/********************  Bit definition for TIM_AF1 register  *******************/
#define TIM1_AF1_BKINE_Pos        (0U)
#define TIM1_AF1_BKINE_Msk        (0x1UL << TIM1_AF1_BKINE_Pos)                /*!< 0x00000001 */
#define TIM1_AF1_BKINE            TIM1_AF1_BKINE_Msk                           /*!< BRK BKIN input enable */
#define TIM1_AF1_BKINP_Pos        (9U)
#define TIM1_AF1_BKINP_Msk        (0x1UL << TIM1_AF1_BKINP_Pos)                /*!< 0x00000200 */
#define TIM1_AF1_BKINP            TIM1_AF1_BKINP_Msk                           /*!< BRK BKIN input polarity */
#define TIM1_AF1_ETRSEL_Pos       (14U)
#define TIM1_AF1_ETRSEL_Msk       (0xFUL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x0003C000 */
#define TIM1_AF1_ETRSEL           TIM1_AF1_ETRSEL_Msk                          /*!< ETRSEL[3:0] bits (TIM ETR source selection) */
#define TIM1_AF1_ETRSEL_0         (0x1UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00004000 */
#define TIM1_AF1_ETRSEL_1         (0x2UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00008000 */
#define TIM1_AF1_ETRSEL_2         (0x4UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00010000 */
#define TIM1_AF1_ETRSEL_3         (0x8UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00020000 */

/*------------------------------  TIM1 specific  -----------------------------*/
#define TIM1_AF1_BKMDF1BK0E_Pos   (8U)
#define TIM1_AF1_BKMDF1BK0E_Msk   (0x1UL << TIM1_AF1_BKMDF1BK0E_Pos)           /*!< 0x00000100 */
#define TIM1_AF1_BKMDF1BK0E       TIM1_AF1_BKMDF1BK0E_Msk                      /*!< BRK mdf1_break[0] enable*/

/*------------------------------  TIM8 specific  -----------------------------*/
#define TIM8_AF1_BKMDF1BK2E_Pos   (8U)
#define TIM8_AF1_BKMDF1BK2E_Msk   (0x1UL << TIM8_AF1_BKMDF1BK2E_Pos)           /*!< 0x00000100 */
#define TIM8_AF1_BKMDF1BK2E       TIM8_AF1_BKMDF1BK2E_Msk                      /*!< BRK mdf1_break[2] enable*/

/*-----------------------------  TIM15 specific  -----------------------------*/
#define TIM15_AF1_BKMDF1BK0E_Pos  (8U)
#define TIM15_AF1_BKMDF1BK0E_Msk  (0x1UL << TIM15_AF1_BKMDF1BK0E_Pos)          /*!< 0x00000100 */
#define TIM15_AF1_BKMDF1BK0E      TIM15_AF1_BKMDF1BK0E_Msk                     /*!< BRK mdf1_break[0] enable*/

/*-----------------------------  TIM16 specific  -----------------------------*/
#define TIM16_AF1_BKMDF1BK1E_Pos  (8U)
#define TIM16_AF1_BKMDF1BK1E_Msk  (0x1UL << TIM16_AF1_BKMDF1BK1E_Pos)          /*!< 0x00000100 */
#define TIM16_AF1_BKMDF1BK1E      TIM16_AF1_BKMDF1BK1E_Msk                     /*!< BRK mdf1_break[1] enable*/

/*-----------------------------  TIM17 specific  -----------------------------*/
#define TIM17_AF1_BKMDF1BK2E_Pos  (8U)
#define TIM17_AF1_BKMDF1BK2E_Msk  (0x1UL << TIM17_AF1_BKMDF1BK2E_Pos)          /*!< 0x00000100 */
#define TIM17_AF1_BKMDF1BK2E      TIM16_AF1_BKMDF1BK2E_Msk                     /*!< BRK mdf1_break[2] enable*/

/*-----------------------------  TIM20 specific  -----------------------------*/
#define TIM20_AF1_BKMDF1BK2E_Pos  (8U)
#define TIM20_AF1_BKMDF1BK2E_Msk  (0x1UL << TIM20_AF1_BKMDF1BK0E_Pos)          /*!< 0x00000100 */
#define TIM20_AF1_BKMDF1BK2E      TIM20_AF1_BKMDF1BK0E_Msk                     /*!< BRK mdf1_break[0] enable*/

/******************  Bit definition for TIM_AF2 register  *********************/
#define TIM1_AF2_BK2INE_Pos       (0U)
#define TIM1_AF2_BK2INE_Msk       (0x1UL << TIM1_AF2_BK2INE_Pos)               /*!< 0x00000001 */
#define TIM1_AF2_BK2INE           TIM1_AF2_BK2INE_Msk                          /*!< BRK2 BKIN input enable */
#define TIM1_AF2_BK2INP_Pos       (9U)
#define TIM1_AF2_BK2INP_Msk       (0x1UL << TIM1_AF2_BK2INP_Pos)               /*!< 0x00000200 */
#define TIM1_AF2_BK2INP           TIM1_AF2_BK2INP_Msk                          /*!< BRK2 BKIN input polarity */
#define TIM1_AF2_OCRSEL_Pos       (16U)
#define TIM1_AF2_OCRSEL_Msk       (0x7UL << TIM1_AF2_OCRSEL_Pos)               /*!< 0x00070000 */
#define TIM1_AF2_OCRSEL           TIM1_AF2_OCRSEL_Msk                          /*!< ocref_clr source selection */

/*------------------------------  TIM1 specific  -----------------------------*/
#define TIM1_AF2_BK2MDF1BK1E_Pos  (8U)
#define TIM1_AF2_BK2MDF1BK1E_Msk  (0x1UL << TIM1_AF2_BKMDF1BK1E_Pos)           /*!< 0x00000100 */
#define TIM1_AF2_BK2MDF1BK1E      TIM1_AF2_BKMDF1BK1E_Msk                      /*!< BRK2 mdf1_break[1] enable */

/*-(----------------------------  TIM8 specific  -----------------------------*/
#define TIM8_AF2_BK2MDF1BK3E_Pos  (8U)
#define TIM8_AF2_BK2MDF1BK3E_Msk  (0x1UL << TIM8_AF2_BKMDF1BK3E_Pos)           /*!< 0x00000100 */
#define TIM8_AF2_BK2MDF1BK3E      TIM8_AF2_BKMDF1BK3E_Msk                      /*!< BRK2 mdf1_break[3] enable */

/*-----------------------------  TIM20 specific  -----------------------------*/
#define TIM20_AF2_BK2MDF1BK1E_Pos (8U)
#define TIM20_AF2_BK2MDF1BK1E_Msk (0x1UL << TIM20_AF2_BKMDF1BK1E_Pos)          /*!< 0x00000100 */
#define TIM20_AF2_BK2MDF1BK1E     TIM20_AF2_BKMDF1BK1E_Msk                     /*!< BRK2 mdf1_break[1] enable */

/*******************  Bit definition for TIM_DCR register  ********************/
#define TIM_DCR_DBA_Pos           (0U)
#define TIM_DCR_DBA_Msk           (0x1FUL << TIM_DCR_DBA_Pos)                  /*!< 0x0000001F */
#define TIM_DCR_DBA               TIM_DCR_DBA_Msk                              /*!< DBA[4:0] bits (DMA Base Address) */
#define TIM_DCR_DBA_0             (0x01UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000001 */
#define TIM_DCR_DBA_1             (0x02UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000002 */
#define TIM_DCR_DBA_2             (0x04UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000004 */
#define TIM_DCR_DBA_3             (0x08UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000008 */
#define TIM_DCR_DBA_4             (0x10UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000010 */
#define TIM_DCR_DBL_Pos           (8U)
#define TIM_DCR_DBL_Msk           (0x1FUL << TIM_DCR_DBL_Pos)                  /*!< 0x00001F00 */
#define TIM_DCR_DBL               TIM_DCR_DBL_Msk                              /*!< DBL[4:0] bits (DMA Burst Length) */
#define TIM_DCR_DBL_0             (0x01UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000100 */
#define TIM_DCR_DBL_1             (0x02UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000200 */
#define TIM_DCR_DBL_2             (0x04UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000400 */
#define TIM_DCR_DBL_3             (0x08UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000800 */
#define TIM_DCR_DBL_4             (0x10UL << TIM_DCR_DBL_Pos)                  /*!< 0x00001000 */
#define TIM_DCR_DBSS_Pos          (16U)
#define TIM_DCR_DBSS_Msk          (0xFUL << TIM_DCR_DBSS_Pos)                  /*!< 0x00000F00 */
#define TIM_DCR_DBSS               TIM_DCR_DBSS_Msk                            /*!< DBSS[19:16] bits (DMA Burst Source Selection) */
#define TIM_DCR_DBSS_0            (0x01UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000100 */
#define TIM_DCR_DBSS_1            (0x02UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000200 */
#define TIM_DCR_DBSS_2            (0x04UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000400 */
#define TIM_DCR_DBSS_3            (0x08UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000800 */

/*******************  Bit definition for TIM_DMAR register  *******************/
#define TIM_DMAR_DMAB_Pos         (0U)
#define TIM_DMAR_DMAB_Msk         (0xFFFFFFFFUL << TIM_DMAR_DMAB_Pos)          /*!< 0xFFFFFFFF */
#define TIM_DMAR_DMAB             TIM_DMAR_DMAB_Msk                            /*!< DMA register for burst accesses */

/******************  Bits definition for TIM_HWCFGR2 register  ****************/
#define TIM_HWCFGR2_PSC_LINEAR_Pos     (0U)
#define TIM_HWCFGR2_PSC_LINEAR_Msk     (0xFUL << TIM_HWCFGR2_PSC_LINEAR_Pos)   /*!< 0x0000000F */
#define TIM_HWCFGR2_PSC_LINEAR         TIM_HWCFGR2_PSC_LINEAR_Msk              /*!< Option register number */
#define TIM_HWCFGR2_PSC_WIDTH16_Pos    (4U)
#define TIM_HWCFGR2_PSC_WIDTH16_Msk    (0xFUL << TIM_HWCFGR2_PSC_WIDTH16_Pos)  /*!< 0x000000F0 */
#define TIM_HWCFGR2_PSC_WIDTH16        TIM_HWCFGR2_PSC_WIDTH16_Msk             /*!< Prescaler width */
#define TIM_HWCFGR2_CNT_WIDTH_Pos      (8U)
#define TIM_HWCFGR2_CNT_WIDTH_Msk      (0xFFUL << TIM_HWCFGR2_CNT_WIDTH_Pos)   /*!< 0x0000FF00 */
#define TIM_HWCFGR2_CNT_WIDTH          TIM_HWCFGR2_CNT_WIDTH_Msk               /*!< Counter width */
#define TIM_HWCFGR2_OPTIONREG_OUT_Pos  (16U)
#define TIM_HWCFGR2_OPTIONREG_OUT_Msk  (0xFFUL << TIM_HWCFGR2_OPTIONREG_OUT_Pos) /*!< 0x00FF0000 */
#define TIM_HWCFGR2_OPTIONREG_OUT      TIM_HWCFGR2_OPTIONREG_OUT_Msk           /*!< Option register number */

/*****************  Bits definition for TIM_HWCFGR1 register  *****************/
#define TIM_HWCFGR1_NB_OF_CC_Pos    (0U)
#define TIM_HWCFGR1_NB_OF_CC_Msk    (0xFUL << TIM_HWCFGR1_NB_OF_CC_Pos)        /*!< 0x0000000F */
#define TIM_HWCFGR1_NB_OF_CC        TIM_HWCFGR1_NB_OF_CC_Msk                   /*!< Number of capture / compare channel */
#define TIM_HWCFGR1_NB_OF_DT_Pos    (4U)
#define TIM_HWCFGR1_NB_OF_DT_Msk    (0xFUL << TIM_HWCFGR1_NB_OF_DT_Pos)        /*!< 0x000000F0 */
#define TIM_HWCFGR1_NB_OF_DT        TIM_HWCFGR1_NB_OF_DT_Msk                   /*!< Number of complementary outputs and dead-time generators */
#define TIM_HWCFGR1_NB_OF_SM_Pos    (8U)
#define TIM_HWCFGR1_NB_OF_SM_Msk    (0xFUL << TIM_HWCFGR1_NB_OF_SM_Pos)        /*!< 0x00000F00 */
#define TIM_HWCFGR1_NB_OF_SM        TIM_HWCFGR1_NB_OF_SM_Msk                   /*!< Number of synchronization module */
#define TIM_HWCFGR1_RCR_IMPL_Pos    (12U)
#define TIM_HWCFGR1_RCR_IMPL_Msk    (0xFUL << TIM_HWCFGR1_RCR_IMPL_Pos)        /*!< 0x0000F000 */
#define TIM_HWCFGR1_RCR_IMPL        TIM_HWCFGR1_RCR_IMPL_Msk                   /*!< Repetition counter implementation */
#define TIM_HWCFGR1_ETR_IMPL_Pos    (16U)
#define TIM_HWCFGR1_ETR_IMPL_Msk    (0xFUL << TIM_HWCFGR1_ETR_IMPL_Pos)        /*!< 0x000F0000 */
#define TIM_HWCFGR1_ETR_IMPL        TIM_HWCFGR1_ETR_IMPL_Msk                   /*!< External trigger implementation */
#define TIM_HWCFGR1_BK_IMPL_Pos     (20U)
#define TIM_HWCFGR1_BK_IMPL_Msk     (0xFUL << TIM_HWCFGR1_BK_IMPL_Pos)         /*!< 0x00F00000 */
#define TIM_HWCFGR1_BK_IMPL         TIM_HWCFGR1_BK_IMPL_Msk                    /*!< Break circuit implementation */
#define TIM_HWCFGR1_DMA_IMPL_Pos    (24U)
#define TIM_HWCFGR1_DMA_IMPL_Msk    (0xFUL << TIM_HWCFGR1_DMA_IMPL_Pos)        /*!< 0x0F000000 */
#define TIM_HWCFGR1_DMA_IMPL        TIM_HWCFGR1_DMA_IMPL_Msk                   /*!< DMA features implementation */
#define TIM_HWCFGR1_CNT_DIR_Pos     (28U)
#define TIM_HWCFGR1_CNT_DIR_Msk     (0xFUL << TIM_HWCFGR1_CNT_DIR_Pos)         /*!< 0xF0000000 */
#define TIM_HWCFGR1_CNT_DIR         TIM_HWCFGR1_CNT_DIR_Msk                    /*!< Counter direction */

/*******************  Bits definition for TIM_VERR register  ******************/
#define TIM_VERR_MINREV_Pos            (0U)
#define TIM_VERR_MINREV_Msk            (0x4UL << TIM_VERR_MINREV_Pos)          /*!< 0x0000000F */
#define TIM_VERR_MINREV                TIM_VERR_MINREV_Msk                     /*!< TIM Minor version */
#define TIM_VERR_MAJREV_Pos            (4U)
#define TIM_VERR_MAJREV_Msk            (0x4UL << TAMPC_VERR_MAJREV_Pos)        /*!< 0x000000F0 */
#define TIM_VERR_MAJREV                TIM_VERR_MAJREV_Msk                     /*!< TIM Major version */

/******************  Bits definition for TIM_IPIDR register  ******************/
#define TIM_IPIDR_ID_Pos               (0U)
#define TIM_IPIDR_ID_Msk               (0xFFFFFFFFUL << TIM_IPIDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define TIM_IPIDR_ID                   TIM_IPIDR_ID_Msk                        /*!< TIM ID */

/******************  Bits definition for TAMP_SIDR register  ******************/
#define TIM_SIDR_SID_Pos               (0U)
#define TIM_SIDR_SID_Msk               (0xFFFFFFFFUL << TIM_SIDR_SID_Pos)      /*!< 0xFFFFFFFF */
#define TIM_SIDR_SID                   TIM_SIDR_SID_Msk                        /*!< TIM Size ID */

/******************************************************************************/
/*                                                                            */
/*      Universal Synchronous Asynchronous Receiver Transmitter (USART)       */
/*                                                                            */
/******************************************************************************/
/* c7amba_sci3_v3.0 */
/******************  Bit definition for USART_CR1 register  *******************/
#define USART_CR1_UE_Pos             (0U)
#define USART_CR1_UE_Msk             (0x1U << USART_CR1_UE_Pos)                /*!< 0x00000001 */
#define USART_CR1_UE                 USART_CR1_UE_Msk                          /*!< USART Enable */
#define USART_CR1_UESM_Pos           (1U)
#define USART_CR1_UESM_Msk           (0x1U << USART_CR1_UESM_Pos)              /*!< 0x00000002 */
#define USART_CR1_UESM               USART_CR1_UESM_Msk                        /*!< USART Enable in STOP Mode */
#define USART_CR1_RE_Pos             (2U)
#define USART_CR1_RE_Msk             (0x1U << USART_CR1_RE_Pos)                /*!< 0x00000004 */
#define USART_CR1_RE                 USART_CR1_RE_Msk                          /*!< Receiver Enable */
#define USART_CR1_TE_Pos             (3U)
#define USART_CR1_TE_Msk             (0x1U << USART_CR1_TE_Pos)                /*!< 0x00000008 */
#define USART_CR1_TE                 USART_CR1_TE_Msk                          /*!< Transmitter Enable */
#define USART_CR1_IDLEIE_Pos         (4U)
#define USART_CR1_IDLEIE_Msk         (0x1U << USART_CR1_IDLEIE_Pos)            /*!< 0x00000010 */
#define USART_CR1_IDLEIE             USART_CR1_IDLEIE_Msk                      /*!< IDLE Interrupt Enable */
#define USART_CR1_RXNEIE_Pos         (5U)
#define USART_CR1_RXNEIE_Msk         (0x1U << USART_CR1_RXNEIE_Pos)            /*!< 0x00000020 */
#define USART_CR1_RXNEIE             USART_CR1_RXNEIE_Msk                      /*!< RXNE Interrupt Enable */
#define USART_CR1_RXNEIE_RXFNEIE_Pos USART_CR1_RXNEIE_Pos
#define USART_CR1_RXNEIE_RXFNEIE_Msk USART_CR1_RXNEIE_Msk                      /*!< 0x00000020 */
#define USART_CR1_RXNEIE_RXFNEIE     USART_CR1_RXNEIE_Msk                      /*!< RXNE and RX FIFO Not Empty Interrupt Enable */
#define USART_CR1_TCIE_Pos           (6U)
#define USART_CR1_TCIE_Msk           (0x1U << USART_CR1_TCIE_Pos)              /*!< 0x00000040 */
#define USART_CR1_TCIE               USART_CR1_TCIE_Msk                        /*!< Transmission Complete Interrupt Enable */
#define USART_CR1_TXEIE_Pos          (7U)
#define USART_CR1_TXEIE_Msk          (0x1U << USART_CR1_TXEIE_Pos)             /*!< 0x00000080 */
#define USART_CR1_TXEIE              USART_CR1_TXEIE_Msk                       /*!< TXE Interrupt Enable */
#define USART_CR1_TXEIE_TXFNFIE_Pos  USART_CR1_TXEIE_Pos
#define USART_CR1_TXEIE_TXFNFIE_Msk  USART_CR1_TXEIE_Msk                       /*!< 0x00000080 */
#define USART_CR1_TXEIE_TXFNFIE      USART_CR1_TXEIE_Msk                       /*!< TXE and TX FIFO Not Full Interrupt Enable */
#define USART_CR1_PEIE_Pos           (8U)
#define USART_CR1_PEIE_Msk           (0x1U << USART_CR1_PEIE_Pos)              /*!< 0x00000100 */
#define USART_CR1_PEIE               USART_CR1_PEIE_Msk                        /*!< PE Interrupt Enable */
#define USART_CR1_PS_Pos             (9U)
#define USART_CR1_PS_Msk             (0x1U << USART_CR1_PS_Pos)                /*!< 0x00000200 */
#define USART_CR1_PS                 USART_CR1_PS_Msk                          /*!< Parity Selection */
#define USART_CR1_PCE_Pos            (10U)
#define USART_CR1_PCE_Msk            (0x1U << USART_CR1_PCE_Pos)               /*!< 0x00000400 */
#define USART_CR1_PCE                USART_CR1_PCE_Msk                         /*!< Parity Control Enable */
#define USART_CR1_WAKE_Pos           (11U)
#define USART_CR1_WAKE_Msk           (0x1U << USART_CR1_WAKE_Pos)              /*!< 0x00000800 */
#define USART_CR1_WAKE               USART_CR1_WAKE_Msk                        /*!< Receiver Wakeup method */
#define USART_CR1_M_Pos              (12U)
#define USART_CR1_M_Msk              (0x10001U << USART_CR1_M_Pos)             /*!< 0x10001000 */
#define USART_CR1_M                  USART_CR1_M_Msk                           /*!< Word length */
#define USART_CR1_M_0                (0x1U << USART_CR1_M_Pos)                 /*!< 0x00001000 */
#define USART_CR1_M_1                (0x10000U << USART_CR1_M_Pos)             /*!< 0x10000000 */
#define USART_CR1_M0_Pos             (12U)
#define USART_CR1_M0_Msk             (0x1U << USART_CR1_M0_Pos)                /*!< 0x00001000 */
#define USART_CR1_M0                 USART_CR1_M0_Msk                          /*!< Word length - Bit 0 */
#define USART_CR1_MME_Pos            (13U)
#define USART_CR1_MME_Msk            (0x1U << USART_CR1_MME_Pos)               /*!< 0x00002000 */
#define USART_CR1_MME                USART_CR1_MME_Msk                         /*!< Mute Mode Enable */
#define USART_CR1_CMIE_Pos           (14U)
#define USART_CR1_CMIE_Msk           (0x1U << USART_CR1_CMIE_Pos)              /*!< 0x00004000 */
#define USART_CR1_CMIE               USART_CR1_CMIE_Msk                        /*!< Character match interrupt enable */
#define USART_CR1_OVER8_Pos          (15U)
#define USART_CR1_OVER8_Msk          (0x1U << USART_CR1_OVER8_Pos)             /*!< 0x00008000 */
#define USART_CR1_OVER8              USART_CR1_OVER8_Msk                       /*!< Oversampling by 8-bit or 16-bit mode */
#define USART_CR1_DEDT_Pos           (16U)
#define USART_CR1_DEDT_Msk           (0x1FU << USART_CR1_DEDT_Pos)             /*!< 0x001F0000 */
#define USART_CR1_DEDT               USART_CR1_DEDT_Msk                        /*!< DEDT[4:0] bits (Driver Enable Deassertion Time) */
#define USART_CR1_DEDT_0             (0x01U << USART_CR1_DEDT_Pos)             /*!< 0x00010000 */
#define USART_CR1_DEDT_1             (0x02U << USART_CR1_DEDT_Pos)             /*!< 0x00020000 */
#define USART_CR1_DEDT_2             (0x04U << USART_CR1_DEDT_Pos)             /*!< 0x00040000 */
#define USART_CR1_DEDT_3             (0x08U << USART_CR1_DEDT_Pos)             /*!< 0x00080000 */
#define USART_CR1_DEDT_4             (0x10U << USART_CR1_DEDT_Pos)             /*!< 0x00100000 */
#define USART_CR1_DEAT_Pos           (21U)
#define USART_CR1_DEAT_Msk           (0x1FU << USART_CR1_DEAT_Pos)             /*!< 0x03E00000 */
#define USART_CR1_DEAT               USART_CR1_DEAT_Msk                        /*!< DEAT[4:0] bits (Driver Enable Assertion Time) */
#define USART_CR1_DEAT_0             (0x01U << USART_CR1_DEAT_Pos)             /*!< 0x00200000 */
#define USART_CR1_DEAT_1             (0x02U << USART_CR1_DEAT_Pos)             /*!< 0x00400000 */
#define USART_CR1_DEAT_2             (0x04U << USART_CR1_DEAT_Pos)             /*!< 0x00800000 */
#define USART_CR1_DEAT_3             (0x08U << USART_CR1_DEAT_Pos)             /*!< 0x01000000 */
#define USART_CR1_DEAT_4             (0x10U << USART_CR1_DEAT_Pos)             /*!< 0x02000000 */
#define USART_CR1_RTOIE_Pos          (26U)
#define USART_CR1_RTOIE_Msk          (0x1U << USART_CR1_RTOIE_Pos)             /*!< 0x04000000 */
#define USART_CR1_RTOIE              USART_CR1_RTOIE_Msk                       /*!< Receive Time Out interrupt enable */
#define USART_CR1_EOBIE_Pos          (27U)
#define USART_CR1_EOBIE_Msk          (0x1U << USART_CR1_EOBIE_Pos)             /*!< 0x08000000 */
#define USART_CR1_EOBIE              USART_CR1_EOBIE_Msk                       /*!< End of Block interrupt enable */
#define USART_CR1_M1_Pos             (28U)
#define USART_CR1_M1_Msk             (0x1U << USART_CR1_M1_Pos)                /*!< 0x10000000 */
#define USART_CR1_M1                 USART_CR1_M1_Msk                          /*!< Word length - Bit 1 */
#define USART_CR1_FIFOEN_Pos         (29U)
#define USART_CR1_FIFOEN_Msk         (0x1U << USART_CR1_FIFOEN_Pos)            /*!< 0x20000000 */
#define USART_CR1_FIFOEN             USART_CR1_FIFOEN_Msk                      /*!< FIFO mode enable */
#define USART_CR1_TXFEIE_Pos         (30U)
#define USART_CR1_TXFEIE_Msk         (0x1U << USART_CR1_TXFEIE_Pos)            /*!< 0x40000000 */
#define USART_CR1_TXFEIE             USART_CR1_TXFEIE_Msk                      /*!< TXFIFO empty interrupt enable */
#define USART_CR1_RXFFIE_Pos         (31U)
#define USART_CR1_RXFFIE_Msk         (0x1U << USART_CR1_RXFFIE_Pos)            /*!< 0x80000000 */
#define USART_CR1_RXFFIE             USART_CR1_RXFFIE_Msk                      /*!< RXFIFO Full interrupt enable */

/******************  Bit definition for USART_CR2 register  *******************/
#define USART_CR2_SLVEN_Pos          (0U)
#define USART_CR2_SLVEN_Msk          (0x1U << USART_CR2_SLVEN_Pos)             /*!< 0x00000001 */
#define USART_CR2_SLVEN              USART_CR2_SLVEN_Msk                       /*!< Synchronous Slave mode enable */
#define USART_CR2_DIS_NSS_Pos        (3U)
#define USART_CR2_DIS_NSS_Msk        (0x1U << USART_CR2_DIS_NSS_Pos)           /*!< 0x00000008 */
#define USART_CR2_DIS_NSS            USART_CR2_DIS_NSS_Msk                     /*!< Slave Select (NSS) pin management */
#define USART_CR2_ADDM7_Pos          (4U)
#define USART_CR2_ADDM7_Msk          (0x1U << USART_CR2_ADDM7_Pos)             /*!< 0x00000010 */
#define USART_CR2_ADDM7              USART_CR2_ADDM7_Msk                       /*!< 7-bit or 4-bit Address Detection */
#define USART_CR2_LBDL_Pos           (5U)
#define USART_CR2_LBDL_Msk           (0x1U << USART_CR2_LBDL_Pos)              /*!< 0x00000020 */
#define USART_CR2_LBDL               USART_CR2_LBDL_Msk                        /*!< LIN Break Detection Length */
#define USART_CR2_LBDIE_Pos          (6U)
#define USART_CR2_LBDIE_Msk          (0x1U << USART_CR2_LBDIE_Pos)             /*!< 0x00000040 */
#define USART_CR2_LBDIE              USART_CR2_LBDIE_Msk                       /*!< LIN Break Detection Interrupt Enable */
#define USART_CR2_LBCL_Pos           (8U)
#define USART_CR2_LBCL_Msk           (0x1U << USART_CR2_LBCL_Pos)              /*!< 0x00000100 */
#define USART_CR2_LBCL               USART_CR2_LBCL_Msk                        /*!< Last Bit Clock pulse */
#define USART_CR2_CPHA_Pos           (9U)
#define USART_CR2_CPHA_Msk           (0x1U << USART_CR2_CPHA_Pos)              /*!< 0x00000200 */
#define USART_CR2_CPHA               USART_CR2_CPHA_Msk                        /*!< Clock Phase */
#define USART_CR2_CPOL_Pos           (10U)
#define USART_CR2_CPOL_Msk           (0x1U << USART_CR2_CPOL_Pos)              /*!< 0x00000400 */
#define USART_CR2_CPOL               USART_CR2_CPOL_Msk                        /*!< Clock Polarity */
#define USART_CR2_CLKEN_Pos          (11U)
#define USART_CR2_CLKEN_Msk          (0x1U << USART_CR2_CLKEN_Pos)             /*!< 0x00000800 */
#define USART_CR2_CLKEN              USART_CR2_CLKEN_Msk                       /*!< Clock Enable */
#define USART_CR2_STOP_Pos           (12U)
#define USART_CR2_STOP_Msk           (0x3U << USART_CR2_STOP_Pos)              /*!< 0x00003000 */
#define USART_CR2_STOP               USART_CR2_STOP_Msk                        /*!< STOP[1:0] bits (STOP bits) */
#define USART_CR2_STOP_0             (0x1U << USART_CR2_STOP_Pos)              /*!< 0x00001000 */
#define USART_CR2_STOP_1             (0x2U << USART_CR2_STOP_Pos)              /*!< 0x00002000 */
#define USART_CR2_LINEN_Pos          (14U)
#define USART_CR2_LINEN_Msk          (0x1U << USART_CR2_LINEN_Pos)             /*!< 0x00004000 */
#define USART_CR2_LINEN              USART_CR2_LINEN_Msk                       /*!< LIN mode enable */
#define USART_CR2_SWAP_Pos           (15U)
#define USART_CR2_SWAP_Msk           (0x1U << USART_CR2_SWAP_Pos)              /*!< 0x00008000 */
#define USART_CR2_SWAP               USART_CR2_SWAP_Msk                        /*!< SWAP TX/RX pins */
#define USART_CR2_RXINV_Pos          (16U)
#define USART_CR2_RXINV_Msk          (0x1U << USART_CR2_RXINV_Pos)             /*!< 0x00010000 */
#define USART_CR2_RXINV              USART_CR2_RXINV_Msk                       /*!< RX pin active level inversion */
#define USART_CR2_TXINV_Pos          (17U)
#define USART_CR2_TXINV_Msk          (0x1U << USART_CR2_TXINV_Pos)             /*!< 0x00020000 */
#define USART_CR2_TXINV              USART_CR2_TXINV_Msk                       /*!< TX pin active level inversion */
#define USART_CR2_DATAINV_Pos        (18U)
#define USART_CR2_DATAINV_Msk        (0x1U << USART_CR2_DATAINV_Pos)           /*!< 0x00040000 */
#define USART_CR2_DATAINV            USART_CR2_DATAINV_Msk                     /*!< Binary data inversion */
#define USART_CR2_MSBFIRST_Pos       (19U)
#define USART_CR2_MSBFIRST_Msk       (0x1U << USART_CR2_MSBFIRST_Pos)          /*!< 0x00080000 */
#define USART_CR2_MSBFIRST           USART_CR2_MSBFIRST_Msk                    /*!< Most Significant Bit First */
#define USART_CR2_ABREN_Pos          (20U)
#define USART_CR2_ABREN_Msk          (0x1U << USART_CR2_ABREN_Pos)             /*!< 0x00100000 */
#define USART_CR2_ABREN              USART_CR2_ABREN_Msk                       /*!< Auto Baud-Rate Enable*/
#define USART_CR2_ABRMODE_Pos        (21U)
#define USART_CR2_ABRMODE_Msk        (0x3U << USART_CR2_ABRMODE_Pos)           /*!< 0x00600000 */
#define USART_CR2_ABRMODE            USART_CR2_ABRMODE_Msk                     /*!< ABRMOD[1:0] bits (Auto Baud-Rate Mode) */
#define USART_CR2_ABRMODE_0          (0x1U << USART_CR2_ABRMODE_Pos)           /*!< 0x00200000 */
#define USART_CR2_ABRMODE_1          (0x2U << USART_CR2_ABRMODE_Pos)           /*!< 0x00400000 */
#define USART_CR2_RTOEN_Pos          (23U)
#define USART_CR2_RTOEN_Msk          (0x1U << USART_CR2_RTOEN_Pos)             /*!< 0x00800000 */
#define USART_CR2_RTOEN              USART_CR2_RTOEN_Msk                       /*!< Receiver Time-Out enable */
#define USART_CR2_ADD_Pos            (24U)
#define USART_CR2_ADD_Msk            (0xFFU << USART_CR2_ADD_Pos)              /*!< 0xFF000000 */
#define USART_CR2_ADD                USART_CR2_ADD_Msk                         /*!< Address of the USART node */

/******************  Bit definition for USART_CR3 register  *******************/
#define USART_CR3_EIE_Pos            (0U)
#define USART_CR3_EIE_Msk            (0x1U << USART_CR3_EIE_Pos)               /*!< 0x00000001 */
#define USART_CR3_EIE                USART_CR3_EIE_Msk                         /*!< Error Interrupt Enable */
#define USART_CR3_IREN_Pos           (1U)
#define USART_CR3_IREN_Msk           (0x1U << USART_CR3_IREN_Pos)              /*!< 0x00000002 */
#define USART_CR3_IREN               USART_CR3_IREN_Msk                        /*!< IrDA mode Enable */
#define USART_CR3_IRLP_Pos           (2U)
#define USART_CR3_IRLP_Msk           (0x1U << USART_CR3_IRLP_Pos)              /*!< 0x00000004 */
#define USART_CR3_IRLP               USART_CR3_IRLP_Msk                        /*!< IrDA Low-Power */
#define USART_CR3_HDSEL_Pos          (3U)
#define USART_CR3_HDSEL_Msk          (0x1U << USART_CR3_HDSEL_Pos)             /*!< 0x00000008 */
#define USART_CR3_HDSEL              USART_CR3_HDSEL_Msk                       /*!< Half-Duplex Selection */
#define USART_CR3_NACK_Pos           (4U)
#define USART_CR3_NACK_Msk           (0x1U << USART_CR3_NACK_Pos)              /*!< 0x00000010 */
#define USART_CR3_NACK               USART_CR3_NACK_Msk                        /*!< SmartCard NACK enable */
#define USART_CR3_SCEN_Pos           (5U)
#define USART_CR3_SCEN_Msk           (0x1U << USART_CR3_SCEN_Pos)              /*!< 0x00000020 */
#define USART_CR3_SCEN               USART_CR3_SCEN_Msk                        /*!< SmartCard mode enable */
#define USART_CR3_DMAR_Pos           (6U)
#define USART_CR3_DMAR_Msk           (0x1U << USART_CR3_DMAR_Pos)              /*!< 0x00000040 */
#define USART_CR3_DMAR               USART_CR3_DMAR_Msk                        /*!< DMA Enable Receiver */
#define USART_CR3_DMAT_Pos           (7U)
#define USART_CR3_DMAT_Msk           (0x1U << USART_CR3_DMAT_Pos)              /*!< 0x00000080 */
#define USART_CR3_DMAT               USART_CR3_DMAT_Msk                        /*!< DMA Enable Transmitter */
#define USART_CR3_RTSE_Pos           (8U)
#define USART_CR3_RTSE_Msk           (0x1U << USART_CR3_RTSE_Pos)              /*!< 0x00000100 */
#define USART_CR3_RTSE               USART_CR3_RTSE_Msk                        /*!< RTS Enable */
#define USART_CR3_CTSE_Pos           (9U)
#define USART_CR3_CTSE_Msk           (0x1U << USART_CR3_CTSE_Pos)              /*!< 0x00000200 */
#define USART_CR3_CTSE               USART_CR3_CTSE_Msk                        /*!< CTS Enable */
#define USART_CR3_CTSIE_Pos          (10U)
#define USART_CR3_CTSIE_Msk          (0x1U << USART_CR3_CTSIE_Pos)             /*!< 0x00000400 */
#define USART_CR3_CTSIE              USART_CR3_CTSIE_Msk                       /*!< CTS Interrupt Enable */
#define USART_CR3_ONEBIT_Pos         (11U)
#define USART_CR3_ONEBIT_Msk         (0x1U << USART_CR3_ONEBIT_Pos)            /*!< 0x00000800 */
#define USART_CR3_ONEBIT             USART_CR3_ONEBIT_Msk                      /*!< One sample bit method enable */
#define USART_CR3_OVRDIS_Pos         (12U)
#define USART_CR3_OVRDIS_Msk         (0x1U << USART_CR3_OVRDIS_Pos)            /*!< 0x00001000 */
#define USART_CR3_OVRDIS             USART_CR3_OVRDIS_Msk                      /*!< Overrun Disable */
#define USART_CR3_DDRE_Pos           (13U)
#define USART_CR3_DDRE_Msk           (0x1U << USART_CR3_DDRE_Pos)              /*!< 0x00002000 */
#define USART_CR3_DDRE               USART_CR3_DDRE_Msk                        /*!< DMA Disable on Reception Error */
#define USART_CR3_DEM_Pos            (14U)
#define USART_CR3_DEM_Msk            (0x1U << USART_CR3_DEM_Pos)               /*!< 0x00004000 */
#define USART_CR3_DEM                USART_CR3_DEM_Msk                         /*!< Driver Enable Mode */
#define USART_CR3_DEP_Pos            (15U)
#define USART_CR3_DEP_Msk            (0x1U << USART_CR3_DEP_Pos)               /*!< 0x00008000 */
#define USART_CR3_DEP                USART_CR3_DEP_Msk                         /*!< Driver Enable Polarity Selection */
#define USART_CR3_SCARCNT_Pos        (17U)
#define USART_CR3_SCARCNT_Msk        (0x7U << USART_CR3_SCARCNT_Pos)           /*!< 0x000E0000 */
#define USART_CR3_SCARCNT            USART_CR3_SCARCNT_Msk                     /*!< SCARCNT[2:0] bits (SmartCard Auto-Retry Count) */
#define USART_CR3_SCARCNT_0          (0x1U << USART_CR3_SCARCNT_Pos)           /*!< 0x00020000 */
#define USART_CR3_SCARCNT_1          (0x2U << USART_CR3_SCARCNT_Pos)           /*!< 0x00040000 */
#define USART_CR3_SCARCNT_2          (0x4U << USART_CR3_SCARCNT_Pos)           /*!< 0x00080000 */
#define USART_CR3_WUS_Pos            (20U)
#define USART_CR3_WUS_Msk            (0x3U << USART_CR3_WUS_Pos)               /*!< 0x00300000 */
#define USART_CR3_WUS                USART_CR3_WUS_Msk                         /*!< WUS[1:0] bits (Wake UP Interrupt Flag Selection) */
#define USART_CR3_WUS_0              (0x1U << USART_CR3_WUS_Pos)               /*!< 0x00100000 */
#define USART_CR3_WUS_1              (0x2U << USART_CR3_WUS_Pos)               /*!< 0x00200000 */
#define USART_CR3_WUFIE_Pos          (22U)
#define USART_CR3_WUFIE_Msk          (0x1U << USART_CR3_WUFIE_Pos)             /*!< 0x00400000 */
#define USART_CR3_WUFIE              USART_CR3_WUFIE_Msk                       /*!< Wake Up Interrupt Enable */
#define USART_CR3_TXFTIE_Pos         (23U)
#define USART_CR3_TXFTIE_Msk         (0x1U << USART_CR3_TXFTIE_Pos)            /*!< 0x00800000 */
#define USART_CR3_TXFTIE             USART_CR3_TXFTIE_Msk                      /*!< TXFIFO threshold interrupt enable */
#define USART_CR3_TCBGTIE_Pos        (24U)
#define USART_CR3_TCBGTIE_Msk        (0x1U << USART_CR3_TCBGTIE_Pos)           /*!< 0x01000000 */
#define USART_CR3_TCBGTIE            USART_CR3_TCBGTIE_Msk                     /*!< Transmission Complete Before Guard Time Interrupt Enable */
#define USART_CR3_RXFTCFG_Pos        (25U)
#define USART_CR3_RXFTCFG_Msk        (0x7U << USART_CR3_RXFTCFG_Pos)           /*!< 0x0E000000 */
#define USART_CR3_RXFTCFG            USART_CR3_RXFTCFG_Msk                     /*!< RXFIFO FIFO threshold configuration */
#define USART_CR3_RXFTCFG_0          (0x1U << USART_CR3_RXFTCFG_Pos)           /*!< 0x02000000 */
#define USART_CR3_RXFTCFG_1          (0x2U << USART_CR3_RXFTCFG_Pos)           /*!< 0x04000000 */
#define USART_CR3_RXFTCFG_2          (0x4U << USART_CR3_RXFTCFG_Pos)           /*!< 0x08000000 */
#define USART_CR3_RXFTIE_Pos         (28U)
#define USART_CR3_RXFTIE_Msk         (0x1U << USART_CR3_RXFTIE_Pos)            /*!< 0x10000000 */
#define USART_CR3_RXFTIE             USART_CR3_RXFTIE_Msk                      /*!< RXFIFO threshold interrupt enable */
#define USART_CR3_TXFTCFG_Pos        (29U)
#define USART_CR3_TXFTCFG_Msk        (0x7U << USART_CR3_TXFTCFG_Pos)           /*!< 0xE0000000 */
#define USART_CR3_TXFTCFG            USART_CR3_TXFTCFG_Msk                     /*!< TXFIFO threshold configuration */
#define USART_CR3_TXFTCFG_0          (0x1U << USART_CR3_TXFTCFG_Pos)           /*!< 0x20000000 */
#define USART_CR3_TXFTCFG_1          (0x2U << USART_CR3_TXFTCFG_Pos)           /*!< 0x40000000 */
#define USART_CR3_TXFTCFG_2          (0x4U << USART_CR3_TXFTCFG_Pos)           /*!< 0x80000000 */

/******************  Bit definition for USART_BRR register  *******************/
#define USART_BRR_LPUART_Pos         (0U)
#define USART_BRR_LPUART_Msk         (0xFFFFFU << USART_BRR_LPUART_Pos)        /*!< 0x000FFFFF */
#define USART_BRR_LPUART             USART_BRR_LPUART_Msk                      /*!< LPUART Baud rate register [19:0] */
#define USART_BRR_BRR_Pos            (0U)
#define USART_BRR_BRR_Msk            (0xFFFFU << USART_BRR_BRR_Pos)            /*!< 0x0000FFFF */
#define USART_BRR_BRR                USART_BRR_BRR_Msk                         /*!< USART Baud rate register [15:0] */

/******************  Bit definition for USART_GTPR register  ******************/
#define USART_GTPR_PSC_Pos           (0U)
#define USART_GTPR_PSC_Msk           (0xFFU << USART_GTPR_PSC_Pos)             /*!< 0x000000FF */
#define USART_GTPR_PSC               USART_GTPR_PSC_Msk                        /*!< PSC[7:0] bits (Prescaler value) */
#define USART_GTPR_GT_Pos            (8U)
#define USART_GTPR_GT_Msk            (0xFFU << USART_GTPR_GT_Pos)              /*!< 0x0000FF00 */
#define USART_GTPR_GT                USART_GTPR_GT_Msk                         /*!< GT[7:0] bits (Guard time value) */

/*******************  Bit definition for USART_RTOR register  *****************/
#define USART_RTOR_RTO_Pos           (0U)
#define USART_RTOR_RTO_Msk           (0xFFFFFFU << USART_RTOR_RTO_Pos)         /*!< 0x00FFFFFF */
#define USART_RTOR_RTO               USART_RTOR_RTO_Msk                        /*!< Receiver Time Out Value */
#define USART_RTOR_BLEN_Pos          (24U)
#define USART_RTOR_BLEN_Msk          (0xFFU << USART_RTOR_BLEN_Pos)            /*!< 0xFF000000 */
#define USART_RTOR_BLEN              USART_RTOR_BLEN_Msk                       /*!< Block Length */

/*******************  Bit definition for USART_RQR register  ******************/
#define USART_RQR_ABRRQ_Pos          (0U)
#define USART_RQR_ABRRQ_Msk          (0x1U << USART_RQR_ABRRQ_Pos)             /*!< 0x00000001 */
#define USART_RQR_ABRRQ              USART_RQR_ABRRQ_Msk                       /*!< Auto-Baud Rate Request */
#define USART_RQR_SBKRQ_Pos          (1U)
#define USART_RQR_SBKRQ_Msk          (0x1U << USART_RQR_SBKRQ_Pos)             /*!< 0x00000002 */
#define USART_RQR_SBKRQ              USART_RQR_SBKRQ_Msk                       /*!< Send Break Request */
#define USART_RQR_MMRQ_Pos           (2U)
#define USART_RQR_MMRQ_Msk           (0x1U << USART_RQR_MMRQ_Pos)              /*!< 0x00000004 */
#define USART_RQR_MMRQ               USART_RQR_MMRQ_Msk                        /*!< Mute Mode Request */
#define USART_RQR_RXFRQ_Pos          (3U)
#define USART_RQR_RXFRQ_Msk          (0x1U << USART_RQR_RXFRQ_Pos)             /*!< 0x00000008 */
#define USART_RQR_RXFRQ              USART_RQR_RXFRQ_Msk                       /*!< Receive Data flush Request */
#define USART_RQR_TXFRQ_Pos          (4U)
#define USART_RQR_TXFRQ_Msk          (0x1U << USART_RQR_TXFRQ_Pos)             /*!< 0x00000010 */
#define USART_RQR_TXFRQ              USART_RQR_TXFRQ_Msk                       /*!< Transmit data flush Request */

/*******************  Bit definition for USART_ISR register  ******************/
#define USART_ISR_PE_Pos             (0U)
#define USART_ISR_PE_Msk             (0x1U << USART_ISR_PE_Pos)                /*!< 0x00000001 */
#define USART_ISR_PE                 USART_ISR_PE_Msk                          /*!< Parity Error */
#define USART_ISR_FE_Pos             (1U)
#define USART_ISR_FE_Msk             (0x1U << USART_ISR_FE_Pos)                /*!< 0x00000002 */
#define USART_ISR_FE                 USART_ISR_FE_Msk                          /*!< Framing Error */
#define USART_ISR_NE_Pos             (2U)
#define USART_ISR_NE_Msk             (0x1U << USART_ISR_NE_Pos)                /*!< 0x00000004 */
#define USART_ISR_NE                 USART_ISR_NE_Msk                          /*!< Noise detected Flag */
#define USART_ISR_ORE_Pos            (3U)
#define USART_ISR_ORE_Msk            (0x1U << USART_ISR_ORE_Pos)               /*!< 0x00000008 */
#define USART_ISR_ORE                USART_ISR_ORE_Msk                         /*!< OverRun Error */
#define USART_ISR_IDLE_Pos           (4U)
#define USART_ISR_IDLE_Msk           (0x1U << USART_ISR_IDLE_Pos)              /*!< 0x00000010 */
#define USART_ISR_IDLE               USART_ISR_IDLE_Msk                        /*!< IDLE line detected */
#define USART_ISR_RXNE_Pos           (5U)
#define USART_ISR_RXNE_Msk           (0x1U << USART_ISR_RXNE_Pos)              /*!< 0x00000020 */
#define USART_ISR_RXNE               USART_ISR_RXNE_Msk                        /*!< Read Data Register Not Empty */
#define USART_ISR_RXNE_RXFNE_Pos     USART_ISR_RXNE_Pos
#define USART_ISR_RXNE_RXFNE_Msk     USART_ISR_RXNE_Msk                        /*!< 0x00000020 */
#define USART_ISR_RXNE_RXFNE         USART_ISR_RXNE_Msk                        /*!< Read Data Register or RX FIFO Not Empty */
#define USART_ISR_TC_Pos             (6U)
#define USART_ISR_TC_Msk             (0x1U << USART_ISR_TC_Pos)                /*!< 0x00000040 */
#define USART_ISR_TC                 USART_ISR_TC_Msk                          /*!< Transmission Complete */
#define USART_ISR_TXE_Pos            (7U)
#define USART_ISR_TXE_Msk            (0x1U << USART_ISR_TXE_Pos)               /*!< 0x00000080 */
#define USART_ISR_TXE                USART_ISR_TXE_Msk                         /*!< Transmit Data Register Empty */
#define USART_ISR_TXE_TXFNF_Pos      USART_ISR_TXE_Pos
#define USART_ISR_TXE_TXFNF_Msk      USART_ISR_TXE_Msk                         /*!< 0x00000080 */
#define USART_ISR_TXE_TXFNF          USART_ISR_TXE_Msk                         /*!< Transmit Data Register Empty or TX FIFO Not Full Flag */
#define USART_ISR_LBDF_Pos           (8U)
#define USART_ISR_LBDF_Msk           (0x1U << USART_ISR_LBDF_Pos)              /*!< 0x00000100 */
#define USART_ISR_LBDF               USART_ISR_LBDF_Msk                        /*!< LIN Break Detection Flag */
#define USART_ISR_CTSIF_Pos          (9U)
#define USART_ISR_CTSIF_Msk          (0x1U << USART_ISR_CTSIF_Pos)             /*!< 0x00000200 */
#define USART_ISR_CTSIF              USART_ISR_CTSIF_Msk                       /*!< CTS interrupt flag */
#define USART_ISR_CTS_Pos            (10U)
#define USART_ISR_CTS_Msk            (0x1U << USART_ISR_CTS_Pos)               /*!< 0x00000400 */
#define USART_ISR_CTS                USART_ISR_CTS_Msk                         /*!< CTS flag */
#define USART_ISR_RTOF_Pos           (11U)
#define USART_ISR_RTOF_Msk           (0x1U << USART_ISR_RTOF_Pos)              /*!< 0x00000800 */
#define USART_ISR_RTOF               USART_ISR_RTOF_Msk                        /*!< Receiver Time Out */
#define USART_ISR_EOBF_Pos           (12U)
#define USART_ISR_EOBF_Msk           (0x1U << USART_ISR_EOBF_Pos)              /*!< 0x00001000 */
#define USART_ISR_EOBF               USART_ISR_EOBF_Msk                        /*!< End Of Block Flag */
#define USART_ISR_UDR_Pos            (13U)
#define USART_ISR_UDR_Msk            (0x1U << USART_ISR_UDR_Pos)               /*!< 0x00002000 */
#define USART_ISR_UDR                USART_ISR_UDR_Msk                         /*!< SPI slave underrun error flag */
#define USART_ISR_ABRE_Pos           (14U)
#define USART_ISR_ABRE_Msk           (0x1U << USART_ISR_ABRE_Pos)              /*!< 0x00004000 */
#define USART_ISR_ABRE               USART_ISR_ABRE_Msk                        /*!< Auto-Baud Rate Error */
#define USART_ISR_ABRF_Pos           (15U)
#define USART_ISR_ABRF_Msk           (0x1U << USART_ISR_ABRF_Pos)              /*!< 0x00008000 */
#define USART_ISR_ABRF               USART_ISR_ABRF_Msk                        /*!< Auto-Baud Rate Flag */
#define USART_ISR_BUSY_Pos           (16U)
#define USART_ISR_BUSY_Msk           (0x1U << USART_ISR_BUSY_Pos)              /*!< 0x00010000 */
#define USART_ISR_BUSY               USART_ISR_BUSY_Msk                        /*!< Busy Flag */
#define USART_ISR_CMF_Pos            (17U)
#define USART_ISR_CMF_Msk            (0x1U << USART_ISR_CMF_Pos)               /*!< 0x00020000 */
#define USART_ISR_CMF                USART_ISR_CMF_Msk                         /*!< Character Match Flag */
#define USART_ISR_SBKF_Pos           (18U)
#define USART_ISR_SBKF_Msk           (0x1U << USART_ISR_SBKF_Pos)              /*!< 0x00040000 */
#define USART_ISR_SBKF               USART_ISR_SBKF_Msk                        /*!< Send Break Flag */
#define USART_ISR_RWU_Pos            (19U)
#define USART_ISR_RWU_Msk            (0x1U << USART_ISR_RWU_Pos)               /*!< 0x00080000 */
#define USART_ISR_RWU                USART_ISR_RWU_Msk                         /*!< Receive Wake Up from mute mode Flag */
#define USART_ISR_WUF_Pos            (20U)
#define USART_ISR_WUF_Msk            (0x1U << USART_ISR_WUF_Pos)               /*!< 0x00100000 */
#define USART_ISR_WUF                USART_ISR_WUF_Msk                         /*!< Wake Up from stop mode Flag */
#define USART_ISR_TEACK_Pos          (21U)
#define USART_ISR_TEACK_Msk          (0x1U << USART_ISR_TEACK_Pos)             /*!< 0x00200000 */
#define USART_ISR_TEACK              USART_ISR_TEACK_Msk                       /*!< Transmit Enable Acknowledge Flag */
#define USART_ISR_REACK_Pos          (22U)
#define USART_ISR_REACK_Msk          (0x1U << USART_ISR_REACK_Pos)             /*!< 0x00400000 */
#define USART_ISR_REACK              USART_ISR_REACK_Msk                       /*!< Receive Enable Acknowledge Flag */
#define USART_ISR_TXFE_Pos           (23U)
#define USART_ISR_TXFE_Msk           (0x1U << USART_ISR_TXFE_Pos)              /*!< 0x00800000 */
#define USART_ISR_TXFE               USART_ISR_TXFE_Msk                        /*!< TXFIFO Empty */
#define USART_ISR_RXFF_Pos           (24U)
#define USART_ISR_RXFF_Msk           (0x1U << USART_ISR_RXFF_Pos)              /*!< 0x01000000 */
#define USART_ISR_RXFF               USART_ISR_RXFF_Msk                        /*!< RXFIFO Full */
#define USART_ISR_TCBGT_Pos          (25U)
#define USART_ISR_TCBGT_Msk          (0x1U << USART_ISR_TCBGT_Pos)             /*!< 0x02000000 */
#define USART_ISR_TCBGT              USART_ISR_TCBGT_Msk                       /*!< Transmission Complete Before Guard Time completion */
#define USART_ISR_RXFT_Pos           (26U)
#define USART_ISR_RXFT_Msk           (0x1U << USART_ISR_RXFT_Pos)              /*!< 0x04000000 */
#define USART_ISR_RXFT               USART_ISR_RXFT_Msk                        /*!< RXFIFO threshold flag */
#define USART_ISR_TXFT_Pos           (27U)
#define USART_ISR_TXFT_Msk           (0x1U << USART_ISR_TXFT_Pos)              /*!< 0x08000000 */
#define USART_ISR_TXFT               USART_ISR_TXFT_Msk                        /*!< TXFIFO threshold flag */

/*******************  Bit definition for USART_ICR register  ******************/
#define USART_ICR_PECF_Pos           (0U)
#define USART_ICR_PECF_Msk           (0x1U << USART_ICR_PECF_Pos)              /*!< 0x00000001 */
#define USART_ICR_PECF               USART_ICR_PECF_Msk                        /*!< Parity Error Clear Flag */
#define USART_ICR_FECF_Pos           (1U)
#define USART_ICR_FECF_Msk           (0x1U << USART_ICR_FECF_Pos)              /*!< 0x00000002 */
#define USART_ICR_FECF               USART_ICR_FECF_Msk                        /*!< Framing Error Clear Flag */
#define USART_ICR_NECF_Pos           (2U)
#define USART_ICR_NECF_Msk           (0x1U << USART_ICR_NECF_Pos)              /*!< 0x00000004 */
#define USART_ICR_NECF               USART_ICR_NECF_Msk                        /*!< Noise detected Clear Flag */
#define USART_ICR_ORECF_Pos          (3U)
#define USART_ICR_ORECF_Msk          (0x1U << USART_ICR_ORECF_Pos)             /*!< 0x00000008 */
#define USART_ICR_ORECF              USART_ICR_ORECF_Msk                       /*!< OverRun Error Clear Flag */
#define USART_ICR_IDLECF_Pos         (4U)
#define USART_ICR_IDLECF_Msk         (0x1U << USART_ICR_IDLECF_Pos)            /*!< 0x00000010 */
#define USART_ICR_IDLECF             USART_ICR_IDLECF_Msk                      /*!< IDLE line detected Clear Flag */
#define USART_ICR_TXFECF_Pos         (5U)
#define USART_ICR_TXFECF_Msk         (0x1U << USART_ICR_TXFECF_Pos)            /*!< 0x00000020 */
#define USART_ICR_TXFECF             USART_ICR_TXFECF_Msk                      /*!< TXFIFO empty Clear flag */
#define USART_ICR_TCCF_Pos           (6U)
#define USART_ICR_TCCF_Msk           (0x1U << USART_ICR_TCCF_Pos)              /*!< 0x00000040 */
#define USART_ICR_TCCF               USART_ICR_TCCF_Msk                        /*!< Transmission Complete Clear Flag */
#define USART_ICR_TCBGTCF_Pos        (7U)
#define USART_ICR_TCBGTCF_Msk        (0x1U << USART_ICR_TCBGTCF_Pos)           /*!< 0x00000080 */
#define USART_ICR_TCBGTCF            USART_ICR_TCBGTCF_Msk                     /*!< Transmission Complete Before Guard Time Clear Flag */
#define USART_ICR_LBDCF_Pos          (8U)
#define USART_ICR_LBDCF_Msk          (0x1U << USART_ICR_LBDCF_Pos)             /*!< 0x00000100 */
#define USART_ICR_LBDCF              USART_ICR_LBDCF_Msk                       /*!< LIN Break Detection Clear Flag */
#define USART_ICR_CTSCF_Pos          (9U)
#define USART_ICR_CTSCF_Msk          (0x1U << USART_ICR_CTSCF_Pos)             /*!< 0x00000200 */
#define USART_ICR_CTSCF              USART_ICR_CTSCF_Msk                       /*!< CTS Interrupt Clear Flag */
#define USART_ICR_RTOCF_Pos          (11U)
#define USART_ICR_RTOCF_Msk          (0x1U << USART_ICR_RTOCF_Pos)             /*!< 0x00000800 */
#define USART_ICR_RTOCF              USART_ICR_RTOCF_Msk                       /*!< Receiver Time Out Clear Flag */
#define USART_ICR_EOBCF_Pos          (12U)
#define USART_ICR_EOBCF_Msk          (0x1U << USART_ICR_EOBCF_Pos)             /*!< 0x00001000 */
#define USART_ICR_EOBCF              USART_ICR_EOBCF_Msk                       /*!< End Of Block Clear Flag */
#define USART_ICR_UDRCF_Pos          (13U)
#define USART_ICR_UDRCF_Msk          (0x1U << USART_ICR_UDRCF_Pos)             /*!< 0x00002000 */
#define USART_ICR_UDRCF              USART_ICR_UDRCF_Msk                       /*!< SPI Slave Underrun Clear Flag */
#define USART_ICR_CMCF_Pos           (17U)
#define USART_ICR_CMCF_Msk           (0x1U << USART_ICR_CMCF_Pos)              /*!< 0x00020000 */
#define USART_ICR_CMCF               USART_ICR_CMCF_Msk                        /*!< Character Match Clear Flag */
#define USART_ICR_WUCF_Pos           (20U)
#define USART_ICR_WUCF_Msk           (0x1U << USART_ICR_WUCF_Pos)              /*!< 0x00100000 */
#define USART_ICR_WUCF               USART_ICR_WUCF_Msk                        /*!< Wake Up from stop mode Clear Flag */

/*******************  Bit definition for USART_RDR register  ******************/
#define USART_RDR_RDR_Pos            (0U)
#define USART_RDR_RDR_Msk            (0x1FF << USART_RDR_RDR_Pos)              /*!< 0x000001FF */
#define USART_RDR_RDR                 USART_RDR_RDR_Msk                        /*!< RDR[8:0] bits (Receive Data value) */

/*******************  Bit definition for USART_TDR register  ******************/
#define USART_TDR_TDR_Pos            (0U)
#define USART_TDR_TDR_Msk            (0x1FF << USART_TDR_TDR_Pos)              /*!< 0x000001FF */
#define USART_TDR_TDR                USART_TDR_TDR_Msk                         /*!< TDR[8:0] bits (Transmit Data value) */

/*******************  Bit definition for USART_PRESC register  ****************/
#define USART_PRESC_PRESCALER_Pos    (0U)
#define USART_PRESC_PRESCALER_Msk    (0xFU << USART_PRESC_PRESCALER_Pos)       /*!< 0x0000000F */
#define USART_PRESC_PRESCALER        USART_PRESC_PRESCALER_Msk                 /*!< PRESCALER[3:0] bits (Clock prescaler) */
#define USART_PRESC_PRESCALER_0      (0x1U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000001 */
#define USART_PRESC_PRESCALER_1      (0x2U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000002 */
#define USART_PRESC_PRESCALER_2      (0x4U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000004 */
#define USART_PRESC_PRESCALER_3      (0x8U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000008 */

/*******************  Bit definition for USART_AUTOCR register  ***************/
#define USART_AUTOCR_TDN_Pos         (0U)
#define USART_AUTOCR_TDN_Msk         (0xFFFFU << USART_AUTOCR_TDN_Pos)         /*!< 0x0000FFFF */
#define USART_AUTOCR_TDN             USART_AUTOCR_TDN_Msk                      /*!< TDN[15:0] bits (Transmission Data Number) */
#define USART_AUTOCR_TRIGPOL_Pos     (16U)
#define USART_AUTOCR_TRIGPOL_Msk     (0x1 << USART_AUTOCR_TRIGPOL_Pos)         /*!< 0x00010000 */
#define USART_AUTOCR_TRIGPOL         USART_AUTOCR_TRIGPOL_Msk                  /*!< Trigger Polarity */
#define USART_AUTOCR_TRIGEN_Pos      (17U)
#define USART_AUTOCR_TRIGEN_Msk      (0x1 << USART_AUTOCR_TRIGEN_Pos)          /*!< 0x00020000 */
#define USART_AUTOCR_TRIGEN          USART_AUTOCR_TRIGEN_Msk                   /*!< Trigger Enable */
#define USART_AUTOCR_IDLEDIS_Pos     (18U)
#define USART_AUTOCR_IDLEDIS_Msk     (0x1 << USART_AUTOCR_IDLEDIS_Pos)         /*!< 0x00040000 */
#define USART_AUTOCR_IDLEDIS         USART_AUTOCR_IDLEDIS_Pos                  /*!< Idle Frame Transmission Disable */
#define USART_AUTOCR_TRIGSEL_Pos     (19U)
#define USART_AUTOCR_TRIGSEL_Msk     (0xFU << USART_AUTOCR_TRIGSEL_Pos)        /*!< 0x00380000 */
#define USART_AUTOCR_TRIGSEL         USART_AUTOCR_TRIGSEL_Msk                  /*!< TRIGSEL[3:0] bits (Trigger selection) */
#define USART_AUTOCR_TRIGSEL_0       (0x1U << USART_AUTOCR_TRIGSEL_Pos)        /*!< 0x00080000 */
#define USART_AUTOCR_TRIGSEL_1       (0x2U << USART_AUTOCR_TRIGSEL_Pos)        /*!< 0x00100000 */
#define USART_AUTOCR_TRIGSEL_2       (0x4U << USART_AUTOCR_TRIGSEL_Pos)        /*!< 0x00200000 */
#define USART_AUTOCR_TRIGSEL_3       (0x8U << USART_AUTOCR_TRIGSEL_Pos)        /*!< 0x00400000 */
#define USART_AUTOCR_TECLREN_Pos     (31U)
#define USART_AUTOCR_TECLREN_Msk     (0x1 << USART_AUTOCR_TECLREN_Pos)         /*!< 0x80000000 */
#define USART_AUTOCR_TECLREN         USART_AUTOCR_TECLREN_Msk                  /*!< TE automatic Clear Enable */

/****************  Bit definition for USART_HWCFGR2 register  *****************/
#define USART_HWCFGR2_CFG1_Pos             (0U)
#define USART_HWCFGR2_CFG1_Msk             (0xFU << USART_HWCFGR2_CFG1_Pos)              /*!< 0x0000000F */
#define USART_HWCFGR2_CFG1                 USART_HWCFGR2_CFG1_Msk                        /*!< USART hardware configuration 1 */
#define USART_HWCFGR2_CFG2_Pos             (4U)
#define USART_HWCFGR2_CFG2_Msk             (0xFU << USART_HWCFGR2_CFG2_Pos)              /*!< 0x000000F0 */
#define USART_HWCFGR2_CFG2                 USART_HWCFGR2_CFG2_Msk                        /*!< USART hardware configuration 2 */
#define USART_HWCFGR2_CFG3_Pos             (8U)
#define USART_HWCFGR2_CFG3_Msk             (0xFU << USART_HWCFGR2_CFG3_Pos)              /*!< 0x00000F00 */
#define USART_HWCFGR2_CFG3                 USART_HWCFGR2_CFG3_Msk                        /*!< USART hardware configuration 3 */

/****************  Bit definition for USART_HWCFGR1 register  *****************/
#define USART_HWCFGR1_CFG1_Pos             (0U)
#define USART_HWCFGR1_CFG1_Msk             (0xFU << USART_HWCFGR1_CFG1_Pos)              /*!< 0x0000000F */
#define USART_HWCFGR1_CFG1                 USART_HWCFGR1_CFG1_Msk                        /*!< CFG1[3:0] = SCLK_EXTRACT */
#define USART_HWCFGR1_CFG2_Pos             (4U)
#define USART_HWCFGR1_CFG2_Msk             (0xFU << USART_HWCFGR1_CFG2_Pos)              /*!< 0x000000F0 */
#define USART_HWCFGR1_CFG2                 USART_HWCFGR1_CFG2_Msk                        /*!< CFG2[3:0] = LIN_MASTER */
#define USART_HWCFGR1_CFG3_Pos             (8U)
#define USART_HWCFGR1_CFG3_Msk             (0xFU << USART_HWCFGR1_CFG3_Pos)              /*!< 0x00000F00 */
#define USART_HWCFGR1_CFG3                 USART_HWCFGR1_CFG3_Msk                        /*!< USART hardware configuration 3 */
#define USART_HWCFGR1_CFG4_Pos             (12U)
#define USART_HWCFGR1_CFG4_Msk             (0xFU << USART_HWCFGR1_CFG4_Pos)              /*!< 0x0000F000 */
#define USART_HWCFGR1_CFG4                 USART_HWCFGR1_CFG4_Msk                        /*!< USART hardware configuration 4 */
#define USART_HWCFGR1_CFG5_Pos             (16U)
#define USART_HWCFGR1_CFG5_Msk             (0xFU << USART_HWCFGR1_CFG5_Pos)              /*!< 0x000F0000 */
#define USART_HWCFGR1_CFG5                 USART_HWCFGR1_CFG5_Msk                        /*!< USART hardware configuration 5 */
#define USART_HWCFGR1_CFG6_Pos             (20U)
#define USART_HWCFGR1_CFG6_Msk             (0xFU << USART_HWCFGR1_CFG6_Pos)              /*!< 0x00F00000 */
#define USART_HWCFGR1_CFG6                 USART_HWCFGR1_CFG6_Msk                        /*!< USART hardware configuration 6 */
#define USART_HWCFGR1_CFG7_Pos             (24U)
#define USART_HWCFGR1_CFG7_Msk             (0xFU << USART_HWCFGR1_CFG7_Pos)              /*!< 0x0F000000 */
#define USART_HWCFGR1_CFG7                 USART_HWCFGR1_CFG7_Msk                        /*!< USART hardware configuration 7 */
#define USART_HWCFGR1_CFG8_Pos             (28U)
#define USART_HWCFGR1_CFG8_Msk             (0xFU << USART_HWCFGR1_CFG8_Pos)              /*!< 0xF0000000 */
#define USART_HWCFGR1_CFG8                 USART_HWCFGR1_CFG8_Msk                        /*!< USART hardware configuration 8 */

/******************  Bit definition for USART_VERR register  ******************/
#define USART_VERR_MINREV_Pos              (0U)
#define USART_VERR_MINREV_Msk              (0xFU << USART_VERR_MINREV_Pos)               /*!< 0x0000000F */
#define USART_VERR_MINREV                  USART_VERR_MINREV_Msk                         /*!< Minor revision */
#define USART_VERR_MAJREV_Pos              (4U)
#define USART_VERR_MAJREV_Msk              (0xFU << USART_VERR_MAJREV_Pos)               /*!< 0x000000F0 */
#define USART_VERR_MAJREV                  USART_VERR_MAJREV_Msk                         /*!< Major revision */

/*****************  Bit definition for USART_IPIDR register  ******************/
#define USART_IPIDR_ID_0x0003_Pos          (0U)
#define USART_IPIDR_ID_0x0003_Msk          (0xFFFFU << USART_IPIDR_ID_0x0003_Pos)        /*!< 0x0000FFFF */
#define USART_IPIDR_ID_0x0003              USART_IPIDR_ID_0x0003_Msk                     /*!< Peripheral identifier */
#define USART_IPIDR_ID_0x0013_Pos          (16U)
#define USART_IPIDR_ID_0x0013_Msk          (0xFFFFU << USART_IPIDR_ID_0x0013_Pos)        /*!< 0xFFFF0000 */
#define USART_IPIDR_ID_0x0013              USART_IPIDR_ID_0x0013_Msk                     /*!< Peripheral identifier */

/******************  Bit definition for USART_SIDR register  ******************/
#define USART_SIDR_SID_Pos                 (0U)
#define USART_SIDR_SID_Msk                 (0xFFFFFFFFU << USART_SIDR_SID_Pos)           /*!< 0xFFFFFFFF */
#define USART_SIDR_SID                     USART_SIDR_SID_Msk                            /*!< Size identification */

/******************************************************************************/
/*                                                                            */
/*                                USB_DWC3 (USB3)                                 */
/*                                                                            */
/******************************************************************************/

/* Bit fields for USB3_GSBUSCFG0 register */
#define USB3_GSBUSCFG0_INCRBRSTENA_Pos                           0
#define USB3_GSBUSCFG0_INCRBRSTENA_Msk                           (0x1 << 0)
#define USB3_GSBUSCFG0_INCRBRSTENA                               (0x1 << 0)
#define USB3_GSBUSCFG0_INCR4BRSTENA_Pos                          1
#define USB3_GSBUSCFG0_INCR4BRSTENA_Msk                          (0x1 << 1)
#define USB3_GSBUSCFG0_INCR4BRSTENA                              (0x1 << 1)
#define USB3_GSBUSCFG0_INCR8BRSTENA_Pos                          2
#define USB3_GSBUSCFG0_INCR8BRSTENA_Msk                          (0x1 << 2)
#define USB3_GSBUSCFG0_INCR8BRSTENA                              (0x1 << 2)
#define USB3_GSBUSCFG0_INCR16BRSTENA_Pos                         3
#define USB3_GSBUSCFG0_INCR16BRSTENA_Msk                         (0x1 << 3)
#define USB3_GSBUSCFG0_INCR16BRSTENA                             (0x1 << 3)
#define USB3_GSBUSCFG0_INCR32BRSTENA_Pos                         4
#define USB3_GSBUSCFG0_INCR32BRSTENA_Msk                         (0x1 << 4)
#define USB3_GSBUSCFG0_INCR32BRSTENA                             (0x1 << 4)
#define USB3_GSBUSCFG0_INCR64BRSTENA_Pos                         5
#define USB3_GSBUSCFG0_INCR64BRSTENA_Msk                         (0x1 << 5)
#define USB3_GSBUSCFG0_INCR64BRSTENA                             (0x1 << 5)
#define USB3_GSBUSCFG0_INCR128BRSTENA_Pos                        6
#define USB3_GSBUSCFG0_INCR128BRSTENA_Msk                        (0x1 << 6)
#define USB3_GSBUSCFG0_INCR128BRSTENA                            (0x1 << 6)
#define USB3_GSBUSCFG0_INCR256BRSTENA_Pos                        7
#define USB3_GSBUSCFG0_INCR256BRSTENA_Msk                        (0x1 << 7)
#define USB3_GSBUSCFG0_INCR256BRSTENA                            (0x1 << 7)
#define USB3_GSBUSCFG0_DESBIGEND_Pos                             10
#define USB3_GSBUSCFG0_DESBIGEND_Msk                             (0x1 << 10)
#define USB3_GSBUSCFG0_DESBIGEND                                 (0x1 << 10)
#define USB3_GSBUSCFG0_DATBIGEND_Pos                             11
#define USB3_GSBUSCFG0_DATBIGEND_Msk                             (0x1 << 11)
#define USB3_GSBUSCFG0_DATBIGEND                                 (0x1 << 11)
#define USB3_GSBUSCFG0_DESWRREQINFO_Pos                          16
#define USB3_GSBUSCFG0_DESWRREQINFO_Msk                          (0xf << 16)
#define USB3_GSBUSCFG0_DESWRREQINFO                              (0xf << 16)
#define USB3_GSBUSCFG0_DATWRREQINFO_Pos                          20
#define USB3_GSBUSCFG0_DATWRREQINFO_Msk                          (0xf << 20)
#define USB3_GSBUSCFG0_DATWRREQINFO                              (0xf << 20)
#define USB3_GSBUSCFG0_DESRDREQINFO_Pos                          24
#define USB3_GSBUSCFG0_DESRDREQINFO_Msk                          (0xf << 24)
#define USB3_GSBUSCFG0_DESRDREQINFO                              (0xf << 24)
#define USB3_GSBUSCFG0_DATRDREQINFO_Pos                          28
#define USB3_GSBUSCFG0_DATRDREQINFO_Msk                          (0xf << 28)
#define USB3_GSBUSCFG0_DATRDREQINFO                              (0xf << 28)

/* Bit fields for USB3_GSBUSCFG1 register */
#define USB3_GSBUSCFG1_PipeTransLimit_Pos                        8
#define USB3_GSBUSCFG1_PipeTransLimit_Msk                        (0xf << 8)
#define USB3_GSBUSCFG1_PipeTransLimit                            (0xf << 8)
#define USB3_GSBUSCFG1_EN1KPAGE_Pos                              12
#define USB3_GSBUSCFG1_EN1KPAGE_Msk                              (0x1 << 12)
#define USB3_GSBUSCFG1_EN1KPAGE                                  (0x1 << 12)

/* Bit fields for USB3_GTXTHRCFG register */
#define USB3_GTXTHRCFG_UsbMaxTxBurstSize_Pos                     16
#define USB3_GTXTHRCFG_UsbMaxTxBurstSize_Msk                     (0xff << 16)
#define USB3_GTXTHRCFG_UsbMaxTxBurstSize                         (0xff << 16)
#define USB3_GTXTHRCFG_UsbTxPktCnt_Pos                           24
#define USB3_GTXTHRCFG_UsbTxPktCnt_Msk                           (0xf << 24)
#define USB3_GTXTHRCFG_UsbTxPktCnt                               (0xf << 24)
#define USB3_GTXTHRCFG_UsbTxPktCntSel_Pos                        29
#define USB3_GTXTHRCFG_UsbTxPktCntSel_Msk                        (0x1 << 29)
#define USB3_GTXTHRCFG_UsbTxPktCntSel                            (0x1 << 29)

/* Bit fields for USB3_GRXTHRCFG register */
#define USB3_GRXTHRCFG_ResvISOCOUTSpc_Pos                        0
#define USB3_GRXTHRCFG_ResvISOCOUTSpc_Msk                        (0x1fff << 0)
#define USB3_GRXTHRCFG_ResvISOCOUTSpc                            (0x1fff << 0)
#define USB3_GRXTHRCFG_UsbMaxRxBurstSize_Pos                     19
#define USB3_GRXTHRCFG_UsbMaxRxBurstSize_Msk                     (0x1f << 19)
#define USB3_GRXTHRCFG_UsbMaxRxBurstSize                         (0x1f << 19)
#define USB3_GRXTHRCFG_UsbRxPktCnt_Pos                           24
#define USB3_GRXTHRCFG_UsbRxPktCnt_Msk                           (0xf << 24)
#define USB3_GRXTHRCFG_UsbRxPktCnt                               (0xf << 24)
#define USB3_GRXTHRCFG_UsbRxPktCntSel_Pos                        29
#define USB3_GRXTHRCFG_UsbRxPktCntSel_Msk                        (0x1 << 29)
#define USB3_GRXTHRCFG_UsbRxPktCntSel                            (0x1 << 29)

/* Bit fields for USB3_GCTL register */
#define USB3_GCTL_DSBLCLKGTNG_Pos                                0
#define USB3_GCTL_DSBLCLKGTNG_Msk                                (0x1 << 0)
#define USB3_GCTL_DSBLCLKGTNG                                    (0x1 << 0)
#define USB3_GCTL_GblHibernationEn_Pos                           1
#define USB3_GCTL_GblHibernationEn_Msk                           (0x1 << 1)
#define USB3_GCTL_GblHibernationEn                               (0x1 << 1)
#define USB3_GCTL_U2EXIT_LFPS_Pos                                2
#define USB3_GCTL_U2EXIT_LFPS_Msk                                (0x1 << 2)
#define USB3_GCTL_U2EXIT_LFPS                                    (0x1 << 2)
#define USB3_GCTL_DISSCRAMBLE_Pos                                3
#define USB3_GCTL_DISSCRAMBLE_Msk                                (0x1 << 3)
#define USB3_GCTL_DISSCRAMBLE                                    (0x1 << 3)
#define USB3_GCTL_SCALEDOWN_Pos                                  4
#define USB3_GCTL_SCALEDOWN_Msk                                  (0x3 << 4)
#define USB3_GCTL_SCALEDOWN                                      (0x3 << 4)
#define USB3_GCTL_RAMCLKSEL_Pos                                  6
#define USB3_GCTL_RAMCLKSEL_Msk                                  (0x3 << 6)
#define USB3_GCTL_RAMCLKSEL                                      (0x3 << 6)
#define USB3_GCTL_DEBUGATTACH_Pos                                8
#define USB3_GCTL_DEBUGATTACH_Msk                                (0x1 << 8)
#define USB3_GCTL_DEBUGATTACH                                    (0x1 << 8)
#define USB3_GCTL_U1U2TimerScale_Pos                             9
#define USB3_GCTL_U1U2TimerScale_Msk                             (0x1 << 9)
#define USB3_GCTL_U1U2TimerScale                                 (0x1 << 9)
#define USB3_GCTL_SOFITPSYNC_Pos                                 10
#define USB3_GCTL_SOFITPSYNC_Msk                                 (0x1 << 10)
#define USB3_GCTL_SOFITPSYNC                                     (0x1 << 10)
#define USB3_GCTL_CORESOFTRESET_Pos                              11
#define USB3_GCTL_CORESOFTRESET_Msk                              (0x1 << 11)
#define USB3_GCTL_CORESOFTRESET                                  (0x1 << 11)
#define USB3_GCTL_PRTCAPDIR_Pos                                  12
#define USB3_GCTL_PRTCAPDIR_Msk                                  (0x3 << 12)
#define USB3_GCTL_PRTCAPDIR                                      (0x3 << 12)
#define USB3_GCTL_FRMSCLDWN_Pos                                  14
#define USB3_GCTL_FRMSCLDWN_Msk                                  (0x3 << 14)
#define USB3_GCTL_FRMSCLDWN                                      (0x3 << 14)
#define USB3_GCTL_U2RSTECN_Pos                                   16
#define USB3_GCTL_U2RSTECN_Msk                                   (0x1 << 16)
#define USB3_GCTL_U2RSTECN                                       (0x1 << 16)
#define USB3_GCTL_BYPSSETADDR_Pos                                17
#define USB3_GCTL_BYPSSETADDR_Msk                                (0x1 << 17)
#define USB3_GCTL_BYPSSETADDR                                    (0x1 << 17)
#define USB3_GCTL_MASTERFILTBYPASS_Pos                           18
#define USB3_GCTL_MASTERFILTBYPASS_Msk                           (0x1 << 18)
#define USB3_GCTL_MASTERFILTBYPASS                               (0x1 << 18)
#define USB3_GCTL_PWRDNSCALE_Pos                                 19
#define USB3_GCTL_PWRDNSCALE_Msk                                 (0x1fff << 19)
#define USB3_GCTL_PWRDNSCALE                                     (0x1fff << 19)

/* Bit fields for USB3_GPMSTS register */
#define USB3_GPMSTS_U2Wakeup_Pos                                 0
#define USB3_GPMSTS_U2Wakeup_Msk                                 (0x3ff << 0)
#define USB3_GPMSTS_U2Wakeup                                     (0x3ff << 0)
#define USB3_GPMSTS_U3Wakeup_Pos                                 12
#define USB3_GPMSTS_U3Wakeup_Msk                                 (0x1f << 12)
#define USB3_GPMSTS_U3Wakeup                                     (0x1f << 12)
#define USB3_GPMSTS_PortSel_Pos                                  28
#define USB3_GPMSTS_PortSel_Msk                                  (0xf << 28)
#define USB3_GPMSTS_PortSel                                      (0xf << 28)

/* Bit fields for USB3_GSTS register */
#define USB3_GSTS_CURMOD_Pos                                     0
#define USB3_GSTS_CURMOD_Msk                                     (0x3 << 0)
#define USB3_GSTS_CURMOD                                         (0x3 << 0)
#define USB3_GSTS_BUSERRADDRVLD_Pos                              4
#define USB3_GSTS_BUSERRADDRVLD_Msk                              (0x1 << 4)
#define USB3_GSTS_BUSERRADDRVLD                                  (0x1 << 4)
#define USB3_GSTS_CSRTimeout_Pos                                 5
#define USB3_GSTS_CSRTimeout_Msk                                 (0x1 << 5)
#define USB3_GSTS_CSRTimeout                                     (0x1 << 5)
#define USB3_GSTS_Device_IP_Pos                                  6
#define USB3_GSTS_Device_IP_Msk                                  (0x1 << 6)
#define USB3_GSTS_Device_IP                                      (0x1 << 6)
#define USB3_GSTS_Host_IP_Pos                                    7
#define USB3_GSTS_Host_IP_Msk                                    (0x1 << 7)
#define USB3_GSTS_Host_IP                                        (0x1 << 7)
#define USB3_GSTS_ADP_IP_Pos                                     8
#define USB3_GSTS_ADP_IP_Msk                                     (0x1 << 8)
#define USB3_GSTS_ADP_IP                                         (0x1 << 8)
#define USB3_GSTS_BC_IP_Pos                                      9
#define USB3_GSTS_BC_IP_Msk                                      (0x1 << 9)
#define USB3_GSTS_BC_IP                                          (0x1 << 9)
#define USB3_GSTS_OTG_IP_Pos                                     10
#define USB3_GSTS_OTG_IP_Msk                                     (0x1 << 10)
#define USB3_GSTS_OTG_IP                                         (0x1 << 10)
#define USB3_GSTS_SSIC_IP_Pos                                    11
#define USB3_GSTS_SSIC_IP_Msk                                    (0x1 << 11)
#define USB3_GSTS_SSIC_IP                                        (0x1 << 11)
#define USB3_GSTS_CBELT_Pos                                      20
#define USB3_GSTS_CBELT_Msk                                      (0xfff << 20)
#define USB3_GSTS_CBELT                                          (0xfff << 20)

/* Bit fields for USB3_GUCTL1 register */
#define USB3_GUCTL1_LOA_FILTER_EN_Pos                            0
#define USB3_GUCTL1_LOA_FILTER_EN_Msk                            (0x1 << 0)
#define USB3_GUCTL1_LOA_FILTER_EN                                (0x1 << 0)
#define USB3_GUCTL1_OVRLD_L1_SUSP_COM_Pos                        1
#define USB3_GUCTL1_OVRLD_L1_SUSP_COM_Msk                        (0x1 << 1)
#define USB3_GUCTL1_OVRLD_L1_SUSP_COM                            (0x1 << 1)
#define USB3_GUCTL1_HC_PARCHK_DISABLE_Pos                        2
#define USB3_GUCTL1_HC_PARCHK_DISABLE_Msk                        (0x1 << 2)
#define USB3_GUCTL1_HC_PARCHK_DISABLE                            (0x1 << 2)
#define USB3_GUCTL1_HC_ERRATA_ENABLE_Pos                         3
#define USB3_GUCTL1_HC_ERRATA_ENABLE_Msk                         (0x1 << 3)
#define USB3_GUCTL1_HC_ERRATA_ENABLE                             (0x1 << 3)
#define USB3_GUCTL1_L1_SUSP_THRLD_FOR_HOST_Pos                   4
#define USB3_GUCTL1_L1_SUSP_THRLD_FOR_HOST_Msk                   (0xf << 4)
#define USB3_GUCTL1_L1_SUSP_THRLD_FOR_HOST                       (0xf << 4)
#define USB3_GUCTL1_L1_SUSP_THRLD_EN_FOR_HOST_Pos                8
#define USB3_GUCTL1_L1_SUSP_THRLD_EN_FOR_HOST_Msk                (0x1 << 8)
#define USB3_GUCTL1_L1_SUSP_THRLD_EN_FOR_HOST                    (0x1 << 8)
#define USB3_GUCTL1_DEV_HS_NYET_BULK_SPR_Pos                     9
#define USB3_GUCTL1_DEV_HS_NYET_BULK_SPR_Msk                     (0x1 << 9)
#define USB3_GUCTL1_DEV_HS_NYET_BULK_SPR                         (0x1 << 9)
#define USB3_GUCTL1_RESUME_OPMODE_HS_HOST_Pos                    10
#define USB3_GUCTL1_RESUME_OPMODE_HS_HOST_Msk                    (0x1 << 10)
#define USB3_GUCTL1_RESUME_OPMODE_HS_HOST                        (0x1 << 10)
#define USB3_GUCTL1_PARKMODE_DISABLE_FSLS_Pos                    15
#define USB3_GUCTL1_PARKMODE_DISABLE_FSLS_Msk                    (0x1 << 15)
#define USB3_GUCTL1_PARKMODE_DISABLE_FSLS                        (0x1 << 15)
#define USB3_GUCTL1_PARKMODE_DISABLE_HS_Pos                      16
#define USB3_GUCTL1_PARKMODE_DISABLE_HS_Msk                      (0x1 << 16)
#define USB3_GUCTL1_PARKMODE_DISABLE_HS                          (0x1 << 16)
#define USB3_GUCTL1_PARKMODE_DISABLE_SS_Pos                      17
#define USB3_GUCTL1_PARKMODE_DISABLE_SS_Msk                      (0x1 << 17)
#define USB3_GUCTL1_PARKMODE_DISABLE_SS                          (0x1 << 17)
#define USB3_GUCTL1_NAK_PER_ENH_HS_Pos                           18
#define USB3_GUCTL1_NAK_PER_ENH_HS_Msk                           (0x1 << 18)
#define USB3_GUCTL1_NAK_PER_ENH_HS                               (0x1 << 18)
#define USB3_GUCTL1_NAK_PER_ENH_FS_Pos                           19
#define USB3_GUCTL1_NAK_PER_ENH_FS_Msk                           (0x1 << 19)
#define USB3_GUCTL1_NAK_PER_ENH_FS                               (0x1 << 19)
#define USB3_GUCTL1_DEV_LSP_TAIL_LOCK_DIS_Pos                    20
#define USB3_GUCTL1_DEV_LSP_TAIL_LOCK_DIS_Msk                    (0x1 << 20)
#define USB3_GUCTL1_DEV_LSP_TAIL_LOCK_DIS                        (0x1 << 20)
#define USB3_GUCTL1_IP_GAP_ADD_ON_Pos                            21
#define USB3_GUCTL1_IP_GAP_ADD_ON_Msk                            (0x7 << 21)
#define USB3_GUCTL1_IP_GAP_ADD_ON                                (0x7 << 21)
#define USB3_GUCTL1_DEV_L1_EXIT_BY_HW_Pos                        24
#define USB3_GUCTL1_DEV_L1_EXIT_BY_HW_Msk                        (0x1 << 24)
#define USB3_GUCTL1_DEV_L1_EXIT_BY_HW                            (0x1 << 24)
#define USB3_GUCTL1_P3_IN_U2_Pos                                 25
#define USB3_GUCTL1_P3_IN_U2_Msk                                 (0x1 << 25)
#define USB3_GUCTL1_P3_IN_U2                                     (0x1 << 25)
#define USB3_GUCTL1_DEV_FORCE_20_CLK_FOR_30_CLK_Pos              26
#define USB3_GUCTL1_DEV_FORCE_20_CLK_FOR_30_CLK_Msk              (0x1 << 26)
#define USB3_GUCTL1_DEV_FORCE_20_CLK_FOR_30_CLK                  (0x1 << 26)
#define USB3_GUCTL1_DEV_TRB_OUT_SPR_IND_Pos                      27
#define USB3_GUCTL1_DEV_TRB_OUT_SPR_IND_Msk                      (0x1 << 27)
#define USB3_GUCTL1_DEV_TRB_OUT_SPR_IND                          (0x1 << 27)
#define USB3_GUCTL1_TX_IPGAP_LINECHECK_DIS_Pos                   28
#define USB3_GUCTL1_TX_IPGAP_LINECHECK_DIS_Msk                   (0x1 << 28)
#define USB3_GUCTL1_TX_IPGAP_LINECHECK_DIS                       (0x1 << 28)
#define USB3_GUCTL1_FILTER_SE0_FSLS_EOP_Pos                      29
#define USB3_GUCTL1_FILTER_SE0_FSLS_EOP_Msk                      (0x1 << 29)
#define USB3_GUCTL1_FILTER_SE0_FSLS_EOP                          (0x1 << 29)
#define USB3_GUCTL1_DS_RXDET_MAX_TOUT_CTRL_Pos                   30
#define USB3_GUCTL1_DS_RXDET_MAX_TOUT_CTRL_Msk                   (0x1 << 30)
#define USB3_GUCTL1_DS_RXDET_MAX_TOUT_CTRL                       (0x1 << 30)
#define USB3_GUCTL1_DEV_DECOUPLE_L1L2_EVT_Pos                    31
#define USB3_GUCTL1_DEV_DECOUPLE_L1L2_EVT_Msk                    (0x1 << 31)
#define USB3_GUCTL1_DEV_DECOUPLE_L1L2_EVT                        (0x1 << 31)

/* Bit fields for USB3_GSNPSID register */
#define USB3_GSNPSID_SYNOPSYSID_Pos                              0
#define USB3_GSNPSID_SYNOPSYSID_Msk                              (0xFFFFFFFF << 0)
#define USB3_GSNPSID_SYNOPSYSID                                  (0xFFFFFFFF << 0)

/* Bit fields for USB3_GGPIO register */
#define USB3_GGPIO_GPI_Pos                                       0
#define USB3_GGPIO_GPI_Msk                                       (0xffff << 0)
#define USB3_GGPIO_GPI                                           (0xffff << 0)
#define USB3_GGPIO_GPO_Pos                                       16
#define USB3_GGPIO_GPO_Msk                                       (0xffff << 16)
#define USB3_GGPIO_GPO                                           (0xffff << 16)

/* Bit fields for USB3_GUID register */
#define USB3_GUID_USERID_Pos                                     0
#define USB3_GUID_USERID_Msk                                     (0xFFFFFFFF << 0)
#define USB3_GUID_USERID                                         (0xFFFFFFFF << 0)

/* Bit fields for USB3_GUCTL register */
#define USB3_GUCTL_DTFT_Pos                                      0
#define USB3_GUCTL_DTFT_Msk                                      (0x1ff << 0)
#define USB3_GUCTL_DTFT                                          (0x1ff << 0)
#define USB3_GUCTL_DTCT_Pos                                      9
#define USB3_GUCTL_DTCT_Msk                                      (0x3 << 9)
#define USB3_GUCTL_DTCT                                          (0x3 << 9)
#define USB3_GUCTL_InsrtExtrFSBODI_Pos                           11
#define USB3_GUCTL_InsrtExtrFSBODI_Msk                           (0x1 << 11)
#define USB3_GUCTL_InsrtExtrFSBODI                               (0x1 << 11)
#define USB3_GUCTL_ExtCapSupptEN_Pos                             12
#define USB3_GUCTL_ExtCapSupptEN_Msk                             (0x1 << 12)
#define USB3_GUCTL_ExtCapSupptEN                                 (0x1 << 12)
#define USB3_GUCTL_EnOverlapChk_Pos                              13
#define USB3_GUCTL_EnOverlapChk_Msk                              (0x1 << 13)
#define USB3_GUCTL_EnOverlapChk                                  (0x1 << 13)
#define USB3_GUCTL_USBHstInAutoRetryEn_Pos                       14
#define USB3_GUCTL_USBHstInAutoRetryEn_Msk                       (0x1 << 14)
#define USB3_GUCTL_USBHstInAutoRetryEn                           (0x1 << 14)
#define USB3_GUCTL_ResBwHSEPS_Pos                                16
#define USB3_GUCTL_ResBwHSEPS_Msk                                (0x1 << 16)
#define USB3_GUCTL_ResBwHSEPS                                    (0x1 << 16)
#define USB3_GUCTL_SprsCtrlTransEn_Pos                           17
#define USB3_GUCTL_SprsCtrlTransEn_Msk                           (0x1 << 17)
#define USB3_GUCTL_SprsCtrlTransEn                               (0x1 << 17)
#define USB3_GUCTL_NoExtrDl_Pos                                  21
#define USB3_GUCTL_NoExtrDl_Msk                                  (0x1 << 21)
#define USB3_GUCTL_NoExtrDl                                      (0x1 << 21)
#define USB3_GUCTL_REFCLKPER_Pos                                 22
#define USB3_GUCTL_REFCLKPER_Msk                                 (0x3ff << 22)
#define USB3_GUCTL_REFCLKPER                                     (0x3ff << 22)

/* Bit fields for USB3_GBUSERRADDRLO register */
#define USB3_GBUSERRADDRLO_BUSERRADDR_Pos                        0
#define USB3_GBUSERRADDRLO_BUSERRADDR_Msk                        (0xFFFFFFFF << 0)
#define USB3_GBUSERRADDRLO_BUSERRADDR                            (0xFFFFFFFF << 0)

/* Bit fields for USB3_GBUSERRADDRHI register */
#define USB3_GBUSERRADDRHI_BUSERRADDR_Pos                        0
#define USB3_GBUSERRADDRHI_BUSERRADDR_Msk                        (0xFFFFFFFF << 0)
#define USB3_GBUSERRADDRHI_BUSERRADDR                            (0xFFFFFFFF << 0)

/* Bit fields for USB3_GPRTBIMAPLO register */
#define USB3_GPRTBIMAPLO_BINUM1_Pos                              0
#define USB3_GPRTBIMAPLO_BINUM1_Msk                              (0xf << 0)
#define USB3_GPRTBIMAPLO_BINUM1                                  (0xf << 0)
#define USB3_GPRTBIMAPLO_BINUM2_Pos                              4
#define USB3_GPRTBIMAPLO_BINUM2_Msk                              (0xf << 4)
#define USB3_GPRTBIMAPLO_BINUM2                                  (0xf << 4)
#define USB3_GPRTBIMAPLO_BINUM3_Pos                              8
#define USB3_GPRTBIMAPLO_BINUM3_Msk                              (0xf << 8)
#define USB3_GPRTBIMAPLO_BINUM3                                  (0xf << 8)
#define USB3_GPRTBIMAPLO_BINUM4_Pos                              12
#define USB3_GPRTBIMAPLO_BINUM4_Msk                              (0xf << 12)
#define USB3_GPRTBIMAPLO_BINUM4                                  (0xf << 12)
#define USB3_GPRTBIMAPLO_BINUM5_Pos                              16
#define USB3_GPRTBIMAPLO_BINUM5_Msk                              (0xf << 16)
#define USB3_GPRTBIMAPLO_BINUM5                                  (0xf << 16)
#define USB3_GPRTBIMAPLO_BINUM6_Pos                              20
#define USB3_GPRTBIMAPLO_BINUM6_Msk                              (0xf << 20)
#define USB3_GPRTBIMAPLO_BINUM6                                  (0xf << 20)
#define USB3_GPRTBIMAPLO_BINUM7_Pos                              24
#define USB3_GPRTBIMAPLO_BINUM7_Msk                              (0xf << 24)
#define USB3_GPRTBIMAPLO_BINUM7                                  (0xf << 24)
#define USB3_GPRTBIMAPLO_BINUM8_Pos                              28
#define USB3_GPRTBIMAPLO_BINUM8_Msk                              (0xf << 28)
#define USB3_GPRTBIMAPLO_BINUM8                                  (0xf << 28)

/* Bit fields for USB3_GPRTBIMAPHI register */
#define USB3_GPRTBIMAPHI_BINUM9_Pos                              0
#define USB3_GPRTBIMAPHI_BINUM9_Msk                              (0xf << 0)
#define USB3_GPRTBIMAPHI_BINUM9                                  (0xf << 0)
#define USB3_GPRTBIMAPHI_BINUM10_Pos                             4
#define USB3_GPRTBIMAPHI_BINUM10_Msk                             (0xf << 4)
#define USB3_GPRTBIMAPHI_BINUM10                                 (0xf << 4)
#define USB3_GPRTBIMAPHI_BINUM11_Pos                             8
#define USB3_GPRTBIMAPHI_BINUM11_Msk                             (0xf << 8)
#define USB3_GPRTBIMAPHI_BINUM11                                 (0xf << 8)
#define USB3_GPRTBIMAPHI_BINUM12_Pos                             12
#define USB3_GPRTBIMAPHI_BINUM12_Msk                             (0xf << 12)
#define USB3_GPRTBIMAPHI_BINUM12                                 (0xf << 12)
#define USB3_GPRTBIMAPHI_BINUM13_Pos                             16
#define USB3_GPRTBIMAPHI_BINUM13_Msk                             (0xf << 16)
#define USB3_GPRTBIMAPHI_BINUM13                                 (0xf << 16)
#define USB3_GPRTBIMAPHI_BINUM14_Pos                             20
#define USB3_GPRTBIMAPHI_BINUM14_Msk                             (0xf << 20)
#define USB3_GPRTBIMAPHI_BINUM14                                 (0xf << 20)
#define USB3_GPRTBIMAPHI_BINUM15_Pos                             24
#define USB3_GPRTBIMAPHI_BINUM15_Msk                             (0xf << 24)
#define USB3_GPRTBIMAPHI_BINUM15                                 (0xf << 24)

/* Bit fields for USB3_GHWPARAMS0 register */
#define USB3_GHWPARAMS0_ghwparams0_2_0_Pos                       0
#define USB3_GHWPARAMS0_ghwparams0_2_0_Msk                       (0x7 << 0)
#define USB3_GHWPARAMS0_ghwparams0_2_0                           (0x7 << 0)
#define USB3_GHWPARAMS0_ghwparams0_5_3_Pos                       3
#define USB3_GHWPARAMS0_ghwparams0_5_3_Msk                       (0x7 << 3)
#define USB3_GHWPARAMS0_ghwparams0_5_3                           (0x7 << 3)
#define USB3_GHWPARAMS0_ghwparams0_7_6_Pos                       6
#define USB3_GHWPARAMS0_ghwparams0_7_6_Msk                       (0x3 << 6)
#define USB3_GHWPARAMS0_ghwparams0_7_6                           (0x3 << 6)
#define USB3_GHWPARAMS0_ghwparams0_15_8_Pos                      8
#define USB3_GHWPARAMS0_ghwparams0_15_8_Msk                      (0xff << 8)
#define USB3_GHWPARAMS0_ghwparams0_15_8                          (0xff << 8)
#define USB3_GHWPARAMS0_ghwparams0_23_16_Pos                     16
#define USB3_GHWPARAMS0_ghwparams0_23_16_Msk                     (0xff << 16)
#define USB3_GHWPARAMS0_ghwparams0_23_16                         (0xff << 16)
#define USB3_GHWPARAMS0_ghwparams0_31_24_Pos                     24
#define USB3_GHWPARAMS0_ghwparams0_31_24_Msk                     (0xff << 24)
#define USB3_GHWPARAMS0_ghwparams0_31_24                         (0xff << 24)

/* Bit fields for USB3_GHWPARAMS1 register */
#define USB3_GHWPARAMS1_ghwparams1_2_0_Pos                       0
#define USB3_GHWPARAMS1_ghwparams1_2_0_Msk                       (0x7 << 0)
#define USB3_GHWPARAMS1_ghwparams1_2_0                           (0x7 << 0)
#define USB3_GHWPARAMS1_ghwparams1_5_3_Pos                       3
#define USB3_GHWPARAMS1_ghwparams1_5_3_Msk                       (0x7 << 3)
#define USB3_GHWPARAMS1_ghwparams1_5_3                           (0x7 << 3)
#define USB3_GHWPARAMS1_ghwparams1_8_6_Pos                       6
#define USB3_GHWPARAMS1_ghwparams1_8_6_Msk                       (0x7 << 6)
#define USB3_GHWPARAMS1_ghwparams1_8_6                           (0x7 << 6)
#define USB3_GHWPARAMS1_ghwparams1_11_9_Pos                      9
#define USB3_GHWPARAMS1_ghwparams1_11_9_Msk                      (0x7 << 9)
#define USB3_GHWPARAMS1_ghwparams1_11_9                          (0x7 << 9)
#define USB3_GHWPARAMS1_ghwparams1_14_12_Pos                     12
#define USB3_GHWPARAMS1_ghwparams1_14_12_Msk                     (0x7 << 12)
#define USB3_GHWPARAMS1_ghwparams1_14_12                         (0x7 << 12)
#define USB3_GHWPARAMS1_ghwparams1_20_15_Pos                     15
#define USB3_GHWPARAMS1_ghwparams1_20_15_Msk                     (0x3f << 15)
#define USB3_GHWPARAMS1_ghwparams1_20_15                         (0x3f << 15)
#define USB3_GHWPARAMS1_ghwparams1_22_21_Pos                     21
#define USB3_GHWPARAMS1_ghwparams1_22_21_Msk                     (0x3 << 21)
#define USB3_GHWPARAMS1_ghwparams1_22_21                         (0x3 << 21)
#define USB3_GHWPARAMS1_ghwparams1_23_Pos                        23
#define USB3_GHWPARAMS1_ghwparams1_23_Msk                        (0x1 << 23)
#define USB3_GHWPARAMS1_ghwparams1_23                            (0x1 << 23)
#define USB3_GHWPARAMS1_ghwparams1_25_24_Pos                     24
#define USB3_GHWPARAMS1_ghwparams1_25_24_Msk                     (0x3 << 24)
#define USB3_GHWPARAMS1_ghwparams1_25_24                         (0x3 << 24)
#define USB3_GHWPARAMS1_ghwparams1_26_Pos                        26
#define USB3_GHWPARAMS1_ghwparams1_26_Msk                        (0x1 << 26)
#define USB3_GHWPARAMS1_ghwparams1_26                            (0x1 << 26)
#define USB3_GHWPARAMS1_ghwparams1_27_Pos                        27
#define USB3_GHWPARAMS1_ghwparams1_27_Msk                        (0x1 << 27)
#define USB3_GHWPARAMS1_ghwparams1_27                            (0x1 << 27)
#define USB3_GHWPARAMS1_ghwparams1_28_Pos                        28
#define USB3_GHWPARAMS1_ghwparams1_28_Msk                        (0x1 << 28)
#define USB3_GHWPARAMS1_ghwparams1_28                            (0x1 << 28)
#define USB3_GHWPARAMS1_ghwparams1_29_Pos                        29
#define USB3_GHWPARAMS1_ghwparams1_29_Msk                        (0x1 << 29)
#define USB3_GHWPARAMS1_ghwparams1_29                            (0x1 << 29)
#define USB3_GHWPARAMS1_ghwparams1_30_Pos                        30
#define USB3_GHWPARAMS1_ghwparams1_30_Msk                        (0x1 << 30)
#define USB3_GHWPARAMS1_ghwparams1_30                            (0x1 << 30)
#define USB3_GHWPARAMS1_ghwparams1_31_Pos                        31
#define USB3_GHWPARAMS1_ghwparams1_31_Msk                        (0x1 << 31)
#define USB3_GHWPARAMS1_ghwparams1_31                            (0x1 << 31)

/* Bit fields for USB3_GHWPARAMS2 register */
#define USB3_GHWPARAMS2_ghwparams2_31_0_Pos                      0
#define USB3_GHWPARAMS2_ghwparams2_31_0_Msk                      (0xFFFFFFFF << 0)
#define USB3_GHWPARAMS2_ghwparams2_31_0                          (0xFFFFFFFF << 0)

/* Bit fields for USB3_GHWPARAMS3 register */
#define USB3_GHWPARAMS3_ghwparams3_1_0_Pos                       0
#define USB3_GHWPARAMS3_ghwparams3_1_0_Msk                       (0x3 << 0)
#define USB3_GHWPARAMS3_ghwparams3_1_0                           (0x3 << 0)
#define USB3_GHWPARAMS3_ghwparams3_3_2_Pos                       2
#define USB3_GHWPARAMS3_ghwparams3_3_2_Msk                       (0x3 << 2)
#define USB3_GHWPARAMS3_ghwparams3_3_2                           (0x3 << 2)
#define USB3_GHWPARAMS3_ghwparams3_5_4_Pos                       4
#define USB3_GHWPARAMS3_ghwparams3_5_4_Msk                       (0x3 << 4)
#define USB3_GHWPARAMS3_ghwparams3_5_4                           (0x3 << 4)
#define USB3_GHWPARAMS3_ghwparams3_7_6_Pos                       6
#define USB3_GHWPARAMS3_ghwparams3_7_6_Msk                       (0x3 << 6)
#define USB3_GHWPARAMS3_ghwparams3_7_6                           (0x3 << 6)
#define USB3_GHWPARAMS3_ghwparams3_9_8_Pos                       8
#define USB3_GHWPARAMS3_ghwparams3_9_8_Msk                       (0x3 << 8)
#define USB3_GHWPARAMS3_ghwparams3_9_8                           (0x3 << 8)
#define USB3_GHWPARAMS3_ghwparams3_10_Pos                        10
#define USB3_GHWPARAMS3_ghwparams3_10_Msk                        (0x1 << 10)
#define USB3_GHWPARAMS3_ghwparams3_10                            (0x1 << 10)
#define USB3_GHWPARAMS3_ghwparams3_11_Pos                        11
#define USB3_GHWPARAMS3_ghwparams3_11_Msk                        (0x1 << 11)
#define USB3_GHWPARAMS3_ghwparams3_11                            (0x1 << 11)
#define USB3_GHWPARAMS3_ghwparams3_17_12_Pos                     12
#define USB3_GHWPARAMS3_ghwparams3_17_12_Msk                     (0x3f << 12)
#define USB3_GHWPARAMS3_ghwparams3_17_12                         (0x3f << 12)
#define USB3_GHWPARAMS3_ghwparams3_22_18_Pos                     18
#define USB3_GHWPARAMS3_ghwparams3_22_18_Msk                     (0x1f << 18)
#define USB3_GHWPARAMS3_ghwparams3_22_18                         (0x1f << 18)
#define USB3_GHWPARAMS3_ghwparams3_30_23_Pos                     23
#define USB3_GHWPARAMS3_ghwparams3_30_23_Msk                     (0xff << 23)
#define USB3_GHWPARAMS3_ghwparams3_30_23                         (0xff << 23)
#define USB3_GHWPARAMS3_ghwparams3_31_Pos                        31
#define USB3_GHWPARAMS3_ghwparams3_31_Msk                        (0x1 << 31)
#define USB3_GHWPARAMS3_ghwparams3_31                            (0x1 << 31)

/* Bit fields for USB3_GHWPARAMS4 register */
#define USB3_GHWPARAMS4_ghwparams4_5_0_Pos                       0
#define USB3_GHWPARAMS4_ghwparams4_5_0_Msk                       (0x3f << 0)
#define USB3_GHWPARAMS4_ghwparams4_5_0                           (0x3f << 0)
#define USB3_GHWPARAMS4_ghwparams4_6_Pos                         6
#define USB3_GHWPARAMS4_ghwparams4_6_Msk                         (0x1 << 6)
#define USB3_GHWPARAMS4_ghwparams4_6                             (0x1 << 6)
#define USB3_GHWPARAMS4_ghwparams4_8_7_Pos                       7
#define USB3_GHWPARAMS4_ghwparams4_8_7_Msk                       (0x3 << 7)
#define USB3_GHWPARAMS4_ghwparams4_8_7                           (0x3 << 7)
#define USB3_GHWPARAMS4_ghwparams4_10_9_Pos                      9
#define USB3_GHWPARAMS4_ghwparams4_10_9_Msk                      (0x3 << 9)
#define USB3_GHWPARAMS4_ghwparams4_10_9                          (0x3 << 9)
#define USB3_GHWPARAMS4_ghwparams4_11_Pos                        11
#define USB3_GHWPARAMS4_ghwparams4_11_Msk                        (0x1 << 11)
#define USB3_GHWPARAMS4_ghwparams4_11                            (0x1 << 11)
#define USB3_GHWPARAMS4_ghwparams4_12_Pos                        12
#define USB3_GHWPARAMS4_ghwparams4_12_Msk                        (0x1 << 12)
#define USB3_GHWPARAMS4_ghwparams4_12                            (0x1 << 12)
#define USB3_GHWPARAMS4_ghwparams4_16_13_Pos                     13
#define USB3_GHWPARAMS4_ghwparams4_16_13_Msk                     (0xf << 13)
#define USB3_GHWPARAMS4_ghwparams4_16_13                         (0xf << 13)
#define USB3_GHWPARAMS4_ghwparams4_20_17_Pos                     17
#define USB3_GHWPARAMS4_ghwparams4_20_17_Msk                     (0xf << 17)
#define USB3_GHWPARAMS4_ghwparams4_20_17                         (0xf << 17)
#define USB3_GHWPARAMS4_ghwparams4_21_Pos                        21
#define USB3_GHWPARAMS4_ghwparams4_21_Msk                        (0x1 << 21)
#define USB3_GHWPARAMS4_ghwparams4_21                            (0x1 << 21)
#define USB3_GHWPARAMS4_ghwparams4_22_Pos                        22
#define USB3_GHWPARAMS4_ghwparams4_22_Msk                        (0x1 << 22)
#define USB3_GHWPARAMS4_ghwparams4_22                            (0x1 << 22)
#define USB3_GHWPARAMS4_ghwparams4_23_Pos                        23
#define USB3_GHWPARAMS4_ghwparams4_23_Msk                        (0x1 << 23)
#define USB3_GHWPARAMS4_ghwparams4_23                            (0x1 << 23)
#define USB3_GHWPARAMS4_ghwparams4_27_24_Pos                     24
#define USB3_GHWPARAMS4_ghwparams4_27_24_Msk                     (0xf << 24)
#define USB3_GHWPARAMS4_ghwparams4_27_24                         (0xf << 24)
#define USB3_GHWPARAMS4_ghwparams4_31_28_Pos                     28
#define USB3_GHWPARAMS4_ghwparams4_31_28_Msk                     (0xf << 28)
#define USB3_GHWPARAMS4_ghwparams4_31_28                         (0xf << 28)

/* Bit fields for USB3_GHWPARAMS5 register */
#define USB3_GHWPARAMS5_ghwparams5_3_0_Pos                       0
#define USB3_GHWPARAMS5_ghwparams5_3_0_Msk                       (0xf << 0)
#define USB3_GHWPARAMS5_ghwparams5_3_0                           (0xf << 0)
#define USB3_GHWPARAMS5_ghwparams5_9_4_Pos                       4
#define USB3_GHWPARAMS5_ghwparams5_9_4_Msk                       (0x3f << 4)
#define USB3_GHWPARAMS5_ghwparams5_9_4                           (0x3f << 4)
#define USB3_GHWPARAMS5_ghwparams5_15_10_Pos                     10
#define USB3_GHWPARAMS5_ghwparams5_15_10_Msk                     (0x3f << 10)
#define USB3_GHWPARAMS5_ghwparams5_15_10                         (0x3f << 10)
#define USB3_GHWPARAMS5_ghwparams5_21_16_Pos                     16
#define USB3_GHWPARAMS5_ghwparams5_21_16_Msk                     (0x3f << 16)
#define USB3_GHWPARAMS5_ghwparams5_21_16                         (0x3f << 16)
#define USB3_GHWPARAMS5_ghwparams5_27_22_Pos                     22
#define USB3_GHWPARAMS5_ghwparams5_27_22_Msk                     (0x3f << 22)
#define USB3_GHWPARAMS5_ghwparams5_27_22                         (0x3f << 22)
#define USB3_GHWPARAMS5_ghwparams5_31_28_Pos                     28
#define USB3_GHWPARAMS5_ghwparams5_31_28_Msk                     (0xf << 28)
#define USB3_GHWPARAMS5_ghwparams5_31_28                         (0xf << 28)

/* Bit fields for USB3_GHWPARAMS6 register */
#define USB3_GHWPARAMS6_ghwparams6_5_0_Pos                       0
#define USB3_GHWPARAMS6_ghwparams6_5_0_Msk                       (0x3f << 0)
#define USB3_GHWPARAMS6_ghwparams6_5_0                           (0x3f << 0)
#define USB3_GHWPARAMS6_ghwparams6_6_Pos                         6
#define USB3_GHWPARAMS6_ghwparams6_6_Msk                         (0x1 << 6)
#define USB3_GHWPARAMS6_ghwparams6_6                             (0x1 << 6)
#define USB3_GHWPARAMS6_ghwparams6_7_Pos                         7
#define USB3_GHWPARAMS6_ghwparams6_7_Msk                         (0x1 << 7)
#define USB3_GHWPARAMS6_ghwparams6_7                             (0x1 << 7)
#define USB3_GHWPARAMS6_ghwparams6_9_8_Pos                       8
#define USB3_GHWPARAMS6_ghwparams6_9_8_Msk                       (0x3 << 8)
#define USB3_GHWPARAMS6_ghwparams6_9_8                           (0x3 << 8)
#define USB3_GHWPARAMS6_SRPSupport_Pos                           10
#define USB3_GHWPARAMS6_SRPSupport_Msk                           (0x1 << 10)
#define USB3_GHWPARAMS6_SRPSupport                               (0x1 << 10)
#define USB3_GHWPARAMS6_HNPSupport_Pos                           11
#define USB3_GHWPARAMS6_HNPSupport_Msk                           (0x1 << 11)
#define USB3_GHWPARAMS6_HNPSupport                               (0x1 << 11)
#define USB3_GHWPARAMS6_ADPSupport_Pos                           12
#define USB3_GHWPARAMS6_ADPSupport_Msk                           (0x1 << 12)
#define USB3_GHWPARAMS6_ADPSupport                               (0x1 << 12)
#define USB3_GHWPARAMS6_OTG_SS_Support_Pos                       13
#define USB3_GHWPARAMS6_OTG_SS_Support_Msk                       (0x1 << 13)
#define USB3_GHWPARAMS6_OTG_SS_Support                           (0x1 << 13)
#define USB3_GHWPARAMS6_BCSupport_Pos                            14
#define USB3_GHWPARAMS6_BCSupport_Msk                            (0x1 << 14)
#define USB3_GHWPARAMS6_BCSupport                                (0x1 << 14)
#define USB3_GHWPARAMS6_BusFltrsSupport_Pos                      15
#define USB3_GHWPARAMS6_BusFltrsSupport_Msk                      (0x1 << 15)
#define USB3_GHWPARAMS6_BusFltrsSupport                          (0x1 << 15)
#define USB3_GHWPARAMS6_ghwparams6_31_16_Pos                     16
#define USB3_GHWPARAMS6_ghwparams6_31_16_Msk                     (0xffff << 16)
#define USB3_GHWPARAMS6_ghwparams6_31_16                         (0xffff << 16)

/* Bit fields for USB3_GHWPARAMS7 register */
#define USB3_GHWPARAMS7_ghwparams7_15_0_Pos                      0
#define USB3_GHWPARAMS7_ghwparams7_15_0_Msk                      (0xffff << 0)
#define USB3_GHWPARAMS7_ghwparams7_15_0                          (0xffff << 0)
#define USB3_GHWPARAMS7_ghwparams7_31_16_Pos                     16
#define USB3_GHWPARAMS7_ghwparams7_31_16_Msk                     (0xffff << 16)
#define USB3_GHWPARAMS7_ghwparams7_31_16                         (0xffff << 16)

/* Bit fields for USB3_GDBGFIFOSPACE register */
#define USB3_GDBGFIFOSPACE_FIFO_QUEUE_SELECT_Pos                 0
#define USB3_GDBGFIFOSPACE_FIFO_QUEUE_SELECT_Msk                 (0x1ff << 0)
#define USB3_GDBGFIFOSPACE_FIFO_QUEUE_SELECT                     (0x1ff << 0)
#define USB3_GDBGFIFOSPACE_SPACE_AVAILABLE_Pos                   16
#define USB3_GDBGFIFOSPACE_SPACE_AVAILABLE_Msk                   (0xffff << 16)
#define USB3_GDBGFIFOSPACE_SPACE_AVAILABLE                       (0xffff << 16)

/* Bit fields for USB3_GDBGLTSSM register */
#define USB3_GDBGLTSSM_TXONESZEROS_Pos                           0
#define USB3_GDBGLTSSM_TXONESZEROS_Msk                           (0x1 << 0)
#define USB3_GDBGLTSSM_TXONESZEROS                               (0x1 << 0)
#define USB3_GDBGLTSSM_RXTERMINATION_Pos                         1
#define USB3_GDBGLTSSM_RXTERMINATION_Msk                         (0x1 << 1)
#define USB3_GDBGLTSSM_RXTERMINATION                             (0x1 << 1)
#define USB3_GDBGLTSSM_TXSWING_Pos                               2
#define USB3_GDBGLTSSM_TXSWING_Msk                               (0x1 << 2)
#define USB3_GDBGLTSSM_TXSWING                                   (0x1 << 2)
#define USB3_GDBGLTSSM_LTDBClkState_Pos                          3
#define USB3_GDBGLTSSM_LTDBClkState_Msk                          (0x7 << 3)
#define USB3_GDBGLTSSM_LTDBClkState                              (0x7 << 3)
#define USB3_GDBGLTSSM_TXDEEMPHASIS_Pos                          6
#define USB3_GDBGLTSSM_TXDEEMPHASIS_Msk                          (0x3 << 6)
#define USB3_GDBGLTSSM_TXDEEMPHASIS                              (0x3 << 6)
#define USB3_GDBGLTSSM_RXEQTRAIN_Pos                             8
#define USB3_GDBGLTSSM_RXEQTRAIN_Msk                             (0x1 << 8)
#define USB3_GDBGLTSSM_RXEQTRAIN                                 (0x1 << 8)
#define USB3_GDBGLTSSM_POWERDOWN_Pos                             9
#define USB3_GDBGLTSSM_POWERDOWN_Msk                             (0x3 << 9)
#define USB3_GDBGLTSSM_POWERDOWN                                 (0x3 << 9)
#define USB3_GDBGLTSSM_LTDBPhyCmdState_Pos                       11
#define USB3_GDBGLTSSM_LTDBPhyCmdState_Msk                       (0x7 << 11)
#define USB3_GDBGLTSSM_LTDBPhyCmdState                           (0x7 << 11)
#define USB3_GDBGLTSSM_TxDetRxLoopback_Pos                       14
#define USB3_GDBGLTSSM_TxDetRxLoopback_Msk                       (0x1 << 14)
#define USB3_GDBGLTSSM_TxDetRxLoopback                           (0x1 << 14)
#define USB3_GDBGLTSSM_RXPOLARITY_Pos                            15
#define USB3_GDBGLTSSM_RXPOLARITY_Msk                            (0x1 << 15)
#define USB3_GDBGLTSSM_RXPOLARITY                                (0x1 << 15)
#define USB3_GDBGLTSSM_TXELECLDLE_Pos                            16
#define USB3_GDBGLTSSM_TXELECLDLE_Msk                            (0x1 << 16)
#define USB3_GDBGLTSSM_TXELECLDLE                                (0x1 << 16)
#define USB3_GDBGLTSSM_ELASTICBUFFERMODE_Pos                     17
#define USB3_GDBGLTSSM_ELASTICBUFFERMODE_Msk                     (0x1 << 17)
#define USB3_GDBGLTSSM_ELASTICBUFFERMODE                         (0x1 << 17)
#define USB3_GDBGLTSSM_LTDBSUBSTATE_Pos                          18
#define USB3_GDBGLTSSM_LTDBSUBSTATE_Msk                          (0xf << 18)
#define USB3_GDBGLTSSM_LTDBSUBSTATE                              (0xf << 18)
#define USB3_GDBGLTSSM_LTDBLINKSTATE_Pos                         22
#define USB3_GDBGLTSSM_LTDBLINKSTATE_Msk                         (0xf << 22)
#define USB3_GDBGLTSSM_LTDBLINKSTATE                             (0xf << 22)
#define USB3_GDBGLTSSM_LTDBTIMEOUT_Pos                           26
#define USB3_GDBGLTSSM_LTDBTIMEOUT_Msk                           (0x1 << 26)
#define USB3_GDBGLTSSM_LTDBTIMEOUT                               (0x1 << 26)
#define USB3_GDBGLTSSM_PRTDIRECTION_Pos                          27
#define USB3_GDBGLTSSM_PRTDIRECTION_Msk                          (0x1 << 27)
#define USB3_GDBGLTSSM_PRTDIRECTION                              (0x1 << 27)
#define USB3_GDBGLTSSM_X3_DS_HOST_SHUTDOWN_Pos                   28
#define USB3_GDBGLTSSM_X3_DS_HOST_SHUTDOWN_Msk                   (0x1 << 28)
#define USB3_GDBGLTSSM_X3_DS_HOST_SHUTDOWN                       (0x1 << 28)
#define USB3_GDBGLTSSM_X3_XS_SWAPPING_Pos                        29
#define USB3_GDBGLTSSM_X3_XS_SWAPPING_Msk                        (0x1 << 29)
#define USB3_GDBGLTSSM_X3_XS_SWAPPING                            (0x1 << 29)
#define USB3_GDBGLTSSM_RxElecidle_Pos                            30
#define USB3_GDBGLTSSM_RxElecidle_Msk                            (0x1 << 30)
#define USB3_GDBGLTSSM_RxElecidle                                (0x1 << 30)

/* Bit fields for USB3_GDBGLNMCC register */
#define USB3_GDBGLNMCC_LNMCC_BERC_Pos                            0
#define USB3_GDBGLNMCC_LNMCC_BERC_Msk                            (0x1ff << 0)
#define USB3_GDBGLNMCC_LNMCC_BERC                                (0x1ff << 0)

/* Bit fields for USB3_GDBGBMU register */
#define USB3_GDBGBMU_BMU_CCU_Pos                                 0
#define USB3_GDBGBMU_BMU_CCU_Msk                                 (0xf << 0)
#define USB3_GDBGBMU_BMU_CCU                                     (0xf << 0)
#define USB3_GDBGBMU_BMU_DCU_Pos                                 4
#define USB3_GDBGBMU_BMU_DCU_Msk                                 (0xf << 4)
#define USB3_GDBGBMU_BMU_DCU                                     (0xf << 4)
#define USB3_GDBGBMU_BMU_BCU_Pos                                 8
#define USB3_GDBGBMU_BMU_BCU_Msk                                 (0xffffff << 8)
#define USB3_GDBGBMU_BMU_BCU                                     (0xffffff << 8)

/* Bit fields for USB3_GDBGLSPMUX_HST register */
#define USB3_GDBGLSPMUX_HST_HOSTSELECT_Pos                       0
#define USB3_GDBGLSPMUX_HST_HOSTSELECT_Msk                       (0x3fff << 0)
#define USB3_GDBGLSPMUX_HST_HOSTSELECT                           (0x3fff << 0)
#define USB3_GDBGLSPMUX_HST_logic_analyzer_trace_Pos             16
#define USB3_GDBGLSPMUX_HST_logic_analyzer_trace_Msk             (0xff << 16)
#define USB3_GDBGLSPMUX_HST_logic_analyzer_trace                 (0xff << 16)

/* Bit fields for USB3_GDBGLSP register */
#define USB3_GDBGLSP_LSPDEBUG_Pos                                0
#define USB3_GDBGLSP_LSPDEBUG_Msk                                (0xFFFFFFFF << 0)
#define USB3_GDBGLSP_LSPDEBUG                                    (0xFFFFFFFF << 0)

/* Bit fields for USB3_GDBGEPINFO0 register */
#define USB3_GDBGEPINFO0_EPDEBUG_Pos                             0
#define USB3_GDBGEPINFO0_EPDEBUG_Msk                             (0xFFFFFFFF << 0)
#define USB3_GDBGEPINFO0_EPDEBUG                                 (0xFFFFFFFF << 0)

/* Bit fields for USB3_GDBGEPINFO1 register */
#define USB3_GDBGEPINFO1_EPDEBUG_Pos                             0
#define USB3_GDBGEPINFO1_EPDEBUG_Msk                             (0xFFFFFFFF << 0)
#define USB3_GDBGEPINFO1_EPDEBUG                                 (0xFFFFFFFF << 0)

/* Bit fields for USB3_GPRTBIMAP_HSLO register */
#define USB3_GPRTBIMAP_HSLO_BINUM1_Pos                           0
#define USB3_GPRTBIMAP_HSLO_BINUM1_Msk                           (0xf << 0)
#define USB3_GPRTBIMAP_HSLO_BINUM1                               (0xf << 0)
#define USB3_GPRTBIMAP_HSLO_BINUM2_Pos                           4
#define USB3_GPRTBIMAP_HSLO_BINUM2_Msk                           (0xf << 4)
#define USB3_GPRTBIMAP_HSLO_BINUM2                               (0xf << 4)
#define USB3_GPRTBIMAP_HSLO_BINUM3_Pos                           8
#define USB3_GPRTBIMAP_HSLO_BINUM3_Msk                           (0xf << 8)
#define USB3_GPRTBIMAP_HSLO_BINUM3                               (0xf << 8)
#define USB3_GPRTBIMAP_HSLO_BINUM4_Pos                           12
#define USB3_GPRTBIMAP_HSLO_BINUM4_Msk                           (0xf << 12)
#define USB3_GPRTBIMAP_HSLO_BINUM4                               (0xf << 12)
#define USB3_GPRTBIMAP_HSLO_BINUM5_Pos                           16
#define USB3_GPRTBIMAP_HSLO_BINUM5_Msk                           (0xf << 16)
#define USB3_GPRTBIMAP_HSLO_BINUM5                               (0xf << 16)
#define USB3_GPRTBIMAP_HSLO_BINUM6_Pos                           20
#define USB3_GPRTBIMAP_HSLO_BINUM6_Msk                           (0xf << 20)
#define USB3_GPRTBIMAP_HSLO_BINUM6                               (0xf << 20)
#define USB3_GPRTBIMAP_HSLO_BINUM7_Pos                           24
#define USB3_GPRTBIMAP_HSLO_BINUM7_Msk                           (0xf << 24)
#define USB3_GPRTBIMAP_HSLO_BINUM7                               (0xf << 24)
#define USB3_GPRTBIMAP_HSLO_BINUM8_Pos                           28
#define USB3_GPRTBIMAP_HSLO_BINUM8_Msk                           (0xf << 28)
#define USB3_GPRTBIMAP_HSLO_BINUM8                               (0xf << 28)

/* Bit fields for USB3_GPRTBIMAP_HSHI register */
#define USB3_GPRTBIMAP_HSHI_BINUM9_Pos                           0
#define USB3_GPRTBIMAP_HSHI_BINUM9_Msk                           (0xf << 0)
#define USB3_GPRTBIMAP_HSHI_BINUM9                               (0xf << 0)
#define USB3_GPRTBIMAP_HSHI_BINUM10_Pos                          4
#define USB3_GPRTBIMAP_HSHI_BINUM10_Msk                          (0xf << 4)
#define USB3_GPRTBIMAP_HSHI_BINUM10                              (0xf << 4)
#define USB3_GPRTBIMAP_HSHI_BINUM11_Pos                          8
#define USB3_GPRTBIMAP_HSHI_BINUM11_Msk                          (0xf << 8)
#define USB3_GPRTBIMAP_HSHI_BINUM11                              (0xf << 8)
#define USB3_GPRTBIMAP_HSHI_BINUM12_Pos                          12
#define USB3_GPRTBIMAP_HSHI_BINUM12_Msk                          (0xf << 12)
#define USB3_GPRTBIMAP_HSHI_BINUM12                              (0xf << 12)
#define USB3_GPRTBIMAP_HSHI_BINUM13_Pos                          16
#define USB3_GPRTBIMAP_HSHI_BINUM13_Msk                          (0xf << 16)
#define USB3_GPRTBIMAP_HSHI_BINUM13                              (0xf << 16)
#define USB3_GPRTBIMAP_HSHI_BINUM14_Pos                          20
#define USB3_GPRTBIMAP_HSHI_BINUM14_Msk                          (0xf << 20)
#define USB3_GPRTBIMAP_HSHI_BINUM14                              (0xf << 20)
#define USB3_GPRTBIMAP_HSHI_BINUM15_Pos                          24
#define USB3_GPRTBIMAP_HSHI_BINUM15_Msk                          (0xf << 24)
#define USB3_GPRTBIMAP_HSHI_BINUM15                              (0xf << 24)

/* Bit fields for USB3_GPRTBIMAP_FSLO register */
#define USB3_GPRTBIMAP_FSLO_BINUM1_Pos                           0
#define USB3_GPRTBIMAP_FSLO_BINUM1_Msk                           (0xf << 0)
#define USB3_GPRTBIMAP_FSLO_BINUM1                               (0xf << 0)
#define USB3_GPRTBIMAP_FSLO_BINUM2_Pos                           4
#define USB3_GPRTBIMAP_FSLO_BINUM2_Msk                           (0xf << 4)
#define USB3_GPRTBIMAP_FSLO_BINUM2                               (0xf << 4)
#define USB3_GPRTBIMAP_FSLO_BINUM3_Pos                           8
#define USB3_GPRTBIMAP_FSLO_BINUM3_Msk                           (0xf << 8)
#define USB3_GPRTBIMAP_FSLO_BINUM3                               (0xf << 8)
#define USB3_GPRTBIMAP_FSLO_BINUM4_Pos                           12
#define USB3_GPRTBIMAP_FSLO_BINUM4_Msk                           (0xf << 12)
#define USB3_GPRTBIMAP_FSLO_BINUM4                               (0xf << 12)
#define USB3_GPRTBIMAP_FSLO_BINUM5_Pos                           16
#define USB3_GPRTBIMAP_FSLO_BINUM5_Msk                           (0xf << 16)
#define USB3_GPRTBIMAP_FSLO_BINUM5                               (0xf << 16)
#define USB3_GPRTBIMAP_FSLO_BINUM6_Pos                           20
#define USB3_GPRTBIMAP_FSLO_BINUM6_Msk                           (0xf << 20)
#define USB3_GPRTBIMAP_FSLO_BINUM6                               (0xf << 20)
#define USB3_GPRTBIMAP_FSLO_BINUM7_Pos                           24
#define USB3_GPRTBIMAP_FSLO_BINUM7_Msk                           (0xf << 24)
#define USB3_GPRTBIMAP_FSLO_BINUM7                               (0xf << 24)
#define USB3_GPRTBIMAP_FSLO_BINUM8_Pos                           28
#define USB3_GPRTBIMAP_FSLO_BINUM8_Msk                           (0xf << 28)
#define USB3_GPRTBIMAP_FSLO_BINUM8                               (0xf << 28)

/* Bit fields for USB3_GPRTBIMAP_FSHI register */
#define USB3_GPRTBIMAP_FSHI_BINUM9_Pos                           0
#define USB3_GPRTBIMAP_FSHI_BINUM9_Msk                           (0xf << 0)
#define USB3_GPRTBIMAP_FSHI_BINUM9                               (0xf << 0)
#define USB3_GPRTBIMAP_FSHI_BINUM10_Pos                          4
#define USB3_GPRTBIMAP_FSHI_BINUM10_Msk                          (0xf << 4)
#define USB3_GPRTBIMAP_FSHI_BINUM10                              (0xf << 4)
#define USB3_GPRTBIMAP_FSHI_BINUM11_Pos                          8
#define USB3_GPRTBIMAP_FSHI_BINUM11_Msk                          (0xf << 8)
#define USB3_GPRTBIMAP_FSHI_BINUM11                              (0xf << 8)
#define USB3_GPRTBIMAP_FSHI_BINUM12_Pos                          12
#define USB3_GPRTBIMAP_FSHI_BINUM12_Msk                          (0xf << 12)
#define USB3_GPRTBIMAP_FSHI_BINUM12                              (0xf << 12)
#define USB3_GPRTBIMAP_FSHI_BINUM13_Pos                          16
#define USB3_GPRTBIMAP_FSHI_BINUM13_Msk                          (0xf << 16)
#define USB3_GPRTBIMAP_FSHI_BINUM13                              (0xf << 16)
#define USB3_GPRTBIMAP_FSHI_BINUM14_Pos                          20
#define USB3_GPRTBIMAP_FSHI_BINUM14_Msk                          (0xf << 20)
#define USB3_GPRTBIMAP_FSHI_BINUM14                              (0xf << 20)
#define USB3_GPRTBIMAP_FSHI_BINUM15_Pos                          24
#define USB3_GPRTBIMAP_FSHI_BINUM15_Msk                          (0xf << 24)
#define USB3_GPRTBIMAP_FSHI_BINUM15                              (0xf << 24)

/* Bit fields for USB3_GUCTL2 register */
#define USB3_GUCTL2_TxPingDuration_Pos                           0
#define USB3_GUCTL2_TxPingDuration_Msk                           (0x1f << 0)
#define USB3_GUCTL2_TxPingDuration                               (0x1f << 0)
#define USB3_GUCTL2_RxPingDuration_Pos                           5
#define USB3_GUCTL2_RxPingDuration_Msk                           (0x3f << 5)
#define USB3_GUCTL2_RxPingDuration                               (0x3f << 5)
#define USB3_GUCTL2_DisableCFC_Pos                               11
#define USB3_GUCTL2_DisableCFC_Msk                               (0x1 << 11)
#define USB3_GUCTL2_DisableCFC                                   (0x1 << 11)
#define USB3_GUCTL2_EnableEpCacheEvict_Pos                       12
#define USB3_GUCTL2_EnableEpCacheEvict_Msk                       (0x1 << 12)
#define USB3_GUCTL2_EnableEpCacheEvict                           (0x1 << 12)
#define USB3_GUCTL2_Rst_actbitlater_Pos                          14
#define USB3_GUCTL2_Rst_actbitlater_Msk                          (0x1 << 14)
#define USB3_GUCTL2_Rst_actbitlater                              (0x1 << 14)
#define USB3_GUCTL2_NOLOWPWRDUR_Pos                              15
#define USB3_GUCTL2_NOLOWPWRDUR_Msk                              (0xf << 15)
#define USB3_GUCTL2_NOLOWPWRDUR                                  (0xf << 15)
#define USB3_GUCTL2_EN_HP_PM_TIMER_Pos                           19
#define USB3_GUCTL2_EN_HP_PM_TIMER_Msk                           (0x7f << 19)
#define USB3_GUCTL2_EN_HP_PM_TIMER                               (0x7f << 19)

/* Bit fields for USB3_GUSB2PHYCFG register */
#define USB3_GUSB2PHYCFG_TOutCal_Pos                             0
#define USB3_GUSB2PHYCFG_TOutCal_Msk                             (0x7 << 0)
#define USB3_GUSB2PHYCFG_TOutCal                                 (0x7 << 0)
#define USB3_GUSB2PHYCFG_PHYIF_Pos                               3
#define USB3_GUSB2PHYCFG_PHYIF_Msk                               (0x1 << 3)
#define USB3_GUSB2PHYCFG_PHYIF                                   (0x1 << 3)
#define USB3_GUSB2PHYCFG_ULPI_UTMI_Sel_Pos                       4
#define USB3_GUSB2PHYCFG_ULPI_UTMI_Sel_Msk                       (0x1 << 4)
#define USB3_GUSB2PHYCFG_ULPI_UTMI_Sel                           (0x1 << 4)
#define USB3_GUSB2PHYCFG_FSINTF_Pos                              5
#define USB3_GUSB2PHYCFG_FSINTF_Msk                              (0x1 << 5)
#define USB3_GUSB2PHYCFG_FSINTF                                  (0x1 << 5)
#define USB3_GUSB2PHYCFG_SUSPENDUSB20_Pos                        6
#define USB3_GUSB2PHYCFG_SUSPENDUSB20_Msk                        (0x1 << 6)
#define USB3_GUSB2PHYCFG_SUSPENDUSB20                            (0x1 << 6)
#define USB3_GUSB2PHYCFG_PHYSEL_Pos                              7
#define USB3_GUSB2PHYCFG_PHYSEL_Msk                              (0x1 << 7)
#define USB3_GUSB2PHYCFG_PHYSEL                                  (0x1 << 7)
#define USB3_GUSB2PHYCFG_ENBLSLPM_Pos                            8
#define USB3_GUSB2PHYCFG_ENBLSLPM_Msk                            (0x1 << 8)
#define USB3_GUSB2PHYCFG_ENBLSLPM                                (0x1 << 8)
#define USB3_GUSB2PHYCFG_XCVRDLY_Pos                             9
#define USB3_GUSB2PHYCFG_XCVRDLY_Msk                             (0x1 << 9)
#define USB3_GUSB2PHYCFG_XCVRDLY                                 (0x1 << 9)
#define USB3_GUSB2PHYCFG_USBTRDTIM_Pos                           10
#define USB3_GUSB2PHYCFG_USBTRDTIM_Msk                           (0xf << 10)
#define USB3_GUSB2PHYCFG_USBTRDTIM                               (0xf << 10)
#define USB3_GUSB2PHYCFG_ULPIAUTORES_Pos                         15
#define USB3_GUSB2PHYCFG_ULPIAUTORES_Msk                         (0x1 << 15)
#define USB3_GUSB2PHYCFG_ULPIAUTORES                             (0x1 << 15)
#define USB3_GUSB2PHYCFG_ULPIEXTVBUSDRV_Pos                      17
#define USB3_GUSB2PHYCFG_ULPIEXTVBUSDRV_Msk                      (0x1 << 17)
#define USB3_GUSB2PHYCFG_ULPIEXTVBUSDRV                          (0x1 << 17)
#define USB3_GUSB2PHYCFG_ULPIEXTVBUSINDIACTOR_Pos                18
#define USB3_GUSB2PHYCFG_ULPIEXTVBUSINDIACTOR_Msk                (0x1 << 18)
#define USB3_GUSB2PHYCFG_ULPIEXTVBUSINDIACTOR                    (0x1 << 18)
#define USB3_GUSB2PHYCFG_LSIPD_Pos                               19
#define USB3_GUSB2PHYCFG_LSIPD_Msk                               (0x7 << 19)
#define USB3_GUSB2PHYCFG_LSIPD                                   (0x7 << 19)
#define USB3_GUSB2PHYCFG_LSTRD_Pos                               22
#define USB3_GUSB2PHYCFG_LSTRD_Msk                               (0x7 << 22)
#define USB3_GUSB2PHYCFG_LSTRD                                   (0x7 << 22)
#define USB3_GUSB2PHYCFG_INV_SEL_HSIC_Pos                        26
#define USB3_GUSB2PHYCFG_INV_SEL_HSIC_Msk                        (0x1 << 26)
#define USB3_GUSB2PHYCFG_INV_SEL_HSIC                            (0x1 << 26)
#define USB3_GUSB2PHYCFG_HSIC_CON_WIDTH_ADJ_Pos                  27
#define USB3_GUSB2PHYCFG_HSIC_CON_WIDTH_ADJ_Msk                  (0x3 << 27)
#define USB3_GUSB2PHYCFG_HSIC_CON_WIDTH_ADJ                      (0x3 << 27)
#define USB3_GUSB2PHYCFG_ULPI_LPM_WITH_OPMODE_CHK_Pos            29
#define USB3_GUSB2PHYCFG_ULPI_LPM_WITH_OPMODE_CHK_Msk            (0x1 << 29)
#define USB3_GUSB2PHYCFG_ULPI_LPM_WITH_OPMODE_CHK                (0x1 << 29)
#define USB3_GUSB2PHYCFG_U2_FREECLK_EXISTS_Pos                   30
#define USB3_GUSB2PHYCFG_U2_FREECLK_EXISTS_Msk                   (0x1 << 30)
#define USB3_GUSB2PHYCFG_U2_FREECLK_EXISTS                       (0x1 << 30)
#define USB3_GUSB2PHYCFG_PHYSOFTRST_Pos                          31
#define USB3_GUSB2PHYCFG_PHYSOFTRST_Msk                          (0x1 << 31)
#define USB3_GUSB2PHYCFG_PHYSOFTRST                              (0x1 << 31)

/* Bit fields for USB3_GUSB2I2CCTL register */

/* Bit fields for USB3_GUSB2PHYACC_ULPI register */
#define USB3_GUSB2PHYACC_ULPI_REGDATA_Pos                        0
#define USB3_GUSB2PHYACC_ULPI_REGDATA_Msk                        (0xff << 0)
#define USB3_GUSB2PHYACC_ULPI_REGDATA                            (0xff << 0)
#define USB3_GUSB2PHYACC_ULPI_EXTREGADDR_Pos                     8
#define USB3_GUSB2PHYACC_ULPI_EXTREGADDR_Msk                     (0xff << 8)
#define USB3_GUSB2PHYACC_ULPI_EXTREGADDR                         (0xff << 8)
#define USB3_GUSB2PHYACC_ULPI_REGADDR_Pos                        16
#define USB3_GUSB2PHYACC_ULPI_REGADDR_Msk                        (0x3f << 16)
#define USB3_GUSB2PHYACC_ULPI_REGADDR                            (0x3f << 16)
#define USB3_GUSB2PHYACC_ULPI_REGWR_Pos                          22
#define USB3_GUSB2PHYACC_ULPI_REGWR_Msk                          (0x1 << 22)
#define USB3_GUSB2PHYACC_ULPI_REGWR                              (0x1 << 22)
#define USB3_GUSB2PHYACC_ULPI_VSTSBSY_Pos                        23
#define USB3_GUSB2PHYACC_ULPI_VSTSBSY_Msk                        (0x1 << 23)
#define USB3_GUSB2PHYACC_ULPI_VSTSBSY                            (0x1 << 23)
#define USB3_GUSB2PHYACC_ULPI_VSTSDONE_Pos                       24
#define USB3_GUSB2PHYACC_ULPI_VSTSDONE_Msk                       (0x1 << 24)
#define USB3_GUSB2PHYACC_ULPI_VSTSDONE                           (0x1 << 24)
#define USB3_GUSB2PHYACC_ULPI_NEWREGREQ_Pos                      25
#define USB3_GUSB2PHYACC_ULPI_NEWREGREQ_Msk                      (0x1 << 25)
#define USB3_GUSB2PHYACC_ULPI_NEWREGREQ                          (0x1 << 25)
#define USB3_GUSB2PHYACC_ULPI_DISUIPIDRVR_Pos                    26
#define USB3_GUSB2PHYACC_ULPI_DISUIPIDRVR_Msk                    (0x1 << 26)
#define USB3_GUSB2PHYACC_ULPI_DISUIPIDRVR                        (0x1 << 26)

/* Bit fields for USB3_GUSB3PIPECTL register */
#define USB3_GUSB3PIPECTL_ELASTIC_BUFFER_MODE_Pos                0
#define USB3_GUSB3PIPECTL_ELASTIC_BUFFER_MODE_Msk                (0x1 << 0)
#define USB3_GUSB3PIPECTL_ELASTIC_BUFFER_MODE                    (0x1 << 0)
#define USB3_GUSB3PIPECTL_SS_TX_DE_EMPHASIS_Pos                  1
#define USB3_GUSB3PIPECTL_SS_TX_DE_EMPHASIS_Msk                  (0x3 << 1)
#define USB3_GUSB3PIPECTL_SS_TX_DE_EMPHASIS                      (0x3 << 1)
#define USB3_GUSB3PIPECTL_TX_MARGIN_Pos                          3
#define USB3_GUSB3PIPECTL_TX_MARGIN_Msk                          (0x7 << 3)
#define USB3_GUSB3PIPECTL_TX_MARGIN                              (0x7 << 3)
#define USB3_GUSB3PIPECTL_TX_SWING_Pos                           6
#define USB3_GUSB3PIPECTL_TX_SWING_Msk                           (0x1 << 6)
#define USB3_GUSB3PIPECTL_TX_SWING                               (0x1 << 6)
#define USB3_GUSB3PIPECTL_SSICEn_Pos                             7
#define USB3_GUSB3PIPECTL_SSICEn_Msk                             (0x1 << 7)
#define USB3_GUSB3PIPECTL_SSICEn                                 (0x1 << 7)
#define USB3_GUSB3PIPECTL_RX_DETECT_to_Polling_LFPS_Control_Pos  8
#define USB3_GUSB3PIPECTL_RX_DETECT_to_Polling_LFPS_Control_Msk  (0x1 << 8)
#define USB3_GUSB3PIPECTL_RX_DETECT_to_Polling_LFPS_Control      (0x1 << 8)
#define USB3_GUSB3PIPECTL_LFPSFILTER_Pos                         9
#define USB3_GUSB3PIPECTL_LFPSFILTER_Msk                         (0x1 << 9)
#define USB3_GUSB3PIPECTL_LFPSFILTER                             (0x1 << 9)
#define USB3_GUSB3PIPECTL_P3ExSigP2_Pos                          10
#define USB3_GUSB3PIPECTL_P3ExSigP2_Msk                          (0x1 << 10)
#define USB3_GUSB3PIPECTL_P3ExSigP2                              (0x1 << 10)
#define USB3_GUSB3PIPECTL_P3P2TranOK_Pos                         11
#define USB3_GUSB3PIPECTL_P3P2TranOK_Msk                         (0x1 << 11)
#define USB3_GUSB3PIPECTL_P3P2TranOK                             (0x1 << 11)
#define USB3_GUSB3PIPECTL_LFPSP0Algn_Pos                         12
#define USB3_GUSB3PIPECTL_LFPSP0Algn_Msk                         (0x1 << 12)
#define USB3_GUSB3PIPECTL_LFPSP0Algn                             (0x1 << 12)
#define USB3_GUSB3PIPECTL_SkipRxDet_Pos                          13
#define USB3_GUSB3PIPECTL_SkipRxDet_Msk                          (0x1 << 13)
#define USB3_GUSB3PIPECTL_SkipRxDet                              (0x1 << 13)
#define USB3_GUSB3PIPECTL_AbortRxDetInU2_Pos                     14
#define USB3_GUSB3PIPECTL_AbortRxDetInU2_Msk                     (0x1 << 14)
#define USB3_GUSB3PIPECTL_AbortRxDetInU2                         (0x1 << 14)
#define USB3_GUSB3PIPECTL_DATWIDTH_Pos                           15
#define USB3_GUSB3PIPECTL_DATWIDTH_Msk                           (0x3 << 15)
#define USB3_GUSB3PIPECTL_DATWIDTH                               (0x3 << 15)
#define USB3_GUSB3PIPECTL_SUSPENDENABLE_Pos                      17
#define USB3_GUSB3PIPECTL_SUSPENDENABLE_Msk                      (0x1 << 17)
#define USB3_GUSB3PIPECTL_SUSPENDENABLE                          (0x1 << 17)
#define USB3_GUSB3PIPECTL_DELAYP1TRANS_Pos                       18
#define USB3_GUSB3PIPECTL_DELAYP1TRANS_Msk                       (0x1 << 18)
#define USB3_GUSB3PIPECTL_DELAYP1TRANS                           (0x1 << 18)
#define USB3_GUSB3PIPECTL_DelayP1P2P3_Pos                        19
#define USB3_GUSB3PIPECTL_DelayP1P2P3_Msk                        (0x7 << 19)
#define USB3_GUSB3PIPECTL_DelayP1P2P3                            (0x7 << 19)
#define USB3_GUSB3PIPECTL_DisRxDetU3RxDet_Pos                    22
#define USB3_GUSB3PIPECTL_DisRxDetU3RxDet_Msk                    (0x1 << 22)
#define USB3_GUSB3PIPECTL_DisRxDetU3RxDet                        (0x1 << 22)
#define USB3_GUSB3PIPECTL_StartRxDetU3RxDet_Pos                  23
#define USB3_GUSB3PIPECTL_StartRxDetU3RxDet_Msk                  (0x1 << 23)
#define USB3_GUSB3PIPECTL_StartRxDetU3RxDet                      (0x1 << 23)
#define USB3_GUSB3PIPECTL_request_p1p2p3_Pos                     24
#define USB3_GUSB3PIPECTL_request_p1p2p3_Msk                     (0x1 << 24)
#define USB3_GUSB3PIPECTL_request_p1p2p3                         (0x1 << 24)
#define USB3_GUSB3PIPECTL_u1u2exitfail_to_recov_Pos              25
#define USB3_GUSB3PIPECTL_u1u2exitfail_to_recov_Msk              (0x1 << 25)
#define USB3_GUSB3PIPECTL_u1u2exitfail_to_recov                  (0x1 << 25)
#define USB3_GUSB3PIPECTL_ping_enhancement_en_Pos                26
#define USB3_GUSB3PIPECTL_ping_enhancement_en_Msk                (0x1 << 26)
#define USB3_GUSB3PIPECTL_ping_enhancement_en                    (0x1 << 26)
#define USB3_GUSB3PIPECTL_Ux_exit_in_Px_Pos                      27
#define USB3_GUSB3PIPECTL_Ux_exit_in_Px_Msk                      (0x1 << 27)
#define USB3_GUSB3PIPECTL_Ux_exit_in_Px                          (0x1 << 27)
#define USB3_GUSB3PIPECTL_DisRxDetP3_Pos                         28
#define USB3_GUSB3PIPECTL_DisRxDetP3_Msk                         (0x1 << 28)
#define USB3_GUSB3PIPECTL_DisRxDetP3                             (0x1 << 28)
#define USB3_GUSB3PIPECTL_U2P3ok_Pos                             29
#define USB3_GUSB3PIPECTL_U2P3ok_Msk                             (0x1 << 29)
#define USB3_GUSB3PIPECTL_U2P3ok                                 (0x1 << 29)
#define USB3_GUSB3PIPECTL_HstPrtCmpl_Pos                         30
#define USB3_GUSB3PIPECTL_HstPrtCmpl_Msk                         (0x1 << 30)
#define USB3_GUSB3PIPECTL_HstPrtCmpl                             (0x1 << 30)
#define USB3_GUSB3PIPECTL_PHYSoftRst_Pos                         31
#define USB3_GUSB3PIPECTL_PHYSoftRst_Msk                         (0x1 << 31)
#define USB3_GUSB3PIPECTL_PHYSoftRst                             (0x1 << 31)

/* Bit fields for USB3_GTXFIFOSIZ0 register */
#define USB3_GTXFIFOSIZ0_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ0_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ0_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ0_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ0_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ0_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ1 register */
#define USB3_GTXFIFOSIZ1_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ1_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ1_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ1_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ1_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ1_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ2 register */
#define USB3_GTXFIFOSIZ2_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ2_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ2_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ2_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ2_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ2_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ3 register */
#define USB3_GTXFIFOSIZ3_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ3_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ3_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ3_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ3_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ3_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ4 register */
#define USB3_GTXFIFOSIZ4_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ4_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ4_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ4_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ4_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ4_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ5 register */
#define USB3_GTXFIFOSIZ5_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ5_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ5_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ5_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ5_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ5_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ6 register */
#define USB3_GTXFIFOSIZ6_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ6_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ6_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ6_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ6_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ6_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ7 register */
#define USB3_GTXFIFOSIZ7_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ7_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ7_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ7_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ7_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ7_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ8 register */
#define USB3_GTXFIFOSIZ8_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ8_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ8_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ8_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ8_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ8_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ9 register */
#define USB3_GTXFIFOSIZ9_TXFDEP_N_Pos                            0
#define USB3_GTXFIFOSIZ9_TXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GTXFIFOSIZ9_TXFDEP_N                                (0xffff << 0)
#define USB3_GTXFIFOSIZ9_TXFSTADDR_N_Pos                         16
#define USB3_GTXFIFOSIZ9_TXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GTXFIFOSIZ9_TXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ10 register */
#define USB3_GTXFIFOSIZ10_TXFDEP_N_Pos                           0
#define USB3_GTXFIFOSIZ10_TXFDEP_N_Msk                           (0xffff << 0)
#define USB3_GTXFIFOSIZ10_TXFDEP_N                               (0xffff << 0)
#define USB3_GTXFIFOSIZ10_TXFSTADDR_N_Pos                        16
#define USB3_GTXFIFOSIZ10_TXFSTADDR_N_Msk                        (0xffff << 16)
#define USB3_GTXFIFOSIZ10_TXFSTADDR_N                            (0xffff << 16)

/* Bit fields for USB3_GTXFIFOSIZ11 register */
#define USB3_GTXFIFOSIZ11_TXFDEP_N_Pos                           0
#define USB3_GTXFIFOSIZ11_TXFDEP_N_Msk                           (0xffff << 0)
#define USB3_GTXFIFOSIZ11_TXFDEP_N                               (0xffff << 0)
#define USB3_GTXFIFOSIZ11_TXFSTADDR_N_Pos                        16
#define USB3_GTXFIFOSIZ11_TXFSTADDR_N_Msk                        (0xffff << 16)
#define USB3_GTXFIFOSIZ11_TXFSTADDR_N                            (0xffff << 16)

/* Bit fields for USB3_GRXFIFOSIZ0 register */
#define USB3_GRXFIFOSIZ0_RXFDEP_N_Pos                            0
#define USB3_GRXFIFOSIZ0_RXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GRXFIFOSIZ0_RXFDEP_N                                (0xffff << 0)
#define USB3_GRXFIFOSIZ0_RXFSTADDR_N_Pos                         16
#define USB3_GRXFIFOSIZ0_RXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GRXFIFOSIZ0_RXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GRXFIFOSIZ1 register */
#define USB3_GRXFIFOSIZ1_RXFDEP_N_Pos                            0
#define USB3_GRXFIFOSIZ1_RXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GRXFIFOSIZ1_RXFDEP_N                                (0xffff << 0)
#define USB3_GRXFIFOSIZ1_RXFSTADDR_N_Pos                         16
#define USB3_GRXFIFOSIZ1_RXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GRXFIFOSIZ1_RXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GRXFIFOSIZ2 register */
#define USB3_GRXFIFOSIZ2_RXFDEP_N_Pos                            0
#define USB3_GRXFIFOSIZ2_RXFDEP_N_Msk                            (0xffff << 0)
#define USB3_GRXFIFOSIZ2_RXFDEP_N                                (0xffff << 0)
#define USB3_GRXFIFOSIZ2_RXFSTADDR_N_Pos                         16
#define USB3_GRXFIFOSIZ2_RXFSTADDR_N_Msk                         (0xffff << 16)
#define USB3_GRXFIFOSIZ2_RXFSTADDR_N                             (0xffff << 16)

/* Bit fields for USB3_GEVNTADRLO register */
#define USB3_GEVNTADRLO_EVNTADRLO_Pos                            0
#define USB3_GEVNTADRLO_EVNTADRLO_Msk                            (0xFFFFFFFF << 0)
#define USB3_GEVNTADRLO_EVNTADRLO                                (0xFFFFFFFF << 0)

/* Bit fields for USB3_GEVNTADRHI register */
#define USB3_GEVNTADRHI_EVNTADRHI_Pos                            0
#define USB3_GEVNTADRHI_EVNTADRHI_Msk                            (0xFFFFFFFF << 0)
#define USB3_GEVNTADRHI_EVNTADRHI                                (0xFFFFFFFF << 0)

/* Bit fields for USB3_GEVNTSIZ register */
#define USB3_GEVNTSIZ_EVENTSIZ_Pos                               0
#define USB3_GEVNTSIZ_EVENTSIZ_Msk                               (0xffff << 0)
#define USB3_GEVNTSIZ_EVENTSIZ                                   (0xffff << 0)
#define USB3_GEVNTSIZ_EVNTINTRPTMASK_Pos                         31
#define USB3_GEVNTSIZ_EVNTINTRPTMASK_Msk                         (0x1 << 31)
#define USB3_GEVNTSIZ_EVNTINTRPTMASK                             (0x1 << 31)

/* Bit fields for USB3_GEVNTCOUNT register */
#define USB3_GEVNTCOUNT_EVNTCOUNT_Pos                            0
#define USB3_GEVNTCOUNT_EVNTCOUNT_Msk                            (0xffff << 0)
#define USB3_GEVNTCOUNT_EVNTCOUNT                                (0xffff << 0)
#define USB3_GEVNTCOUNT_EVNT_HANDLER_BUSY_Pos                    31
#define USB3_GEVNTCOUNT_EVNT_HANDLER_BUSY_Msk                    (0x1 << 31)
#define USB3_GEVNTCOUNT_EVNT_HANDLER_BUSY                        (0x1 << 31)

/* Bit fields for USB3_GHWPARAMS8 register */
#define USB3_GHWPARAMS8_ghwparams8_32_0_Pos                      0
#define USB3_GHWPARAMS8_ghwparams8_32_0_Msk                      (0xFFFFFFFF << 0)
#define USB3_GHWPARAMS8_ghwparams8_32_0                          (0xFFFFFFFF << 0)

/* Bit fields for USB3_GTXFIFOPRIDEV register */
#define USB3_GTXFIFOPRIDEV_gtxfifopridev_Pos                     0
#define USB3_GTXFIFOPRIDEV_gtxfifopridev_Msk                     (0xfff << 0)
#define USB3_GTXFIFOPRIDEV_gtxfifopridev                         (0xfff << 0)

/* Bit fields for USB3_GTXFIFOPRIHST register */
#define USB3_GTXFIFOPRIHST_gtxfifoprihst_Pos                     0
#define USB3_GTXFIFOPRIHST_gtxfifoprihst_Msk                     (0x7 << 0)
#define USB3_GTXFIFOPRIHST_gtxfifoprihst                         (0x7 << 0)

/* Bit fields for USB3_GRXFIFOPRIHST register */
#define USB3_GRXFIFOPRIHST_grxfifoprihst_Pos                     0
#define USB3_GRXFIFOPRIHST_grxfifoprihst_Msk                     (0x7 << 0)
#define USB3_GRXFIFOPRIHST_grxfifoprihst                         (0x7 << 0)

/* Bit fields for USB3_GDMAHLRATIO register */
#define USB3_GDMAHLRATIO_hsttxfifo_Pos                           0
#define USB3_GDMAHLRATIO_hsttxfifo_Msk                           (0x1f << 0)
#define USB3_GDMAHLRATIO_hsttxfifo                               (0x1f << 0)
#define USB3_GDMAHLRATIO_hstrxfifo_Pos                           8
#define USB3_GDMAHLRATIO_hstrxfifo_Msk                           (0x1f << 8)
#define USB3_GDMAHLRATIO_hstrxfifo                               (0x1f << 8)

/* Bit fields for USB3_GFLADJ register */
#define USB3_GFLADJ_GFLADJ_30MHZ_Pos                             0
#define USB3_GFLADJ_GFLADJ_30MHZ_Msk                             (0x3f << 0)
#define USB3_GFLADJ_GFLADJ_30MHZ                                 (0x3f << 0)
#define USB3_GFLADJ_GFLADJ_30MHZ_SDBND_SEL_Pos                   7
#define USB3_GFLADJ_GFLADJ_30MHZ_SDBND_SEL_Msk                   (0x1 << 7)
#define USB3_GFLADJ_GFLADJ_30MHZ_SDBND_SEL                       (0x1 << 7)
#define USB3_GFLADJ_GFLADJ_REFCLK_FLADJ_Pos                      8
#define USB3_GFLADJ_GFLADJ_REFCLK_FLADJ_Msk                      (0x3fff << 8)
#define USB3_GFLADJ_GFLADJ_REFCLK_FLADJ                          (0x3fff << 8)
#define USB3_GFLADJ_GFLADJ_REFCLK_LPM_SEL_Pos                    23
#define USB3_GFLADJ_GFLADJ_REFCLK_LPM_SEL_Msk                    (0x1 << 23)
#define USB3_GFLADJ_GFLADJ_REFCLK_LPM_SEL                        (0x1 << 23)
#define USB3_GFLADJ_GFLADJ_REFCLK_240MHZ_DECR_Pos                24
#define USB3_GFLADJ_GFLADJ_REFCLK_240MHZ_DECR_Msk                (0x7f << 24)
#define USB3_GFLADJ_GFLADJ_REFCLK_240MHZ_DECR                    (0x7f << 24)
#define USB3_GFLADJ_GFLADJ_REFCLK_240MHZDECR_PLS1_Pos            31
#define USB3_GFLADJ_GFLADJ_REFCLK_240MHZDECR_PLS1_Msk            (0x1 << 31)
#define USB3_GFLADJ_GFLADJ_REFCLK_240MHZDECR_PLS1                (0x1 << 31)

/* Bit fields for USB3_DCFG register */
#define USB3_DCFG_DEVSPD_Pos                 0
#define USB3_DCFG_DEVSPD_Msk                 (0x7 << 0)
#define USB3_DCFG_DEVSPD                     (0x7 << 0)
#define USB3_DCFG_DEVADDR_Pos                3
#define USB3_DCFG_DEVADDR_Msk                (0x7f << 3)
#define USB3_DCFG_DEVADDR                    (0x7f << 3)
#define USB3_DCFG_INTRNUM_Pos                12
#define USB3_DCFG_INTRNUM_Msk                (0x1f << 12)
#define USB3_DCFG_INTRNUM                    (0x1f << 12)
#define USB3_DCFG_NUMP_Pos                   17
#define USB3_DCFG_NUMP_Msk                   (0x1f << 17)
#define USB3_DCFG_NUMP                       (0x1f << 17)
#define USB3_DCFG_LPMCAP_Pos                 22
#define USB3_DCFG_LPMCAP_Msk                 (0x1 << 22)
#define USB3_DCFG_LPMCAP                     (0x1 << 22)
#define USB3_DCFG_IgnStrmPP_Pos              23
#define USB3_DCFG_IgnStrmPP_Msk              (0x1 << 23)
#define USB3_DCFG_IgnStrmPP                  (0x1 << 23)

/* Bit fields for USB3_DCTL register */
#define USB3_DCTL_TSTCTL_Pos                 1
#define USB3_DCTL_TSTCTL_Msk                 (0xf << 1)
#define USB3_DCTL_TSTCTL                     (0xf << 1)
#define USB3_DCTL_ULSTCHNGREQ_Pos            5
#define USB3_DCTL_ULSTCHNGREQ_Msk            (0xf << 5)
#define USB3_DCTL_ULSTCHNGREQ                (0xf << 5)
#define USB3_DCTL_ACCEPTU1ENA_Pos            9
#define USB3_DCTL_ACCEPTU1ENA_Msk            (0x1 << 9)
#define USB3_DCTL_ACCEPTU1ENA                (0x1 << 9)
#define USB3_DCTL_INITU1ENA_Pos              10
#define USB3_DCTL_INITU1ENA_Msk              (0x1 << 10)
#define USB3_DCTL_INITU1ENA                  (0x1 << 10)
#define USB3_DCTL_ACCEPTU2ENA_Pos            11
#define USB3_DCTL_ACCEPTU2ENA_Msk            (0x1 << 11)
#define USB3_DCTL_ACCEPTU2ENA                (0x1 << 11)
#define USB3_DCTL_INITU2ENA_Pos              12
#define USB3_DCTL_INITU2ENA_Msk              (0x1 << 12)
#define USB3_DCTL_INITU2ENA                  (0x1 << 12)
#define USB3_DCTL_CSS_Pos                    16
#define USB3_DCTL_CSS_Msk                    (0x1 << 16)
#define USB3_DCTL_CSS                        (0x1 << 16)
#define USB3_DCTL_CRS_Pos                    17
#define USB3_DCTL_CRS_Msk                    (0x1 << 17)
#define USB3_DCTL_CRS                        (0x1 << 17)
#define USB3_DCTL_L1HibernationEn_Pos        18
#define USB3_DCTL_L1HibernationEn_Msk        (0x1 << 18)
#define USB3_DCTL_L1HibernationEn            (0x1 << 18)
#define USB3_DCTL_KeepConnect_Pos            19
#define USB3_DCTL_KeepConnect_Msk            (0x1 << 19)
#define USB3_DCTL_KeepConnect                (0x1 << 19)
#define USB3_DCTL_LPM_NYET_thres_Pos         20
#define USB3_DCTL_LPM_NYET_thres_Msk         (0xf << 20)
#define USB3_DCTL_LPM_NYET_thres             (0xf << 20)
#define USB3_DCTL_HIRDTHRES_Pos              24
#define USB3_DCTL_HIRDTHRES_Msk              (0x1f << 24)
#define USB3_DCTL_HIRDTHRES                  (0x1f << 24)
#define USB3_DCTL_CSFTRST_Pos                30
#define USB3_DCTL_CSFTRST_Msk                (0x1 << 30)
#define USB3_DCTL_CSFTRST                    (0x1 << 30)
#define USB3_DCTL_RUN_STOP_Pos               31
#define USB3_DCTL_RUN_STOP_Msk               (0x1 << 31)
#define USB3_DCTL_RUN_STOP                   (0x1 << 31)

/* Bit fields for USB3_DEVTEN register */
#define USB3_DEVTEN_DISSCONNEVTEN_Pos        0
#define USB3_DEVTEN_DISSCONNEVTEN_Msk        (0x1 << 0)
#define USB3_DEVTEN_DISSCONNEVTEN            (0x1 << 0)
#define USB3_DEVTEN_USBRSTEVTEN_Pos          1
#define USB3_DEVTEN_USBRSTEVTEN_Msk          (0x1 << 1)
#define USB3_DEVTEN_USBRSTEVTEN              (0x1 << 1)
#define USB3_DEVTEN_CONNECTDONEEVTEN_Pos     2
#define USB3_DEVTEN_CONNECTDONEEVTEN_Msk     (0x1 << 2)
#define USB3_DEVTEN_CONNECTDONEEVTEN         (0x1 << 2)
#define USB3_DEVTEN_ULSTCNGEN_Pos            3
#define USB3_DEVTEN_ULSTCNGEN_Msk            (0x1 << 3)
#define USB3_DEVTEN_ULSTCNGEN                (0x1 << 3)
#define USB3_DEVTEN_WKUPEVTEN_Pos            4
#define USB3_DEVTEN_WKUPEVTEN_Msk            (0x1 << 4)
#define USB3_DEVTEN_WKUPEVTEN                (0x1 << 4)
#define USB3_DEVTEN_HibernationReqEvtEn_Pos  5
#define USB3_DEVTEN_HibernationReqEvtEn_Msk  (0x1 << 5)
#define USB3_DEVTEN_HibernationReqEvtEn      (0x1 << 5)
#define USB3_DEVTEN_U3L2L1SuspEn_Pos         6
#define USB3_DEVTEN_U3L2L1SuspEn_Msk         (0x1 << 6)
#define USB3_DEVTEN_U3L2L1SuspEn             (0x1 << 6)
#define USB3_DEVTEN_SOFTEVTEN_Pos            7
#define USB3_DEVTEN_SOFTEVTEN_Msk            (0x1 << 7)
#define USB3_DEVTEN_SOFTEVTEN                (0x1 << 7)
#define USB3_DEVTEN_L1SUSPEN_Pos             8
#define USB3_DEVTEN_L1SUSPEN_Msk             (0x1 << 8)
#define USB3_DEVTEN_L1SUSPEN                 (0x1 << 8)
#define USB3_DEVTEN_ERRTICERREVTEN_Pos       9
#define USB3_DEVTEN_ERRTICERREVTEN_Msk       (0x1 << 9)
#define USB3_DEVTEN_ERRTICERREVTEN           (0x1 << 9)
#define USB3_DEVTEN_CMDCMPLTEN_Pos           10
#define USB3_DEVTEN_CMDCMPLTEN_Msk           (0x1 << 10)
#define USB3_DEVTEN_CMDCMPLTEN               (0x1 << 10)
#define USB3_DEVTEN_EVNTOVERFLOWEN_Pos       11
#define USB3_DEVTEN_EVNTOVERFLOWEN_Msk       (0x1 << 11)
#define USB3_DEVTEN_EVNTOVERFLOWEN           (0x1 << 11)
#define USB3_DEVTEN_VENDEVTSTRCVDEN_Pos      12
#define USB3_DEVTEN_VENDEVTSTRCVDEN_Msk      (0x1 << 12)
#define USB3_DEVTEN_VENDEVTSTRCVDEN          (0x1 << 12)
#define USB3_DEVTEN_L1WKUPEVTEN_Pos          14
#define USB3_DEVTEN_L1WKUPEVTEN_Msk          (0x1 << 14)
#define USB3_DEVTEN_L1WKUPEVTEN              (0x1 << 14)
#define USB3_DEVTEN_ECCERREN_Pos             16
#define USB3_DEVTEN_ECCERREN_Msk             (0x1 << 16)
#define USB3_DEVTEN_ECCERREN                 (0x1 << 16)

/* Bit fields for USB3_DSTS register */
#define USB3_DSTS_CONNECTSPD_Pos             0
#define USB3_DSTS_CONNECTSPD_Msk             (0x7 << 0)
#define USB3_DSTS_CONNECTSPD                 (0x7 << 0)
#define USB3_DSTS_SOFFN_Pos                  3
#define USB3_DSTS_SOFFN_Msk                  (0x3fff << 3)
#define USB3_DSTS_SOFFN                      (0x3fff << 3)
#define USB3_DSTS_RXFIFOEMPTY_Pos            17
#define USB3_DSTS_RXFIFOEMPTY_Msk            (0x1 << 17)
#define USB3_DSTS_RXFIFOEMPTY                (0x1 << 17)
#define USB3_DSTS_USBLNKST_Pos               18
#define USB3_DSTS_USBLNKST_Msk               (0xf << 18)
#define USB3_DSTS_USBLNKST                   (0xf << 18)
#define USB3_DSTS_DEVCTRLHLT_Pos             22
#define USB3_DSTS_DEVCTRLHLT_Msk             (0x1 << 22)
#define USB3_DSTS_DEVCTRLHLT                 (0x1 << 22)
#define USB3_DSTS_COREIDLE_Pos               23
#define USB3_DSTS_COREIDLE_Msk               (0x1 << 23)
#define USB3_DSTS_COREIDLE                   (0x1 << 23)
#define USB3_DSTS_SSS_Pos                    24
#define USB3_DSTS_SSS_Msk                    (0x1 << 24)
#define USB3_DSTS_SSS                        (0x1 << 24)
#define USB3_DSTS_RSS_Pos                    25
#define USB3_DSTS_RSS_Msk                    (0x1 << 25)
#define USB3_DSTS_RSS                        (0x1 << 25)
#define USB3_DSTS_SRE_Pos                    28
#define USB3_DSTS_SRE_Msk                    (0x1 << 28)
#define USB3_DSTS_SRE                        (0x1 << 28)
#define USB3_DSTS_DCNRD_Pos                  29
#define USB3_DSTS_DCNRD_Msk                  (0x1 << 29)
#define USB3_DSTS_DCNRD                      (0x1 << 29)

/* Bit fields for USB3_DGCMDPAR register */
#define USB3_DGCMDPAR_PARAMETER_Pos          0
#define USB3_DGCMDPAR_PARAMETER_Msk          (0xFFFFFFFF << 0)
#define USB3_DGCMDPAR_PARAMETER              (0xFFFFFFFF << 0)

/* Bit fields for USB3_DGCMD register */
#define USB3_DGCMD_CMDTYP_Pos                0
#define USB3_DGCMD_CMDTYP_Msk                (0xff << 0)
#define USB3_DGCMD_CMDTYP                    (0xff << 0)
#define USB3_DGCMD_CMDIOC_Pos                8
#define USB3_DGCMD_CMDIOC_Msk                (0x1 << 8)
#define USB3_DGCMD_CMDIOC                    (0x1 << 8)
#define USB3_DGCMD_CMDACT_Pos                10
#define USB3_DGCMD_CMDACT_Msk                (0x1 << 10)
#define USB3_DGCMD_CMDACT                    (0x1 << 10)
#define USB3_DGCMD_CMDSTATUS_Pos             12
#define USB3_DGCMD_CMDSTATUS_Msk             (0xf << 12)
#define USB3_DGCMD_CMDSTATUS                 (0xf << 12)

/* Bit fields for USB3_DALEPENA register */
#define USB3_DALEPENA_USBACTEP_Pos           0
#define USB3_DALEPENA_USBACTEP_Msk           (0xFFFFFFFF << 0)
#define USB3_DALEPENA_USBACTEP               (0xFFFFFFFF << 0)

/* Bit fields for USB3_Rsvd register */

/* Bit fields for USB3_DEPCMDPAR2 register */
#define USB3_DEPCMDPAR2_PARAMETER_Pos        0
#define USB3_DEPCMDPAR2_PARAMETER_Msk        (0xFFFFFFFF << 0)
#define USB3_DEPCMDPAR2_PARAMETER            (0xFFFFFFFF << 0)

/* Bit fields for USB3_DEPCMDPAR1 register */
#define USB3_DEPCMDPAR1_PARAMETER_Pos        0
#define USB3_DEPCMDPAR1_PARAMETER_Msk        (0xFFFFFFFF << 0)
#define USB3_DEPCMDPAR1_PARAMETER            (0xFFFFFFFF << 0)

/* Bit fields for USB3_DEPCMDPAR0 register */
#define USB3_DEPCMDPAR0_PARAMETER_Pos        0
#define USB3_DEPCMDPAR0_PARAMETER_Msk        (0xFFFFFFFF << 0)
#define USB3_DEPCMDPAR0_PARAMETER            (0xFFFFFFFF << 0)

/* Bit fields for USB3_DEPCMD register */
#define USB3_DEPCMD_CMDTYP_Pos               0
#define USB3_DEPCMD_CMDTYP_Msk               (0xf << 0)
#define USB3_DEPCMD_CMDTYP                   (0xf << 0)
#define USB3_DEPCMD_CMDIOC_Pos               8
#define USB3_DEPCMD_CMDIOC_Msk               (0x1 << 8)
#define USB3_DEPCMD_CMDIOC                   (0x1 << 8)
#define USB3_DEPCMD_CMDACT_Pos               10
#define USB3_DEPCMD_CMDACT_Msk               (0x1 << 10)
#define USB3_DEPCMD_CMDACT                   (0x1 << 10)
#define USB3_DEPCMD_HIPRI_FORCERM_Pos        11
#define USB3_DEPCMD_HIPRI_FORCERM_Msk        (0x1 << 11)
#define USB3_DEPCMD_HIPRI_FORCERM            (0x1 << 11)
#define USB3_DEPCMD_CMDSTATUS_Pos            12
#define USB3_DEPCMD_CMDSTATUS_Msk            (0xf << 12)
#define USB3_DEPCMD_CMDSTATUS                (0xf << 12)
#define USB3_DEPCMD_COMMANDPARAM_Pos         16
#define USB3_DEPCMD_COMMANDPARAM_Msk         (0xffff << 16)
#define USB3_DEPCMD_COMMANDPARAM             (0xffff << 16)

/* Bit fields for USB3_DEV_IMOD register */
#define USB3_DEV_IMOD_DEVICE_IMODI_Pos       0
#define USB3_DEV_IMOD_DEVICE_IMODI_Msk       (0xffff << 0)
#define USB3_DEV_IMOD_DEVICE_IMODI           (0xffff << 0)
#define USB3_DEV_IMOD_DEVICE_IMODC_Pos       16
#define USB3_DEV_IMOD_DEVICE_IMODC_Msk       (0xffff << 16)
#define USB3_DEV_IMOD_DEVICE_IMODC           (0xffff << 16)

/* Bit fields for USB3_BCFG register */
#define USB3_BCFG_CHIRP_EN_Pos           0
#define USB3_BCFG_CHIRP_EN_Msk           (0x1 << 0)
#define USB3_BCFG_CHIRP_EN               (0x1 << 0)
#define USB3_BCFG_IDDIG_SEL_Pos          1
#define USB3_BCFG_IDDIG_SEL_Msk          (0x1 << 1)
#define USB3_BCFG_IDDIG_SEL              (0x1 << 1)

/* Bit fields for USB3_BCEVT register */
#define USB3_BCEVT_MultValIdBc_Pos       0
#define USB3_BCEVT_MultValIdBc_Msk       (0x1f << 0)
#define USB3_BCEVT_MultValIdBc           (0x1f << 0)
#define USB3_BCEVT_MV_ChngEvnt_Pos       24
#define USB3_BCEVT_MV_ChngEvnt_Msk       (0x1 << 24)
#define USB3_BCEVT_MV_ChngEvnt           (0x1 << 24)

/* Bit fields for USB3_BCEVTEN register */
#define USB3_BCEVTEN_MV_ChngEvntEna_Pos  24
#define USB3_BCEVTEN_MV_ChngEvntEna_Msk  (0x1 << 24)
#define USB3_BCEVTEN_MV_ChngEvntEna      (0x1 << 24)

/* Bit fields for USB3_CAPLENGTH register */
#define USB3_CAPLENGTH_CAPLENGTH_Pos              0
#define USB3_CAPLENGTH_CAPLENGTH_Msk              (0xff << 0)
#define USB3_CAPLENGTH_CAPLENGTH                  (0xff << 0)
#define USB3_CAPLENGTH_HCIVERSION_Pos             16
#define USB3_CAPLENGTH_HCIVERSION_Msk             (0xffff << 16)
#define USB3_CAPLENGTH_HCIVERSION                 (0xffff << 16)

/* Bit fields for USB3_HCSPARAMS1 register */
#define USB3_HCSPARAMS1_MAXSLOTS_Pos              0
#define USB3_HCSPARAMS1_MAXSLOTS_Msk              (0xff << 0)
#define USB3_HCSPARAMS1_MAXSLOTS                  (0xff << 0)
#define USB3_HCSPARAMS1_MAXINTRS_Pos              8
#define USB3_HCSPARAMS1_MAXINTRS_Msk              (0x7ff << 8)
#define USB3_HCSPARAMS1_MAXINTRS                  (0x7ff << 8)
#define USB3_HCSPARAMS1_MAXPORTS_Pos              24
#define USB3_HCSPARAMS1_MAXPORTS_Msk              (0xff << 24)
#define USB3_HCSPARAMS1_MAXPORTS                  (0xff << 24)

/* Bit fields for USB3_HCSPARAMS2 register */
#define USB3_HCSPARAMS2_IST_Pos                   0
#define USB3_HCSPARAMS2_IST_Msk                   (0xf << 0)
#define USB3_HCSPARAMS2_IST                       (0xf << 0)
#define USB3_HCSPARAMS2_ERSTMAX_Pos               4
#define USB3_HCSPARAMS2_ERSTMAX_Msk               (0xf << 4)
#define USB3_HCSPARAMS2_ERSTMAX                   (0xf << 4)
#define USB3_HCSPARAMS2_MAXSCRATCHPADBUFS_HI_Pos  21
#define USB3_HCSPARAMS2_MAXSCRATCHPADBUFS_HI_Msk  (0x1f << 21)
#define USB3_HCSPARAMS2_MAXSCRATCHPADBUFS_HI      (0x1f << 21)
#define USB3_HCSPARAMS2_SPR_Pos                   26
#define USB3_HCSPARAMS2_SPR_Msk                   (0x1 << 26)
#define USB3_HCSPARAMS2_SPR                       (0x1 << 26)
#define USB3_HCSPARAMS2_MAXSCRATCHPADBUFS_Pos     27
#define USB3_HCSPARAMS2_MAXSCRATCHPADBUFS_Msk     (0x1f << 27)
#define USB3_HCSPARAMS2_MAXSCRATCHPADBUFS         (0x1f << 27)

/* Bit fields for USB3_HCSPARAMS3 register */
#define USB3_HCSPARAMS3_U1_DEVICE_EXIT_LAT_Pos    0
#define USB3_HCSPARAMS3_U1_DEVICE_EXIT_LAT_Msk    (0xff << 0)
#define USB3_HCSPARAMS3_U1_DEVICE_EXIT_LAT        (0xff << 0)
#define USB3_HCSPARAMS3_U2_DEVICE_EXIT_LAT_Pos    16
#define USB3_HCSPARAMS3_U2_DEVICE_EXIT_LAT_Msk    (0xffff << 16)
#define USB3_HCSPARAMS3_U2_DEVICE_EXIT_LAT        (0xffff << 16)

/* Bit fields for USB3_HCCPARAMS1 register */
#define USB3_HCCPARAMS1_AC64_Pos                  0
#define USB3_HCCPARAMS1_AC64_Msk                  (0x1 << 0)
#define USB3_HCCPARAMS1_AC64                      (0x1 << 0)
#define USB3_HCCPARAMS1_BNC_Pos                   1
#define USB3_HCCPARAMS1_BNC_Msk                   (0x1 << 1)
#define USB3_HCCPARAMS1_BNC                       (0x1 << 1)
#define USB3_HCCPARAMS1_CSZ_Pos                   2
#define USB3_HCCPARAMS1_CSZ_Msk                   (0x1 << 2)
#define USB3_HCCPARAMS1_CSZ                       (0x1 << 2)
#define USB3_HCCPARAMS1_PPC_Pos                   3
#define USB3_HCCPARAMS1_PPC_Msk                   (0x1 << 3)
#define USB3_HCCPARAMS1_PPC                       (0x1 << 3)
#define USB3_HCCPARAMS1_PIND_Pos                  4
#define USB3_HCCPARAMS1_PIND_Msk                  (0x1 << 4)
#define USB3_HCCPARAMS1_PIND                      (0x1 << 4)
#define USB3_HCCPARAMS1_LHRC_Pos                  5
#define USB3_HCCPARAMS1_LHRC_Msk                  (0x1 << 5)
#define USB3_HCCPARAMS1_LHRC                      (0x1 << 5)
#define USB3_HCCPARAMS1_LTC_Pos                   6
#define USB3_HCCPARAMS1_LTC_Msk                   (0x1 << 6)
#define USB3_HCCPARAMS1_LTC                       (0x1 << 6)
#define USB3_HCCPARAMS1_NSS_Pos                   7
#define USB3_HCCPARAMS1_NSS_Msk                   (0x1 << 7)
#define USB3_HCCPARAMS1_NSS                       (0x1 << 7)
#define USB3_HCCPARAMS1_PAE_Pos                   8
#define USB3_HCCPARAMS1_PAE_Msk                   (0x1 << 8)
#define USB3_HCCPARAMS1_PAE                       (0x1 << 8)
#define USB3_HCCPARAMS1_SPC_Pos                   9
#define USB3_HCCPARAMS1_SPC_Msk                   (0x1 << 9)
#define USB3_HCCPARAMS1_SPC                       (0x1 << 9)
#define USB3_HCCPARAMS1_SEC_Pos                   10
#define USB3_HCCPARAMS1_SEC_Msk                   (0x1 << 10)
#define USB3_HCCPARAMS1_SEC                       (0x1 << 10)
#define USB3_HCCPARAMS1_CFC_Pos                   11
#define USB3_HCCPARAMS1_CFC_Msk                   (0x1 << 11)
#define USB3_HCCPARAMS1_CFC                       (0x1 << 11)
#define USB3_HCCPARAMS1_MAXPSASIZE_Pos            12
#define USB3_HCCPARAMS1_MAXPSASIZE_Msk            (0xf << 12)
#define USB3_HCCPARAMS1_MAXPSASIZE                (0xf << 12)
#define USB3_HCCPARAMS1_XECP_Pos                  16
#define USB3_HCCPARAMS1_XECP_Msk                  (0xffff << 16)
#define USB3_HCCPARAMS1_XECP                      (0xffff << 16)

/* Bit fields for USB3_DBOFF register */
#define USB3_DBOFF_DOORBELL_ARRAY_OFFSET_Pos      2
#define USB3_DBOFF_DOORBELL_ARRAY_OFFSET_Msk      (0x3fffffff << 2)
#define USB3_DBOFF_DOORBELL_ARRAY_OFFSET          (0x3fffffff << 2)

/* Bit fields for USB3_RTSOFF register */
#define USB3_RTSOFF_RUNTIME_REG_SPACE_OFFSET_Pos  5
#define USB3_RTSOFF_RUNTIME_REG_SPACE_OFFSET_Msk  (0x7ffffff << 5)
#define USB3_RTSOFF_RUNTIME_REG_SPACE_OFFSET      (0x7ffffff << 5)

/* Bit fields for USB3_HCCPARAMS2 register */
#define USB3_HCCPARAMS2_U3C_Pos                   0
#define USB3_HCCPARAMS2_U3C_Msk                   (0x1 << 0)
#define USB3_HCCPARAMS2_U3C                       (0x1 << 0)
#define USB3_HCCPARAMS2_CMC_Pos                   1
#define USB3_HCCPARAMS2_CMC_Msk                   (0x1 << 1)
#define USB3_HCCPARAMS2_CMC                       (0x1 << 1)
#define USB3_HCCPARAMS2_FSC_Pos                   2
#define USB3_HCCPARAMS2_FSC_Msk                   (0x1 << 2)
#define USB3_HCCPARAMS2_FSC                       (0x1 << 2)
#define USB3_HCCPARAMS2_CTC_Pos                   3
#define USB3_HCCPARAMS2_CTC_Msk                   (0x1 << 3)
#define USB3_HCCPARAMS2_CTC                       (0x1 << 3)
#define USB3_HCCPARAMS2_LEC_Pos                   4
#define USB3_HCCPARAMS2_LEC_Msk                   (0x1 << 4)
#define USB3_HCCPARAMS2_LEC                       (0x1 << 4)
#define USB3_HCCPARAMS2_CIC_Pos                   5
#define USB3_HCCPARAMS2_CIC_Msk                   (0x1 << 5)
#define USB3_HCCPARAMS2_CIC                       (0x1 << 5)

/* Bit fields for USB3_USBCMD register */
#define USB3_USBCMD_R_S_Pos                     0
#define USB3_USBCMD_R_S_Msk                     (0x1 << 0)
#define USB3_USBCMD_R_S                         (0x1 << 0)
#define USB3_USBCMD_HCRST_Pos                   1
#define USB3_USBCMD_HCRST_Msk                   (0x1 << 1)
#define USB3_USBCMD_HCRST                       (0x1 << 1)
#define USB3_USBCMD_INTE_Pos                    2
#define USB3_USBCMD_INTE_Msk                    (0x1 << 2)
#define USB3_USBCMD_INTE                        (0x1 << 2)
#define USB3_USBCMD_HSEE_Pos                    3
#define USB3_USBCMD_HSEE_Msk                    (0x1 << 3)
#define USB3_USBCMD_HSEE                        (0x1 << 3)
#define USB3_USBCMD_LHCRST_Pos                  7
#define USB3_USBCMD_LHCRST_Msk                  (0x1 << 7)
#define USB3_USBCMD_LHCRST                      (0x1 << 7)
#define USB3_USBCMD_CSS_Pos                     8
#define USB3_USBCMD_CSS_Msk                     (0x1 << 8)
#define USB3_USBCMD_CSS                         (0x1 << 8)
#define USB3_USBCMD_CRS_Pos                     9
#define USB3_USBCMD_CRS_Msk                     (0x1 << 9)
#define USB3_USBCMD_CRS                         (0x1 << 9)
#define USB3_USBCMD_EWE_Pos                     10
#define USB3_USBCMD_EWE_Msk                     (0x1 << 10)
#define USB3_USBCMD_EWE                         (0x1 << 10)
#define USB3_USBCMD_EU3S_Pos                    11
#define USB3_USBCMD_EU3S_Msk                    (0x1 << 11)
#define USB3_USBCMD_EU3S                        (0x1 << 11)
#define USB3_USBCMD_CME_Pos                     13
#define USB3_USBCMD_CME_Msk                     (0x1 << 13)
#define USB3_USBCMD_CME                         (0x1 << 13)

/* Bit fields for USB3_USBSTS register */
#define USB3_USBSTS_HCH_Pos                     0
#define USB3_USBSTS_HCH_Msk                     (0x1 << 0)
#define USB3_USBSTS_HCH                         (0x1 << 0)
#define USB3_USBSTS_HSE_Pos                     2
#define USB3_USBSTS_HSE_Msk                     (0x1 << 2)
#define USB3_USBSTS_HSE                         (0x1 << 2)
#define USB3_USBSTS_EINT_Pos                    3
#define USB3_USBSTS_EINT_Msk                    (0x1 << 3)
#define USB3_USBSTS_EINT                        (0x1 << 3)
#define USB3_USBSTS_PCD_Pos                     4
#define USB3_USBSTS_PCD_Msk                     (0x1 << 4)
#define USB3_USBSTS_PCD                         (0x1 << 4)
#define USB3_USBSTS_SSS_Pos                     8
#define USB3_USBSTS_SSS_Msk                     (0x1 << 8)
#define USB3_USBSTS_SSS                         (0x1 << 8)
#define USB3_USBSTS_RSS_Pos                     9
#define USB3_USBSTS_RSS_Msk                     (0x1 << 9)
#define USB3_USBSTS_RSS                         (0x1 << 9)
#define USB3_USBSTS_SRE_Pos                     10
#define USB3_USBSTS_SRE_Msk                     (0x1 << 10)
#define USB3_USBSTS_SRE                         (0x1 << 10)
#define USB3_USBSTS_CNR_Pos                     11
#define USB3_USBSTS_CNR_Msk                     (0x1 << 11)
#define USB3_USBSTS_CNR                         (0x1 << 11)
#define USB3_USBSTS_HCE_Pos                     12
#define USB3_USBSTS_HCE_Msk                     (0x1 << 12)
#define USB3_USBSTS_HCE                         (0x1 << 12)

/* Bit fields for USB3_PAGESIZE register */
#define USB3_PAGESIZE_PAGE_SIZE_Pos             0
#define USB3_PAGESIZE_PAGE_SIZE_Msk             (0xffff << 0)
#define USB3_PAGESIZE_PAGE_SIZE                 (0xffff << 0)

/* Bit fields for USB3_DNCTRL register */
#define USB3_DNCTRL_N0_N15_Pos                  0
#define USB3_DNCTRL_N0_N15_Msk                  (0xffff << 0)
#define USB3_DNCTRL_N0_N15                      (0xffff << 0)

/* Bit fields for USB3_CRCR_LO register */
#define USB3_CRCR_LO_RCS_Pos                    0
#define USB3_CRCR_LO_RCS_Msk                    (0x1 << 0)
#define USB3_CRCR_LO_RCS                        (0x1 << 0)
#define USB3_CRCR_LO_CS_Pos                     1
#define USB3_CRCR_LO_CS_Msk                     (0x1 << 1)
#define USB3_CRCR_LO_CS                         (0x1 << 1)
#define USB3_CRCR_LO_CA_Pos                     2
#define USB3_CRCR_LO_CA_Msk                     (0x1 << 2)
#define USB3_CRCR_LO_CA                         (0x1 << 2)
#define USB3_CRCR_LO_CRR_Pos                    3
#define USB3_CRCR_LO_CRR_Msk                    (0x1 << 3)
#define USB3_CRCR_LO_CRR                        (0x1 << 3)
#define USB3_CRCR_LO_CMD_RING_PNTR_Pos          6
#define USB3_CRCR_LO_CMD_RING_PNTR_Msk          (0x3ffffff << 6)
#define USB3_CRCR_LO_CMD_RING_PNTR              (0x3ffffff << 6)

/* Bit fields for USB3_CRCR_HI register */
#define USB3_CRCR_HI_CMD_RING_PNTR_Pos          0
#define USB3_CRCR_HI_CMD_RING_PNTR_Msk          (0xFFFFFFFF << 0)
#define USB3_CRCR_HI_CMD_RING_PNTR              (0xFFFFFFFF << 0)

/* Bit fields for USB3_DCBAAP_LO register */
#define USB3_DCBAAP_LO_DEVICE_CONTEXT_BAAP_Pos  6
#define USB3_DCBAAP_LO_DEVICE_CONTEXT_BAAP_Msk  (0x3ffffff << 6)
#define USB3_DCBAAP_LO_DEVICE_CONTEXT_BAAP      (0x3ffffff << 6)

/* Bit fields for USB3_DCBAAP_HI register */
#define USB3_DCBAAP_HI_DEVICE_CONTEXT_BAAP_Pos  0
#define USB3_DCBAAP_HI_DEVICE_CONTEXT_BAAP_Msk  (0xFFFFFFFF << 0)
#define USB3_DCBAAP_HI_DEVICE_CONTEXT_BAAP      (0xFFFFFFFF << 0)

/* Bit fields for USB3_CONFIG register */
#define USB3_CONFIG_MAXSLOTSEN_Pos              0
#define USB3_CONFIG_MAXSLOTSEN_Msk              (0xff << 0)
#define USB3_CONFIG_MAXSLOTSEN                  (0xff << 0)
#define USB3_CONFIG_U3E_Pos                     8
#define USB3_CONFIG_U3E_Msk                     (0x1 << 8)
#define USB3_CONFIG_U3E                         (0x1 << 8)
#define USB3_CONFIG_CIE_Pos                     9
#define USB3_CONFIG_CIE_Msk                     (0x1 << 9)
#define USB3_CONFIG_CIE                         (0x1 << 9)

/* Bit fields for USB3_PORTSC_20 register */
#define USB3_PORTSC_20_CCS_Pos               0
#define USB3_PORTSC_20_CCS_Msk               (0x1 << 0)
#define USB3_PORTSC_20_CCS                   (0x1 << 0)
#define USB3_PORTSC_20_PED_Pos               1
#define USB3_PORTSC_20_PED_Msk               (0x1 << 1)
#define USB3_PORTSC_20_PED                   (0x1 << 1)
#define USB3_PORTSC_20_OCA_Pos               3
#define USB3_PORTSC_20_OCA_Msk               (0x1 << 3)
#define USB3_PORTSC_20_OCA                   (0x1 << 3)
#define USB3_PORTSC_20_PR_Pos                4
#define USB3_PORTSC_20_PR_Msk                (0x1 << 4)
#define USB3_PORTSC_20_PR                    (0x1 << 4)
#define USB3_PORTSC_20_PLS_Pos               5
#define USB3_PORTSC_20_PLS_Msk               (0xf << 5)
#define USB3_PORTSC_20_PLS                   (0xf << 5)
#define USB3_PORTSC_20_PP_Pos                9
#define USB3_PORTSC_20_PP_Msk                (0x1 << 9)
#define USB3_PORTSC_20_PP                    (0x1 << 9)
#define USB3_PORTSC_20_PORTSPEED_Pos         10
#define USB3_PORTSC_20_PORTSPEED_Msk         (0xf << 10)
#define USB3_PORTSC_20_PORTSPEED             (0xf << 10)
#define USB3_PORTSC_20_PIC_Pos               14
#define USB3_PORTSC_20_PIC_Msk               (0x3 << 14)
#define USB3_PORTSC_20_PIC                   (0x3 << 14)
#define USB3_PORTSC_20_LWS_Pos               16
#define USB3_PORTSC_20_LWS_Msk               (0x1 << 16)
#define USB3_PORTSC_20_LWS                   (0x1 << 16)
#define USB3_PORTSC_20_CSC_Pos               17
#define USB3_PORTSC_20_CSC_Msk               (0x1 << 17)
#define USB3_PORTSC_20_CSC                   (0x1 << 17)
#define USB3_PORTSC_20_PEC_Pos               18
#define USB3_PORTSC_20_PEC_Msk               (0x1 << 18)
#define USB3_PORTSC_20_PEC                   (0x1 << 18)
#define USB3_PORTSC_20_OCC_Pos               20
#define USB3_PORTSC_20_OCC_Msk               (0x1 << 20)
#define USB3_PORTSC_20_OCC                   (0x1 << 20)
#define USB3_PORTSC_20_PRC_Pos               21
#define USB3_PORTSC_20_PRC_Msk               (0x1 << 21)
#define USB3_PORTSC_20_PRC                   (0x1 << 21)
#define USB3_PORTSC_20_PLC_Pos               22
#define USB3_PORTSC_20_PLC_Msk               (0x1 << 22)
#define USB3_PORTSC_20_PLC                   (0x1 << 22)
#define USB3_PORTSC_20_CAS_Pos               24
#define USB3_PORTSC_20_CAS_Msk               (0x1 << 24)
#define USB3_PORTSC_20_CAS                   (0x1 << 24)
#define USB3_PORTSC_20_WCE_Pos               25
#define USB3_PORTSC_20_WCE_Msk               (0x1 << 25)
#define USB3_PORTSC_20_WCE                   (0x1 << 25)
#define USB3_PORTSC_20_WDE_Pos               26
#define USB3_PORTSC_20_WDE_Msk               (0x1 << 26)
#define USB3_PORTSC_20_WDE                   (0x1 << 26)
#define USB3_PORTSC_20_WOE_Pos               27
#define USB3_PORTSC_20_WOE_Msk               (0x1 << 27)
#define USB3_PORTSC_20_WOE                   (0x1 << 27)
#define USB3_PORTSC_20_DR_Pos                30
#define USB3_PORTSC_20_DR_Msk                (0x1 << 30)
#define USB3_PORTSC_20_DR                    (0x1 << 30)

/* Bit fields for USB3_PORTPMSC_20 register */
#define USB3_PORTPMSC_20_L1S_Pos             0
#define USB3_PORTPMSC_20_L1S_Msk             (0x7 << 0)
#define USB3_PORTPMSC_20_L1S                 (0x7 << 0)
#define USB3_PORTPMSC_20_RWE_Pos             3
#define USB3_PORTPMSC_20_RWE_Msk             (0x1 << 3)
#define USB3_PORTPMSC_20_RWE                 (0x1 << 3)
#define USB3_PORTPMSC_20_HIRD_Pos            4
#define USB3_PORTPMSC_20_HIRD_Msk            (0xf << 4)
#define USB3_PORTPMSC_20_HIRD                (0xf << 4)
#define USB3_PORTPMSC_20_L1DSLOT_Pos         8
#define USB3_PORTPMSC_20_L1DSLOT_Msk         (0xff << 8)
#define USB3_PORTPMSC_20_L1DSLOT             (0xff << 8)
#define USB3_PORTPMSC_20_HLE_Pos             16
#define USB3_PORTPMSC_20_HLE_Msk             (0x1 << 16)
#define USB3_PORTPMSC_20_HLE                 (0x1 << 16)
#define USB3_PORTPMSC_20_PRTTSTCTRL_Pos      28
#define USB3_PORTPMSC_20_PRTTSTCTRL_Msk      (0xf << 28)
#define USB3_PORTPMSC_20_PRTTSTCTRL          (0xf << 28)

/* Bit fields for USB3_PORTLI_20 register */

/* Bit fields for USB3_PORTHLPMC_20 register */
#define USB3_PORTHLPMC_20_HIRDM_Pos          0
#define USB3_PORTHLPMC_20_HIRDM_Msk          (0x3 << 0)
#define USB3_PORTHLPMC_20_HIRDM              (0x3 << 0)
#define USB3_PORTHLPMC_20_L1_TIMEOUT_Pos     2
#define USB3_PORTHLPMC_20_L1_TIMEOUT_Msk     (0xff << 2)
#define USB3_PORTHLPMC_20_L1_TIMEOUT         (0xff << 2)
#define USB3_PORTHLPMC_20_HIRDD_Pos          10
#define USB3_PORTHLPMC_20_HIRDD_Msk          (0xf << 10)
#define USB3_PORTHLPMC_20_HIRDD              (0xf << 10)

/* Bit fields for USB3_PORTSC_30 register */
#define USB3_PORTSC_30_CCS_Pos               0
#define USB3_PORTSC_30_CCS_Msk               (0x1 << 0)
#define USB3_PORTSC_30_CCS                   (0x1 << 0)
#define USB3_PORTSC_30_PED_Pos               1
#define USB3_PORTSC_30_PED_Msk               (0x1 << 1)
#define USB3_PORTSC_30_PED                   (0x1 << 1)
#define USB3_PORTSC_30_OCA_Pos               3
#define USB3_PORTSC_30_OCA_Msk               (0x1 << 3)
#define USB3_PORTSC_30_OCA                   (0x1 << 3)
#define USB3_PORTSC_30_PR_Pos                4
#define USB3_PORTSC_30_PR_Msk                (0x1 << 4)
#define USB3_PORTSC_30_PR                    (0x1 << 4)
#define USB3_PORTSC_30_PLS_Pos               5
#define USB3_PORTSC_30_PLS_Msk               (0xf << 5)
#define USB3_PORTSC_30_PLS                   (0xf << 5)
#define USB3_PORTSC_30_PP_Pos                9
#define USB3_PORTSC_30_PP_Msk                (0x1 << 9)
#define USB3_PORTSC_30_PP                    (0x1 << 9)
#define USB3_PORTSC_30_PORTSPEED_Pos         10
#define USB3_PORTSC_30_PORTSPEED_Msk         (0xf << 10)
#define USB3_PORTSC_30_PORTSPEED             (0xf << 10)
#define USB3_PORTSC_30_PIC_Pos               14
#define USB3_PORTSC_30_PIC_Msk               (0x3 << 14)
#define USB3_PORTSC_30_PIC                   (0x3 << 14)
#define USB3_PORTSC_30_LWS_Pos               16
#define USB3_PORTSC_30_LWS_Msk               (0x1 << 16)
#define USB3_PORTSC_30_LWS                   (0x1 << 16)
#define USB3_PORTSC_30_CSC_Pos               17
#define USB3_PORTSC_30_CSC_Msk               (0x1 << 17)
#define USB3_PORTSC_30_CSC                   (0x1 << 17)
#define USB3_PORTSC_30_PEC_Pos               18
#define USB3_PORTSC_30_PEC_Msk               (0x1 << 18)
#define USB3_PORTSC_30_PEC                   (0x1 << 18)
#define USB3_PORTSC_30_WRC_Pos               19
#define USB3_PORTSC_30_WRC_Msk               (0x1 << 19)
#define USB3_PORTSC_30_WRC                   (0x1 << 19)
#define USB3_PORTSC_30_OCC_Pos               20
#define USB3_PORTSC_30_OCC_Msk               (0x1 << 20)
#define USB3_PORTSC_30_OCC                   (0x1 << 20)
#define USB3_PORTSC_30_PRC_Pos               21
#define USB3_PORTSC_30_PRC_Msk               (0x1 << 21)
#define USB3_PORTSC_30_PRC                   (0x1 << 21)
#define USB3_PORTSC_30_PLC_Pos               22
#define USB3_PORTSC_30_PLC_Msk               (0x1 << 22)
#define USB3_PORTSC_30_PLC                   (0x1 << 22)
#define USB3_PORTSC_30_CEC_Pos               23
#define USB3_PORTSC_30_CEC_Msk               (0x1 << 23)
#define USB3_PORTSC_30_CEC                   (0x1 << 23)
#define USB3_PORTSC_30_CAS_Pos               24
#define USB3_PORTSC_30_CAS_Msk               (0x1 << 24)
#define USB3_PORTSC_30_CAS                   (0x1 << 24)
#define USB3_PORTSC_30_WCE_Pos               25
#define USB3_PORTSC_30_WCE_Msk               (0x1 << 25)
#define USB3_PORTSC_30_WCE                   (0x1 << 25)
#define USB3_PORTSC_30_WDE_Pos               26
#define USB3_PORTSC_30_WDE_Msk               (0x1 << 26)
#define USB3_PORTSC_30_WDE                   (0x1 << 26)
#define USB3_PORTSC_30_WOE_Pos               27
#define USB3_PORTSC_30_WOE_Msk               (0x1 << 27)
#define USB3_PORTSC_30_WOE                   (0x1 << 27)
#define USB3_PORTSC_30_DR_Pos                30
#define USB3_PORTSC_30_DR_Msk                (0x1 << 30)
#define USB3_PORTSC_30_DR                    (0x1 << 30)
#define USB3_PORTSC_30_WPR_Pos               31
#define USB3_PORTSC_30_WPR_Msk               (0x1 << 31)
#define USB3_PORTSC_30_WPR                   (0x1 << 31)

/* Bit fields for USB3_PORTPMSC_30 register */
#define USB3_PORTPMSC_30_U1_TIMEOUT_Pos      0
#define USB3_PORTPMSC_30_U1_TIMEOUT_Msk      (0xff << 0)
#define USB3_PORTPMSC_30_U1_TIMEOUT          (0xff << 0)
#define USB3_PORTPMSC_30_U2_TIMEOUT_Pos      8
#define USB3_PORTPMSC_30_U2_TIMEOUT_Msk      (0xff << 8)
#define USB3_PORTPMSC_30_U2_TIMEOUT          (0xff << 8)
#define USB3_PORTPMSC_30_FLA_Pos             16
#define USB3_PORTPMSC_30_FLA_Msk             (0x1 << 16)
#define USB3_PORTPMSC_30_FLA                 (0x1 << 16)

/* Bit fields for USB3_PORTLI_30 register */
#define USB3_PORTLI_30_LINK_ERROR_COUNT_Pos  0
#define USB3_PORTLI_30_LINK_ERROR_COUNT_Msk  (0xffff << 0)
#define USB3_PORTLI_30_LINK_ERROR_COUNT      (0xffff << 0)

/* Bit fields for USB3_PORTHLPMC_30 register */

/* Bit fields for USB3_MFINDEX register */
#define USB3_MFINDEX_MICROFRAME_INDEX_Pos  0
#define USB3_MFINDEX_MICROFRAME_INDEX_Msk  (0x3fff << 0)
#define USB3_MFINDEX_MICROFRAME_INDEX      (0x3fff << 0)

/* Bit fields for USB3_RsvdZ register */

/* Bit fields for USB3_IMAN register */
#define USB3_IMAN_IP_Pos                  0
#define USB3_IMAN_IP_Msk                  (0x1 << 0)
#define USB3_IMAN_IP                      (0x1 << 0)
#define USB3_IMAN_IE_Pos                  1
#define USB3_IMAN_IE_Msk                  (0x1 << 1)
#define USB3_IMAN_IE                      (0x1 << 1)

/* Bit fields for USB3_IMOD register */
#define USB3_IMOD_IMODI_Pos               0
#define USB3_IMOD_IMODI_Msk               (0xffff << 0)
#define USB3_IMOD_IMODI                   (0xffff << 0)
#define USB3_IMOD_IMODC_Pos               16
#define USB3_IMOD_IMODC_Msk               (0xffff << 16)
#define USB3_IMOD_IMODC                   (0xffff << 16)

/* Bit fields for USB3_ERSTSZ register */
#define USB3_ERSTSZ_ERS_TABLE_SIZE_Pos    0
#define USB3_ERSTSZ_ERS_TABLE_SIZE_Msk    (0xffff << 0)
#define USB3_ERSTSZ_ERS_TABLE_SIZE        (0xffff << 0)

/* Bit fields for USB3_RsvdP register */

/* Bit fields for USB3_ERSTBA_LO register */
#define USB3_ERSTBA_LO_ERS_TABLE_BAR_Pos  6
#define USB3_ERSTBA_LO_ERS_TABLE_BAR_Msk  (0x3ffffff << 6)
#define USB3_ERSTBA_LO_ERS_TABLE_BAR      (0x3ffffff << 6)

/* Bit fields for USB3_ERSTBA_HI register */
#define USB3_ERSTBA_HI_ERS_TABLE_BAR_Pos  0
#define USB3_ERSTBA_HI_ERS_TABLE_BAR_Msk  (0xFFFFFFFF << 0)
#define USB3_ERSTBA_HI_ERS_TABLE_BAR      (0xFFFFFFFF << 0)

/* Bit fields for USB3_ERDP_LO register */
#define USB3_ERDP_LO_DESI_Pos             0
#define USB3_ERDP_LO_DESI_Msk             (0x7 << 0)
#define USB3_ERDP_LO_DESI                 (0x7 << 0)
#define USB3_ERDP_LO_EHB_Pos              3
#define USB3_ERDP_LO_EHB_Msk              (0x1 << 3)
#define USB3_ERDP_LO_EHB                  (0x1 << 3)
#define USB3_ERDP_LO_ERD_PNTR_Pos         4
#define USB3_ERDP_LO_ERD_PNTR_Msk         (0xfffffff << 4)
#define USB3_ERDP_LO_ERD_PNTR             (0xfffffff << 4)

/* Bit fields for USB3_ERDP_HI register */
#define USB3_ERDP_HI_ERD_PNTR_Pos         0
#define USB3_ERDP_HI_ERD_PNTR_Msk         (0xFFFFFFFF << 0)
#define USB3_ERDP_HI_ERD_PNTR             (0xFFFFFFFF << 0)

/* Bit fields for USB3_DB register */
#define USB3_DB_DB_TARGET_Pos     0
#define USB3_DB_DB_TARGET_Msk     (0xff << 0)
#define USB3_DB_DB_TARGET         (0xff << 0)
#define USB3_DB_DB_STREAM_ID_Pos  16
#define USB3_DB_DB_STREAM_ID_Msk  (0xffff << 16)
#define USB3_DB_DB_STREAM_ID      (0xffff << 16)

/* Bit fields for USB3_USBLEGSUP register */
#define USB3_USBLEGSUP_CAPABILITY_ID_Pos            0
#define USB3_USBLEGSUP_CAPABILITY_ID_Msk            (0xff << 0)
#define USB3_USBLEGSUP_CAPABILITY_ID                (0xff << 0)
#define USB3_USBLEGSUP_NEXT_CAPABILITY_POINTER_Pos  8
#define USB3_USBLEGSUP_NEXT_CAPABILITY_POINTER_Msk  (0xff << 8)
#define USB3_USBLEGSUP_NEXT_CAPABILITY_POINTER      (0xff << 8)
#define USB3_USBLEGSUP_HC_BIOS_OWNED_Pos            16
#define USB3_USBLEGSUP_HC_BIOS_OWNED_Msk            (0x1 << 16)
#define USB3_USBLEGSUP_HC_BIOS_OWNED                (0x1 << 16)
#define USB3_USBLEGSUP_HC_OS_OWNED_Pos              24
#define USB3_USBLEGSUP_HC_OS_OWNED_Msk              (0x1 << 24)
#define USB3_USBLEGSUP_HC_OS_OWNED                  (0x1 << 24)

/* Bit fields for USB3_USBLEGCTLSTS register */
#define USB3_USBLEGCTLSTS_USB_SMI_ENABLE_Pos        0
#define USB3_USBLEGCTLSTS_USB_SMI_ENABLE_Msk        (0x1 << 0)
#define USB3_USBLEGCTLSTS_USB_SMI_ENABLE            (0x1 << 0)
#define USB3_USBLEGCTLSTS_SMI_ON_HOST_E_Pos         4
#define USB3_USBLEGCTLSTS_SMI_ON_HOST_E_Msk         (0x1 << 4)
#define USB3_USBLEGCTLSTS_SMI_ON_HOST_E             (0x1 << 4)
#define USB3_USBLEGCTLSTS_SMI_ON_OS_E_Pos           13
#define USB3_USBLEGCTLSTS_SMI_ON_OS_E_Msk           (0x1 << 13)
#define USB3_USBLEGCTLSTS_SMI_ON_OS_E               (0x1 << 13)
#define USB3_USBLEGCTLSTS_SMI_ON_PCI_E_Pos          14
#define USB3_USBLEGCTLSTS_SMI_ON_PCI_E_Msk          (0x1 << 14)
#define USB3_USBLEGCTLSTS_SMI_ON_PCI_E              (0x1 << 14)
#define USB3_USBLEGCTLSTS_SMI_ON_BAR_E_Pos          15
#define USB3_USBLEGCTLSTS_SMI_ON_BAR_E_Msk          (0x1 << 15)
#define USB3_USBLEGCTLSTS_SMI_ON_BAR_E              (0x1 << 15)
#define USB3_USBLEGCTLSTS_SMI_ON_EVENT_Pos          16
#define USB3_USBLEGCTLSTS_SMI_ON_EVENT_Msk          (0x1 << 16)
#define USB3_USBLEGCTLSTS_SMI_ON_EVENT              (0x1 << 16)
#define USB3_USBLEGCTLSTS_SMI_ON_HOST_Pos           20
#define USB3_USBLEGCTLSTS_SMI_ON_HOST_Msk           (0x1 << 20)
#define USB3_USBLEGCTLSTS_SMI_ON_HOST               (0x1 << 20)
#define USB3_USBLEGCTLSTS_SMI_ON_OS_Pos             29
#define USB3_USBLEGCTLSTS_SMI_ON_OS_Msk             (0x1 << 29)
#define USB3_USBLEGCTLSTS_SMI_ON_OS                 (0x1 << 29)
#define USB3_USBLEGCTLSTS_SMI_ON_PCI_Pos            30
#define USB3_USBLEGCTLSTS_SMI_ON_PCI_Msk            (0x1 << 30)
#define USB3_USBLEGCTLSTS_SMI_ON_PCI                (0x1 << 30)
#define USB3_USBLEGCTLSTS_SMI_ON_BAR_Pos            31
#define USB3_USBLEGCTLSTS_SMI_ON_BAR_Msk            (0x1 << 31)
#define USB3_USBLEGCTLSTS_SMI_ON_BAR                (0x1 << 31)

/* Bit fields for USB3_SUPTPRT2_DW0 register */
#define USB3_SUPTPRT2_DW0_CAPABILITY_ID_Pos            0
#define USB3_SUPTPRT2_DW0_CAPABILITY_ID_Msk            (0xff << 0)
#define USB3_SUPTPRT2_DW0_CAPABILITY_ID                (0xff << 0)
#define USB3_SUPTPRT2_DW0_NEXT_CAPABILITY_POINTER_Pos  8
#define USB3_SUPTPRT2_DW0_NEXT_CAPABILITY_POINTER_Msk  (0xff << 8)
#define USB3_SUPTPRT2_DW0_NEXT_CAPABILITY_POINTER      (0xff << 8)
#define USB3_SUPTPRT2_DW0_MINOR_REVISION_Pos           16
#define USB3_SUPTPRT2_DW0_MINOR_REVISION_Msk           (0xff << 16)
#define USB3_SUPTPRT2_DW0_MINOR_REVISION               (0xff << 16)
#define USB3_SUPTPRT2_DW0_MAJOR_REVISION_Pos           24
#define USB3_SUPTPRT2_DW0_MAJOR_REVISION_Msk           (0xff << 24)
#define USB3_SUPTPRT2_DW0_MAJOR_REVISION               (0xff << 24)

/* Bit fields for USB3_SUPTPRT2_DW1 register */
#define USB3_SUPTPRT2_DW1_NAME_STRING_Pos              0
#define USB3_SUPTPRT2_DW1_NAME_STRING_Msk              (0xFFFFFFFF << 0)
#define USB3_SUPTPRT2_DW1_NAME_STRING                  (0xFFFFFFFF << 0)

/* Bit fields for USB3_SUPTPRT2_DW2 register */
#define USB3_SUPTPRT2_DW2_COMPATIBLE_PORT_OFFSET_Pos   0
#define USB3_SUPTPRT2_DW2_COMPATIBLE_PORT_OFFSET_Msk   (0xff << 0)
#define USB3_SUPTPRT2_DW2_COMPATIBLE_PORT_OFFSET       (0xff << 0)
#define USB3_SUPTPRT2_DW2_COMPATIBLE_PORT_COUNT_Pos    8
#define USB3_SUPTPRT2_DW2_COMPATIBLE_PORT_COUNT_Msk    (0xff << 8)
#define USB3_SUPTPRT2_DW2_COMPATIBLE_PORT_COUNT        (0xff << 8)
#define USB3_SUPTPRT2_DW2_HSO_Pos                      17
#define USB3_SUPTPRT2_DW2_HSO_Msk                      (0x1 << 17)
#define USB3_SUPTPRT2_DW2_HSO                          (0x1 << 17)
#define USB3_SUPTPRT2_DW2_IHI_Pos                      18
#define USB3_SUPTPRT2_DW2_IHI_Msk                      (0x1 << 18)
#define USB3_SUPTPRT2_DW2_IHI                          (0x1 << 18)
#define USB3_SUPTPRT2_DW2_HLC_Pos                      19
#define USB3_SUPTPRT2_DW2_HLC_Msk                      (0x1 << 19)
#define USB3_SUPTPRT2_DW2_HLC                          (0x1 << 19)
#define USB3_SUPTPRT2_DW2_BLC_Pos                      20
#define USB3_SUPTPRT2_DW2_BLC_Msk                      (0x1 << 20)
#define USB3_SUPTPRT2_DW2_BLC                          (0x1 << 20)
#define USB3_SUPTPRT2_DW2_MHD_Pos                      25
#define USB3_SUPTPRT2_DW2_MHD_Msk                      (0x7 << 25)
#define USB3_SUPTPRT2_DW2_MHD                          (0x7 << 25)
#define USB3_SUPTPRT2_DW2_PSIC_Pos                     28
#define USB3_SUPTPRT2_DW2_PSIC_Msk                     (0xf << 28)
#define USB3_SUPTPRT2_DW2_PSIC                         (0xf << 28)

/* Bit fields for USB3_SUPTPRT2_DW3 register */
#define USB3_SUPTPRT2_DW3_PROTCL_SLT_TY_Pos            0
#define USB3_SUPTPRT2_DW3_PROTCL_SLT_TY_Msk            (0x1f << 0)
#define USB3_SUPTPRT2_DW3_PROTCL_SLT_TY                (0x1f << 0)

/* Bit fields for USB3_SUPTPRT3_DW0 register */
#define USB3_SUPTPRT3_DW0_CAPABILITY_ID_Pos            0
#define USB3_SUPTPRT3_DW0_CAPABILITY_ID_Msk            (0xff << 0)
#define USB3_SUPTPRT3_DW0_CAPABILITY_ID                (0xff << 0)
#define USB3_SUPTPRT3_DW0_NEXT_CAPABILITY_POINTER_Pos  8
#define USB3_SUPTPRT3_DW0_NEXT_CAPABILITY_POINTER_Msk  (0xff << 8)
#define USB3_SUPTPRT3_DW0_NEXT_CAPABILITY_POINTER      (0xff << 8)
#define USB3_SUPTPRT3_DW0_MINOR_REVISION_Pos           16
#define USB3_SUPTPRT3_DW0_MINOR_REVISION_Msk           (0xff << 16)
#define USB3_SUPTPRT3_DW0_MINOR_REVISION               (0xff << 16)
#define USB3_SUPTPRT3_DW0_MAJOR_REVISION_Pos           24
#define USB3_SUPTPRT3_DW0_MAJOR_REVISION_Msk           (0xff << 24)
#define USB3_SUPTPRT3_DW0_MAJOR_REVISION               (0xff << 24)

/* Bit fields for USB3_SUPTPRT3_DW1 register */
#define USB3_SUPTPRT3_DW1_NAME_STRING_Pos              0
#define USB3_SUPTPRT3_DW1_NAME_STRING_Msk              (0xFFFFFFFF << 0)
#define USB3_SUPTPRT3_DW1_NAME_STRING                  (0xFFFFFFFF << 0)

/* Bit fields for USB3_SUPTPRT3_DW2 register */
#define USB3_SUPTPRT3_DW2_COMPATIBLE_PORT_OFFSET_Pos   0
#define USB3_SUPTPRT3_DW2_COMPATIBLE_PORT_OFFSET_Msk   (0xff << 0)
#define USB3_SUPTPRT3_DW2_COMPATIBLE_PORT_OFFSET       (0xff << 0)
#define USB3_SUPTPRT3_DW2_COMPATIBLE_PORT_COUNT_Pos    8
#define USB3_SUPTPRT3_DW2_COMPATIBLE_PORT_COUNT_Msk    (0xff << 8)
#define USB3_SUPTPRT3_DW2_COMPATIBLE_PORT_COUNT        (0xff << 8)
#define USB3_SUPTPRT3_DW2_MHD_Pos                      25
#define USB3_SUPTPRT3_DW2_MHD_Msk                      (0x7 << 25)
#define USB3_SUPTPRT3_DW2_MHD                          (0x7 << 25)
#define USB3_SUPTPRT3_DW2_PSIC_Pos                     28
#define USB3_SUPTPRT3_DW2_PSIC_Msk                     (0xf << 28)
#define USB3_SUPTPRT3_DW2_PSIC                         (0xf << 28)

/* Bit fields for USB3_SUPTPRT3_DW3 register */
#define USB3_SUPTPRT3_DW3_PROTCL_SLT_TY_Pos            0
#define USB3_SUPTPRT3_DW3_PROTCL_SLT_TY_Msk            (0x1f << 0)
#define USB3_SUPTPRT3_DW3_PROTCL_SLT_TY                (0x1f << 0)

/******************************************************************************/
/*                                                                            */
/*                           Window Watchdog (WWDG)                           */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for WWDG_CR register  ********************/
#define WWDG_CR_T_Pos           (0U)
#define WWDG_CR_T_Msk           (0x7FU << WWDG_CR_T_Pos)          /*!< 0x0000007F */
#define WWDG_CR_T               WWDG_CR_T_Msk                     /*!< 7-bit counter (MSB to LSB) */
#define WWDG_CR_T_0             (0x1U << WWDG_CR_T_Pos)           /*!< 0x00000001 */
#define WWDG_CR_T_1             (0x2U << WWDG_CR_T_Pos)           /*!< 0x00000002 */
#define WWDG_CR_T_2             (0x4U << WWDG_CR_T_Pos)           /*!< 0x00000004 */
#define WWDG_CR_T_3             (0x8U << WWDG_CR_T_Pos)           /*!< 0x00000008 */
#define WWDG_CR_T_4             (0x10U << WWDG_CR_T_Pos)          /*!< 0x00000010 */
#define WWDG_CR_T_5             (0x20U << WWDG_CR_T_Pos)          /*!< 0x00000020 */
#define WWDG_CR_T_6             (0x40U << WWDG_CR_T_Pos)          /*!< 0x00000040 */
#define WWDG_CR_WDGA_Pos        (7U)
#define WWDG_CR_WDGA_Msk        (0x1U << WWDG_CR_WDGA_Pos)        /*!< 0x00000080 */
#define WWDG_CR_WDGA            WWDG_CR_WDGA_Msk                  /*!< Activation bit */

/*******************  Bit definition for WWDG_CFR register  *******************/
#define WWDG_CFR_W_Pos          (0U)
#define WWDG_CFR_W_Msk          (0x7FU << WWDG_CFR_W_Pos)         /*!< 0x0000007F */
#define WWDG_CFR_W              WWDG_CFR_W_Msk                    /*!< 7-bit window value */
#define WWDG_CFR_W_0            (0x1U << WWDG_CFR_W_Pos)          /*!< 0x00000001 */
#define WWDG_CFR_W_1            (0x2U << WWDG_CFR_W_Pos)          /*!< 0x00000002 */
#define WWDG_CFR_W_2            (0x4U << WWDG_CFR_W_Pos)          /*!< 0x00000004 */
#define WWDG_CFR_W_3            (0x8U << WWDG_CFR_W_Pos)          /*!< 0x00000008 */
#define WWDG_CFR_W_4            (0x10U << WWDG_CFR_W_Pos)         /*!< 0x00000010 */
#define WWDG_CFR_W_5            (0x20U << WWDG_CFR_W_Pos)         /*!< 0x00000020 */
#define WWDG_CFR_W_6            (0x40U << WWDG_CFR_W_Pos)         /*!< 0x00000040 */
#define WWDG_CFR_EWI_Pos        (9U)
#define WWDG_CFR_EWI_Msk        (0x1U << WWDG_CFR_EWI_Pos)        /*!< 0x00000200 */
#define WWDG_CFR_EWI            WWDG_CFR_EWI_Msk                  /*!< Early wakeup interrupt */
#define WWDG_CFR_WDGTB_Pos      (11U)
#define WWDG_CFR_WDGTB_Msk      (0x7U << WWDG_CFR_WDGTB_Pos)      /*!< 0x00003800 */
#define WWDG_CFR_WDGTB          WWDG_CFR_WDGTB_Msk                /*!< Timer base */
#define WWDG_CFR_WDGTB_0        (0x1U << WWDG_CFR_WDGTB_Pos)    /*!< 0x00000800 */
#define WWDG_CFR_WDGTB_1        (0x2U << WWDG_CFR_WDGTB_Pos)   /*!< 0x00001000 */
#define WWDG_CFR_WDGTB_2        (0x4U << WWDG_CFR_WDGTB_Pos)   /*!< 0x00002000 */

/*******************  Bit definition for WWDG_SR register  ********************/
#define WWDG_SR_EWIF_Pos        (0U)
#define WWDG_SR_EWIF_Msk        (0x1U << WWDG_SR_EWIF_Pos)        /*!< 0x00000001 */
#define WWDG_SR_EWIF            WWDG_SR_EWIF_Msk                  /*!< Early wakeup interrupt flag */

/*****************  Bit definition for WWDG_HWCFGR register  ******************/
#define WWDG_HWCFGR_PREDIV_Pos  (0U)
#define WWDG_HWCFGR_PREDIV_Msk  (0xFFFFU << WWDG_HWCFGR_PREDIV_Pos) /*!< 0x0000FFFF */
#define WWDG_HWCFGR_PREDIV      WWDG_HWCFGR_PREDIV_Msk            /*!< The watchdog clock is prescaled by 4096 (PREDIV[15:0] + 1). */

/******************  Bit definition for WWDG_VERR register  *******************/
#define WWDG_VERR_MINREV_Pos    (0U)
#define WWDG_VERR_MINREV_Msk    (0xFU << WWDG_VERR_MINREV_Pos)    /*!< 0x0000000F */
#define WWDG_VERR_MINREV        WWDG_VERR_MINREV_Msk              /*!< IP version minor revision info */
#define WWDG_VERR_MAJREV_Pos    (4U)
#define WWDG_VERR_MAJREV_Msk    (0xFU << WWDG_VERR_MAJREV_Pos)    /*!< 0x000000F0 */
#define WWDG_VERR_MAJREV        WWDG_VERR_MAJREV_Msk              /*!< IP version major revision info */

/******************  Bit definition for WWDG_IPIDR register  ******************/
#define WWDG_IPIDR_ID_Pos       (0U)
#define WWDG_IPIDR_ID_Msk       (0xFFFFFFFFU << WWDG_IPIDR_ID_Pos)/*!< 0xFFFFFFFF */
#define WWDG_IPIDR_ID           WWDG_IPIDR_ID_Msk                 /*!< WWDG peripheral identifier */

/******************  Bit definition for WWDG_SIDR register  *******************/
#define WWDG_SIDR_SID_Pos       (0U)
#define WWDG_SIDR_SID_Msk       (0xFFFFFFFFU << WWDG_SIDR_SID_Pos)/*!< 0xFFFFFFFF */
#define WWDG_SIDR_SID           WWDG_SIDR_SID_Msk                 /*!< The address decoding range is 1 Kbyte */

/**
  * @}
  */

/**
  * @}
  */

/** @addtogroup Exported_macros
  * @{
  */

#if  defined (CORTEX_IN_SECURE_STATE)
/******************************* CRC Instances ********************************/
#define IS_CRC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == CRC_S) || ((INSTANCE) == CRC_NS))

/******************************* CSI2HOST Instances *******************************/
#define IS_CSI2HOST_ALL_INSTANCE(INSTANCE) (((INSTANCE) == CSI2HOST_S) || ((INSTANCE) == CSI2HOST_NS))

/******************************* DCMI Instances *******************************/
#define IS_DCMI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DCMI_S) || ((INSTANCE) == DCMI_NS))

/******************************* DCMIPP Instances *******************************/
#define IS_DCMIPP_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DCMIPP_S) || ((INSTANCE) == DCMIPP_NS))

/******************************** DMA Instances *******************************/
#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel0_S)  || ((INSTANCE) == HPDMA1_Channel0_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel1_S)  || ((INSTANCE) == HPDMA1_Channel1_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel2_S)  || ((INSTANCE) == HPDMA1_Channel2_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel3_S)  || ((INSTANCE) == HPDMA1_Channel3_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel4_S)  || ((INSTANCE) == HPDMA1_Channel4_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel5_S)  || ((INSTANCE) == HPDMA1_Channel5_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel6_S)  || ((INSTANCE) == HPDMA1_Channel6_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel7_S)  || ((INSTANCE) == HPDMA1_Channel7_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel8_S)  || ((INSTANCE) == HPDMA1_Channel8_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel9_S)  || ((INSTANCE) == HPDMA1_Channel9_NS)  || \
                                       ((INSTANCE) == HPDMA1_Channel10_S) || ((INSTANCE) == HPDMA1_Channel10_NS) || \
                                       ((INSTANCE) == HPDMA1_Channel11_S) || ((INSTANCE) == HPDMA1_Channel11_NS) || \
                                       ((INSTANCE) == HPDMA1_Channel12_S) || ((INSTANCE) == HPDMA1_Channel12_NS) || \
                                       ((INSTANCE) == HPDMA1_Channel13_S) || ((INSTANCE) == HPDMA1_Channel13_NS) || \
                                       ((INSTANCE) == HPDMA1_Channel14_S) || ((INSTANCE) == HPDMA1_Channel14_NS) || \
                                       ((INSTANCE) == HPDMA1_Channel15_S) || ((INSTANCE) == HPDMA1_Channel15_NS) || \
                                       ((INSTANCE) == HPDMA2_Channel0_S)  || ((INSTANCE) == HPDMA2_Channel0_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel1_S)  || ((INSTANCE) == HPDMA2_Channel1_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel2_S)  || ((INSTANCE) == HPDMA2_Channel2_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel3_S)  || ((INSTANCE) == HPDMA2_Channel3_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel4_S)  || ((INSTANCE) == HPDMA2_Channel4_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel5_S)  || ((INSTANCE) == HPDMA2_Channel5_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel6_S)  || ((INSTANCE) == HPDMA2_Channel6_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel7_S)  || ((INSTANCE) == HPDMA2_Channel7_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel8_S)  || ((INSTANCE) == HPDMA2_Channel8_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel9_S)  || ((INSTANCE) == HPDMA2_Channel9_NS)  || \
                                       ((INSTANCE) == HPDMA2_Channel10_S) || ((INSTANCE) == HPDMA2_Channel10_NS) || \
                                       ((INSTANCE) == HPDMA2_Channel11_S) || ((INSTANCE) == HPDMA2_Channel11_NS) || \
                                       ((INSTANCE) == HPDMA2_Channel12_S) || ((INSTANCE) == HPDMA2_Channel12_NS) || \
                                       ((INSTANCE) == HPDMA2_Channel13_S) || ((INSTANCE) == HPDMA2_Channel13_NS) || \
                                       ((INSTANCE) == HPDMA2_Channel14_S) || ((INSTANCE) == HPDMA2_Channel14_NS) || \
                                       ((INSTANCE) == HPDMA2_Channel15_S) || ((INSTANCE) == HPDMA2_Channel15_NS) || \
                                       ((INSTANCE) == HPDMA3_Channel0_S)  || ((INSTANCE) == HPDMA3_Channel0_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel1_S)  || ((INSTANCE) == HPDMA3_Channel1_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel2_S)  || ((INSTANCE) == HPDMA3_Channel2_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel3_S)  || ((INSTANCE) == HPDMA3_Channel3_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel4_S)  || ((INSTANCE) == HPDMA3_Channel4_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel5_S)  || ((INSTANCE) == HPDMA3_Channel5_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel6_S)  || ((INSTANCE) == HPDMA3_Channel6_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel7_S)  || ((INSTANCE) == HPDMA3_Channel7_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel8_S)  || ((INSTANCE) == HPDMA3_Channel8_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel9_S)  || ((INSTANCE) == HPDMA3_Channel9_NS)  || \
                                       ((INSTANCE) == HPDMA3_Channel10_S) || ((INSTANCE) == HPDMA3_Channel10_NS) || \
                                       ((INSTANCE) == HPDMA3_Channel11_S) || ((INSTANCE) == HPDMA3_Channel11_NS) || \
                                       ((INSTANCE) == HPDMA3_Channel12_S) || ((INSTANCE) == HPDMA3_Channel12_NS) || \
                                       ((INSTANCE) == HPDMA3_Channel13_S) || ((INSTANCE) == HPDMA3_Channel13_NS) || \
                                       ((INSTANCE) == HPDMA3_Channel14_S) || ((INSTANCE) == HPDMA3_Channel14_NS) || \
                                       ((INSTANCE) == HPDMA3_Channel15_S) || ((INSTANCE) == HPDMA3_Channel15_NS) || \
                                       ((INSTANCE) == LPDMA_Channel0_S)   || ((INSTANCE) == LPDMA_Channel0_NS)   || \
                                       ((INSTANCE) == LPDMA_Channel1_S)   || ((INSTANCE) == LPDMA_Channel1_NS)   || \
                                       ((INSTANCE) == LPDMA_Channel2_S)   || ((INSTANCE) == LPDMA_Channel2_NS)   || \
                                       ((INSTANCE) == LPDMA_Channel3_S)   || ((INSTANCE) == LPDMA_Channel3_NS))

#define IS_HPDMA_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel0_S)  || ((INSTANCE) == HPDMA1_Channel0_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel1_S)  || ((INSTANCE) == HPDMA1_Channel1_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel2_S)  || ((INSTANCE) == HPDMA1_Channel2_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel3_S)  || ((INSTANCE) == HPDMA1_Channel3_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel4_S)  || ((INSTANCE) == HPDMA1_Channel4_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel5_S)  || ((INSTANCE) == HPDMA1_Channel5_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel6_S)  || ((INSTANCE) == HPDMA1_Channel6_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel7_S)  || ((INSTANCE) == HPDMA1_Channel7_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel8_S)  || ((INSTANCE) == HPDMA1_Channel8_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel9_S)  || ((INSTANCE) == HPDMA1_Channel9_NS)  || \
                                     ((INSTANCE) == HPDMA1_Channel10_S) || ((INSTANCE) == HPDMA1_Channel10_NS) || \
                                     ((INSTANCE) == HPDMA1_Channel11_S) || ((INSTANCE) == HPDMA1_Channel11_NS) || \
                                     ((INSTANCE) == HPDMA1_Channel12_S) || ((INSTANCE) == HPDMA1_Channel12_NS) || \
                                     ((INSTANCE) == HPDMA1_Channel13_S) || ((INSTANCE) == HPDMA1_Channel13_NS) || \
                                     ((INSTANCE) == HPDMA1_Channel14_S) || ((INSTANCE) == HPDMA1_Channel14_NS) || \
                                     ((INSTANCE) == HPDMA1_Channel15_S) || ((INSTANCE) == HPDMA1_Channel15_NS) || \
                                     ((INSTANCE) == HPDMA2_Channel0_S)  || ((INSTANCE) == HPDMA2_Channel0_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel1_S)  || ((INSTANCE) == HPDMA2_Channel1_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel2_S)  || ((INSTANCE) == HPDMA2_Channel2_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel3_S)  || ((INSTANCE) == HPDMA2_Channel3_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel4_S)  || ((INSTANCE) == HPDMA2_Channel4_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel5_S)  || ((INSTANCE) == HPDMA2_Channel5_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel6_S)  || ((INSTANCE) == HPDMA2_Channel6_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel7_S)  || ((INSTANCE) == HPDMA2_Channel7_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel8_S)  || ((INSTANCE) == HPDMA2_Channel8_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel9_S)  || ((INSTANCE) == HPDMA2_Channel9_NS)  || \
                                     ((INSTANCE) == HPDMA2_Channel10_S) || ((INSTANCE) == HPDMA2_Channel10_NS) || \
                                     ((INSTANCE) == HPDMA2_Channel11_S) || ((INSTANCE) == HPDMA2_Channel11_NS) || \
                                     ((INSTANCE) == HPDMA2_Channel12_S) || ((INSTANCE) == HPDMA2_Channel12_NS) || \
                                     ((INSTANCE) == HPDMA2_Channel13_S) || ((INSTANCE) == HPDMA2_Channel13_NS) || \
                                     ((INSTANCE) == HPDMA2_Channel14_S) || ((INSTANCE) == HPDMA2_Channel14_NS) || \
                                     ((INSTANCE) == HPDMA2_Channel15_S) || ((INSTANCE) == HPDMA2_Channel15_NS) || \
                                     ((INSTANCE) == HPDMA3_Channel0_S)  || ((INSTANCE) == HPDMA3_Channel0_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel1_S)  || ((INSTANCE) == HPDMA3_Channel1_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel2_S)  || ((INSTANCE) == HPDMA3_Channel2_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel3_S)  || ((INSTANCE) == HPDMA3_Channel3_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel4_S)  || ((INSTANCE) == HPDMA3_Channel4_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel5_S)  || ((INSTANCE) == HPDMA3_Channel5_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel6_S)  || ((INSTANCE) == HPDMA3_Channel6_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel7_S)  || ((INSTANCE) == HPDMA3_Channel7_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel8_S)  || ((INSTANCE) == HPDMA3_Channel8_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel9_S)  || ((INSTANCE) == HPDMA3_Channel9_NS)  || \
                                     ((INSTANCE) == HPDMA3_Channel10_S) || ((INSTANCE) == HPDMA3_Channel10_NS) || \
                                     ((INSTANCE) == HPDMA3_Channel11_S) || ((INSTANCE) == HPDMA3_Channel11_NS) || \
                                     ((INSTANCE) == HPDMA3_Channel12_S) || ((INSTANCE) == HPDMA3_Channel12_NS) || \
                                     ((INSTANCE) == HPDMA3_Channel13_S) || ((INSTANCE) == HPDMA3_Channel13_NS) || \
                                     ((INSTANCE) == HPDMA3_Channel14_S) || ((INSTANCE) == HPDMA3_Channel14_NS) || \
                                     ((INSTANCE) == HPDMA3_Channel15_S) || ((INSTANCE) == HPDMA3_Channel15_NS))

#define IS_LPDMA_INSTANCE(INSTANCE) (((INSTANCE) == LPDMA_Channel0_S) || ((INSTANCE) == LPDMA_Channel0_NS) || \
                                     ((INSTANCE) == LPDMA_Channel1_S) || ((INSTANCE) == LPDMA_Channel1_NS) || \
                                     ((INSTANCE) == LPDMA_Channel2_S) || ((INSTANCE) == LPDMA_Channel2_NS) || \
                                     ((INSTANCE) == LPDMA_Channel3_S) || ((INSTANCE) == LPDMA_Channel3_NS))

#define IS_DMA_2D_ADDRESSING_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel12_S) || ((INSTANCE) == HPDMA1_Channel12_NS) || \
                                                 ((INSTANCE) == HPDMA1_Channel13_S) || ((INSTANCE) == HPDMA1_Channel13_NS) || \
                                                 ((INSTANCE) == HPDMA1_Channel14_S) || ((INSTANCE) == HPDMA1_Channel14_NS) || \
                                                 ((INSTANCE) == HPDMA1_Channel15_S) || ((INSTANCE) == HPDMA1_Channel15_NS) || \
                                                 ((INSTANCE) == HPDMA2_Channel12_S) || ((INSTANCE) == HPDMA2_Channel12_NS) || \
                                                 ((INSTANCE) == HPDMA2_Channel13_S) || ((INSTANCE) == HPDMA2_Channel13_NS) || \
                                                 ((INSTANCE) == HPDMA2_Channel14_S) || ((INSTANCE) == HPDMA2_Channel14_NS) || \
                                                 ((INSTANCE) == HPDMA2_Channel15_S) || ((INSTANCE) == HPDMA2_Channel15_NS) || \
                                                 ((INSTANCE) == HPDMA3_Channel12_S) || ((INSTANCE) == HPDMA3_Channel12_NS) || \
                                                 ((INSTANCE) == HPDMA3_Channel13_S) || ((INSTANCE) == HPDMA3_Channel13_NS) || \
                                                 ((INSTANCE) == HPDMA3_Channel14_S) || ((INSTANCE) == HPDMA3_Channel14_NS) || \
                                                 ((INSTANCE) == HPDMA3_Channel15_S) || ((INSTANCE) == HPDMA3_Channel15_NS))

/******************************* GPIO Instances *******************************/
#define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA_S) || ((INSTANCE) == GPIOA_NS) || \
                                        ((INSTANCE) == GPIOB_S) || ((INSTANCE) == GPIOB_NS) || \
                                        ((INSTANCE) == GPIOC_S) || ((INSTANCE) == GPIOC_NS) || \
                                        ((INSTANCE) == GPIOD_S) || ((INSTANCE) == GPIOD_NS) || \
                                        ((INSTANCE) == GPIOE_S) || ((INSTANCE) == GPIOE_NS) || \
                                        ((INSTANCE) == GPIOF_S) || ((INSTANCE) == GPIOF_NS) || \
                                        ((INSTANCE) == GPIOG_S) || ((INSTANCE) == GPIOG_NS) || \
                                        ((INSTANCE) == GPIOH_S) || ((INSTANCE) == GPIOH_NS) || \
                                        ((INSTANCE) == GPIOI_S) || ((INSTANCE) == GPIOI_NS) || \
                                        ((INSTANCE) == GPIOJ_S) || ((INSTANCE) == GPIOJ_NS) || \
                                        ((INSTANCE) == GPIOK_S) || ((INSTANCE) == GPIOK_NS) || \
                                        ((INSTANCE) == GPIOZ_S) || ((INSTANCE) == GPIOZ_NS))

/**************************** GPIO AF Instances *******************************/
/* On MP2, all GPIO Bank support AF */
#define IS_GPIO_AF_INSTANCE IS_GPIO_ALL_INSTANCE

/**************************** GPIO Lock Instances *****************************/
/* On MP2, all GPIO Bank support the Lock mechanism */
#define IS_GPIO_LOCK_INSTANCE(INSTANCE) IS_GPIO_ALL_INSTANCE(INSTANCE)

/******************************* HASH Instances ********************************/
#define IS_HASH_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HASH1_S) || ((INSTANCE) == HASH1_NS) || \
                                        ((INSTANCE) == HASH2_S) || ((INSTANCE) == HASH2_NS))

/******************************* HASH Instances ********************************/
#define IS_HASH_DIGEST_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HASH1_DIGEST_S) || ((INSTANCE) == HASH1_DIGEST_NS) || \
                                               ((INSTANCE) == HASH2_DIGEST_S) || ((INSTANCE) == HASH2_DIGEST_NS))

/******************************** I2C Instances *******************************/
#define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1_S) || ((INSTANCE) == I2C1_NS) || \
                                       ((INSTANCE) == I2C2_S) || ((INSTANCE) == I2C2_NS) || \
                                       ((INSTANCE) == I2C3_S) || ((INSTANCE) == I2C3_NS) || \
                                       ((INSTANCE) == I2C4_S) || ((INSTANCE) == I2C4_NS) || \
                                       ((INSTANCE) == I2C5_S) || ((INSTANCE) == I2C5_NS) || \
                                       ((INSTANCE) == I2C6_S) || ((INSTANCE) == I2C6_NS) || \
                                       ((INSTANCE) == I2C7_S) || ((INSTANCE) == I2C7_NS) || \
                                       ((INSTANCE) == I2C8_S) || ((INSTANCE) == I2C8_NS))

/************** I2C Instances : wakeup capability from stop modes *************/
#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)

/****************************** SMBUS Instances *******************************/
#define IS_SMBUS_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1_S) || ((INSTANCE) == I2C1_NS) || \
                                         ((INSTANCE) == I2C2_S) || ((INSTANCE) == I2C2_NS) || \
                                         ((INSTANCE) == I2C3_S) || ((INSTANCE) == I2C3_NS) || \
                                         ((INSTANCE) == I2C4_S) || ((INSTANCE) == I2C4_NS) || \
                                         ((INSTANCE) == I2C5_S) || ((INSTANCE) == I2C5_NS) || \
                                         ((INSTANCE) == I2C6_S) || ((INSTANCE) == I2C6_NS) || \
                                         ((INSTANCE) == I2C7_S) || ((INSTANCE) == I2C7_NS) || \
                                         ((INSTANCE) == I2C8_S) || ((INSTANCE) == I2C8_NS))

/******************************* IWDG Instances *******************************/
#define IS_IWDG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == IWDG1_S) || ((INSTANCE) == IWDG1_NS) || \
                                        ((INSTANCE) == IWDG2_S) || ((INSTANCE) == IWDG2_NS) || \
                                        ((INSTANCE) == IWDG3_S) || ((INSTANCE) == IWDG3_NS) || \
                                        ((INSTANCE) == IWDG4_S) || ((INSTANCE) == IWDG4_NS) || \
                                        ((INSTANCE) == IWDG5_S) || ((INSTANCE) == IWDG5_NS))

/******************************* LTDC Instances *******************************/
#define IS_LTDC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == LTDC_S) || ((INSTANCE) == LTDC_NS))

/******************************** PKA Instances *******************************/
#define IS_PKA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == PKA_S) || ((INSTANCE) == PKA_NS))

/******************************* PSSI Instances ********************************/
#define IS_PSSI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == PSSI_S) || ((INSTANCE) == PSSI_NS))

/******************************* RNG Instances ********************************/
#define IS_RNG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == RNG_S) || ((INSTANCE) == RNG_NS))

/******************************* RTC Instances ********************************/
#define IS_RTC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == RTC_S) || ((INSTANCE) == RTC_NS))

/****************************** SAI Instances ********************************/
#define IS_SAI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SAI1_Block_A_S) || ((INSTANCE) == SAI1_Block_A_NS) || \
                                       ((INSTANCE) == SAI1_Block_B_S) || ((INSTANCE) == SAI1_Block_B_NS) || \
                                       ((INSTANCE) == SAI2_Block_A_S) || ((INSTANCE) == SAI2_Block_A_NS) || \
                                       ((INSTANCE) == SAI2_Block_B_S) || ((INSTANCE) == SAI2_Block_B_NS) || \
                                       ((INSTANCE) == SAI3_Block_A_S) || ((INSTANCE) == SAI3_Block_A_NS) || \
                                       ((INSTANCE) == SAI3_Block_B_S) || ((INSTANCE) == SAI3_Block_B_NS) || \
                                       ((INSTANCE) == SAI4_Block_A_S) || ((INSTANCE) == SAI4_Block_A_NS) || \
                                       ((INSTANCE) == SAI4_Block_B_S) || ((INSTANCE) == SAI4_Block_B_NS))

/******************************** SDMMC Instances *****************************/
#define IS_SDMMC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SDMMC1_S) || ((INSTANCE) == SDMMC1_NS) || \
                                         ((INSTANCE) == SDMMC2_S) || ((INSTANCE) == SDMMC1_NS) || \
                                         ((INSTANCE) == SDMMC3_S) || ((INSTANCE) == SDMMC1_NS))

/******************************* SPDIFRX Instances ****************************/
#define IS_SPDIFRX_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPDIFRX_S) || ((INSTANCE) == SPDIFRX_NS))

/****************** TIM Instances : All supported instances *******************/
#define IS_TIM_INSTANCE(INSTANCE)       (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                         ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                         ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                         ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                         ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                         ((INSTANCE) == TIM6_S)  || ((INSTANCE) == TIM6_NS)  || \
                                         ((INSTANCE) == TIM7_S)  || ((INSTANCE) == TIM7_NS)  || \
                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                         ((INSTANCE) == TIM10_S) || ((INSTANCE) == TIM10_NS) || \
                                         ((INSTANCE) == TIM11_S) || ((INSTANCE) == TIM11_NS) || \
                                         ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                         ((INSTANCE) == TIM13_S) || ((INSTANCE) == TIM13_NS) || \
                                         ((INSTANCE) == TIM14_S) || ((INSTANCE) == TIM14_NS) || \
                                         ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                         ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                         ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting 32 bits counter ****************/
#define IS_TIM_32B_COUNTER_INSTANCE(INSTANCE) (((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                               ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                               ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                               ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS))

/****************** TIM Instances : supporting the break function *************/
#define IS_TIM_BREAK_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                            ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************** TIM Instances : supporting Break source selection *************/
#define IS_TIM_BREAKSOURCE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                               ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                               ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                               ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                               ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                               ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting 2 break inputs *****************/
#define IS_TIM_BKIN2_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS) || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************* TIM Instances : at least 1 capture/compare channel *************/
#define IS_TIM_CC1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                         ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                         ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                         ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                         ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                         ((INSTANCE) == TIM10_S) || ((INSTANCE) == TIM10_NS) || \
                                         ((INSTANCE) == TIM11_S) || ((INSTANCE) == TIM11_NS) || \
                                         ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                         ((INSTANCE) == TIM13_S) || ((INSTANCE) == TIM13_NS) || \
                                         ((INSTANCE) == TIM14_S) || ((INSTANCE) == TIM14_NS) || \
                                         ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                         ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                         ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************ TIM Instances : at least 2 capture/compare channels *************/
#define IS_TIM_CC2_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                         ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                         ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                         ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                         ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                         ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                         ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************ TIM Instances : at least 3 capture/compare channels *************/
#define IS_TIM_CC3_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                         ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                         ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                         ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                         ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************ TIM Instances : at least 4 capture/compare channels *************/
#define IS_TIM_CC4_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                         ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                         ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                         ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                         ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : at least 5 capture/compare channels *******/
#define IS_TIM_CC5_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : at least 6 capture/compare channels *******/
#define IS_TIM_CC6_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************ TIM Instances : DMA requests generation (TIMx_DIER.COMDE) *******/
#define IS_TIM_CCDMA_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : DMA requests generation (TIMx_DIER.UDE) ***/
#define IS_TIM_DMA_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM6_S)  || ((INSTANCE) == TIM6_NS)  || \
                                            ((INSTANCE) == TIM7_S)  || ((INSTANCE) == TIM7_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                            ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************ TIM Instances : DMA requests generation (TIMx_DIER.CCxDE) *******/
#define IS_TIM_DMA_CC_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                            ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/******************** TIM Instances : DMA burst feature ***********************/
#define IS_TIM_DMABURST_INSTANCE(INSTANCE) (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                            ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/******************* TIM Instances : output(s) available **********************/
#define IS_TIM_CCX_INSTANCE(INSTANCE, CHANNEL) \
    (((((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6)))  \
     ||                                        \
     ((((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6)))  \
     ||                               \
     ((((INSTANCE) == TIM10_S) || ((INSTANCE) == TIM10_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM11_S) || ((INSTANCE) == TIM11_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2)))  \
     ||                               \
     ((((INSTANCE) == TIM13_S) || ((INSTANCE) == TIM13_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM14_S) || ((INSTANCE) == TIM14_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2)))  \
     ||                               \
     ((((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6))))

/****************** TIM Instances : supporting complementary output(s) ********/
#define IS_TIM_CCXN_INSTANCE(INSTANCE, CHANNEL) \
    (((((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
    ||                                \
    ((((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
    ||                                \
    ((((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4))))

/****************** TIM Instances : supporting clock division *****************/
#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                    ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                    ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                    ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                    ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                    ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                    ((INSTANCE) == TIM10_S) || ((INSTANCE) == TIM10_NS) || \
                                                    ((INSTANCE) == TIM11_S) || ((INSTANCE) == TIM11_NS) || \
                                                    ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                                    ((INSTANCE) == TIM13_S) || ((INSTANCE) == TIM13_NS) || \
                                                    ((INSTANCE) == TIM14_S) || ((INSTANCE) == TIM14_NS) || \
                                                    ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                                    ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                                    ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                                    ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****** TIM Instances : supporting external clock mode 1 for ETRF input *******/
#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE) (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                        ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                        ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                        ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                        ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                        ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                        ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****** TIM Instances : supporting external clock mode 2 for ETRF input *******/
#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                        ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                        ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                        ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                        ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                        ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                        ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting external clock mode 1 for TIX inputs*/
#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                        ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                        ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                        ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                        ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                        ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                        ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                                        ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                                        ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting internal trigger inputs(ITRX) *******/
#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)     (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                        ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                        ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                        ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                        ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                        ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                        ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                                        ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                                        ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting combined 3-phase PWM mode ******/
#define IS_TIM_COMBINED3PHASEPWM_INSTANCE(INSTANCE) (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                     ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                     ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting commutation event generation ***/
#define IS_TIM_COMMUTATION_EVENT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                     ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                     ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                                     ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                                     ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                                     ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting counting mode selection ********/
#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                        ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                        ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                        ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                        ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                        ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                        ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting encoder interface **************/
#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                      ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                      ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                      ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                      ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                      ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                      ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting Hall sensor interface **********/
#define IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                         ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                         ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                         ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                         ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                         ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                         ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/**************** TIM Instances : external trigger input available ************/
#define IS_TIM_ETR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/************* TIM Instances : supporting ETR source selection ***************/
#define IS_TIM_ETRSEL_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                             ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                             ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                             ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                             ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                             ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                             ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****** TIM Instances : Master mode available (TIMx_CR2.MMS available )********/
#define IS_TIM_MASTER_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM6_S)  || ((INSTANCE) == TIM6_NS)  || \
                                            ((INSTANCE) == TIM7_S)  || ((INSTANCE) == TIM7_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/*********** TIM Instances : Slave mode available (TIMx_SMCR available )*******/
#define IS_TIM_SLAVE_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting OCxREF clear *******************/
#define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE)        (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                       ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                                       ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                                       ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                                       ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                                       ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                       ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : remapping capability **********************/
#define IS_TIM_REMAP_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting repetition counter *************/
#define IS_TIM_REPETITION_COUNTER_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                                       ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                                       ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                                       ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                                       ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM17_NS) || \
                                                       ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/****************** TIM Instances : supporting synchronization ****************/
#define IS_TIM_SYNCHRO_INSTANCE(INSTANCE)  IS_TIM_MASTER_INSTANCE(INSTANCE)

/****************** TIM Instances : supporting ADC triggering through TRGO2 ***/
#define IS_TIM_TRGO2_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS) || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/******************* TIM Instances : Timer input XOR function *****************/
#define IS_TIM_XOR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS)  || \
                                            ((INSTANCE) == TIM2_S)  || ((INSTANCE) == TIM2_NS)  || \
                                            ((INSTANCE) == TIM3_S)  || ((INSTANCE) == TIM3_NS)  || \
                                            ((INSTANCE) == TIM4_S)  || ((INSTANCE) == TIM4_NS)  || \
                                            ((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                            ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS)  || \
                                            ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                            ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                            ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/******************* TIM Instances : Timer input selection ********************/
#define IS_TIM_TISEL_INSTANCE(INSTANCE)      (((INSTANCE) == TIM5_S)  || ((INSTANCE) == TIM5_NS)  || \
                                              ((INSTANCE) == TIM12_S) || ((INSTANCE) == TIM12_NS) || \
                                              ((INSTANCE) == TIM15_S) || ((INSTANCE) == TIM15_NS) || \
                                              ((INSTANCE) == TIM16_S) || ((INSTANCE) == TIM16_NS) || \
                                              ((INSTANCE) == TIM17_S) || ((INSTANCE) == TIM14_NS))

/****************** TIM Instances : Advanced timer instances *******************/
#define IS_TIM_ADVANCED_INSTANCE(INSTANCE)       (((INSTANCE) == TIM1_S)  || ((INSTANCE) == TIM1_NS) || \
                                                  ((INSTANCE) == TIM8_S)  || ((INSTANCE) == TIM8_NS) || \
                                                  ((INSTANCE) == TIM20_S) || ((INSTANCE) == TIM20_NS))

/******************** USART Instances : Synchronous mode **********************/
#define IS_USART_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S) || ((INSTANCE) == USART1_NS) || \
                                     ((INSTANCE) == USART2_S) || ((INSTANCE) == USART2_NS) || \
                                     ((INSTANCE) == USART3_S) || ((INSTANCE) == USART3_NS) || \
                                     ((INSTANCE) == USART6_S) || ((INSTANCE) == USART6_NS))

/******************** UART Instances : Asynchronous mode **********************/
#define IS_UART_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S) || ((INSTANCE) == USART1_NS)|| \
                                    ((INSTANCE) == USART2_S) || ((INSTANCE) == USART2_NS)|| \
                                    ((INSTANCE) == USART3_S) || ((INSTANCE) == USART3_NS)|| \
                                    ((INSTANCE) == USART6_S) || ((INSTANCE) == USART6_NS)|| \
                                    ((INSTANCE) == UART4_S)  || ((INSTANCE) == UART4_NS) || \
                                    ((INSTANCE) == UART5_S)  || ((INSTANCE) == UART5_NS) || \
                                    ((INSTANCE) == UART7_S)  || ((INSTANCE) == UART7_NS) || \
                                    ((INSTANCE) == UART8_S)  || ((INSTANCE) == UART8_NS) || \
                                    ((INSTANCE) == UART9_S)  || ((INSTANCE) == UART9_NS))

/******************************* LPUART Instance ******************************/
#define IS_LPUART_INSTANCE(INSTANCE) (((INSTANCE) == LPUART1_S) || ((INSTANCE) == LPUART1_NS))

/************************* UART Instances : FIFO mode *************************/
#define IS_UART_FIFO_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S)  || ((INSTANCE) == USART1_NS) || \
                                         ((INSTANCE) == USART2_S)  || ((INSTANCE) == USART2_NS) || \
                                         ((INSTANCE) == USART3_S)  || ((INSTANCE) == USART3_NS) || \
                                         ((INSTANCE) == USART6_S)  || ((INSTANCE) == USART6_NS) || \
                                         ((INSTANCE) == UART4_S)   || ((INSTANCE) == UART4_NS)  || \
                                         ((INSTANCE) == UART5_S)   || ((INSTANCE) == UART5_NS)  || \
                                         ((INSTANCE) == UART7_S)   || ((INSTANCE) == UART7_NS)  || \
                                         ((INSTANCE) == UART8_S)   || ((INSTANCE) == UART8_NS)  || \
                                         ((INSTANCE) == UART9_S)   || ((INSTANCE) == UART9_NS)  || \
                                         ((INSTANCE) == LPUART1_S) || ((INSTANCE) == LPUART1_NS))

/****************** UART Instances : Auto Baud Rate detection *****************/
#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S) || ((INSTANCE) == USART1_NS) || \
                                                            ((INSTANCE) == USART2_S) || ((INSTANCE) == USART2_NS) || \
                                                            ((INSTANCE) == USART3_S) || ((INSTANCE) == USART3_NS) || \
                                                            ((INSTANCE) == USART6_S) || ((INSTANCE) == USART6_NS) || \
                                                            ((INSTANCE) == UART4_S)  || ((INSTANCE) == UART4_NS)  || \
                                                            ((INSTANCE) == UART5_S)  || ((INSTANCE) == UART5_NS)  || \
                                                            ((INSTANCE) == UART7_S)  || ((INSTANCE) == UART7_NS)  || \
                                                            ((INSTANCE) == UART8_S)  || ((INSTANCE) == UART8_NS)  || \
                                                            ((INSTANCE) == UART9_S)  || ((INSTANCE) == UART9_NS))

/*********************** UART Instances : Driver Enable ***********************/
#define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S)  || ((INSTANCE) == USART1_NS) || \
                                                  ((INSTANCE) == USART2_S)  || ((INSTANCE) == USART2_NS) || \
                                                  ((INSTANCE) == USART3_S)  || ((INSTANCE) == USART3_NS) || \
                                                  ((INSTANCE) == USART6_S)  || ((INSTANCE) == USART6_NS) || \
                                                  ((INSTANCE) == UART4_S)   || ((INSTANCE) == UART4_NS)  || \
                                                  ((INSTANCE) == UART5_S)   || ((INSTANCE) == UART5_NS)  || \
                                                  ((INSTANCE) == UART7_S)   || ((INSTANCE) == UART7_NS)  || \
                                                  ((INSTANCE) == UART8_S)   || ((INSTANCE) == UART8_NS)  || \
                                                  ((INSTANCE) == UART9_S)   || ((INSTANCE) == UART9_NS)  || \
                                                  ((INSTANCE) == LPUART1_S) || ((INSTANCE) == LPUART1_NS))

/********************* UART Instances : Half-Duplex mode **********************/
#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S)  || ((INSTANCE) == USART1_NS) || \
                                               ((INSTANCE) == USART2_S)  || ((INSTANCE) == USART2_NS) || \
                                               ((INSTANCE) == USART3_S)  || ((INSTANCE) == USART3_NS) || \
                                               ((INSTANCE) == USART6_S)  || ((INSTANCE) == USART6_NS) || \
                                               ((INSTANCE) == UART4_S)   || ((INSTANCE) == UART4_NS)  || \
                                               ((INSTANCE) == UART5_S)   || ((INSTANCE) == UART5_NS)  || \
                                               ((INSTANCE) == UART7_S)   || ((INSTANCE) == UART7_NS)  || \
                                               ((INSTANCE) == UART8_S)   || ((INSTANCE) == UART8_NS)  || \
                                               ((INSTANCE) == UART9_S)   || ((INSTANCE) == UART9_NS)  || \
                                               ((INSTANCE) == LPUART1_S) || ((INSTANCE) == LPUART1_NS))

/******************* UART Instances : Hardware Flow control *******************/
#define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S)  || ((INSTANCE) == USART1_NS) || \
                                           ((INSTANCE) == USART2_S)  || ((INSTANCE) == USART2_NS) || \
                                           ((INSTANCE) == USART3_S)  || ((INSTANCE) == USART3_NS) || \
                                           ((INSTANCE) == USART6_S)  || ((INSTANCE) == USART6_NS) || \
                                           ((INSTANCE) == UART4_S)   || ((INSTANCE) == UART4_NS)  || \
                                           ((INSTANCE) == UART5_S)   || ((INSTANCE) == UART5_NS)  || \
                                           ((INSTANCE) == UART7_S)   || ((INSTANCE) == UART7_NS)  || \
                                           ((INSTANCE) == UART8_S)   || ((INSTANCE) == UART8_NS)  || \
                                           ((INSTANCE) == UART9_S)   || ((INSTANCE) == UART9_NS)  || \
                                           ((INSTANCE) == LPUART1_S) || ((INSTANCE) == LPUART1_NS))

/************************* UART Instances : SPI Slave mode **************************/
#define IS_UART_SPI_SLAVE_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S) || ((INSTANCE) == USART1_NS) || \
                                              ((INSTANCE) == USART2_S) || ((INSTANCE) == USART2_NS) || \
                                              ((INSTANCE) == USART3_S) || ((INSTANCE) == USART3_NS) || \
                                              ((INSTANCE) == USART6_S) || ((INSTANCE) == USART6_NS))

/************************* UART Instances : LIN mode **************************/
#define IS_UART_LIN_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S) || ((INSTANCE) == USART1_NS) || \
                                        ((INSTANCE) == USART2_S) || ((INSTANCE) == USART2_NS) || \
                                        ((INSTANCE) == USART3_S) || ((INSTANCE) == USART3_NS) || \
                                        ((INSTANCE) == USART6_S) || ((INSTANCE) == USART6_NS) || \
                                        ((INSTANCE) == UART4_S)  || ((INSTANCE) == UART4_NS)  || \
                                        ((INSTANCE) == UART5_S)  || ((INSTANCE) == UART5_NS)  || \
                                        ((INSTANCE) == UART7_S)  || ((INSTANCE) == UART7_NS)  || \
                                        ((INSTANCE) == UART8_S)  || ((INSTANCE) == UART8_NS)  || \
                                        ((INSTANCE) == UART9_S)  || ((INSTANCE) == UART9_NS))

/****************** UART Instances : Wake-up from Stop mode *******************/
#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S)  || ((INSTANCE) == USART1_NS) || \
                                                    ((INSTANCE) == USART2_S)  || ((INSTANCE) == USART2_NS) || \
                                                    ((INSTANCE) == USART3_S)  || ((INSTANCE) == USART3_NS) || \
                                                    ((INSTANCE) == USART6_S)  || ((INSTANCE) == USART6_NS) || \
                                                    ((INSTANCE) == UART4_S)   || ((INSTANCE) == UART4_NS)  || \
                                                    ((INSTANCE) == UART5_S)   || ((INSTANCE) == UART5_NS)  || \
                                                    ((INSTANCE) == UART7_S)   || ((INSTANCE) == UART7_NS)  || \
                                                    ((INSTANCE) == UART8_S)   || ((INSTANCE) == UART8_NS)  || \
                                                    ((INSTANCE) == UART9_S)   || ((INSTANCE) == UART9_NS)  || \
                                                    ((INSTANCE) == LPUART1_S) || ((INSTANCE) == LPUART1_NS))

/************************* UART Instances : IRDA mode *************************/
#define IS_IRDA_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S) || ((INSTANCE) == USART1_NS) || \
                                    ((INSTANCE) == USART2_S) || ((INSTANCE) == USART2_NS) || \
                                    ((INSTANCE) == USART3_S) || ((INSTANCE) == USART3_NS) || \
                                    ((INSTANCE) == USART6_S) || ((INSTANCE) == USART6_NS) || \
                                    ((INSTANCE) == UART4_S)  || ((INSTANCE) == UART4_NS)  || \
                                    ((INSTANCE) == UART5_S)  || ((INSTANCE) == UART5_NS)  || \
                                    ((INSTANCE) == UART7_S)  || ((INSTANCE) == UART7_NS)  || \
                                    ((INSTANCE) == UART8_S)  || ((INSTANCE) == UART8_NS)  || \
                                    ((INSTANCE) == UART9_S)  || ((INSTANCE) == UART9_NS))

/********************* USART Instances : Smard card mode **********************/
#define IS_SMARTCARD_INSTANCE(INSTANCE) (((INSTANCE) == USART1_S) || ((INSTANCE) == USART1_NS) || \
                                         ((INSTANCE) == USART2_S) || ((INSTANCE) == USART2_NS) || \
                                         ((INSTANCE) == USART3_S) || ((INSTANCE) == USART3_NS) || \
                                         ((INSTANCE) == USART6_S) || ((INSTANCE) == USART6_NS))

/******************************* USB_PCD Instances *******************************/
#define IS_PCD_ALL_INSTANCE(INSTANCE) (((INSTANCE) == USB3_S) || ((INSTANCE) == USB3_NS))

/******************************* WWDG Instances *******************************/
#define IS_WWDG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == WWDG1_S) || ((INSTANCE) == WWDG1_NS) || \
                                        ((INSTANCE) == WWDG2_S) || ((INSTANCE) == WWDG2_NS))

#else /* CORTEX_IN_SECURE_STATE */
/******************************* CRC Instances ********************************/
#define IS_CRC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == CRC))

/******************************* DCMI Instances *******************************/
#define IS_CSI2HOST_ALL_INSTANCE(INSTANCE) ((INSTANCE) == CSI2HOST)

/******************************* DCMI Instances *******************************/
#define IS_DCMI_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DCMI)

/******************************* DCMIPP Instances *******************************/
#define IS_DCMIPP_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DCMIPP)

/******************************** DMA Instances *******************************/
#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel0)  || \
                                       ((INSTANCE) == HPDMA1_Channel1)  || \
                                       ((INSTANCE) == HPDMA1_Channel2)  || \
                                       ((INSTANCE) == HPDMA1_Channel3)  || \
                                       ((INSTANCE) == HPDMA1_Channel4)  || \
                                       ((INSTANCE) == HPDMA1_Channel5)  || \
                                       ((INSTANCE) == HPDMA1_Channel6)  || \
                                       ((INSTANCE) == HPDMA1_Channel7)  || \
                                       ((INSTANCE) == HPDMA1_Channel8)  || \
                                       ((INSTANCE) == HPDMA1_Channel9)  || \
                                       ((INSTANCE) == HPDMA1_Channel10) || \
                                       ((INSTANCE) == HPDMA1_Channel11) || \
                                       ((INSTANCE) == HPDMA1_Channel12) || \
                                       ((INSTANCE) == HPDMA1_Channel13) || \
                                       ((INSTANCE) == HPDMA1_Channel14) || \
                                       ((INSTANCE) == HPDMA1_Channel15) || \
                                       ((INSTANCE) == HPDMA2_Channel0)  || \
                                       ((INSTANCE) == HPDMA2_Channel1)  || \
                                       ((INSTANCE) == HPDMA2_Channel2)  || \
                                       ((INSTANCE) == HPDMA2_Channel3)  || \
                                       ((INSTANCE) == HPDMA2_Channel4)  || \
                                       ((INSTANCE) == HPDMA2_Channel5)  || \
                                       ((INSTANCE) == HPDMA2_Channel6)  || \
                                       ((INSTANCE) == HPDMA2_Channel7)  || \
                                       ((INSTANCE) == HPDMA2_Channel8)  || \
                                       ((INSTANCE) == HPDMA2_Channel9)  || \
                                       ((INSTANCE) == HPDMA2_Channel10) || \
                                       ((INSTANCE) == HPDMA2_Channel11) || \
                                       ((INSTANCE) == HPDMA2_Channel12) || \
                                       ((INSTANCE) == HPDMA2_Channel13) || \
                                       ((INSTANCE) == HPDMA2_Channel14) || \
                                       ((INSTANCE) == HPDMA2_Channel15) || \
                                       ((INSTANCE) == HPDMA3_Channel0)  || \
                                       ((INSTANCE) == HPDMA3_Channel1)  || \
                                       ((INSTANCE) == HPDMA3_Channel2)  || \
                                       ((INSTANCE) == HPDMA3_Channel3)  || \
                                       ((INSTANCE) == HPDMA3_Channel4)  || \
                                       ((INSTANCE) == HPDMA3_Channel5)  || \
                                       ((INSTANCE) == HPDMA3_Channel6)  || \
                                       ((INSTANCE) == HPDMA3_Channel7)  || \
                                       ((INSTANCE) == HPDMA3_Channel8)  || \
                                       ((INSTANCE) == HPDMA3_Channel9)  || \
                                       ((INSTANCE) == HPDMA3_Channel10) || \
                                       ((INSTANCE) == HPDMA3_Channel11) || \
                                       ((INSTANCE) == HPDMA3_Channel12) || \
                                       ((INSTANCE) == HPDMA3_Channel13) || \
                                       ((INSTANCE) == HPDMA3_Channel14) || \
                                       ((INSTANCE) == HPDMA3_Channel15) || \
                                       ((INSTANCE) == LPDMA_Channel0)   || \
                                       ((INSTANCE) == LPDMA_Channel1)   || \
                                       ((INSTANCE) == LPDMA_Channel2)   || \
                                       ((INSTANCE) == LPDMA_Channel3))

#define IS_HPDMA_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel0)  || \
                                     ((INSTANCE) == HPDMA1_Channel1)  || \
                                     ((INSTANCE) == HPDMA1_Channel2)  || \
                                     ((INSTANCE) == HPDMA1_Channel3)  || \
                                     ((INSTANCE) == HPDMA1_Channel4)  || \
                                     ((INSTANCE) == HPDMA1_Channel5)  || \
                                     ((INSTANCE) == HPDMA1_Channel6)  || \
                                     ((INSTANCE) == HPDMA1_Channel7)  || \
                                     ((INSTANCE) == HPDMA1_Channel8)  || \
                                     ((INSTANCE) == HPDMA1_Channel9)  || \
                                     ((INSTANCE) == HPDMA1_Channel10) || \
                                     ((INSTANCE) == HPDMA1_Channel11) || \
                                     ((INSTANCE) == HPDMA1_Channel12) || \
                                     ((INSTANCE) == HPDMA1_Channel13) || \
                                     ((INSTANCE) == HPDMA1_Channel14) || \
                                     ((INSTANCE) == HPDMA1_Channel15) || \
                                     ((INSTANCE) == HPDMA2_Channel0)  || \
                                     ((INSTANCE) == HPDMA2_Channel1)  || \
                                     ((INSTANCE) == HPDMA2_Channel2)  || \
                                     ((INSTANCE) == HPDMA2_Channel3)  || \
                                     ((INSTANCE) == HPDMA2_Channel4)  || \
                                     ((INSTANCE) == HPDMA2_Channel5)  || \
                                     ((INSTANCE) == HPDMA2_Channel6)  || \
                                     ((INSTANCE) == HPDMA2_Channel7)  || \
                                     ((INSTANCE) == HPDMA2_Channel8)  || \
                                     ((INSTANCE) == HPDMA2_Channel9)  || \
                                     ((INSTANCE) == HPDMA2_Channel10) || \
                                     ((INSTANCE) == HPDMA2_Channel11) || \
                                     ((INSTANCE) == HPDMA2_Channel12) || \
                                     ((INSTANCE) == HPDMA2_Channel13) || \
                                     ((INSTANCE) == HPDMA2_Channel14) || \
                                     ((INSTANCE) == HPDMA2_Channel15) || \
                                     ((INSTANCE) == HPDMA3_Channel0)  || \
                                     ((INSTANCE) == HPDMA3_Channel1)  || \
                                     ((INSTANCE) == HPDMA3_Channel2)  || \
                                     ((INSTANCE) == HPDMA3_Channel3)  || \
                                     ((INSTANCE) == HPDMA3_Channel4)  || \
                                     ((INSTANCE) == HPDMA3_Channel5)  || \
                                     ((INSTANCE) == HPDMA3_Channel6)  || \
                                     ((INSTANCE) == HPDMA3_Channel7)  || \
                                     ((INSTANCE) == HPDMA3_Channel8)  || \
                                     ((INSTANCE) == HPDMA3_Channel9)  || \
                                     ((INSTANCE) == HPDMA3_Channel10) || \
                                     ((INSTANCE) == HPDMA3_Channel11) || \
                                     ((INSTANCE) == HPDMA3_Channel12) || \
                                     ((INSTANCE) == HPDMA3_Channel13) || \
                                     ((INSTANCE) == HPDMA3_Channel14) || \
                                     ((INSTANCE) == HPDMA3_Channel15))

#define IS_LPDMA_INSTANCE(INSTANCE) (((INSTANCE) == LPDMA_Channel0)   || \
                                     ((INSTANCE) == LPDMA_Channel1)   || \
                                     ((INSTANCE) == LPDMA_Channel2)   || \
                                     ((INSTANCE) == LPDMA_Channel3))

#define IS_DMA_2D_ADDRESSING_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel12)  || \
                                                 ((INSTANCE) == HPDMA1_Channel13)  || \
                                                 ((INSTANCE) == HPDMA1_Channel14)  || \
                                                 ((INSTANCE) == HPDMA1_Channel15)  || \
                                                 ((INSTANCE) == HPDMA2_Channel12)  || \
                                                 ((INSTANCE) == HPDMA2_Channel13)  || \
                                                 ((INSTANCE) == HPDMA2_Channel14)  || \
                                                 ((INSTANCE) == HPDMA2_Channel15)  || \
                                                 ((INSTANCE) == HPDMA3_Channel12)  || \
                                                 ((INSTANCE) == HPDMA3_Channel13)  || \
                                                 ((INSTANCE) == HPDMA3_Channel14)  || \
                                                 ((INSTANCE) == HPDMA3_Channel15))

/******************************* GPIO Instances *******************************/
#define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || \
                                        ((INSTANCE) == GPIOB) || \
                                        ((INSTANCE) == GPIOC) || \
                                        ((INSTANCE) == GPIOD) || \
                                        ((INSTANCE) == GPIOE) || \
                                        ((INSTANCE) == GPIOF) || \
                                        ((INSTANCE) == GPIOG) || \
                                        ((INSTANCE) == GPIOH) || \
                                        ((INSTANCE) == GPIOI) || \
                                        ((INSTANCE) == GPIOJ) || \
                                        ((INSTANCE) == GPIOK) || \
                                        ((INSTANCE) == GPIOZ))

/**************************** GPIO AF Instances *******************************/
/* On MP2, all GPIO Bank support AF */
#define IS_GPIO_AF_INSTANCE IS_GPIO_ALL_INSTANCE

/**************************** GPIO Lock Instances *****************************/
/* On MP2, all GPIO Bank support the Lock mechanism */
#define IS_GPIO_LOCK_INSTANCE(INSTANCE) IS_GPIO_ALL_INSTANCE(INSTANCE)

/******************************* HASH Instances ********************************/
#define IS_HASH_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HASH1) || \
                                        ((INSTANCE) == HASH2))

/******************************* HASH Instances ********************************/
#define IS_HASH_DIGEST_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HASH1_DIGEST) || \
                                               ((INSTANCE) == HASH2_DIGEST))

/******************************** I2C Instances *******************************/
#define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || \
                                       ((INSTANCE) == I2C2) || \
                                       ((INSTANCE) == I2C3) || \
                                       ((INSTANCE) == I2C4) || \
                                       ((INSTANCE) == I2C5) || \
                                       ((INSTANCE) == I2C6) || \
                                       ((INSTANCE) == I2C7) || \
                                       ((INSTANCE) == I2C8))

/************** I2C Instances : wakeup capability from stop modes *************/
#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)

/****************************** SMBUS Instances *******************************/
#define IS_SMBUS_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || \
                                         ((INSTANCE) == I2C2) || \
                                         ((INSTANCE) == I2C3) || \
                                         ((INSTANCE) == I2C4) || \
                                         ((INSTANCE) == I2C5) || \
                                         ((INSTANCE) == I2C6) || \
                                         ((INSTANCE) == I2C7) || \
                                         ((INSTANCE) == I2C8))

/******************************* IWDG Instances *******************************/
#define IS_IWDG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == IWDG1) || \
                                        ((INSTANCE) == IWDG2) || \
                                        ((INSTANCE) == IWDG3) || \
                                        ((INSTANCE) == IWDG4) || \
                                        ((INSTANCE) == IWDG5))

/******************************* LTDC Instances *******************************/
#define IS_LTDC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == LTDC)

/******************************** PKA Instances *******************************/
#define IS_PKA_ALL_INSTANCE(INSTANCE) ((INSTANCE) == PKA)

/******************************* PSSI Instances ********************************/
#define IS_PSSI_ALL_INSTANCE(INSTANCE) ((INSTANCE) == PSSI)

/******************************* RNG Instances ********************************/
#define IS_RNG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == RNG)

/******************************* RTC Instances ********************************/
#define IS_RTC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == RTC)

/****************************** SAI Instances ********************************/
#define IS_SAI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SAI1_Block_A) || \
                                       ((INSTANCE) == SAI1_Block_B) || \
                                       ((INSTANCE) == SAI2_Block_A) || \
                                       ((INSTANCE) == SAI2_Block_B) || \
                                       ((INSTANCE) == SAI3_Block_A) || \
                                       ((INSTANCE) == SAI3_Block_B) || \
                                       ((INSTANCE) == SAI4_Block_A) || \
                                       ((INSTANCE) == SAI4_Block_B))

/******************************** SDMMC Instances *****************************/
#define IS_SDMMC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SDMMC1) || \
                                         ((INSTANCE) == SDMMC2) || \
                                         ((INSTANCE) == SDMMC3))

/******************************* SPDIFRX Instances ****************************/
#define IS_SPDIFRX_ALL_INSTANCE(INSTANCE) ((INSTANCE) == SPDIFRX)

/****************** TIM Instances : All supported instances *******************/
#define IS_TIM_INSTANCE(INSTANCE)       (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM6)  || \
                                         ((INSTANCE) == TIM7)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM10) || \
                                         ((INSTANCE) == TIM11) || \
                                         ((INSTANCE) == TIM12) || \
                                         ((INSTANCE) == TIM13) || \
                                         ((INSTANCE) == TIM14) || \
                                         ((INSTANCE) == TIM15) || \
                                         ((INSTANCE) == TIM16) || \
                                         ((INSTANCE) == TIM17) || \
                                         ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting 32 bits counter ****************/
#define IS_TIM_32B_COUNTER_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)  || \
                                               ((INSTANCE) == TIM3)  || \
                                               ((INSTANCE) == TIM4)  || \
                                               ((INSTANCE) == TIM5))

/****************** TIM Instances : supporting the break function *************/
#define IS_TIM_BREAK_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17) || \
                                            ((INSTANCE) == TIM20))

/************** TIM Instances : supporting Break source selection *************/
#define IS_TIM_BREAKSOURCE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                               ((INSTANCE) == TIM8)  || \
                                               ((INSTANCE) == TIM15) || \
                                               ((INSTANCE) == TIM16) || \
                                               ((INSTANCE) == TIM17) || \
                                               ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting 2 break inputs *****************/
#define IS_TIM_BKIN2_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1) || \
                                            ((INSTANCE) == TIM8) || \
                                            ((INSTANCE) == TIM20))

/************* TIM Instances : at least 1 capture/compare channel *************/
#define IS_TIM_CC1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM10) || \
                                         ((INSTANCE) == TIM11) || \
                                         ((INSTANCE) == TIM12) || \
                                         ((INSTANCE) == TIM13) || \
                                         ((INSTANCE) == TIM14) || \
                                         ((INSTANCE) == TIM15) || \
                                         ((INSTANCE) == TIM16) || \
                                         ((INSTANCE) == TIM17) || \
                                         ((INSTANCE) == TIM20))

/************ TIM Instances : at least 2 capture/compare channels *************/
#define IS_TIM_CC2_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM12) || \
                                         ((INSTANCE) == TIM15) || \
                                         ((INSTANCE) == TIM20))

/************ TIM Instances : at least 3 capture/compare channels *************/
#define IS_TIM_CC3_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM20))

/************ TIM Instances : at least 4 capture/compare channels *************/
#define IS_TIM_CC4_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM20))

/****************** TIM Instances : at least 5 capture/compare channels *******/
#define IS_TIM_CC5_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM20))

/****************** TIM Instances : at least 6 capture/compare channels *******/
#define IS_TIM_CC6_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM20))

/************ TIM Instances : DMA requests generation (TIMx_DIER.COMDE) *******/
#define IS_TIM_CCDMA_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM20))

/****************** TIM Instances : DMA requests generation (TIMx_DIER.UDE) ***/
#define IS_TIM_DMA_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM6)  || \
                                            ((INSTANCE) == TIM7)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17) || \
                                            ((INSTANCE) == TIM20))

/************ TIM Instances : DMA requests generation (TIMx_DIER.CCxDE) *******/
#define IS_TIM_DMA_CC_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17) || \
                                            ((INSTANCE) == TIM20))

/******************** TIM Instances : DMA burst feature ***********************/
#define IS_TIM_DMABURST_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17) || \
                                            ((INSTANCE) == TIM20))

/******************* TIM Instances : output(s) available **********************/
#define IS_TIM_CCX_INSTANCE(INSTANCE, CHANNEL) \
    (((((INSTANCE) == TIM1))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6)))  \
     ||                                        \
     ((((INSTANCE) == TIM2))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM3))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM4))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM5))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM8))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6)))  \
     ||                               \
     ((((INSTANCE) == TIM10)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM11)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM12)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2)))  \
     ||                               \
     ((((INSTANCE) == TIM13)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM14)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM15)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2)))  \
     ||                               \
     ((((INSTANCE) == TIM16)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM17)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM20)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6))))

/****************** TIM Instances : supporting complementary output(s) ********/
#define IS_TIM_CCXN_INSTANCE(INSTANCE, CHANNEL) \
    (((((INSTANCE) == TIM1))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
    ||                                \
    ((((INSTANCE) == TIM8))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
    ||                                \
    ((((INSTANCE) == TIM15)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM16)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM17)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM20)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4))))

/****************** TIM Instances : supporting clock division *****************/
#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                                    ((INSTANCE) == TIM2)  || \
                                                    ((INSTANCE) == TIM3)  || \
                                                    ((INSTANCE) == TIM4)  || \
                                                    ((INSTANCE) == TIM5)  || \
                                                    ((INSTANCE) == TIM8)  || \
                                                    ((INSTANCE) == TIM10) || \
                                                    ((INSTANCE) == TIM11) || \
                                                    ((INSTANCE) == TIM12) || \
                                                    ((INSTANCE) == TIM13) || \
                                                    ((INSTANCE) == TIM14) || \
                                                    ((INSTANCE) == TIM15) || \
                                                    ((INSTANCE) == TIM16) || \
                                                    ((INSTANCE) == TIM17) || \
                                                    ((INSTANCE) == TIM20))

/****** TIM Instances : supporting external clock mode 1 for ETRF input *******/
#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8)  || \
                                                        ((INSTANCE) == TIM20))

/****** TIM Instances : supporting external clock mode 2 for ETRF input *******/
#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8)  || \
                                                        ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting external clock mode 1 for TIX inputs*/
#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8)  || \
                                                        ((INSTANCE) == TIM12) || \
                                                        ((INSTANCE) == TIM15) || \
                                                        ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting internal trigger inputs(ITRX) *******/
#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)     (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8)  || \
                                                        ((INSTANCE) == TIM12) || \
                                                        ((INSTANCE) == TIM15) || \
                                                        ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting combined 3-phase PWM mode ******/
#define IS_TIM_COMBINED3PHASEPWM_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                     ((INSTANCE) == TIM8)  || \
                                                     ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting commutation event generation ***/
#define IS_TIM_COMMUTATION_EVENT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                     ((INSTANCE) == TIM8)  || \
                                                     ((INSTANCE) == TIM15) || \
                                                     ((INSTANCE) == TIM16) || \
                                                     ((INSTANCE) == TIM17) || \
                                                     ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting counting mode selection ********/
#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8)  || \
                                                        ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting encoder interface **************/
#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1)  || \
                                                      ((INSTANCE) == TIM2)  || \
                                                      ((INSTANCE) == TIM3)  || \
                                                      ((INSTANCE) == TIM4)  || \
                                                      ((INSTANCE) == TIM5)  || \
                                                      ((INSTANCE) == TIM8)  || \
                                                      ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting Hall sensor interface **********/
#define IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                         ((INSTANCE) == TIM2)  || \
                                                         ((INSTANCE) == TIM3)  || \
                                                         ((INSTANCE) == TIM4)  || \
                                                         ((INSTANCE) == TIM5)  || \
                                                         ((INSTANCE) == TIM8)  || \
                                                         ((INSTANCE) == TIM20))

/**************** TIM Instances : external trigger input available ************/
#define IS_TIM_ETR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM20))

/************* TIM Instances : supporting ETR source selection ***************/
#define IS_TIM_ETRSEL_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                             ((INSTANCE) == TIM2)  || \
                                             ((INSTANCE) == TIM3)  || \
                                             ((INSTANCE) == TIM4)  || \
                                             ((INSTANCE) == TIM5)  || \
                                             ((INSTANCE) == TIM8)  || \
                                             ((INSTANCE) == TIM20))

/****** TIM Instances : Master mode available (TIMx_CR2.MMS available )********/
#define IS_TIM_MASTER_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM6)  || \
                                            ((INSTANCE) == TIM7)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM12) || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM20))

/*********** TIM Instances : Slave mode available (TIMx_SMCR available )*******/
#define IS_TIM_SLAVE_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM12) || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting OCxREF clear *******************/
#define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE)        (((INSTANCE) == TIM1)  || \
                                                       ((INSTANCE) == TIM2)  || \
                                                       ((INSTANCE) == TIM3)  || \
                                                       ((INSTANCE) == TIM4)  || \
                                                       ((INSTANCE) == TIM5)  || \
                                                       ((INSTANCE) == TIM8)  || \
                                                       ((INSTANCE) == TIM20))

/****************** TIM Instances : remapping capability **********************/
#define IS_TIM_REMAP_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting repetition counter *************/
#define IS_TIM_REPETITION_COUNTER_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1)  || \
                                                       ((INSTANCE) == TIM8)  || \
                                                       ((INSTANCE) == TIM15) || \
                                                       ((INSTANCE) == TIM16) || \
                                                       ((INSTANCE) == TIM17) || \
                                                       ((INSTANCE) == TIM20))

/****************** TIM Instances : supporting synchronization ****************/
#define IS_TIM_SYNCHRO_INSTANCE(INSTANCE)  IS_TIM_MASTER_INSTANCE(INSTANCE)

/****************** TIM Instances : supporting ADC triggering through TRGO2 ***/
#define IS_TIM_TRGO2_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1) || \
                                            ((INSTANCE) == TIM8) || \
                                            ((INSTANCE) == TIM20))

/******************* TIM Instances : Timer input XOR function *****************/
#define IS_TIM_XOR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM12) || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM20))

/******************* TIM Instances : Timer input selection ********************/
#define IS_TIM_TISEL_INSTANCE(INSTANCE)      (((INSTANCE) == TIM5)  || \
                                              ((INSTANCE) == TIM12) || \
                                              ((INSTANCE) == TIM15) || \
                                              ((INSTANCE) == TIM16) || \
                                              ((INSTANCE) == TIM17))

/****************** TIM Instances : Advanced timer instances *******************/
#define IS_TIM_ADVANCED_INSTANCE(INSTANCE)       (((INSTANCE) == TIM1) || \
                                                  ((INSTANCE) == TIM8) || \
                                                  ((INSTANCE) == TIM20))

/******************** USART Instances : Synchronous mode **********************/
#define IS_USART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                     ((INSTANCE) == USART2) || \
                                     ((INSTANCE) == USART3) || \
                                     ((INSTANCE) == USART6))

/******************** UART Instances : Asynchronous mode **********************/
#define IS_UART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                    ((INSTANCE) == USART2) || \
                                    ((INSTANCE) == USART3) || \
                                    ((INSTANCE) == USART6) || \
                                    ((INSTANCE) == UART4)  || \
                                    ((INSTANCE) == UART5)  || \
                                    ((INSTANCE) == UART7)  || \
                                    ((INSTANCE) == UART8)  || \
                                    ((INSTANCE) == UART9))

/******************************* LPUART Instance ******************************/
#define IS_LPUART_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/************************* UART Instances : FIFO mode *************************/
#define IS_UART_FIFO_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                         ((INSTANCE) == USART2) || \
                                         ((INSTANCE) == USART3) || \
                                         ((INSTANCE) == USART6) || \
                                         ((INSTANCE) == UART4)  || \
                                         ((INSTANCE) == UART5)  || \
                                         ((INSTANCE) == UART7)  || \
                                         ((INSTANCE) == UART8)  || \
                                         ((INSTANCE) == UART9)  || \
                                         ((INSTANCE) == LPUART1))

/****************** UART Instances : Auto Baud Rate detection *****************/
#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                                            ((INSTANCE) == USART2) || \
                                                            ((INSTANCE) == USART3) || \
                                                            ((INSTANCE) == USART6) || \
                                                            ((INSTANCE) == UART4)  || \
                                                            ((INSTANCE) == UART5)  || \
                                                            ((INSTANCE) == UART7)  || \
                                                            ((INSTANCE) == UART8)  || \
                                                            ((INSTANCE) == UART9))

/*********************** UART Instances : Driver Enable ***********************/
#define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                                  ((INSTANCE) == USART2) || \
                                                  ((INSTANCE) == USART3) || \
                                                  ((INSTANCE) == USART6) || \
                                                  ((INSTANCE) == UART4)  || \
                                                  ((INSTANCE) == UART5)  || \
                                                  ((INSTANCE) == UART7)  || \
                                                  ((INSTANCE) == UART8)  || \
                                                  ((INSTANCE) == UART9)  || \
                                                  ((INSTANCE) == LPUART1))

/********************* UART Instances : Half-Duplex mode **********************/
#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                               ((INSTANCE) == USART2) || \
                                               ((INSTANCE) == USART3) || \
                                               ((INSTANCE) == USART6) || \
                                               ((INSTANCE) == UART4)  || \
                                               ((INSTANCE) == UART5)  || \
                                               ((INSTANCE) == UART7)  || \
                                               ((INSTANCE) == UART8)  || \
                                               ((INSTANCE) == UART9)  || \
                                               ((INSTANCE) == LPUART1))

/******************* UART Instances : Hardware Flow control *******************/
#define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                           ((INSTANCE) == USART2) || \
                                           ((INSTANCE) == USART3) || \
                                           ((INSTANCE) == USART6) || \
                                           ((INSTANCE) == UART4)  || \
                                           ((INSTANCE) == UART5)  || \
                                           ((INSTANCE) == UART7)  || \
                                           ((INSTANCE) == UART8)  || \
                                           ((INSTANCE) == UART9)  || \
                                           ((INSTANCE) == LPUART1))

/************************* UART Instances : SPI Slave mode **************************/
#define IS_UART_SPI_SLAVE_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                              ((INSTANCE) == USART2) || \
                                              ((INSTANCE) == USART3) || \
                                              ((INSTANCE) == USART6))

/************************* UART Instances : LIN mode **************************/
#define IS_UART_LIN_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                        ((INSTANCE) == USART2) || \
                                        ((INSTANCE) == USART3) || \
                                        ((INSTANCE) == USART6) || \
                                        ((INSTANCE) == UART4)  || \
                                        ((INSTANCE) == UART5)  || \
                                        ((INSTANCE) == UART7)  || \
                                        ((INSTANCE) == UART8)  || \
                                        ((INSTANCE) == UART9))

/****************** UART Instances : Wake-up from Stop mode *******************/
#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                                    ((INSTANCE) == USART2) || \
                                                    ((INSTANCE) == USART3) || \
                                                    ((INSTANCE) == USART6) || \
                                                    ((INSTANCE) == UART4)  || \
                                                    ((INSTANCE) == UART5)  || \
                                                    ((INSTANCE) == UART7)  || \
                                                    ((INSTANCE) == UART8)  || \
                                                    ((INSTANCE) == UART9)  || \
                                                    ((INSTANCE) == LPUART1))

/************************* UART Instances : IRDA mode *************************/
#define IS_IRDA_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                    ((INSTANCE) == USART2) || \
                                    ((INSTANCE) == USART3) || \
                                    ((INSTANCE) == USART6) || \
                                    ((INSTANCE) == UART4)  || \
                                    ((INSTANCE) == UART5)  || \
                                    ((INSTANCE) == UART7)  || \
                                    ((INSTANCE) == UART8)  || \
                                    ((INSTANCE) == UART9))

/********************* USART Instances : Smard card mode **********************/
#define IS_SMARTCARD_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                         ((INSTANCE) == USART2) || \
                                         ((INSTANCE) == USART3) || \
                                         ((INSTANCE) == USART6) )

/******************************* USB_PCD Instances *******************************/
#define IS_PCD_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USB3)

/******************************* WWDG Instances *******************************/
#define IS_WWDG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == WWDG1) || \
                                        ((INSTANCE) == WWDG2))

#endif /* CORTEX_IN_SECURE_STATE */
/******************************* CRC VERSION ********************************/
#define CRC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* CRYP VERSION ********************************/
#define CRYP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* CSI2HOST VERSION ********************************/
#define CSI2HOST_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DCMI VERSION ********************************/
#define DCMI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DCMIPP VERSION ********************************/
#define DCMIPP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DMA VERSION ********************************/
#define DMA_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DSI VERSION ********************************/
#define DSI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* EXTI VERSION ********************************/
#define EXTI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* HASH VERSION ********************************/
#define HASH_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* GPIO VERSION ********************************/
#define GPIO_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* HDP VERSION ********************************/
#define HDP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* I2C VERSION ********************************/
#define I2C_VERSION(INSTANCE) ((INSTANCE)->VERR)

/******************************* IPCC VERSION ********************************/
#define IPCC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* IWDG VERSION ********************************/
#define IWDG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* LPTIM VERSION ********************************/
#define LPTIM_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RNG VERSION ********************************/
#define OSPI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* PSSI VERSION ********************************/
#define PSSI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* PKA VERSION ********************************/
#define PKA_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* PWR VERSION ********************************/
#define PWR_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RCC VERSION ********************************/
#define RCC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RIFSC VERSION ********************************/
#define RIFSC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RISAB VERSION ********************************/
#define RISAB_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RISAF VERSION ********************************/
#define RISAF_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* IAC VERSION ********************************/
#define IAC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RNG VERSION ********************************/
#define RNG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RTC VERSION ********************************/
#define RTC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SAI VERSION ****************************/
#define SAI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SDMMC VERSION ******************************/
#define SDMMC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SPDIFRX VERSION ****************************/
#define SPDIFRX_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* TAMP VERSION ********************************/
#define TAMP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* TIM VERSION ********************************/
#define TIM_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* USART VERSION ********************************/
#define USART_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* WWDG VERSION ********************************/
#define WWDG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DEVICE VERSION ********************************/
#define DEVICE_REVISION() (((DBGMCU->IDCODE) & (DBGMCU_IDCODE_REV_ID_Msk)) >> DBGMCU_IDCODE_REV_ID_Pos)
#define IS_DEVICE_REV_A() (DEVICE_REVISION() == 0x1000)

/******************************* DEVICE ID  ************************************/
#define DEVICE_ID() ((DBGMCU->IDCODE) & (DBGMCU_IDCODE_DEV_ID_Msk))

/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* __STM32MP257Cxx_CM33_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
